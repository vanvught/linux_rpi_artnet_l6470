In archive lib_linux/libnetwork.a:

networkconst.o:     file format elf64-x86-64


networkparamsconst.o:     file format elf64-x86-64


network.o:     file format elf64-x86-64


Disassembly of section .text._ZN7Network11SetZeroconfEv:

0000000000000000 <Network::SetZeroconf()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	b8 00 00 00 00       	mov    $0x0,%eax
  11:	5d                   	pop    %rbp
  12:	c3                   	ret    

Disassembly of section .text._ZN7Network10EnableDhcpEv:

0000000000000000 <Network::EnableDhcp()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	b8 00 00 00 00       	mov    $0x0,%eax
  11:	5d                   	pop    %rbp
  12:	c3                   	ret    

Disassembly of section .text._ZNK7Network14GetNetmaskCIDREv:

0000000000000000 <Network::GetNetmaskCIDR() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 40 18             	mov    0x18(%rax),%eax
  17:	89 c0                	mov    %eax,%eax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <Network::GetNetmaskCIDR() const+0x21>
  21:	c9                   	leave  
  22:	c3                   	ret    

Disassembly of section .text._ZNK7Network14GetBroadcastIpEv:

0000000000000000 <Network::GetBroadcastIp() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 50 10             	mov    0x10(%rax),%edx
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	8b 40 18             	mov    0x18(%rax),%eax
  1a:	f7 d0                	not    %eax
  1c:	09 d0                	or     %edx,%eax
  1e:	5d                   	pop    %rbp
  1f:	c3                   	ret    

Disassembly of section .text._ZNK7Network10IsDhcpUsedEv:

0000000000000000 <Network::IsDhcpUsed() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  14:	5d                   	pop    %rbp
  15:	c3                   	ret    

Disassembly of section .text._ZNK7Network14IsZeroconfUsedEv:

0000000000000000 <Network::IsZeroconfUsed() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  14:	5d                   	pop    %rbp
  15:	c3                   	ret    

Disassembly of section .text._ZN7Network17GetAddressingModeEv:

0000000000000000 <Network::GetAddressingMode()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	e8 00 00 00 00       	call   15 <Network::GetAddressingMode()+0x15>
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	call   1d <Network::GetAddressingMode()+0x1d>
  1d:	84 c0                	test   %al,%al
  1f:	74 07                	je     28 <Network::GetAddressingMode()+0x28>
  21:	b8 5a 00 00 00       	mov    $0x5a,%eax
  26:	eb 35                	jmp    5d <Network::GetAddressingMode()+0x5d>
  28:	e8 00 00 00 00       	call   2d <Network::GetAddressingMode()+0x2d>
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	call   35 <Network::GetAddressingMode()+0x35>
  35:	84 c0                	test   %al,%al
  37:	74 1f                	je     58 <Network::GetAddressingMode()+0x58>
  39:	e8 00 00 00 00       	call   3e <Network::GetAddressingMode()+0x3e>
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	call   46 <Network::GetAddressingMode()+0x46>
  46:	84 c0                	test   %al,%al
  48:	74 07                	je     51 <Network::GetAddressingMode()+0x51>
  4a:	b8 44 00 00 00       	mov    $0x44,%eax
  4f:	eb 0c                	jmp    5d <Network::GetAddressingMode()+0x5d>
  51:	b8 53 00 00 00       	mov    $0x53,%eax
  56:	eb 05                	jmp    5d <Network::GetAddressingMode()+0x5d>
  58:	b8 55 00 00 00       	mov    $0x55,%eax
  5d:	c9                   	leave  
  5e:	c3                   	ret    

Disassembly of section .text._ZNK7Network11IsDhcpKnownEv:

0000000000000000 <Network::IsDhcpKnown() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	b8 01 00 00 00       	mov    $0x1,%eax
  11:	5d                   	pop    %rbp
  12:	c3                   	ret    

Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # f <Network::Get()+0xf>
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text._ZN7Network15isQueuedMaskSetEj:

0000000000000000 <Network::isQueuedMaskSet(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	8b 80 c0 00 00 00    	mov    0xc0(%rax),%eax
  19:	23 45 f4             	and    -0xc(%rbp),%eax
  1c:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  1f:	0f 94 c0             	sete   %al
  22:	5d                   	pop    %rbp
  23:	c3                   	ret    

Disassembly of section .text._ZNK13NetworkParams12GetNtpServerEv:

0000000000000000 <NetworkParams::GetNtpServer() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 40 00 00 00       	mov    $0x40,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <NetworkParams::GetNtpServer() const+0x21>
  21:	83 f0 01             	xor    $0x1,%eax
  24:	84 c0                	test   %al,%al
  26:	74 07                	je     2f <NetworkParams::GetNtpServer() const+0x2f>
  28:	b8 00 00 00 00       	mov    $0x0,%eax
  2d:	eb 07                	jmp    36 <NetworkParams::GetNtpServer() const+0x36>
  2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  33:	8b 40 5d             	mov    0x5d(%rax),%eax
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZNK13NetworkParams9isMaskSetEj:

0000000000000000 <NetworkParams::isMaskSet(unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	8b 40 08             	mov    0x8(%rax),%eax
  16:	23 45 f4             	and    -0xc(%rbp),%eax
  19:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  1c:	0f 94 c0             	sete   %al
  1f:	5d                   	pop    %rbp
  20:	c3                   	ret    

Disassembly of section .text._ZN7Network12QueuedConfigC2Ev:

0000000000000000 <Network::QueuedConfig::QueuedConfig()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  2c:	90                   	nop
  2d:	5d                   	pop    %rbp
  2e:	c3                   	ret    

Disassembly of section .text._ZN7NetworkC2Ev:

0000000000000000 <Network::Network()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	c6 00 01             	movb   $0x1,(%rax)
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	c6 40 01 00          	movb   $0x0,0x1(%rax)
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	c6 40 02 01          	movb   $0x1,0x2(%rax)
  27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2b:	c6 40 03 00          	movb   $0x0,0x3(%rax)
  2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  33:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	66 0f ef c0          	pxor   %xmm0,%xmm0
  4d:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
  5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  61:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
  68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6c:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	48 c7 80 b8 00 00 00 	movq   $0x0,0xb8(%rax)
  7e:	00 00 00 00 
  82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  86:	48 05 c0 00 00 00    	add    $0xc0,%rax
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	call   94 <Network::Network()+0x94>
  94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  98:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 9f <Network::Network()+0x9f>
  9f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a3:	c6 80 9c 00 00 00 00 	movb   $0x0,0x9c(%rax)
  aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ae:	c6 40 1c 00          	movb   $0x0,0x1c(%rax)
  b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b6:	c6 40 5c 00          	movb   $0x0,0x5c(%rax)
  ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  be:	c6 80 a2 00 00 00 00 	movb   $0x0,0xa2(%rax)
  c5:	90                   	nop
  c6:	c9                   	leave  
  c7:	c3                   	ret    

Disassembly of section .text._ZN7NetworkD2Ev:

0000000000000000 <Network::~Network()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  17:	eb 43                	jmp    5c <Network::~Network()+0x5c>
  19:	8b 45 fc             	mov    -0x4(%rbp),%eax
  1c:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  23:	00 
  24:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2b <Network::~Network()+0x2b>
  2b:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  2e:	85 c0                	test   %eax,%eax
  30:	74 26                	je     58 <Network::~Network()+0x58>
  32:	8b 45 fc             	mov    -0x4(%rbp),%eax
  35:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  3c:	00 
  3d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 44 <Network::~Network()+0x44>
  44:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  47:	0f b7 d0             	movzwl %ax,%edx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	89 d6                	mov    %edx,%esi
  50:	48 89 c7             	mov    %rax,%rdi
  53:	e8 00 00 00 00       	call   58 <Network::~Network()+0x58>
  58:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  5c:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
  60:	76 b7                	jbe    19 <Network::~Network()+0x19>
  62:	90                   	nop
  63:	90                   	nop
  64:	c9                   	leave  
  65:	c3                   	ret    

Disassembly of section .text._ZN7Network4InitEPKc:

0000000000000000 <Network::Init(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
   f:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
  16:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
  33:	eb 36                	jmp    6b <Network::Init(char const*)+0x6b>
  35:	8b 45 84             	mov    -0x7c(%rbp),%eax
  38:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  3f:	00 
  40:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 47 <Network::Init(char const*)+0x47>
  47:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
  4e:	8b 45 84             	mov    -0x7c(%rbp),%eax
  51:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  58:	00 
  59:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 60 <Network::Init(char const*)+0x60>
  60:	c7 04 02 ff ff ff ff 	movl   $0xffffffff,(%rdx,%rax,1)
  67:	83 45 84 01          	addl   $0x1,-0x7c(%rbp)
  6b:	83 7d 84 1f          	cmpl   $0x1f,-0x7c(%rbp)
  6f:	76 c4                	jbe    35 <Network::Init(char const*)+0x35>
  71:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  75:	be 00 00 00 00       	mov    $0x0,%esi
  7a:	48 89 c7             	mov    %rax,%rdi
  7d:	e8 00 00 00 00       	call   82 <Network::Init(char const*)+0x82>
  82:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  86:	48 89 c7             	mov    %rax,%rdi
  89:	e8 00 00 00 00       	call   8e <Network::Init(char const*)+0x8e>
  8e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  92:	48 89 c7             	mov    %rax,%rdi
  95:	e8 00 00 00 00       	call   9a <Network::Init(char const*)+0x9a>
  9a:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	call   a6 <Network::Init(char const*)+0xa6>
  a6:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  ad:	89 42 08             	mov    %eax,0x8(%rdx)
  b0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  b7:	48 8d 90 a2 00 00 00 	lea    0xa2(%rax),%rdx
  be:	48 8b b5 70 ff ff ff 	mov    -0x90(%rbp),%rsi
  c5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  cc:	b9 10 00 00 00       	mov    $0x10,%ecx
  d1:	48 89 c7             	mov    %rax,%rdi
  d4:	e8 00 00 00 00       	call   d9 <Network::Init(char const*)+0xd9>
  d9:	85 c0                	test   %eax,%eax
  db:	0f 94 c0             	sete   %al
  de:	84 c0                	test   %al,%al
  e0:	75 25                	jne    107 <Network::Init(char const*)+0x107>
  e2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  e9:	48 8d 88 a2 00 00 00 	lea    0xa2(%rax),%rcx
  f0:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  f7:	ba 0f 00 00 00       	mov    $0xf,%edx
  fc:	48 89 c6             	mov    %rax,%rsi
  ff:	48 89 cf             	mov    %rcx,%rdi
 102:	e8 00 00 00 00       	call   107 <Network::Init(char const*)+0x107>
 107:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 10e:	48 8d 90 a2 00 00 00 	lea    0xa2(%rax),%rdx
 115:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 11c:	48 89 d6             	mov    %rdx,%rsi
 11f:	48 89 c7             	mov    %rax,%rdi
 122:	e8 00 00 00 00       	call   127 <Network::Init(char const*)+0x127>
 127:	89 45 8c             	mov    %eax,-0x74(%rbp)
 12a:	83 7d 8c 00          	cmpl   $0x0,-0x74(%rbp)
 12e:	79 2d                	jns    15d <Network::Init(char const*)+0x15d>
 130:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 137 <Network::Init(char const*)+0x137>
 137:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
 13e:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 145 <Network::Init(char const*)+0x145>
 145:	48 89 ce             	mov    %rcx,%rsi
 148:	48 89 c7             	mov    %rax,%rdi
 14b:	b8 00 00 00 00       	mov    $0x0,%eax
 150:	e8 00 00 00 00       	call   155 <Network::Init(char const*)+0x155>
 155:	8b 45 8c             	mov    -0x74(%rbp),%eax
 158:	e9 72 01 00 00       	jmp    2cf <Network::Init(char const*)+0x2cf>
 15d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 164:	48 8d 90 a2 00 00 00 	lea    0xa2(%rax),%rdx
 16b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 172:	48 89 d6             	mov    %rdx,%rsi
 175:	48 89 c7             	mov    %rax,%rdi
 178:	e8 00 00 00 00       	call   17d <Network::Init(char const*)+0x17d>
 17d:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
 184:	88 42 01             	mov    %al,0x1(%rdx)
 187:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 18e:	48 05 a2 00 00 00    	add    $0xa2,%rax
 194:	48 89 c7             	mov    %rax,%rdi
 197:	e8 00 00 00 00       	call   19c <Network::Init(char const*)+0x19c>
 19c:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
 1a3:	89 42 04             	mov    %eax,0x4(%rdx)
 1a6:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 1ad:	8b 40 04             	mov    0x4(%rax),%eax
 1b0:	85 c0                	test   %eax,%eax
 1b2:	75 19                	jne    1cd <Network::Init(char const*)+0x1cd>
 1b4:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1bb <Network::Init(char const*)+0x1bb>
 1bb:	48 89 c7             	mov    %rax,%rdi
 1be:	e8 00 00 00 00       	call   1c3 <Network::Init(char const*)+0x1c3>
 1c3:	bf 01 00 00 00       	mov    $0x1,%edi
 1c8:	e8 00 00 00 00       	call   1cd <Network::Init(char const*)+0x1cd>
 1cd:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 1d4:	48 83 c0 1c          	add    $0x1c,%rax
 1d8:	ba 40 00 00 00       	mov    $0x40,%edx
 1dd:	be 00 00 00 00       	mov    $0x0,%esi
 1e2:	48 89 c7             	mov    %rax,%rdi
 1e5:	e8 00 00 00 00       	call   1ea <Network::Init(char const*)+0x1ea>
 1ea:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 1f1:	48 83 c0 1c          	add    $0x1c,%rax
 1f5:	be 40 00 00 00       	mov    $0x40,%esi
 1fa:	48 89 c7             	mov    %rax,%rdi
 1fd:	e8 00 00 00 00       	call   202 <Network::Init(char const*)+0x202>
 202:	c1 e8 1f             	shr    $0x1f,%eax
 205:	84 c0                	test   %al,%al
 207:	74 0f                	je     218 <Network::Init(char const*)+0x218>
 209:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 210 <Network::Init(char const*)+0x210>
 210:	48 89 c7             	mov    %rax,%rdi
 213:	e8 00 00 00 00       	call   218 <Network::Init(char const*)+0x218>
 218:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
 21f:	eb 04                	jmp    225 <Network::Init(char const*)+0x225>
 221:	83 45 84 01          	addl   $0x1,-0x7c(%rbp)
 225:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
 22c:	8b 45 84             	mov    -0x7c(%rbp),%eax
 22f:	0f b6 44 02 1c       	movzbl 0x1c(%rdx,%rax,1),%eax
 234:	84 c0                	test   %al,%al
 236:	74 19                	je     251 <Network::Init(char const*)+0x251>
 238:	83 7d 84 3f          	cmpl   $0x3f,-0x7c(%rbp)
 23c:	77 13                	ja     251 <Network::Init(char const*)+0x251>
 23e:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
 245:	8b 45 84             	mov    -0x7c(%rbp),%eax
 248:	0f b6 44 02 1c       	movzbl 0x1c(%rdx,%rax,1),%eax
 24d:	3c 2e                	cmp    $0x2e,%al
 24f:	75 d0                	jne    221 <Network::Init(char const*)+0x221>
 251:	8b 55 84             	mov    -0x7c(%rbp),%edx
 254:	8d 42 01             	lea    0x1(%rdx),%eax
 257:	89 45 84             	mov    %eax,-0x7c(%rbp)
 25a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 261:	89 d2                	mov    %edx,%edx
 263:	c6 44 10 1c 00       	movb   $0x0,0x1c(%rax,%rdx,1)
 268:	c7 45 88 00 00 00 00 	movl   $0x0,-0x78(%rbp)
 26f:	eb 2d                	jmp    29e <Network::Init(char const*)+0x29e>
 271:	8b 55 84             	mov    -0x7c(%rbp),%edx
 274:	8d 42 01             	lea    0x1(%rdx),%eax
 277:	89 45 84             	mov    %eax,-0x7c(%rbp)
 27a:	8b 4d 88             	mov    -0x78(%rbp),%ecx
 27d:	8d 41 01             	lea    0x1(%rcx),%eax
 280:	89 45 88             	mov    %eax,-0x78(%rbp)
 283:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 28a:	89 d2                	mov    %edx,%edx
 28c:	0f b6 54 10 1c       	movzbl 0x1c(%rax,%rdx,1),%edx
 291:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 298:	89 c9                	mov    %ecx,%ecx
 29a:	88 54 08 5c          	mov    %dl,0x5c(%rax,%rcx,1)
 29e:	83 7d 88 3f          	cmpl   $0x3f,-0x78(%rbp)
 2a2:	77 19                	ja     2bd <Network::Init(char const*)+0x2bd>
 2a4:	83 7d 84 3f          	cmpl   $0x3f,-0x7c(%rbp)
 2a8:	77 13                	ja     2bd <Network::Init(char const*)+0x2bd>
 2aa:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
 2b1:	8b 45 84             	mov    -0x7c(%rbp),%eax
 2b4:	0f b6 44 02 1c       	movzbl 0x1c(%rdx,%rax,1),%eax
 2b9:	84 c0                	test   %al,%al
 2bb:	75 b4                	jne    271 <Network::Init(char const*)+0x271>
 2bd:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
 2c4:	8b 45 88             	mov    -0x78(%rbp),%eax
 2c7:	c6 44 02 5c 00       	movb   $0x0,0x5c(%rdx,%rax,1)
 2cc:	8b 45 8c             	mov    -0x74(%rbp),%eax
 2cf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 2d3:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 2da:	00 00 
 2dc:	74 05                	je     2e3 <Network::Init(char const*)+0x2e3>
 2de:	e8 00 00 00 00       	call   2e3 <Network::Init(char const*)+0x2e3>
 2e3:	c9                   	leave  
 2e4:	c3                   	ret    

Disassembly of section .text._ZN7Network5BeginEt:

0000000000000000 <Network::Begin(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 60          	sub    $0x60,%rsp
   c:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 a4          	mov    %ax,-0x5c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
  2c:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  33:	eb 46                	jmp    7b <Network::Begin(unsigned short)+0x7b>
  35:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  38:	48 98                	cltq   
  3a:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  41:	00 
  42:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 49 <Network::Begin(unsigned short)+0x49>
  49:	8b 14 02             	mov    (%rdx,%rax,1),%edx
  4c:	0f b7 45 a4          	movzwl -0x5c(%rbp),%eax
  50:	39 c2                	cmp    %eax,%edx
  52:	75 08                	jne    5c <Network::Begin(unsigned short)+0x5c>
  54:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  57:	e9 ad 02 00 00       	jmp    309 <Network::Begin(unsigned short)+0x309>
  5c:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  5f:	48 98                	cltq   
  61:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  68:	00 
  69:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 70 <Network::Begin(unsigned short)+0x70>
  70:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  73:	85 c0                	test   %eax,%eax
  75:	74 0c                	je     83 <Network::Begin(unsigned short)+0x83>
  77:	83 45 c4 01          	addl   $0x1,-0x3c(%rbp)
  7b:	83 7d c4 1f          	cmpl   $0x1f,-0x3c(%rbp)
  7f:	7e b4                	jle    35 <Network::Begin(unsigned short)+0x35>
  81:	eb 01                	jmp    84 <Network::Begin(unsigned short)+0x84>
  83:	90                   	nop
  84:	83 7d c4 20          	cmpl   $0x20,-0x3c(%rbp)
  88:	75 19                	jne    a3 <Network::Begin(unsigned short)+0xa3>
  8a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 91 <Network::Begin(unsigned short)+0x91>
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	call   99 <Network::Begin(unsigned short)+0x99>
  99:	bf 01 00 00 00       	mov    $0x1,%edi
  9e:	e8 00 00 00 00       	call   a3 <Network::Begin(unsigned short)+0xa3>
  a3:	ba 11 00 00 00       	mov    $0x11,%edx
  a8:	be 02 00 00 00       	mov    $0x2,%esi
  ad:	bf 02 00 00 00       	mov    $0x2,%edi
  b2:	e8 00 00 00 00       	call   b7 <Network::Begin(unsigned short)+0xb7>
  b7:	89 45 cc             	mov    %eax,-0x34(%rbp)
  ba:	83 7d cc ff          	cmpl   $0xffffffff,-0x34(%rbp)
  be:	0f 94 c0             	sete   %al
  c1:	84 c0                	test   %al,%al
  c3:	74 19                	je     de <Network::Begin(unsigned short)+0xde>
  c5:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # cc <Network::Begin(unsigned short)+0xcc>
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	call   d4 <Network::Begin(unsigned short)+0xd4>
  d4:	bf 01 00 00 00       	mov    $0x1,%edi
  d9:	e8 00 00 00 00       	call   de <Network::Begin(unsigned short)+0xde>
  de:	48 8d 55 bc          	lea    -0x44(%rbp),%rdx
  e2:	8b 45 cc             	mov    -0x34(%rbp),%eax
  e5:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  eb:	48 89 d1             	mov    %rdx,%rcx
  ee:	ba 06 00 00 00       	mov    $0x6,%edx
  f3:	be 01 00 00 00       	mov    $0x1,%esi
  f8:	89 c7                	mov    %eax,%edi
  fa:	e8 00 00 00 00       	call   ff <Network::Begin(unsigned short)+0xff>
  ff:	83 f8 ff             	cmp    $0xffffffff,%eax
 102:	0f 94 c0             	sete   %al
 105:	84 c0                	test   %al,%al
 107:	74 19                	je     122 <Network::Begin(unsigned short)+0x122>
 109:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 110 <Network::Begin(unsigned short)+0x110>
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	call   118 <Network::Begin(unsigned short)+0x118>
 118:	bf 01 00 00 00       	mov    $0x1,%edi
 11d:	e8 00 00 00 00       	call   122 <Network::Begin(unsigned short)+0x122>
 122:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
 129:	00 
 12a:	48 c7 45 d8 0a 00 00 	movq   $0xa,-0x28(%rbp)
 131:	00 
 132:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
 136:	8b 45 cc             	mov    -0x34(%rbp),%eax
 139:	41 b8 10 00 00 00    	mov    $0x10,%r8d
 13f:	48 89 d1             	mov    %rdx,%rcx
 142:	ba 14 00 00 00       	mov    $0x14,%edx
 147:	be 01 00 00 00       	mov    $0x1,%esi
 14c:	89 c7                	mov    %eax,%edi
 14e:	e8 00 00 00 00       	call   153 <Network::Begin(unsigned short)+0x153>
 153:	83 f8 ff             	cmp    $0xffffffff,%eax
 156:	0f 94 c0             	sete   %al
 159:	84 c0                	test   %al,%al
 15b:	74 19                	je     176 <Network::Begin(unsigned short)+0x176>
 15d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 164 <Network::Begin(unsigned short)+0x164>
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	call   16c <Network::Begin(unsigned short)+0x16c>
 16c:	bf 01 00 00 00       	mov    $0x1,%edi
 171:	e8 00 00 00 00       	call   176 <Network::Begin(unsigned short)+0x176>
 176:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%rbp)
 17d:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
 181:	8b 45 cc             	mov    -0x34(%rbp),%eax
 184:	41 b8 04 00 00 00    	mov    $0x4,%r8d
 18a:	48 89 d1             	mov    %rdx,%rcx
 18d:	ba 02 00 00 00       	mov    $0x2,%edx
 192:	be 01 00 00 00       	mov    $0x1,%esi
 197:	89 c7                	mov    %eax,%edi
 199:	e8 00 00 00 00       	call   19e <Network::Begin(unsigned short)+0x19e>
 19e:	83 f8 ff             	cmp    $0xffffffff,%eax
 1a1:	0f 94 c0             	sete   %al
 1a4:	84 c0                	test   %al,%al
 1a6:	74 19                	je     1c1 <Network::Begin(unsigned short)+0x1c1>
 1a8:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1af <Network::Begin(unsigned short)+0x1af>
 1af:	48 89 c7             	mov    %rax,%rdi
 1b2:	e8 00 00 00 00       	call   1b7 <Network::Begin(unsigned short)+0x1b7>
 1b7:	bf 01 00 00 00       	mov    $0x1,%edi
 1bc:	e8 00 00 00 00       	call   1c1 <Network::Begin(unsigned short)+0x1c1>
 1c1:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%rbp)
 1c8:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
 1cc:	8b 45 cc             	mov    -0x34(%rbp),%eax
 1cf:	41 b8 04 00 00 00    	mov    $0x4,%r8d
 1d5:	48 89 d1             	mov    %rdx,%rcx
 1d8:	ba 0f 00 00 00       	mov    $0xf,%edx
 1dd:	be 01 00 00 00       	mov    $0x1,%esi
 1e2:	89 c7                	mov    %eax,%edi
 1e4:	e8 00 00 00 00       	call   1e9 <Network::Begin(unsigned short)+0x1e9>
 1e9:	83 f8 ff             	cmp    $0xffffffff,%eax
 1ec:	0f 94 c0             	sete   %al
 1ef:	84 c0                	test   %al,%al
 1f1:	74 19                	je     20c <Network::Begin(unsigned short)+0x20c>
 1f3:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1fa <Network::Begin(unsigned short)+0x1fa>
 1fa:	48 89 c7             	mov    %rax,%rdi
 1fd:	e8 00 00 00 00       	call   202 <Network::Begin(unsigned short)+0x202>
 202:	bf 01 00 00 00       	mov    $0x1,%edi
 207:	e8 00 00 00 00       	call   20c <Network::Begin(unsigned short)+0x20c>
 20c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
 210:	ba 10 00 00 00       	mov    $0x10,%edx
 215:	be 00 00 00 00       	mov    $0x0,%esi
 21a:	48 89 c7             	mov    %rax,%rdi
 21d:	e8 00 00 00 00       	call   222 <Network::Begin(unsigned short)+0x222>
 222:	66 c7 45 e0 02 00    	movw   $0x2,-0x20(%rbp)
 228:	0f b7 45 a4          	movzwl -0x5c(%rbp),%eax
 22c:	89 c7                	mov    %eax,%edi
 22e:	e8 00 00 00 00       	call   233 <Network::Begin(unsigned short)+0x233>
 233:	66 89 45 e2          	mov    %ax,-0x1e(%rbp)
 237:	bf 00 00 00 00       	mov    $0x0,%edi
 23c:	e8 00 00 00 00       	call   241 <Network::Begin(unsigned short)+0x241>
 241:	89 45 e4             	mov    %eax,-0x1c(%rbp)
 244:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
 248:	8b 45 cc             	mov    -0x34(%rbp),%eax
 24b:	ba 10 00 00 00       	mov    $0x10,%edx
 250:	48 89 ce             	mov    %rcx,%rsi
 253:	89 c7                	mov    %eax,%edi
 255:	e8 00 00 00 00       	call   25a <Network::Begin(unsigned short)+0x25a>
 25a:	83 f8 ff             	cmp    $0xffffffff,%eax
 25d:	0f 94 c0             	sete   %al
 260:	84 c0                	test   %al,%al
 262:	74 59                	je     2bd <Network::Begin(unsigned short)+0x2bd>
 264:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26b <Network::Begin(unsigned short)+0x26b>
 26b:	48 89 c7             	mov    %rax,%rdi
 26e:	e8 00 00 00 00       	call   273 <Network::Begin(unsigned short)+0x273>
 273:	0f b7 75 a4          	movzwl -0x5c(%rbp),%esi
 277:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 27a:	c1 e8 18             	shr    $0x18,%eax
 27d:	89 c7                	mov    %eax,%edi
 27f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 282:	c1 e8 10             	shr    $0x10,%eax
 285:	0f b6 c8             	movzbl %al,%ecx
 288:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 28b:	c1 e8 08             	shr    $0x8,%eax
 28e:	0f b6 d0             	movzbl %al,%edx
 291:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 294:	0f b6 c0             	movzbl %al,%eax
 297:	41 89 f1             	mov    %esi,%r9d
 29a:	41 89 f8             	mov    %edi,%r8d
 29d:	89 c6                	mov    %eax,%esi
 29f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2a6 <Network::Begin(unsigned short)+0x2a6>
 2a6:	48 89 c7             	mov    %rax,%rdi
 2a9:	b8 00 00 00 00       	mov    $0x0,%eax
 2ae:	e8 00 00 00 00       	call   2b3 <Network::Begin(unsigned short)+0x2b3>
 2b3:	bf 01 00 00 00       	mov    $0x1,%edi
 2b8:	e8 00 00 00 00       	call   2bd <Network::Begin(unsigned short)+0x2bd>
 2bd:	0f b7 45 a4          	movzwl -0x5c(%rbp),%eax
 2c1:	8b 55 c4             	mov    -0x3c(%rbp),%edx
 2c4:	48 63 d2             	movslq %edx,%rdx
 2c7:	48 8d 0c 95 00 00 00 	lea    0x0(,%rdx,4),%rcx
 2ce:	00 
 2cf:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d6 <Network::Begin(unsigned short)+0x2d6>
 2d6:	89 04 11             	mov    %eax,(%rcx,%rdx,1)
 2d9:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
 2e0:	eb 04                	jmp    2e6 <Network::Begin(unsigned short)+0x2e6>
 2e2:	83 45 c8 01          	addl   $0x1,-0x38(%rbp)
 2e6:	83 7d c8 1f          	cmpl   $0x1f,-0x38(%rbp)
 2ea:	76 f6                	jbe    2e2 <Network::Begin(unsigned short)+0x2e2>
 2ec:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 2ef:	48 98                	cltq   
 2f1:	48 8d 0c 85 00 00 00 	lea    0x0(,%rax,4),%rcx
 2f8:	00 
 2f9:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 300 <Network::Begin(unsigned short)+0x300>
 300:	8b 45 cc             	mov    -0x34(%rbp),%eax
 303:	89 04 11             	mov    %eax,(%rcx,%rdx,1)
 306:	8b 45 cc             	mov    -0x34(%rbp),%eax
 309:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 30d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 314:	00 00 
 316:	74 05                	je     31d <Network::Begin(unsigned short)+0x31d>
 318:	e8 00 00 00 00       	call   31d <Network::Begin(unsigned short)+0x31d>
 31d:	c9                   	leave  
 31e:	c3                   	ret    

Disassembly of section .text._ZN7Network16MacAddressCopyToEPh:

0000000000000000 <Network::MacAddressCopyTo(unsigned char*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  17:	eb 20                	jmp    39 <Network::MacAddressCopyTo(unsigned char*)+0x39>
  19:	8b 55 fc             	mov    -0x4(%rbp),%edx
  1c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  20:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  24:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  28:	8b 45 fc             	mov    -0x4(%rbp),%eax
  2b:	0f b6 84 02 9c 00 00 	movzbl 0x9c(%rdx,%rax,1),%eax
  32:	00 
  33:	88 01                	mov    %al,(%rcx)
  35:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  39:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)
  3d:	76 da                	jbe    19 <Network::MacAddressCopyTo(unsigned char*)+0x19>
  3f:	90                   	nop
  40:	90                   	nop
  41:	5d                   	pop    %rbp
  42:	c3                   	ret    

Disassembly of section .text._ZN7Network3EndEt:

0000000000000000 <Network::End(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  1d:	eb 04                	jmp    23 <Network::End(unsigned short)+0x23>
  1f:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  23:	83 7d f8 1f          	cmpl   $0x1f,-0x8(%rbp)
  27:	76 f6                	jbe    1f <Network::End(unsigned short)+0x1f>
  29:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  30:	e9 b1 00 00 00       	jmp    e6 <Network::End(unsigned short)+0xe6>
  35:	8b 45 fc             	mov    -0x4(%rbp),%eax
  38:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  3f:	00 
  40:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 47 <Network::End(unsigned short)+0x47>
  47:	8b 14 02             	mov    (%rdx,%rax,1),%edx
  4a:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  4e:	39 c2                	cmp    %eax,%edx
  50:	0f 85 8c 00 00 00    	jne    e2 <Network::End(unsigned short)+0xe2>
  56:	8b 45 fc             	mov    -0x4(%rbp),%eax
  59:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  60:	00 
  61:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 68 <Network::End(unsigned short)+0x68>
  68:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
  6f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 76 <Network::End(unsigned short)+0x76>
  76:	48 89 c7             	mov    %rax,%rdi
  79:	b8 00 00 00 00       	mov    $0x0,%eax
  7e:	e8 00 00 00 00       	call   83 <Network::End(unsigned short)+0x83>
  83:	8b 45 fc             	mov    -0x4(%rbp),%eax
  86:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  8d:	00 
  8e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 95 <Network::End(unsigned short)+0x95>
  95:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  98:	89 c7                	mov    %eax,%edi
  9a:	e8 00 00 00 00       	call   9f <Network::End(unsigned short)+0x9f>
  9f:	83 f8 ff             	cmp    $0xffffffff,%eax
  a2:	0f 94 c0             	sete   %al
  a5:	84 c0                	test   %al,%al
  a7:	74 19                	je     c2 <Network::End(unsigned short)+0xc2>
  a9:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # b0 <Network::End(unsigned short)+0xb0>
  b0:	48 89 c7             	mov    %rax,%rdi
  b3:	e8 00 00 00 00       	call   b8 <Network::End(unsigned short)+0xb8>
  b8:	bf 01 00 00 00       	mov    $0x1,%edi
  bd:	e8 00 00 00 00       	call   c2 <Network::End(unsigned short)+0xc2>
  c2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  c5:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  cc:	00 
  cd:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d4 <Network::End(unsigned short)+0xd4>
  d4:	c7 04 02 ff ff ff ff 	movl   $0xffffffff,(%rdx,%rax,1)
  db:	b8 00 00 00 00       	mov    $0x0,%eax
  e0:	eb 22                	jmp    104 <Network::End(unsigned short)+0x104>
  e2:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  e6:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
  ea:	0f 86 45 ff ff ff    	jbe    35 <Network::End(unsigned short)+0x35>
  f0:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # f7 <Network::End(unsigned short)+0xf7>
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	call   ff <Network::End(unsigned short)+0xff>
  ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 104:	c9                   	leave  
 105:	c3                   	ret    

Disassembly of section .text._ZN7Network5SetIpEj:

0000000000000000 <Network::SetIp(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 50          	sub    $0x50,%rsp
   c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  10:	89 75 b4             	mov    %esi,-0x4c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  26:	8b 40 10             	mov    0x10(%rax),%eax
  29:	39 45 b4             	cmp    %eax,-0x4c(%rbp)
  2c:	0f 84 50 01 00 00    	je     182 <Network::SetIp(unsigned int)+0x182>
  32:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  36:	48 83 c0 10          	add    $0x10,%rax
  3a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  3e:	ba 00 00 00 00       	mov    $0x0,%edx
  43:	be 02 00 00 00       	mov    $0x2,%esi
  48:	bf 02 00 00 00       	mov    $0x2,%edi
  4d:	e8 00 00 00 00       	call   52 <Network::SetIp(unsigned int)+0x52>
  52:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  55:	83 7d c4 ff          	cmpl   $0xffffffff,-0x3c(%rbp)
  59:	75 14                	jne    6f <Network::SetIp(unsigned int)+0x6f>
  5b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 62 <Network::SetIp(unsigned int)+0x62>
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	call   6a <Network::SetIp(unsigned int)+0x6a>
  6a:	e9 14 01 00 00       	jmp    183 <Network::SetIp(unsigned int)+0x183>
  6f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  73:	48 8d 88 a2 00 00 00 	lea    0xa2(%rax),%rcx
  7a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  7e:	ba 10 00 00 00       	mov    $0x10,%edx
  83:	48 89 ce             	mov    %rcx,%rsi
  86:	48 89 c7             	mov    %rax,%rdi
  89:	e8 00 00 00 00       	call   8e <Network::SetIp(unsigned int)+0x8e>
  8e:	66 c7 45 e0 02 00    	movw   $0x2,-0x20(%rbp)
  94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  98:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  9b:	89 50 04             	mov    %edx,0x4(%rax)
  9e:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  a2:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  a5:	be 16 89 00 00       	mov    $0x8916,%esi
  aa:	89 c7                	mov    %eax,%edi
  ac:	b8 00 00 00 00       	mov    $0x0,%eax
  b1:	e8 00 00 00 00       	call   b6 <Network::SetIp(unsigned int)+0xb6>
  b6:	83 f8 ff             	cmp    $0xffffffff,%eax
  b9:	0f 94 c0             	sete   %al
  bc:	84 c0                	test   %al,%al
  be:	74 14                	je     d4 <Network::SetIp(unsigned int)+0xd4>
  c0:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c7 <Network::SetIp(unsigned int)+0xc7>
  c7:	48 89 c7             	mov    %rax,%rdi
  ca:	e8 00 00 00 00       	call   cf <Network::SetIp(unsigned int)+0xcf>
  cf:	e9 af 00 00 00       	jmp    183 <Network::SetIp(unsigned int)+0x183>
  d4:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  d8:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  db:	be 13 89 00 00       	mov    $0x8913,%esi
  e0:	89 c7                	mov    %eax,%edi
  e2:	b8 00 00 00 00       	mov    $0x0,%eax
  e7:	e8 00 00 00 00       	call   ec <Network::SetIp(unsigned int)+0xec>
  ec:	83 f8 ff             	cmp    $0xffffffff,%eax
  ef:	0f 94 c0             	sete   %al
  f2:	84 c0                	test   %al,%al
  f4:	74 11                	je     107 <Network::SetIp(unsigned int)+0x107>
  f6:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # fd <Network::SetIp(unsigned int)+0xfd>
  fd:	48 89 c7             	mov    %rax,%rdi
 100:	e8 00 00 00 00       	call   105 <Network::SetIp(unsigned int)+0x105>
 105:	eb 7c                	jmp    183 <Network::SetIp(unsigned int)+0x183>
 107:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 10b:	48 8d 88 a2 00 00 00 	lea    0xa2(%rax),%rcx
 112:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 116:	ba 10 00 00 00       	mov    $0x10,%edx
 11b:	48 89 ce             	mov    %rcx,%rsi
 11e:	48 89 c7             	mov    %rax,%rdi
 121:	e8 00 00 00 00       	call   126 <Network::SetIp(unsigned int)+0x126>
 126:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
 12a:	83 c8 41             	or     $0x41,%eax
 12d:	66 89 45 e0          	mov    %ax,-0x20(%rbp)
 131:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
 135:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 138:	be 14 89 00 00       	mov    $0x8914,%esi
 13d:	89 c7                	mov    %eax,%edi
 13f:	b8 00 00 00 00       	mov    $0x0,%eax
 144:	e8 00 00 00 00       	call   149 <Network::SetIp(unsigned int)+0x149>
 149:	83 f8 ff             	cmp    $0xffffffff,%eax
 14c:	0f 94 c0             	sete   %al
 14f:	84 c0                	test   %al,%al
 151:	74 11                	je     164 <Network::SetIp(unsigned int)+0x164>
 153:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 15a <Network::SetIp(unsigned int)+0x15a>
 15a:	48 89 c7             	mov    %rax,%rdi
 15d:	e8 00 00 00 00       	call   162 <Network::SetIp(unsigned int)+0x162>
 162:	eb 1f                	jmp    183 <Network::SetIp(unsigned int)+0x183>
 164:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 167:	89 c7                	mov    %eax,%edi
 169:	e8 00 00 00 00       	call   16e <Network::SetIp(unsigned int)+0x16e>
 16e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 172:	c6 40 01 00          	movb   $0x0,0x1(%rax)
 176:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 17a:	8b 55 b4             	mov    -0x4c(%rbp),%edx
 17d:	89 50 10             	mov    %edx,0x10(%rax)
 180:	eb 01                	jmp    183 <Network::SetIp(unsigned int)+0x183>
 182:	90                   	nop
 183:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 187:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 18e:	00 00 
 190:	74 05                	je     197 <Network::SetIp(unsigned int)+0x197>
 192:	e8 00 00 00 00       	call   197 <Network::SetIp(unsigned int)+0x197>
 197:	c9                   	leave  
 198:	c3                   	ret    

Disassembly of section .text._ZN7Network10SetNetmaskEj:

0000000000000000 <Network::SetNetmask(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	8b 55 f4             	mov    -0xc(%rbp),%edx
  16:	89 50 18             	mov    %edx,0x18(%rax)
  19:	90                   	nop
  1a:	5d                   	pop    %rbp
  1b:	c3                   	ret    

Disassembly of section .text._ZN7Network12SetGatewayIpEj:

0000000000000000 <Network::SetGatewayIp(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	8b 55 f4             	mov    -0xc(%rbp),%edx
  16:	89 50 14             	mov    %edx,0x14(%rax)
  19:	90                   	nop
  1a:	5d                   	pop    %rbp
  1b:	c3                   	ret    

Disassembly of section .text._ZN7Network9JoinGroupEij:

0000000000000000 <Network::JoinGroup(int, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	8b 45 e0             	mov    -0x20(%rbp),%eax
  28:	89 45 f0             	mov    %eax,-0x10(%rbp)
  2b:	bf 00 00 00 00       	mov    $0x0,%edi
  30:	e8 00 00 00 00       	call   35 <Network::JoinGroup(int, unsigned int)+0x35>
  35:	89 45 f4             	mov    %eax,-0xc(%rbp)
  38:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  3c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  3f:	41 b8 08 00 00 00    	mov    $0x8,%r8d
  45:	48 89 d1             	mov    %rdx,%rcx
  48:	ba 23 00 00 00       	mov    $0x23,%edx
  4d:	be 00 00 00 00       	mov    $0x0,%esi
  52:	89 c7                	mov    %eax,%edi
  54:	e8 00 00 00 00       	call   59 <Network::JoinGroup(int, unsigned int)+0x59>
  59:	c1 e8 1f             	shr    $0x1f,%eax
  5c:	84 c0                	test   %al,%al
  5e:	74 0f                	je     6f <Network::JoinGroup(int, unsigned int)+0x6f>
  60:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 67 <Network::JoinGroup(int, unsigned int)+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	call   6f <Network::JoinGroup(int, unsigned int)+0x6f>
  6f:	90                   	nop
  70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  74:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  7b:	00 00 
  7d:	74 05                	je     84 <Network::JoinGroup(int, unsigned int)+0x84>
  7f:	e8 00 00 00 00       	call   84 <Network::JoinGroup(int, unsigned int)+0x84>
  84:	c9                   	leave  
  85:	c3                   	ret    

Disassembly of section .text._ZN7Network10LeaveGroupEij:

0000000000000000 <Network::LeaveGroup(int, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	8b 45 e0             	mov    -0x20(%rbp),%eax
  28:	89 45 f0             	mov    %eax,-0x10(%rbp)
  2b:	bf 00 00 00 00       	mov    $0x0,%edi
  30:	e8 00 00 00 00       	call   35 <Network::LeaveGroup(int, unsigned int)+0x35>
  35:	89 45 f4             	mov    %eax,-0xc(%rbp)
  38:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  3c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  3f:	41 b8 08 00 00 00    	mov    $0x8,%r8d
  45:	48 89 d1             	mov    %rdx,%rcx
  48:	ba 24 00 00 00       	mov    $0x24,%edx
  4d:	be 00 00 00 00       	mov    $0x0,%esi
  52:	89 c7                	mov    %eax,%edi
  54:	e8 00 00 00 00       	call   59 <Network::LeaveGroup(int, unsigned int)+0x59>
  59:	c1 e8 1f             	shr    $0x1f,%eax
  5c:	84 c0                	test   %al,%al
  5e:	74 0f                	je     6f <Network::LeaveGroup(int, unsigned int)+0x6f>
  60:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 67 <Network::LeaveGroup(int, unsigned int)+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	call   6f <Network::LeaveGroup(int, unsigned int)+0x6f>
  6f:	90                   	nop
  70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  74:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  7b:	00 00 
  7d:	74 05                	je     84 <Network::LeaveGroup(int, unsigned int)+0x84>
  7f:	e8 00 00 00 00       	call   84 <Network::LeaveGroup(int, unsigned int)+0x84>
  84:	c9                   	leave  
  85:	c3                   	ret    

Disassembly of section .text._ZN7Network8RecvFromEiPvtPjPt:

0000000000000000 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 60          	sub    $0x60,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  13:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  17:	89 c8                	mov    %ecx,%eax
  19:	4c 89 45 b0          	mov    %r8,-0x50(%rbp)
  1d:	4c 89 4d a8          	mov    %r9,-0x58(%rbp)
  21:	66 89 45 c0          	mov    %ax,-0x40(%rbp)
  25:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2c:	00 00 
  2e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  32:	31 c0                	xor    %eax,%eax
  34:	c7 45 d8 10 00 00 00 	movl   $0x10,-0x28(%rbp)
  3b:	0f b7 55 c0          	movzwl -0x40(%rbp),%edx
  3f:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  43:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  47:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  4b:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  4e:	49 89 f9             	mov    %rdi,%r9
  51:	49 89 c8             	mov    %rcx,%r8
  54:	b9 00 00 00 00       	mov    $0x0,%ecx
  59:	89 c7                	mov    %eax,%edi
  5b:	e8 00 00 00 00       	call   60 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x60>
  60:	89 45 dc             	mov    %eax,-0x24(%rbp)
  63:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
  67:	0f 94 c0             	sete   %al
  6a:	84 c0                	test   %al,%al
  6c:	74 2e                	je     9c <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x9c>
  6e:	e8 00 00 00 00       	call   73 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x73>
  73:	8b 00                	mov    (%rax),%eax
  75:	83 f8 0b             	cmp    $0xb,%eax
  78:	74 1b                	je     95 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x95>
  7a:	e8 00 00 00 00       	call   7f <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x7f>
  7f:	8b 00                	mov    (%rax),%eax
  81:	83 f8 0b             	cmp    $0xb,%eax
  84:	74 0f                	je     95 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x95>
  86:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 8d <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x8d>
  8d:	48 89 c7             	mov    %rax,%rdi
  90:	e8 00 00 00 00       	call   95 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x95>
  95:	b8 00 00 00 00       	mov    $0x0,%eax
  9a:	eb 21                	jmp    bd <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0xbd>
  9c:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  9f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  a3:	89 10                	mov    %edx,(%rax)
  a5:	0f b7 45 e2          	movzwl -0x1e(%rbp),%eax
  a9:	0f b7 c0             	movzwl %ax,%eax
  ac:	89 c7                	mov    %eax,%edi
  ae:	e8 00 00 00 00       	call   b3 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0xb3>
  b3:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  b7:	66 89 02             	mov    %ax,(%rdx)
  ba:	8b 45 dc             	mov    -0x24(%rbp),%eax
  bd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  c1:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  c8:	00 00 
  ca:	74 05                	je     d1 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0xd1>
  cc:	e8 00 00 00 00       	call   d1 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0xd1>
  d1:	c9                   	leave  
  d2:	c3                   	ret    

Disassembly of section .text._ZN7Network8RecvFromEiPPKvPjPt:

0000000000000000 <Network::RecvFrom(int, void const**, unsigned int*, unsigned short*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  17:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  1b:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2a <Network::RecvFrom(int, void const**, unsigned int*, unsigned short*)+0x2a>
  2a:	48 89 10             	mov    %rdx,(%rax)
  2d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  31:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  35:	8b 75 f4             	mov    -0xc(%rbp),%esi
  38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3c:	49 89 c9             	mov    %rcx,%r9
  3f:	49 89 d0             	mov    %rdx,%r8
  42:	b9 78 05 00 00       	mov    $0x578,%ecx
  47:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4e <Network::RecvFrom(int, void const**, unsigned int*, unsigned short*)+0x4e>
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <Network::RecvFrom(int, void const**, unsigned int*, unsigned short*)+0x56>
  56:	c9                   	leave  
  57:	c3                   	ret    

Disassembly of section .text._ZN7Network6SendToEiPKvtjt:

0000000000000000 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 50          	sub    $0x50,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  13:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  17:	89 c8                	mov    %ecx,%eax
  19:	44 89 45 b4          	mov    %r8d,-0x4c(%rbp)
  1d:	44 89 ca             	mov    %r9d,%edx
  20:	66 89 45 c0          	mov    %ax,-0x40(%rbp)
  24:	89 d0                	mov    %edx,%eax
  26:	66 89 45 b0          	mov    %ax,-0x50(%rbp)
  2a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  31:	00 00 
  33:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  37:	31 c0                	xor    %eax,%eax
  39:	c7 45 dc 10 00 00 00 	movl   $0x10,-0x24(%rbp)
  40:	66 c7 45 e0 02 00    	movw   $0x2,-0x20(%rbp)
  46:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  49:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  4c:	0f b7 45 b0          	movzwl -0x50(%rbp),%eax
  50:	89 c7                	mov    %eax,%edi
  52:	e8 00 00 00 00       	call   57 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)+0x57>
  57:	66 89 45 e2          	mov    %ax,-0x1e(%rbp)
  5b:	0f b7 55 c0          	movzwl -0x40(%rbp),%edx
  5f:	8b 7d dc             	mov    -0x24(%rbp),%edi
  62:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  66:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  6a:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  6d:	41 89 f9             	mov    %edi,%r9d
  70:	49 89 c8             	mov    %rcx,%r8
  73:	b9 00 00 00 00       	mov    $0x0,%ecx
  78:	89 c7                	mov    %eax,%edi
  7a:	e8 00 00 00 00       	call   7f <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)+0x7f>
  7f:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  83:	0f 94 c0             	sete   %al
  86:	84 c0                	test   %al,%al
  88:	74 0f                	je     99 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)+0x99>
  8a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 91 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)+0x91>
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	call   99 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)+0x99>
  99:	90                   	nop
  9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  9e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  a5:	00 00 
  a7:	74 05                	je     ae <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)+0xae>
  a9:	e8 00 00 00 00       	call   ae <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)+0xae>
  ae:	c9                   	leave  
  af:	c3                   	ret    

Disassembly of section .text._ZN7Network10IsDhclientEPKc:

0000000000000000 <Network::IsDhclient(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 30 05 00 00 	sub    $0x530,%rsp
   f:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
  16:	48 89 b5 d0 fa ff ff 	mov    %rsi,-0x530(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8d 85 f0 fa ff ff 	lea    -0x510(%rbp),%rax
  33:	ba ff 00 00 00       	mov    $0xff,%edx
  38:	be 00 00 00 00       	mov    $0x0,%esi
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	call   45 <Network::IsDhclient(char const*)+0x45>
  45:	48 8d 85 f0 fb ff ff 	lea    -0x410(%rbp),%rax
  4c:	ba 00 04 00 00       	mov    $0x400,%edx
  51:	be 00 00 00 00       	mov    $0x0,%esi
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	call   5e <Network::IsDhclient(char const*)+0x5e>
  5e:	48 8b 95 d0 fa ff ff 	mov    -0x530(%rbp),%rdx
  65:	48 8d 85 f0 fa ff ff 	lea    -0x510(%rbp),%rax
  6c:	48 89 d1             	mov    %rdx,%rcx
  6f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 76 <Network::IsDhclient(char const*)+0x76>
  76:	be fe 00 00 00       	mov    $0xfe,%esi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	b8 00 00 00 00       	mov    $0x0,%eax
  83:	e8 00 00 00 00       	call   88 <Network::IsDhclient(char const*)+0x88>
  88:	48 8d 85 f0 fa ff ff 	lea    -0x510(%rbp),%rax
  8f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 96 <Network::IsDhclient(char const*)+0x96>
  96:	48 89 d6             	mov    %rdx,%rsi
  99:	48 89 c7             	mov    %rax,%rdi
  9c:	e8 00 00 00 00       	call   a1 <Network::IsDhclient(char const*)+0xa1>
  a1:	48 89 85 e8 fa ff ff 	mov    %rax,-0x518(%rbp)
  a8:	48 8b 95 e8 fa ff ff 	mov    -0x518(%rbp),%rdx
  af:	48 8d 85 f0 fb ff ff 	lea    -0x410(%rbp),%rax
  b6:	be 00 04 00 00       	mov    $0x400,%esi
  bb:	48 89 c7             	mov    %rax,%rdi
  be:	e8 00 00 00 00       	call   c3 <Network::IsDhclient(char const*)+0xc3>
  c3:	48 85 c0             	test   %rax,%rax
  c6:	0f 94 c0             	sete   %al
  c9:	84 c0                	test   %al,%al
  cb:	74 16                	je     e3 <Network::IsDhclient(char const*)+0xe3>
  cd:	48 8b 85 e8 fa ff ff 	mov    -0x518(%rbp),%rax
  d4:	48 89 c7             	mov    %rax,%rdi
  d7:	e8 00 00 00 00       	call   dc <Network::IsDhclient(char const*)+0xdc>
  dc:	b8 00 00 00 00       	mov    $0x0,%eax
  e1:	eb 47                	jmp    12a <Network::IsDhclient(char const*)+0x12a>
  e3:	48 8b 85 e8 fa ff ff 	mov    -0x518(%rbp),%rax
  ea:	48 89 c7             	mov    %rax,%rdi
  ed:	e8 00 00 00 00       	call   f2 <Network::IsDhclient(char const*)+0xf2>
  f2:	48 8d 85 f0 fb ff ff 	lea    -0x410(%rbp),%rax
  f9:	0f b6 00             	movzbl (%rax),%eax
  fc:	84 c0                	test   %al,%al
  fe:	74 25                	je     125 <Network::IsDhclient(char const*)+0x125>
 100:	48 8b 95 d0 fa ff ff 	mov    -0x530(%rbp),%rdx
 107:	48 8d 85 f0 fb ff ff 	lea    -0x410(%rbp),%rax
 10e:	48 89 d6             	mov    %rdx,%rsi
 111:	48 89 c7             	mov    %rax,%rdi
 114:	e8 00 00 00 00       	call   119 <Network::IsDhclient(char const*)+0x119>
 119:	48 85 c0             	test   %rax,%rax
 11c:	74 07                	je     125 <Network::IsDhclient(char const*)+0x125>
 11e:	b8 01 00 00 00       	mov    $0x1,%eax
 123:	eb 05                	jmp    12a <Network::IsDhclient(char const*)+0x12a>
 125:	b8 00 00 00 00       	mov    $0x0,%eax
 12a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 12e:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 135:	00 00 
 137:	74 05                	je     13e <Network::IsDhclient(char const*)+0x13e>
 139:	e8 00 00 00 00       	call   13e <Network::IsDhclient(char const*)+0x13e>
 13e:	c9                   	leave  
 13f:	c3                   	ret    

Disassembly of section .text._ZN7Network17GetDefaultGatewayEv:

0000000000000000 <Network::GetDefaultGateway()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 30 05 00 00 	sub    $0x530,%rsp
   f:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8d 85 f0 fa ff ff 	lea    -0x510(%rbp),%rax
  2c:	ba ff 00 00 00       	mov    $0xff,%edx
  31:	be 00 00 00 00       	mov    $0x0,%esi
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	call   3e <Network::GetDefaultGateway()+0x3e>
  3e:	48 8d 85 f0 fb ff ff 	lea    -0x410(%rbp),%rax
  45:	ba 00 04 00 00       	mov    $0x400,%edx
  4a:	be 00 00 00 00       	mov    $0x0,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <Network::GetDefaultGateway()+0x57>
  57:	48 8d 85 f0 fa ff ff 	lea    -0x510(%rbp),%rax
  5e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 65 <Network::GetDefaultGateway()+0x65>
  65:	be fe 00 00 00       	mov    $0xfe,%esi
  6a:	48 89 c7             	mov    %rax,%rdi
  6d:	b8 00 00 00 00       	mov    $0x0,%eax
  72:	e8 00 00 00 00       	call   77 <Network::GetDefaultGateway()+0x77>
  77:	48 8d 85 f0 fa ff ff 	lea    -0x510(%rbp),%rax
  7e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 85 <Network::GetDefaultGateway()+0x85>
  85:	48 89 d6             	mov    %rdx,%rsi
  88:	48 89 c7             	mov    %rax,%rdi
  8b:	e8 00 00 00 00       	call   90 <Network::GetDefaultGateway()+0x90>
  90:	48 89 85 e8 fa ff ff 	mov    %rax,-0x518(%rbp)
  97:	48 8b 95 e8 fa ff ff 	mov    -0x518(%rbp),%rdx
  9e:	48 8d 85 f0 fb ff ff 	lea    -0x410(%rbp),%rax
  a5:	be 00 04 00 00       	mov    $0x400,%esi
  aa:	48 89 c7             	mov    %rax,%rdi
  ad:	e8 00 00 00 00       	call   b2 <Network::GetDefaultGateway()+0xb2>
  b2:	48 85 c0             	test   %rax,%rax
  b5:	0f 94 c0             	sete   %al
  b8:	84 c0                	test   %al,%al
  ba:	74 16                	je     d2 <Network::GetDefaultGateway()+0xd2>
  bc:	48 8b 85 e8 fa ff ff 	mov    -0x518(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	call   cb <Network::GetDefaultGateway()+0xcb>
  cb:	b8 00 00 00 00       	mov    $0x0,%eax
  d0:	eb 2e                	jmp    100 <Network::GetDefaultGateway()+0x100>
  d2:	48 8b 85 e8 fa ff ff 	mov    -0x518(%rbp),%rax
  d9:	48 89 c7             	mov    %rax,%rdi
  dc:	e8 00 00 00 00       	call   e1 <Network::GetDefaultGateway()+0xe1>
  e1:	48 8d 95 e4 fa ff ff 	lea    -0x51c(%rbp),%rdx
  e8:	48 8d 85 f0 fb ff ff 	lea    -0x410(%rbp),%rax
  ef:	48 89 d6             	mov    %rdx,%rsi
  f2:	48 89 c7             	mov    %rax,%rdi
  f5:	e8 00 00 00 00       	call   fa <Network::GetDefaultGateway()+0xfa>
  fa:	8b 85 e4 fa ff ff    	mov    -0x51c(%rbp),%eax
 100:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 104:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 10b:	00 00 
 10d:	74 05                	je     114 <Network::GetDefaultGateway()+0x114>
 10f:	e8 00 00 00 00       	call   114 <Network::GetDefaultGateway()+0x114>
 114:	c9                   	leave  
 115:	c3                   	ret    

Disassembly of section .text._ZN7Network14IfGetByAddressEPKcPcm:

0000000000000000 <Network::IfGetByAddress(char const*, char*, unsigned long)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 70          	sub    $0x70,%rsp
   c:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  10:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  14:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  18:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <Network::IfGetByAddress(char const*, char*, unsigned long)+0x37>
  37:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  3b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  3f:	e9 93 00 00 00       	jmp    d7 <Network::IfGetByAddress(char const*, char*, unsigned long)+0xd7>
  44:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  48:	48 8b 40 18          	mov    0x18(%rax),%rax
  4c:	0f b7 00             	movzwl (%rax),%eax
  4f:	66 83 f8 02          	cmp    $0x2,%ax
  53:	75 77                	jne    cc <Network::IfGetByAddress(char const*, char*, unsigned long)+0xcc>
  55:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  59:	48 8b 40 18          	mov    0x18(%rax),%rax
  5d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  61:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  65:	48 8d 70 04          	lea    0x4(%rax),%rsi
  69:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  6d:	48 8b 40 18          	mov    0x18(%rax),%rax
  71:	0f b7 00             	movzwl (%rax),%eax
  74:	0f b7 c0             	movzwl %ax,%eax
  77:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  7b:	b9 20 00 00 00       	mov    $0x20,%ecx
  80:	89 c7                	mov    %eax,%edi
  82:	e8 00 00 00 00       	call   87 <Network::IfGetByAddress(char const*, char*, unsigned long)+0x87>
  87:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  8b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8f:	48 89 d6             	mov    %rdx,%rsi
  92:	48 89 c7             	mov    %rax,%rdi
  95:	e8 00 00 00 00       	call   9a <Network::IfGetByAddress(char const*, char*, unsigned long)+0x9a>
  9a:	85 c0                	test   %eax,%eax
  9c:	75 2e                	jne    cc <Network::IfGetByAddress(char const*, char*, unsigned long)+0xcc>
  9e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  a2:	48 8b 48 08          	mov    0x8(%rax),%rcx
  a6:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  aa:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  ae:	48 89 ce             	mov    %rcx,%rsi
  b1:	48 89 c7             	mov    %rax,%rdi
  b4:	e8 00 00 00 00       	call   b9 <Network::IfGetByAddress(char const*, char*, unsigned long)+0xb9>
  b9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  bd:	48 89 c7             	mov    %rax,%rdi
  c0:	e8 00 00 00 00       	call   c5 <Network::IfGetByAddress(char const*, char*, unsigned long)+0xc5>
  c5:	b8 00 00 00 00       	mov    $0x0,%eax
  ca:	eb 27                	jmp    f3 <Network::IfGetByAddress(char const*, char*, unsigned long)+0xf3>
  cc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  d0:	48 8b 00             	mov    (%rax),%rax
  d3:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  d7:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  dc:	0f 85 62 ff ff ff    	jne    44 <Network::IfGetByAddress(char const*, char*, unsigned long)+0x44>
  e2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  e6:	48 89 c7             	mov    %rax,%rdi
  e9:	e8 00 00 00 00       	call   ee <Network::IfGetByAddress(char const*, char*, unsigned long)+0xee>
  ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  f3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f7:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  fe:	00 00 
 100:	74 05                	je     107 <Network::IfGetByAddress(char const*, char*, unsigned long)+0x107>
 102:	e8 00 00 00 00       	call   107 <Network::IfGetByAddress(char const*, char*, unsigned long)+0x107>
 107:	c9                   	leave  
 108:	c3                   	ret    

Disassembly of section .text._ZN7Network9IfDetailsEPKc:

0000000000000000 <Network::IfDetails(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 50          	sub    $0x50,%rsp
   c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  10:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	ba 00 00 00 00       	mov    $0x0,%edx
  28:	be 02 00 00 00       	mov    $0x2,%esi
  2d:	bf 02 00 00 00       	mov    $0x2,%edi
  32:	e8 00 00 00 00       	call   37 <Network::IfDetails(char const*)+0x37>
  37:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  3a:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  3e:	79 19                	jns    59 <Network::IfDetails(char const*)+0x59>
  40:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 47 <Network::IfDetails(char const*)+0x47>
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	call   4f <Network::IfDetails(char const*)+0x4f>
  4f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  54:	e9 52 01 00 00       	jmp    1ab <Network::IfDetails(char const*)+0x1ab>
  59:	66 c7 45 e0 02 00    	movw   $0x2,-0x20(%rbp)
  5f:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  63:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  67:	ba 0f 00 00 00       	mov    $0xf,%edx
  6c:	48 89 ce             	mov    %rcx,%rsi
  6f:	48 89 c7             	mov    %rax,%rdi
  72:	e8 00 00 00 00       	call   77 <Network::IfDetails(char const*)+0x77>
  77:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  7b:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  7e:	be 15 89 00 00       	mov    $0x8915,%esi
  83:	89 c7                	mov    %eax,%edi
  85:	b8 00 00 00 00       	mov    $0x0,%eax
  8a:	e8 00 00 00 00       	call   8f <Network::IfDetails(char const*)+0x8f>
  8f:	c1 e8 1f             	shr    $0x1f,%eax
  92:	84 c0                	test   %al,%al
  94:	74 23                	je     b9 <Network::IfDetails(char const*)+0xb9>
  96:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 9d <Network::IfDetails(char const*)+0x9d>
  9d:	48 89 c7             	mov    %rax,%rdi
  a0:	e8 00 00 00 00       	call   a5 <Network::IfDetails(char const*)+0xa5>
  a5:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  a8:	89 c7                	mov    %eax,%edi
  aa:	e8 00 00 00 00       	call   af <Network::IfDetails(char const*)+0xaf>
  af:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  b4:	e9 f2 00 00 00       	jmp    1ab <Network::IfDetails(char const*)+0x1ab>
  b9:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  bd:	48 83 c0 10          	add    $0x10,%rax
  c1:	8b 50 04             	mov    0x4(%rax),%edx
  c4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  c8:	89 50 10             	mov    %edx,0x10(%rax)
  cb:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  cf:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  d2:	be 1b 89 00 00       	mov    $0x891b,%esi
  d7:	89 c7                	mov    %eax,%edi
  d9:	b8 00 00 00 00       	mov    $0x0,%eax
  de:	e8 00 00 00 00       	call   e3 <Network::IfDetails(char const*)+0xe3>
  e3:	c1 e8 1f             	shr    $0x1f,%eax
  e6:	84 c0                	test   %al,%al
  e8:	74 23                	je     10d <Network::IfDetails(char const*)+0x10d>
  ea:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # f1 <Network::IfDetails(char const*)+0xf1>
  f1:	48 89 c7             	mov    %rax,%rdi
  f4:	e8 00 00 00 00       	call   f9 <Network::IfDetails(char const*)+0xf9>
  f9:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  fc:	89 c7                	mov    %eax,%edi
  fe:	e8 00 00 00 00       	call   103 <Network::IfDetails(char const*)+0x103>
 103:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
 108:	e9 9e 00 00 00       	jmp    1ab <Network::IfDetails(char const*)+0x1ab>
 10d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 111:	48 83 c0 10          	add    $0x10,%rax
 115:	8b 50 04             	mov    0x4(%rax),%edx
 118:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 11c:	89 50 18             	mov    %edx,0x18(%rax)
 11f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 123:	48 89 c7             	mov    %rax,%rdi
 126:	e8 00 00 00 00       	call   12b <Network::IfDetails(char const*)+0x12b>
 12b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
 12f:	89 42 14             	mov    %eax,0x14(%rdx)
 132:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
 136:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 139:	be 27 89 00 00       	mov    $0x8927,%esi
 13e:	89 c7                	mov    %eax,%edi
 140:	b8 00 00 00 00       	mov    $0x0,%eax
 145:	e8 00 00 00 00       	call   14a <Network::IfDetails(char const*)+0x14a>
 14a:	c1 e8 1f             	shr    $0x1f,%eax
 14d:	84 c0                	test   %al,%al
 14f:	74 20                	je     171 <Network::IfDetails(char const*)+0x171>
 151:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 158 <Network::IfDetails(char const*)+0x158>
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	call   160 <Network::IfDetails(char const*)+0x160>
 160:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 163:	89 c7                	mov    %eax,%edi
 165:	e8 00 00 00 00       	call   16a <Network::IfDetails(char const*)+0x16a>
 16a:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
 16f:	eb 3a                	jmp    1ab <Network::IfDetails(char const*)+0x1ab>
 171:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 175:	48 83 c0 12          	add    $0x12,%rax
 179:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
 17d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 181:	48 8d 88 9c 00 00 00 	lea    0x9c(%rax),%rcx
 188:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 18c:	ba 06 00 00 00       	mov    $0x6,%edx
 191:	48 89 c6             	mov    %rax,%rsi
 194:	48 89 cf             	mov    %rcx,%rdi
 197:	e8 00 00 00 00       	call   19c <Network::IfDetails(char const*)+0x19c>
 19c:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 19f:	89 c7                	mov    %eax,%edi
 1a1:	e8 00 00 00 00       	call   1a6 <Network::IfDetails(char const*)+0x1a6>
 1a6:	b8 00 00 00 00       	mov    $0x0,%eax
 1ab:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 1af:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 1b6:	00 00 
 1b8:	74 05                	je     1bf <Network::IfDetails(char const*)+0x1bf>
 1ba:	e8 00 00 00 00       	call   1bf <Network::IfDetails(char const*)+0x1bf>
 1bf:	c9                   	leave  
 1c0:	c3                   	ret    

Disassembly of section .text._ZN7Network11SetHostNameEPKc:

0000000000000000 <Network::SetHostName(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	call   20 <Network::SetHostName(char const*)+0x20>
  20:	48 89 c2             	mov    %rax,%rdx
  23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  27:	48 89 d6             	mov    %rdx,%rsi
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <Network::SetHostName(char const*)+0x32>
  32:	c1 e8 1f             	shr    $0x1f,%eax
  35:	84 c0                	test   %al,%al
  37:	74 0f                	je     48 <Network::SetHostName(char const*)+0x48>
  39:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 40 <Network::SetHostName(char const*)+0x40>
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <Network::SetHostName(char const*)+0x48>
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	48 83 c0 1c          	add    $0x1c,%rax
  50:	be 40 00 00 00       	mov    $0x40,%esi
  55:	48 89 c7             	mov    %rax,%rdi
  58:	e8 00 00 00 00       	call   5d <Network::SetHostName(char const*)+0x5d>
  5d:	c1 e8 1f             	shr    $0x1f,%eax
  60:	84 c0                	test   %al,%al
  62:	74 0f                	je     73 <Network::SetHostName(char const*)+0x73>
  64:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 6b <Network::SetHostName(char const*)+0x6b>
  6b:	48 89 c7             	mov    %rax,%rdi
  6e:	e8 00 00 00 00       	call   73 <Network::SetHostName(char const*)+0x73>
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	c6 40 5b 00          	movb   $0x0,0x5b(%rax)
  7b:	90                   	nop
  7c:	c9                   	leave  
  7d:	c3                   	ret    

Disassembly of section .text._ZN7Network17SetQueuedStaticIpEjj:

0000000000000000 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	89 55 f0             	mov    %edx,-0x10(%rbp)
  12:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  16:	74 0d                	je     25 <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0x25>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	8b 55 f4             	mov    -0xc(%rbp),%edx
  1f:	89 90 c4 00 00 00    	mov    %edx,0xc4(%rax)
  25:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  29:	74 0d                	je     38 <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0x38>
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	8b 55 f0             	mov    -0x10(%rbp),%edx
  32:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3c:	8b 80 c0 00 00 00    	mov    0xc0(%rax),%eax
  42:	83 c8 01             	or     $0x1,%eax
  45:	89 c2                	mov    %eax,%edx
  47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4b:	89 90 c0 00 00 00    	mov    %edx,0xc0(%rax)
  51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  55:	8b 80 c0 00 00 00    	mov    0xc0(%rax),%eax
  5b:	83 c8 02             	or     $0x2,%eax
  5e:	89 c2                	mov    %eax,%edx
  60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  64:	89 90 c0 00 00 00    	mov    %edx,0xc0(%rax)
  6a:	90                   	nop
  6b:	5d                   	pop    %rbp
  6c:	c3                   	ret    

Disassembly of section .text._ZN7Network17ApplyQueuedConfigEv:

0000000000000000 <Network::ApplyQueuedConfig()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 80 c0 00 00 00    	mov    0xc0(%rax),%eax
  1a:	85 c0                	test   %eax,%eax
  1c:	75 0a                	jne    28 <Network::ApplyQueuedConfig()+0x28>
  1e:	b8 00 00 00 00       	mov    $0x0,%eax
  23:	e9 43 01 00 00       	jmp    16b <Network::ApplyQueuedConfig()+0x16b>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	be 01 00 00 00       	mov    $0x1,%esi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	call   39 <Network::ApplyQueuedConfig()+0x39>
  39:	84 c0                	test   %al,%al
  3b:	75 15                	jne    52 <Network::ApplyQueuedConfig()+0x52>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	be 02 00 00 00       	mov    $0x2,%esi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	call   4e <Network::ApplyQueuedConfig()+0x4e>
  4e:	84 c0                	test   %al,%al
  50:	74 07                	je     59 <Network::ApplyQueuedConfig()+0x59>
  52:	b8 01 00 00 00       	mov    $0x1,%eax
  57:	eb 05                	jmp    5e <Network::ApplyQueuedConfig()+0x5e>
  59:	b8 00 00 00 00       	mov    $0x0,%eax
  5e:	84 c0                	test   %al,%al
  60:	0f 84 8c 00 00 00    	je     f2 <Network::ApplyQueuedConfig()+0xf2>
  66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6a:	be 02 00 00 00       	mov    $0x2,%esi
  6f:	48 89 c7             	mov    %rax,%rdi
  72:	e8 00 00 00 00       	call   77 <Network::ApplyQueuedConfig()+0x77>
  77:	84 c0                	test   %al,%al
  79:	74 31                	je     ac <Network::ApplyQueuedConfig()+0xac>
  7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7f:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	89 d6                	mov    %edx,%esi
  8b:	48 89 c7             	mov    %rax,%rdi
  8e:	e8 00 00 00 00       	call   93 <Network::ApplyQueuedConfig()+0x93>
  93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  97:	8b 80 c0 00 00 00    	mov    0xc0(%rax),%eax
  9d:	83 e0 fd             	and    $0xfffffffd,%eax
  a0:	89 c2                	mov    %eax,%edx
  a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a6:	89 90 c0 00 00 00    	mov    %edx,0xc0(%rax)
  ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b0:	be 01 00 00 00       	mov    $0x1,%esi
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	call   bd <Network::ApplyQueuedConfig()+0xbd>
  bd:	84 c0                	test   %al,%al
  bf:	74 31                	je     f2 <Network::ApplyQueuedConfig()+0xf2>
  c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c5:	8b 90 c4 00 00 00    	mov    0xc4(%rax),%edx
  cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  cf:	89 d6                	mov    %edx,%esi
  d1:	48 89 c7             	mov    %rax,%rdi
  d4:	e8 00 00 00 00       	call   d9 <Network::ApplyQueuedConfig()+0xd9>
  d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  dd:	8b 80 c0 00 00 00    	mov    0xc0(%rax),%eax
  e3:	83 e0 fe             	and    $0xfffffffe,%eax
  e6:	89 c2                	mov    %eax,%edx
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	89 90 c0 00 00 00    	mov    %edx,0xc0(%rax)
  f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f6:	be 04 00 00 00       	mov    $0x4,%esi
  fb:	48 89 c7             	mov    %rax,%rdi
  fe:	e8 00 00 00 00       	call   103 <Network::ApplyQueuedConfig()+0x103>
 103:	84 c0                	test   %al,%al
 105:	74 25                	je     12c <Network::ApplyQueuedConfig()+0x12c>
 107:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 10b:	48 89 c7             	mov    %rax,%rdi
 10e:	e8 00 00 00 00       	call   113 <Network::ApplyQueuedConfig()+0x113>
 113:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 117:	8b 80 c0 00 00 00    	mov    0xc0(%rax),%eax
 11d:	83 e0 fb             	and    $0xfffffffb,%eax
 120:	89 c2                	mov    %eax,%edx
 122:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 126:	89 90 c0 00 00 00    	mov    %edx,0xc0(%rax)
 12c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 130:	be 08 00 00 00       	mov    $0x8,%esi
 135:	48 89 c7             	mov    %rax,%rdi
 138:	e8 00 00 00 00       	call   13d <Network::ApplyQueuedConfig()+0x13d>
 13d:	84 c0                	test   %al,%al
 13f:	74 25                	je     166 <Network::ApplyQueuedConfig()+0x166>
 141:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 145:	48 89 c7             	mov    %rax,%rdi
 148:	e8 00 00 00 00       	call   14d <Network::ApplyQueuedConfig()+0x14d>
 14d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 151:	8b 80 c0 00 00 00    	mov    0xc0(%rax),%eax
 157:	83 e0 f7             	and    $0xfffffff7,%eax
 15a:	89 c2                	mov    %eax,%edx
 15c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 160:	89 90 c0 00 00 00    	mov    %edx,0xc0(%rax)
 166:	b8 01 00 00 00       	mov    $0x1,%eax
 16b:	c9                   	leave  
 16c:	c3                   	ret    

Disassembly of section .text._ZN7Network5PrintEv:

0000000000000000 <Network::Print()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	41 55                	push   %r13
   a:	41 54                	push   %r12
   c:	53                   	push   %rbx
   d:	48 83 ec 18          	sub    $0x18,%rsp
  11:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  15:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c <Network::Print()+0x1c>
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	call   24 <Network::Print()+0x24>
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 83 c0 1c          	add    $0x1c,%rax
  2c:	48 89 c6             	mov    %rax,%rsi
  2f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 36 <Network::Print()+0x36>
  36:	48 89 c7             	mov    %rax,%rdi
  39:	b8 00 00 00 00       	mov    $0x0,%eax
  3e:	e8 00 00 00 00       	call   43 <Network::Print()+0x43>
  43:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  47:	48 83 c0 5c          	add    $0x5c,%rax
  4b:	48 89 c6             	mov    %rax,%rsi
  4e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 55 <Network::Print()+0x55>
  55:	48 89 c7             	mov    %rax,%rdi
  58:	b8 00 00 00 00       	mov    $0x0,%eax
  5d:	e8 00 00 00 00       	call   62 <Network::Print()+0x62>
  62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  66:	48 8d 90 a2 00 00 00 	lea    0xa2(%rax),%rdx
  6d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  71:	8b 40 04             	mov    0x4(%rax),%eax
  74:	89 c6                	mov    %eax,%esi
  76:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7d <Network::Print()+0x7d>
  7d:	48 89 c7             	mov    %rax,%rdi
  80:	b8 00 00 00 00       	mov    $0x0,%eax
  85:	e8 00 00 00 00       	call   8a <Network::Print()+0x8a>
  8a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8e:	48 89 c7             	mov    %rax,%rdi
  91:	e8 00 00 00 00       	call   96 <Network::Print()+0x96>
  96:	89 c6                	mov    %eax,%esi
  98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9c:	8b 40 10             	mov    0x10(%rax),%eax
  9f:	c1 e8 18             	shr    $0x18,%eax
  a2:	89 c7                	mov    %eax,%edi
  a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a8:	8b 40 10             	mov    0x10(%rax),%eax
  ab:	c1 e8 10             	shr    $0x10,%eax
  ae:	0f b6 c8             	movzbl %al,%ecx
  b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b5:	8b 40 10             	mov    0x10(%rax),%eax
  b8:	c1 e8 08             	shr    $0x8,%eax
  bb:	0f b6 d0             	movzbl %al,%edx
  be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c2:	8b 40 10             	mov    0x10(%rax),%eax
  c5:	0f b6 c0             	movzbl %al,%eax
  c8:	41 89 f1             	mov    %esi,%r9d
  cb:	41 89 f8             	mov    %edi,%r8d
  ce:	89 c6                	mov    %eax,%esi
  d0:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d7 <Network::Print()+0xd7>
  d7:	48 89 c7             	mov    %rax,%rdi
  da:	b8 00 00 00 00       	mov    $0x0,%eax
  df:	e8 00 00 00 00       	call   e4 <Network::Print()+0xe4>
  e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  e8:	8b 40 18             	mov    0x18(%rax),%eax
  eb:	c1 e8 18             	shr    $0x18,%eax
  ee:	89 c6                	mov    %eax,%esi
  f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f4:	8b 40 18             	mov    0x18(%rax),%eax
  f7:	c1 e8 10             	shr    $0x10,%eax
  fa:	0f b6 c8             	movzbl %al,%ecx
  fd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 101:	8b 40 18             	mov    0x18(%rax),%eax
 104:	c1 e8 08             	shr    $0x8,%eax
 107:	0f b6 d0             	movzbl %al,%edx
 10a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 10e:	8b 40 18             	mov    0x18(%rax),%eax
 111:	0f b6 c0             	movzbl %al,%eax
 114:	41 89 f0             	mov    %esi,%r8d
 117:	89 c6                	mov    %eax,%esi
 119:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 120 <Network::Print()+0x120>
 120:	48 89 c7             	mov    %rax,%rdi
 123:	b8 00 00 00 00       	mov    $0x0,%eax
 128:	e8 00 00 00 00       	call   12d <Network::Print()+0x12d>
 12d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 131:	8b 40 14             	mov    0x14(%rax),%eax
 134:	c1 e8 18             	shr    $0x18,%eax
 137:	89 c6                	mov    %eax,%esi
 139:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 13d:	8b 40 14             	mov    0x14(%rax),%eax
 140:	c1 e8 10             	shr    $0x10,%eax
 143:	0f b6 c8             	movzbl %al,%ecx
 146:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 14a:	8b 40 14             	mov    0x14(%rax),%eax
 14d:	c1 e8 08             	shr    $0x8,%eax
 150:	0f b6 d0             	movzbl %al,%edx
 153:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 157:	8b 40 14             	mov    0x14(%rax),%eax
 15a:	0f b6 c0             	movzbl %al,%eax
 15d:	41 89 f0             	mov    %esi,%r8d
 160:	89 c6                	mov    %eax,%esi
 162:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 169 <Network::Print()+0x169>
 169:	48 89 c7             	mov    %rax,%rdi
 16c:	b8 00 00 00 00       	mov    $0x0,%eax
 171:	e8 00 00 00 00       	call   176 <Network::Print()+0x176>
 176:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 17a:	48 89 c7             	mov    %rax,%rdi
 17d:	e8 00 00 00 00       	call   182 <Network::Print()+0x182>
 182:	c1 e8 18             	shr    $0x18,%eax
 185:	44 0f b6 e8          	movzbl %al,%r13d
 189:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18d:	48 89 c7             	mov    %rax,%rdi
 190:	e8 00 00 00 00       	call   195 <Network::Print()+0x195>
 195:	c1 e8 10             	shr    $0x10,%eax
 198:	44 0f b6 e0          	movzbl %al,%r12d
 19c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a0:	48 89 c7             	mov    %rax,%rdi
 1a3:	e8 00 00 00 00       	call   1a8 <Network::Print()+0x1a8>
 1a8:	c1 e8 08             	shr    $0x8,%eax
 1ab:	0f b6 d8             	movzbl %al,%ebx
 1ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1b2:	48 89 c7             	mov    %rax,%rdi
 1b5:	e8 00 00 00 00       	call   1ba <Network::Print()+0x1ba>
 1ba:	0f b6 c0             	movzbl %al,%eax
 1bd:	45 89 e8             	mov    %r13d,%r8d
 1c0:	44 89 e1             	mov    %r12d,%ecx
 1c3:	89 da                	mov    %ebx,%edx
 1c5:	89 c6                	mov    %eax,%esi
 1c7:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1ce <Network::Print()+0x1ce>
 1ce:	48 89 c7             	mov    %rax,%rdi
 1d1:	b8 00 00 00 00       	mov    $0x0,%eax
 1d6:	e8 00 00 00 00       	call   1db <Network::Print()+0x1db>
 1db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1df:	0f b6 80 a1 00 00 00 	movzbl 0xa1(%rax),%eax
 1e6:	0f b6 f0             	movzbl %al,%esi
 1e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ed:	0f b6 80 a0 00 00 00 	movzbl 0xa0(%rax),%eax
 1f4:	44 0f b6 c0          	movzbl %al,%r8d
 1f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1fc:	0f b6 80 9f 00 00 00 	movzbl 0x9f(%rax),%eax
 203:	0f b6 f8             	movzbl %al,%edi
 206:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 20a:	0f b6 80 9e 00 00 00 	movzbl 0x9e(%rax),%eax
 211:	0f b6 c8             	movzbl %al,%ecx
 214:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 218:	0f b6 80 9d 00 00 00 	movzbl 0x9d(%rax),%eax
 21f:	0f b6 d0             	movzbl %al,%edx
 222:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 226:	0f b6 80 9c 00 00 00 	movzbl 0x9c(%rax),%eax
 22d:	0f b6 c0             	movzbl %al,%eax
 230:	48 83 ec 08          	sub    $0x8,%rsp
 234:	56                   	push   %rsi
 235:	45 89 c1             	mov    %r8d,%r9d
 238:	41 89 f8             	mov    %edi,%r8d
 23b:	89 c6                	mov    %eax,%esi
 23d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 244 <Network::Print()+0x244>
 244:	48 89 c7             	mov    %rax,%rdi
 247:	b8 00 00 00 00       	mov    $0x0,%eax
 24c:	e8 00 00 00 00       	call   251 <Network::Print()+0x251>
 251:	48 83 c4 10          	add    $0x10,%rsp
 255:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 259:	48 89 c7             	mov    %rax,%rdi
 25c:	e8 00 00 00 00       	call   261 <Network::Print()+0x261>
 261:	0f be c0             	movsbl %al,%eax
 264:	89 c6                	mov    %eax,%esi
 266:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26d <Network::Print()+0x26d>
 26d:	48 89 c7             	mov    %rax,%rdi
 270:	b8 00 00 00 00       	mov    $0x0,%eax
 275:	e8 00 00 00 00       	call   27a <Network::Print()+0x27a>
 27a:	90                   	nop
 27b:	48 8d 65 e8          	lea    -0x18(%rbp),%rsp
 27f:	5b                   	pop    %rbx
 280:	41 5c                	pop    %r12
 282:	41 5d                	pop    %r13
 284:	5d                   	pop    %rbp
 285:	c3                   	ret    

networktcp.o:     file format elf64-x86-64


Disassembly of section .text._ZN7Network8TcpBeginEt:

0000000000000000 <Network::TcpBegin(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 c4          	mov    %ax,-0x3c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  2c:	eb 50                	jmp    7e <Network::TcpBegin(unsigned short)+0x7e>
  2e:	8b 45 d8             	mov    -0x28(%rbp),%eax
  31:	48 98                	cltq   
  33:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  37:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3e <Network::TcpBegin(unsigned short)+0x3e>
  3e:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
  42:	66 39 45 c4          	cmp    %ax,-0x3c(%rbp)
  46:	75 19                	jne    61 <Network::TcpBegin(unsigned short)+0x61>
  48:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 4f <Network::TcpBegin(unsigned short)+0x4f>
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <Network::TcpBegin(unsigned short)+0x57>
  57:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  5c:	e9 e8 01 00 00       	jmp    249 <Network::TcpBegin(unsigned short)+0x249>
  61:	8b 45 d8             	mov    -0x28(%rbp),%eax
  64:	48 98                	cltq   
  66:	48 8d 14 00          	lea    (%rax,%rax,1),%rdx
  6a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 71 <Network::TcpBegin(unsigned short)+0x71>
  71:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
  75:	66 85 c0             	test   %ax,%ax
  78:	74 0c                	je     86 <Network::TcpBegin(unsigned short)+0x86>
  7a:	83 45 d8 01          	addl   $0x1,-0x28(%rbp)
  7e:	83 7d d8 01          	cmpl   $0x1,-0x28(%rbp)
  82:	7e aa                	jle    2e <Network::TcpBegin(unsigned short)+0x2e>
  84:	eb 01                	jmp    87 <Network::TcpBegin(unsigned short)+0x87>
  86:	90                   	nop
  87:	83 7d d8 02          	cmpl   $0x2,-0x28(%rbp)
  8b:	75 19                	jne    a6 <Network::TcpBegin(unsigned short)+0xa6>
  8d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 94 <Network::TcpBegin(unsigned short)+0x94>
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	call   9c <Network::TcpBegin(unsigned short)+0x9c>
  9c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  a1:	e9 a3 01 00 00       	jmp    249 <Network::TcpBegin(unsigned short)+0x249>
  a6:	8b 45 d8             	mov    -0x28(%rbp),%eax
  a9:	48 98                	cltq   
  ab:	48 8d 0c 00          	lea    (%rax,%rax,1),%rcx
  af:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # b6 <Network::TcpBegin(unsigned short)+0xb6>
  b6:	0f b7 45 c4          	movzwl -0x3c(%rbp),%eax
  ba:	66 89 04 11          	mov    %ax,(%rcx,%rdx,1)
  be:	8b 45 d8             	mov    -0x28(%rbp),%eax
  c1:	48 98                	cltq   
  c3:	48 c1 e0 04          	shl    $0x4,%rax
  c7:	48 89 c2             	mov    %rax,%rdx
  ca:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d1 <Network::TcpBegin(unsigned short)+0xd1>
  d1:	48 01 d0             	add    %rdx,%rax
  d4:	ba 20 00 00 00       	mov    $0x20,%edx
  d9:	be 00 00 00 00       	mov    $0x0,%esi
  de:	48 89 c7             	mov    %rax,%rdi
  e1:	e8 00 00 00 00       	call   e6 <Network::TcpBegin(unsigned short)+0xe6>
  e6:	ba 00 00 00 00       	mov    $0x0,%edx
  eb:	be 01 00 00 00       	mov    $0x1,%esi
  f0:	bf 02 00 00 00       	mov    $0x2,%edi
  f5:	e8 00 00 00 00       	call   fa <Network::TcpBegin(unsigned short)+0xfa>
  fa:	89 45 dc             	mov    %eax,-0x24(%rbp)
  fd:	83 7d dc ff          	cmpl   $0xffffffff,-0x24(%rbp)
 101:	75 19                	jne    11c <Network::TcpBegin(unsigned short)+0x11c>
 103:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 10a <Network::TcpBegin(unsigned short)+0x10a>
 10a:	48 89 c7             	mov    %rax,%rdi
 10d:	e8 00 00 00 00       	call   112 <Network::TcpBegin(unsigned short)+0x112>
 112:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 117:	e9 2d 01 00 00       	jmp    249 <Network::TcpBegin(unsigned short)+0x249>
 11c:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
 123:	48 8d 55 d4          	lea    -0x2c(%rbp),%rdx
 127:	8b 45 dc             	mov    -0x24(%rbp),%eax
 12a:	41 b8 04 00 00 00    	mov    $0x4,%r8d
 130:	48 89 d1             	mov    %rdx,%rcx
 133:	ba 02 00 00 00       	mov    $0x2,%edx
 138:	be 01 00 00 00       	mov    $0x1,%esi
 13d:	89 c7                	mov    %eax,%edi
 13f:	e8 00 00 00 00       	call   144 <Network::TcpBegin(unsigned short)+0x144>
 144:	83 f8 ff             	cmp    $0xffffffff,%eax
 147:	0f 94 c0             	sete   %al
 14a:	84 c0                	test   %al,%al
 14c:	74 0f                	je     15d <Network::TcpBegin(unsigned short)+0x15d>
 14e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 155 <Network::TcpBegin(unsigned short)+0x155>
 155:	48 89 c7             	mov    %rax,%rdi
 158:	e8 00 00 00 00       	call   15d <Network::TcpBegin(unsigned short)+0x15d>
 15d:	66 c7 45 e0 02 00    	movw   $0x2,-0x20(%rbp)
 163:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
 16a:	0f b7 45 c4          	movzwl -0x3c(%rbp),%eax
 16e:	89 c7                	mov    %eax,%edi
 170:	e8 00 00 00 00       	call   175 <Network::TcpBegin(unsigned short)+0x175>
 175:	66 89 45 e2          	mov    %ax,-0x1e(%rbp)
 179:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
 17d:	8b 45 dc             	mov    -0x24(%rbp),%eax
 180:	ba 10 00 00 00       	mov    $0x10,%edx
 185:	48 89 ce             	mov    %rcx,%rsi
 188:	89 c7                	mov    %eax,%edi
 18a:	e8 00 00 00 00       	call   18f <Network::TcpBegin(unsigned short)+0x18f>
 18f:	c1 e8 1f             	shr    $0x1f,%eax
 192:	84 c0                	test   %al,%al
 194:	74 56                	je     1ec <Network::TcpBegin(unsigned short)+0x1ec>
 196:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 19d <Network::TcpBegin(unsigned short)+0x19d>
 19d:	48 89 c7             	mov    %rax,%rdi
 1a0:	e8 00 00 00 00       	call   1a5 <Network::TcpBegin(unsigned short)+0x1a5>
 1a5:	0f b7 75 c4          	movzwl -0x3c(%rbp),%esi
 1a9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 1ac:	c1 e8 18             	shr    $0x18,%eax
 1af:	89 c7                	mov    %eax,%edi
 1b1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 1b4:	c1 e8 10             	shr    $0x10,%eax
 1b7:	0f b6 c8             	movzbl %al,%ecx
 1ba:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 1bd:	c1 e8 08             	shr    $0x8,%eax
 1c0:	0f b6 d0             	movzbl %al,%edx
 1c3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 1c6:	0f b6 c0             	movzbl %al,%eax
 1c9:	41 89 f1             	mov    %esi,%r9d
 1cc:	41 89 f8             	mov    %edi,%r8d
 1cf:	89 c6                	mov    %eax,%esi
 1d1:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1d8 <Network::TcpBegin(unsigned short)+0x1d8>
 1d8:	48 89 c7             	mov    %rax,%rdi
 1db:	b8 00 00 00 00       	mov    $0x0,%eax
 1e0:	e8 00 00 00 00       	call   1e5 <Network::TcpBegin(unsigned short)+0x1e5>
 1e5:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
 1ea:	eb 5d                	jmp    249 <Network::TcpBegin(unsigned short)+0x249>
 1ec:	8b 45 dc             	mov    -0x24(%rbp),%eax
 1ef:	be 00 00 00 00       	mov    $0x0,%esi
 1f4:	89 c7                	mov    %eax,%edi
 1f6:	e8 00 00 00 00       	call   1fb <Network::TcpBegin(unsigned short)+0x1fb>
 1fb:	8b 45 d8             	mov    -0x28(%rbp),%eax
 1fe:	48 98                	cltq   
 200:	48 c1 e0 04          	shl    $0x4,%rax
 204:	48 89 c1             	mov    %rax,%rcx
 207:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 20e <Network::TcpBegin(unsigned short)+0x20e>
 20e:	8b 45 dc             	mov    -0x24(%rbp),%eax
 211:	89 04 11             	mov    %eax,(%rcx,%rdx,1)
 214:	8b 45 d8             	mov    -0x28(%rbp),%eax
 217:	48 98                	cltq   
 219:	48 c1 e0 04          	shl    $0x4,%rax
 21d:	48 89 c2             	mov    %rax,%rdx
 220:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 227 <Network::TcpBegin(unsigned short)+0x227>
 227:	66 c7 04 02 03 00    	movw   $0x3,(%rdx,%rax,1)
 22d:	8b 45 d8             	mov    -0x28(%rbp),%eax
 230:	89 c6                	mov    %eax,%esi
 232:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 239 <Network::TcpBegin(unsigned short)+0x239>
 239:	48 89 c7             	mov    %rax,%rdi
 23c:	b8 00 00 00 00       	mov    $0x0,%eax
 241:	e8 00 00 00 00       	call   246 <Network::TcpBegin(unsigned short)+0x246>
 246:	8b 45 d8             	mov    -0x28(%rbp),%eax
 249:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 24d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 254:	00 00 
 256:	74 05                	je     25d <Network::TcpBegin(unsigned short)+0x25d>
 258:	e8 00 00 00 00       	call   25d <Network::TcpBegin(unsigned short)+0x25d>
 25d:	c9                   	leave  
 25e:	c3                   	ret    

Disassembly of section .text._ZN7Network6TcpEndEi:

0000000000000000 <Network::TcpEnd(int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	8b 45 f4             	mov    -0xc(%rbp),%eax
  16:	48 98                	cltq   
  18:	48 c1 e0 04          	shl    $0x4,%rax
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26 <Network::TcpEnd(int)+0x26>
  26:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  29:	89 c7                	mov    %eax,%edi
  2b:	e8 00 00 00 00       	call   30 <Network::TcpEnd(int)+0x30>
  30:	8b 45 f4             	mov    -0xc(%rbp),%eax
  33:	48 98                	cltq   
  35:	48 c1 e0 04          	shl    $0x4,%rax
  39:	48 89 c2             	mov    %rax,%rdx
  3c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 43 <Network::TcpEnd(int)+0x43>
  43:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  46:	89 c7                	mov    %eax,%edi
  48:	e8 00 00 00 00       	call   4d <Network::TcpEnd(int)+0x4d>
  4d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  52:	c9                   	leave  
  53:	c3                   	ret    

Disassembly of section .text._ZN7Network7TcpReadEiPPKhRj:

0000000000000000 <Network::TcpRead(int, unsigned char const**, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 50          	sub    $0x50,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  13:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  17:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  1b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  22:	00 00 
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  28:	31 c0                	xor    %eax,%eax
  2a:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  2d:	48 98                	cltq   
  2f:	48 c1 e0 04          	shl    $0x4,%rax
  33:	48 89 c2             	mov    %rax,%rdx
  36:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3d <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x3d>
  3d:	48 01 d0             	add    %rdx,%rax
  40:	ba 00 00 00 00       	mov    $0x0,%edx
  45:	be 02 00 00 00       	mov    $0x2,%esi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	call   52 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x52>
  52:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  55:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  59:	7f 08                	jg     63 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x63>
  5b:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  5e:	e9 98 01 00 00       	jmp    1fb <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x1fb>
  63:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  66:	48 98                	cltq   
  68:	48 c1 e0 04          	shl    $0x4,%rax
  6c:	48 89 c2             	mov    %rax,%rdx
  6f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 76 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x76>
  76:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
  7a:	98                   	cwtl   
  7b:	83 e0 01             	and    $0x1,%eax
  7e:	85 c0                	test   %eax,%eax
  80:	0f 84 8a 00 00 00    	je     110 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x110>
  86:	c7 45 d0 10 00 00 00 	movl   $0x10,-0x30(%rbp)
  8d:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  90:	48 98                	cltq   
  92:	48 c1 e0 04          	shl    $0x4,%rax
  96:	48 89 c2             	mov    %rax,%rdx
  99:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # a0 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0xa0>
  a0:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  a3:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  a7:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  ab:	48 89 ce             	mov    %rcx,%rsi
  ae:	89 c7                	mov    %eax,%edi
  b0:	e8 00 00 00 00       	call   b5 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0xb5>
  b5:	89 45 d8             	mov    %eax,-0x28(%rbp)
  b8:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  bc:	79 17                	jns    d5 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0xd5>
  be:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c5 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0xc5>
  c5:	48 89 c7             	mov    %rax,%rdi
  c8:	e8 00 00 00 00       	call   cd <Network::TcpRead(int, unsigned char const**, unsigned int&)+0xcd>
  cd:	8b 45 d8             	mov    -0x28(%rbp),%eax
  d0:	e9 26 01 00 00       	jmp    1fb <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x1fb>
  d5:	8b 55 d8             	mov    -0x28(%rbp),%edx
  d8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  dc:	89 10                	mov    %edx,(%rax)
  de:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  e1:	48 98                	cltq   
  e3:	48 c1 e0 04          	shl    $0x4,%rax
  e7:	48 89 c1             	mov    %rax,%rcx
  ea:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # f1 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0xf1>
  f1:	8b 45 d8             	mov    -0x28(%rbp),%eax
  f4:	89 04 11             	mov    %eax,(%rcx,%rdx,1)
  f7:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  fa:	48 98                	cltq   
  fc:	48 c1 e0 04          	shl    $0x4,%rax
 100:	48 89 c2             	mov    %rax,%rdx
 103:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 10a <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x10a>
 10a:	66 c7 04 02 03 00    	movw   $0x3,(%rdx,%rax,1)
 110:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 113:	48 98                	cltq   
 115:	48 c1 e0 04          	shl    $0x4,%rax
 119:	48 89 c2             	mov    %rax,%rdx
 11c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 123 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x123>
 123:	8b 04 02             	mov    (%rdx,%rax,1),%eax
 126:	85 c0                	test   %eax,%eax
 128:	0f 8e c8 00 00 00    	jle    1f6 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x1f6>
 12e:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 131:	48 98                	cltq   
 133:	48 c1 e0 04          	shl    $0x4,%rax
 137:	48 89 c2             	mov    %rax,%rdx
 13a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 141 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x141>
 141:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
 145:	98                   	cwtl   
 146:	83 e0 01             	and    $0x1,%eax
 149:	85 c0                	test   %eax,%eax
 14b:	0f 84 a5 00 00 00    	je     1f6 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x1f6>
 151:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 154:	48 98                	cltq   
 156:	48 c1 e0 04          	shl    $0x4,%rax
 15a:	48 89 c2             	mov    %rax,%rdx
 15d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 164 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x164>
 164:	8b 04 02             	mov    (%rdx,%rax,1),%eax
 167:	ba 78 05 00 00       	mov    $0x578,%edx
 16c:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 173 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x173>
 173:	48 89 ce             	mov    %rcx,%rsi
 176:	89 c7                	mov    %eax,%edi
 178:	e8 00 00 00 00       	call   17d <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x17d>
 17d:	89 45 dc             	mov    %eax,-0x24(%rbp)
 180:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
 184:	7f 5d                	jg     1e3 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x1e3>
 186:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 18d <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x18d>
 18d:	48 89 c7             	mov    %rax,%rdi
 190:	e8 00 00 00 00       	call   195 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x195>
 195:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 198:	48 98                	cltq   
 19a:	48 c1 e0 04          	shl    $0x4,%rax
 19e:	48 89 c2             	mov    %rax,%rdx
 1a1:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1a8 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x1a8>
 1a8:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
 1af:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 1b2:	48 98                	cltq   
 1b4:	48 c1 e0 04          	shl    $0x4,%rax
 1b8:	48 89 c2             	mov    %rax,%rdx
 1bb:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c2 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x1c2>
 1c2:	66 c7 04 02 00 00    	movw   $0x0,(%rdx,%rax,1)
 1c8:	8b 45 c4             	mov    -0x3c(%rbp),%eax
 1cb:	48 98                	cltq   
 1cd:	48 c1 e0 04          	shl    $0x4,%rax
 1d1:	48 89 c2             	mov    %rax,%rdx
 1d4:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1db <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x1db>
 1db:	66 c7 04 02 00 00    	movw   $0x0,(%rdx,%rax,1)
 1e1:	eb 13                	jmp    1f6 <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x1f6>
 1e3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 1e7:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1ee <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x1ee>
 1ee:	48 89 10             	mov    %rdx,(%rax)
 1f1:	8b 45 dc             	mov    -0x24(%rbp),%eax
 1f4:	eb 05                	jmp    1fb <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x1fb>
 1f6:	b8 00 00 00 00       	mov    $0x0,%eax
 1fb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 1ff:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 206:	00 00 
 208:	74 05                	je     20f <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x20f>
 20a:	e8 00 00 00 00       	call   20f <Network::TcpRead(int, unsigned char const**, unsigned int&)+0x20f>
 20f:	c9                   	leave  
 210:	c3                   	ret    

Disassembly of section .text._ZN7Network8TcpWriteEiPKhtj:

0000000000000000 <Network::TcpWrite(int, unsigned char const*, unsigned short, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 c8                	mov    %ecx,%eax
  19:	44 89 45 d4          	mov    %r8d,-0x2c(%rbp)
  1d:	66 89 45 e0          	mov    %ax,-0x20(%rbp)
  21:	0f b7 55 e0          	movzwl -0x20(%rbp),%edx
  25:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  28:	48 98                	cltq   
  2a:	48 c1 e0 04          	shl    $0x4,%rax
  2e:	48 89 c1             	mov    %rax,%rcx
  31:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 38 <Network::TcpWrite(int, unsigned char const*, unsigned short, unsigned int)+0x38>
  38:	8b 04 01             	mov    (%rcx,%rax,1),%eax
  3b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  3f:	48 89 ce             	mov    %rcx,%rsi
  42:	89 c7                	mov    %eax,%edi
  44:	e8 00 00 00 00       	call   49 <Network::TcpWrite(int, unsigned char const*, unsigned short, unsigned int)+0x49>
  49:	89 45 fc             	mov    %eax,-0x4(%rbp)
  4c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  50:	79 0f                	jns    61 <Network::TcpWrite(int, unsigned char const*, unsigned short, unsigned int)+0x61>
  52:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 59 <Network::TcpWrite(int, unsigned char const*, unsigned short, unsigned int)+0x59>
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <Network::TcpWrite(int, unsigned char const*, unsigned short, unsigned int)+0x61>
  61:	90                   	nop
  62:	c9                   	leave  
  63:	c3                   	ret    

osxgetmacaddress.o:     file format elf64-x86-64


mdns.o:     file format elf64-x86-64


Disassembly of section .text._ZN7Network13SetDomainNameEPKc:

0000000000000000 <Network::SetDomainName(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 8d 48 5c          	lea    0x5c(%rax),%rcx
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	ba 3f 00 00 00       	mov    $0x3f,%edx
  25:	48 89 c6             	mov    %rax,%rsi
  28:	48 89 cf             	mov    %rcx,%rdi
  2b:	e8 00 00 00 00       	call   30 <Network::SetDomainName(char const*)+0x30>
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	c6 80 9b 00 00 00 00 	movb   $0x0,0x9b(%rax)
  3b:	90                   	nop
  3c:	c9                   	leave  
  3d:	c3                   	ret    

Disassembly of section .text._ZNK7Network5GetIpEv:

0000000000000000 <Network::GetIp() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 10             	mov    0x10(%rax),%eax
  13:	5d                   	pop    %rbp
  14:	c3                   	ret    

Disassembly of section .text._ZNK7Network11GetHostNameEv:

0000000000000000 <Network::GetHostName() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 1c          	add    $0x1c,%rax
  14:	5d                   	pop    %rbp
  15:	c3                   	ret    

Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # f <Network::Get()+0xf>
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text._ZL17get_protocol_nameN4mdns8ProtocolE:

0000000000000000 <get_protocol_name(mdns::Protocol)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	80 7d fc 01          	cmpb   $0x1,-0x4(%rbp)
   d:	75 09                	jne    18 <get_protocol_name(mdns::Protocol)+0x18>
   f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 16 <get_protocol_name(mdns::Protocol)+0x16>
  16:	eb 07                	jmp    1f <get_protocol_name(mdns::Protocol)+0x1f>
  18:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1f <get_protocol_name(mdns::Protocol)+0x1f>
  1f:	5d                   	pop    %rbp
  20:	c3                   	ret    

Disassembly of section .text._ZN4MDNSC2Ev:

0000000000000000 <MDNS::MDNS()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  23:	48 89 c6             	mov    %rax,%rsi
  26:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2d <MDNS::MDNS()+0x2d>
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	call   35 <MDNS::MDNS()+0x35>
  35:	8b 45 f4             	mov    -0xc(%rbp),%eax
  38:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 3e <MDNS::MDNS()+0x3e>
  3e:	90                   	nop
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  4a:	00 00 
  4c:	74 05                	je     53 <MDNS::MDNS()+0x53>
  4e:	e8 00 00 00 00       	call   53 <MDNS::MDNS()+0x53>
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZN4MDNSD2Ev:

0000000000000000 <MDNS::~MDNS()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 17 <MDNS::~MDNS()+0x17>
  17:	48 85 c0             	test   %rax,%rax
  1a:	74 1b                	je     37 <MDNS::~MDNS()+0x37>
  1c:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 23 <MDNS::~MDNS()+0x23>
  23:	48 85 c0             	test   %rax,%rax
  26:	74 0f                	je     37 <MDNS::~MDNS()+0x37>
  28:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 2f <MDNS::~MDNS()+0x2f>
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <MDNS::~MDNS()+0x37>
  37:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  3e:	e9 f7 00 00 00       	jmp    13a <MDNS::~MDNS()+0x13a>
  43:	8b 45 fc             	mov    -0x4(%rbp),%eax
  46:	48 c1 e0 05          	shl    $0x5,%rax
  4a:	48 89 c2             	mov    %rax,%rdx
  4d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 54 <MDNS::~MDNS()+0x54>
  54:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
  58:	48 85 c0             	test   %rax,%rax
  5b:	74 37                	je     94 <MDNS::~MDNS()+0x94>
  5d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  60:	48 c1 e0 05          	shl    $0x5,%rax
  64:	48 89 c2             	mov    %rax,%rdx
  67:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 6e <MDNS::~MDNS()+0x6e>
  6e:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
  72:	48 85 c0             	test   %rax,%rax
  75:	74 1d                	je     94 <MDNS::~MDNS()+0x94>
  77:	8b 45 fc             	mov    -0x4(%rbp),%eax
  7a:	48 c1 e0 05          	shl    $0x5,%rax
  7e:	48 89 c2             	mov    %rax,%rdx
  81:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 88 <MDNS::~MDNS()+0x88>
  88:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	call   94 <MDNS::~MDNS()+0x94>
  94:	8b 45 fc             	mov    -0x4(%rbp),%eax
  97:	48 c1 e0 05          	shl    $0x5,%rax
  9b:	48 89 c2             	mov    %rax,%rdx
  9e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # a5 <MDNS::~MDNS()+0xa5>
  a5:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
  a9:	48 85 c0             	test   %rax,%rax
  ac:	74 37                	je     e5 <MDNS::~MDNS()+0xe5>
  ae:	8b 45 fc             	mov    -0x4(%rbp),%eax
  b1:	48 c1 e0 05          	shl    $0x5,%rax
  b5:	48 89 c2             	mov    %rax,%rdx
  b8:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # bf <MDNS::~MDNS()+0xbf>
  bf:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
  c3:	48 85 c0             	test   %rax,%rax
  c6:	74 1d                	je     e5 <MDNS::~MDNS()+0xe5>
  c8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  cb:	48 c1 e0 05          	shl    $0x5,%rax
  cf:	48 89 c2             	mov    %rax,%rdx
  d2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d9 <MDNS::~MDNS()+0xd9>
  d9:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
  dd:	48 89 c7             	mov    %rax,%rdi
  e0:	e8 00 00 00 00       	call   e5 <MDNS::~MDNS()+0xe5>
  e5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  e8:	48 c1 e0 05          	shl    $0x5,%rax
  ec:	48 89 c2             	mov    %rax,%rdx
  ef:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # f6 <MDNS::~MDNS()+0xf6>
  f6:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
  fa:	48 85 c0             	test   %rax,%rax
  fd:	74 37                	je     136 <MDNS::~MDNS()+0x136>
  ff:	8b 45 fc             	mov    -0x4(%rbp),%eax
 102:	48 c1 e0 05          	shl    $0x5,%rax
 106:	48 89 c2             	mov    %rax,%rdx
 109:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 110 <MDNS::~MDNS()+0x110>
 110:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
 114:	48 85 c0             	test   %rax,%rax
 117:	74 1d                	je     136 <MDNS::~MDNS()+0x136>
 119:	8b 45 fc             	mov    -0x4(%rbp),%eax
 11c:	48 c1 e0 05          	shl    $0x5,%rax
 120:	48 89 c2             	mov    %rax,%rdx
 123:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 12a <MDNS::~MDNS()+0x12a>
 12a:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
 12e:	48 89 c7             	mov    %rax,%rdi
 131:	e8 00 00 00 00       	call   136 <MDNS::~MDNS()+0x136>
 136:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
 13a:	83 7d fc 07          	cmpl   $0x7,-0x4(%rbp)
 13e:	0f 86 ff fe ff ff    	jbe    43 <MDNS::~MDNS()+0x43>
 144:	90                   	nop
 145:	90                   	nop
 146:	c9                   	leave  
 147:	c3                   	ret    

Disassembly of section .text._ZN4MDNS5StartEv:

0000000000000000 <MDNS::Start()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	e8 00 00 00 00       	call   15 <MDNS::Start()+0x15>
  15:	be e9 14 00 00       	mov    $0x14e9,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	call   22 <MDNS::Start()+0x22>
  22:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 28 <MDNS::Start()+0x28>
  28:	e8 00 00 00 00       	call   2d <MDNS::Start()+0x2d>
  2d:	48 89 c1             	mov    %rax,%rcx
  30:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 36 <MDNS::Start()+0x36>
  36:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 3c <MDNS::Start()+0x3c>
  3c:	89 c6                	mov    %eax,%esi
  3e:	48 89 cf             	mov    %rcx,%rdi
  41:	e8 00 00 00 00       	call   46 <MDNS::Start()+0x46>
  46:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 4d <MDNS::Start()+0x4d>
  4d:	48 85 c0             	test   %rax,%rax
  50:	75 1f                	jne    71 <MDNS::Start()+0x71>
  52:	e8 00 00 00 00       	call   57 <MDNS::Start()+0x57>
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	call   5f <MDNS::Start()+0x5f>
  5f:	48 89 c2             	mov    %rax,%rdx
  62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  66:	48 89 d6             	mov    %rdx,%rsi
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	e8 00 00 00 00       	call   71 <MDNS::Start()+0x71>
  71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	call   7d <MDNS::Start()+0x7d>
  7d:	e8 00 00 00 00       	call   82 <MDNS::Start()+0x82>
  82:	48 89 c7             	mov    %rax,%rdi
  85:	8b 0d 00 00 00 00    	mov    0x0(%rip),%ecx        # 8b <MDNS::Start()+0x8b>
  8b:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 91 <MDNS::Start()+0x91>
  91:	0f b7 d0             	movzwl %ax,%edx
  94:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 9a <MDNS::Start()+0x9a>
  9a:	41 b9 e9 14 00 00    	mov    $0x14e9,%r9d
  a0:	41 89 c8             	mov    %ecx,%r8d
  a3:	89 d1                	mov    %edx,%ecx
  a5:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # ac <MDNS::Start()+0xac>
  ac:	89 c6                	mov    %eax,%esi
  ae:	e8 00 00 00 00       	call   b3 <MDNS::Start()+0xb3>
  b3:	e8 00 00 00 00       	call   b8 <MDNS::Start()+0xb8>
  b8:	48 89 c2             	mov    %rax,%rdx
  bb:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c2 <MDNS::Start()+0xc2>
  c2:	48 89 c6             	mov    %rax,%rsi
  c5:	48 89 d7             	mov    %rdx,%rdi
  c8:	e8 00 00 00 00       	call   cd <MDNS::Start()+0xcd>
  cd:	90                   	nop
  ce:	c9                   	leave  
  cf:	c3                   	ret    

Disassembly of section .text._ZN4MDNS4StopEv:

0000000000000000 <MDNS::Stop()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	e8 00 00 00 00       	call   15 <MDNS::Stop()+0x15>
  15:	be e9 14 00 00       	mov    $0x14e9,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	call   22 <MDNS::Stop()+0x22>
  22:	c7 05 00 00 00 00 ff 	movl   $0xffffffff,0x0(%rip)        # 2c <MDNS::Stop()+0x2c>
  29:	ff ff ff 
  2c:	90                   	nop
  2d:	c9                   	leave  
  2e:	c3                   	ret    

Disassembly of section .text._ZN4MDNS7SetNameEPKc:

0000000000000000 <MDNS::SetName(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 18          	sub    $0x18,%rsp
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  15:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1c <MDNS::SetName(char const*)+0x1c>
  1c:	48 85 c0             	test   %rax,%rax
  1f:	74 1b                	je     3c <MDNS::SetName(char const*)+0x3c>
  21:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 28 <MDNS::SetName(char const*)+0x28>
  28:	48 85 c0             	test   %rax,%rax
  2b:	74 0f                	je     3c <MDNS::SetName(char const*)+0x3c>
  2d:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 34 <MDNS::SetName(char const*)+0x34>
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	call   3c <MDNS::SetName(char const*)+0x3c>
  3c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <MDNS::SetName(char const*)+0x48>
  48:	48 83 c0 07          	add    $0x7,%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	call   54 <MDNS::SetName(char const*)+0x54>
  54:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 5b <MDNS::SetName(char const*)+0x5b>
  5b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 62 <MDNS::SetName(char const*)+0x62>
  62:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  66:	48 89 d6             	mov    %rdx,%rsi
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	e8 00 00 00 00       	call   71 <MDNS::SetName(char const*)+0x71>
  71:	48 8b 1d 00 00 00 00 	mov    0x0(%rip),%rbx        # 78 <MDNS::SetName(char const*)+0x78>
  78:	48 89 df             	mov    %rbx,%rdi
  7b:	e8 00 00 00 00       	call   80 <MDNS::SetName(char const*)+0x80>
  80:	48 01 d8             	add    %rbx,%rax
  83:	c7 00 2e 6c 6f 63    	movl   $0x636f6c2e,(%rax)
  89:	66 c7 40 04 61 6c    	movw   $0x6c61,0x4(%rax)
  8f:	c6 40 06 00          	movb   $0x0,0x6(%rax)
  93:	90                   	nop
  94:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  98:	c9                   	leave  
  99:	c3                   	ret    

Disassembly of section .text._ZN4MDNS17CreateMDNSMessageEj:

0000000000000000 <MDNS::CreateMDNSMessage(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1a <MDNS::CreateMDNSMessage(unsigned int)+0x1a>
  1a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  22:	66 c7 40 02 84 00    	movw   $0x84,0x2(%rax)
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2c:	66 c7 40 04 00 00    	movw   $0x0,0x4(%rax)
  32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  36:	66 c7 40 06 00 04    	movw   $0x400,0x6(%rax)
  3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40:	66 c7 40 08 00 01    	movw   $0x100,0x8(%rax)
  46:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4a:	66 c7 40 0a 00 00    	movw   $0x0,0xa(%rax)
  50:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 57 <MDNS::CreateMDNSMessage(unsigned int)+0x57>
  57:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  5b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  5f:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	89 ce                	mov    %ecx,%esi
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	call   70 <MDNS::CreateMDNSMessage(unsigned int)+0x70>
  70:	89 c0                	mov    %eax,%eax
  72:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  76:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  7a:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  81:	89 ce                	mov    %ecx,%esi
  83:	48 89 c7             	mov    %rax,%rdi
  86:	e8 00 00 00 00       	call   8b <MDNS::CreateMDNSMessage(unsigned int)+0x8b>
  8b:	89 c0                	mov    %eax,%eax
  8d:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  91:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  95:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9c:	89 ce                	mov    %ecx,%esi
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	call   a6 <MDNS::CreateMDNSMessage(unsigned int)+0xa6>
  a6:	89 c0                	mov    %eax,%eax
  a8:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  ac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  b0:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b7:	89 ce                	mov    %ecx,%esi
  b9:	48 89 c7             	mov    %rax,%rdi
  bc:	e8 00 00 00 00       	call   c1 <MDNS::CreateMDNSMessage(unsigned int)+0xc1>
  c1:	89 c0                	mov    %eax,%eax
  c3:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  c7:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # cd <MDNS::CreateMDNSMessage(unsigned int)+0xcd>
  cd:	89 c0                	mov    %eax,%eax
  cf:	48 8d 50 f4          	lea    -0xc(%rax),%rdx
  d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d7:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # de <MDNS::CreateMDNSMessage(unsigned int)+0xde>
  de:	48 89 ce             	mov    %rcx,%rsi
  e1:	48 89 c7             	mov    %rax,%rdi
  e4:	e8 00 00 00 00       	call   e9 <MDNS::CreateMDNSMessage(unsigned int)+0xe9>
  e9:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # ef <MDNS::CreateMDNSMessage(unsigned int)+0xef>
  ef:	89 c0                	mov    %eax,%eax
  f1:	48 83 e8 0c          	sub    $0xc,%rax
  f5:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  fd:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
 101:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 107 <MDNS::CreateMDNSMessage(unsigned int)+0x107>
 107:	90                   	nop
 108:	c9                   	leave  
 109:	c3                   	ret    

Disassembly of section .text._ZN4MDNS21DecodeDNSNameNotationEPKcPc:

0000000000000000 <MDNS::DecodeDNSNameNotation(char const*, char*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
   c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  10:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  14:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  1c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  2b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  32:	c6 45 db 00          	movb   $0x0,-0x25(%rbp)
  36:	e9 10 01 00 00       	jmp    14b <MDNS::DecodeDNSNameNotation(char const*, char*)+0x14b>
  3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  43:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  47:	0f b6 00             	movzbl (%rax),%eax
  4a:	0f b6 c0             	movzbl %al,%eax
  4d:	89 45 e8             	mov    %eax,-0x18(%rbp)
  50:	83 7d e8 3f          	cmpl   $0x3f,-0x18(%rbp)
  54:	0f 86 8c 00 00 00    	jbe    e6 <MDNS::DecodeDNSNameNotation(char const*, char*)+0xe6>
  5a:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  5e:	83 f0 01             	xor    $0x1,%eax
  61:	84 c0                	test   %al,%al
  63:	74 04                	je     69 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x69>
  65:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
  69:	c6 45 db 01          	movb   $0x1,-0x25(%rbp)
  6d:	8b 45 e8             	mov    -0x18(%rbp),%eax
  70:	c1 e0 08             	shl    $0x8,%eax
  73:	25 00 3f ff ff       	and    $0xffff3f00,%eax
  78:	89 c2                	mov    %eax,%edx
  7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  7e:	0f b6 00             	movzbl (%rax),%eax
  81:	0f be c0             	movsbl %al,%eax
  84:	0f b6 c0             	movzbl %al,%eax
  87:	09 d0                	or     %edx,%eax
  89:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 93 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x93>
  93:	8b 45 ec             	mov    -0x14(%rbp),%eax
  96:	48 01 d0             	add    %rdx,%rax
  99:	0f b6 00             	movzbl (%rax),%eax
  9c:	0f b6 c0             	movzbl %al,%eax
  9f:	89 45 e8             	mov    %eax,-0x18(%rbp)
  a2:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # a9 <MDNS::DecodeDNSNameNotation(char const*, char*)+0xa9>
  a9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  ac:	83 c0 01             	add    $0x1,%eax
  af:	89 c0                	mov    %eax,%eax
  b1:	48 01 d0             	add    %rdx,%rax
  b4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  b8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  bf:	eb 1b                	jmp    dc <MDNS::DecodeDNSNameNotation(char const*, char*)+0xdc>
  c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c5:	0f b6 10             	movzbl (%rax),%edx
  c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  cc:	88 10                	mov    %dl,(%rax)
  ce:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  d3:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  d8:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  dc:	8b 45 e0             	mov    -0x20(%rbp),%eax
  df:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  e2:	72 dd                	jb     c1 <MDNS::DecodeDNSNameNotation(char const*, char*)+0xc1>
  e4:	eb 4b                	jmp    131 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x131>
  e6:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  ea:	74 45                	je     131 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x131>
  ec:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  f3:	eb 1b                	jmp    110 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x110>
  f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  f9:	0f b6 10             	movzbl (%rax),%edx
  fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 100:	88 10                	mov    %dl,(%rax)
 102:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
 107:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
 10c:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
 110:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 113:	3b 45 e8             	cmp    -0x18(%rbp),%eax
 116:	72 dd                	jb     f5 <MDNS::DecodeDNSNameNotation(char const*, char*)+0xf5>
 118:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
 11c:	83 f0 01             	xor    $0x1,%eax
 11f:	84 c0                	test   %al,%al
 121:	74 0e                	je     131 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x131>
 123:	8b 55 e8             	mov    -0x18(%rbp),%edx
 126:	8b 45 dc             	mov    -0x24(%rbp),%eax
 129:	01 d0                	add    %edx,%eax
 12b:	83 c0 01             	add    $0x1,%eax
 12e:	89 45 dc             	mov    %eax,-0x24(%rbp)
 131:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 135:	0f b6 00             	movzbl (%rax),%eax
 138:	84 c0                	test   %al,%al
 13a:	74 0f                	je     14b <MDNS::DecodeDNSNameNotation(char const*, char*)+0x14b>
 13c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 140:	48 8d 50 01          	lea    0x1(%rax),%rdx
 144:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
 148:	c6 00 2e             	movb   $0x2e,(%rax)
 14b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 14f:	0f b6 00             	movzbl (%rax),%eax
 152:	84 c0                	test   %al,%al
 154:	0f 85 e1 fe ff ff    	jne    3b <MDNS::DecodeDNSNameNotation(char const*, char*)+0x3b>
 15a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 15e:	c6 00 00             	movb   $0x0,(%rax)
 161:	8b 45 dc             	mov    -0x24(%rbp),%eax
 164:	83 c0 01             	add    $0x1,%eax
 167:	5d                   	pop    %rbp
 168:	c3                   	ret    

Disassembly of section .text._ZN4MDNS16AddServiceRecordEPKcS1_tN4mdns8ProtocolES1_:

0000000000000000 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  19:	89 c8                	mov    %ecx,%eax
  1b:	44 89 c2             	mov    %r8d,%edx
  1e:	4c 89 4d b8          	mov    %r9,-0x48(%rbp)
  22:	66 89 45 c4          	mov    %ax,-0x3c(%rbp)
  26:	89 d0                	mov    %edx,%eax
  28:	88 45 c0             	mov    %al,-0x40(%rbp)
  2b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  32:	e9 7c 02 00 00       	jmp    2b3 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x2b3>
  37:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  3a:	48 c1 e0 05          	shl    $0x5,%rax
  3e:	48 89 c2             	mov    %rax,%rdx
  41:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 48 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x48>
  48:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
  4c:	48 85 c0             	test   %rax,%rax
  4f:	0f 85 5a 02 00 00    	jne    2af <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x2af>
  55:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  58:	48 c1 e0 05          	shl    $0x5,%rax
  5c:	48 89 c1             	mov    %rax,%rcx
  5f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 66 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x66>
  66:	0f b7 45 c4          	movzwl -0x3c(%rbp),%eax
  6a:	66 89 04 11          	mov    %ax,(%rcx,%rdx,1)
  6e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  71:	48 c1 e0 05          	shl    $0x5,%rax
  75:	48 89 c1             	mov    %rax,%rcx
  78:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 7f <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x7f>
  7f:	0f b6 45 c0          	movzbl -0x40(%rbp),%eax
  83:	88 04 11             	mov    %al,(%rcx,%rdx,1)
  86:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8b:	75 7d                	jne    10a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10a>
  8d:	e8 00 00 00 00       	call   92 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x92>
  92:	48 89 c7             	mov    %rax,%rdi
  95:	e8 00 00 00 00       	call   9a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x9a>
  9a:	48 89 c7             	mov    %rax,%rdi
  9d:	e8 00 00 00 00       	call   a2 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xa2>
  a2:	48 89 c3             	mov    %rax,%rbx
  a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a9:	48 89 c7             	mov    %rax,%rdi
  ac:	e8 00 00 00 00       	call   b1 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xb1>
  b1:	48 01 d8             	add    %rbx,%rax
  b4:	48 83 c0 01          	add    $0x1,%rax
  b8:	48 89 c7             	mov    %rax,%rdi
  bb:	e8 00 00 00 00       	call   c0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xc0>
  c0:	48 89 c1             	mov    %rax,%rcx
  c3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  c6:	48 c1 e0 05          	shl    $0x5,%rax
  ca:	48 89 c2             	mov    %rax,%rdx
  cd:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xd4>
  d4:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
  d8:	e8 00 00 00 00       	call   dd <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xdd>
  dd:	48 89 c7             	mov    %rax,%rdi
  e0:	e8 00 00 00 00       	call   e5 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xe5>
  e5:	48 89 c2             	mov    %rax,%rdx
  e8:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  eb:	48 c1 e0 05          	shl    $0x5,%rax
  ef:	48 89 c1             	mov    %rax,%rcx
  f2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # f9 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xf9>
  f9:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
  fd:	48 89 d6             	mov    %rdx,%rsi
 100:	48 89 c7             	mov    %rax,%rdi
 103:	e8 00 00 00 00       	call   108 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>
 108:	eb 66                	jmp    170 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x170>
 10a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 10e:	48 89 c7             	mov    %rax,%rdi
 111:	e8 00 00 00 00       	call   116 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x116>
 116:	48 89 c3             	mov    %rax,%rbx
 119:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 11d:	48 89 c7             	mov    %rax,%rdi
 120:	e8 00 00 00 00       	call   125 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x125>
 125:	48 01 d8             	add    %rbx,%rax
 128:	48 83 c0 01          	add    $0x1,%rax
 12c:	48 89 c7             	mov    %rax,%rdi
 12f:	e8 00 00 00 00       	call   134 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x134>
 134:	48 89 c1             	mov    %rax,%rcx
 137:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 13a:	48 c1 e0 05          	shl    $0x5,%rax
 13e:	48 89 c2             	mov    %rax,%rdx
 141:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 148 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x148>
 148:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
 14c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 14f:	48 c1 e0 05          	shl    $0x5,%rax
 153:	48 89 c2             	mov    %rax,%rdx
 156:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 15d <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x15d>
 15d:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
 161:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
 165:	48 89 d6             	mov    %rdx,%rsi
 168:	48 89 c7             	mov    %rax,%rdi
 16b:	e8 00 00 00 00       	call   170 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x170>
 170:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 173:	48 c1 e0 05          	shl    $0x5,%rax
 177:	48 89 c2             	mov    %rax,%rdx
 17a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 181 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x181>
 181:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
 185:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
 189:	48 89 d6             	mov    %rdx,%rsi
 18c:	48 89 c7             	mov    %rax,%rdi
 18f:	e8 00 00 00 00       	call   194 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x194>
 194:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
 198:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 19c:	48 89 d6             	mov    %rdx,%rsi
 19f:	48 89 c7             	mov    %rax,%rdi
 1a2:	e8 00 00 00 00       	call   1a7 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x1a7>
 1a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
 1ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1af:	48 89 c7             	mov    %rax,%rdi
 1b2:	e8 00 00 00 00       	call   1b7 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x1b7>
 1b7:	48 83 c0 0d          	add    $0xd,%rax
 1bb:	48 89 c7             	mov    %rax,%rdi
 1be:	e8 00 00 00 00       	call   1c3 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x1c3>
 1c3:	48 89 c1             	mov    %rax,%rcx
 1c6:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 1c9:	48 c1 e0 05          	shl    $0x5,%rax
 1cd:	48 89 c2             	mov    %rax,%rdx
 1d0:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1d7 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x1d7>
 1d7:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
 1db:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 1de:	48 c1 e0 05          	shl    $0x5,%rax
 1e2:	48 89 c2             	mov    %rax,%rdx
 1e5:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1ec <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x1ec>
 1ec:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
 1f0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 1f4:	48 89 d6             	mov    %rdx,%rsi
 1f7:	48 89 c7             	mov    %rax,%rdi
 1fa:	e8 00 00 00 00       	call   1ff <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x1ff>
 1ff:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 202:	48 c1 e0 05          	shl    $0x5,%rax
 206:	48 89 c2             	mov    %rax,%rdx
 209:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 210 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x210>
 210:	48 8b 1c 02          	mov    (%rdx,%rax,1),%rbx
 214:	48 89 df             	mov    %rbx,%rdi
 217:	e8 00 00 00 00       	call   21c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x21c>
 21c:	48 01 d8             	add    %rbx,%rax
 21f:	66 c7 00 2e 00       	movw   $0x2e,(%rax)
 224:	0f b6 45 c0          	movzbl -0x40(%rbp),%eax
 228:	89 c7                	mov    %eax,%edi
 22a:	e8 00 00 00 00       	call   22f <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22f>
 22f:	48 89 c2             	mov    %rax,%rdx
 232:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 235:	48 c1 e0 05          	shl    $0x5,%rax
 239:	48 89 c1             	mov    %rax,%rcx
 23c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 243 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x243>
 243:	48 8b 04 01          	mov    (%rcx,%rax,1),%rax
 247:	48 89 d6             	mov    %rdx,%rsi
 24a:	48 89 c7             	mov    %rax,%rdi
 24d:	e8 00 00 00 00       	call   252 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x252>
 252:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
 257:	74 66                	je     2bf <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x2bf>
 259:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 25d:	48 89 c7             	mov    %rax,%rdi
 260:	e8 00 00 00 00       	call   265 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x265>
 265:	48 83 c0 01          	add    $0x1,%rax
 269:	48 89 c7             	mov    %rax,%rdi
 26c:	e8 00 00 00 00       	call   271 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x271>
 271:	48 89 c1             	mov    %rax,%rcx
 274:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 277:	48 c1 e0 05          	shl    $0x5,%rax
 27b:	48 89 c2             	mov    %rax,%rdx
 27e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 285 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x285>
 285:	48 89 0c 02          	mov    %rcx,(%rdx,%rax,1)
 289:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 28c:	48 c1 e0 05          	shl    $0x5,%rax
 290:	48 89 c2             	mov    %rax,%rdx
 293:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 29a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x29a>
 29a:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
 29e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
 2a2:	48 89 d6             	mov    %rdx,%rsi
 2a5:	48 89 c7             	mov    %rax,%rdi
 2a8:	e8 00 00 00 00       	call   2ad <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x2ad>
 2ad:	eb 10                	jmp    2bf <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x2bf>
 2af:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
 2b3:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
 2b7:	0f 86 7a fd ff ff    	jbe    37 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x37>
 2bd:	eb 01                	jmp    2c0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x2c0>
 2bf:	90                   	nop
 2c0:	83 7d e4 08          	cmpl   $0x8,-0x1c(%rbp)
 2c4:	75 07                	jne    2cd <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x2cd>
 2c6:	b8 00 00 00 00       	mov    $0x0,%eax
 2cb:	eb 4c                	jmp    319 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x319>
 2cd:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 2d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 2d4:	89 d6                	mov    %edx,%esi
 2d6:	48 89 c7             	mov    %rax,%rdi
 2d9:	e8 00 00 00 00       	call   2de <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x2de>
 2de:	e8 00 00 00 00       	call   2e3 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x2e3>
 2e3:	48 89 c7             	mov    %rax,%rdi
 2e6:	8b 0d 00 00 00 00    	mov    0x0(%rip),%ecx        # 2ec <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x2ec>
 2ec:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 2f2 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x2f2>
 2f2:	0f b7 d0             	movzwl %ax,%edx
 2f5:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 2fb <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x2fb>
 2fb:	41 b9 e9 14 00 00    	mov    $0x14e9,%r9d
 301:	41 89 c8             	mov    %ecx,%r8d
 304:	89 d1                	mov    %edx,%ecx
 306:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 30d <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x30d>
 30d:	89 c6                	mov    %eax,%esi
 30f:	e8 00 00 00 00       	call   314 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x314>
 314:	b8 01 00 00 00       	mov    $0x1,%eax
 319:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 31d:	c9                   	leave  
 31e:	c3                   	ret    

Disassembly of section .text._ZNK4MDNS21FindFirstDotFromRightEPKc:

0000000000000000 <MDNS::FindFirstDotFromRight(char const*) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	call   20 <MDNS::FindFirstDotFromRight(char const*) const+0x20>
  20:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  24:	48 01 d0             	add    %rdx,%rax
  27:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2b:	90                   	nop
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  34:	76 1a                	jbe    50 <MDNS::FindFirstDotFromRight(char const*) const+0x50>
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  3e:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  42:	0f b6 00             	movzbl (%rax),%eax
  45:	3c 2e                	cmp    $0x2e,%al
  47:	74 07                	je     50 <MDNS::FindFirstDotFromRight(char const*) const+0x50>
  49:	b8 01 00 00 00       	mov    $0x1,%eax
  4e:	eb 05                	jmp    55 <MDNS::FindFirstDotFromRight(char const*) const+0x55>
  50:	b8 00 00 00 00       	mov    $0x0,%eax
  55:	84 c0                	test   %al,%al
  57:	75 d3                	jne    2c <MDNS::FindFirstDotFromRight(char const*) const+0x2c>
  59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5d:	48 83 c0 01          	add    $0x1,%rax
  61:	c9                   	leave  
  62:	c3                   	ret    

Disassembly of section .text._ZN4MDNS12WriteDnsNameEPKcPcb:

0000000000000000 <MDNS::WriteDnsName(char const*, char*, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  10:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  14:	89 c8                	mov    %ecx,%eax
  16:	88 45 c4             	mov    %al,-0x3c(%rbp)
  19:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  21:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  25:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  31:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  35:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  41:	eb 17                	jmp    5a <MDNS::WriteDnsName(char const*, char*, bool)+0x5a>
  43:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  47:	0f b6 10             	movzbl (%rax),%edx
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	88 10                	mov    %dl,(%rax)
  50:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  55:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  5a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5e:	0f b6 00             	movzbl (%rax),%eax
  61:	84 c0                	test   %al,%al
  63:	74 0b                	je     70 <MDNS::WriteDnsName(char const*, char*, bool)+0x70>
  65:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  69:	0f b6 00             	movzbl (%rax),%eax
  6c:	3c 2e                	cmp    $0x2e,%al
  6e:	75 d3                	jne    43 <MDNS::WriteDnsName(char const*, char*, bool)+0x43>
  70:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  74:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  78:	89 c2                	mov    %eax,%edx
  7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  7e:	88 10                	mov    %dl,(%rax)
  80:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  84:	0f b6 00             	movzbl (%rax),%eax
  87:	84 c0                	test   %al,%al
  89:	75 17                	jne    a2 <MDNS::WriteDnsName(char const*, char*, bool)+0xa2>
  8b:	80 7d c4 00          	cmpb   $0x0,-0x3c(%rbp)
  8f:	74 18                	je     a9 <MDNS::WriteDnsName(char const*, char*, bool)+0xa9>
  91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  95:	48 8d 50 01          	lea    0x1(%rax),%rdx
  99:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  9d:	c6 00 00             	movb   $0x0,(%rax)
  a0:	eb 07                	jmp    a9 <MDNS::WriteDnsName(char const*, char*, bool)+0xa9>
  a2:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  a7:	eb 80                	jmp    29 <MDNS::WriteDnsName(char const*, char*, bool)+0x29>
  a9:	90                   	nop
  aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ae:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
  b2:	5d                   	pop    %rbp
  b3:	c3                   	ret    

Disassembly of section .text._ZN4MDNS26CreateAnswerLocalIpAddressEv:

0000000000000000 <MDNS::CreateAnswerLocalIpAddress()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 17 <MDNS::CreateAnswerLocalIpAddress()+0x17>
  17:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1f:	66 c7 40 02 84 00    	movw   $0x84,0x2(%rax)
  25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  29:	66 c7 40 04 00 00    	movw   $0x0,0x4(%rax)
  2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  33:	66 c7 40 06 00 01    	movw   $0x100,0x6(%rax)
  39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3d:	66 c7 40 08 00 00    	movw   $0x0,0x8(%rax)
  43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  47:	66 c7 40 0a 00 00    	movw   $0x0,0xa(%rax)
  4d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 54 <MDNS::CreateAnswerLocalIpAddress()+0x54>
  54:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  58:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 5f <MDNS::CreateAnswerLocalIpAddress()+0x5f>
  5f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  67:	b9 01 00 00 00       	mov    $0x1,%ecx
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	call   74 <MDNS::CreateAnswerLocalIpAddress()+0x74>
  74:	89 c0                	mov    %eax,%eax
  76:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7e:	66 c7 00 00 01       	movw   $0x100,(%rax)
  83:	48 83 45 f8 02       	addq   $0x2,-0x8(%rbp)
  88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8c:	66 c7 00 80 01       	movw   $0x180,(%rax)
  91:	48 83 45 f8 02       	addq   $0x2,-0x8(%rbp)
  96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  9a:	c7 00 00 00 11 94    	movl   $0x94110000,(%rax)
  a0:	48 83 45 f8 04       	addq   $0x4,-0x8(%rbp)
  a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a9:	66 c7 00 00 04       	movw   $0x400,(%rax)
  ae:	48 83 45 f8 02       	addq   $0x2,-0x8(%rbp)
  b3:	e8 00 00 00 00       	call   b8 <MDNS::CreateAnswerLocalIpAddress()+0xb8>
  b8:	48 89 c7             	mov    %rax,%rdi
  bb:	e8 00 00 00 00       	call   c0 <MDNS::CreateAnswerLocalIpAddress()+0xc0>
  c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  c4:	89 02                	mov    %eax,(%rdx)
  c6:	48 83 45 f8 04       	addq   $0x4,-0x8(%rbp)
  cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  cf:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
  d3:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # d9 <MDNS::CreateAnswerLocalIpAddress()+0xd9>
  d9:	90                   	nop
  da:	c9                   	leave  
  db:	c3                   	ret    

Disassembly of section .text._ZN4MDNS22CreateAnswerServiceSrvEjPh:

0000000000000000 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  22:	48 c1 e0 05          	shl    $0x5,%rax
  26:	48 89 c2             	mov    %rax,%rdx
  29:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 30 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x30>
  30:	48 8b 34 02          	mov    (%rdx,%rax,1),%rsi
  34:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	b9 00 00 00 00       	mov    $0x0,%ecx
  41:	48 89 c7             	mov    %rax,%rdi
  44:	e8 00 00 00 00       	call   49 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x49>
  49:	89 c0                	mov    %eax,%eax
  4b:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  4f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  52:	48 c1 e0 05          	shl    $0x5,%rax
  56:	48 89 c2             	mov    %rax,%rdx
  59:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 60 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x60>
  60:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  64:	89 c7                	mov    %eax,%edi
  66:	e8 00 00 00 00       	call   6b <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x6b>
  6b:	48 89 c6             	mov    %rax,%rsi
  6e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  76:	b9 01 00 00 00       	mov    $0x1,%ecx
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	call   83 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x83>
  83:	89 c0                	mov    %eax,%eax
  85:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8d:	66 c7 00 00 21       	movw   $0x2100,(%rax)
  92:	48 83 45 f8 02       	addq   $0x2,-0x8(%rbp)
  97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  9b:	66 c7 00 80 01       	movw   $0x180,(%rax)
  a0:	48 83 45 f8 02       	addq   $0x2,-0x8(%rbp)
  a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a9:	c7 00 00 00 11 94    	movl   $0x94110000,(%rax)
  af:	48 83 45 f8 04       	addq   $0x4,-0x8(%rbp)
  b4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # bb <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0xbb>
  bb:	48 89 c7             	mov    %rax,%rdi
  be:	e8 00 00 00 00       	call   c3 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0xc3>
  c3:	83 c0 08             	add    $0x8,%eax
  c6:	0f b7 c0             	movzwl %ax,%eax
  c9:	89 c2                	mov    %eax,%edx
  cb:	66 c1 c2 08          	rol    $0x8,%dx
  cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d3:	66 89 10             	mov    %dx,(%rax)
  d6:	48 83 45 f8 02       	addq   $0x2,-0x8(%rbp)
  db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  df:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  e5:	48 83 45 f8 04       	addq   $0x4,-0x8(%rbp)
  ea:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  ed:	48 c1 e0 05          	shl    $0x5,%rax
  f1:	48 89 c2             	mov    %rax,%rdx
  f4:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # fb <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0xfb>
  fb:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
  ff:	0f b7 c0             	movzwl %ax,%eax
 102:	89 c2                	mov    %eax,%edx
 104:	66 c1 c2 08          	rol    $0x8,%dx
 108:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 10c:	66 89 10             	mov    %dx,(%rax)
 10f:	48 83 45 f8 02       	addq   $0x2,-0x8(%rbp)
 114:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 11b <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x11b>
 11b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 11f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 123:	b9 01 00 00 00       	mov    $0x1,%ecx
 128:	48 89 c7             	mov    %rax,%rdi
 12b:	e8 00 00 00 00       	call   130 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x130>
 130:	89 c0                	mov    %eax,%eax
 132:	48 01 45 f8          	add    %rax,-0x8(%rbp)
 136:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 13a:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
 13e:	c9                   	leave  
 13f:	c3                   	ret    

Disassembly of section .text._ZN4MDNS22CreateAnswerServiceTxtEjPh:

0000000000000000 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  22:	48 c1 e0 05          	shl    $0x5,%rax
  26:	48 89 c2             	mov    %rax,%rdx
  29:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 30 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x30>
  30:	48 8b 34 02          	mov    (%rdx,%rax,1),%rsi
  34:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	b9 00 00 00 00       	mov    $0x0,%ecx
  41:	48 89 c7             	mov    %rax,%rdi
  44:	e8 00 00 00 00       	call   49 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x49>
  49:	89 c0                	mov    %eax,%eax
  4b:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  4f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  52:	48 c1 e0 05          	shl    $0x5,%rax
  56:	48 89 c2             	mov    %rax,%rdx
  59:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 60 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x60>
  60:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  64:	89 c7                	mov    %eax,%edi
  66:	e8 00 00 00 00       	call   6b <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6b>
  6b:	48 89 c6             	mov    %rax,%rsi
  6e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  76:	b9 01 00 00 00       	mov    $0x1,%ecx
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	call   83 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x83>
  83:	89 c0                	mov    %eax,%eax
  85:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8d:	66 c7 00 00 10       	movw   $0x1000,(%rax)
  92:	48 83 45 f8 02       	addq   $0x2,-0x8(%rbp)
  97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  9b:	66 c7 00 80 01       	movw   $0x180,(%rax)
  a0:	48 83 45 f8 02       	addq   $0x2,-0x8(%rbp)
  a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a9:	c7 00 00 00 11 94    	movl   $0x94110000,(%rax)
  af:	48 83 45 f8 04       	addq   $0x4,-0x8(%rbp)
  b4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  b7:	48 c1 e0 05          	shl    $0x5,%rax
  bb:	48 89 c2             	mov    %rax,%rdx
  be:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c5 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0xc5>
  c5:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
  c9:	48 85 c0             	test   %rax,%rax
  cc:	75 1c                	jne    ea <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0xea>
  ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d2:	66 c7 00 00 01       	movw   $0x100,(%rax)
  d7:	48 83 45 f8 02       	addq   $0x2,-0x8(%rbp)
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e0:	c6 00 00             	movb   $0x0,(%rax)
  e3:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  e8:	eb 76                	jmp    160 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x160>
  ea:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  ed:	48 c1 e0 05          	shl    $0x5,%rax
  f1:	48 89 c2             	mov    %rax,%rdx
  f4:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # fb <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0xfb>
  fb:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
  ff:	48 89 c7             	mov    %rax,%rdi
 102:	e8 00 00 00 00       	call   107 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x107>
 107:	89 45 f4             	mov    %eax,-0xc(%rbp)
 10a:	8b 45 f4             	mov    -0xc(%rbp),%eax
 10d:	83 c0 01             	add    $0x1,%eax
 110:	0f b7 c0             	movzwl %ax,%eax
 113:	89 c2                	mov    %eax,%edx
 115:	66 c1 c2 08          	rol    $0x8,%dx
 119:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 11d:	66 89 10             	mov    %dx,(%rax)
 120:	48 83 45 f8 02       	addq   $0x2,-0x8(%rbp)
 125:	8b 45 f4             	mov    -0xc(%rbp),%eax
 128:	89 c2                	mov    %eax,%edx
 12a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 12e:	88 10                	mov    %dl,(%rax)
 130:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
 135:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 138:	48 c1 e0 05          	shl    $0x5,%rax
 13c:	48 89 c2             	mov    %rax,%rdx
 13f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 146 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x146>
 146:	48 8b 14 02          	mov    (%rdx,%rax,1),%rdx
 14a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 14e:	48 89 d6             	mov    %rdx,%rsi
 151:	48 89 c7             	mov    %rax,%rdi
 154:	e8 00 00 00 00       	call   159 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x159>
 159:	8b 45 f4             	mov    -0xc(%rbp),%eax
 15c:	48 01 45 f8          	add    %rax,-0x8(%rbp)
 160:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 164:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
 168:	c9                   	leave  
 169:	c3                   	ret    

Disassembly of section .text._ZN4MDNS22CreateAnswerServicePtrEjPh:

0000000000000000 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1f:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  22:	48 c1 e0 05          	shl    $0x5,%rax
  26:	48 89 c2             	mov    %rax,%rdx
  29:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 30 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x30>
  30:	48 8b 34 02          	mov    (%rdx,%rax,1),%rsi
  34:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	b9 01 00 00 00       	mov    $0x1,%ecx
  41:	48 89 c7             	mov    %rax,%rdi
  44:	e8 00 00 00 00       	call   49 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x49>
  49:	89 c0                	mov    %eax,%eax
  4b:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  53:	66 c7 00 00 0c       	movw   $0xc00,(%rax)
  58:	48 83 45 f8 02       	addq   $0x2,-0x8(%rbp)
  5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  61:	66 c7 00 00 01       	movw   $0x100,(%rax)
  66:	48 83 45 f8 02       	addq   $0x2,-0x8(%rbp)
  6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6f:	c7 00 00 00 11 94    	movl   $0x94110000,(%rax)
  75:	48 83 45 f8 04       	addq   $0x4,-0x8(%rbp)
  7a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  7d:	48 c1 e0 05          	shl    $0x5,%rax
  81:	48 89 c2             	mov    %rax,%rdx
  84:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 8b <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x8b>
  8b:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
  8f:	48 89 c7             	mov    %rax,%rdi
  92:	e8 00 00 00 00       	call   97 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x97>
  97:	83 c0 0d             	add    $0xd,%eax
  9a:	0f b7 c0             	movzwl %ax,%eax
  9d:	89 c2                	mov    %eax,%edx
  9f:	66 c1 c2 08          	rol    $0x8,%dx
  a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a7:	66 89 10             	mov    %dx,(%rax)
  aa:	48 83 45 f8 02       	addq   $0x2,-0x8(%rbp)
  af:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  b2:	48 c1 e0 05          	shl    $0x5,%rax
  b6:	48 89 c2             	mov    %rax,%rdx
  b9:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c0 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0xc0>
  c0:	48 8b 34 02          	mov    (%rdx,%rax,1),%rsi
  c4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  cc:	b9 00 00 00 00       	mov    $0x0,%ecx
  d1:	48 89 c7             	mov    %rax,%rdi
  d4:	e8 00 00 00 00       	call   d9 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0xd9>
  d9:	89 c0                	mov    %eax,%eax
  db:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  df:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  e2:	48 c1 e0 05          	shl    $0x5,%rax
  e6:	48 89 c2             	mov    %rax,%rdx
  e9:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # f0 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0xf0>
  f0:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  f4:	89 c7                	mov    %eax,%edi
  f6:	e8 00 00 00 00       	call   fb <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0xfb>
  fb:	48 89 c6             	mov    %rax,%rsi
  fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 102:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 106:	b9 01 00 00 00       	mov    $0x1,%ecx
 10b:	48 89 c7             	mov    %rax,%rdi
 10e:	e8 00 00 00 00       	call   113 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x113>
 113:	89 c0                	mov    %eax,%eax
 115:	48 01 45 f8          	add    %rax,-0x8(%rbp)
 119:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 11d:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
 121:	c9                   	leave  
 122:	c3                   	ret    

Disassembly of section .text._ZN4MDNS24CreateAnswerServiceDnsSdEjPh:

0000000000000000 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	b9 01 00 00 00       	mov    $0x1,%ecx
  2c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 33 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x33>
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	call   3b <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x3b>
  3b:	89 c0                	mov    %eax,%eax
  3d:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  45:	66 c7 00 00 0c       	movw   $0xc00,(%rax)
  4a:	48 83 45 f8 02       	addq   $0x2,-0x8(%rbp)
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  53:	66 c7 00 00 01       	movw   $0x100,(%rax)
  58:	48 83 45 f8 02       	addq   $0x2,-0x8(%rbp)
  5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  61:	c7 00 00 00 11 94    	movl   $0x94110000,(%rax)
  67:	48 83 45 f8 04       	addq   $0x4,-0x8(%rbp)
  6c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  6f:	48 c1 e0 05          	shl    $0x5,%rax
  73:	48 89 c2             	mov    %rax,%rdx
  76:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7d <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x7d>
  7d:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	call   89 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x89>
  89:	83 c0 02             	add    $0x2,%eax
  8c:	0f b7 c0             	movzwl %ax,%eax
  8f:	89 c2                	mov    %eax,%edx
  91:	66 c1 c2 08          	rol    $0x8,%dx
  95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  99:	66 89 10             	mov    %dx,(%rax)
  9c:	48 83 45 f8 02       	addq   $0x2,-0x8(%rbp)
  a1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  a4:	48 c1 e0 05          	shl    $0x5,%rax
  a8:	48 89 c2             	mov    %rax,%rdx
  ab:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # b2 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0xb2>
  b2:	48 8b 34 02          	mov    (%rdx,%rax,1),%rsi
  b6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  be:	b9 01 00 00 00       	mov    $0x1,%ecx
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	call   cb <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0xcb>
  cb:	89 c0                	mov    %eax,%eax
  cd:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d5:	48 2b 45 d8          	sub    -0x28(%rbp),%rax
  d9:	c9                   	leave  
  da:	c3                   	ret    

Disassembly of section .text._ZN4MDNS13HandleRequestEt:

0000000000000000 <MDNS::HandleRequest(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec 40 01 00 00 	sub    $0x140,%rsp
   f:	48 89 bd c8 fe ff ff 	mov    %rdi,-0x138(%rbp)
  16:	89 f0                	mov    %esi,%eax
  18:	66 89 85 c4 fe ff ff 	mov    %ax,-0x13c(%rbp)
  1f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  26:	00 00 
  28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2c:	31 c0                	xor    %eax,%eax
  2e:	c7 85 e0 fe ff ff 0c 	movl   $0xc,-0x120(%rbp)
  35:	00 00 00 
  38:	c7 85 e4 fe ff ff 00 	movl   $0x0,-0x11c(%rbp)
  3f:	00 00 00 
  42:	e9 ec 01 00 00       	jmp    233 <MDNS::HandleRequest(unsigned short)+0x233>
  47:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 4e <MDNS::HandleRequest(unsigned short)+0x4e>
  4e:	8b 85 e0 fe ff ff    	mov    -0x120(%rbp),%eax
  54:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  58:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
  5f:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  66:	48 89 ce             	mov    %rcx,%rsi
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	e8 00 00 00 00       	call   71 <MDNS::HandleRequest(unsigned short)+0x71>
  71:	01 85 e0 fe ff ff    	add    %eax,-0x120(%rbp)
  77:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 7e <MDNS::HandleRequest(unsigned short)+0x7e>
  7e:	8b 85 e0 fe ff ff    	mov    -0x120(%rbp),%eax
  84:	48 01 d0             	add    %rdx,%rax
  87:	0f b7 00             	movzwl (%rax),%eax
  8a:	0f b7 c0             	movzwl %ax,%eax
  8d:	66 c1 c0 08          	rol    $0x8,%ax
  91:	66 89 85 de fe ff ff 	mov    %ax,-0x122(%rbp)
  98:	83 85 e0 fe ff ff 02 	addl   $0x2,-0x120(%rbp)
  9f:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # a6 <MDNS::HandleRequest(unsigned short)+0xa6>
  a6:	8b 85 e0 fe ff ff    	mov    -0x120(%rbp),%eax
  ac:	48 01 d0             	add    %rdx,%rax
  af:	0f b7 00             	movzwl (%rax),%eax
  b2:	0f b7 c0             	movzwl %ax,%eax
  b5:	66 c1 c0 08          	rol    $0x8,%ax
  b9:	0f b7 c0             	movzwl %ax,%eax
  bc:	83 e0 7f             	and    $0x7f,%eax
  bf:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
  c5:	83 85 e0 fe ff ff 02 	addl   $0x2,-0x120(%rbp)
  cc:	83 bd ec fe ff ff 01 	cmpl   $0x1,-0x114(%rbp)
  d3:	0f 85 53 01 00 00    	jne    22c <MDNS::HandleRequest(unsigned short)+0x22c>
  d9:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # e0 <MDNS::HandleRequest(unsigned short)+0xe0>
  e0:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
  e7:	48 89 d6             	mov    %rdx,%rsi
  ea:	48 89 c7             	mov    %rax,%rdi
  ed:	e8 00 00 00 00       	call   f2 <MDNS::HandleRequest(unsigned short)+0xf2>
  f2:	85 c0                	test   %eax,%eax
  f4:	75 40                	jne    136 <MDNS::HandleRequest(unsigned short)+0x136>
  f6:	66 83 bd de fe ff ff 	cmpw   $0x1,-0x122(%rbp)
  fd:	01 
  fe:	75 36                	jne    136 <MDNS::HandleRequest(unsigned short)+0x136>
 100:	e8 00 00 00 00       	call   105 <MDNS::HandleRequest(unsigned short)+0x105>
 105:	48 89 c7             	mov    %rax,%rdi
 108:	8b 0d 00 00 00 00    	mov    0x0(%rip),%ecx        # 10e <MDNS::HandleRequest(unsigned short)+0x10e>
 10e:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 114 <MDNS::HandleRequest(unsigned short)+0x114>
 114:	0f b7 d0             	movzwl %ax,%edx
 117:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 11d <MDNS::HandleRequest(unsigned short)+0x11d>
 11d:	41 b9 e9 14 00 00    	mov    $0x14e9,%r9d
 123:	41 89 c8             	mov    %ecx,%r8d
 126:	89 d1                	mov    %edx,%ecx
 128:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 12f <MDNS::HandleRequest(unsigned short)+0x12f>
 12f:	89 c6                	mov    %eax,%esi
 131:	e8 00 00 00 00       	call   136 <MDNS::HandleRequest(unsigned short)+0x136>
 136:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
 13d:	48 89 c6             	mov    %rax,%rsi
 140:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 147 <MDNS::HandleRequest(unsigned short)+0x147>
 147:	48 89 c7             	mov    %rax,%rdi
 14a:	e8 00 00 00 00       	call   14f <MDNS::HandleRequest(unsigned short)+0x14f>
 14f:	85 c0                	test   %eax,%eax
 151:	0f 94 c0             	sete   %al
 154:	88 85 dd fe ff ff    	mov    %al,-0x123(%rbp)
 15a:	c7 85 e8 fe ff ff 00 	movl   $0x0,-0x118(%rbp)
 161:	00 00 00 
 164:	e9 b6 00 00 00       	jmp    21f <MDNS::HandleRequest(unsigned short)+0x21f>
 169:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
 16f:	48 c1 e0 05          	shl    $0x5,%rax
 173:	48 89 c2             	mov    %rax,%rdx
 176:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 17d <MDNS::HandleRequest(unsigned short)+0x17d>
 17d:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
 181:	48 85 c0             	test   %rax,%rax
 184:	0f 84 8e 00 00 00    	je     218 <MDNS::HandleRequest(unsigned short)+0x218>
 18a:	80 bd dd fe ff ff 00 	cmpb   $0x0,-0x123(%rbp)
 191:	75 2e                	jne    1c1 <MDNS::HandleRequest(unsigned short)+0x1c1>
 193:	8b 85 e8 fe ff ff    	mov    -0x118(%rbp),%eax
 199:	48 c1 e0 05          	shl    $0x5,%rax
 19d:	48 89 c2             	mov    %rax,%rdx
 1a0:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1a7 <MDNS::HandleRequest(unsigned short)+0x1a7>
 1a7:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
 1ab:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
 1b2:	48 89 d6             	mov    %rdx,%rsi
 1b5:	48 89 c7             	mov    %rax,%rdi
 1b8:	e8 00 00 00 00       	call   1bd <MDNS::HandleRequest(unsigned short)+0x1bd>
 1bd:	85 c0                	test   %eax,%eax
 1bf:	75 57                	jne    218 <MDNS::HandleRequest(unsigned short)+0x218>
 1c1:	66 83 bd de fe ff ff 	cmpw   $0xc,-0x122(%rbp)
 1c8:	0c 
 1c9:	75 4d                	jne    218 <MDNS::HandleRequest(unsigned short)+0x218>
 1cb:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
 1d1:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
 1d8:	89 d6                	mov    %edx,%esi
 1da:	48 89 c7             	mov    %rax,%rdi
 1dd:	e8 00 00 00 00       	call   1e2 <MDNS::HandleRequest(unsigned short)+0x1e2>
 1e2:	e8 00 00 00 00       	call   1e7 <MDNS::HandleRequest(unsigned short)+0x1e7>
 1e7:	48 89 c7             	mov    %rax,%rdi
 1ea:	8b 0d 00 00 00 00    	mov    0x0(%rip),%ecx        # 1f0 <MDNS::HandleRequest(unsigned short)+0x1f0>
 1f0:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 1f6 <MDNS::HandleRequest(unsigned short)+0x1f6>
 1f6:	0f b7 d0             	movzwl %ax,%edx
 1f9:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 1ff <MDNS::HandleRequest(unsigned short)+0x1ff>
 1ff:	41 b9 e9 14 00 00    	mov    $0x14e9,%r9d
 205:	41 89 c8             	mov    %ecx,%r8d
 208:	89 d1                	mov    %edx,%ecx
 20a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 211 <MDNS::HandleRequest(unsigned short)+0x211>
 211:	89 c6                	mov    %eax,%esi
 213:	e8 00 00 00 00       	call   218 <MDNS::HandleRequest(unsigned short)+0x218>
 218:	83 85 e8 fe ff ff 01 	addl   $0x1,-0x118(%rbp)
 21f:	83 bd e8 fe ff ff 07 	cmpl   $0x7,-0x118(%rbp)
 226:	0f 86 3d ff ff ff    	jbe    169 <MDNS::HandleRequest(unsigned short)+0x169>
 22c:	83 85 e4 fe ff ff 01 	addl   $0x1,-0x11c(%rbp)
 233:	0f b7 85 c4 fe ff ff 	movzwl -0x13c(%rbp),%eax
 23a:	39 85 e4 fe ff ff    	cmp    %eax,-0x11c(%rbp)
 240:	0f 82 01 fe ff ff    	jb     47 <MDNS::HandleRequest(unsigned short)+0x47>
 246:	90                   	nop
 247:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 24b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 252:	00 00 
 254:	74 05                	je     25b <MDNS::HandleRequest(unsigned short)+0x25b>
 256:	e8 00 00 00 00       	call   25b <MDNS::HandleRequest(unsigned short)+0x25b>
 25b:	c9                   	leave  
 25c:	c3                   	ret    

Disassembly of section .text._ZN4MDNS5ParseEv:

0000000000000000 <MDNS::Parse()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 17 <MDNS::Parse()+0x17>
  17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  23:	0f b7 c0             	movzwl %ax,%eax
  26:	66 c1 c0 08          	rol    $0x8,%ax
  2a:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  2e:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  32:	66 85 c0             	test   %ax,%ax
  35:	78 3a                	js     71 <MDNS::Parse()+0x71>
  37:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  3b:	66 c1 e8 0e          	shr    $0xe,%ax
  3f:	66 85 c0             	test   %ax,%ax
  42:	75 2d                	jne    71 <MDNS::Parse()+0x71>
  44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  48:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  4c:	66 85 c0             	test   %ax,%ax
  4f:	74 20                	je     71 <MDNS::Parse()+0x71>
  51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  55:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  59:	0f b7 c0             	movzwl %ax,%eax
  5c:	66 c1 c0 08          	rol    $0x8,%ax
  60:	0f b7 d0             	movzwl %ax,%edx
  63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  67:	89 d6                	mov    %edx,%esi
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	e8 00 00 00 00       	call   71 <MDNS::Parse()+0x71>
  71:	90                   	nop
  72:	c9                   	leave  
  73:	c3                   	ret    

Disassembly of section .text._ZN4MDNS3RunEv:

0000000000000000 <MDNS::Run()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	e8 00 00 00 00       	call   15 <MDNS::Run()+0x15>
  15:	48 89 c7             	mov    %rax,%rdi
  18:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 1e <MDNS::Run()+0x1e>
  1e:	4c 8d 05 00 00 00 00 	lea    0x0(%rip),%r8        # 25 <MDNS::Run()+0x25>
  25:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2c <MDNS::Run()+0x2c>
  2c:	48 89 d1             	mov    %rdx,%rcx
  2f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 36 <MDNS::Run()+0x36>
  36:	89 c6                	mov    %eax,%esi
  38:	e8 00 00 00 00       	call   3d <MDNS::Run()+0x3d>
  3d:	66 89 05 00 00 00 00 	mov    %ax,0x0(%rip)        # 44 <MDNS::Run()+0x44>
  44:	0f b7 05 00 00 00 00 	movzwl 0x0(%rip),%eax        # 4b <MDNS::Run()+0x4b>
  4b:	66 3d e9 14          	cmp    $0x14e9,%ax
  4f:	75 19                	jne    6a <MDNS::Run()+0x6a>
  51:	0f b7 05 00 00 00 00 	movzwl 0x0(%rip),%eax        # 58 <MDNS::Run()+0x58>
  58:	66 83 f8 0c          	cmp    $0xc,%ax
  5c:	76 0c                	jbe    6a <MDNS::Run()+0x6a>
  5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	call   6a <MDNS::Run()+0x6a>
  6a:	90                   	nop
  6b:	c9                   	leave  
  6c:	c3                   	ret    

Disassembly of section .text._ZN4MDNS5PrintEv:

0000000000000000 <MDNS::Print()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 17 <MDNS::Print()+0x17>
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	call   1f <MDNS::Print()+0x1f>
  1f:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 25 <MDNS::Print()+0x25>
  25:	83 f8 ff             	cmp    $0xffffffff,%eax
  28:	75 14                	jne    3e <MDNS::Print()+0x3e>
  2a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 31 <MDNS::Print()+0x31>
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	call   39 <MDNS::Print()+0x39>
  39:	e9 ce 00 00 00       	jmp    10c <MDNS::Print()+0x10c>
  3e:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 45 <MDNS::Print()+0x45>
  45:	48 89 c6             	mov    %rax,%rsi
  48:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 4f <MDNS::Print()+0x4f>
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	b8 00 00 00 00       	mov    $0x0,%eax
  57:	e8 00 00 00 00       	call   5c <MDNS::Print()+0x5c>
  5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  63:	e9 9a 00 00 00       	jmp    102 <MDNS::Print()+0x102>
  68:	8b 45 fc             	mov    -0x4(%rbp),%eax
  6b:	48 c1 e0 05          	shl    $0x5,%rax
  6f:	48 89 c2             	mov    %rax,%rdx
  72:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 79 <MDNS::Print()+0x79>
  79:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
  7d:	48 85 c0             	test   %rax,%rax
  80:	74 7c                	je     fe <MDNS::Print()+0xfe>
  82:	8b 45 fc             	mov    -0x4(%rbp),%eax
  85:	48 c1 e0 05          	shl    $0x5,%rax
  89:	48 89 c2             	mov    %rax,%rdx
  8c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 93 <MDNS::Print()+0x93>
  93:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
  97:	48 85 c0             	test   %rax,%rax
  9a:	74 17                	je     b3 <MDNS::Print()+0xb3>
  9c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  9f:	48 c1 e0 05          	shl    $0x5,%rax
  a3:	48 89 c2             	mov    %rax,%rdx
  a6:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ad <MDNS::Print()+0xad>
  ad:	48 8b 04 02          	mov    (%rdx,%rax,1),%rax
  b1:	eb 07                	jmp    ba <MDNS::Print()+0xba>
  b3:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ba <MDNS::Print()+0xba>
  ba:	8b 55 fc             	mov    -0x4(%rbp),%edx
  bd:	48 89 d1             	mov    %rdx,%rcx
  c0:	48 c1 e1 05          	shl    $0x5,%rcx
  c4:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # cb <MDNS::Print()+0xcb>
  cb:	0f b7 14 11          	movzwl (%rcx,%rdx,1),%edx
  cf:	0f b7 d2             	movzwl %dx,%edx
  d2:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  d5:	48 89 ce             	mov    %rcx,%rsi
  d8:	48 c1 e6 05          	shl    $0x5,%rsi
  dc:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # e3 <MDNS::Print()+0xe3>
  e3:	48 8b 34 0e          	mov    (%rsi,%rcx,1),%rsi
  e7:	48 89 c1             	mov    %rax,%rcx
  ea:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # f1 <MDNS::Print()+0xf1>
  f1:	48 89 c7             	mov    %rax,%rdi
  f4:	b8 00 00 00 00       	mov    $0x0,%eax
  f9:	e8 00 00 00 00       	call   fe <MDNS::Print()+0xfe>
  fe:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
 102:	83 7d fc 07          	cmpl   $0x7,-0x4(%rbp)
 106:	0f 86 5c ff ff ff    	jbe    68 <MDNS::Print()+0x68>
 10c:	c9                   	leave  
 10d:	c3                   	ret    

tftpdaemon.o:     file format elf64-x86-64


Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # f <Network::Get()+0xf>
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemonC2Ev:

0000000000000000 <TFTPDaemon::TFTPDaemon()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 17 <TFTPDaemon::TFTPDaemon()+0x17>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	c7 40 0c ff ff ff ff 	movl   $0xffffffff,0xc(%rax)
  34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  38:	c7 80 20 02 00 00 00 	movl   $0x0,0x220(%rax)
  3f:	00 00 00 
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	66 c7 80 24 02 00 00 	movw   $0x0,0x224(%rax)
  4d:	00 00 
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  53:	48 c7 80 28 02 00 00 	movq   $0x0,0x228(%rax)
  5a:	00 00 00 00 
  5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  62:	66 c7 80 30 02 00 00 	movw   $0x0,0x230(%rax)
  69:	00 00 
  6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6f:	48 c7 80 38 02 00 00 	movq   $0x0,0x238(%rax)
  76:	00 00 00 00 
  7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7e:	66 c7 80 40 02 00 00 	movw   $0x0,0x240(%rax)
  85:	00 00 
  87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8b:	c6 80 42 02 00 00 00 	movb   $0x0,0x242(%rax)
  92:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 99 <TFTPDaemon::TFTPDaemon()+0x99>
  99:	48 85 c0             	test   %rax,%rax
  9c:	74 1d                	je     bb <TFTPDaemon::TFTPDaemon()+0xbb>
  9e:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # a5 <TFTPDaemon::TFTPDaemon()+0xa5>
  a5:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # ac <TFTPDaemon::TFTPDaemon()+0xac>
  ac:	48 8b 12             	mov    (%rdx),%rdx
  af:	48 83 c2 38          	add    $0x38,%rdx
  b3:	48 8b 12             	mov    (%rdx),%rdx
  b6:	48 89 c7             	mov    %rax,%rdi
  b9:	ff d2                	call   *%rdx
  bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  bf:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # c6 <TFTPDaemon::TFTPDaemon()+0xc6>
  c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ca:	48 83 c0 10          	add    $0x10,%rax
  ce:	ba 10 02 00 00       	mov    $0x210,%edx
  d3:	be 00 00 00 00       	mov    $0x0,%esi
  d8:	48 89 c7             	mov    %rax,%rdi
  db:	e8 00 00 00 00       	call   e0 <TFTPDaemon::TFTPDaemon()+0xe0>
  e0:	90                   	nop
  e1:	c9                   	leave  
  e2:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemonD2Ev:

0000000000000000 <TFTPDaemon::~TFTPDaemon()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 17 <TFTPDaemon::~TFTPDaemon()+0x17>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	e8 00 00 00 00       	call   23 <TFTPDaemon::~TFTPDaemon()+0x23>
  23:	48 89 c2             	mov    %rax,%rdx
  26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2a:	0f b7 80 24 02 00 00 	movzwl 0x224(%rax),%eax
  31:	0f b7 c0             	movzwl %ax,%eax
  34:	89 c6                	mov    %eax,%esi
  36:	48 89 d7             	mov    %rdx,%rdi
  39:	e8 00 00 00 00       	call   3e <TFTPDaemon::~TFTPDaemon()+0x3e>
  3e:	48 c7 05 00 00 00 00 	movq   $0x0,0x0(%rip)        # 49 <TFTPDaemon::~TFTPDaemon()+0x49>
  45:	00 00 00 00 
  49:	90                   	nop
  4a:	c9                   	leave  
  4b:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemonD0Ev:

0000000000000000 <TFTPDaemon::~TFTPDaemon()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <TFTPDaemon::~TFTPDaemon()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <TFTPDaemon::~TFTPDaemon()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemon3RunEv:

0000000000000000 <TFTPDaemon::Run()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 40 08             	mov    0x8(%rax),%eax
  17:	85 c0                	test   %eax,%eax
  19:	0f 85 a3 00 00 00    	jne    c2 <TFTPDaemon::Run()+0xc2>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	0f b7 80 24 02 00 00 	movzwl 0x224(%rax),%eax
  2a:	66 85 c0             	test   %ax,%ax
  2d:	74 2b                	je     5a <TFTPDaemon::Run()+0x5a>
  2f:	e8 00 00 00 00       	call   34 <TFTPDaemon::Run()+0x34>
  34:	48 89 c2             	mov    %rax,%rdx
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	0f b7 80 24 02 00 00 	movzwl 0x224(%rax),%eax
  42:	0f b7 c0             	movzwl %ax,%eax
  45:	89 c6                	mov    %eax,%esi
  47:	48 89 d7             	mov    %rdx,%rdi
  4a:	e8 00 00 00 00       	call   4f <TFTPDaemon::Run()+0x4f>
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  53:	c7 40 0c ff ff ff ff 	movl   $0xffffffff,0xc(%rax)
  5a:	e8 00 00 00 00       	call   5f <TFTPDaemon::Run()+0x5f>
  5f:	be 45 00 00 00       	mov    $0x45,%esi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	call   6c <TFTPDaemon::Run()+0x6c>
  6c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  70:	89 42 0c             	mov    %eax,0xc(%rdx)
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	66 c7 80 24 02 00 00 	movw   $0x45,0x224(%rax)
  7e:	45 00 
  80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  84:	66 c7 80 30 02 00 00 	movw   $0x0,0x230(%rax)
  8b:	00 00 
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  9c:	c6 80 42 02 00 00 00 	movb   $0x0,0x242(%rax)
  a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a7:	48 83 c0 10          	add    $0x10,%rax
  ab:	ba 94 00 00 00       	mov    $0x94,%edx
  b0:	be 00 00 00 00       	mov    $0x0,%esi
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	call   bd <TFTPDaemon::Run()+0xbd>
  bd:	e9 ec 00 00 00       	jmp    1ae <TFTPDaemon::Run()+0x1ae>
  c2:	e8 00 00 00 00       	call   c7 <TFTPDaemon::Run()+0xc7>
  c7:	48 89 c7             	mov    %rax,%rdi
  ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ce:	48 8d b0 24 02 00 00 	lea    0x224(%rax),%rsi
  d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d9:	48 8d 88 20 02 00 00 	lea    0x220(%rax),%rcx
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 8d 50 10          	lea    0x10(%rax),%rdx
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	8b 40 0c             	mov    0xc(%rax),%eax
  ef:	49 89 f1             	mov    %rsi,%r9
  f2:	49 89 c8             	mov    %rcx,%r8
  f5:	b9 10 02 00 00       	mov    $0x210,%ecx
  fa:	89 c6                	mov    %eax,%esi
  fc:	e8 00 00 00 00       	call   101 <TFTPDaemon::Run()+0x101>
 101:	0f b7 d0             	movzwl %ax,%edx
 104:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 108:	48 89 90 28 02 00 00 	mov    %rdx,0x228(%rax)
 10f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 113:	8b 40 08             	mov    0x8(%rax),%eax
 116:	83 f8 05             	cmp    $0x5,%eax
 119:	74 6b                	je     186 <TFTPDaemon::Run()+0x186>
 11b:	83 f8 05             	cmp    $0x5,%eax
 11e:	0f 8f 83 00 00 00    	jg     1a7 <TFTPDaemon::Run()+0x1a7>
 124:	83 f8 03             	cmp    $0x3,%eax
 127:	74 3e                	je     167 <TFTPDaemon::Run()+0x167>
 129:	83 f8 03             	cmp    $0x3,%eax
 12c:	7f 79                	jg     1a7 <TFTPDaemon::Run()+0x1a7>
 12e:	83 f8 01             	cmp    $0x1,%eax
 131:	74 07                	je     13a <TFTPDaemon::Run()+0x13a>
 133:	83 f8 02             	cmp    $0x2,%eax
 136:	74 21                	je     159 <TFTPDaemon::Run()+0x159>
 138:	eb 6d                	jmp    1a7 <TFTPDaemon::Run()+0x1a7>
 13a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 13e:	48 8b 80 28 02 00 00 	mov    0x228(%rax),%rax
 145:	48 83 f8 04          	cmp    $0x4,%rax
 149:	76 5c                	jbe    1a7 <TFTPDaemon::Run()+0x1a7>
 14b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	e8 00 00 00 00       	call   157 <TFTPDaemon::Run()+0x157>
 157:	eb 4e                	jmp    1a7 <TFTPDaemon::Run()+0x1a7>
 159:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 15d:	48 89 c7             	mov    %rax,%rdi
 160:	e8 00 00 00 00       	call   165 <TFTPDaemon::Run()+0x165>
 165:	eb 47                	jmp    1ae <TFTPDaemon::Run()+0x1ae>
 167:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 16b:	48 8b 80 28 02 00 00 	mov    0x228(%rax),%rax
 172:	48 83 f8 04          	cmp    $0x4,%rax
 176:	75 32                	jne    1aa <TFTPDaemon::Run()+0x1aa>
 178:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 17c:	48 89 c7             	mov    %rax,%rdi
 17f:	e8 00 00 00 00       	call   184 <TFTPDaemon::Run()+0x184>
 184:	eb 24                	jmp    1aa <TFTPDaemon::Run()+0x1aa>
 186:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 18a:	48 8b 80 28 02 00 00 	mov    0x228(%rax),%rax
 191:	48 3d 04 02 00 00    	cmp    $0x204,%rax
 197:	77 14                	ja     1ad <TFTPDaemon::Run()+0x1ad>
 199:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 19d:	48 89 c7             	mov    %rax,%rdi
 1a0:	e8 00 00 00 00       	call   1a5 <TFTPDaemon::Run()+0x1a5>
 1a5:	eb 06                	jmp    1ad <TFTPDaemon::Run()+0x1ad>
 1a7:	90                   	nop
 1a8:	eb 04                	jmp    1ae <TFTPDaemon::Run()+0x1ae>
 1aa:	90                   	nop
 1ab:	eb 01                	jmp    1ae <TFTPDaemon::Run()+0x1ae>
 1ad:	90                   	nop
 1ae:	b8 01 00 00 00       	mov    $0x1,%eax
 1b3:	c9                   	leave  
 1b4:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemon13HandleRequestEv:

0000000000000000 <TFTPDaemon::HandleRequest()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  14:	48 83 c0 10          	add    $0x10,%rax
  18:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  1c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  20:	0f b7 00             	movzwl (%rax),%eax
  23:	0f b7 c0             	movzwl %ax,%eax
  26:	66 c1 c0 08          	rol    $0x8,%ax
  2a:	66 89 45 da          	mov    %ax,-0x26(%rbp)
  2e:	66 83 7d da 01       	cmpw   $0x1,-0x26(%rbp)
  33:	74 24                	je     59 <TFTPDaemon::HandleRequest()+0x59>
  35:	66 83 7d da 02       	cmpw   $0x2,-0x26(%rbp)
  3a:	74 1d                	je     59 <TFTPDaemon::HandleRequest()+0x59>
  3c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 47 <TFTPDaemon::HandleRequest()+0x47>
  47:	be 04 00 00 00       	mov    $0x4,%esi
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	call   54 <TFTPDaemon::HandleRequest()+0x54>
  54:	e9 25 02 00 00       	jmp    27e <TFTPDaemon::HandleRequest()+0x27e>
  59:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5d:	48 83 c0 02          	add    $0x2,%rax
  61:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	e8 00 00 00 00       	call   71 <TFTPDaemon::HandleRequest()+0x71>
  71:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  75:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  7a:	74 0a                	je     86 <TFTPDaemon::HandleRequest()+0x86>
  7c:	48 81 7d f0 80 00 00 	cmpq   $0x80,-0x10(%rbp)
  83:	00 
  84:	76 1d                	jbe    a3 <TFTPDaemon::HandleRequest()+0xa3>
  86:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 91 <TFTPDaemon::HandleRequest()+0x91>
  91:	be 00 00 00 00       	mov    $0x0,%esi
  96:	48 89 c7             	mov    %rax,%rdi
  99:	e8 00 00 00 00       	call   9e <TFTPDaemon::HandleRequest()+0x9e>
  9e:	e9 db 01 00 00       	jmp    27e <TFTPDaemon::HandleRequest()+0x27e>
  a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  a7:	48 8d 50 01          	lea    0x1(%rax),%rdx
  ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  af:	48 01 d0             	add    %rdx,%rax
  b2:	48 83 c0 02          	add    $0x2,%rax
  b6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  be:	ba 05 00 00 00       	mov    $0x5,%edx
  c3:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ca <TFTPDaemon::HandleRequest()+0xca>
  ca:	48 89 ce             	mov    %rcx,%rsi
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	call   d5 <TFTPDaemon::HandleRequest()+0xd5>
  d5:	85 c0                	test   %eax,%eax
  d7:	75 09                	jne    e2 <TFTPDaemon::HandleRequest()+0xe2>
  d9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  e0:	eb 45                	jmp    127 <TFTPDaemon::HandleRequest()+0x127>
  e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e6:	ba 08 00 00 00       	mov    $0x8,%edx
  eb:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # f2 <TFTPDaemon::HandleRequest()+0xf2>
  f2:	48 89 ce             	mov    %rcx,%rsi
  f5:	48 89 c7             	mov    %rax,%rdi
  f8:	e8 00 00 00 00       	call   fd <TFTPDaemon::HandleRequest()+0xfd>
  fd:	85 c0                	test   %eax,%eax
  ff:	75 09                	jne    10a <TFTPDaemon::HandleRequest()+0x10a>
 101:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
 108:	eb 1d                	jmp    127 <TFTPDaemon::HandleRequest()+0x127>
 10a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 10e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 115 <TFTPDaemon::HandleRequest()+0x115>
 115:	be 04 00 00 00       	mov    $0x4,%esi
 11a:	48 89 c7             	mov    %rax,%rdi
 11d:	e8 00 00 00 00       	call   122 <TFTPDaemon::HandleRequest()+0x122>
 122:	e9 57 01 00 00       	jmp    27e <TFTPDaemon::HandleRequest()+0x27e>
 127:	0f b7 45 da          	movzwl -0x26(%rbp),%eax
 12b:	83 f8 01             	cmp    $0x1,%eax
 12e:	74 35                	je     165 <TFTPDaemon::HandleRequest()+0x165>
 130:	83 f8 02             	cmp    $0x2,%eax
 133:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 137:	48 8b 00             	mov    (%rax),%rax
 13a:	48 83 c0 18          	add    $0x18,%rax
 13e:	4c 8b 00             	mov    (%rax),%r8
 141:	8b 55 dc             	mov    -0x24(%rbp),%edx
 144:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 148:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 14c:	48 89 ce             	mov    %rcx,%rsi
 14f:	48 89 c7             	mov    %rax,%rdi
 152:	41 ff d0             	call   *%r8
 155:	83 f0 01             	xor    $0x1,%eax
 158:	84 c0                	test   %al,%al
 15a:	0f 84 cd 00 00 00    	je     22d <TFTPDaemon::HandleRequest()+0x22d>
 160:	e9 a3 00 00 00       	jmp    208 <TFTPDaemon::HandleRequest()+0x208>
 165:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 169:	48 8b 00             	mov    (%rax),%rax
 16c:	48 83 c0 10          	add    $0x10,%rax
 170:	4c 8b 00             	mov    (%rax),%r8
 173:	8b 55 dc             	mov    -0x24(%rbp),%edx
 176:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 17a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 17e:	48 89 ce             	mov    %rcx,%rsi
 181:	48 89 c7             	mov    %rax,%rdi
 184:	41 ff d0             	call   *%r8
 187:	83 f0 01             	xor    $0x1,%eax
 18a:	84 c0                	test   %al,%al
 18c:	74 28                	je     1b6 <TFTPDaemon::HandleRequest()+0x1b6>
 18e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 192:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 199 <TFTPDaemon::HandleRequest()+0x199>
 199:	be 01 00 00 00       	mov    $0x1,%esi
 19e:	48 89 c7             	mov    %rax,%rdi
 1a1:	e8 00 00 00 00       	call   1a6 <TFTPDaemon::HandleRequest()+0x1a6>
 1a6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1aa:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
 1b1:	e9 c8 00 00 00       	jmp    27e <TFTPDaemon::HandleRequest()+0x27e>
 1b6:	e8 00 00 00 00       	call   1bb <TFTPDaemon::HandleRequest()+0x1bb>
 1bb:	be 45 00 00 00       	mov    $0x45,%esi
 1c0:	48 89 c7             	mov    %rax,%rdi
 1c3:	e8 00 00 00 00       	call   1c8 <TFTPDaemon::HandleRequest()+0x1c8>
 1c8:	e8 00 00 00 00       	call   1cd <TFTPDaemon::HandleRequest()+0x1cd>
 1cd:	48 89 c2             	mov    %rax,%rdx
 1d0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1d4:	0f b7 80 24 02 00 00 	movzwl 0x224(%rax),%eax
 1db:	0f b7 c0             	movzwl %ax,%eax
 1de:	89 c6                	mov    %eax,%esi
 1e0:	48 89 d7             	mov    %rdx,%rdi
 1e3:	e8 00 00 00 00       	call   1e8 <TFTPDaemon::HandleRequest()+0x1e8>
 1e8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
 1ec:	89 42 0c             	mov    %eax,0xc(%rdx)
 1ef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1f3:	c7 40 08 02 00 00 00 	movl   $0x2,0x8(%rax)
 1fa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1fe:	48 89 c7             	mov    %rax,%rdi
 201:	e8 00 00 00 00       	call   206 <TFTPDaemon::HandleRequest()+0x206>
 206:	eb 76                	jmp    27e <TFTPDaemon::HandleRequest()+0x27e>
 208:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 20c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 213 <TFTPDaemon::HandleRequest()+0x213>
 213:	be 02 00 00 00       	mov    $0x2,%esi
 218:	48 89 c7             	mov    %rax,%rdi
 21b:	e8 00 00 00 00       	call   220 <TFTPDaemon::HandleRequest()+0x220>
 220:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 224:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
 22b:	eb 50                	jmp    27d <TFTPDaemon::HandleRequest()+0x27d>
 22d:	e8 00 00 00 00       	call   232 <TFTPDaemon::HandleRequest()+0x232>
 232:	be 45 00 00 00       	mov    $0x45,%esi
 237:	48 89 c7             	mov    %rax,%rdi
 23a:	e8 00 00 00 00       	call   23f <TFTPDaemon::HandleRequest()+0x23f>
 23f:	e8 00 00 00 00       	call   244 <TFTPDaemon::HandleRequest()+0x244>
 244:	48 89 c2             	mov    %rax,%rdx
 247:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 24b:	0f b7 80 24 02 00 00 	movzwl 0x224(%rax),%eax
 252:	0f b7 c0             	movzwl %ax,%eax
 255:	89 c6                	mov    %eax,%esi
 257:	48 89 d7             	mov    %rdx,%rdi
 25a:	e8 00 00 00 00       	call   25f <TFTPDaemon::HandleRequest()+0x25f>
 25f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
 263:	89 42 0c             	mov    %eax,0xc(%rdx)
 266:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 26a:	c7 40 08 04 00 00 00 	movl   $0x4,0x8(%rax)
 271:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 275:	48 89 c7             	mov    %rax,%rdi
 278:	e8 00 00 00 00       	call   27d <TFTPDaemon::HandleRequest()+0x27d>
 27d:	90                   	nop
 27e:	c9                   	leave  
 27f:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemon9SendErrorEtPKc:

0000000000000000 <TFTPDaemon::SendError(unsigned short, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
   f:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  16:	89 f0                	mov    %esi,%eax
  18:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  1f:	66 89 85 64 ff ff ff 	mov    %ax,-0x9c(%rbp)
  26:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2d:	00 00 
  2f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  33:	31 c0                	xor    %eax,%eax
  35:	66 c7 85 70 ff ff ff 	movw   $0x500,-0x90(%rbp)
  3c:	00 05 
  3e:	0f b7 85 64 ff ff ff 	movzwl -0x9c(%rbp),%eax
  45:	66 c1 c0 08          	rol    $0x8,%ax
  49:	66 89 85 72 ff ff ff 	mov    %ax,-0x8e(%rbp)
  50:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  57:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  5e:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  62:	ba 7f 00 00 00       	mov    $0x7f,%edx
  67:	48 89 c6             	mov    %rax,%rsi
  6a:	48 89 cf             	mov    %rcx,%rdi
  6d:	e8 00 00 00 00       	call   72 <TFTPDaemon::SendError(unsigned short, char const*)+0x72>
  72:	e8 00 00 00 00       	call   77 <TFTPDaemon::SendError(unsigned short, char const*)+0x77>
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  81:	0f b7 80 24 02 00 00 	movzwl 0x224(%rax),%eax
  88:	0f b7 f0             	movzwl %ax,%esi
  8b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  92:	8b 88 20 02 00 00    	mov    0x220(%rax),%ecx
  98:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  9f:	8b 40 0c             	mov    0xc(%rax),%eax
  a2:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  a9:	41 89 f1             	mov    %esi,%r9d
  ac:	41 89 c8             	mov    %ecx,%r8d
  af:	b9 84 00 00 00       	mov    $0x84,%ecx
  b4:	89 c6                	mov    %eax,%esi
  b6:	e8 00 00 00 00       	call   bb <TFTPDaemon::SendError(unsigned short, char const*)+0xbb>
  bb:	90                   	nop
  bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c0:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  c7:	00 00 
  c9:	74 05                	je     d0 <TFTPDaemon::SendError(unsigned short, char const*)+0xd0>
  cb:	e8 00 00 00 00       	call   d0 <TFTPDaemon::SendError(unsigned short, char const*)+0xd0>
  d0:	c9                   	leave  
  d1:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemon6DoReadEv:

0000000000000000 <TFTPDaemon::DoRead()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 83 c0 10          	add    $0x10,%rax
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	8b 40 08             	mov    0x8(%rax),%eax
  23:	83 f8 02             	cmp    $0x2,%eax
  26:	0f 85 db 00 00 00    	jne    107 <TFTPDaemon::DoRead()+0x107>
  2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  30:	48 8b 00             	mov    (%rax),%rax
  33:	48 83 c0 28          	add    $0x28,%rax
  37:	4c 8b 00             	mov    (%rax),%r8
  3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3e:	0f b7 80 30 02 00 00 	movzwl 0x230(%rax),%eax
  45:	8d 50 01             	lea    0x1(%rax),%edx
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	66 89 90 30 02 00 00 	mov    %dx,0x230(%rax)
  53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  57:	0f b7 80 30 02 00 00 	movzwl 0x230(%rax),%eax
  5e:	0f b7 d0             	movzwl %ax,%edx
  61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  65:	48 8d 70 04          	lea    0x4(%rax),%rsi
  69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6d:	89 d1                	mov    %edx,%ecx
  6f:	ba 00 02 00 00       	mov    $0x200,%edx
  74:	48 89 c7             	mov    %rax,%rdi
  77:	41 ff d0             	call   *%r8
  7a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  7e:	48 89 82 38 02 00 00 	mov    %rax,0x238(%rdx)
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	66 c7 00 00 03       	movw   $0x300,(%rax)
  8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  92:	0f b7 80 30 02 00 00 	movzwl 0x230(%rax),%eax
  99:	0f b7 c0             	movzwl %ax,%eax
  9c:	89 c2                	mov    %eax,%edx
  9e:	66 c1 c2 08          	rol    $0x8,%dx
  a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a6:	66 89 50 02          	mov    %dx,0x2(%rax)
  aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ae:	48 8b 80 38 02 00 00 	mov    0x238(%rax),%rax
  b5:	8d 50 04             	lea    0x4(%rax),%edx
  b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bc:	66 89 90 40 02 00 00 	mov    %dx,0x240(%rax)
  c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c7:	48 8b 80 38 02 00 00 	mov    0x238(%rax),%rax
  ce:	48 3d ff 01 00 00    	cmp    $0x1ff,%rax
  d4:	0f 96 c2             	setbe  %dl
  d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  db:	88 90 42 02 00 00    	mov    %dl,0x242(%rax)
  e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e5:	0f b6 80 42 02 00 00 	movzbl 0x242(%rax),%eax
  ec:	84 c0                	test   %al,%al
  ee:	74 17                	je     107 <TFTPDaemon::DoRead()+0x107>
  f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f4:	48 8b 00             	mov    (%rax),%rax
  f7:	48 83 c0 20          	add    $0x20,%rax
  fb:	48 8b 10             	mov    (%rax),%rdx
  fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 102:	48 89 c7             	mov    %rax,%rdi
 105:	ff d2                	call   *%rdx
 107:	e8 00 00 00 00       	call   10c <TFTPDaemon::DoRead()+0x10c>
 10c:	48 89 c7             	mov    %rax,%rdi
 10f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 113:	0f b7 80 24 02 00 00 	movzwl 0x224(%rax),%eax
 11a:	44 0f b7 c0          	movzwl %ax,%r8d
 11e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 122:	8b 88 20 02 00 00    	mov    0x220(%rax),%ecx
 128:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12c:	0f b7 80 40 02 00 00 	movzwl 0x240(%rax),%eax
 133:	0f b7 d0             	movzwl %ax,%edx
 136:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 13a:	48 8d 70 10          	lea    0x10(%rax),%rsi
 13e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 142:	8b 40 0c             	mov    0xc(%rax),%eax
 145:	45 89 c1             	mov    %r8d,%r9d
 148:	41 89 c8             	mov    %ecx,%r8d
 14b:	89 d1                	mov    %edx,%ecx
 14d:	48 89 f2             	mov    %rsi,%rdx
 150:	89 c6                	mov    %eax,%esi
 152:	e8 00 00 00 00       	call   157 <TFTPDaemon::DoRead()+0x157>
 157:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 15b:	c7 40 08 03 00 00 00 	movl   $0x3,0x8(%rax)
 162:	90                   	nop
 163:	c9                   	leave  
 164:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemon13HandleRecvAckEv:

0000000000000000 <TFTPDaemon::HandleRecvAck()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 83 c0 10          	add    $0x10,%rax
  14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	0f b7 00             	movzwl (%rax),%eax
  1f:	66 3d 00 04          	cmp    $0x400,%ax
  23:	75 41                	jne    66 <TFTPDaemon::HandleRecvAck()+0x66>
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	0f b7 80 30 02 00 00 	movzwl 0x230(%rax),%eax
  38:	0f b7 c0             	movzwl %ax,%eax
  3b:	66 c1 c0 08          	rol    $0x8,%ax
  3f:	66 39 c2             	cmp    %ax,%dx
  42:	75 22                	jne    66 <TFTPDaemon::HandleRecvAck()+0x66>
  44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  48:	0f b6 80 42 02 00 00 	movzbl 0x242(%rax),%eax
  4f:	84 c0                	test   %al,%al
  51:	74 07                	je     5a <TFTPDaemon::HandleRecvAck()+0x5a>
  53:	ba 00 00 00 00       	mov    $0x0,%edx
  58:	eb 05                	jmp    5f <TFTPDaemon::HandleRecvAck()+0x5f>
  5a:	ba 02 00 00 00       	mov    $0x2,%edx
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	89 50 08             	mov    %edx,0x8(%rax)
  66:	90                   	nop
  67:	5d                   	pop    %rbp
  68:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemon10DoWriteAckEv:

0000000000000000 <TFTPDaemon::DoWriteAck()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 83 c0 10          	add    $0x10,%rax
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	66 c7 00 00 04       	movw   $0x400,(%rax)
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	0f b7 80 30 02 00 00 	movzwl 0x230(%rax),%eax
  30:	0f b7 c0             	movzwl %ax,%eax
  33:	89 c2                	mov    %eax,%edx
  35:	66 c1 c2 08          	rol    $0x8,%dx
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	66 89 50 02          	mov    %dx,0x2(%rax)
  41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  45:	0f b6 80 42 02 00 00 	movzbl 0x242(%rax),%eax
  4c:	84 c0                	test   %al,%al
  4e:	74 07                	je     57 <TFTPDaemon::DoWriteAck()+0x57>
  50:	ba 00 00 00 00       	mov    $0x0,%edx
  55:	eb 05                	jmp    5c <TFTPDaemon::DoWriteAck()+0x5c>
  57:	ba 05 00 00 00       	mov    $0x5,%edx
  5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  60:	89 50 08             	mov    %edx,0x8(%rax)
  63:	e8 00 00 00 00       	call   68 <TFTPDaemon::DoWriteAck()+0x68>
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6f:	0f b7 80 24 02 00 00 	movzwl 0x224(%rax),%eax
  76:	0f b7 f0             	movzwl %ax,%esi
  79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7d:	8b 88 20 02 00 00    	mov    0x220(%rax),%ecx
  83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  87:	48 8d 50 10          	lea    0x10(%rax),%rdx
  8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8f:	8b 40 0c             	mov    0xc(%rax),%eax
  92:	41 89 f1             	mov    %esi,%r9d
  95:	41 89 c8             	mov    %ecx,%r8d
  98:	b9 04 00 00 00       	mov    $0x4,%ecx
  9d:	89 c6                	mov    %eax,%esi
  9f:	e8 00 00 00 00       	call   a4 <TFTPDaemon::DoWriteAck()+0xa4>
  a4:	90                   	nop
  a5:	c9                   	leave  
  a6:	c3                   	ret    

Disassembly of section .text._ZN10TFTPDaemon14HandleRecvDataEv:

0000000000000000 <TFTPDaemon::HandleRecvData()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  15:	48 83 c0 10          	add    $0x10,%rax
  19:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	0f b7 00             	movzwl (%rax),%eax
  24:	66 3d 00 03          	cmp    $0x300,%ax
  28:	0f 85 ea 00 00 00    	jne    118 <TFTPDaemon::HandleRecvData()+0x118>
  2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  32:	48 8b 80 28 02 00 00 	mov    0x228(%rax),%rax
  39:	48 8d 50 fc          	lea    -0x4(%rax),%rdx
  3d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41:	48 89 90 38 02 00 00 	mov    %rdx,0x238(%rax)
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  50:	0f b7 c0             	movzwl %ax,%eax
  53:	89 c2                	mov    %eax,%edx
  55:	66 c1 c2 08          	rol    $0x8,%dx
  59:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5d:	66 89 90 30 02 00 00 	mov    %dx,0x230(%rax)
  64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  68:	48 8b 98 38 02 00 00 	mov    0x238(%rax),%rbx
  6f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  73:	48 8b 00             	mov    (%rax),%rax
  76:	48 83 c0 30          	add    $0x30,%rax
  7a:	4c 8b 00             	mov    (%rax),%r8
  7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  81:	0f b7 80 30 02 00 00 	movzwl 0x230(%rax),%eax
  88:	0f b7 c8             	movzwl %ax,%ecx
  8b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8f:	48 8b 90 38 02 00 00 	mov    0x238(%rax),%rdx
  96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9a:	48 8d 70 04          	lea    0x4(%rax),%rsi
  9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a2:	48 89 c7             	mov    %rax,%rdi
  a5:	41 ff d0             	call   *%r8
  a8:	48 39 c3             	cmp    %rax,%rbx
  ab:	0f 94 c0             	sete   %al
  ae:	84 c0                	test   %al,%al
  b0:	74 43                	je     f5 <TFTPDaemon::HandleRecvData()+0xf5>
  b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b6:	48 8b 80 38 02 00 00 	mov    0x238(%rax),%rax
  bd:	48 3d ff 01 00 00    	cmp    $0x1ff,%rax
  c3:	77 22                	ja     e7 <TFTPDaemon::HandleRecvData()+0xe7>
  c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c9:	c6 80 42 02 00 00 01 	movb   $0x1,0x242(%rax)
  d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d4:	48 8b 00             	mov    (%rax),%rax
  d7:	48 83 c0 20          	add    $0x20,%rax
  db:	48 8b 10             	mov    (%rax),%rdx
  de:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  e2:	48 89 c7             	mov    %rax,%rdi
  e5:	ff d2                	call   *%rdx
  e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  eb:	48 89 c7             	mov    %rax,%rdi
  ee:	e8 00 00 00 00       	call   f3 <TFTPDaemon::HandleRecvData()+0xf3>
  f3:	eb 23                	jmp    118 <TFTPDaemon::HandleRecvData()+0x118>
  f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f9:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 100 <TFTPDaemon::HandleRecvData()+0x100>
 100:	be 03 00 00 00       	mov    $0x3,%esi
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	call   10d <TFTPDaemon::HandleRecvData()+0x10d>
 10d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 111:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
 118:	90                   	nop
 119:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 11d:	c9                   	leave  
 11e:	c3                   	ret    

networkparams.o:     file format elf64-x86-64


Disassembly of section .text._ZN7networkL16is_netmask_validEj:

0000000000000000 <network::is_netmask_valid(unsigned int)>:
   0:	31 c0                	xor    %eax,%eax
   2:	85 ff                	test   %edi,%edi
   4:	74 0d                	je     13 <network::is_netmask_valid(unsigned int)+0x13>
   6:	0f cf                	bswap  %edi
   8:	89 f8                	mov    %edi,%eax
   a:	f7 d0                	not    %eax
   c:	d1 e8                	shr    %eax
   e:	85 f8                	test   %edi,%eax
  10:	0f 94 c0             	sete   %al
  13:	c3                   	ret    

Disassembly of section .text._ZN7networkL13is_private_ipEj:

0000000000000000 <network::is_private_ip(unsigned int)>:
   0:	89 f8                	mov    %edi,%eax
   2:	40 0f b6 d7          	movzbl %dil,%edx
   6:	c1 e8 08             	shr    $0x8,%eax
   9:	40 80 ff ac          	cmp    $0xac,%dil
   d:	74 0d                	je     1c <network::is_private_ip(unsigned int)+0x1c>
   f:	81 fa c0 00 00 00    	cmp    $0xc0,%edx
  15:	74 0e                	je     25 <network::is_private_ip(unsigned int)+0x25>
  17:	83 fa 0a             	cmp    $0xa,%edx
  1a:	eb 0b                	jmp    27 <network::is_private_ip(unsigned int)+0x27>
  1c:	83 e8 10             	sub    $0x10,%eax
  1f:	3c 0f                	cmp    $0xf,%al
  21:	0f 96 c0             	setbe  %al
  24:	c3                   	ret    
  25:	3c a8                	cmp    $0xa8,%al
  27:	0f 94 c0             	sete   %al
  2a:	c3                   	ret    

Disassembly of section .text._ZNK7Network5GetIpEv:

0000000000000000 <Network::GetIp() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	8b 47 10             	mov    0x10(%rdi),%eax
   7:	c3                   	ret    

Disassembly of section .text._ZNK7Network11GetHostNameEv:

0000000000000000 <Network::GetHostName() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 8d 47 1c          	lea    0x1c(%rdi),%rax
   8:	c3                   	ret    

Disassembly of section .text._ZNK7Network12GetGatewayIpEv:

0000000000000000 <Network::GetGatewayIp() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	8b 47 14             	mov    0x14(%rdi),%eax
   7:	c3                   	ret    

Disassembly of section .text._ZNK7Network10GetNetmaskEv:

0000000000000000 <Network::GetNetmask() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	8b 47 18             	mov    0x18(%rdi),%eax
   7:	c3                   	ret    

Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # b <Network::Get()+0xb>
   b:	c3                   	ret    

Disassembly of section .text._ZNK13NetworkParams9isMaskSetEj:

0000000000000000 <NetworkParams::isMaskSet(unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	8b 47 08             	mov    0x8(%rdi),%eax
   7:	21 f0                	and    %esi,%eax
   9:	39 f0                	cmp    %esi,%eax
   b:	0f 94 c0             	sete   %al
   e:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder7GetSizeEv:

0000000000000000 <PropertiesBuilder::GetSize()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	80 7f 0c 00          	cmpb   $0x0,0xc(%rdi)
   8:	74 1b                	je     25 <PropertiesBuilder::GetSize()+0x25>
   a:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
   e:	48 8b 17             	mov    (%rdi),%rdx
  11:	c6 44 02 ff 7d       	movb   $0x7d,-0x1(%rdx,%rax,1)
  16:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  1a:	48 8b 17             	mov    (%rdi),%rdx
  1d:	c6 04 02 7d          	movb   $0x7d,(%rdx,%rax,1)
  21:	66 ff 47 0a          	incw   0xa(%rdi)
  25:	66 8b 47 0a          	mov    0xa(%rdi),%ax
  29:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIPcEEiS1_jPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fa             	mov    %rdi,%r10
   7:	48 89 f7             	mov    %rsi,%rdi
   a:	89 d6                	mov    %edx,%esi
   c:	41 8a 42 0c          	mov    0xc(%r10),%al
  10:	45 84 c9             	test   %r9b,%r9b
  13:	75 06                	jne    1b <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x1b>
  15:	84 c0                	test   %al,%al
  17:	75 0d                	jne    26 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x26>
  19:	eb 14                	jmp    2f <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x2f>
  1b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 22 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x22>
  22:	84 c0                	test   %al,%al
  24:	74 10                	je     36 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x36>
  26:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x2d>
  2d:	eb 07                	jmp    36 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x36>
  2f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 36 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x36>
  36:	31 c0                	xor    %eax,%eax
  38:	e9 00 00 00 00       	jmp    3d <.LC2+0x2b>

Disassembly of section .text._ZN13NetworkParamsC2EP18NetworkParamsStore:

0000000000000000 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 89 37             	mov    %rsi,(%rdi)
   7:	48 8d 77 08          	lea    0x8(%rdi),%rsi
   b:	48 89 fa             	mov    %rdi,%rdx
   e:	b9 5e 00 00 00       	mov    $0x5e,%ecx
  13:	31 c0                	xor    %eax,%eax
  15:	48 89 f7             	mov    %rsi,%rdi
  18:	f3 aa                	rep stos %al,%es:(%rdi)
  1a:	c6 42 1c 01          	movb   $0x1,0x1c(%rdx)
  1e:	c3                   	ret    

Disassembly of section .text._ZN13NetworkParams4LoadEv:

0000000000000000 <NetworkParams::Load()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	48 89 fa             	mov    %rdi,%rdx
   9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10 <NetworkParams::Load()+0x10>
  10:	55                   	push   %rbp
  11:	53                   	push   %rbx
  12:	48 89 fb             	mov    %rdi,%rbx
  15:	48 83 ec 20          	sub    $0x20,%rsp
  19:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  20:	00 00 
  22:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  27:	31 c0                	xor    %eax,%eax
  29:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  30:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  35:	48 89 ef             	mov    %rbp,%rdi
  38:	e8 00 00 00 00       	call   3d <NetworkParams::Load()+0x3d>
  3d:	48 89 ef             	mov    %rbp,%rdi
  40:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 47 <NetworkParams::Load()+0x47>
  47:	e8 00 00 00 00       	call   4c <NetworkParams::Load()+0x4c>
  4c:	48 8b 3b             	mov    (%rbx),%rdi
  4f:	84 c0                	test   %al,%al
  51:	41 89 c4             	mov    %eax,%r12d
  54:	74 11                	je     67 <NetworkParams::Load()+0x67>
  56:	48 85 ff             	test   %rdi,%rdi
  59:	74 1e                	je     79 <NetworkParams::Load()+0x79>
  5b:	48 8b 07             	mov    (%rdi),%rax
  5e:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  62:	ff 50 10             	call   *0x10(%rax)
  65:	eb 12                	jmp    79 <NetworkParams::Load()+0x79>
  67:	48 85 ff             	test   %rdi,%rdi
  6a:	74 0d                	je     79 <NetworkParams::Load()+0x79>
  6c:	48 8b 07             	mov    (%rdi),%rax
  6f:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  73:	41 b4 01             	mov    $0x1,%r12b
  76:	ff 50 18             	call   *0x18(%rax)
  79:	48 89 ef             	mov    %rbp,%rdi
  7c:	e8 00 00 00 00       	call   81 <NetworkParams::Load()+0x81>
  81:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  86:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8d:	00 00 
  8f:	74 05                	je     96 <NetworkParams::Load()+0x96>
  91:	e8 00 00 00 00       	call   96 <NetworkParams::Load()+0x96>
  96:	48 83 c4 20          	add    $0x20,%rsp
  9a:	44 89 e0             	mov    %r12d,%eax
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	41 5c                	pop    %r12
  a1:	c3                   	ret    

Disassembly of section .text._ZN13NetworkParams4LoadEPKcj:

0000000000000000 <NetworkParams::Load(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	55                   	push   %rbp
   9:	53                   	push   %rbx
   a:	48 83 ec 28          	sub    $0x28,%rsp
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  22:	74 4a                	je     6e <NetworkParams::Load(char const*, unsigned int)+0x6e>
  24:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  2b:	48 89 fb             	mov    %rdi,%rbx
  2e:	49 89 f4             	mov    %rsi,%r12
  31:	41 89 d5             	mov    %edx,%r13d
  34:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  39:	48 89 fa             	mov    %rdi,%rdx
  3c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 43 <NetworkParams::Load(char const*, unsigned int)+0x43>
  43:	48 89 ef             	mov    %rbp,%rdi
  46:	e8 00 00 00 00       	call   4b <NetworkParams::Load(char const*, unsigned int)+0x4b>
  4b:	44 89 ea             	mov    %r13d,%edx
  4e:	4c 89 e6             	mov    %r12,%rsi
  51:	48 89 ef             	mov    %rbp,%rdi
  54:	e8 00 00 00 00       	call   59 <NetworkParams::Load(char const*, unsigned int)+0x59>
  59:	48 8b 3b             	mov    (%rbx),%rdi
  5c:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  60:	48 8b 07             	mov    (%rdi),%rax
  63:	ff 50 10             	call   *0x10(%rax)
  66:	48 89 ef             	mov    %rbp,%rdi
  69:	e8 00 00 00 00       	call   6e <NetworkParams::Load(char const*, unsigned int)+0x6e>
  6e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  73:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  7a:	00 00 
  7c:	74 05                	je     83 <NetworkParams::Load(char const*, unsigned int)+0x83>
  7e:	e8 00 00 00 00       	call   83 <NetworkParams::Load(char const*, unsigned int)+0x83>
  83:	48 83 c4 28          	add    $0x28,%rsp
  87:	5b                   	pop    %rbx
  88:	5d                   	pop    %rbp
  89:	41 5c                	pop    %r12
  8b:	41 5d                	pop    %r13
  8d:	c3                   	ret    

Disassembly of section .text._ZN13NetworkParams16callbackFunctionEPKc:

0000000000000000 <NetworkParams::callbackFunction(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	55                   	push   %rbp
   7:	48 89 f5             	mov    %rsi,%rbp
   a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 11 <NetworkParams::callbackFunction(char const*)+0x11>
  11:	53                   	push   %rbx
  12:	48 89 fb             	mov    %rdi,%rbx
  15:	48 89 ef             	mov    %rbp,%rdi
  18:	48 83 ec 20          	sub    $0x20,%rsp
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	4c 8d 64 24 0f       	lea    0xf(%rsp),%r12
  31:	4c 89 e2             	mov    %r12,%rdx
  34:	e8 00 00 00 00       	call   39 <NetworkParams::callbackFunction(char const*)+0x39>
  39:	85 c0                	test   %eax,%eax
  3b:	75 23                	jne    60 <NetworkParams::callbackFunction(char const*)+0x60>
  3d:	8b 4b 08             	mov    0x8(%rbx),%ecx
  40:	8a 44 24 0f          	mov    0xf(%rsp),%al
  44:	89 ca                	mov    %ecx,%edx
  46:	83 ca 01             	or     $0x1,%edx
  49:	84 c0                	test   %al,%al
  4b:	74 05                	je     52 <NetworkParams::callbackFunction(char const*)+0x52>
  4d:	83 e1 fe             	and    $0xfffffffe,%ecx
  50:	89 ca                	mov    %ecx,%edx
  52:	84 c0                	test   %al,%al
  54:	89 53 08             	mov    %edx,0x8(%rbx)
  57:	0f 95 43 1c          	setne  0x1c(%rbx)
  5b:	e9 14 01 00 00       	jmp    174 <NetworkParams::callbackFunction(char const*)+0x174>
  60:	4c 89 e2             	mov    %r12,%rdx
  63:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6a <NetworkParams::callbackFunction(char const*)+0x6a>
  6a:	48 89 ef             	mov    %rbp,%rdi
  6d:	e8 00 00 00 00       	call   72 <NetworkParams::callbackFunction(char const*)+0x72>
  72:	85 c0                	test   %eax,%eax
  74:	75 24                	jne    9a <NetworkParams::callbackFunction(char const*)+0x9a>
  76:	8a 54 24 0f          	mov    0xf(%rsp),%dl
  7a:	8b 43 08             	mov    0x8(%rbx),%eax
  7d:	8d 4a ff             	lea    -0x1(%rdx),%ecx
  80:	80 f9 04             	cmp    $0x4,%cl
  83:	77 0b                	ja     90 <NetworkParams::callbackFunction(char const*)+0x90>
  85:	80 cc 01             	or     $0x1,%ah
  88:	88 53 65             	mov    %dl,0x65(%rbx)
  8b:	89 43 08             	mov    %eax,0x8(%rbx)
  8e:	eb 0a                	jmp    9a <NetworkParams::callbackFunction(char const*)+0x9a>
  90:	80 e4 fe             	and    $0xfe,%ah
  93:	c6 43 65 00          	movb   $0x0,0x65(%rbx)
  97:	89 43 08             	mov    %eax,0x8(%rbx)
  9a:	4c 8d 64 24 10       	lea    0x10(%rsp),%r12
  9f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # a6 <NetworkParams::callbackFunction(char const*)+0xa6>
  a6:	48 89 ef             	mov    %rbp,%rdi
  a9:	4c 89 e2             	mov    %r12,%rdx
  ac:	e8 00 00 00 00       	call   b1 <NetworkParams::callbackFunction(char const*)+0xb1>
  b1:	85 c0                	test   %eax,%eax
  b3:	75 32                	jne    e7 <NetworkParams::callbackFunction(char const*)+0xe7>
  b5:	8b 4c 24 10          	mov    0x10(%rsp),%ecx
  b9:	89 cf                	mov    %ecx,%edi
  bb:	e8 00 00 00 00       	call   c0 <NetworkParams::callbackFunction(char const*)+0xc0>
  c0:	41 89 c0             	mov    %eax,%r8d
  c3:	8b 43 08             	mov    0x8(%rbx),%eax
  c6:	45 84 c0             	test   %r8b,%r8b
  c9:	75 0e                	jne    d9 <NetworkParams::callbackFunction(char const*)+0xd9>
  cb:	80 f9 02             	cmp    $0x2,%cl
  ce:	74 09                	je     d9 <NetworkParams::callbackFunction(char const*)+0xd9>
  d0:	85 c9                	test   %ecx,%ecx
  d2:	74 05                	je     d9 <NetworkParams::callbackFunction(char const*)+0xd9>
  d4:	83 e0 fd             	and    $0xfffffffd,%eax
  d7:	eb 06                	jmp    df <NetworkParams::callbackFunction(char const*)+0xdf>
  d9:	89 4b 0c             	mov    %ecx,0xc(%rbx)
  dc:	83 c8 02             	or     $0x2,%eax
  df:	89 43 08             	mov    %eax,0x8(%rbx)
  e2:	e9 8d 00 00 00       	jmp    174 <NetworkParams::callbackFunction(char const*)+0x174>
  e7:	4c 89 e2             	mov    %r12,%rdx
  ea:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # f1 <NetworkParams::callbackFunction(char const*)+0xf1>
  f1:	48 89 ef             	mov    %rbp,%rdi
  f4:	e8 00 00 00 00       	call   f9 <NetworkParams::callbackFunction(char const*)+0xf9>
  f9:	85 c0                	test   %eax,%eax
  fb:	75 23                	jne    120 <NetworkParams::callbackFunction(char const*)+0x120>
  fd:	8b 54 24 10          	mov    0x10(%rsp),%edx
 101:	89 d7                	mov    %edx,%edi
 103:	e8 00 00 00 00       	call   108 <NetworkParams::callbackFunction(char const*)+0x108>
 108:	41 89 c0             	mov    %eax,%r8d
 10b:	8b 43 08             	mov    0x8(%rbx),%eax
 10e:	45 84 c0             	test   %r8b,%r8b
 111:	74 08                	je     11b <NetworkParams::callbackFunction(char const*)+0x11b>
 113:	89 53 10             	mov    %edx,0x10(%rbx)
 116:	83 c8 04             	or     $0x4,%eax
 119:	eb c4                	jmp    df <NetworkParams::callbackFunction(char const*)+0xdf>
 11b:	83 e0 fb             	and    $0xfffffffb,%eax
 11e:	eb bf                	jmp    df <NetworkParams::callbackFunction(char const*)+0xdf>
 120:	4c 89 e2             	mov    %r12,%rdx
 123:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 12a <NetworkParams::callbackFunction(char const*)+0x12a>
 12a:	48 89 ef             	mov    %rbp,%rdi
 12d:	e8 00 00 00 00       	call   132 <NetworkParams::callbackFunction(char const*)+0x132>
 132:	85 c0                	test   %eax,%eax
 134:	75 0d                	jne    143 <NetworkParams::callbackFunction(char const*)+0x143>
 136:	8b 44 24 10          	mov    0x10(%rsp),%eax
 13a:	83 4b 08 08          	orl    $0x8,0x8(%rbx)
 13e:	89 43 14             	mov    %eax,0x14(%rbx)
 141:	eb 31                	jmp    174 <NetworkParams::callbackFunction(char const*)+0x174>
 143:	48 8d 4c 24 14       	lea    0x14(%rsp),%rcx
 148:	48 8d 53 1d          	lea    0x1d(%rbx),%rdx
 14c:	48 89 ef             	mov    %rbp,%rdi
 14f:	c7 44 24 14 3f 00 00 	movl   $0x3f,0x14(%rsp)
 156:	00 
 157:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 15e <NetworkParams::callbackFunction(char const*)+0x15e>
 15e:	e8 00 00 00 00       	call   163 <NetworkParams::callbackFunction(char const*)+0x163>
 163:	85 c0                	test   %eax,%eax
 165:	75 0d                	jne    174 <NetworkParams::callbackFunction(char const*)+0x174>
 167:	8b 44 24 14          	mov    0x14(%rsp),%eax
 16b:	c6 44 03 1d 00       	movb   $0x0,0x1d(%rbx,%rax,1)
 170:	83 4b 08 20          	orl    $0x20,0x8(%rbx)
 174:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
 179:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 180:	00 00 
 182:	74 05                	je     189 <NetworkParams::callbackFunction(char const*)+0x189>
 184:	e8 00 00 00 00       	call   189 <NetworkParams::callbackFunction(char const*)+0x189>
 189:	48 83 c4 20          	add    $0x20,%rsp
 18d:	5b                   	pop    %rbx
 18e:	5d                   	pop    %rbp
 18f:	41 5c                	pop    %r12
 191:	c3                   	ret    

Disassembly of section .text._ZN13NetworkParams22staticCallbackFunctionEPvPKc:

0000000000000000 <NetworkParams::staticCallbackFunction(void*, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	e9 00 00 00 00       	jmp    9 <.LC5>

Disassembly of section .text._ZN13NetworkParams7BuilderEPKN13networkparams6ParamsEPcjRj:

0000000000000000 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 89 ce             	mov    %ecx,%r14d
   9:	41 55                	push   %r13
   b:	49 89 d5             	mov    %rdx,%r13
   e:	41 54                	push   %r12
  10:	55                   	push   %rbp
  11:	48 89 fd             	mov    %rdi,%rbp
  14:	53                   	push   %rbx
  15:	4c 89 c3             	mov    %r8,%rbx
  18:	4c 8d 47 08          	lea    0x8(%rdi),%r8
  1c:	48 83 ec 20          	sub    $0x20,%rsp
  20:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  27:	00 00 
  29:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2e:	31 c0                	xor    %eax,%eax
  30:	48 85 f6             	test   %rsi,%rsi
  33:	74 0c                	je     41 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x41>
  35:	b9 5e 00 00 00       	mov    $0x5e,%ecx
  3a:	4c 89 c7             	mov    %r8,%rdi
  3d:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  3f:	eb 0c                	jmp    4d <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x4d>
  41:	48 8b 3f             	mov    (%rdi),%rdi
  44:	4c 89 c6             	mov    %r8,%rsi
  47:	48 8b 07             	mov    (%rdi),%rax
  4a:	ff 50 18             	call   *0x18(%rax)
  4d:	4c 8d 64 24 08       	lea    0x8(%rsp),%r12
  52:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 59 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x59>
  59:	44 89 f1             	mov    %r14d,%ecx
  5c:	4c 89 ea             	mov    %r13,%rdx
  5f:	4c 89 e7             	mov    %r12,%rdi
  62:	e8 00 00 00 00       	call   67 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x67>
  67:	be 02 00 00 00       	mov    $0x2,%esi
  6c:	48 89 ef             	mov    %rbp,%rdi
  6f:	e8 00 00 00 00       	call   74 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x74>
  74:	84 c0                	test   %al,%al
  76:	75 10                	jne    88 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x88>
  78:	e8 00 00 00 00       	call   7d <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x7d>
  7d:	48 89 c7             	mov    %rax,%rdi
  80:	e8 00 00 00 00       	call   85 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x85>
  85:	89 45 0c             	mov    %eax,0xc(%rbp)
  88:	be 04 00 00 00       	mov    $0x4,%esi
  8d:	48 89 ef             	mov    %rbp,%rdi
  90:	e8 00 00 00 00       	call   95 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x95>
  95:	84 c0                	test   %al,%al
  97:	75 10                	jne    a9 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xa9>
  99:	e8 00 00 00 00       	call   9e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x9e>
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	call   a6 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xa6>
  a6:	89 45 10             	mov    %eax,0x10(%rbp)
  a9:	be 08 00 00 00       	mov    $0x8,%esi
  ae:	48 89 ef             	mov    %rbp,%rdi
  b1:	e8 00 00 00 00       	call   b6 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb6>
  b6:	84 c0                	test   %al,%al
  b8:	75 10                	jne    ca <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xca>
  ba:	e8 00 00 00 00       	call   bf <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xbf>
  bf:	48 89 c7             	mov    %rax,%rdi
  c2:	e8 00 00 00 00       	call   c7 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xc7>
  c7:	89 45 14             	mov    %eax,0x14(%rbp)
  ca:	be 20 00 00 00       	mov    $0x20,%esi
  cf:	48 89 ef             	mov    %rbp,%rdi
  d2:	4c 8d 6d 1d          	lea    0x1d(%rbp),%r13
  d6:	e8 00 00 00 00       	call   db <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xdb>
  db:	84 c0                	test   %al,%al
  dd:	75 21                	jne    100 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x100>
  df:	e8 00 00 00 00       	call   e4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xe4>
  e4:	48 89 c7             	mov    %rax,%rdi
  e7:	e8 00 00 00 00       	call   ec <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xec>
  ec:	ba 3f 00 00 00       	mov    $0x3f,%edx
  f1:	4c 89 ef             	mov    %r13,%rdi
  f4:	48 89 c6             	mov    %rax,%rsi
  f7:	e8 00 00 00 00       	call   fc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xfc>
  fc:	c6 45 5c 00          	movb   $0x0,0x5c(%rbp)
 100:	be 01 00 00 00       	mov    $0x1,%esi
 105:	48 89 ef             	mov    %rbp,%rdi
 108:	e8 00 00 00 00       	call   10d <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x10d>
 10d:	0f b6 55 1c          	movzbl 0x1c(%rbp),%edx
 111:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 117:	4c 89 e7             	mov    %r12,%rdi
 11a:	0f b6 c8             	movzbl %al,%ecx
 11d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 124 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x124>
 124:	e8 00 00 00 00       	call   129 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x129>
 129:	be 00 01 00 00       	mov    $0x100,%esi
 12e:	48 89 ef             	mov    %rbp,%rdi
 131:	e8 00 00 00 00       	call   136 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x136>
 136:	0f b6 55 65          	movzbl 0x65(%rbp),%edx
 13a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 140:	4c 89 e7             	mov    %r12,%rdi
 143:	0f b6 c8             	movzbl %al,%ecx
 146:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 14d <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x14d>
 14d:	e8 00 00 00 00       	call   152 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x152>
 152:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 159 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x159>
 159:	4c 89 e7             	mov    %r12,%rdi
 15c:	e8 00 00 00 00       	call   161 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x161>
 161:	be 02 00 00 00       	mov    $0x2,%esi
 166:	48 89 ef             	mov    %rbp,%rdi
 169:	e8 00 00 00 00       	call   16e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x16e>
 16e:	8b 55 0c             	mov    0xc(%rbp),%edx
 171:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 178 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x178>
 178:	4c 89 e7             	mov    %r12,%rdi
 17b:	0f b6 c8             	movzbl %al,%ecx
 17e:	e8 00 00 00 00       	call   183 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x183>
 183:	be 04 00 00 00       	mov    $0x4,%esi
 188:	48 89 ef             	mov    %rbp,%rdi
 18b:	e8 00 00 00 00       	call   190 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x190>
 190:	8b 55 10             	mov    0x10(%rbp),%edx
 193:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 19a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x19a>
 19a:	4c 89 e7             	mov    %r12,%rdi
 19d:	0f b6 c8             	movzbl %al,%ecx
 1a0:	e8 00 00 00 00       	call   1a5 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1a5>
 1a5:	be 08 00 00 00       	mov    $0x8,%esi
 1aa:	48 89 ef             	mov    %rbp,%rdi
 1ad:	e8 00 00 00 00       	call   1b2 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1b2>
 1b2:	8b 55 14             	mov    0x14(%rbp),%edx
 1b5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1bc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1bc>
 1bc:	4c 89 e7             	mov    %r12,%rdi
 1bf:	0f b6 c8             	movzbl %al,%ecx
 1c2:	e8 00 00 00 00       	call   1c7 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1c7>
 1c7:	be 20 00 00 00       	mov    $0x20,%esi
 1cc:	48 89 ef             	mov    %rbp,%rdi
 1cf:	e8 00 00 00 00       	call   1d4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1d4>
 1d4:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 1da:	4c 89 ea             	mov    %r13,%rdx
 1dd:	4c 89 e7             	mov    %r12,%rdi
 1e0:	0f b6 c8             	movzbl %al,%ecx
 1e3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1ea <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ea>
 1ea:	e8 00 00 00 00       	call   1ef <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ef>
 1ef:	4c 89 e7             	mov    %r12,%rdi
 1f2:	e8 00 00 00 00       	call   1f7 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f7>
 1f7:	0f b7 c0             	movzwl %ax,%eax
 1fa:	89 03                	mov    %eax,(%rbx)
 1fc:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
 201:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 208:	00 00 
 20a:	74 05                	je     211 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x211>
 20c:	e8 00 00 00 00       	call   211 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x211>
 211:	48 83 c4 20          	add    $0x20,%rsp
 215:	5b                   	pop    %rbx
 216:	5d                   	pop    %rbp
 217:	41 5c                	pop    %r12
 219:	41 5d                	pop    %r13
 21b:	41 5e                	pop    %r14
 21d:	c3                   	ret    

Disassembly of section .text._ZN13NetworkParams4SaveEPcjRj:

0000000000000000 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 3f 00          	cmpq   $0x0,(%rdi)
   8:	49 89 c8             	mov    %rcx,%r8
   b:	75 07                	jne    14 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x14>
   d:	c7 01 00 00 00 00    	movl   $0x0,(%rcx)
  13:	c3                   	ret    
  14:	89 d1                	mov    %edx,%ecx
  16:	48 89 f2             	mov    %rsi,%rdx
  19:	31 f6                	xor    %esi,%esi
  1b:	e9 00 00 00 00       	jmp    20 <.LC2+0xe>

Disassembly of section .text._ZN17PropertiesBuilder3AddIbEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 52                	push   %r10
   8:	49 89 f2             	mov    %rsi,%r10
   b:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 33                	jmp    4f <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x4f>
  1c:	89 d0                	mov    %edx,%eax
  1e:	48 89 fb             	mov    %rdi,%rbx
  21:	0f b7 d6             	movzwl %si,%edx
  24:	48 03 37             	add    (%rdi),%rsi
  27:	57                   	push   %rdi
  28:	29 d5                	sub    %edx,%ebp
  2a:	44 0f b6 c9          	movzbl %cl,%r9d
  2e:	48 89 df             	mov    %rbx,%rdi
  31:	41 50                	push   %r8
  33:	4c 89 d1             	mov    %r10,%rcx
  36:	44 0f b6 c0          	movzbl %al,%r8d
  3a:	89 ea                	mov    %ebp,%edx
  3c:	e8 00 00 00 00       	call   41 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x41>
  41:	41 58                	pop    %r8
  43:	41 59                	pop    %r9
  45:	39 c5                	cmp    %eax,%ebp
  47:	7c cf                	jl     18 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x18>
  49:	66 01 43 0a          	add    %ax,0xa(%rbx)
  4d:	b0 01                	mov    $0x1,%al
  4f:	5a                   	pop    %rdx
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIhEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 52                	push   %r10
   8:	49 89 f2             	mov    %rsi,%r10
   b:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 33                	jmp    4f <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x4f>
  1c:	89 d0                	mov    %edx,%eax
  1e:	48 89 fb             	mov    %rdi,%rbx
  21:	0f b7 d6             	movzwl %si,%edx
  24:	48 03 37             	add    (%rdi),%rsi
  27:	57                   	push   %rdi
  28:	29 d5                	sub    %edx,%ebp
  2a:	44 0f b6 c9          	movzbl %cl,%r9d
  2e:	48 89 df             	mov    %rbx,%rdi
  31:	41 50                	push   %r8
  33:	4c 89 d1             	mov    %r10,%rcx
  36:	44 0f b6 c0          	movzbl %al,%r8d
  3a:	89 ea                	mov    %ebp,%edx
  3c:	e8 00 00 00 00       	call   41 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x41>
  41:	41 58                	pop    %r8
  43:	41 59                	pop    %r9
  45:	39 c5                	cmp    %eax,%ebp
  47:	7c cf                	jl     18 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x18>
  49:	66 01 43 0a          	add    %ax,0xa(%rbx)
  4d:	b0 01                	mov    $0x1,%al
  4f:	5a                   	pop    %rdx
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIPcEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 52                	push   %r10
   8:	49 89 f2             	mov    %rsi,%r10
   b:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 33                	jmp    4f <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x4f>
  1c:	48 89 d0             	mov    %rdx,%rax
  1f:	48 89 fb             	mov    %rdi,%rbx
  22:	0f b7 d6             	movzwl %si,%edx
  25:	48 03 37             	add    (%rdi),%rsi
  28:	57                   	push   %rdi
  29:	29 d5                	sub    %edx,%ebp
  2b:	44 0f b6 c9          	movzbl %cl,%r9d
  2f:	48 89 df             	mov    %rbx,%rdi
  32:	41 50                	push   %r8
  34:	4c 89 d1             	mov    %r10,%rcx
  37:	49 89 c0             	mov    %rax,%r8
  3a:	89 ea                	mov    %ebp,%edx
  3c:	e8 00 00 00 00       	call   41 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x41>
  41:	41 58                	pop    %r8
  43:	41 59                	pop    %r9
  45:	39 c5                	cmp    %eax,%ebp
  47:	7c cf                	jl     18 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x18>
  49:	66 01 43 0a          	add    %ax,0xa(%rbx)
  4d:	b0 01                	mov    $0x1,%al
  4f:	5a                   	pop    %rdx
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIbEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fa             	mov    %rdi,%r10
   7:	45 0f b6 c0          	movzbl %r8b,%r8d
   b:	48 89 f7             	mov    %rsi,%rdi
   e:	89 d6                	mov    %edx,%esi
  10:	41 8a 42 0c          	mov    0xc(%r10),%al
  14:	45 84 c9             	test   %r9b,%r9b
  17:	75 06                	jne    1f <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x1f>
  19:	84 c0                	test   %al,%al
  1b:	75 0d                	jne    2a <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x2a>
  1d:	eb 14                	jmp    33 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x33>
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x26>
  26:	84 c0                	test   %al,%al
  28:	74 10                	je     3a <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x3a>
  2a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 31 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x31>
  31:	eb 07                	jmp    3a <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x3a>
  33:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x3a>
  3a:	31 c0                	xor    %eax,%eax
  3c:	e9 00 00 00 00       	jmp    41 <.LC2+0x2f>

Disassembly of section .text._ZN17PropertiesBuilder8add_partIhEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fa             	mov    %rdi,%r10
   7:	45 0f b6 c0          	movzbl %r8b,%r8d
   b:	48 89 f7             	mov    %rsi,%rdi
   e:	89 d6                	mov    %edx,%esi
  10:	41 8a 42 0c          	mov    0xc(%r10),%al
  14:	45 84 c9             	test   %r9b,%r9b
  17:	75 06                	jne    1f <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x1f>
  19:	84 c0                	test   %al,%al
  1b:	75 0d                	jne    2a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x2a>
  1d:	eb 14                	jmp    33 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x33>
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x26>
  26:	84 c0                	test   %al,%al
  28:	74 10                	je     3a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x3a>
  2a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 31 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x31>
  31:	eb 07                	jmp    3a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x3a>
  33:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x3a>
  3a:	31 c0                	xor    %eax,%eax
  3c:	e9 00 00 00 00       	jmp    41 <.LC2+0x2f>

networkparamsdump.o:     file format elf64-x86-64


Disassembly of section .text._ZN13NetworkParams4DumpEv:

0000000000000000 <NetworkParams::Dump()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	c3                   	ret    
