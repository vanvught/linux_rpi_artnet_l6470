In archive lib_linux/libdevice.a:

font_cp437.o:     file format elf64-x86-64


Disassembly of section .text.cp437_font_size:

0000000000000000 <cp437_font_size>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	b8 7f 00 00 00       	mov    $0x7f,%eax
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

bh1750.o:     file format elf64-x86-64


Disassembly of section .text.i2c_set_baudrate:

0000000000000000 <i2c_set_baudrate>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text.i2c_set_address:

0000000000000000 <i2c_set_address>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.i2c_write:

0000000000000000 <i2c_write>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text.i2c_read:

0000000000000000 <i2c_read>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	89 55 f0             	mov    %edx,-0x10(%rbp)
  11:	88 45 f4             	mov    %al,-0xc(%rbp)
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  1c:	88 10                	mov    %dl,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	8b 55 f0             	mov    -0x10(%rbp),%edx
  25:	89 50 04             	mov    %edx,0x4(%rax)
  28:	90                   	nop
  29:	5d                   	pop    %rbp
  2a:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 50 04             	mov    0x4(%rax),%edx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	0f b6 00             	movzbl (%rax),%eax
  1e:	0f b6 c0             	movzbl %al,%eax
  21:	89 d6                	mov    %edx,%esi
  23:	89 c7                	mov    %eax,%edi
  25:	e8 00 00 00 00       	call   2a <HAL_I2C::IsConnected()+0x2a>
  2a:	c9                   	leave  
  2b:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5WriteEc:

0000000000000000 <HAL_I2C::Write(char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <HAL_I2C::Write(char)+0x21>
  21:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  25:	be 01 00 00 00       	mov    $0x1,%esi
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <HAL_I2C::Write(char)+0x32>
  32:	90                   	nop
  33:	c9                   	leave  
  34:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C6Read16Ev:

0000000000000000 <HAL_I2C::Read16()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%rbp)
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	call   31 <HAL_I2C::Read16()+0x31>
  31:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  35:	be 02 00 00 00       	mov    $0x2,%esi
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	call   42 <HAL_I2C::Read16()+0x42>
  42:	0f b6 45 f6          	movzbl -0xa(%rbp),%eax
  46:	66 98                	cbtw   
  48:	0f b7 c0             	movzwl %ax,%eax
  4b:	c1 e0 08             	shl    $0x8,%eax
  4e:	89 c2                	mov    %eax,%edx
  50:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  54:	66 98                	cbtw   
  56:	09 d0                	or     %edx,%eax
  58:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  5c:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  63:	00 00 
  65:	74 05                	je     6c <HAL_I2C::Read16()+0x6c>
  67:	e8 00 00 00 00       	call   6c <HAL_I2C::Read16()+0x6c>
  6c:	c9                   	leave  
  6d:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 08          	sub    $0x8,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b6 00             	movzbl (%rax),%eax
  17:	0f b6 c0             	movzbl %al,%eax
  1a:	89 c7                	mov    %eax,%edi
  1c:	e8 00 00 00 00       	call   21 <HAL_I2C::Setup()+0x21>
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	8b 40 04             	mov    0x4(%rax),%eax
  28:	89 c7                	mov    %eax,%edi
  2a:	e8 00 00 00 00       	call   2f <HAL_I2C::Setup()+0x2f>
  2f:	90                   	nop
  30:	c9                   	leave  
  31:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZN6sensor5BH170C2Eh:

0000000000000000 <sensor::BH170::BH170(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  19:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  1d:	84 c0                	test   %al,%al
  1f:	74 0c                	je     2d <sensor::BH170::BH170(unsigned char)+0x2d>
  21:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  25:	0f b6 00             	movzbl (%rax),%eax
  28:	0f b6 c0             	movzbl %al,%eax
  2b:	eb 05                	jmp    32 <sensor::BH170::BH170(unsigned char)+0x32>
  2d:	b8 23 00 00 00       	mov    $0x23,%eax
  32:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  37:	89 c6                	mov    %eax,%esi
  39:	48 89 cf             	mov    %rcx,%rdi
  3c:	e8 00 00 00 00       	call   41 <sensor::BH170::BH170(unsigned char)+0x41>
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  45:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <sensor::BH170::BH170(unsigned char)+0x55>
  55:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  59:	88 42 08             	mov    %al,0x8(%rdx)
  5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  60:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  64:	84 c0                	test   %al,%al
  66:	74 22                	je     8a <sensor::BH170::BH170(unsigned char)+0x8a>
  68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6c:	be 01 00 00 00       	mov    $0x1,%esi
  71:	48 89 c7             	mov    %rax,%rdi
  74:	e8 00 00 00 00       	call   79 <sensor::BH170::BH170(unsigned char)+0x79>
  79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7d:	be 10 00 00 00       	mov    $0x10,%esi
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	call   8a <sensor::BH170::BH170(unsigned char)+0x8a>
  8a:	90                   	nop
  8b:	c9                   	leave  
  8c:	c3                   	ret    

Disassembly of section .text._ZN6sensor5BH1703GetEv:

0000000000000000 <sensor::BH170::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <sensor::BH170::Get()+0x1c>
  1c:	0f b7 c0             	movzwl %ax,%eax
  1f:	66 0f ef c0          	pxor   %xmm0,%xmm0
  23:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  27:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 2f <sensor::BH170::Get()+0x2f>
  2e:	00 
  2f:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  33:	f3 0f 2c c0          	cvttss2si %xmm0,%eax
  37:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
  3b:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  3f:	c9                   	leave  
  40:	c3                   	ret    

htu21d.o:     file format elf64-x86-64


Disassembly of section .text.udelay:

0000000000000000 <udelay>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	89 7d fc             	mov    %edi,-0x4(%rbp)
   b:	90                   	nop
   c:	5d                   	pop    %rbp
   d:	c3                   	ret    

Disassembly of section .text.i2c_set_baudrate:

0000000000000000 <i2c_set_baudrate>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text.i2c_set_address:

0000000000000000 <i2c_set_address>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.i2c_write:

0000000000000000 <i2c_write>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text.i2c_read:

0000000000000000 <i2c_read>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	89 55 f0             	mov    %edx,-0x10(%rbp)
  11:	88 45 f4             	mov    %al,-0xc(%rbp)
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  1c:	88 10                	mov    %dl,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	8b 55 f0             	mov    -0x10(%rbp),%edx
  25:	89 50 04             	mov    %edx,0x4(%rax)
  28:	90                   	nop
  29:	5d                   	pop    %rbp
  2a:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 50 04             	mov    0x4(%rax),%edx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	0f b6 00             	movzbl (%rax),%eax
  1e:	0f b6 c0             	movzbl %al,%eax
  21:	89 d6                	mov    %edx,%esi
  23:	89 c7                	mov    %eax,%edi
  25:	e8 00 00 00 00       	call   2a <HAL_I2C::IsConnected()+0x2a>
  2a:	c9                   	leave  
  2b:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5WriteEc:

0000000000000000 <HAL_I2C::Write(char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <HAL_I2C::Write(char)+0x21>
  21:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  25:	be 01 00 00 00       	mov    $0x1,%esi
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <HAL_I2C::Write(char)+0x32>
  32:	90                   	nop
  33:	c9                   	leave  
  34:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C4ReadEPcj:

0000000000000000 <HAL_I2C::Read(char*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	89 55 ec             	mov    %edx,-0x14(%rbp)
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	call   23 <HAL_I2C::Read(char*, unsigned int)+0x23>
  23:	8b 55 ec             	mov    -0x14(%rbp),%edx
  26:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2a:	89 d6                	mov    %edx,%esi
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	call   34 <HAL_I2C::Read(char*, unsigned int)+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 08          	sub    $0x8,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b6 00             	movzbl (%rax),%eax
  17:	0f b6 c0             	movzbl %al,%eax
  1a:	89 c7                	mov    %eax,%edi
  1c:	e8 00 00 00 00       	call   21 <HAL_I2C::Setup()+0x21>
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	8b 40 04             	mov    0x4(%rax),%eax
  28:	89 c7                	mov    %eax,%edi
  2a:	e8 00 00 00 00       	call   2f <HAL_I2C::Setup()+0x2f>
  2f:	90                   	nop
  30:	c9                   	leave  
  31:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZN6sensor6HTU21DC2Eh:

0000000000000000 <sensor::HTU21D::HTU21D(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  19:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  1d:	84 c0                	test   %al,%al
  1f:	74 0c                	je     2d <sensor::HTU21D::HTU21D(unsigned char)+0x2d>
  21:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  25:	0f b6 00             	movzbl (%rax),%eax
  28:	0f b6 c0             	movzbl %al,%eax
  2b:	eb 05                	jmp    32 <sensor::HTU21D::HTU21D(unsigned char)+0x32>
  2d:	b8 40 00 00 00       	mov    $0x40,%eax
  32:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  37:	89 c6                	mov    %eax,%esi
  39:	48 89 cf             	mov    %rcx,%rdi
  3c:	e8 00 00 00 00       	call   41 <sensor::HTU21D::HTU21D(unsigned char)+0x41>
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  45:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <sensor::HTU21D::HTU21D(unsigned char)+0x55>
  55:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  59:	88 42 08             	mov    %al,0x8(%rdx)
  5c:	90                   	nop
  5d:	c9                   	leave  
  5e:	c3                   	ret    

Disassembly of section .text._ZN6sensor6HTU21D14GetTemperatureEv:

0000000000000000 <sensor::HTU21D::GetTemperature()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	be f3 00 00 00       	mov    $0xf3,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <sensor::HTU21D::GetTemperature()+0x21>
  21:	0f b7 c0             	movzwl %ax,%eax
  24:	66 0f ef c0          	pxor   %xmm0,%xmm0
  28:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  2c:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 34 <sensor::HTU21D::GetTemperature()+0x34>
  33:	00 
  34:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  38:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  3d:	f3 0f 10 4d fc       	movss  -0x4(%rbp),%xmm1
  42:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 4a <sensor::HTU21D::GetTemperature()+0x4a>
  49:	00 
  4a:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  4e:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 56 <sensor::HTU21D::GetTemperature()+0x56>
  55:	00 
  56:	f3 0f 5c c1          	subss  %xmm1,%xmm0
  5a:	c9                   	leave  
  5b:	c3                   	ret    

Disassembly of section .text._ZN6sensor6HTU21D11GetHumidityEv:

0000000000000000 <sensor::HTU21D::GetHumidity()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	be f5 00 00 00       	mov    $0xf5,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <sensor::HTU21D::GetHumidity()+0x21>
  21:	0f b7 c0             	movzwl %ax,%eax
  24:	66 0f ef c0          	pxor   %xmm0,%xmm0
  28:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  2c:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 34 <sensor::HTU21D::GetHumidity()+0x34>
  33:	00 
  34:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  38:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  3d:	f3 0f 10 4d fc       	movss  -0x4(%rbp),%xmm1
  42:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 4a <sensor::HTU21D::GetHumidity()+0x4a>
  49:	00 
  4a:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  4e:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 56 <sensor::HTU21D::GetHumidity()+0x56>
  55:	00 
  56:	f3 0f 5c c1          	subss  %xmm1,%xmm0
  5a:	c9                   	leave  
  5b:	c3                   	ret    

Disassembly of section .text._ZN6sensor6HTU21D7ReadRawEh:

0000000000000000 <sensor::HTU21D::ReadRaw(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 d4             	mov    %al,-0x2c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
  2c:	0f be d2             	movsbl %dl,%edx
  2f:	89 d6                	mov    %edx,%esi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	call   39 <sensor::HTU21D::ReadRaw(unsigned char)+0x39>
  39:	66 c7 45 f5 00 00    	movw   $0x0,-0xb(%rbp)
  3f:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  43:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  4a:	eb 35                	jmp    81 <sensor::HTU21D::ReadRaw(unsigned char)+0x81>
  4c:	bf 10 27 00 00       	mov    $0x2710,%edi
  51:	e8 00 00 00 00       	call   56 <sensor::HTU21D::ReadRaw(unsigned char)+0x56>
  56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5a:	48 8d 4d f5          	lea    -0xb(%rbp),%rcx
  5e:	ba 03 00 00 00       	mov    $0x3,%edx
  63:	48 89 ce             	mov    %rcx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	call   6e <sensor::HTU21D::ReadRaw(unsigned char)+0x6e>
  6e:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  72:	0f be c0             	movsbl %al,%eax
  75:	83 e0 03             	and    $0x3,%eax
  78:	83 f8 02             	cmp    $0x2,%eax
  7b:	74 0c                	je     89 <sensor::HTU21D::ReadRaw(unsigned char)+0x89>
  7d:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
  81:	83 7d f0 07          	cmpl   $0x7,-0x10(%rbp)
  85:	76 c5                	jbe    4c <sensor::HTU21D::ReadRaw(unsigned char)+0x4c>
  87:	eb 01                	jmp    8a <sensor::HTU21D::ReadRaw(unsigned char)+0x8a>
  89:	90                   	nop
  8a:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  8e:	0f be c0             	movsbl %al,%eax
  91:	c1 e0 08             	shl    $0x8,%eax
  94:	89 c2                	mov    %eax,%edx
  96:	0f b6 45 f6          	movzbl -0xa(%rbp),%eax
  9a:	66 98                	cbtw   
  9c:	09 d0                	or     %edx,%eax
  9e:	66 89 45 ee          	mov    %ax,-0x12(%rbp)
  a2:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  a6:	83 e0 fc             	and    $0xfffffffc,%eax
  a9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  ad:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  b4:	00 00 
  b6:	74 05                	je     bd <sensor::HTU21D::ReadRaw(unsigned char)+0xbd>
  b8:	e8 00 00 00 00       	call   bd <sensor::HTU21D::ReadRaw(unsigned char)+0xbd>
  bd:	c9                   	leave  
  be:	c3                   	ret    

ina219.o:     file format elf64-x86-64


Disassembly of section .text.udelay:

0000000000000000 <udelay>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	89 7d fc             	mov    %edi,-0x4(%rbp)
   b:	90                   	nop
   c:	5d                   	pop    %rbp
   d:	c3                   	ret    

Disassembly of section .text.i2c_set_baudrate:

0000000000000000 <i2c_set_baudrate>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text.i2c_set_address:

0000000000000000 <i2c_set_address>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.i2c_write:

0000000000000000 <i2c_write>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text.i2c_read:

0000000000000000 <i2c_read>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	89 55 f0             	mov    %edx,-0x10(%rbp)
  11:	88 45 f4             	mov    %al,-0xc(%rbp)
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  1c:	88 10                	mov    %dl,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	8b 55 f0             	mov    -0x10(%rbp),%edx
  25:	89 50 04             	mov    %edx,0x4(%rax)
  28:	90                   	nop
  29:	5d                   	pop    %rbp
  2a:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 50 04             	mov    0x4(%rax),%edx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	0f b6 00             	movzbl (%rax),%eax
  1e:	0f b6 c0             	movzbl %al,%eax
  21:	89 d6                	mov    %edx,%esi
  23:	89 c7                	mov    %eax,%edi
  25:	e8 00 00 00 00       	call   2a <HAL_I2C::IsConnected()+0x2a>
  2a:	c9                   	leave  
  2b:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C13WriteRegisterEht:

0000000000000000 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	66 89 45 e0          	mov    %ax,-0x20(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  30:	88 45 f5             	mov    %al,-0xb(%rbp)
  33:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  37:	66 c1 e8 08          	shr    $0x8,%ax
  3b:	88 45 f6             	mov    %al,-0xa(%rbp)
  3e:	0f b7 45 e0          	movzwl -0x20(%rbp),%eax
  42:	88 45 f7             	mov    %al,-0x9(%rbp)
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	call   51 <HAL_I2C::WriteRegister(unsigned char, unsigned short)+0x51>
  51:	48 8d 45 f5          	lea    -0xb(%rbp),%rax
  55:	be 03 00 00 00       	mov    $0x3,%esi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	call   62 <HAL_I2C::WriteRegister(unsigned char, unsigned short)+0x62>
  62:	90                   	nop
  63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  67:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  6e:	00 00 
  70:	74 05                	je     77 <HAL_I2C::WriteRegister(unsigned char, unsigned short)+0x77>
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::WriteRegister(unsigned char, unsigned short)+0x77>
  77:	c9                   	leave  
  78:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C21ReadRegister16DelayUsEhj:

0000000000000000 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	89 55 e0             	mov    %edx,-0x20(%rbp)
  15:	88 45 e4             	mov    %al,-0x1c(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%rbp)
  2d:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  31:	88 45 f6             	mov    %al,-0xa(%rbp)
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	call   40 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)+0x40>
  40:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  44:	be 01 00 00 00       	mov    $0x1,%esi
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	call   51 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)+0x51>
  51:	8b 45 e0             	mov    -0x20(%rbp),%eax
  54:	89 c7                	mov    %eax,%edi
  56:	e8 00 00 00 00       	call   5b <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)+0x5b>
  5b:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  5f:	be 02 00 00 00       	mov    $0x2,%esi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	call   6c <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)+0x6c>
  6c:	0f b6 45 f6          	movzbl -0xa(%rbp),%eax
  70:	66 98                	cbtw   
  72:	0f b7 c0             	movzwl %ax,%eax
  75:	c1 e0 08             	shl    $0x8,%eax
  78:	89 c2                	mov    %eax,%edx
  7a:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  7e:	66 98                	cbtw   
  80:	09 d0                	or     %edx,%eax
  82:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  86:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  8d:	00 00 
  8f:	74 05                	je     96 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)+0x96>
  91:	e8 00 00 00 00       	call   96 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)+0x96>
  96:	c9                   	leave  
  97:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 08          	sub    $0x8,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b6 00             	movzbl (%rax),%eax
  17:	0f b6 c0             	movzbl %al,%eax
  1a:	89 c7                	mov    %eax,%edi
  1c:	e8 00 00 00 00       	call   21 <HAL_I2C::Setup()+0x21>
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	8b 40 04             	mov    0x4(%rax),%eax
  28:	89 c7                	mov    %eax,%edi
  2a:	e8 00 00 00 00       	call   2f <HAL_I2C::Setup()+0x2f>
  2f:	90                   	nop
  30:	c9                   	leave  
  31:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZL11CEILING_POSf:

0000000000000000 <CEILING_POS(float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	f3 0f 11 45 ec       	movss  %xmm0,-0x14(%rbp)
   d:	f3 0f 10 45 ec       	movss  -0x14(%rbp),%xmm0
  12:	f3 0f 2c c0          	cvttss2si %xmm0,%eax
  16:	89 45 fc             	mov    %eax,-0x4(%rbp)
  19:	66 0f ef c0          	pxor   %xmm0,%xmm0
  1d:	f3 0f 2a 45 fc       	cvtsi2ssl -0x4(%rbp),%xmm0
  22:	0f 2e 45 ec          	ucomiss -0x14(%rbp),%xmm0
  26:	7a 11                	jp     39 <CEILING_POS(float)+0x39>
  28:	0f 2e 45 ec          	ucomiss -0x14(%rbp),%xmm0
  2c:	75 0b                	jne    39 <CEILING_POS(float)+0x39>
  2e:	66 0f ef c0          	pxor   %xmm0,%xmm0
  32:	f3 0f 2a 45 fc       	cvtsi2ssl -0x4(%rbp),%xmm0
  37:	eb 0e                	jmp    47 <CEILING_POS(float)+0x47>
  39:	8b 45 fc             	mov    -0x4(%rbp),%eax
  3c:	83 c0 01             	add    $0x1,%eax
  3f:	66 0f ef c0          	pxor   %xmm0,%xmm0
  43:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  47:	5d                   	pop    %rbp
  48:	c3                   	ret    

Disassembly of section .text._ZN6sensor6INA219C2Eh:

0000000000000000 <sensor::INA219::INA219(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 d4             	mov    %al,-0x2c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  28:	0f b6 45 d4          	movzbl -0x2c(%rbp),%eax
  2c:	84 c0                	test   %al,%al
  2e:	74 0c                	je     3c <sensor::INA219::INA219(unsigned char)+0x3c>
  30:	48 8d 45 d4          	lea    -0x2c(%rbp),%rax
  34:	0f b6 00             	movzbl (%rax),%eax
  37:	0f b6 c0             	movzbl %al,%eax
  3a:	eb 05                	jmp    41 <sensor::INA219::INA219(unsigned char)+0x41>
  3c:	b8 40 00 00 00       	mov    $0x40,%eax
  41:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  46:	89 c6                	mov    %eax,%esi
  48:	48 89 cf             	mov    %rcx,%rdi
  4b:	e8 00 00 00 00       	call   50 <sensor::INA219::INA219(unsigned char)+0x50>
  50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  54:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	call   64 <sensor::INA219::INA219(unsigned char)+0x64>
  64:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  68:	88 42 08             	mov    %al,0x8(%rdx)
  6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6f:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  73:	84 c0                	test   %al,%al
  75:	74 4f                	je     c6 <sensor::INA219::INA219(unsigned char)+0xc6>
  77:	66 c7 45 ee 00 20    	movw   $0x2000,-0x12(%rbp)
  7d:	66 c7 45 f0 00 18    	movw   $0x1800,-0x10(%rbp)
  83:	66 c7 45 f2 00 04    	movw   $0x400,-0xe(%rbp)
  89:	66 c7 45 f4 18 00    	movw   $0x18,-0xc(%rbp)
  8f:	66 c7 45 f6 07 00    	movw   $0x7,-0xa(%rbp)
  95:	48 8d 55 ee          	lea    -0x12(%rbp),%rdx
  99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9d:	48 89 d6             	mov    %rdx,%rsi
  a0:	48 89 c7             	mov    %rax,%rdi
  a3:	e8 00 00 00 00       	call   a8 <sensor::INA219::INA219(unsigned char)+0xa8>
  a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ac:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # b4 <sensor::INA219::INA219(unsigned char)+0xb4>
  b3:	00 
  b4:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # ba <sensor::INA219::INA219(unsigned char)+0xba>
  ba:	66 0f 6e c2          	movd   %edx,%xmm0
  be:	48 89 c7             	mov    %rax,%rdi
  c1:	e8 00 00 00 00       	call   c6 <sensor::INA219::INA219(unsigned char)+0xc6>
  c6:	90                   	nop
  c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  cb:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  d2:	00 00 
  d4:	74 05                	je     db <sensor::INA219::INA219(unsigned char)+0xdb>
  d6:	e8 00 00 00 00       	call   db <sensor::INA219::INA219(unsigned char)+0xdb>
  db:	c9                   	leave  
  dc:	c3                   	ret    

Disassembly of section .text._ZN6sensor6INA2199ConfigureERNS_6ina2196ConfigE:

0000000000000000 <sensor::INA219::Configure(sensor::ina219::Config&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  18:	0f b7 00             	movzwl (%rax),%eax
  1b:	0f b7 c0             	movzwl %ax,%eax
  1e:	85 c0                	test   %eax,%eax
  20:	74 1a                	je     3c <sensor::INA219::Configure(sensor::ina219::Config&)+0x3c>
  22:	3d 00 20 00 00       	cmp    $0x2000,%eax
  27:	75 25                	jne    4e <sensor::INA219::Configure(sensor::ina219::Config&)+0x4e>
  29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2d:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 35 <sensor::INA219::Configure(sensor::ina219::Config&)+0x35>
  34:	00 
  35:	f3 0f 11 40 18       	movss  %xmm0,0x18(%rax)
  3a:	eb 12                	jmp    4e <sensor::INA219::Configure(sensor::ina219::Config&)+0x4e>
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 48 <sensor::INA219::Configure(sensor::ina219::Config&)+0x48>
  47:	00 
  48:	f3 0f 11 40 18       	movss  %xmm0,0x18(%rax)
  4d:	90                   	nop
  4e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  52:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  56:	0f b7 c0             	movzwl %ax,%eax
  59:	3d 00 18 00 00       	cmp    $0x1800,%eax
  5e:	74 22                	je     82 <sensor::INA219::Configure(sensor::ina219::Config&)+0x82>
  60:	3d 00 18 00 00       	cmp    $0x1800,%eax
  65:	7f 66                	jg     cd <sensor::INA219::Configure(sensor::ina219::Config&)+0xcd>
  67:	3d 00 10 00 00       	cmp    $0x1000,%eax
  6c:	74 27                	je     95 <sensor::INA219::Configure(sensor::ina219::Config&)+0x95>
  6e:	3d 00 10 00 00       	cmp    $0x1000,%eax
  73:	7f 58                	jg     cd <sensor::INA219::Configure(sensor::ina219::Config&)+0xcd>
  75:	85 c0                	test   %eax,%eax
  77:	74 42                	je     bb <sensor::INA219::Configure(sensor::ina219::Config&)+0xbb>
  79:	3d 00 08 00 00       	cmp    $0x800,%eax
  7e:	74 28                	je     a8 <sensor::INA219::Configure(sensor::ina219::Config&)+0xa8>
  80:	eb 4b                	jmp    cd <sensor::INA219::Configure(sensor::ina219::Config&)+0xcd>
  82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  86:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 8e <sensor::INA219::Configure(sensor::ina219::Config&)+0x8e>
  8d:	00 
  8e:	f3 0f 11 40 14       	movss  %xmm0,0x14(%rax)
  93:	eb 38                	jmp    cd <sensor::INA219::Configure(sensor::ina219::Config&)+0xcd>
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # a1 <sensor::INA219::Configure(sensor::ina219::Config&)+0xa1>
  a0:	00 
  a1:	f3 0f 11 40 14       	movss  %xmm0,0x14(%rax)
  a6:	eb 25                	jmp    cd <sensor::INA219::Configure(sensor::ina219::Config&)+0xcd>
  a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ac:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # b4 <sensor::INA219::Configure(sensor::ina219::Config&)+0xb4>
  b3:	00 
  b4:	f3 0f 11 40 14       	movss  %xmm0,0x14(%rax)
  b9:	eb 12                	jmp    cd <sensor::INA219::Configure(sensor::ina219::Config&)+0xcd>
  bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bf:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # c7 <sensor::INA219::Configure(sensor::ina219::Config&)+0xc7>
  c6:	00 
  c7:	f3 0f 11 40 14       	movss  %xmm0,0x14(%rax)
  cc:	90                   	nop
  cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d1:	0f b7 10             	movzwl (%rax),%edx
  d4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  d8:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  dc:	09 c2                	or     %eax,%edx
  de:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  e2:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  e6:	09 c2                	or     %eax,%edx
  e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  ec:	0f b7 40 06          	movzwl 0x6(%rax),%eax
  f0:	09 c2                	or     %eax,%edx
  f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  fa:	09 d0                	or     %edx,%eax
  fc:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
 100:	0f b7 55 fe          	movzwl -0x2(%rbp),%edx
 104:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 10b <sensor::INA219::Configure(sensor::ina219::Config&)+0x10b>
 10b:	41 89 d1             	mov    %edx,%r9d
 10e:	41 b8 62 00 00 00    	mov    $0x62,%r8d
 114:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 11b <sensor::INA219::Configure(sensor::ina219::Config&)+0x11b>
 11b:	48 89 d1             	mov    %rdx,%rcx
 11e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 125 <sensor::INA219::Configure(sensor::ina219::Config&)+0x125>
 125:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 12c <sensor::INA219::Configure(sensor::ina219::Config&)+0x12c>
 12c:	48 89 c7             	mov    %rax,%rdi
 12f:	b8 00 00 00 00       	mov    $0x0,%eax
 134:	e8 00 00 00 00       	call   139 <sensor::INA219::Configure(sensor::ina219::Config&)+0x139>
 139:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 13d:	0f b7 55 fe          	movzwl -0x2(%rbp),%edx
 141:	be 00 00 00 00       	mov    $0x0,%esi
 146:	48 89 c7             	mov    %rax,%rdi
 149:	e8 00 00 00 00       	call   14e <sensor::INA219::Configure(sensor::ina219::Config&)+0x14e>
 14e:	90                   	nop
 14f:	c9                   	leave  
 150:	c3                   	ret    

Disassembly of section .text._ZN6sensor6INA2199CalibrateEff:

0000000000000000 <sensor::INA219::Calibrate(float, float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	f3 0f 11 45 e4       	movss  %xmm0,-0x1c(%rbp)
  15:	f3 0f 11 4d e0       	movss  %xmm1,-0x20(%rbp)
  1a:	f3 0f 10 45 e0       	movss  -0x20(%rbp),%xmm0
  1f:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 27 <sensor::INA219::Calibrate(float, float)+0x27>
  26:	00 
  27:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  2b:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  39:	f3 0f 11 40 1c       	movss  %xmm0,0x1c(%rax)
  3e:	f3 0f 10 4d fc       	movss  -0x4(%rbp),%xmm1
  43:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 4b <sensor::INA219::Calibrate(float, float)+0x4b>
  4a:	00 
  4b:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  4f:	f3 0f 2c c0          	cvttss2si %xmm0,%eax
  53:	0f b7 c0             	movzwl %ax,%eax
  56:	66 0f ef c0          	pxor   %xmm0,%xmm0
  5a:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
  67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6b:	f3 0f 10 40 0c       	movss  0xc(%rax),%xmm0
  70:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 78 <sensor::INA219::Calibrate(float, float)+0x78>
  77:	00 
  78:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
  85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  89:	f3 0f 10 40 0c       	movss  0xc(%rax),%xmm0
  8e:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 96 <sensor::INA219::Calibrate(float, float)+0x96>
  95:	00 
  96:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9e:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
  a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a7:	8b 40 0c             	mov    0xc(%rax),%eax
  aa:	66 0f 6e c0          	movd   %eax,%xmm0
  ae:	e8 00 00 00 00       	call   b3 <sensor::INA219::Calibrate(float, float)+0xb3>
  b3:	66 0f 7e c0          	movd   %xmm0,%eax
  b7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  bb:	89 42 0c             	mov    %eax,0xc(%rdx)
  be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c2:	f3 0f 10 48 0c       	movss  0xc(%rax),%xmm1
  c7:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # cf <sensor::INA219::Calibrate(float, float)+0xcf>
  ce:	00 
  cf:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d7:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
  dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e0:	f3 0f 10 48 0c       	movss  0xc(%rax),%xmm1
  e5:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # ed <sensor::INA219::Calibrate(float, float)+0xed>
  ec:	00 
  ed:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f5:	f3 0f 11 40 10       	movss  %xmm0,0x10(%rax)
  fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fe:	f3 0f 10 48 0c       	movss  0xc(%rax),%xmm1
 103:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 107:	f3 0f 10 40 1c       	movss  0x1c(%rax),%xmm0
 10c:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
 110:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 118 <sensor::INA219::Calibrate(float, float)+0x118>
 117:	00 
 118:	f3 0f 5e c1          	divss  %xmm1,%xmm0
 11c:	f3 0f 2c c0          	cvttss2si %xmm0,%eax
 120:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
 124:	0f b7 55 fa          	movzwl -0x6(%rbp),%edx
 128:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 12f <sensor::INA219::Calibrate(float, float)+0x12f>
 12f:	41 89 d1             	mov    %edx,%r9d
 132:	41 b8 76 00 00 00    	mov    $0x76,%r8d
 138:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13f <sensor::INA219::Calibrate(float, float)+0x13f>
 13f:	48 89 d1             	mov    %rdx,%rcx
 142:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 149 <sensor::INA219::Calibrate(float, float)+0x149>
 149:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 150 <sensor::INA219::Calibrate(float, float)+0x150>
 150:	48 89 c7             	mov    %rax,%rdi
 153:	b8 00 00 00 00       	mov    $0x0,%eax
 158:	e8 00 00 00 00       	call   15d <sensor::INA219::Calibrate(float, float)+0x15d>
 15d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 161:	0f b7 55 fa          	movzwl -0x6(%rbp),%edx
 165:	be 05 00 00 00       	mov    $0x5,%esi
 16a:	48 89 c7             	mov    %rax,%rdi
 16d:	e8 00 00 00 00       	call   172 <sensor::INA219::Calibrate(float, float)+0x172>
 172:	90                   	nop
 173:	c9                   	leave  
 174:	c3                   	ret    

Disassembly of section .text._ZN6sensor6INA21915GetShuntCurrentEv:

0000000000000000 <sensor::INA219::GetShuntCurrent()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	ba 20 03 00 00       	mov    $0x320,%edx
  19:	be 04 00 00 00       	mov    $0x4,%esi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	call   26 <sensor::INA219::GetShuntCurrent()+0x26>
  26:	0f b7 c0             	movzwl %ax,%eax
  29:	66 0f ef c9          	pxor   %xmm1,%xmm1
  2d:	f3 0f 2a c8          	cvtsi2ss %eax,%xmm1
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	f3 0f 10 40 0c       	movss  0xc(%rax),%xmm0
  3a:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  3e:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  43:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  48:	c9                   	leave  
  49:	c3                   	ret    

Disassembly of section .text._ZN6sensor6INA21916GetBusVoltageRawEv:

0000000000000000 <sensor::INA219::GetBusVoltageRaw()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	ba 20 03 00 00       	mov    $0x320,%edx
  19:	be 02 00 00 00       	mov    $0x2,%esi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	call   26 <sensor::INA219::GetBusVoltageRaw()+0x26>
  26:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
  2a:	66 c1 6d fe 03       	shrw   $0x3,-0x2(%rbp)
  2f:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
  33:	c1 e0 02             	shl    $0x2,%eax
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN6sensor6INA21913GetBusVoltageEv:

0000000000000000 <sensor::INA219::GetBusVoltage()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <sensor::INA219::GetBusVoltage()+0x1c>
  1c:	98                   	cwtl   
  1d:	66 0f ef c9          	pxor   %xmm1,%xmm1
  21:	f3 0f 2a c8          	cvtsi2ss %eax,%xmm1
  25:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 2d <sensor::INA219::GetBusVoltage()+0x2d>
  2c:	00 
  2d:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text._ZN6sensor6INA21911GetBusPowerEv:

0000000000000000 <sensor::INA219::GetBusPower()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	ba 20 03 00 00       	mov    $0x320,%edx
  19:	be 03 00 00 00       	mov    $0x3,%esi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	call   26 <sensor::INA219::GetBusPower()+0x26>
  26:	0f b7 c0             	movzwl %ax,%eax
  29:	66 0f ef c9          	pxor   %xmm1,%xmm1
  2d:	f3 0f 2a c8          	cvtsi2ss %eax,%xmm1
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	f3 0f 10 40 10       	movss  0x10(%rax),%xmm0
  3a:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  3e:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  43:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  48:	c9                   	leave  
  49:	c3                   	ret    

max7219matrix.o:     file format elf64-x86-64


Disassembly of section .text.spi_begin:

0000000000000000 <spi_begin>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	90                   	nop
   5:	5d                   	pop    %rbp
   6:	c3                   	ret    

Disassembly of section .text.spi_chipSelect:

0000000000000000 <spi_chipSelect>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.spi_setDataMode:

0000000000000000 <spi_setDataMode>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.spi_set_speed_hz:

0000000000000000 <spi_set_speed_hz>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text.spi_writenb:

0000000000000000 <spi_writenb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	90                   	nop
   c:	5d                   	pop    %rbp
   d:	c3                   	ret    

Disassembly of section .text._ZN7HAL_SPI5SetupEv:

0000000000000000 <HAL_SPI::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 08          	sub    $0x8,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  18:	0f b6 c0             	movzbl %al,%eax
  1b:	89 c7                	mov    %eax,%edi
  1d:	e8 00 00 00 00       	call   22 <HAL_SPI::Setup()+0x22>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  2a:	0f b6 c0             	movzbl %al,%eax
  2d:	89 c7                	mov    %eax,%edi
  2f:	e8 00 00 00 00       	call   34 <HAL_SPI::Setup()+0x34>
  34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  38:	8b 00                	mov    (%rax),%eax
  3a:	89 c7                	mov    %eax,%edi
  3c:	e8 00 00 00 00       	call   41 <HAL_SPI::Setup()+0x41>
  41:	90                   	nop
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN7HAL_SPIC2Ehjh:

0000000000000000 <HAL_SPI::HAL_SPI(unsigned char, unsigned int, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 18          	sub    $0x18,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 55 f0             	mov    %edx,-0x10(%rbp)
  13:	89 c8                	mov    %ecx,%eax
  15:	89 f2                	mov    %esi,%edx
  17:	88 55 f4             	mov    %dl,-0xc(%rbp)
  1a:	88 45 ec             	mov    %al,-0x14(%rbp)
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	8b 55 f0             	mov    -0x10(%rbp),%edx
  24:	89 10                	mov    %edx,(%rax)
  26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2a:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  2e:	88 50 04             	mov    %dl,0x4(%rax)
  31:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  35:	83 e0 03             	and    $0x3,%eax
  38:	89 c2                	mov    %eax,%edx
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	88 50 05             	mov    %dl,0x5(%rax)
  41:	e8 00 00 00 00       	call   46 <HAL_SPI::HAL_SPI(unsigned char, unsigned int, unsigned char)+0x46>
  46:	90                   	nop
  47:	c9                   	leave  
  48:	c3                   	ret    

Disassembly of section .text._ZN7HAL_SPI5WriteEPKcjb:

0000000000000000 <HAL_SPI::Write(char const*, unsigned int, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	89 55 ec             	mov    %edx,-0x14(%rbp)
  17:	89 c8                	mov    %ecx,%eax
  19:	88 45 e8             	mov    %al,-0x18(%rbp)
  1c:	80 7d e8 00          	cmpb   $0x0,-0x18(%rbp)
  20:	74 0c                	je     2e <HAL_SPI::Write(char const*, unsigned int, bool)+0x2e>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
  29:	e8 00 00 00 00       	call   2e <HAL_SPI::Write(char const*, unsigned int, bool)+0x2e>
  2e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  35:	89 d6                	mov    %edx,%esi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	call   3f <HAL_SPI::Write(char const*, unsigned int, bool)+0x3f>
  3f:	90                   	nop
  40:	c9                   	leave  
  41:	c3                   	ret    

Disassembly of section .text._ZN7MAX7219C2Ej:

0000000000000000 <MAX7219::MAX7219(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  17:	8b 45 f4             	mov    -0xc(%rbp),%eax
  1a:	85 c0                	test   %eax,%eax
  1c:	74 19                	je     37 <MAX7219::MAX7219(unsigned int)+0x37>
  1e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  21:	3d 80 96 98 00       	cmp    $0x989680,%eax
  26:	77 08                	ja     30 <MAX7219::MAX7219(unsigned int)+0x30>
  28:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  2c:	8b 00                	mov    (%rax),%eax
  2e:	eb 0c                	jmp    3c <MAX7219::MAX7219(unsigned int)+0x3c>
  30:	b8 80 96 98 00       	mov    $0x989680,%eax
  35:	eb 05                	jmp    3c <MAX7219::MAX7219(unsigned int)+0x3c>
  37:	b8 80 84 1e 00       	mov    $0x1e8480,%eax
  3c:	b9 00 00 00 00       	mov    $0x0,%ecx
  41:	89 c2                	mov    %eax,%edx
  43:	be 00 00 00 00       	mov    $0x0,%esi
  48:	e8 00 00 00 00       	call   4d <MAX7219::MAX7219(unsigned int)+0x4d>
  4d:	90                   	nop
  4e:	c9                   	leave  
  4f:	c3                   	ret    

Disassembly of section .text._ZN13Max7219MatrixC2Ev:

0000000000000000 <Max7219Matrix::Max7219Matrix()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  15:	be 00 00 00 00       	mov    $0x0,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	call   22 <Max7219Matrix::Max7219Matrix()+0x22>
  22:	e8 00 00 00 00       	call   27 <Max7219Matrix::Max7219Matrix()+0x27>
  27:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  2b:	89 42 08             	mov    %eax,0x8(%rdx)
  2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  32:	66 c7 40 18 04 00    	movw   $0x4,0x18(%rax)
  38:	b9 27 00 00 00       	mov    $0x27,%ecx
  3d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 44 <Max7219Matrix::Max7219Matrix()+0x44>
  44:	48 89 c2             	mov    %rax,%rdx
  47:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 4e <Max7219Matrix::Max7219Matrix()+0x4e>
  4e:	48 89 c6             	mov    %rax,%rsi
  51:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 58 <Max7219Matrix::Max7219Matrix()+0x58>
  58:	48 89 c7             	mov    %rax,%rdi
  5b:	b8 00 00 00 00       	mov    $0x0,%eax
  60:	e8 00 00 00 00       	call   65 <Max7219Matrix::Max7219Matrix()+0x65>
  65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  69:	8b 40 08             	mov    0x8(%rax),%eax
  6c:	c1 e0 03             	shl    $0x3,%eax
  6f:	89 c0                	mov    %eax,%eax
  71:	48 89 c7             	mov    %rax,%rdi
  74:	e8 00 00 00 00       	call   79 <Max7219Matrix::Max7219Matrix()+0x79>
  79:	48 89 c2             	mov    %rax,%rdx
  7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80:	48 89 50 10          	mov    %rdx,0x10(%rax)
  84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  88:	48 8b 40 10          	mov    0x10(%rax),%rax
  8c:	48 85 c0             	test   %rax,%rax
  8f:	75 28                	jne    b9 <Max7219Matrix::Max7219Matrix()+0xb9>
  91:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 98 <Max7219Matrix::Max7219Matrix()+0x98>
  98:	48 89 c1             	mov    %rax,%rcx
  9b:	ba 2a 00 00 00       	mov    $0x2a,%edx
  a0:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # a7 <Max7219Matrix::Max7219Matrix()+0xa7>
  a7:	48 89 c6             	mov    %rax,%rsi
  aa:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # b1 <Max7219Matrix::Max7219Matrix()+0xb1>
  b1:	48 89 c7             	mov    %rax,%rdi
  b4:	e8 00 00 00 00       	call   b9 <Max7219Matrix::Max7219Matrix()+0xb9>
  b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  bd:	48 8b 40 10          	mov    0x10(%rax),%rax
  c1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  c5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  cc:	eb 40                	jmp    10e <Max7219Matrix::Max7219Matrix()+0x10e>
  ce:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  d5:	eb 2d                	jmp    104 <Max7219Matrix::Max7219Matrix()+0x104>
  d7:	b8 07 00 00 00       	mov    $0x7,%eax
  dc:	2b 45 e4             	sub    -0x1c(%rbp),%eax
  df:	89 c2                	mov    %eax,%edx
  e1:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  e5:	48 8d 43 01          	lea    0x1(%rbx),%rax
  e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  ed:	8b 4d e0             	mov    -0x20(%rbp),%ecx
  f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f4:	89 ce                	mov    %ecx,%esi
  f6:	48 89 c7             	mov    %rax,%rdi
  f9:	e8 00 00 00 00       	call   fe <Max7219Matrix::Max7219Matrix()+0xfe>
  fe:	88 03                	mov    %al,(%rbx)
 100:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
 104:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
 108:	76 cd                	jbe    d7 <Max7219Matrix::Max7219Matrix()+0xd7>
 10a:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
 10e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 112:	8b 40 08             	mov    0x8(%rax),%eax
 115:	39 45 e0             	cmp    %eax,-0x20(%rbp)
 118:	72 b4                	jb     ce <Max7219Matrix::Max7219Matrix()+0xce>
 11a:	b9 34 00 00 00       	mov    $0x34,%ecx
 11f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 126 <Max7219Matrix::Max7219Matrix()+0x126>
 126:	48 89 c2             	mov    %rax,%rdx
 129:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 130 <Max7219Matrix::Max7219Matrix()+0x130>
 130:	48 89 c6             	mov    %rax,%rsi
 133:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 13a <Max7219Matrix::Max7219Matrix()+0x13a>
 13a:	48 89 c7             	mov    %rax,%rdi
 13d:	b8 00 00 00 00       	mov    $0x0,%eax
 142:	e8 00 00 00 00       	call   147 <Max7219Matrix::Max7219Matrix()+0x147>
 147:	90                   	nop
 148:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 14c:	c9                   	leave  
 14d:	c3                   	ret    

Disassembly of section .text._ZN13Max7219MatrixD2Ev:

0000000000000000 <Max7219Matrix::~Max7219Matrix()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	b9 38 00 00 00       	mov    $0x38,%ecx
  15:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c <Max7219Matrix::~Max7219Matrix()+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26 <Max7219Matrix::~Max7219Matrix()+0x26>
  26:	48 89 c6             	mov    %rax,%rsi
  29:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 30 <Max7219Matrix::~Max7219Matrix()+0x30>
  30:	48 89 c7             	mov    %rax,%rdi
  33:	b8 00 00 00 00       	mov    $0x0,%eax
  38:	e8 00 00 00 00       	call   3d <Max7219Matrix::~Max7219Matrix()+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 40 10          	mov    0x10(%rax),%rax
  45:	48 85 c0             	test   %rax,%rax
  48:	74 10                	je     5a <Max7219Matrix::~Max7219Matrix()+0x5a>
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8b 40 10          	mov    0x10(%rax),%rax
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	call   5a <Max7219Matrix::~Max7219Matrix()+0x5a>
  5a:	b9 3c 00 00 00       	mov    $0x3c,%ecx
  5f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 66 <Max7219Matrix::~Max7219Matrix()+0x66>
  66:	48 89 c2             	mov    %rax,%rdx
  69:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 70 <Max7219Matrix::~Max7219Matrix()+0x70>
  70:	48 89 c6             	mov    %rax,%rsi
  73:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7a <Max7219Matrix::~Max7219Matrix()+0x7a>
  7a:	48 89 c7             	mov    %rax,%rdi
  7d:	b8 00 00 00 00       	mov    $0x0,%eax
  82:	e8 00 00 00 00       	call   87 <Max7219Matrix::~Max7219Matrix()+0x87>
  87:	90                   	nop
  88:	c9                   	leave  
  89:	c3                   	ret    

Disassembly of section .text._ZN13Max7219Matrix4InitEth:

0000000000000000 <Max7219Matrix::Init(unsigned short, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	89 d0                	mov    %edx,%eax
  18:	88 45 e0             	mov    %al,-0x20(%rbp)
  1b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  22:	00 00 
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  28:	31 c0                	xor    %eax,%eax
  2a:	b9 40 00 00 00       	mov    $0x40,%ecx
  2f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 36 <Max7219Matrix::Init(unsigned short, unsigned char)+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 40 <Max7219Matrix::Init(unsigned short, unsigned char)+0x40>
  40:	48 89 c6             	mov    %rax,%rsi
  43:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 4a <Max7219Matrix::Init(unsigned short, unsigned char)+0x4a>
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	b8 00 00 00 00       	mov    $0x0,%eax
  52:	e8 00 00 00 00       	call   57 <Max7219Matrix::Init(unsigned short, unsigned char)+0x57>
  57:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%rbp)
  5d:	48 8d 55 f6          	lea    -0xa(%rbp),%rdx
  61:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
  65:	48 89 d6             	mov    %rdx,%rsi
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	call   70 <Max7219Matrix::Init(unsigned short, unsigned char)+0x70>
  70:	0f b7 10             	movzwl (%rax),%edx
  73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  77:	66 89 50 18          	mov    %dx,0x18(%rax)
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  83:	0f b7 d0             	movzwl %ax,%edx
  86:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 8d <Max7219Matrix::Init(unsigned short, unsigned char)+0x8d>
  8d:	41 89 d1             	mov    %edx,%r9d
  90:	41 b8 45 00 00 00    	mov    $0x45,%r8d
  96:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 9d <Max7219Matrix::Init(unsigned short, unsigned char)+0x9d>
  9d:	48 89 d1             	mov    %rdx,%rcx
  a0:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # a7 <Max7219Matrix::Init(unsigned short, unsigned char)+0xa7>
  a7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # ae <Max7219Matrix::Init(unsigned short, unsigned char)+0xae>
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	b8 00 00 00 00       	mov    $0x0,%eax
  b6:	e8 00 00 00 00       	call   bb <Max7219Matrix::Init(unsigned short, unsigned char)+0xbb>
  bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bf:	ba 01 00 00 00       	mov    $0x1,%edx
  c4:	be 0c 00 00 00       	mov    $0xc,%esi
  c9:	48 89 c7             	mov    %rax,%rdi
  cc:	e8 00 00 00 00       	call   d1 <Max7219Matrix::Init(unsigned short, unsigned char)+0xd1>
  d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d5:	ba 00 00 00 00       	mov    $0x0,%edx
  da:	be 0f 00 00 00       	mov    $0xf,%esi
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	call   e7 <Max7219Matrix::Init(unsigned short, unsigned char)+0xe7>
  e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  eb:	ba 00 00 00 00       	mov    $0x0,%edx
  f0:	be 09 00 00 00       	mov    $0x9,%esi
  f5:	48 89 c7             	mov    %rax,%rdi
  f8:	e8 00 00 00 00       	call   fd <Max7219Matrix::Init(unsigned short, unsigned char)+0xfd>
  fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 101:	ba 07 00 00 00       	mov    $0x7,%edx
 106:	be 0b 00 00 00       	mov    $0xb,%esi
 10b:	48 89 c7             	mov    %rax,%rdi
 10e:	e8 00 00 00 00       	call   113 <Max7219Matrix::Init(unsigned short, unsigned char)+0x113>
 113:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
 117:	83 e0 0f             	and    $0xf,%eax
 11a:	89 c2                	mov    %eax,%edx
 11c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 120:	be 0a 00 00 00       	mov    $0xa,%esi
 125:	48 89 c7             	mov    %rax,%rdi
 128:	e8 00 00 00 00       	call   12d <Max7219Matrix::Init(unsigned short, unsigned char)+0x12d>
 12d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 131:	48 89 c7             	mov    %rax,%rdi
 134:	e8 00 00 00 00       	call   139 <Max7219Matrix::Init(unsigned short, unsigned char)+0x139>
 139:	b9 50 00 00 00       	mov    $0x50,%ecx
 13e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 145 <Max7219Matrix::Init(unsigned short, unsigned char)+0x145>
 145:	48 89 c2             	mov    %rax,%rdx
 148:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 14f <Max7219Matrix::Init(unsigned short, unsigned char)+0x14f>
 14f:	48 89 c6             	mov    %rax,%rsi
 152:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 159 <Max7219Matrix::Init(unsigned short, unsigned char)+0x159>
 159:	48 89 c7             	mov    %rax,%rdi
 15c:	b8 00 00 00 00       	mov    $0x0,%eax
 161:	e8 00 00 00 00       	call   166 <Max7219Matrix::Init(unsigned short, unsigned char)+0x166>
 166:	90                   	nop
 167:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 16b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 172:	00 00 
 174:	74 05                	je     17b <Max7219Matrix::Init(unsigned short, unsigned char)+0x17b>
 176:	e8 00 00 00 00       	call   17b <Max7219Matrix::Init(unsigned short, unsigned char)+0x17b>
 17b:	c9                   	leave  
 17c:	c3                   	ret    

Disassembly of section .text._ZN13Max7219Matrix3ClsEv:

0000000000000000 <Max7219Matrix::Cls()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	b9 54 00 00 00       	mov    $0x54,%ecx
  15:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c <Max7219Matrix::Cls()+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26 <Max7219Matrix::Cls()+0x26>
  26:	48 89 c6             	mov    %rax,%rsi
  29:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 30 <Max7219Matrix::Cls()+0x30>
  30:	48 89 c7             	mov    %rax,%rdi
  33:	b8 00 00 00 00       	mov    $0x0,%eax
  38:	e8 00 00 00 00       	call   3d <Max7219Matrix::Cls()+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	ba 00 00 00 00       	mov    $0x0,%edx
  46:	be 01 00 00 00       	mov    $0x1,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	call   53 <Max7219Matrix::Cls()+0x53>
  53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  57:	ba 00 00 00 00       	mov    $0x0,%edx
  5c:	be 02 00 00 00       	mov    $0x2,%esi
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	call   69 <Max7219Matrix::Cls()+0x69>
  69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6d:	ba 00 00 00 00       	mov    $0x0,%edx
  72:	be 03 00 00 00       	mov    $0x3,%esi
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	call   7f <Max7219Matrix::Cls()+0x7f>
  7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  83:	ba 00 00 00 00       	mov    $0x0,%edx
  88:	be 04 00 00 00       	mov    $0x4,%esi
  8d:	48 89 c7             	mov    %rax,%rdi
  90:	e8 00 00 00 00       	call   95 <Max7219Matrix::Cls()+0x95>
  95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  99:	ba 00 00 00 00       	mov    $0x0,%edx
  9e:	be 05 00 00 00       	mov    $0x5,%esi
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	call   ab <Max7219Matrix::Cls()+0xab>
  ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  af:	ba 00 00 00 00       	mov    $0x0,%edx
  b4:	be 06 00 00 00       	mov    $0x6,%esi
  b9:	48 89 c7             	mov    %rax,%rdi
  bc:	e8 00 00 00 00       	call   c1 <Max7219Matrix::Cls()+0xc1>
  c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c5:	ba 00 00 00 00       	mov    $0x0,%edx
  ca:	be 07 00 00 00       	mov    $0x7,%esi
  cf:	48 89 c7             	mov    %rax,%rdi
  d2:	e8 00 00 00 00       	call   d7 <Max7219Matrix::Cls()+0xd7>
  d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  db:	ba 00 00 00 00       	mov    $0x0,%edx
  e0:	be 08 00 00 00       	mov    $0x8,%esi
  e5:	48 89 c7             	mov    %rax,%rdi
  e8:	e8 00 00 00 00       	call   ed <Max7219Matrix::Cls()+0xed>
  ed:	b9 5f 00 00 00       	mov    $0x5f,%ecx
  f2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # f9 <Max7219Matrix::Cls()+0xf9>
  f9:	48 89 c2             	mov    %rax,%rdx
  fc:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 103 <Max7219Matrix::Cls()+0x103>
 103:	48 89 c6             	mov    %rax,%rsi
 106:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 10d <Max7219Matrix::Cls()+0x10d>
 10d:	48 89 c7             	mov    %rax,%rdi
 110:	b8 00 00 00 00       	mov    $0x0,%eax
 115:	e8 00 00 00 00       	call   11a <Max7219Matrix::Cls()+0x11a>
 11a:	90                   	nop
 11b:	c9                   	leave  
 11c:	c3                   	ret    

Disassembly of section .text._ZN13Max7219Matrix5WriteEPKct:

0000000000000000 <Max7219Matrix::Write(char const*, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	89 d0                	mov    %edx,%eax
  16:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
  1a:	0f b7 55 cc          	movzwl -0x34(%rbp),%edx
  1e:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 25 <Max7219Matrix::Write(char const*, unsigned short)+0x25>
  25:	41 89 d1             	mov    %edx,%r9d
  28:	41 b8 63 00 00 00    	mov    $0x63,%r8d
  2e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 35 <Max7219Matrix::Write(char const*, unsigned short)+0x35>
  35:	48 89 d1             	mov    %rdx,%rcx
  38:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3f <Max7219Matrix::Write(char const*, unsigned short)+0x3f>
  3f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 46 <Max7219Matrix::Write(char const*, unsigned short)+0x46>
  46:	48 89 c7             	mov    %rax,%rdi
  49:	b8 00 00 00 00       	mov    $0x0,%eax
  4e:	e8 00 00 00 00       	call   53 <Max7219Matrix::Write(char const*, unsigned short)+0x53>
  53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  57:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  5b:	66 39 45 cc          	cmp    %ax,-0x34(%rbp)
  5f:	76 0c                	jbe    6d <Max7219Matrix::Write(char const*, unsigned short)+0x6d>
  61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  65:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  69:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
  6d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%rbp)
  74:	e9 19 01 00 00       	jmp    192 <Max7219Matrix::Write(char const*, unsigned short)+0x192>
  79:	0f b7 45 cc          	movzwl -0x34(%rbp),%eax
  7d:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80:	66 c7 45 ea 00 00    	movw   $0x0,-0x16(%rbp)
  86:	eb 2a                	jmp    b2 <Max7219Matrix::Write(char const*, unsigned short)+0xb2>
  88:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
  8c:	48 98                	cltq   
  8e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 95 <Max7219Matrix::Write(char const*, unsigned short)+0x95>
  95:	c6 04 10 00          	movb   $0x0,(%rax,%rdx,1)
  99:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
  9d:	83 c0 01             	add    $0x1,%eax
  a0:	48 98                	cltq   
  a2:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # a9 <Max7219Matrix::Write(char const*, unsigned short)+0xa9>
  a9:	c6 04 10 00          	movb   $0x0,(%rax,%rdx,1)
  ad:	66 83 45 ea 02       	addw   $0x2,-0x16(%rbp)
  b2:	0f b7 55 ea          	movzwl -0x16(%rbp),%edx
  b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ba:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  be:	0f b7 c0             	movzwl %ax,%eax
  c1:	0f b7 4d cc          	movzwl -0x34(%rbp),%ecx
  c5:	29 c8                	sub    %ecx,%eax
  c7:	01 c0                	add    %eax,%eax
  c9:	39 c2                	cmp    %eax,%edx
  cb:	72 bb                	jb     88 <Max7219Matrix::Write(char const*, unsigned short)+0x88>
  cd:	e9 8c 00 00 00       	jmp    15e <Max7219Matrix::Write(char const*, unsigned short)+0x15e>
  d2:	8b 45 ec             	mov    -0x14(%rbp),%eax
  d5:	48 63 d0             	movslq %eax,%rdx
  d8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  dc:	48 01 d0             	add    %rdx,%rax
  df:	0f b6 00             	movzbl (%rax),%eax
  e2:	0f be c0             	movsbl %al,%eax
  e5:	89 45 f4             	mov    %eax,-0xc(%rbp)
  e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ec:	8b 40 08             	mov    0x8(%rax),%eax
  ef:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  f2:	72 07                	jb     fb <Max7219Matrix::Write(char const*, unsigned short)+0xfb>
  f4:	c7 45 f4 20 00 00 00 	movl   $0x20,-0xc(%rbp)
  fb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ff:	48 8b 50 10          	mov    0x10(%rax),%rdx
 103:	8b 45 f4             	mov    -0xc(%rbp),%eax
 106:	c1 e0 03             	shl    $0x3,%eax
 109:	89 c0                	mov    %eax,%eax
 10b:	48 01 d0             	add    %rdx,%rax
 10e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 112:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
 116:	8d 50 01             	lea    0x1(%rax),%edx
 119:	66 89 55 ea          	mov    %dx,-0x16(%rbp)
 11d:	0f b7 c0             	movzwl %ax,%eax
 120:	8b 55 f0             	mov    -0x10(%rbp),%edx
 123:	89 d1                	mov    %edx,%ecx
 125:	48 98                	cltq   
 127:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 12e <Max7219Matrix::Write(char const*, unsigned short)+0x12e>
 12e:	88 0c 10             	mov    %cl,(%rax,%rdx,1)
 131:	8b 45 f0             	mov    -0x10(%rbp),%eax
 134:	83 e8 01             	sub    $0x1,%eax
 137:	89 c2                	mov    %eax,%edx
 139:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 13d:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
 141:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
 145:	8d 50 01             	lea    0x1(%rax),%edx
 148:	66 89 55 ea          	mov    %dx,-0x16(%rbp)
 14c:	0f b7 c0             	movzwl %ax,%eax
 14f:	0f b6 11             	movzbl (%rcx),%edx
 152:	48 98                	cltq   
 154:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 15b <Max7219Matrix::Write(char const*, unsigned short)+0x15b>
 15b:	88 14 08             	mov    %dl,(%rax,%rcx,1)
 15e:	83 6d ec 01          	subl   $0x1,-0x14(%rbp)
 162:	8b 45 ec             	mov    -0x14(%rbp),%eax
 165:	f7 d0                	not    %eax
 167:	c1 e8 1f             	shr    $0x1f,%eax
 16a:	84 c0                	test   %al,%al
 16c:	0f 85 60 ff ff ff    	jne    d2 <Max7219Matrix::Write(char const*, unsigned short)+0xd2>
 172:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 176:	0f b7 55 ea          	movzwl -0x16(%rbp),%edx
 17a:	b9 01 00 00 00       	mov    $0x1,%ecx
 17f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 186 <Max7219Matrix::Write(char const*, unsigned short)+0x186>
 186:	48 89 c7             	mov    %rax,%rdi
 189:	e8 00 00 00 00       	call   18e <Max7219Matrix::Write(char const*, unsigned short)+0x18e>
 18e:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
 192:	83 7d f0 08          	cmpl   $0x8,-0x10(%rbp)
 196:	0f 86 dd fe ff ff    	jbe    79 <Max7219Matrix::Write(char const*, unsigned short)+0x79>
 19c:	90                   	nop
 19d:	90                   	nop
 19e:	c9                   	leave  
 19f:	c3                   	ret    

Disassembly of section .text._ZN13Max7219Matrix15UpdateCharacterEjPKh:

0000000000000000 <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
   f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  17:	8b 40 08             	mov    0x8(%rax),%eax
  1a:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
  1d:	0f 87 9e 00 00 00    	ja     c1 <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0xc1>
  23:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  27:	48 8b 50 10          	mov    0x10(%rax),%rdx
  2b:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  2e:	c1 e0 03             	shl    $0x3,%eax
  31:	89 c0                	mov    %eax,%eax
  33:	48 01 d0             	add    %rdx,%rax
  36:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  41:	eb 76                	jmp    b9 <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0xb9>
  43:	c6 45 ee 00          	movb   $0x0,-0x12(%rbp)
  47:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  4b:	eb 52                	jmp    9f <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0x9f>
  4d:	0f b6 55 ef          	movzbl -0x11(%rbp),%edx
  51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  55:	48 01 d0             	add    %rdx,%rax
  58:	0f b6 00             	movzbl (%rax),%eax
  5b:	0f b6 d0             	movzbl %al,%edx
  5e:	b8 07 00 00 00       	mov    $0x7,%eax
  63:	2b 45 f0             	sub    -0x10(%rbp),%eax
  66:	be 01 00 00 00       	mov    $0x1,%esi
  6b:	89 c1                	mov    %eax,%ecx
  6d:	d3 e6                	shl    %cl,%esi
  6f:	89 f0                	mov    %esi,%eax
  71:	21 d0                	and    %edx,%eax
  73:	89 45 f4             	mov    %eax,-0xc(%rbp)
  76:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  7a:	74 11                	je     8d <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0x8d>
  7c:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  80:	ba 01 00 00 00       	mov    $0x1,%edx
  85:	89 c1                	mov    %eax,%ecx
  87:	d3 e2                	shl    %cl,%edx
  89:	89 d0                	mov    %edx,%eax
  8b:	eb 05                	jmp    92 <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0x92>
  8d:	b8 00 00 00 00       	mov    $0x0,%eax
  92:	08 45 ee             	or     %al,-0x12(%rbp)
  95:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  99:	83 c0 01             	add    $0x1,%eax
  9c:	88 45 ef             	mov    %al,-0x11(%rbp)
  9f:	80 7d ef 07          	cmpb   $0x7,-0x11(%rbp)
  a3:	76 a8                	jbe    4d <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0x4d>
  a5:	8b 55 f0             	mov    -0x10(%rbp),%edx
  a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ac:	48 01 c2             	add    %rax,%rdx
  af:	0f b6 45 ee          	movzbl -0x12(%rbp),%eax
  b3:	88 02                	mov    %al,(%rdx)
  b5:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
  b9:	83 7d f0 07          	cmpl   $0x7,-0x10(%rbp)
  bd:	76 84                	jbe    43 <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0x43>
  bf:	eb 01                	jmp    c2 <Max7219Matrix::UpdateCharacter(unsigned int, unsigned char const*)+0xc2>
  c1:	90                   	nop
  c2:	5d                   	pop    %rbp
  c3:	c3                   	ret    

Disassembly of section .text._ZN13Max7219Matrix8WriteAllEhh:

0000000000000000 <Max7219Matrix::WriteAll(unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	88 45 e0             	mov    %al,-0x20(%rbp)
  1c:	b9 9a 00 00 00       	mov    $0x9a,%ecx
  21:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 28 <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
  2b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 32 <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0x32>
  32:	48 89 c6             	mov    %rax,%rsi
  35:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3c <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0x3c>
  3c:	48 89 c7             	mov    %rax,%rdi
  3f:	b8 00 00 00 00       	mov    $0x0,%eax
  44:	e8 00 00 00 00       	call   49 <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0x49>
  49:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  50:	eb 2b                	jmp    7d <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0x7d>
  52:	8b 45 fc             	mov    -0x4(%rbp),%eax
  55:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 5c <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0x5c>
  5c:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  60:	88 14 08             	mov    %dl,(%rax,%rcx,1)
  63:	8b 45 fc             	mov    -0x4(%rbp),%eax
  66:	83 c0 01             	add    $0x1,%eax
  69:	89 c1                	mov    %eax,%ecx
  6b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 72 <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0x72>
  72:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
  76:	88 04 11             	mov    %al,(%rcx,%rdx,1)
  79:	83 45 fc 02          	addl   $0x2,-0x4(%rbp)
  7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  81:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  85:	0f b7 c0             	movzwl %ax,%eax
  88:	01 c0                	add    %eax,%eax
  8a:	39 45 fc             	cmp    %eax,-0x4(%rbp)
  8d:	72 c3                	jb     52 <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0x52>
  8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  93:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  97:	0f b7 52 18          	movzwl 0x18(%rdx),%edx
  9b:	0f b7 d2             	movzwl %dx,%edx
  9e:	01 d2                	add    %edx,%edx
  a0:	b9 01 00 00 00       	mov    $0x1,%ecx
  a5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # ac <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0xac>
  ac:	48 89 c7             	mov    %rax,%rdi
  af:	e8 00 00 00 00       	call   b4 <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0xb4>
  b4:	b9 a3 00 00 00       	mov    $0xa3,%ecx
  b9:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c0 <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0xc0>
  c0:	48 89 c2             	mov    %rax,%rdx
  c3:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ca <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0xca>
  ca:	48 89 c6             	mov    %rax,%rsi
  cd:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d4 <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0xd4>
  d4:	48 89 c7             	mov    %rax,%rdi
  d7:	b8 00 00 00 00       	mov    $0x0,%eax
  dc:	e8 00 00 00 00       	call   e1 <Max7219Matrix::WriteAll(unsigned char, unsigned char)+0xe1>
  e1:	90                   	nop
  e2:	c9                   	leave  
  e3:	c3                   	ret    

Disassembly of section .text._ZN13Max7219Matrix6RotateEjj:

0000000000000000 <Max7219Matrix::Rotate(unsigned int, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	89 55 e0             	mov    %edx,-0x20(%rbp)
  12:	c6 45 fa 00          	movb   $0x0,-0x6(%rbp)
  16:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
  1a:	eb 5d                	jmp    79 <Max7219Matrix::Rotate(unsigned int, unsigned int)+0x79>
  1c:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  20:	48 63 d0             	movslq %eax,%rdx
  23:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  26:	48 c1 e0 03          	shl    $0x3,%rax
  2a:	48 01 c2             	add    %rax,%rdx
  2d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 34 <Max7219Matrix::Rotate(unsigned int, unsigned int)+0x34>
  34:	48 01 d0             	add    %rdx,%rax
  37:	0f b6 00             	movzbl (%rax),%eax
  3a:	0f b6 d0             	movzbl %al,%edx
  3d:	8b 45 e0             	mov    -0x20(%rbp),%eax
  40:	be 01 00 00 00       	mov    $0x1,%esi
  45:	89 c1                	mov    %eax,%ecx
  47:	d3 e6                	shl    %cl,%esi
  49:	89 f0                	mov    %esi,%eax
  4b:	21 d0                	and    %edx,%eax
  4d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  50:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  54:	74 11                	je     67 <Max7219Matrix::Rotate(unsigned int, unsigned int)+0x67>
  56:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  5a:	ba 01 00 00 00       	mov    $0x1,%edx
  5f:	89 c1                	mov    %eax,%ecx
  61:	d3 e2                	shl    %cl,%edx
  63:	89 d0                	mov    %edx,%eax
  65:	eb 05                	jmp    6c <Max7219Matrix::Rotate(unsigned int, unsigned int)+0x6c>
  67:	b8 00 00 00 00       	mov    $0x0,%eax
  6c:	08 45 fa             	or     %al,-0x6(%rbp)
  6f:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  73:	83 c0 01             	add    $0x1,%eax
  76:	88 45 fb             	mov    %al,-0x5(%rbp)
  79:	80 7d fb 07          	cmpb   $0x7,-0x5(%rbp)
  7d:	76 9d                	jbe    1c <Max7219Matrix::Rotate(unsigned int, unsigned int)+0x1c>
  7f:	0f b6 45 fa          	movzbl -0x6(%rbp),%eax
  83:	5d                   	pop    %rbp
  84:	c3                   	ret    

Disassembly of section .text._ZSt3minItERKT_S2_S2_:

0000000000000000 <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	0f b7 10             	movzwl (%rax),%edx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	0f b7 00             	movzwl (%rax),%eax
  1e:	66 39 c2             	cmp    %ax,%dx
  21:	73 06                	jae    29 <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)+0x29>
  23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  27:	eb 04                	jmp    2d <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)+0x2d>
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	5d                   	pop    %rbp
  2e:	c3                   	ret    

mcp9808.o:     file format elf64-x86-64


Disassembly of section .text.i2c_set_baudrate:

0000000000000000 <i2c_set_baudrate>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text.i2c_set_address:

0000000000000000 <i2c_set_address>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.i2c_write:

0000000000000000 <i2c_write>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text.i2c_read:

0000000000000000 <i2c_read>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	89 55 f0             	mov    %edx,-0x10(%rbp)
  11:	88 45 f4             	mov    %al,-0xc(%rbp)
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  1c:	88 10                	mov    %dl,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	8b 55 f0             	mov    -0x10(%rbp),%edx
  25:	89 50 04             	mov    %edx,0x4(%rax)
  28:	90                   	nop
  29:	5d                   	pop    %rbp
  2a:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 50 04             	mov    0x4(%rax),%edx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	0f b6 00             	movzbl (%rax),%eax
  1e:	0f b6 c0             	movzbl %al,%eax
  21:	89 d6                	mov    %edx,%esi
  23:	89 c7                	mov    %eax,%edi
  25:	e8 00 00 00 00       	call   2a <HAL_I2C::IsConnected()+0x2a>
  2a:	c9                   	leave  
  2b:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C6Read16Ev:

0000000000000000 <HAL_I2C::Read16()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%rbp)
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	call   31 <HAL_I2C::Read16()+0x31>
  31:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  35:	be 02 00 00 00       	mov    $0x2,%esi
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	e8 00 00 00 00       	call   42 <HAL_I2C::Read16()+0x42>
  42:	0f b6 45 f6          	movzbl -0xa(%rbp),%eax
  46:	66 98                	cbtw   
  48:	0f b7 c0             	movzwl %ax,%eax
  4b:	c1 e0 08             	shl    $0x8,%eax
  4e:	89 c2                	mov    %eax,%edx
  50:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  54:	66 98                	cbtw   
  56:	09 d0                	or     %edx,%eax
  58:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  5c:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  63:	00 00 
  65:	74 05                	je     6c <HAL_I2C::Read16()+0x6c>
  67:	e8 00 00 00 00       	call   6c <HAL_I2C::Read16()+0x6c>
  6c:	c9                   	leave  
  6d:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C14ReadRegister16Eh:

0000000000000000 <HAL_I2C::ReadRegister16(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  28:	88 45 f7             	mov    %al,-0x9(%rbp)
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <HAL_I2C::ReadRegister16(unsigned char)+0x37>
  37:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  3b:	be 01 00 00 00       	mov    $0x1,%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <HAL_I2C::ReadRegister16(unsigned char)+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	call   54 <HAL_I2C::ReadRegister16(unsigned char)+0x54>
  54:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  58:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  5f:	00 00 
  61:	74 05                	je     68 <HAL_I2C::ReadRegister16(unsigned char)+0x68>
  63:	e8 00 00 00 00       	call   68 <HAL_I2C::ReadRegister16(unsigned char)+0x68>
  68:	c9                   	leave  
  69:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 08          	sub    $0x8,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b6 00             	movzbl (%rax),%eax
  17:	0f b6 c0             	movzbl %al,%eax
  1a:	89 c7                	mov    %eax,%edi
  1c:	e8 00 00 00 00       	call   21 <HAL_I2C::Setup()+0x21>
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	8b 40 04             	mov    0x4(%rax),%eax
  28:	89 c7                	mov    %eax,%edi
  2a:	e8 00 00 00 00       	call   2f <HAL_I2C::Setup()+0x2f>
  2f:	90                   	nop
  30:	c9                   	leave  
  31:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZN6sensor7MCP9808C2Eh:

0000000000000000 <sensor::MCP9808::MCP9808(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  19:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  1d:	84 c0                	test   %al,%al
  1f:	74 0c                	je     2d <sensor::MCP9808::MCP9808(unsigned char)+0x2d>
  21:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  25:	0f b6 00             	movzbl (%rax),%eax
  28:	0f b6 c0             	movzbl %al,%eax
  2b:	eb 05                	jmp    32 <sensor::MCP9808::MCP9808(unsigned char)+0x32>
  2d:	b8 18 00 00 00       	mov    $0x18,%eax
  32:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  37:	89 c6                	mov    %eax,%esi
  39:	48 89 cf             	mov    %rcx,%rdi
  3c:	e8 00 00 00 00       	call   41 <sensor::MCP9808::MCP9808(unsigned char)+0x41>
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  45:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <sensor::MCP9808::MCP9808(unsigned char)+0x55>
  55:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  59:	88 42 08             	mov    %al,0x8(%rdx)
  5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  60:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  64:	84 c0                	test   %al,%al
  66:	74 1f                	je     87 <sensor::MCP9808::MCP9808(unsigned char)+0x87>
  68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6c:	be 06 00 00 00       	mov    $0x6,%esi
  71:	48 89 c7             	mov    %rax,%rdi
  74:	e8 00 00 00 00       	call   79 <sensor::MCP9808::MCP9808(unsigned char)+0x79>
  79:	66 83 f8 54          	cmp    $0x54,%ax
  7d:	0f 94 c2             	sete   %dl
  80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  84:	88 50 08             	mov    %dl,0x8(%rax)
  87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8b:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  8f:	84 c0                	test   %al,%al
  91:	74 1f                	je     b2 <sensor::MCP9808::MCP9808(unsigned char)+0xb2>
  93:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  97:	be 07 00 00 00       	mov    $0x7,%esi
  9c:	48 89 c7             	mov    %rax,%rdi
  9f:	e8 00 00 00 00       	call   a4 <sensor::MCP9808::MCP9808(unsigned char)+0xa4>
  a4:	66 3d 00 04          	cmp    $0x400,%ax
  a8:	0f 94 c2             	sete   %dl
  ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  af:	88 50 08             	mov    %dl,0x8(%rax)
  b2:	90                   	nop
  b3:	c9                   	leave  
  b4:	c3                   	ret    

Disassembly of section .text._ZN6sensor7MCP98083GetEv:

0000000000000000 <sensor::MCP9808::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	be 05 00 00 00       	mov    $0x5,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <sensor::MCP9808::Get()+0x21>
  21:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
  25:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  29:	25 ff 0f 00 00       	and    $0xfff,%eax
  2e:	66 0f ef c0          	pxor   %xmm0,%xmm0
  32:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  36:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  3b:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  40:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 48 <sensor::MCP9808::Get()+0x48>
  47:	00 
  48:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  4c:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  51:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  55:	25 00 10 00 00       	and    $0x1000,%eax
  5a:	85 c0                	test   %eax,%eax
  5c:	74 16                	je     74 <sensor::MCP9808::Get()+0x74>
  5e:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  63:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 6b <sensor::MCP9808::Get()+0x6b>
  6a:	00 
  6b:	f3 0f 5c c1          	subss  %xmm1,%xmm0
  6f:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  74:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  79:	c9                   	leave  
  7a:	c3                   	ret    

sc16is740.o:     file format elf64-x86-64


Disassembly of section .text.i2c_set_baudrate:

0000000000000000 <i2c_set_baudrate>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text.i2c_set_address:

0000000000000000 <i2c_set_address>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.i2c_write:

0000000000000000 <i2c_write>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text.i2c_read:

0000000000000000 <i2c_read>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	89 55 f0             	mov    %edx,-0x10(%rbp)
  11:	88 45 f4             	mov    %al,-0xc(%rbp)
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  1c:	88 10                	mov    %dl,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	8b 55 f0             	mov    -0x10(%rbp),%edx
  25:	89 50 04             	mov    %edx,0x4(%rax)
  28:	90                   	nop
  29:	5d                   	pop    %rbp
  2a:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C10GetAddressEv:

0000000000000000 <HAL_I2C::GetAddress()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 00             	movzbl (%rax),%eax
  13:	5d                   	pop    %rbp
  14:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 50 04             	mov    0x4(%rax),%edx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	0f b6 00             	movzbl (%rax),%eax
  1e:	0f b6 c0             	movzbl %al,%eax
  21:	89 d6                	mov    %edx,%esi
  23:	89 c7                	mov    %eax,%edi
  25:	e8 00 00 00 00       	call   2a <HAL_I2C::IsConnected()+0x2a>
  2a:	c9                   	leave  
  2b:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C13WriteRegisterEhh:

0000000000000000 <HAL_I2C::WriteRegister(unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	88 45 e0             	mov    %al,-0x20(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  2f:	88 45 f6             	mov    %al,-0xa(%rbp)
  32:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
  36:	88 45 f7             	mov    %al,-0x9(%rbp)
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	call   45 <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x45>
  45:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  49:	be 02 00 00 00       	mov    $0x2,%esi
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x56>
  56:	90                   	nop
  57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  62:	00 00 
  64:	74 05                	je     6b <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x6b>
  66:	e8 00 00 00 00       	call   6b <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x6b>
  6b:	c9                   	leave  
  6c:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C4ReadEv:

0000000000000000 <HAL_I2C::Read()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	call   2f <HAL_I2C::Read()+0x2f>
  2f:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  33:	be 01 00 00 00       	mov    $0x1,%esi
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	call   40 <HAL_I2C::Read()+0x40>
  40:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  44:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  48:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  4f:	00 00 
  51:	74 05                	je     58 <HAL_I2C::Read()+0x58>
  53:	e8 00 00 00 00       	call   58 <HAL_I2C::Read()+0x58>
  58:	c9                   	leave  
  59:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12ReadRegisterEh:

0000000000000000 <HAL_I2C::ReadRegister(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  28:	88 45 f7             	mov    %al,-0x9(%rbp)
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <HAL_I2C::ReadRegister(unsigned char)+0x37>
  37:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  3b:	be 01 00 00 00       	mov    $0x1,%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <HAL_I2C::ReadRegister(unsigned char)+0x48>
  48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	call   54 <HAL_I2C::ReadRegister(unsigned char)+0x54>
  54:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  58:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  5f:	00 00 
  61:	74 05                	je     68 <HAL_I2C::ReadRegister(unsigned char)+0x68>
  63:	e8 00 00 00 00       	call   68 <HAL_I2C::ReadRegister(unsigned char)+0x68>
  68:	c9                   	leave  
  69:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 08          	sub    $0x8,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b6 00             	movzbl (%rax),%eax
  17:	0f b6 c0             	movzbl %al,%eax
  1a:	89 c7                	mov    %eax,%edi
  1c:	e8 00 00 00 00       	call   21 <HAL_I2C::Setup()+0x21>
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	8b 40 04             	mov    0x4(%rax),%eax
  28:	89 c7                	mov    %eax,%edi
  2a:	e8 00 00 00 00       	call   2f <HAL_I2C::Setup()+0x2f>
  2f:	90                   	nop
  30:	c9                   	leave  
  31:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # f <Hardware::Get()+0xf>
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text._ZN9SC16IS740C2Ehj:

0000000000000000 <SC16IS740::SC16IS740(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	89 55 e0             	mov    %edx,-0x20(%rbp)
  15:	88 45 e4             	mov    %al,-0x1c(%rbp)
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	0f b6 4d e4          	movzbl -0x1c(%rbp),%ecx
  20:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  25:	89 ce                	mov    %ecx,%esi
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	call   2f <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x2f>
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	8b 55 e0             	mov    -0x20(%rbp),%edx
  36:	89 50 08             	mov    %edx,0x8(%rax)
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	call   4d <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x4d>
  4d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  51:	88 42 0c             	mov    %al,0xc(%rdx)
  54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  58:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  5c:	83 f0 01             	xor    $0x1,%eax
  5f:	84 c0                	test   %al,%al
  61:	74 49                	je     ac <SC16IS740::SC16IS740(unsigned char, unsigned int)+0xac>
  63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	call   6f <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x6f>
  6f:	0f b6 d0             	movzbl %al,%edx
  72:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 79 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x79>
  79:	41 89 d1             	mov    %edx,%r9d
  7c:	41 b8 29 00 00 00    	mov    $0x29,%r8d
  82:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 89 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x89>
  89:	48 89 d1             	mov    %rdx,%rcx
  8c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 93 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x93>
  93:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 9a <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x9a>
  9a:	48 89 c7             	mov    %rax,%rdi
  9d:	b8 00 00 00 00       	mov    $0x0,%eax
  a2:	e8 00 00 00 00       	call   a7 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0xa7>
  a7:	e9 9b 02 00 00       	jmp    347 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x347>
  ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b0:	b9 01 00 00 00       	mov    $0x1,%ecx
  b5:	ba 00 00 00 00       	mov    $0x0,%edx
  ba:	be 08 00 00 00       	mov    $0x8,%esi
  bf:	48 89 c7             	mov    %rax,%rdi
  c2:	e8 00 00 00 00       	call   c7 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0xc7>
  c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  cb:	be 00 c2 01 00       	mov    $0x1c200,%esi
  d0:	48 89 c7             	mov    %rax,%rdi
  d3:	e8 00 00 00 00       	call   d8 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0xd8>
  d8:	c6 45 fd 41          	movb   $0x41,-0x3(%rbp)
  dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e0:	ba 41 00 00 00       	mov    $0x41,%edx
  e5:	be 38 00 00 00       	mov    $0x38,%esi
  ea:	48 89 c7             	mov    %rax,%rdi
  ed:	e8 00 00 00 00       	call   f2 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0xf2>
  f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f6:	be 38 00 00 00       	mov    $0x38,%esi
  fb:	48 89 c7             	mov    %rax,%rdi
  fe:	e8 00 00 00 00       	call   103 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x103>
 103:	3c 41                	cmp    $0x41,%al
 105:	0f 95 c0             	setne  %al
 108:	84 c0                	test   %al,%al
 10a:	74 46                	je     152 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x152>
 10c:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 113 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x113>
 113:	4c 8d 0d 00 00 00 00 	lea    0x0(%rip),%r9        # 11a <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x11a>
 11a:	41 b8 34 00 00 00    	mov    $0x34,%r8d
 120:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 127 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x127>
 127:	48 89 d1             	mov    %rdx,%rcx
 12a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 131 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x131>
 131:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 138 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x138>
 138:	48 89 c7             	mov    %rax,%rdi
 13b:	b8 00 00 00 00       	mov    $0x0,%eax
 140:	e8 00 00 00 00       	call   145 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x145>
 145:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 149:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
 14d:	e9 f5 01 00 00       	jmp    347 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x347>
 152:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 156:	be 20 00 00 00       	mov    $0x20,%esi
 15b:	48 89 c7             	mov    %rax,%rdi
 15e:	e8 00 00 00 00       	call   163 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x163>
 163:	88 45 fe             	mov    %al,-0x2(%rbp)
 166:	80 4d fe 04          	orb    $0x4,-0x2(%rbp)
 16a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 16e:	0f b6 55 fe          	movzbl -0x2(%rbp),%edx
 172:	be 20 00 00 00       	mov    $0x20,%esi
 177:	48 89 c7             	mov    %rax,%rdi
 17a:	e8 00 00 00 00       	call   17f <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x17f>
 17f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 183:	be 10 00 00 00       	mov    $0x10,%esi
 188:	48 89 c7             	mov    %rax,%rdi
 18b:	e8 00 00 00 00       	call   190 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x190>
 190:	88 45 ff             	mov    %al,-0x1(%rbp)
 193:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 197:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
 19b:	83 ca 10             	or     $0x10,%edx
 19e:	0f b6 d2             	movzbl %dl,%edx
 1a1:	be 10 00 00 00       	mov    $0x10,%esi
 1a6:	48 89 c7             	mov    %rax,%rdi
 1a9:	e8 00 00 00 00       	call   1ae <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x1ae>
 1ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1b2:	ba 10 00 00 00       	mov    $0x10,%edx
 1b7:	be 38 00 00 00       	mov    $0x38,%esi
 1bc:	48 89 c7             	mov    %rax,%rdi
 1bf:	e8 00 00 00 00       	call   1c4 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x1c4>
 1c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1c8:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
 1cc:	be 10 00 00 00       	mov    $0x10,%esi
 1d1:	48 89 c7             	mov    %rax,%rdi
 1d4:	e8 00 00 00 00       	call   1d9 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x1d9>
 1d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1dd:	ba 06 00 00 00       	mov    $0x6,%edx
 1e2:	be 10 00 00 00       	mov    $0x10,%esi
 1e7:	48 89 c7             	mov    %rax,%rdi
 1ea:	e8 00 00 00 00       	call   1ef <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x1ef>
 1ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1f3:	ba 01 00 00 00       	mov    $0x1,%edx
 1f8:	be 10 00 00 00       	mov    $0x10,%esi
 1fd:	48 89 c7             	mov    %rax,%rdi
 200:	e8 00 00 00 00       	call   205 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x205>
 205:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 209:	ba 05 00 00 00       	mov    $0x5,%edx
 20e:	be 08 00 00 00       	mov    $0x8,%esi
 213:	48 89 c7             	mov    %rax,%rdi
 216:	e8 00 00 00 00       	call   21b <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x21b>
 21b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 21f:	be 38 00 00 00       	mov    $0x38,%esi
 224:	48 89 c7             	mov    %rax,%rdi
 227:	e8 00 00 00 00       	call   22c <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x22c>
 22c:	0f b6 d0             	movzbl %al,%edx
 22f:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 236 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x236>
 236:	41 89 d1             	mov    %edx,%r9d
 239:	41 b8 48 00 00 00    	mov    $0x48,%r8d
 23f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 246 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x246>
 246:	48 89 d1             	mov    %rdx,%rcx
 249:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 250 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x250>
 250:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 257 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x257>
 257:	48 89 c7             	mov    %rax,%rdi
 25a:	b8 00 00 00 00       	mov    $0x0,%eax
 25f:	e8 00 00 00 00       	call   264 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x264>
 264:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 268:	be 38 00 00 00       	mov    $0x38,%esi
 26d:	48 89 c7             	mov    %rax,%rdi
 270:	e8 00 00 00 00       	call   275 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x275>
 275:	0f b6 c0             	movzbl %al,%eax
 278:	89 c7                	mov    %eax,%edi
 27a:	e8 00 00 00 00       	call   27f <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x27f>
 27f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 283:	be 08 00 00 00       	mov    $0x8,%esi
 288:	48 89 c7             	mov    %rax,%rdi
 28b:	e8 00 00 00 00       	call   290 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x290>
 290:	0f b6 d0             	movzbl %al,%edx
 293:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 29a <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x29a>
 29a:	41 89 d1             	mov    %edx,%r9d
 29d:	41 b8 4b 00 00 00    	mov    $0x4b,%r8d
 2a3:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2aa <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x2aa>
 2aa:	48 89 d1             	mov    %rdx,%rcx
 2ad:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2b4 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x2b4>
 2b4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 2bb <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x2bb>
 2bb:	48 89 c7             	mov    %rax,%rdi
 2be:	b8 00 00 00 00       	mov    $0x0,%eax
 2c3:	e8 00 00 00 00       	call   2c8 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x2c8>
 2c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 2cc:	be 08 00 00 00       	mov    $0x8,%esi
 2d1:	48 89 c7             	mov    %rax,%rdi
 2d4:	e8 00 00 00 00       	call   2d9 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x2d9>
 2d9:	0f b6 c0             	movzbl %al,%eax
 2dc:	89 c7                	mov    %eax,%edi
 2de:	e8 00 00 00 00       	call   2e3 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x2e3>
 2e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 2e7:	be 10 00 00 00       	mov    $0x10,%esi
 2ec:	48 89 c7             	mov    %rax,%rdi
 2ef:	e8 00 00 00 00       	call   2f4 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x2f4>
 2f4:	0f b6 d0             	movzbl %al,%edx
 2f7:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 2fe <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x2fe>
 2fe:	41 89 d1             	mov    %edx,%r9d
 301:	41 b8 4e 00 00 00    	mov    $0x4e,%r8d
 307:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 30e <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x30e>
 30e:	48 89 d1             	mov    %rdx,%rcx
 311:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 318 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x318>
 318:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 31f <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x31f>
 31f:	48 89 c7             	mov    %rax,%rdi
 322:	b8 00 00 00 00       	mov    $0x0,%eax
 327:	e8 00 00 00 00       	call   32c <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x32c>
 32c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 330:	be 10 00 00 00       	mov    $0x10,%esi
 335:	48 89 c7             	mov    %rax,%rdi
 338:	e8 00 00 00 00       	call   33d <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x33d>
 33d:	0f b6 c0             	movzbl %al,%eax
 340:	89 c7                	mov    %eax,%edi
 342:	e8 00 00 00 00       	call   347 <SC16IS740::SC16IS740(unsigned char, unsigned int)+0x347>
 347:	c9                   	leave  
 348:	c3                   	ret    

Disassembly of section .text._ZN9SC16IS7409SetFormatEjNS_12SerialParityEj:

0000000000000000 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  14:	89 55 d0             	mov    %edx,-0x30(%rbp)
  17:	89 4d cc             	mov    %ecx,-0x34(%rbp)
  1a:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  1e:	83 7d d4 08          	cmpl   $0x8,-0x2c(%rbp)
  22:	74 2a                	je     4e <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x4e>
  24:	83 7d d4 08          	cmpl   $0x8,-0x2c(%rbp)
  28:	77 2a                	ja     54 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x54>
  2a:	83 7d d4 07          	cmpl   $0x7,-0x2c(%rbp)
  2e:	74 18                	je     48 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x48>
  30:	83 7d d4 07          	cmpl   $0x7,-0x2c(%rbp)
  34:	77 1e                	ja     54 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x54>
  36:	83 7d d4 05          	cmpl   $0x5,-0x2c(%rbp)
  3a:	74 1e                	je     5a <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x5a>
  3c:	83 7d d4 06          	cmpl   $0x6,-0x2c(%rbp)
  40:	75 12                	jne    54 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x54>
  42:	80 4d ef 01          	orb    $0x1,-0x11(%rbp)
  46:	eb 13                	jmp    5b <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x5b>
  48:	80 4d ef 02          	orb    $0x2,-0x11(%rbp)
  4c:	eb 0d                	jmp    5b <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x5b>
  4e:	80 4d ef 03          	orb    $0x3,-0x11(%rbp)
  52:	eb 07                	jmp    5b <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x5b>
  54:	80 4d ef 03          	orb    $0x3,-0x11(%rbp)
  58:	eb 01                	jmp    5b <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x5b>
  5a:	90                   	nop
  5b:	83 7d d0 04          	cmpl   $0x4,-0x30(%rbp)
  5f:	77 3d                	ja     9e <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x9e>
  61:	8b 45 d0             	mov    -0x30(%rbp),%eax
  64:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  6b:	00 
  6c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 73 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x73>
  73:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  76:	48 98                	cltq   
  78:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 7f <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x7f>
  7f:	48 01 d0             	add    %rdx,%rax
  82:	3e ff e0             	notrack jmp *%rax
  85:	80 4d ef 08          	orb    $0x8,-0x11(%rbp)
  89:	eb 13                	jmp    9e <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x9e>
  8b:	80 4d ef 18          	orb    $0x18,-0x11(%rbp)
  8f:	eb 0d                	jmp    9e <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x9e>
  91:	80 4d ef 28          	orb    $0x28,-0x11(%rbp)
  95:	eb 07                	jmp    9e <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x9e>
  97:	80 4d ef 38          	orb    $0x38,-0x11(%rbp)
  9b:	eb 01                	jmp    9e <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x9e>
  9d:	90                   	nop
  9e:	83 7d cc 01          	cmpl   $0x1,-0x34(%rbp)
  a2:	74 0c                	je     b0 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xb0>
  a4:	83 7d cc 02          	cmpl   $0x2,-0x34(%rbp)
  a8:	75 07                	jne    b1 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xb1>
  aa:	80 4d ef 04          	orb    $0x4,-0x11(%rbp)
  ae:	eb 01                	jmp    b1 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xb1>
  b0:	90                   	nop
  b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b5:	0f b6 55 ef          	movzbl -0x11(%rbp),%edx
  b9:	be 18 00 00 00       	mov    $0x18,%esi
  be:	48 89 c7             	mov    %rax,%rdi
  c1:	e8 00 00 00 00       	call   c6 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xc6>
  c6:	0f b6 5d ef          	movzbl -0x11(%rbp),%ebx
  ca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ce:	be 18 00 00 00       	mov    $0x18,%esi
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	call   db <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xdb>
  db:	0f b6 d0             	movzbl %al,%edx
  de:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # e5 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xe5>
  e5:	48 83 ec 08          	sub    $0x8,%rsp
  e9:	53                   	push   %rbx
  ea:	41 89 d1             	mov    %edx,%r9d
  ed:	41 b8 87 00 00 00    	mov    $0x87,%r8d
  f3:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # fa <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0xfa>
  fa:	48 89 d1             	mov    %rdx,%rcx
  fd:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 104 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x104>
 104:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10b <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x10b>
 10b:	48 89 c7             	mov    %rax,%rdi
 10e:	b8 00 00 00 00       	mov    $0x0,%eax
 113:	e8 00 00 00 00       	call   118 <SC16IS740::SetFormat(unsigned int, SC16IS740::SerialParity, unsigned int)+0x118>
 118:	48 83 c4 10          	add    $0x10,%rsp
 11c:	90                   	nop
 11d:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 121:	c9                   	leave  
 122:	c3                   	ret    

Disassembly of section .text._ZN9SC16IS7407SetBaudEj:

0000000000000000 <SC16IS740::SetBaud(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  18:	be 20 00 00 00       	mov    $0x20,%esi
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	call   25 <SC16IS740::SetBaud(unsigned int)+0x25>
  25:	0f b6 c0             	movzbl %al,%eax
  28:	25 80 00 00 00       	and    $0x80,%eax
  2d:	3d 80 00 00 00       	cmp    $0x80,%eax
  32:	0f 94 c0             	sete   %al
  35:	84 c0                	test   %al,%al
  37:	74 09                	je     42 <SC16IS740::SetBaud(unsigned int)+0x42>
  39:	c7 45 e8 04 00 00 00 	movl   $0x4,-0x18(%rbp)
  40:	eb 07                	jmp    49 <SC16IS740::SetBaud(unsigned int)+0x49>
  42:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
  49:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4d:	8b 40 08             	mov    0x8(%rax),%eax
  50:	ba 00 00 00 00       	mov    $0x0,%edx
  55:	f7 75 e8             	divl   -0x18(%rbp)
  58:	89 c1                	mov    %eax,%ecx
  5a:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  5d:	c1 e0 04             	shl    $0x4,%eax
  60:	89 c3                	mov    %eax,%ebx
  62:	89 c8                	mov    %ecx,%eax
  64:	ba 00 00 00 00       	mov    $0x0,%edx
  69:	f7 f3                	div    %ebx
  6b:	89 45 ec             	mov    %eax,-0x14(%rbp)
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	be 18 00 00 00       	mov    $0x18,%esi
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	call   7f <SC16IS740::SetBaud(unsigned int)+0x7f>
  7f:	88 45 e7             	mov    %al,-0x19(%rbp)
  82:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  86:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8a:	83 ca 80             	or     $0xffffff80,%edx
  8d:	0f b6 d2             	movzbl %dl,%edx
  90:	be 18 00 00 00       	mov    $0x18,%esi
  95:	48 89 c7             	mov    %rax,%rdi
  98:	e8 00 00 00 00       	call   9d <SC16IS740::SetBaud(unsigned int)+0x9d>
  9d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a1:	8b 55 ec             	mov    -0x14(%rbp),%edx
  a4:	0f b6 d2             	movzbl %dl,%edx
  a7:	be 00 00 00 00       	mov    $0x0,%esi
  ac:	48 89 c7             	mov    %rax,%rdi
  af:	e8 00 00 00 00       	call   b4 <SC16IS740::SetBaud(unsigned int)+0xb4>
  b4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b8:	8b 55 ec             	mov    -0x14(%rbp),%edx
  bb:	c1 ea 08             	shr    $0x8,%edx
  be:	0f b6 d2             	movzbl %dl,%edx
  c1:	be 08 00 00 00       	mov    $0x8,%esi
  c6:	48 89 c7             	mov    %rax,%rdi
  c9:	e8 00 00 00 00       	call   ce <SC16IS740::SetBaud(unsigned int)+0xce>
  ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d2:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  d6:	be 18 00 00 00       	mov    $0x18,%esi
  db:	48 89 c7             	mov    %rax,%rdi
  de:	e8 00 00 00 00       	call   e3 <SC16IS740::SetBaud(unsigned int)+0xe3>
  e3:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # ea <SC16IS740::SetBaud(unsigned int)+0xea>
  ea:	8b 55 e8             	mov    -0x18(%rbp),%edx
  ed:	41 89 d1             	mov    %edx,%r9d
  f0:	41 b8 9b 00 00 00    	mov    $0x9b,%r8d
  f6:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # fd <SC16IS740::SetBaud(unsigned int)+0xfd>
  fd:	48 89 d1             	mov    %rdx,%rcx
 100:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 107 <SC16IS740::SetBaud(unsigned int)+0x107>
 107:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10e <SC16IS740::SetBaud(unsigned int)+0x10e>
 10e:	48 89 c7             	mov    %rax,%rdi
 111:	b8 00 00 00 00       	mov    $0x0,%eax
 116:	e8 00 00 00 00       	call   11b <SC16IS740::SetBaud(unsigned int)+0x11b>
 11b:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 122 <SC16IS740::SetBaud(unsigned int)+0x122>
 122:	8b 55 ec             	mov    -0x14(%rbp),%edx
 125:	41 89 d1             	mov    %edx,%r9d
 128:	41 b8 9c 00 00 00    	mov    $0x9c,%r8d
 12e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 135 <SC16IS740::SetBaud(unsigned int)+0x135>
 135:	48 89 d1             	mov    %rdx,%rcx
 138:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13f <SC16IS740::SetBaud(unsigned int)+0x13f>
 13f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 146 <SC16IS740::SetBaud(unsigned int)+0x146>
 146:	48 89 c7             	mov    %rax,%rdi
 149:	b8 00 00 00 00       	mov    $0x0,%eax
 14e:	e8 00 00 00 00       	call   153 <SC16IS740::SetBaud(unsigned int)+0x153>
 153:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 157:	8b 50 08             	mov    0x8(%rax),%edx
 15a:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 161 <SC16IS740::SetBaud(unsigned int)+0x161>
 161:	41 89 d1             	mov    %edx,%r9d
 164:	41 b8 9d 00 00 00    	mov    $0x9d,%r8d
 16a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 171 <SC16IS740::SetBaud(unsigned int)+0x171>
 171:	48 89 d1             	mov    %rdx,%rcx
 174:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 17b <SC16IS740::SetBaud(unsigned int)+0x17b>
 17b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 182 <SC16IS740::SetBaud(unsigned int)+0x182>
 182:	48 89 c7             	mov    %rax,%rdi
 185:	b8 00 00 00 00       	mov    $0x0,%eax
 18a:	e8 00 00 00 00       	call   18f <SC16IS740::SetBaud(unsigned int)+0x18f>
 18f:	0f b6 5d e7          	movzbl -0x19(%rbp),%ebx
 193:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 197:	be 18 00 00 00       	mov    $0x18,%esi
 19c:	48 89 c7             	mov    %rax,%rdi
 19f:	e8 00 00 00 00       	call   1a4 <SC16IS740::SetBaud(unsigned int)+0x1a4>
 1a4:	0f b6 d0             	movzbl %al,%edx
 1a7:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1ae <SC16IS740::SetBaud(unsigned int)+0x1ae>
 1ae:	48 83 ec 08          	sub    $0x8,%rsp
 1b2:	53                   	push   %rbx
 1b3:	41 89 d1             	mov    %edx,%r9d
 1b6:	41 b8 9f 00 00 00    	mov    $0x9f,%r8d
 1bc:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1c3 <SC16IS740::SetBaud(unsigned int)+0x1c3>
 1c3:	48 89 d1             	mov    %rdx,%rcx
 1c6:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1cd <SC16IS740::SetBaud(unsigned int)+0x1cd>
 1cd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1d4 <SC16IS740::SetBaud(unsigned int)+0x1d4>
 1d4:	48 89 c7             	mov    %rax,%rdi
 1d7:	b8 00 00 00 00       	mov    $0x0,%eax
 1dc:	e8 00 00 00 00       	call   1e1 <SC16IS740::SetBaud(unsigned int)+0x1e1>
 1e1:	48 83 c4 10          	add    $0x10,%rsp
 1e5:	90                   	nop
 1e6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 1ea:	c9                   	leave  
 1eb:	c3                   	ret    

Disassembly of section .text._ZN9SC16IS74010WriteBytesEPKhj:

0000000000000000 <SC16IS740::WriteBytes(unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1b:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  1f:	83 f0 01             	xor    $0x1,%eax
  22:	84 c0                	test   %al,%al
  24:	75 5f                	jne    85 <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x85>
  26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2e:	eb 4d                	jmp    7d <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x7d>
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	be 40 00 00 00       	mov    $0x40,%esi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	call   41 <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x41>
  41:	0f b6 c0             	movzbl %al,%eax
  44:	89 45 f4             	mov    %eax,-0xc(%rbp)
  47:	eb 28                	jmp    71 <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x71>
  49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  51:	0f b6 12             	movzbl (%rdx),%edx
  54:	0f b6 d2             	movzbl %dl,%edx
  57:	be 00 00 00 00       	mov    $0x0,%esi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	call   64 <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x64>
  64:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  68:	83 6d f4 01          	subl   $0x1,-0xc(%rbp)
  6c:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  71:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  75:	74 06                	je     7d <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x7d>
  77:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  7b:	75 cc                	jne    49 <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x49>
  7d:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  81:	75 ad                	jne    30 <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x30>
  83:	eb 01                	jmp    86 <SC16IS740::WriteBytes(unsigned char const*, unsigned int)+0x86>
  85:	90                   	nop
  86:	c9                   	leave  
  87:	c3                   	ret    

Disassembly of section .text._ZN9SC16IS7409ReadBytesEPhRjj:

0000000000000000 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  19:	89 4d b4             	mov    %ecx,-0x4c(%rbp)
  1c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  20:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  24:	83 f0 01             	xor    $0x1,%eax
  27:	84 c0                	test   %al,%al
  29:	74 0f                	je     3a <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x3a>
  2b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  2f:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  35:	e9 bd 00 00 00       	jmp    f7 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0xf7>
  3a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  3e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  42:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  46:	8b 00                	mov    (%rax),%eax
  48:	89 45 dc             	mov    %eax,-0x24(%rbp)
  4b:	e9 8c 00 00 00       	jmp    dc <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0xdc>
  50:	e8 00 00 00 00       	call   55 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x55>
  55:	48 89 c7             	mov    %rax,%rdi
  58:	e8 00 00 00 00       	call   5d <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x5d>
  5d:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  60:	eb 23                	jmp    85 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x85>
  62:	e8 00 00 00 00       	call   67 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	call   6f <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x6f>
  6f:	2b 45 b4             	sub    -0x4c(%rbp),%eax
  72:	39 45 e4             	cmp    %eax,-0x1c(%rbp)
  75:	0f 92 c0             	setb   %al
  78:	84 c0                	test   %al,%al
  7a:	74 09                	je     85 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x85>
  7c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  83:	eb 22                	jmp    a7 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0xa7>
  85:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  89:	be 48 00 00 00       	mov    $0x48,%esi
  8e:	48 89 c7             	mov    %rax,%rdi
  91:	e8 00 00 00 00       	call   96 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x96>
  96:	0f b6 c0             	movzbl %al,%eax
  99:	89 45 e0             	mov    %eax,-0x20(%rbp)
  9c:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  a0:	0f 94 c0             	sete   %al
  a3:	84 c0                	test   %al,%al
  a5:	75 bb                	jne    62 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x62>
  a7:	eb 27                	jmp    d0 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0xd0>
  a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  ad:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  b1:	48 8d 53 01          	lea    0x1(%rbx),%rdx
  b5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  b9:	be 00 00 00 00       	mov    $0x0,%esi
  be:	48 89 c7             	mov    %rax,%rdi
  c1:	e8 00 00 00 00       	call   c6 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0xc6>
  c6:	88 03                	mov    %al,(%rbx)
  c8:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  cc:	83 6d e0 01          	subl   $0x1,-0x20(%rbp)
  d0:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  d4:	74 06                	je     dc <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0xdc>
  d6:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  da:	75 cd                	jne    a9 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0xa9>
  dc:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  e0:	0f 85 6a ff ff ff    	jne    50 <SC16IS740::ReadBytes(unsigned char*, unsigned int&, unsigned int)+0x50>
  e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ea:	48 2b 45 c0          	sub    -0x40(%rbp),%rax
  ee:	0f b7 d0             	movzwl %ax,%edx
  f1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  f5:	89 10                	mov    %edx,(%rax)
  f7:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  fb:	c9                   	leave  
  fc:	c3                   	ret    

Disassembly of section .text._ZN9SC16IS7409FlushReadEj:

0000000000000000 <SC16IS740::FlushRead(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  17:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  1b:	83 f0 01             	xor    $0x1,%eax
  1e:	84 c0                	test   %al,%al
  20:	75 7f                	jne    a1 <SC16IS740::FlushRead(unsigned int)+0xa1>
  22:	c6 45 f7 01          	movb   $0x1,-0x9(%rbp)
  26:	eb 71                	jmp    99 <SC16IS740::FlushRead(unsigned int)+0x99>
  28:	e8 00 00 00 00       	call   2d <SC16IS740::FlushRead(unsigned int)+0x2d>
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	call   35 <SC16IS740::FlushRead(unsigned int)+0x35>
  35:	89 45 fc             	mov    %eax,-0x4(%rbp)
  38:	eb 20                	jmp    5a <SC16IS740::FlushRead(unsigned int)+0x5a>
  3a:	e8 00 00 00 00       	call   3f <SC16IS740::FlushRead(unsigned int)+0x3f>
  3f:	48 89 c7             	mov    %rax,%rdi
  42:	e8 00 00 00 00       	call   47 <SC16IS740::FlushRead(unsigned int)+0x47>
  47:	2b 45 e4             	sub    -0x1c(%rbp),%eax
  4a:	39 45 fc             	cmp    %eax,-0x4(%rbp)
  4d:	0f 92 c0             	setb   %al
  50:	84 c0                	test   %al,%al
  52:	74 06                	je     5a <SC16IS740::FlushRead(unsigned int)+0x5a>
  54:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  58:	eb 22                	jmp    7c <SC16IS740::FlushRead(unsigned int)+0x7c>
  5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5e:	be 48 00 00 00       	mov    $0x48,%esi
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	call   6b <SC16IS740::FlushRead(unsigned int)+0x6b>
  6b:	0f b6 c0             	movzbl %al,%eax
  6e:	89 45 f8             	mov    %eax,-0x8(%rbp)
  71:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  75:	0f 94 c0             	sete   %al
  78:	84 c0                	test   %al,%al
  7a:	75 be                	jne    3a <SC16IS740::FlushRead(unsigned int)+0x3a>
  7c:	eb 15                	jmp    93 <SC16IS740::FlushRead(unsigned int)+0x93>
  7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  82:	be 00 00 00 00       	mov    $0x0,%esi
  87:	48 89 c7             	mov    %rax,%rdi
  8a:	e8 00 00 00 00       	call   8f <SC16IS740::FlushRead(unsigned int)+0x8f>
  8f:	83 6d f8 01          	subl   $0x1,-0x8(%rbp)
  93:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  97:	75 e5                	jne    7e <SC16IS740::FlushRead(unsigned int)+0x7e>
  99:	80 7d f7 00          	cmpb   $0x0,-0x9(%rbp)
  9d:	75 89                	jne    28 <SC16IS740::FlushRead(unsigned int)+0x28>
  9f:	eb 01                	jmp    a2 <SC16IS740::FlushRead(unsigned int)+0xa2>
  a1:	90                   	nop
  a2:	c9                   	leave  
  a3:	c3                   	ret    

si5351a.o:     file format elf64-x86-64


Disassembly of section .text.i2c_set_baudrate:

0000000000000000 <i2c_set_baudrate>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text.i2c_set_address:

0000000000000000 <i2c_set_address>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.i2c_write:

0000000000000000 <i2c_write>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text.i2c_read:

0000000000000000 <i2c_read>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	89 55 f0             	mov    %edx,-0x10(%rbp)
  11:	88 45 f4             	mov    %al,-0xc(%rbp)
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  1c:	88 10                	mov    %dl,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	8b 55 f0             	mov    -0x10(%rbp),%edx
  25:	89 50 04             	mov    %edx,0x4(%rax)
  28:	90                   	nop
  29:	5d                   	pop    %rbp
  2a:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 50 04             	mov    0x4(%rax),%edx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	0f b6 00             	movzbl (%rax),%eax
  1e:	0f b6 c0             	movzbl %al,%eax
  21:	89 d6                	mov    %edx,%esi
  23:	89 c7                	mov    %eax,%edi
  25:	e8 00 00 00 00       	call   2a <HAL_I2C::IsConnected()+0x2a>
  2a:	c9                   	leave  
  2b:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C13WriteRegisterEhh:

0000000000000000 <HAL_I2C::WriteRegister(unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	88 45 e0             	mov    %al,-0x20(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  2f:	88 45 f6             	mov    %al,-0xa(%rbp)
  32:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
  36:	88 45 f7             	mov    %al,-0x9(%rbp)
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	call   45 <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x45>
  45:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  49:	be 02 00 00 00       	mov    $0x2,%esi
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	call   56 <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x56>
  56:	90                   	nop
  57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  62:	00 00 
  64:	74 05                	je     6b <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x6b>
  66:	e8 00 00 00 00       	call   6b <HAL_I2C::WriteRegister(unsigned char, unsigned char)+0x6b>
  6b:	c9                   	leave  
  6c:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 08          	sub    $0x8,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b6 00             	movzbl (%rax),%eax
  17:	0f b6 c0             	movzbl %al,%eax
  1a:	89 c7                	mov    %eax,%edi
  1c:	e8 00 00 00 00       	call   21 <HAL_I2C::Setup()+0x21>
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	8b 40 04             	mov    0x4(%rax),%eax
  28:	89 c7                	mov    %eax,%edi
  2a:	e8 00 00 00 00       	call   2f <HAL_I2C::Setup()+0x2f>
  2f:	90                   	nop
  30:	c9                   	leave  
  31:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZN7SI5351AC2Eh:

0000000000000000 <SI5351A::SI5351A(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  19:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  1d:	84 c0                	test   %al,%al
  1f:	74 0c                	je     2d <SI5351A::SI5351A(unsigned char)+0x2d>
  21:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  25:	0f b6 00             	movzbl (%rax),%eax
  28:	0f b6 c0             	movzbl %al,%eax
  2b:	eb 05                	jmp    32 <SI5351A::SI5351A(unsigned char)+0x32>
  2d:	b8 60 00 00 00       	mov    $0x60,%eax
  32:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  37:	89 c6                	mov    %eax,%esi
  39:	48 89 cf             	mov    %rcx,%rdi
  3c:	e8 00 00 00 00       	call   41 <SI5351A::SI5351A(unsigned char)+0x41>
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  45:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  49:	b9 6f 00 00 00       	mov    $0x6f,%ecx
  4e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 55 <SI5351A::SI5351A(unsigned char)+0x55>
  55:	48 89 c2             	mov    %rax,%rdx
  58:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 5f <SI5351A::SI5351A(unsigned char)+0x5f>
  5f:	48 89 c6             	mov    %rax,%rsi
  62:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 69 <SI5351A::SI5351A(unsigned char)+0x69>
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	b8 00 00 00 00       	mov    $0x0,%eax
  71:	e8 00 00 00 00       	call   76 <SI5351A::SI5351A(unsigned char)+0x76>
  76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7a:	48 89 c7             	mov    %rax,%rdi
  7d:	e8 00 00 00 00       	call   82 <SI5351A::SI5351A(unsigned char)+0x82>
  82:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  86:	88 42 08             	mov    %al,0x8(%rdx)
  89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8d:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  91:	0f b6 d0             	movzbl %al,%edx
  94:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 9b <SI5351A::SI5351A(unsigned char)+0x9b>
  9b:	41 89 d1             	mov    %edx,%r9d
  9e:	41 b8 73 00 00 00    	mov    $0x73,%r8d
  a4:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # ab <SI5351A::SI5351A(unsigned char)+0xab>
  ab:	48 89 d1             	mov    %rdx,%rcx
  ae:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # b5 <SI5351A::SI5351A(unsigned char)+0xb5>
  b5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # bc <SI5351A::SI5351A(unsigned char)+0xbc>
  bc:	48 89 c7             	mov    %rax,%rdi
  bf:	b8 00 00 00 00       	mov    $0x0,%eax
  c4:	e8 00 00 00 00       	call   c9 <SI5351A::SI5351A(unsigned char)+0xc9>
  c9:	b9 74 00 00 00       	mov    $0x74,%ecx
  ce:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d5 <SI5351A::SI5351A(unsigned char)+0xd5>
  d5:	48 89 c2             	mov    %rax,%rdx
  d8:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # df <SI5351A::SI5351A(unsigned char)+0xdf>
  df:	48 89 c6             	mov    %rax,%rsi
  e2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # e9 <SI5351A::SI5351A(unsigned char)+0xe9>
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	b8 00 00 00 00       	mov    $0x0,%eax
  f1:	e8 00 00 00 00       	call   f6 <SI5351A::SI5351A(unsigned char)+0xf6>
  f6:	90                   	nop
  f7:	c9                   	leave  
  f8:	c3                   	ret    

Disassembly of section .text._ZN7SI5351A12ClockBuilderEv:

0000000000000000 <SI5351A::ClockBuilder()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	b9 78 00 00 00       	mov    $0x78,%ecx
  15:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c <SI5351A::ClockBuilder()+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26 <SI5351A::ClockBuilder()+0x26>
  26:	48 89 c6             	mov    %rax,%rsi
  29:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 30 <SI5351A::ClockBuilder()+0x30>
  30:	48 89 c7             	mov    %rax,%rdi
  33:	b8 00 00 00 00       	mov    $0x0,%eax
  38:	e8 00 00 00 00       	call   3d <SI5351A::ClockBuilder()+0x3d>
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  45:	84 c0                	test   %al,%al
  47:	75 28                	jne    71 <SI5351A::ClockBuilder()+0x71>
  49:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 50 <SI5351A::ClockBuilder()+0x50>
  50:	48 89 c1             	mov    %rax,%rcx
  53:	ba 79 00 00 00       	mov    $0x79,%edx
  58:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 5f <SI5351A::ClockBuilder()+0x5f>
  5f:	48 89 c6             	mov    %rax,%rsi
  62:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 69 <SI5351A::ClockBuilder()+0x69>
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	e8 00 00 00 00       	call   71 <SI5351A::ClockBuilder()+0x71>
  71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	call   7d <SI5351A::ClockBuilder()+0x7d>
  7d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  84:	eb 3c                	jmp    c2 <SI5351A::ClockBuilder()+0xc2>
  86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8d:	48 8d 0c 12          	lea    (%rdx,%rdx,1),%rcx
  91:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 98 <SI5351A::ClockBuilder()+0x98>
  98:	0f b6 14 11          	movzbl (%rcx,%rdx,1),%edx
  9c:	0f b6 d2             	movzbl %dl,%edx
  9f:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  a2:	48 8d 34 09          	lea    (%rcx,%rcx,1),%rsi
  a6:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ad <SI5351A::ClockBuilder()+0xad>
  ad:	0f b6 0c 0e          	movzbl (%rsi,%rcx,1),%ecx
  b1:	0f b6 c9             	movzbl %cl,%ecx
  b4:	89 ce                	mov    %ecx,%esi
  b6:	48 89 c7             	mov    %rax,%rdi
  b9:	e8 00 00 00 00       	call   be <SI5351A::ClockBuilder()+0xbe>
  be:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  c2:	83 7d fc 38          	cmpl   $0x38,-0x4(%rbp)
  c6:	76 be                	jbe    86 <SI5351A::ClockBuilder()+0x86>
  c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	call   d4 <SI5351A::ClockBuilder()+0xd4>
  d4:	b9 83 00 00 00       	mov    $0x83,%ecx
  d9:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # e0 <SI5351A::ClockBuilder()+0xe0>
  e0:	48 89 c2             	mov    %rax,%rdx
  e3:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ea <SI5351A::ClockBuilder()+0xea>
  ea:	48 89 c6             	mov    %rax,%rsi
  ed:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # f4 <SI5351A::ClockBuilder()+0xf4>
  f4:	48 89 c7             	mov    %rax,%rdi
  f7:	b8 00 00 00 00       	mov    $0x0,%eax
  fc:	e8 00 00 00 00       	call   101 <SI5351A::ClockBuilder()+0x101>
 101:	90                   	nop
 102:	c9                   	leave  
 103:	c3                   	ret    

Disassembly of section .text._ZN7SI5351A3PreEv:

0000000000000000 <SI5351A::Pre()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	ba ff 00 00 00       	mov    $0xff,%edx
  19:	be 03 00 00 00       	mov    $0x3,%esi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	call   26 <SI5351A::Pre()+0x26>
  26:	c7 45 fc 10 00 00 00 	movl   $0x10,-0x4(%rbp)
  2d:	eb 1d                	jmp    4c <SI5351A::Pre()+0x4c>
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	8b 55 fc             	mov    -0x4(%rbp),%edx
  36:	0f b6 ca             	movzbl %dl,%ecx
  39:	ba 80 00 00 00       	mov    $0x80,%edx
  3e:	89 ce                	mov    %ecx,%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <SI5351A::Pre()+0x48>
  48:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  4c:	83 7d fc 17          	cmpl   $0x17,-0x4(%rbp)
  50:	76 dd                	jbe    2f <SI5351A::Pre()+0x2f>
  52:	90                   	nop
  53:	90                   	nop
  54:	c9                   	leave  
  55:	c3                   	ret    

Disassembly of section .text._ZN7SI5351A4PostEv:

0000000000000000 <SI5351A::Post()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	ba ac 00 00 00       	mov    $0xac,%edx
  19:	be b1 00 00 00       	mov    $0xb1,%esi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	call   26 <SI5351A::Post()+0x26>
  26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2a:	ba 00 00 00 00       	mov    $0x0,%edx
  2f:	be 03 00 00 00       	mov    $0x3,%esi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	call   3c <SI5351A::Post()+0x3c>
  3c:	90                   	nop
  3d:	c9                   	leave  
  3e:	c3                   	ret    

si7021.o:     file format elf64-x86-64


Disassembly of section .text.udelay:

0000000000000000 <udelay>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	89 7d fc             	mov    %edi,-0x4(%rbp)
   b:	90                   	nop
   c:	5d                   	pop    %rbp
   d:	c3                   	ret    

Disassembly of section .text.i2c_set_baudrate:

0000000000000000 <i2c_set_baudrate>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text.i2c_set_address:

0000000000000000 <i2c_set_address>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.i2c_write:

0000000000000000 <i2c_write>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text.i2c_read:

0000000000000000 <i2c_read>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2CC2Ehj:

0000000000000000 <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	89 55 f0             	mov    %edx,-0x10(%rbp)
  11:	88 45 f4             	mov    %al,-0xc(%rbp)
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  1c:	88 10                	mov    %dl,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	8b 55 f0             	mov    -0x10(%rbp),%edx
  25:	89 50 04             	mov    %edx,0x4(%rax)
  28:	90                   	nop
  29:	5d                   	pop    %rbp
  2a:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C11IsConnectedEv:

0000000000000000 <HAL_I2C::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	8b 50 04             	mov    0x4(%rax),%edx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	0f b6 00             	movzbl (%rax),%eax
  1e:	0f b6 c0             	movzbl %al,%eax
  21:	89 d6                	mov    %edx,%esi
  23:	89 c7                	mov    %eax,%edi
  25:	e8 00 00 00 00       	call   2a <HAL_I2C::IsConnected()+0x2a>
  2a:	c9                   	leave  
  2b:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5WriteEc:

0000000000000000 <HAL_I2C::Write(char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <HAL_I2C::Write(char)+0x21>
  21:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  25:	be 01 00 00 00       	mov    $0x1,%esi
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <HAL_I2C::Write(char)+0x32>
  32:	90                   	nop
  33:	c9                   	leave  
  34:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C4ReadEPcj:

0000000000000000 <HAL_I2C::Read(char*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	89 55 ec             	mov    %edx,-0x14(%rbp)
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	call   23 <HAL_I2C::Read(char*, unsigned int)+0x23>
  23:	8b 55 ec             	mov    -0x14(%rbp),%edx
  26:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2a:	89 d6                	mov    %edx,%esi
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	call   34 <HAL_I2C::Read(char*, unsigned int)+0x34>
  34:	c9                   	leave  
  35:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C5SetupEv:

0000000000000000 <HAL_I2C::Setup()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 08          	sub    $0x8,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b6 00             	movzbl (%rax),%eax
  17:	0f b6 c0             	movzbl %al,%eax
  1a:	89 c7                	mov    %eax,%edi
  1c:	e8 00 00 00 00       	call   21 <HAL_I2C::Setup()+0x21>
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	8b 40 04             	mov    0x4(%rax),%eax
  28:	89 c7                	mov    %eax,%edi
  2a:	e8 00 00 00 00       	call   2f <HAL_I2C::Setup()+0x2f>
  2f:	90                   	nop
  30:	c9                   	leave  
  31:	c3                   	ret    

Disassembly of section .text._ZN7HAL_I2C12IsConnected_Ehj:

0000000000000000 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  11:	88 45 ec             	mov    %al,-0x14(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	0f b6 45 ec          	movzbl -0x14(%rbp),%eax
  27:	89 c7                	mov    %eax,%edi
  29:	e8 00 00 00 00       	call   2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x2e>
  2e:	8b 45 e8             	mov    -0x18(%rbp),%eax
  31:	89 c7                	mov    %eax,%edi
  33:	e8 00 00 00 00       	call   38 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x38>
  38:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%rbp)
  3c:	76 06                	jbe    44 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
  3e:	80 7d ec 37          	cmpb   $0x37,-0x14(%rbp)
  42:	76 0c                	jbe    50 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x50>
  44:	80 7d ec 4f          	cmpb   $0x4f,-0x14(%rbp)
  48:	76 1e                	jbe    68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  4a:	80 7d ec 5f          	cmpb   $0x5f,-0x14(%rbp)
  4e:	77 18                	ja     68 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x68>
  50:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x61>
  61:	84 c0                	test   %al,%al
  63:	0f 94 c0             	sete   %al
  66:	eb 14                	jmp    7c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x7c>
  68:	be 00 00 00 00       	mov    $0x0,%esi
  6d:	bf 00 00 00 00       	mov    $0x0,%edi
  72:	e8 00 00 00 00       	call   77 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x77>
  77:	84 c0                	test   %al,%al
  79:	0f 94 c0             	sete   %al
  7c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  87:	00 00 
  89:	74 05                	je     90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  8b:	e8 00 00 00 00       	call   90 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x90>
  90:	c9                   	leave  
  91:	c3                   	ret    

Disassembly of section .text._ZN6sensor6SI7021C2Eh:

0000000000000000 <sensor::SI7021::SI7021(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  19:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  1d:	84 c0                	test   %al,%al
  1f:	74 0c                	je     2d <sensor::SI7021::SI7021(unsigned char)+0x2d>
  21:	48 8d 45 f4          	lea    -0xc(%rbp),%rax
  25:	0f b6 00             	movzbl (%rax),%eax
  28:	0f b6 c0             	movzbl %al,%eax
  2b:	eb 05                	jmp    32 <sensor::SI7021::SI7021(unsigned char)+0x32>
  2d:	b8 40 00 00 00       	mov    $0x40,%eax
  32:	ba 80 1a 06 00       	mov    $0x61a80,%edx
  37:	89 c6                	mov    %eax,%esi
  39:	48 89 cf             	mov    %rcx,%rdi
  3c:	e8 00 00 00 00       	call   41 <sensor::SI7021::SI7021(unsigned char)+0x41>
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  45:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <sensor::SI7021::SI7021(unsigned char)+0x55>
  55:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  59:	88 42 08             	mov    %al,0x8(%rdx)
  5c:	90                   	nop
  5d:	c9                   	leave  
  5e:	c3                   	ret    

Disassembly of section .text._ZN6sensor6SI702114GetTemperatureEv:

0000000000000000 <sensor::SI7021::GetTemperature()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	be f3 00 00 00       	mov    $0xf3,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <sensor::SI7021::GetTemperature()+0x21>
  21:	0f b7 c0             	movzwl %ax,%eax
  24:	66 0f ef c0          	pxor   %xmm0,%xmm0
  28:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  2c:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 34 <sensor::SI7021::GetTemperature()+0x34>
  33:	00 
  34:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  38:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  3d:	f3 0f 10 4d fc       	movss  -0x4(%rbp),%xmm1
  42:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 4a <sensor::SI7021::GetTemperature()+0x4a>
  49:	00 
  4a:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  4e:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 56 <sensor::SI7021::GetTemperature()+0x56>
  55:	00 
  56:	f3 0f 5c c1          	subss  %xmm1,%xmm0
  5a:	c9                   	leave  
  5b:	c3                   	ret    

Disassembly of section .text._ZN6sensor6SI702111GetHumidityEv:

0000000000000000 <sensor::SI7021::GetHumidity()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	be f5 00 00 00       	mov    $0xf5,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <sensor::SI7021::GetHumidity()+0x21>
  21:	0f b7 c0             	movzwl %ax,%eax
  24:	66 0f ef c0          	pxor   %xmm0,%xmm0
  28:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  2c:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 34 <sensor::SI7021::GetHumidity()+0x34>
  33:	00 
  34:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  38:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  3d:	f3 0f 10 4d fc       	movss  -0x4(%rbp),%xmm1
  42:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 4a <sensor::SI7021::GetHumidity()+0x4a>
  49:	00 
  4a:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  4e:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 56 <sensor::SI7021::GetHumidity()+0x56>
  55:	00 
  56:	f3 0f 5c c1          	subss  %xmm1,%xmm0
  5a:	c9                   	leave  
  5b:	c3                   	ret    

Disassembly of section .text._ZN6sensor6SI70217ReadRawEh:

0000000000000000 <sensor::SI7021::ReadRaw(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 d4             	mov    %al,-0x2c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
  2c:	0f be d2             	movsbl %dl,%edx
  2f:	89 d6                	mov    %edx,%esi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	call   39 <sensor::SI7021::ReadRaw(unsigned char)+0x39>
  39:	66 c7 45 f5 00 00    	movw   $0x0,-0xb(%rbp)
  3f:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  43:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  4a:	eb 35                	jmp    81 <sensor::SI7021::ReadRaw(unsigned char)+0x81>
  4c:	bf 10 27 00 00       	mov    $0x2710,%edi
  51:	e8 00 00 00 00       	call   56 <sensor::SI7021::ReadRaw(unsigned char)+0x56>
  56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5a:	48 8d 4d f5          	lea    -0xb(%rbp),%rcx
  5e:	ba 03 00 00 00       	mov    $0x3,%edx
  63:	48 89 ce             	mov    %rcx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	call   6e <sensor::SI7021::ReadRaw(unsigned char)+0x6e>
  6e:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  72:	0f be c0             	movsbl %al,%eax
  75:	83 e0 03             	and    $0x3,%eax
  78:	83 f8 02             	cmp    $0x2,%eax
  7b:	74 0c                	je     89 <sensor::SI7021::ReadRaw(unsigned char)+0x89>
  7d:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
  81:	83 7d f0 07          	cmpl   $0x7,-0x10(%rbp)
  85:	76 c5                	jbe    4c <sensor::SI7021::ReadRaw(unsigned char)+0x4c>
  87:	eb 01                	jmp    8a <sensor::SI7021::ReadRaw(unsigned char)+0x8a>
  89:	90                   	nop
  8a:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
  8e:	0f be c0             	movsbl %al,%eax
  91:	c1 e0 08             	shl    $0x8,%eax
  94:	89 c2                	mov    %eax,%edx
  96:	0f b6 45 f6          	movzbl -0xa(%rbp),%eax
  9a:	66 98                	cbtw   
  9c:	09 d0                	or     %edx,%eax
  9e:	66 89 45 ee          	mov    %ax,-0x12(%rbp)
  a2:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  a6:	83 e0 fc             	and    $0xfffffffc,%eax
  a9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  ad:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  b4:	00 00 
  b6:	74 05                	je     bd <sensor::SI7021::ReadRaw(unsigned char)+0xbd>
  b8:	e8 00 00 00 00       	call   bd <sensor::SI7021::ReadRaw(unsigned char)+0xbd>
  bd:	c9                   	leave  
  be:	c3                   	ret    
