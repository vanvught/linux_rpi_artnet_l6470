In archive lib/libl6470dmx.a:

l6470dmxmode6.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <L6470DmxMode6::Stop()>:
   0:	e12fff1e 	bx	lr

00000004 <L6470DmxMode6::Data(unsigned char const*)>:
   4:	e12fff1e 	bx	lr

00000008 <L6470DmxMode6::~L6470DmxMode6()>:
   8:	e92d4010 	push	{r4, lr}
   c:	e1a04000 	mov	r4, r0
  10:	e59f300c 	ldr	r3, [pc, #12]	; 24 <L6470DmxMode6::~L6470DmxMode6()+0x1c>
  14:	e5803000 	str	r3, [r0]
  18:	ebfffffe 	bl	0 <L6470DmxMode::~L6470DmxMode()>
  1c:	e1a00004 	mov	r0, r4
  20:	e8bd8010 	pop	{r4, pc}
  24:	00000008 	andeq	r0, r0, r8

00000028 <L6470DmxMode6::~L6470DmxMode6()>:
  28:	e92d4010 	push	{r4, lr}
  2c:	e1a04000 	mov	r4, r0
  30:	e59f3014 	ldr	r3, [pc, #20]	; 4c <L6470DmxMode6::~L6470DmxMode6()+0x24>
  34:	e5803000 	str	r3, [r0]
  38:	ebfffffe 	bl	0 <L6470DmxMode::~L6470DmxMode()>
  3c:	e1a00004 	mov	r0, r4
  40:	ebfffffe 	bl	0 <operator delete(void*)>
  44:	e1a00004 	mov	r0, r4
  48:	e8bd8010 	pop	{r4, pc}
  4c:	00000008 	andeq	r0, r0, r8

00000050 <L6470DmxMode6::L6470DmxMode6(L6470*, MotorParams*, ModeParams*)>:
  50:	e59f2008 	ldr	r2, [pc, #8]	; 60 <L6470DmxMode6::L6470DmxMode6(L6470*, MotorParams*, ModeParams*)+0x10>
  54:	e5801004 	str	r1, [r0, #4]
  58:	e5802000 	str	r2, [r0]
  5c:	e12fff1e 	bx	lr
  60:	00000008 	andeq	r0, r0, r8

Disassembly of section .rodata:

00000000 <vtable for L6470DmxMode6>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <L6470DmxMode6::L6470DmxMode6(L6470*, MotorParams*, ModeParams*)+0x168d7dc>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <L6470DmxMode6::L6470DmxMode6(L6470*, MotorParams*, ModeParams*)+0x423d4>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


l6470dmxmodesprint.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <L6470DmxModes::Print()>:
   0:	e1a01000 	mov	r1, r0
   4:	e59f000c 	ldr	r0, [pc, #12]	; 18 <L6470DmxModes::Print()+0x18>
   8:	e1d130bc 	ldrh	r3, [r1, #12]
   c:	e1d120b4 	ldrh	r2, [r1, #4]
  10:	e5d11002 	ldrb	r1, [r1, #2]
  14:	eafffffe 	b	0 <printf>
  18:	00000000 	andeq	r0, r0, r0

Disassembly of section .rodata.str1.4:

00000000 <.rodata.str1.4>:
   0:	584d4420 	stmdapl	sp, {r5, sl, lr}^
   4:	6f4d203a 	svcvs	0x004d203a
   8:	253d6564 	ldrcs	r6, [sp, #-1380]!	; 0xfffffa9c
   c:	53202c64 			; <UNDEFINED> instruction: 0x53202c64
  10:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  14:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
  18:	3d737365 	ldclcc	3, cr7, [r3, #-404]!	; 0xfffffe6c
  1c:	202c6425 	eorcs	r6, ip, r5, lsr #8
  20:	746f6f46 	strbtvc	r6, [pc], #-3910	; 28 <.rodata.str1.4+0x28>
  24:	6e697250 	mcrvs	2, 3, r7, cr9, cr0, {2}
  28:	64253d74 	strtvs	r3, [r5], #-3444	; 0xfffff28c
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <L6470DmxModes::Print()+0x168d82c>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <L6470DmxModes::Print()+0x42424>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


l6470dmxmodes.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e3a0c000 	mov	ip, #0
   8:	e3a0e007 	mov	lr, #7
   c:	e1a04000 	mov	r4, r0
  10:	e1a05001 	mov	r5, r1
  14:	e1a06003 	mov	r6, r3
  18:	e5c0e002 	strb	lr, [r0, #2]
  1c:	e1c0c0b0 	strh	ip, [r0]
  20:	e580c008 	str	ip, [r0, #8]
  24:	e1c0c0bc 	strh	ip, [r0, #12]
  28:	e1c020b4 	strh	r2, [r0, #4]
  2c:	e3510006 	cmp	r1, #6
  30:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
  34:	ea000010 	b	7c <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x7c>
  38:	00000188 	andeq	r0, r0, r8, lsl #3
  3c:	000001ac 	andeq	r0, r0, ip, lsr #3
  40:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  44:	000001f4 	strdeq	r0, [r0], -r4
  48:	0000021c 	andeq	r0, r0, ip, lsl r2
  4c:	00000244 	andeq	r0, r0, r4, asr #4
  50:	00000084 	andeq	r0, r0, r4, lsl #1
  54:	e3a03000 	mov	r3, #0
  58:	e3a0c000 	mov	ip, #0
  5c:	e2433001 	sub	r3, r3, #1
  60:	e0802003 	add	r2, r0, r3
  64:	e1a03002 	mov	r3, r2
  68:	e2833002 	add	r3, r3, #2
  6c:	e0433000 	sub	r3, r3, r0
  70:	e1510003 	cmp	r1, r3
  74:	e5e2c001 	strb	ip, [r2, #1]!
  78:	cafffff9 	bgt	64 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x64>
  7c:	e1a00004 	mov	r0, r4
  80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  84:	e3a00008 	mov	r0, #8
  88:	ebfffffe 	bl	0 <operator new(unsigned int)>
  8c:	e1cd21d8 	ldrd	r2, [sp, #24]
  90:	e1a01006 	mov	r1, r6
  94:	e1a07000 	mov	r7, r0
  98:	ebfffffe 	bl	0 <L6470DmxMode6::L6470DmxMode6(L6470*, MotorParams*, ModeParams*)>
  9c:	e3a00000 	mov	r0, #0
  a0:	e5847008 	str	r7, [r4, #8]
  a4:	e1c400bc 	strh	r0, [r4, #12]
  a8:	e5963004 	ldr	r3, [r6, #4]
  ac:	e5c45002 	strb	r5, [r4, #2]
  b0:	e5c43001 	strb	r3, [r4, #1]
  b4:	ebfffffe 	bl	0 <operator new[](unsigned int)>
  b8:	e1d410bc 	ldrh	r1, [r4, #12]
  bc:	e5840010 	str	r0, [r4, #16]
  c0:	e3510000 	cmp	r1, #0
  c4:	0affffec 	beq	7c <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x7c>
  c8:	e3510020 	cmp	r1, #32
  cc:	9affffe0 	bls	54 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x54>
  d0:	e3e05007 	mvn	r5, #7
  d4:	e3a0c000 	mov	ip, #0
  d8:	e2413021 	sub	r3, r1, #33	; 0x21
  dc:	e3c3301f 	bic	r3, r3, #31
  e0:	e2833048 	add	r3, r3, #72	; 0x48
  e4:	e2802028 	add	r2, r0, #40	; 0x28
  e8:	e083e000 	add	lr, r3, r0
  ec:	e0455000 	sub	r5, r5, r0
  f0:	e542c028 	strb	ip, [r2, #-40]	; 0xffffffd8
  f4:	e542c027 	strb	ip, [r2, #-39]	; 0xffffffd9
  f8:	e542c026 	strb	ip, [r2, #-38]	; 0xffffffda
  fc:	e542c025 	strb	ip, [r2, #-37]	; 0xffffffdb
 100:	e542c024 	strb	ip, [r2, #-36]	; 0xffffffdc
 104:	e542c023 	strb	ip, [r2, #-35]	; 0xffffffdd
 108:	e542c022 	strb	ip, [r2, #-34]	; 0xffffffde
 10c:	e542c021 	strb	ip, [r2, #-33]	; 0xffffffdf
 110:	e542c020 	strb	ip, [r2, #-32]	; 0xffffffe0
 114:	e542c01f 	strb	ip, [r2, #-31]	; 0xffffffe1
 118:	e542c01e 	strb	ip, [r2, #-30]	; 0xffffffe2
 11c:	e542c01d 	strb	ip, [r2, #-29]	; 0xffffffe3
 120:	e542c01c 	strb	ip, [r2, #-28]	; 0xffffffe4
 124:	e542c01b 	strb	ip, [r2, #-27]	; 0xffffffe5
 128:	e542c01a 	strb	ip, [r2, #-26]	; 0xffffffe6
 12c:	e542c019 	strb	ip, [r2, #-25]	; 0xffffffe7
 130:	e542c018 	strb	ip, [r2, #-24]	; 0xffffffe8
 134:	e542c017 	strb	ip, [r2, #-23]	; 0xffffffe9
 138:	e542c016 	strb	ip, [r2, #-22]	; 0xffffffea
 13c:	e542c015 	strb	ip, [r2, #-21]	; 0xffffffeb
 140:	e542c014 	strb	ip, [r2, #-20]	; 0xffffffec
 144:	e542c013 	strb	ip, [r2, #-19]	; 0xffffffed
 148:	e542c012 	strb	ip, [r2, #-18]	; 0xffffffee
 14c:	e542c011 	strb	ip, [r2, #-17]	; 0xffffffef
 150:	e542c010 	strb	ip, [r2, #-16]
 154:	e542c00f 	strb	ip, [r2, #-15]
 158:	e542c00e 	strb	ip, [r2, #-14]
 15c:	e542c00d 	strb	ip, [r2, #-13]
 160:	e542c00c 	strb	ip, [r2, #-12]
 164:	e542c00b 	strb	ip, [r2, #-11]
 168:	e542c00a 	strb	ip, [r2, #-10]
 16c:	f5d2f000 	pld	[r2]
 170:	e0853002 	add	r3, r5, r2
 174:	e542c009 	strb	ip, [r2, #-9]
 178:	e2822020 	add	r2, r2, #32
 17c:	e15e0002 	cmp	lr, r2
 180:	1affffda 	bne	f0 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0xf0>
 184:	eaffffb3 	b	58 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x58>
 188:	e3a00010 	mov	r0, #16
 18c:	ebfffffe 	bl	0 <operator new(unsigned int)>
 190:	e1a01006 	mov	r1, r6
 194:	e1a07000 	mov	r7, r0
 198:	ebfffffe 	bl	0 <L6470DmxMode0::L6470DmxMode0(L6470*)>
 19c:	e3a00001 	mov	r0, #1
 1a0:	e5847008 	str	r7, [r4, #8]
 1a4:	e1c400bc 	strh	r0, [r4, #12]
 1a8:	eaffffbe 	b	a8 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0xa8>
 1ac:	e3a00010 	mov	r0, #16
 1b0:	ebfffffe 	bl	0 <operator new(unsigned int)>
 1b4:	e1a01006 	mov	r1, r6
 1b8:	e1a07000 	mov	r7, r0
 1bc:	ebfffffe 	bl	0 <L6470DmxMode1::L6470DmxMode1(L6470*)>
 1c0:	e3a00002 	mov	r0, #2
 1c4:	e5847008 	str	r7, [r4, #8]
 1c8:	e1c400bc 	strh	r0, [r4, #12]
 1cc:	eaffffb5 	b	a8 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0xa8>
 1d0:	e3a00010 	mov	r0, #16
 1d4:	ebfffffe 	bl	0 <operator new(unsigned int)>
 1d8:	e1a01006 	mov	r1, r6
 1dc:	e1a07000 	mov	r7, r0
 1e0:	ebfffffe 	bl	0 <L6470DmxMode2::L6470DmxMode2(L6470*)>
 1e4:	e3a00001 	mov	r0, #1
 1e8:	e5847008 	str	r7, [r4, #8]
 1ec:	e1c400bc 	strh	r0, [r4, #12]
 1f0:	eaffffac 	b	a8 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0xa8>
 1f4:	e3a00010 	mov	r0, #16
 1f8:	ebfffffe 	bl	0 <operator new(unsigned int)>
 1fc:	e1a01006 	mov	r1, r6
 200:	e59d2018 	ldr	r2, [sp, #24]
 204:	e1a07000 	mov	r7, r0
 208:	ebfffffe 	bl	0 <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)>
 20c:	e3a00001 	mov	r0, #1
 210:	e5847008 	str	r7, [r4, #8]
 214:	e1c400bc 	strh	r0, [r4, #12]
 218:	eaffffa2 	b	a8 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0xa8>
 21c:	e3a00014 	mov	r0, #20
 220:	ebfffffe 	bl	0 <operator new(unsigned int)>
 224:	e1cd21d8 	ldrd	r2, [sp, #24]
 228:	e1a01006 	mov	r1, r6
 22c:	e1a07000 	mov	r7, r0
 230:	ebfffffe 	bl	0 <L6470DmxMode4::L6470DmxMode4(L6470*, MotorParams*, ModeParams*)>
 234:	e3a00001 	mov	r0, #1
 238:	e5847008 	str	r7, [r4, #8]
 23c:	e1c400bc 	strh	r0, [r4, #12]
 240:	eaffff98 	b	a8 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0xa8>
 244:	e3a00014 	mov	r0, #20
 248:	ebfffffe 	bl	0 <operator new(unsigned int)>
 24c:	e1cd21d8 	ldrd	r2, [sp, #24]
 250:	e1a01006 	mov	r1, r6
 254:	e1a07000 	mov	r7, r0
 258:	ebfffffe 	bl	0 <L6470DmxMode5::L6470DmxMode5(L6470*, MotorParams*, ModeParams*)>
 25c:	e3a00002 	mov	r0, #2
 260:	e5847008 	str	r7, [r4, #8]
 264:	e1c400bc 	strh	r0, [r4, #12]
 268:	eaffff8e 	b	a8 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0xa8>

0000026c <L6470DmxModes::~L6470DmxModes()>:
 26c:	e92d4010 	push	{r4, lr}
 270:	e1a04000 	mov	r4, r0
 274:	e5900010 	ldr	r0, [r0, #16]
 278:	e3500000 	cmp	r0, #0
 27c:	0a000000 	beq	284 <L6470DmxModes::~L6470DmxModes()+0x18>
 280:	ebfffffe 	bl	0 <operator delete[](void*)>
 284:	e3a03000 	mov	r3, #0
 288:	e5940008 	ldr	r0, [r4, #8]
 28c:	e5843010 	str	r3, [r4, #16]
 290:	e1500003 	cmp	r0, r3
 294:	0a000002 	beq	2a4 <L6470DmxModes::~L6470DmxModes()+0x38>
 298:	e5903000 	ldr	r3, [r0]
 29c:	e5933004 	ldr	r3, [r3, #4]
 2a0:	e12fff33 	blx	r3
 2a4:	e1a00004 	mov	r0, r4
 2a8:	e8bd8010 	pop	{r4, pc}

000002ac <L6470DmxModes::InitSwitch()>:
 2ac:	e5900008 	ldr	r0, [r0, #8]
 2b0:	e5903000 	ldr	r3, [r0]
 2b4:	e5933008 	ldr	r3, [r3, #8]
 2b8:	e12fff13 	bx	r3

000002bc <L6470DmxModes::InitPos()>:
 2bc:	e5900008 	ldr	r0, [r0, #8]
 2c0:	e5903000 	ldr	r3, [r0]
 2c4:	e593300c 	ldr	r3, [r3, #12]
 2c8:	e12fff13 	bx	r3

000002cc <L6470DmxModes::GetDmxFootPrintMode(unsigned int)>:
 2cc:	e3500006 	cmp	r0, #6
 2d0:	959f300c 	ldrls	r3, [pc, #12]	; 2e4 <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x18>
 2d4:	91a00080 	lslls	r0, r0, #1
 2d8:	919300b0 	ldrhls	r0, [r3, r0]
 2dc:	83a00000 	movhi	r0, #0
 2e0:	e12fff1e 	bx	lr
 2e4:	00000000 	andeq	r0, r0, r0

000002e8 <L6470DmxModes::Start()>:
 2e8:	e5d03000 	ldrb	r3, [r0]
 2ec:	e3530000 	cmp	r3, #0
 2f0:	112fff1e 	bxne	lr
 2f4:	e92d4010 	push	{r4, lr}
 2f8:	e1a04000 	mov	r4, r0
 2fc:	e5900008 	ldr	r0, [r0, #8]
 300:	e5903000 	ldr	r3, [r0]
 304:	e5933010 	ldr	r3, [r3, #16]
 308:	e12fff33 	blx	r3
 30c:	e3a03001 	mov	r3, #1
 310:	e5c43000 	strb	r3, [r4]
 314:	e8bd8010 	pop	{r4, pc}

00000318 <L6470DmxModes::Stop()>:
 318:	e5d03000 	ldrb	r3, [r0]
 31c:	e3530000 	cmp	r3, #0
 320:	012fff1e 	bxeq	lr
 324:	e92d4010 	push	{r4, lr}
 328:	e1a04000 	mov	r4, r0
 32c:	e5900008 	ldr	r0, [r0, #8]
 330:	e5903000 	ldr	r3, [r0]
 334:	e5933014 	ldr	r3, [r3, #20]
 338:	e12fff33 	blx	r3
 33c:	e3a03000 	mov	r3, #0
 340:	e5c43000 	strb	r3, [r4]
 344:	e8bd8010 	pop	{r4, pc}

00000348 <L6470DmxModes::HandleBusy()>:
 348:	e5900008 	ldr	r0, [r0, #8]
 34c:	e5903000 	ldr	r3, [r0]
 350:	e5933018 	ldr	r3, [r3, #24]
 354:	e12fff13 	bx	r3

00000358 <L6470DmxModes::BusyCheck()>:
 358:	e5900008 	ldr	r0, [r0, #8]
 35c:	e5903000 	ldr	r3, [r0]
 360:	e593301c 	ldr	r3, [r3, #28]
 364:	e12fff13 	bx	r3

00000368 <L6470DmxModes::IsDmxDataChanged(unsigned char const*)>:
 368:	e1d0c0b4 	ldrh	ip, [r0, #4]
 36c:	e1d020bc 	ldrh	r2, [r0, #12]
 370:	e5903010 	ldr	r3, [r0, #16]
 374:	e08c2002 	add	r2, ip, r2
 378:	e2422001 	sub	r2, r2, #1
 37c:	e6ff2072 	uxth	r2, r2
 380:	e3520c02 	cmp	r2, #512	; 0x200
 384:	23a02c02 	movcs	r2, #512	; 0x200
 388:	e15c0002 	cmp	ip, r2
 38c:	8a00000d 	bhi	3c8 <L6470DmxModes::IsDmxDataChanged(unsigned char const*)+0x60>
 390:	e3a00000 	mov	r0, #0
 394:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 398:	e042e00c 	sub	lr, r2, ip
 39c:	e2433001 	sub	r3, r3, #1
 3a0:	e2412001 	sub	r2, r1, #1
 3a4:	e6f1c07e 	uxtah	ip, r1, lr
 3a8:	e5f21001 	ldrb	r1, [r2, #1]!
 3ac:	e5f3e001 	ldrb	lr, [r3, #1]!
 3b0:	e15e0001 	cmp	lr, r1
 3b4:	13a00001 	movne	r0, #1
 3b8:	e152000c 	cmp	r2, ip
 3bc:	e5c31000 	strb	r1, [r3]
 3c0:	1afffff8 	bne	3a8 <L6470DmxModes::IsDmxDataChanged(unsigned char const*)+0x40>
 3c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
 3c8:	e3a00000 	mov	r0, #0
 3cc:	e12fff1e 	bx	lr

000003d0 <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)>:
 3d0:	e590c008 	ldr	ip, [r0, #8]
 3d4:	e35c0000 	cmp	ip, #0
 3d8:	0a00001d 	beq	454 <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)+0x84>
 3dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 3e0:	e1d0c0bc 	ldrh	ip, [r0, #12]
 3e4:	e1d0e0b4 	ldrh	lr, [r0, #4]
 3e8:	e08ec00c 	add	ip, lr, ip
 3ec:	e15c0002 	cmp	ip, r2
 3f0:	9a000001 	bls	3fc <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)+0x2c>
 3f4:	e3a00000 	mov	r0, #0
 3f8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
 3fc:	e24cc001 	sub	ip, ip, #1
 400:	e6ffc07c 	uxth	ip, ip
 404:	e35c0c02 	cmp	ip, #512	; 0x200
 408:	23a0cc02 	movcs	ip, #512	; 0x200
 40c:	e24e3001 	sub	r3, lr, #1
 410:	e15e000c 	cmp	lr, ip
 414:	e5902010 	ldr	r2, [r0, #16]
 418:	e0813003 	add	r3, r1, r3
 41c:	8afffff4 	bhi	3f4 <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)+0x24>
 420:	e3a00000 	mov	r0, #0
 424:	e04cc00e 	sub	ip, ip, lr
 428:	e2431001 	sub	r1, r3, #1
 42c:	e2422001 	sub	r2, r2, #1
 430:	e6f3307c 	uxtah	r3, r3, ip
 434:	e5f1c001 	ldrb	ip, [r1, #1]!
 438:	e5f2e001 	ldrb	lr, [r2, #1]!
 43c:	e15e000c 	cmp	lr, ip
 440:	13a00001 	movne	r0, #1
 444:	e1510003 	cmp	r1, r3
 448:	e5c2c000 	strb	ip, [r2]
 44c:	1afffff8 	bne	434 <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)+0x64>
 450:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
 454:	e1a0000c 	mov	r0, ip
 458:	e12fff1e 	bx	lr

0000045c <L6470DmxModes::DmxData(unsigned char const*, unsigned int)>:
 45c:	e1d0c0b4 	ldrh	ip, [r0, #4]
 460:	e1d030bc 	ldrh	r3, [r0, #12]
 464:	e083300c 	add	r3, r3, ip
 468:	e1530002 	cmp	r3, r2
 46c:	812fff1e 	bxhi	lr
 470:	e92d4010 	push	{r4, lr}
 474:	e1a04000 	mov	r4, r0
 478:	e5900008 	ldr	r0, [r0, #8]
 47c:	e24cc001 	sub	ip, ip, #1
 480:	e5903000 	ldr	r3, [r0]
 484:	e081100c 	add	r1, r1, ip
 488:	e5933020 	ldr	r3, [r3, #32]
 48c:	e12fff33 	blx	r3
 490:	e3a03001 	mov	r3, #1
 494:	e5c43000 	strb	r3, [r4]
 498:	e8bd8010 	pop	{r4, pc}

Disassembly of section .rodata:

00000000 <CSWTCH.15>:
   0:	00020001 	andeq	r0, r2, r1
   4:	00010001 	andeq	r0, r1, r1
   8:	00020001 	andeq	r0, r2, r1
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <L6470DmxModes::DmxData(unsigned char const*, unsigned int)+0x168d3d0>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <L6470DmxModes::DmxData(unsigned char const*, unsigned int)+0x41fc8>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


modeparamsconst.o:     file format elf32-littlearm


Disassembly of section .rodata:

00000000 <ModeParamsConst::SWITCH>:
   0:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
   4:	6977735f 	ldmdbvs	r7!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
   8:	00686374 	rsbeq	r6, r8, r4, ror r3

0000000c <ModeParamsConst::SWITCH_SPS>:
   c:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
  10:	6977735f 	ldmdbvs	r7!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
  14:	5f686374 	svcpl	0x00686374
  18:	00737073 	rsbseq	r7, r3, r3, ror r0

0000001c <ModeParamsConst::SWITCH_DIR>:
  1c:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
  20:	6977735f 	ldmdbvs	r7!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
  24:	5f686374 	svcpl	0x00686374
  28:	00726964 	rsbseq	r6, r2, r4, ror #18

0000002c <ModeParamsConst::SWITCH_ACT>:
  2c:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
  30:	6977735f 	ldmdbvs	r7!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
  34:	5f686374 	svcpl	0x00686374
  38:	00746361 	rsbseq	r6, r4, r1, ror #6

0000003c <ModeParamsConst::MAX_STEPS>:
  3c:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
  40:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
  44:	6574735f 	ldrbvs	r7, [r4, #-863]!	; 0xfffffca1
  48:	00007370 	andeq	r7, r0, r0, ror r3

0000004c <ModeParamsConst::DMX_MODE>:
  4c:	5f786d64 	svcpl	0x00786d64
  50:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003b41 	andeq	r3, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000031 	andeq	r0, r0, r1, lsr r0
  10:	4d524105 	ldfmie	f4, [r2, #-20]	; 0xffffffec
  14:	36373131 			; <UNDEFINED> instruction: 0x36373131
  18:	2d465a4a 	vstrcs	s11, [r6, #-296]	; 0xfffffed8
  1c:	07060053 	smlsdeq	r6, r3, r0, r0
  20:	01090108 	tsteq	r9, r8, lsl #2
  24:	0412020a 	ldreq	r0, [r2], #-522	; 0xfffffdf6
  28:	01150114 	tsteq	r5, r4, lsl r1
  2c:	01180317 	tsteq	r8, r7, lsl r3
  30:	011a0119 	tsteq	sl, r9, lsl r1
  34:	021e011c 	andseq	r0, lr, #28, 2
  38:	01440122 	cmpeq	r4, r2, lsr #2

sparkfundmx.o:     file format elf32-littlearm


Disassembly of section .group:

00000000 <.group>:
   0:	00000001 	andeq	r0, r0, r1
   4:	00000008 	andeq	r0, r0, r8

Disassembly of section .group:

00000000 <.group>:
   0:	00000001 	andeq	r0, r0, r1
   4:	00000009 	andeq	r0, r0, r9

Disassembly of section .group:

00000000 <.group>:
   0:	00000001 	andeq	r0, r0, r1
   4:	0000000a 	andeq	r0, r0, sl

Disassembly of section .text:

00000000 <SparkFunDmx::~SparkFunDmx()>:
   0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e3a06000 	mov	r6, #0
   c:	e1a08000 	mov	r8, r0
  10:	e59f3098 	ldr	r3, [pc, #152]	; b0 <SparkFunDmx::~SparkFunDmx()+0xb0>
  14:	e2807024 	add	r7, r0, #36	; 0x24
  18:	e4843004 	str	r3, [r4], #4
  1c:	e4940004 	ldr	r0, [r4], #4
  20:	e3500000 	cmp	r0, #0
  24:	0a000003 	beq	38 <SparkFunDmx::~SparkFunDmx()+0x38>
  28:	e5903000 	ldr	r3, [r0]
  2c:	e5933004 	ldr	r3, [r3, #4]
  30:	e12fff33 	blx	r3
  34:	e5046004 	str	r6, [r4, #-4]
  38:	e594001c 	ldr	r0, [r4, #28]
  3c:	e3500000 	cmp	r0, #0
  40:	0a000001 	beq	4c <SparkFunDmx::~SparkFunDmx()+0x4c>
  44:	ebfffffe 	bl	0 <operator delete(void*)>
  48:	e584601c 	str	r6, [r4, #28]
  4c:	e594503c 	ldr	r5, [r4, #60]	; 0x3c
  50:	e3550000 	cmp	r5, #0
  54:	0a000004 	beq	6c <SparkFunDmx::~SparkFunDmx()+0x6c>
  58:	e1a00005 	mov	r0, r5
  5c:	ebfffffe 	bl	0 <ModeParams::~ModeParams()>
  60:	e1a00005 	mov	r0, r5
  64:	ebfffffe 	bl	0 <operator delete(void*)>
  68:	e584603c 	str	r6, [r4, #60]	; 0x3c
  6c:	e594505c 	ldr	r5, [r4, #92]	; 0x5c
  70:	e3550000 	cmp	r5, #0
  74:	0a000004 	beq	8c <SparkFunDmx::~SparkFunDmx()+0x8c>
  78:	e1a00005 	mov	r0, r5
  7c:	ebfffffe 	bl	0 <L6470DmxModes::~L6470DmxModes()>
  80:	e1a00005 	mov	r0, r5
  84:	ebfffffe 	bl	0 <operator delete(void*)>
  88:	e584605c 	str	r6, [r4, #92]	; 0x5c
  8c:	e594007c 	ldr	r0, [r4, #124]	; 0x7c
  90:	e3500000 	cmp	r0, #0
  94:	0a000001 	beq	a0 <SparkFunDmx::~SparkFunDmx()+0xa0>
  98:	ebfffffe 	bl	0 <operator delete(void*)>
  9c:	e584607c 	str	r6, [r4, #124]	; 0x7c
  a0:	e1540007 	cmp	r4, r7
  a4:	1affffdc 	bne	1c <SparkFunDmx::~SparkFunDmx()+0x1c>
  a8:	e1a00008 	mov	r0, r8
  ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  b0:	00000008 	andeq	r0, r0, r8

000000b4 <SparkFunDmx::~SparkFunDmx()>:
  b4:	e92d4010 	push	{r4, lr}
  b8:	e1a04000 	mov	r4, r0
  bc:	ebfffffe 	bl	0 <SparkFunDmx::~SparkFunDmx()>
  c0:	e1a00004 	mov	r0, r4
  c4:	ebfffffe 	bl	0 <operator delete(void*)>
  c8:	e1a00004 	mov	r0, r4
  cc:	e8bd8010 	pop	{r4, pc}

000000d0 <SparkFunDmx::Start(unsigned int)>:
  d0:	e92d4070 	push	{r4, r5, r6, lr}
  d4:	e2804064 	add	r4, r0, #100	; 0x64
  d8:	e2805084 	add	r5, r0, #132	; 0x84
  dc:	e4940004 	ldr	r0, [r4], #4
  e0:	e3500000 	cmp	r0, #0
  e4:	0a000000 	beq	ec <SparkFunDmx::Start(unsigned int)+0x1c>
  e8:	ebfffffe 	bl	0 <L6470DmxModes::Start()>
  ec:	e1540005 	cmp	r4, r5
  f0:	1afffff9 	bne	dc <SparkFunDmx::Start(unsigned int)+0xc>
  f4:	e8bd8070 	pop	{r4, r5, r6, pc}

000000f8 <SparkFunDmx::Stop(unsigned int)>:
  f8:	e92d4070 	push	{r4, r5, r6, lr}
  fc:	e2804064 	add	r4, r0, #100	; 0x64
 100:	e2805084 	add	r5, r0, #132	; 0x84
 104:	e4940004 	ldr	r0, [r4], #4
 108:	e3500000 	cmp	r0, #0
 10c:	0a000000 	beq	114 <SparkFunDmx::Stop(unsigned int)+0x1c>
 110:	ebfffffe 	bl	0 <L6470DmxModes::Stop()>
 114:	e1540005 	cmp	r4, r5
 118:	1afffff9 	bne	104 <SparkFunDmx::Stop(unsigned int)+0xc>
 11c:	e8bd8070 	pop	{r4, r5, r6, pc}

00000120 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 120:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 124:	e24dd00c 	sub	sp, sp, #12
 128:	e1a0500d 	mov	r5, sp
 12c:	e2806064 	add	r6, r0, #100	; 0x64
 130:	e1a04005 	mov	r4, r5
 134:	e1a09000 	mov	r9, r0
 138:	e1a0a002 	mov	sl, r2
 13c:	e1a0b003 	mov	fp, r3
 140:	e1a07006 	mov	r7, r6
 144:	e28d8008 	add	r8, sp, #8
 148:	ea000002 	b	158 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x38>
 14c:	e2844001 	add	r4, r4, #1
 150:	e1540008 	cmp	r4, r8
 154:	0a00000e 	beq	194 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x74>
 158:	e4970004 	ldr	r0, [r7], #4
 15c:	e3500000 	cmp	r0, #0
 160:	05c40000 	strbeq	r0, [r4]
 164:	0afffff8 	beq	14c <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x2c>
 168:	e1a0200b 	mov	r2, fp
 16c:	e1a0100a 	mov	r1, sl
 170:	ebfffffe 	bl	0 <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)>
 174:	e3500000 	cmp	r0, #0
 178:	e5c40000 	strb	r0, [r4]
 17c:	0afffff2 	beq	14c <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x2c>
 180:	e5170004 	ldr	r0, [r7, #-4]
 184:	e2844001 	add	r4, r4, #1
 188:	ebfffffe 	bl	0 <L6470DmxModes::HandleBusy()>
 18c:	e1540008 	cmp	r4, r8
 190:	1afffff0 	bne	158 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x38>
 194:	e1a04006 	mov	r4, r6
 198:	e1a07005 	mov	r7, r5
 19c:	e2899084 	add	r9, r9, #132	; 0x84
 1a0:	ea000002 	b	1b0 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x90>
 1a4:	e2844004 	add	r4, r4, #4
 1a8:	e1540009 	cmp	r4, r9
 1ac:	0a000012 	beq	1fc <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xdc>
 1b0:	e4d73001 	ldrb	r3, [r7], #1
 1b4:	e3530000 	cmp	r3, #0
 1b8:	0afffff9 	beq	1a4 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x84>
 1bc:	e5940000 	ldr	r0, [r4]
 1c0:	ebfffffe 	bl	0 <L6470DmxModes::BusyCheck()>
 1c4:	e3500000 	cmp	r0, #0
 1c8:	0afffff5 	beq	1a4 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x84>
 1cc:	e5940000 	ldr	r0, [r4]
 1d0:	ebfffffe 	bl	0 <L6470DmxModes::BusyCheck()>
 1d4:	e3500000 	cmp	r0, #0
 1d8:	1afffff7 	bne	1bc <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x9c>
 1dc:	eafffff0 	b	1a4 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x84>
 1e0:	e5960000 	ldr	r0, [r6]
 1e4:	e1a0200b 	mov	r2, fp
 1e8:	e1a0100a 	mov	r1, sl
 1ec:	ebfffffe 	bl	0 <L6470DmxModes::DmxData(unsigned char const*, unsigned int)>
 1f0:	e1550008 	cmp	r5, r8
 1f4:	e2866004 	add	r6, r6, #4
 1f8:	0a000005 	beq	214 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf4>
 1fc:	e4d53001 	ldrb	r3, [r5], #1
 200:	e3530000 	cmp	r3, #0
 204:	1afffff5 	bne	1e0 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc0>
 208:	e1550008 	cmp	r5, r8
 20c:	e2866004 	add	r6, r6, #4
 210:	1afffff9 	bne	1fc <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xdc>
 214:	e28dd00c 	add	sp, sp, #12
 218:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000021c <SparkFunDmx::SetDmxStartAddress(unsigned short)>:
 21c:	e1d03bb6 	ldrh	r3, [r0, #182]	; 0xb6
 220:	e1530001 	cmp	r3, r1
 224:	0a000022 	beq	2b4 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x98>
 228:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 22c:	e1a05000 	mov	r5, r0
 230:	e1a06001 	mov	r6, r1
 234:	e3a08000 	mov	r8, #0
 238:	e2804064 	add	r4, r0, #100	; 0x64
 23c:	e2807084 	add	r7, r0, #132	; 0x84
 240:	e4943004 	ldr	r3, [r4], #4
 244:	e3530000 	cmp	r3, #0
 248:	0a00000c 	beq	280 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x64>
 24c:	e1d52bb6 	ldrh	r2, [r5, #182]	; 0xb6
 250:	e1d310b4 	ldrh	r1, [r3, #4]
 254:	e59500bc 	ldr	r0, [r5, #188]	; 0xbc
 258:	e0462002 	sub	r2, r6, r2
 25c:	e0822001 	add	r2, r2, r1
 260:	e6ff2072 	uxth	r2, r2
 264:	e3500000 	cmp	r0, #0
 268:	e1c320b4 	strh	r2, [r3, #4]
 26c:	0a000003 	beq	280 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x64>
 270:	e5903000 	ldr	r3, [r0]
 274:	e1a01008 	mov	r1, r8
 278:	e5933008 	ldr	r3, [r3, #8]
 27c:	e12fff33 	blx	r3
 280:	e1540007 	cmp	r4, r7
 284:	e2888001 	add	r8, r8, #1
 288:	1affffec 	bne	240 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x24>
 28c:	e59f3028 	ldr	r3, [pc, #40]	; 2bc <SparkFunDmx::SetDmxStartAddress(unsigned short)+0xa0>
 290:	e1c56bb6 	strh	r6, [r5, #182]	; 0xb6
 294:	e5930000 	ldr	r0, [r3]
 298:	e3500000 	cmp	r0, #0
 29c:	0a000002 	beq	2ac <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x90>
 2a0:	e5903000 	ldr	r3, [r0]
 2a4:	e5933008 	ldr	r3, [r3, #8]
 2a8:	e12fff33 	blx	r3
 2ac:	e3a00001 	mov	r0, #1
 2b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 2b4:	e3a00001 	mov	r0, #1
 2b8:	e12fff1e 	bx	lr
 2bc:	00000000 	andeq	r0, r0, r0

000002c0 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 2c0:	e1d03bb8 	ldrh	r3, [r0, #184]	; 0xb8
 2c4:	e1530001 	cmp	r3, r1
 2c8:	3a00001e 	bcc	348 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x88>
 2cc:	e1d0cbb6 	ldrh	ip, [r0, #182]	; 0xb6
 2d0:	e2803064 	add	r3, r0, #100	; 0x64
 2d4:	e081100c 	add	r1, r1, ip
 2d8:	e6ffc071 	uxth	ip, r1
 2dc:	e2800084 	add	r0, r0, #132	; 0x84
 2e0:	e4931004 	ldr	r1, [r3], #4
 2e4:	e3510000 	cmp	r1, #0
 2e8:	0a000014 	beq	340 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x80>
 2ec:	e92d4030 	push	{r4, r5, lr}
 2f0:	e593501c 	ldr	r5, [r3, #28]
 2f4:	e3550000 	cmp	r5, #0
 2f8:	0a000007 	beq	31c <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x5c>
 2fc:	e1d140b4 	ldrh	r4, [r1, #4]
 300:	e04ce004 	sub	lr, ip, r4
 304:	e15c0004 	cmp	ip, r4
 308:	e6bfe07e 	sxth	lr, lr
 30c:	3a000002 	bcc	31c <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x5c>
 310:	e1d110bc 	ldrh	r1, [r1, #12]
 314:	e15e0001 	cmp	lr, r1
 318:	ba00000c 	blt	350 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x90>
 31c:	e1500003 	cmp	r0, r3
 320:	0a000004 	beq	338 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x78>
 324:	e4931004 	ldr	r1, [r3], #4
 328:	e3510000 	cmp	r1, #0
 32c:	1affffef 	bne	2f0 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x30>
 330:	e1500003 	cmp	r0, r3
 334:	1afffffa 	bne	324 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x64>
 338:	e3a00000 	mov	r0, #0
 33c:	e8bd8030 	pop	{r4, r5, pc}
 340:	e1500003 	cmp	r0, r3
 344:	1affffe5 	bne	2e0 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x20>
 348:	e3a00000 	mov	r0, #0
 34c:	e12fff1e 	bx	lr
 350:	e7d5310e 	ldrb	r3, [r5, lr, lsl #2]
 354:	e085e10e 	add	lr, r5, lr, lsl #2
 358:	e5c23000 	strb	r3, [r2]
 35c:	e1de30b2 	ldrh	r3, [lr, #2]
 360:	e3a00001 	mov	r0, #1
 364:	e1c230b2 	strh	r3, [r2, #2]
 368:	e8bd8030 	pop	{r4, r5, pc}

0000036c <SparkFunDmx::SparkFunDmx()>:
 36c:	e92d4010 	push	{r4, lr}
 370:	e1a04000 	mov	r4, r0
 374:	ebfffffe 	bl	0 <LightSet::LightSet()>
 378:	e3a02000 	mov	r2, #0
 37c:	e3a01807 	mov	r1, #458752	; 0x70000
 380:	e59f3054 	ldr	r3, [pc, #84]	; 3dc <SparkFunDmx::SparkFunDmx()+0x70>
 384:	e59f0054 	ldr	r0, [pc, #84]	; 3e0 <SparkFunDmx::SparkFunDmx()+0x74>
 388:	e59fc054 	ldr	ip, [pc, #84]	; 3e4 <SparkFunDmx::SparkFunDmx()+0x78>
 38c:	e58430a4 	str	r3, [r4, #164]	; 0xa4
 390:	e59f3050 	ldr	r3, [pc, #80]	; 3e8 <SparkFunDmx::SparkFunDmx()+0x7c>
 394:	e58410b0 	str	r1, [r4, #176]	; 0xb0
 398:	e58430b4 	str	r3, [r4, #180]	; 0xb4
 39c:	e584c0ac 	str	ip, [r4, #172]	; 0xac
 3a0:	e5840000 	str	r0, [r4]
 3a4:	e58420bc 	str	r2, [r4, #188]	; 0xbc
 3a8:	e58420a8 	str	r2, [r4, #168]	; 0xa8
 3ac:	e1c42bb8 	strh	r2, [r4, #184]	; 0xb8
 3b0:	e2843004 	add	r3, r4, #4
 3b4:	e2841024 	add	r1, r4, #36	; 0x24
 3b8:	e4832004 	str	r2, [r3], #4
 3bc:	e1530001 	cmp	r3, r1
 3c0:	e583201c 	str	r2, [r3, #28]
 3c4:	e583203c 	str	r2, [r3, #60]	; 0x3c
 3c8:	e583205c 	str	r2, [r3, #92]	; 0x5c
 3cc:	e583207c 	str	r2, [r3, #124]	; 0x7c
 3d0:	1afffff8 	bne	3b8 <SparkFunDmx::SparkFunDmx()+0x4c>
 3d4:	e1a00004 	mov	r0, r4
 3d8:	e8bd8010 	pop	{r4, pc}
 3dc:	00131400 	andseq	r1, r3, r0, lsl #8
 3e0:	00000008 	andeq	r0, r0, r8
 3e4:	00001314 	andeq	r1, r0, r4, lsl r3
 3e8:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000

000003ec <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)>:
 3ec:	e3a03000 	mov	r3, #0
 3f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 3f4:	e2518000 	subs	r8, r1, #0
 3f8:	e24dd064 	sub	sp, sp, #100	; 0x64
 3fc:	01a01008 	moveq	r1, r8
 400:	15981000 	ldrne	r1, [r8]
 404:	e5c030a7 	strb	r3, [r0, #167]	; 0xa7
 408:	e1c03ab8 	strh	r3, [r0, #168]	; 0xa8
 40c:	e1a04000 	mov	r4, r0
 410:	e28d0014 	add	r0, sp, #20
 414:	ebfffffe 	bl	0 <SparkFunDmxParams::SparkFunDmxParams(SparkFunDmxParamsStore*)>
 418:	e28d0014 	add	r0, sp, #20
 41c:	ebfffffe 	bl	0 <SparkFunDmxParams::Load()>
 420:	e3500000 	cmp	r0, #0
 424:	1a0000e0 	bne	7ac <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x3c0>
 428:	e5d430a9 	ldrb	r3, [r4, #169]	; 0xa9
 42c:	e3530000 	cmp	r3, #0
 430:	1a0000d9 	bne	79c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x3b0>
 434:	e3a09001 	mov	r9, #1
 438:	e3a05000 	mov	r5, #0
 43c:	e3a01001 	mov	r1, #1
 440:	e5d400a5 	ldrb	r0, [r4, #165]	; 0xa5
 444:	ebfffffe 	bl	0 <bcm2835_gpio_fsel>
 448:	e5d430a5 	ldrb	r3, [r4, #165]	; 0xa5
 44c:	e59fa524 	ldr	sl, [pc, #1316]	; 978 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x58c>
 450:	e1a03319 	lsl	r3, r9, r3
 454:	e58a301c 	str	r3, [sl, #28]
 458:	e59f051c 	ldr	r0, [pc, #1308]	; 97c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x590>
 45c:	e58a3028 	str	r3, [sl, #40]	; 0x28
 460:	ebfffffe 	bl	0 <udelay>
 464:	e5d430a5 	ldrb	r3, [r4, #165]	; 0xa5
 468:	e59f050c 	ldr	r0, [pc, #1292]	; 97c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x590>
 46c:	e1a09319 	lsl	r9, r9, r3
 470:	e58a901c 	str	r9, [sl, #28]
 474:	e2846004 	add	r6, r4, #4
 478:	ebfffffe 	bl	0 <udelay>
 47c:	e1a07006 	mov	r7, r6
 480:	ebfffffe 	bl	0 <bcm2835_spi_begin>
 484:	e1a09005 	mov	r9, r5
 488:	ea000003 	b	49c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xb0>
 48c:	e2855001 	add	r5, r5, #1
 490:	e3550008 	cmp	r5, #8
 494:	e2877004 	add	r7, r7, #4
 498:	0a00002b 	beq	54c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x160>
 49c:	e1a01005 	mov	r1, r5
 4a0:	e28d0014 	add	r0, sp, #20
 4a4:	e1c49abe 	strh	r9, [r4, #174]	; 0xae
 4a8:	e1c49bb0 	strh	r9, [r4, #176]	; 0xb0
 4ac:	ebfffffe 	bl	0 <SparkFunDmxParams::Load(unsigned int)>
 4b0:	e3500000 	cmp	r0, #0
 4b4:	0afffff4 	beq	48c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xa0>
 4b8:	e1a01004 	mov	r1, r4
 4bc:	e28d0014 	add	r0, sp, #20
 4c0:	ebfffffe 	bl	0 <SparkFunDmxParams::SetLocal(SparkFunDmx*)>
 4c4:	e1a01005 	mov	r1, r5
 4c8:	e28d0014 	add	r0, sp, #20
 4cc:	ebfffffe 	bl	0 <SparkFunDmxParams::Dump(unsigned int)>
 4d0:	e5d430ae 	ldrb	r3, [r4, #174]	; 0xae
 4d4:	e3530000 	cmp	r3, #0
 4d8:	0affffeb 	beq	48c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xa0>
 4dc:	e5d430aa 	ldrb	r3, [r4, #170]	; 0xaa
 4e0:	e3530007 	cmp	r3, #7
 4e4:	8affffe8 	bhi	48c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xa0>
 4e8:	e5d430af 	ldrb	r3, [r4, #175]	; 0xaf
 4ec:	e5d410b1 	ldrb	r1, [r4, #177]	; 0xb1
 4f0:	e3530000 	cmp	r3, #0
 4f4:	e5d430b0 	ldrb	r3, [r4, #176]	; 0xb0
 4f8:	15d420ab 	ldrbne	r2, [r4, #171]	; 0xab
 4fc:	05d420a4 	ldrbeq	r2, [r4, #164]	; 0xa4
 500:	e3530000 	cmp	r3, #0
 504:	15d430ac 	ldrbne	r3, [r4, #172]	; 0xac
 508:	05d430a5 	ldrbeq	r3, [r4, #165]	; 0xa5
 50c:	e3510000 	cmp	r1, #0
 510:	0a000094 	beq	768 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x37c>
 514:	e5d4a0ad 	ldrb	sl, [r4, #173]	; 0xad
 518:	e3a00010 	mov	r0, #16
 51c:	e1cd20f8 	strd	r2, [sp, #8]
 520:	ebfffffe 	bl	0 <operator new(unsigned int)>
 524:	e1cd20d8 	ldrd	r2, [sp, #8]
 528:	e58da000 	str	sl, [sp]
 52c:	e1a0a000 	mov	sl, r0
 530:	e5d410aa 	ldrb	r1, [r4, #170]	; 0xaa
 534:	e2855001 	add	r5, r5, #1
 538:	ebfffffe 	bl	0 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char, unsigned char)>
 53c:	e3550008 	cmp	r5, #8
 540:	e587a000 	str	sl, [r7]
 544:	e2877004 	add	r7, r7, #4
 548:	1affffd3 	bne	49c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xb0>
 54c:	e1a05006 	mov	r5, r6
 550:	e3a07000 	mov	r7, #0
 554:	e59fa424 	ldr	sl, [pc, #1060]	; 980 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x594>
 558:	e2849024 	add	r9, r4, #36	; 0x24
 55c:	ea000023 	b	5f0 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x204>
 560:	e3a0003c 	mov	r0, #60	; 0x3c
 564:	ebfffffe 	bl	0 <operator new(unsigned int)>
 568:	e1a0b000 	mov	fp, r0
 56c:	e3580000 	cmp	r8, #0
 570:	01a01008 	moveq	r1, r8
 574:	15981004 	ldrne	r1, [r8, #4]
 578:	ebfffffe 	bl	0 <ModeParams::ModeParams(ModeParamsStore*)>
 57c:	e1a01007 	mov	r1, r7
 580:	e1a0000b 	mov	r0, fp
 584:	e585b03c 	str	fp, [r5, #60]	; 0x3c
 588:	ebfffffe 	bl	0 <ModeParams::Load(unsigned int)>
 58c:	e595003c 	ldr	r0, [r5, #60]	; 0x3c
 590:	ebfffffe 	bl	0 <ModeParams::Dump()>
 594:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
 598:	e5d30008 	ldrb	r0, [r3, #8]
 59c:	e1c40bb2 	strh	r0, [r4, #178]	; 0xb2
 5a0:	e5933008 	ldr	r3, [r3, #8]
 5a4:	e1a03423 	lsr	r3, r3, #8
 5a8:	e6ff3073 	uxth	r3, r3
 5ac:	e3530c02 	cmp	r3, #512	; 0x200
 5b0:	e1c43bb4 	strh	r3, [r4, #180]	; 0xb4
 5b4:	9a000058 	bls	71c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x330>
 5b8:	e5150004 	ldr	r0, [r5, #-4]
 5bc:	e3500000 	cmp	r0, #0
 5c0:	0a000002 	beq	5d0 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x1e4>
 5c4:	e5903000 	ldr	r3, [r0]
 5c8:	e5933004 	ldr	r3, [r3, #4]
 5cc:	e12fff33 	blx	r3
 5d0:	e3a03000 	mov	r3, #0
 5d4:	e1a01007 	mov	r1, r7
 5d8:	e1a0000a 	mov	r0, sl
 5dc:	e5053004 	str	r3, [r5, #-4]
 5e0:	ebfffffe 	bl	0 <printf>
 5e4:	e1550009 	cmp	r5, r9
 5e8:	e2877001 	add	r7, r7, #1
 5ec:	0a000008 	beq	614 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x228>
 5f0:	e4953004 	ldr	r3, [r5], #4
 5f4:	e3530000 	cmp	r3, #0
 5f8:	1affffd8 	bne	560 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x174>
 5fc:	e1a01007 	mov	r1, r7
 600:	e59f037c 	ldr	r0, [pc, #892]	; 984 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x598>
 604:	ebfffffe 	bl	0 <printf>
 608:	e1550009 	cmp	r5, r9
 60c:	e2877001 	add	r7, r7, #1
 610:	1afffff6 	bne	5f0 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x204>
 614:	e59f036c 	ldr	r0, [pc, #876]	; 988 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x59c>
 618:	e2844064 	add	r4, r4, #100	; 0x64
 61c:	ebfffffe 	bl	0 <printf>
 620:	e1a07004 	mov	r7, r4
 624:	e3a05000 	mov	r5, #0
 628:	e59f835c 	ldr	r8, [pc, #860]	; 98c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x5a0>
 62c:	e4973004 	ldr	r3, [r7], #4
 630:	e3530000 	cmp	r3, #0
 634:	0a000004 	beq	64c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x260>
 638:	e1a01005 	mov	r1, r5
 63c:	e1a00008 	mov	r0, r8
 640:	ebfffffe 	bl	0 <printf>
 644:	e5170004 	ldr	r0, [r7, #-4]
 648:	ebfffffe 	bl	0 <L6470DmxModes::InitSwitch()>
 64c:	e2855001 	add	r5, r5, #1
 650:	e3550008 	cmp	r5, #8
 654:	1afffff4 	bne	62c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x240>
 658:	e59f0330 	ldr	r0, [pc, #816]	; 990 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x5a4>
 65c:	ebfffffe 	bl	0 <printf>
 660:	e3a07000 	mov	r7, #0
 664:	e59f8320 	ldr	r8, [pc, #800]	; 98c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x5a0>
 668:	e59f9324 	ldr	r9, [pc, #804]	; 994 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x5a8>
 66c:	ea000002 	b	67c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x290>
 670:	e2877001 	add	r7, r7, #1
 674:	e3570008 	cmp	r7, #8
 678:	0a000016 	beq	6d8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x2ec>
 67c:	e4963004 	ldr	r3, [r6], #4
 680:	e3530000 	cmp	r3, #0
 684:	0afffff9 	beq	670 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x284>
 688:	e1a01007 	mov	r1, r7
 68c:	e1a00008 	mov	r0, r8
 690:	ebfffffe 	bl	0 <printf>
 694:	ebfffffe 	bl	0 <millis>
 698:	e1a05000 	mov	r5, r0
 69c:	e5160004 	ldr	r0, [r6, #-4]
 6a0:	e5903000 	ldr	r3, [r0]
 6a4:	e5933008 	ldr	r3, [r3, #8]
 6a8:	e12fff33 	blx	r3
 6ac:	e3500000 	cmp	r0, #0
 6b0:	0affffee 	beq	670 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x284>
 6b4:	ebfffffe 	bl	0 <millis>
 6b8:	e0400005 	sub	r0, r0, r5
 6bc:	e3500ffa 	cmp	r0, #1000	; 0x3e8
 6c0:	9afffff5 	bls	69c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x2b0>
 6c4:	e1a00009 	mov	r0, r9
 6c8:	e2877001 	add	r7, r7, #1
 6cc:	ebfffffe 	bl	0 <printf>
 6d0:	e3570008 	cmp	r7, #8
 6d4:	1affffe8 	bne	67c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x290>
 6d8:	e59f02b8 	ldr	r0, [pc, #696]	; 998 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x5ac>
 6dc:	ebfffffe 	bl	0 <printf>
 6e0:	e3a05000 	mov	r5, #0
 6e4:	e59f62a0 	ldr	r6, [pc, #672]	; 98c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x5a0>
 6e8:	e4943004 	ldr	r3, [r4], #4
 6ec:	e3530000 	cmp	r3, #0
 6f0:	0a000004 	beq	708 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x31c>
 6f4:	e1a01005 	mov	r1, r5
 6f8:	e1a00006 	mov	r0, r6
 6fc:	ebfffffe 	bl	0 <printf>
 700:	e5140004 	ldr	r0, [r4, #-4]
 704:	ebfffffe 	bl	0 <L6470DmxModes::InitPos()>
 708:	e2855001 	add	r5, r5, #1
 70c:	e3550008 	cmp	r5, #8
 710:	1afffff4 	bne	6e8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x2fc>
 714:	e28dd064 	add	sp, sp, #100	; 0x64
 718:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 71c:	ebfffffe 	bl	0 <L6470DmxModes::GetDmxFootPrintMode(unsigned int)>
 720:	e3500000 	cmp	r0, #0
 724:	0affffa3 	beq	5b8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x1cc>
 728:	e5150004 	ldr	r0, [r5, #-4]
 72c:	ebfffffe 	bl	0 <AutoDriver::IsConnected()>
 730:	e3500000 	cmp	r0, #0
 734:	1a000023 	bne	7c8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x3dc>
 738:	e5150004 	ldr	r0, [r5, #-4]
 73c:	e3500000 	cmp	r0, #0
 740:	0a000002 	beq	750 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x364>
 744:	e5903000 	ldr	r3, [r0]
 748:	e5933004 	ldr	r3, [r3, #4]
 74c:	e12fff33 	blx	r3
 750:	e3a03000 	mov	r3, #0
 754:	e1a01007 	mov	r1, r7
 758:	e5053004 	str	r3, [r5, #-4]
 75c:	e59f0238 	ldr	r0, [pc, #568]	; 99c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x5b0>
 760:	ebfffffe 	bl	0 <printf>
 764:	eaffff9e 	b	5e4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x1f8>
 768:	e5d410a9 	ldrb	r1, [r4, #169]	; 0xa9
 76c:	e5d4a0a6 	ldrb	sl, [r4, #166]	; 0xa6
 770:	e3510000 	cmp	r1, #0
 774:	1affff67 	bne	518 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x12c>
 778:	e3a00010 	mov	r0, #16
 77c:	e1cd20f8 	strd	r2, [sp, #8]
 780:	ebfffffe 	bl	0 <operator new(unsigned int)>
 784:	e1cd20d8 	ldrd	r2, [sp, #8]
 788:	e1a0a000 	mov	sl, r0
 78c:	e5d410aa 	ldrb	r1, [r4, #170]	; 0xaa
 790:	ebfffffe 	bl	0 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char)>
 794:	e587a000 	str	sl, [r7]
 798:	eaffff3b 	b	48c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xa0>
 79c:	e3a01000 	mov	r1, #0
 7a0:	e5d400a6 	ldrb	r0, [r4, #166]	; 0xa6
 7a4:	ebfffffe 	bl	0 <bcm2835_gpio_fsel>
 7a8:	eaffff21 	b	434 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x48>
 7ac:	e1a01004 	mov	r1, r4
 7b0:	e28d0014 	add	r0, sp, #20
 7b4:	ebfffffe 	bl	0 <SparkFunDmxParams::SetGlobal(SparkFunDmx*)>
 7b8:	e3a010ff 	mov	r1, #255	; 0xff
 7bc:	e28d0014 	add	r0, sp, #20
 7c0:	ebfffffe 	bl	0 <SparkFunDmxParams::Dump(unsigned int)>
 7c4:	eaffff17 	b	428 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x3c>
 7c8:	e1a01007 	mov	r1, r7
 7cc:	e59f01cc 	ldr	r0, [pc, #460]	; 9a0 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x5b4>
 7d0:	ebfffffe 	bl	0 <printf>
 7d4:	e5150004 	ldr	r0, [r5, #-4]
 7d8:	e5807004 	str	r7, [r0, #4]
 7dc:	ebfffffe 	bl	0 <L6470::Dump()>
 7e0:	e3a0002c 	mov	r0, #44	; 0x2c
 7e4:	ebfffffe 	bl	0 <operator new(unsigned int)>
 7e8:	e3580000 	cmp	r8, #0
 7ec:	e1a0b000 	mov	fp, r0
 7f0:	0a000053 	beq	944 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x558>
 7f4:	e5981008 	ldr	r1, [r8, #8]
 7f8:	ebfffffe 	bl	0 <MotorParams::MotorParams(MotorParamsStore*)>
 7fc:	e1a01007 	mov	r1, r7
 800:	e1a0000b 	mov	r0, fp
 804:	e585b01c 	str	fp, [r5, #28]
 808:	ebfffffe 	bl	0 <MotorParams::Load(unsigned int)>
 80c:	e595001c 	ldr	r0, [r5, #28]
 810:	ebfffffe 	bl	0 <MotorParams::Dump()>
 814:	e5151004 	ldr	r1, [r5, #-4]
 818:	e595001c 	ldr	r0, [r5, #28]
 81c:	ebfffffe 	bl	0 <MotorParams::Set(L6470*)>
 820:	e598100c 	ldr	r1, [r8, #12]
 824:	e28d0030 	add	r0, sp, #48	; 0x30
 828:	ebfffffe 	bl	0 <L6470Params::L6470Params(L6470ParamsStore*)>
 82c:	e1a01007 	mov	r1, r7
 830:	e28d0030 	add	r0, sp, #48	; 0x30
 834:	ebfffffe 	bl	0 <L6470Params::Load(unsigned int)>
 838:	e28d0030 	add	r0, sp, #48	; 0x30
 83c:	ebfffffe 	bl	0 <L6470Params::Dump()>
 840:	e5151004 	ldr	r1, [r5, #-4]
 844:	e28d0030 	add	r0, sp, #48	; 0x30
 848:	ebfffffe 	bl	0 <L6470Params::Set(L6470*)>
 84c:	e5150004 	ldr	r0, [r5, #-4]
 850:	ebfffffe 	bl	0 <L6470::Dump()>
 854:	e3a00014 	mov	r0, #20
 858:	ebfffffe 	bl	0 <operator new(unsigned int)>
 85c:	e1a0b000 	mov	fp, r0
 860:	e595203c 	ldr	r2, [r5, #60]	; 0x3c
 864:	e5153004 	ldr	r3, [r5, #-4]
 868:	e58d2004 	str	r2, [sp, #4]
 86c:	e595201c 	ldr	r2, [r5, #28]
 870:	e58d2000 	str	r2, [sp]
 874:	e1d42bb4 	ldrh	r2, [r4, #180]	; 0xb4
 878:	e5d410b2 	ldrb	r1, [r4, #178]	; 0xb2
 87c:	ebfffffe 	bl	0 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)>
 880:	e1d43bb6 	ldrh	r3, [r4, #182]	; 0xb6
 884:	e59f2118 	ldr	r2, [pc, #280]	; 9a4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x5b8>
 888:	e585b05c 	str	fp, [r5, #92]	; 0x5c
 88c:	e1530002 	cmp	r3, r2
 890:	0a000026 	beq	930 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x544>
 894:	e1db10b4 	ldrh	r1, [fp, #4]
 898:	e1d40bb8 	ldrh	r0, [r4, #184]	; 0xb8
 89c:	e1510003 	cmp	r1, r3
 8a0:	21a01003 	movcs	r1, r3
 8a4:	e1dbb0bc 	ldrh	fp, [fp, #12]
 8a8:	e0833000 	add	r3, r3, r0
 8ac:	e1d40bb4 	ldrh	r0, [r4, #180]	; 0xb4
 8b0:	e6ff3073 	uxth	r3, r3
 8b4:	e08b0000 	add	r0, fp, r0
 8b8:	e6ff0070 	uxth	r0, r0
 8bc:	e1500003 	cmp	r0, r3
 8c0:	2061c000 	rsbcs	ip, r1, r0
 8c4:	3061c003 	rsbcc	ip, r1, r3
 8c8:	e1c41bb6 	strh	r1, [r4, #182]	; 0xb6
 8cc:	e1c4cbb8 	strh	ip, [r4, #184]	; 0xb8
 8d0:	e35b0004 	cmp	fp, #4
 8d4:	31a0300b 	movcc	r3, fp
 8d8:	23a03004 	movcs	r3, #4
 8dc:	e1a00103 	lsl	r0, r3, #2
 8e0:	e58d3008 	str	r3, [sp, #8]
 8e4:	ebfffffe 	bl	0 <operator new[](unsigned int)>
 8e8:	e35b0000 	cmp	fp, #0
 8ec:	e585007c 	str	r0, [r5, #124]	; 0x7c
 8f0:	0affff3b 	beq	5e4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x1f8>
 8f4:	e58d400c 	str	r4, [sp, #12]
 8f8:	e3a0b000 	mov	fp, #0
 8fc:	e1a02000 	mov	r2, r0
 900:	e59d4008 	ldr	r4, [sp, #8]
 904:	ea000000 	b	90c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x520>
 908:	e595207c 	ldr	r2, [r5, #124]	; 0x7c
 90c:	e1a0100b 	mov	r1, fp
 910:	e082210b 	add	r2, r2, fp, lsl #2
 914:	e595003c 	ldr	r0, [r5, #60]	; 0x3c
 918:	e28bb001 	add	fp, fp, #1
 91c:	ebfffffe 	bl	0 <ModeParams::GetSlotInfo(unsigned int, lightset::SlotInfo&)>
 920:	e154000b 	cmp	r4, fp
 924:	1afffff7 	bne	908 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x51c>
 928:	e59d400c 	ldr	r4, [sp, #12]
 92c:	eaffff2c 	b	5e4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x1f8>
 930:	e1db30b4 	ldrh	r3, [fp, #4]
 934:	e1dbb0bc 	ldrh	fp, [fp, #12]
 938:	e1c43bb6 	strh	r3, [r4, #182]	; 0xb6
 93c:	e1c4bbb8 	strh	fp, [r4, #184]	; 0xb8
 940:	eaffffe2 	b	8d0 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x4e4>
 944:	e1a01008 	mov	r1, r8
 948:	ebfffffe 	bl	0 <MotorParams::MotorParams(MotorParamsStore*)>
 94c:	e1a01007 	mov	r1, r7
 950:	e1a0000b 	mov	r0, fp
 954:	e585b01c 	str	fp, [r5, #28]
 958:	ebfffffe 	bl	0 <MotorParams::Load(unsigned int)>
 95c:	e595001c 	ldr	r0, [r5, #28]
 960:	ebfffffe 	bl	0 <MotorParams::Dump()>
 964:	e5151004 	ldr	r1, [r5, #-4]
 968:	e595001c 	ldr	r0, [r5, #28]
 96c:	ebfffffe 	bl	0 <MotorParams::Set(L6470*)>
 970:	e1a01008 	mov	r1, r8
 974:	eaffffaa 	b	824 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x438>
 978:	20200000 	eorcs	r0, r0, r0
 97c:	00002710 	andeq	r2, r0, r0, lsl r7
 980:	00000060 	andeq	r0, r0, r0, rrx
 984:	00000098 	muleq	r0, r8, r0
 988:	000000ac 	andeq	r0, r0, ip, lsr #1
 98c:	000000bc 	strheq	r0, [r0], -ip
 990:	000000c8 	andeq	r0, r0, r8, asr #1
 994:	000000d8 	ldrdeq	r0, [r0], -r8
 998:	000000e8 	andeq	r0, r0, r8, ror #1
 99c:	00000018 	andeq	r0, r0, r8, lsl r0
 9a0:	00000000 	andeq	r0, r0, r0
 9a4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

Disassembly of section .text._ZN8LightSet8BlackoutEb:

00000000 <LightSet::Blackout(bool)>:
   0:	e12fff1e 	bx	lr

Disassembly of section .text._ZN11SparkFunDmx18GetDmxStartAddressEv:

00000000 <SparkFunDmx::GetDmxStartAddress()>:
   0:	e1d00bb6 	ldrh	r0, [r0, #182]	; 0xb6
   4:	e12fff1e 	bx	lr

Disassembly of section .text._ZN11SparkFunDmx15GetDmxFootprintEv:

00000000 <SparkFunDmx::GetDmxFootprint()>:
   0:	e1d00bb8 	ldrh	r0, [r0, #184]	; 0xb8
   4:	e12fff1e 	bx	lr

Disassembly of section .rodata.str1.4:

00000000 <.rodata.str1.4>:
   0:	6f746f4d 	svcvs	0x00746f4d
   4:	64252072 	strtvs	r2, [r5], #-114	; 0xffffff8e
   8:	20736920 	rsbscs	r6, r3, r0, lsr #18
   c:	6e6e6f63 	cdpvs	15, 6, cr6, cr14, cr3, {3}
  10:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
  14:	00000a64 	andeq	r0, r0, r4, ror #20
  18:	6f746f4d 	svcvs	0x00746f4d
  1c:	64252072 	strtvs	r2, [r5], #-114	; 0xffffff8e
  20:	43202d20 			; <UNDEFINED> instruction: 0x43202d20
  24:	756d6d6f 	strbvc	r6, [sp, #-3439]!	; 0xfffff291
  28:	6163696e 	cmnvs	r3, lr, ror #18
  2c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  30:	73736920 	cmnvc	r3, #32, 18	; 0x80000
  34:	21736575 	cmncs	r3, r5, ror r5
  38:	65684320 	strbvs	r4, [r8, #-800]!	; 0xfffffce0
  3c:	53206b63 			; <UNDEFINED> instruction: 0x53206b63
  40:	63204950 			; <UNDEFINED> instruction: 0x63204950
  44:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
  48:	61727567 	cmnvs	r2, r7, ror #10
  4c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  50:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
  54:	62616320 	rsbvs	r6, r1, #32, 6	; 0x80000000
  58:	0a73656c 	beq	1cd9610 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x1cd9224>
  5c:	00000000 	andeq	r0, r0, r0
  60:	6f746f4d 	svcvs	0x00746f4d
  64:	64252072 	strtvs	r2, [r5], #-114	; 0xffffff8e
  68:	43202d20 			; <UNDEFINED> instruction: 0x43202d20
  6c:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
  70:	61727567 	cmnvs	r2, r7, ror #10
  74:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  78:	72726520 	rsbsvc	r6, r2, #32, 10	; 0x8000000
  7c:	2021726f 	eorcs	r7, r1, pc, ror #4
  80:	63656843 	cmnvs	r5, #4390912	; 0x430000
  84:	6f4d206b 	svcvs	0x004d206b
  88:	70206564 	eorvc	r6, r0, r4, ror #10
  8c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
  90:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
  94:	00000a73 	andeq	r0, r0, r3, ror sl
  98:	70696b53 	rsbvc	r6, r9, r3, asr fp
  9c:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
  a0:	746f4d20 	strbtvc	r4, [pc], #-3360	; a8 <.rodata.str1.4+0xa8>
  a4:	2520726f 	strcs	r7, [r0, #-623]!	; 0xfffffd91
  a8:	00000a64 	andeq	r0, r0, r4, ror #20
  ac:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
  b0:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
  b4:	29286863 	stmdbcs	r8!, {r0, r1, r5, r6, fp, sp, lr}
  b8:	0000000a 	andeq	r0, r0, sl
  bc:	746f4d20 	strbtvc	r4, [pc], #-3360	; c4 <.rodata.str1.4+0xc4>
  c0:	2520726f 	strcs	r7, [r0, #-623]!	; 0xfffffd91
  c4:	00000a64 	andeq	r0, r0, r4, ror #20
  c8:	79737562 	ldmdbvc	r3!, {r1, r5, r6, r8, sl, ip, sp, lr}^
  cc:	63656843 	cmnvs	r5, #4390912	; 0x430000
  d0:	0a29286b 	beq	a4a284 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xa49e98>
  d4:	00000000 	andeq	r0, r0, r0
  d8:	69542020 	ldmdbvs	r4, {r5, sp}^
  dc:	6f2d656d 	svcvs	0x002d656d
  e0:	0a217475 	beq	85d2bc <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x85ced0>
  e4:	00000000 	andeq	r0, r0, r0
  e8:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
  ec:	28736f50 	ldmdacs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
  f0:	Address 0x00000000000000f0 is out of bounds.


Disassembly of section .rodata:

00000000 <vtable for SparkFunDmx>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x168d440>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x42038>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


l6470dmxmode3.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <L6470DmxMode3::Stop()>:
   0:	e12fff1e 	bx	lr

00000004 <L6470DmxMode3::BusyCheck()>:
   4:	e5900004 	ldr	r0, [r0, #4]
   8:	e92d4010 	push	{r4, lr}
   c:	e5903000 	ldr	r3, [r0]
  10:	e5933008 	ldr	r3, [r3, #8]
  14:	e12fff33 	blx	r3
  18:	e2500000 	subs	r0, r0, #0
  1c:	13a00001 	movne	r0, #1
  20:	e8bd8010 	pop	{r4, pc}

00000024 <L6470DmxMode3::~L6470DmxMode3()>:
  24:	e92d4010 	push	{r4, lr}
  28:	e1a04000 	mov	r4, r0
  2c:	e59f300c 	ldr	r3, [pc, #12]	; 40 <L6470DmxMode3::~L6470DmxMode3()+0x1c>
  30:	e5803000 	str	r3, [r0]
  34:	ebfffffe 	bl	0 <L6470DmxMode::~L6470DmxMode()>
  38:	e1a00004 	mov	r0, r4
  3c:	e8bd8010 	pop	{r4, pc}
  40:	00000008 	andeq	r0, r0, r8

00000044 <L6470DmxMode3::~L6470DmxMode3()>:
  44:	e92d4010 	push	{r4, lr}
  48:	e1a04000 	mov	r4, r0
  4c:	e59f3014 	ldr	r3, [pc, #20]	; 68 <L6470DmxMode3::~L6470DmxMode3()+0x24>
  50:	e5803000 	str	r3, [r0]
  54:	ebfffffe 	bl	0 <L6470DmxMode::~L6470DmxMode()>
  58:	e1a00004 	mov	r0, r4
  5c:	ebfffffe 	bl	0 <operator delete(void*)>
  60:	e1a00004 	mov	r0, r4
  64:	e8bd8010 	pop	{r4, pc}
  68:	00000008 	andeq	r0, r0, r8

0000006c <L6470DmxMode3::Data(unsigned char const*)>:
  6c:	e92d4070 	push	{r4, r5, r6, lr}
  70:	e1a06001 	mov	r6, r1
  74:	e5d11000 	ldrb	r1, [r1]
  78:	ed907a02 	vldr	s14, [r0, #8]
  7c:	ee071a90 	vmov	s15, r1
  80:	eef87a67 	vcvt.f32.u32	s15, s15
  84:	ee677a87 	vmul.f32	s15, s15, s14
  88:	e1a04000 	mov	r4, r0
  8c:	eefc7ae7 	vcvt.u32.f32	s15, s15
  90:	e5d4300d 	ldrb	r3, [r4, #13]
  94:	ee175a90 	vmov	r5, s15
  98:	e3530000 	cmp	r3, #0
  9c:	e5900004 	ldr	r0, [r0, #4]
  a0:	1a000009 	bne	cc <L6470DmxMode3::Data(unsigned char const*)+0x60>
  a4:	e5d4300c 	ldrb	r3, [r4, #12]
  a8:	e1530001 	cmp	r3, r1
  ac:	93a01000 	movls	r1, #0
  b0:	83a01001 	movhi	r1, #1
  b4:	e1a02005 	mov	r2, r5
  b8:	e2211001 	eor	r1, r1, #1
  bc:	ebfffffe 	bl	0 <L6470::goToDir(TL6470Direction, long)>
  c0:	e5d63000 	ldrb	r3, [r6]
  c4:	e5c4300c 	strb	r3, [r4, #12]
  c8:	e8bd8070 	pop	{r4, r5, r6, pc}
  cc:	ebfffffe 	bl	0 <L6470::getPos()>
  d0:	e1a01000 	mov	r1, r0
  d4:	e1550001 	cmp	r5, r1
  d8:	23a01000 	movcs	r1, #0
  dc:	33a01001 	movcc	r1, #1
  e0:	e5940004 	ldr	r0, [r4, #4]
  e4:	eafffff2 	b	b4 <L6470DmxMode3::Data(unsigned char const*)+0x48>

000000e8 <L6470DmxMode3::HandleBusy()>:
  e8:	e92d4010 	push	{r4, lr}
  ec:	e1a04000 	mov	r4, r0
  f0:	e5900004 	ldr	r0, [r0, #4]
  f4:	e5903000 	ldr	r3, [r0]
  f8:	e5933008 	ldr	r3, [r3, #8]
  fc:	e12fff33 	blx	r3
 100:	e3500000 	cmp	r0, #0
 104:	1a000001 	bne	110 <L6470DmxMode3::HandleBusy()+0x28>
 108:	e5c4000d 	strb	r0, [r4, #13]
 10c:	e8bd8010 	pop	{r4, pc}
 110:	e5940004 	ldr	r0, [r4, #4]
 114:	ebfffffe 	bl	0 <L6470::softStop()>
 118:	e3a03001 	mov	r3, #1
 11c:	e5c4300d 	strb	r3, [r4, #13]
 120:	e8bd8010 	pop	{r4, pc}

00000124 <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)>:
 124:	e92d4030 	push	{r4, r5, lr}
 128:	e3a03000 	mov	r3, #0
 12c:	e1a04000 	mov	r4, r0
 130:	e59fc05c 	ldr	ip, [pc, #92]	; 194 <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)+0x70>
 134:	e24dd00c 	sub	sp, sp, #12
 138:	e1a00001 	mov	r0, r1
 13c:	e1c430bc 	strh	r3, [r4, #12]
 140:	e584c000 	str	ip, [r4]
 144:	e5841004 	str	r1, [r4, #4]
 148:	e1a05002 	mov	r5, r2
 14c:	e58d1004 	str	r1, [sp, #4]
 150:	ebfffffe 	bl	0 <L6470::resetPos()>
 154:	e59d0004 	ldr	r0, [sp, #4]
 158:	ebfffffe 	bl	0 <L6470::getStepMode()>
 15c:	e3a03f5a 	mov	r3, #360	; 0x168
 160:	e1a02000 	mov	r2, r0
 164:	e1a03213 	lsl	r3, r3, r2
 168:	ee073a90 	vmov	s15, r3
 16c:	ed956a02 	vldr	s12, [r5, #8]
 170:	eef87a67 	vcvt.f32.u32	s15, s15
 174:	ed9f7a05 	vldr	s14, [pc, #20]	; 190 <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)+0x6c>
 178:	eec76a86 	vdiv.f32	s13, s15, s12
 17c:	e1a00004 	mov	r0, r4
 180:	eec67a87 	vdiv.f32	s15, s13, s14
 184:	edc47a02 	vstr	s15, [r4, #8]
 188:	e28dd00c 	add	sp, sp, #12
 18c:	e8bd8030 	pop	{r4, r5, pc}
 190:	437f0000 	cmnmi	pc, #0
 194:	00000008 	andeq	r0, r0, r8

Disassembly of section .rodata:

00000000 <vtable for L6470DmxMode3>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)+0x168d708>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)+0x42300>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


slushdmx.o:     file format elf32-littlearm


Disassembly of section .group:

00000000 <.group>:
   0:	00000001 	andeq	r0, r0, r1
   4:	00000009 	andeq	r0, r0, r9

Disassembly of section .group:

00000000 <.group>:
   0:	00000001 	andeq	r0, r0, r1
   4:	0000000a 	andeq	r0, r0, sl

Disassembly of section .group:

00000000 <.group>:
   0:	00000001 	andeq	r0, r0, r1
   4:	0000000b 	andeq	r0, r0, fp

Disassembly of section .group:

00000000 <.group>:
   0:	00000001 	andeq	r0, r0, r1
   4:	0000000c 	andeq	r0, r0, ip

Disassembly of section .text:

00000000 <SlushDmx::SetDmxStartAddress(unsigned short)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e1d058b0 	ldrh	r5, [r0, #128]	; 0x80
   8:	e1550001 	cmp	r5, r1
   c:	0a00001a 	beq	7c <SlushDmx::SetDmxStartAddress(unsigned short)+0x7c>
  10:	e280205c 	add	r2, r0, #92	; 0x5c
  14:	e280e06c 	add	lr, r0, #108	; 0x6c
  18:	e0414005 	sub	r4, r1, r5
  1c:	e4923004 	ldr	r3, [r2], #4
  20:	e3530000 	cmp	r3, #0
  24:	11d3c0b4 	ldrhne	ip, [r3, #4]
  28:	108cc004 	addne	ip, ip, r4
  2c:	11c3c0b4 	strhne	ip, [r3, #4]
  30:	e152000e 	cmp	r2, lr
  34:	1afffff8 	bne	1c <SlushDmx::SetDmxStartAddress(unsigned short)+0x1c>
  38:	e1d030b8 	ldrh	r3, [r0, #8]
  3c:	e59f2040 	ldr	r2, [pc, #64]	; 84 <SlushDmx::SetDmxStartAddress(unsigned short)+0x84>
  40:	e0813003 	add	r3, r1, r3
  44:	e0433005 	sub	r3, r3, r5
  48:	e1c030b8 	strh	r3, [r0, #8]
  4c:	e1d031b4 	ldrh	r3, [r0, #20]
  50:	e5922000 	ldr	r2, [r2]
  54:	e1c018b0 	strh	r1, [r0, #128]	; 0x80
  58:	e0811003 	add	r1, r1, r3
  5c:	e0411005 	sub	r1, r1, r5
  60:	e3520000 	cmp	r2, #0
  64:	e1c011b4 	strh	r1, [r0, #20]
  68:	0a000003 	beq	7c <SlushDmx::SetDmxStartAddress(unsigned short)+0x7c>
  6c:	e5923000 	ldr	r3, [r2]
  70:	e1a00002 	mov	r0, r2
  74:	e5933008 	ldr	r3, [r3, #8]
  78:	e12fff33 	blx	r3
  7c:	e3a00001 	mov	r0, #1
  80:	e8bd8070 	pop	{r4, r5, r6, pc}
  84:	00000000 	andeq	r0, r0, r0

00000088 <SlushDmx::~SlushDmx()>:
  88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  8c:	e1a05000 	mov	r5, r0
  90:	e590000c 	ldr	r0, [r0, #12]
  94:	e59f3130 	ldr	r3, [pc, #304]	; 1cc <SlushDmx::~SlushDmx()+0x144>
  98:	e3500000 	cmp	r0, #0
  9c:	e5853000 	str	r3, [r5]
  a0:	0a000002 	beq	b0 <SlushDmx::~SlushDmx()+0x28>
  a4:	ebfffffe 	bl	0 <operator delete[](void*)>
  a8:	e3a03000 	mov	r3, #0
  ac:	e585300c 	str	r3, [r5, #12]
  b0:	e5950010 	ldr	r0, [r5, #16]
  b4:	e3500000 	cmp	r0, #0
  b8:	0a000002 	beq	c8 <SlushDmx::~SlushDmx()+0x40>
  bc:	ebfffffe 	bl	0 <operator delete[](void*)>
  c0:	e3a03000 	mov	r3, #0
  c4:	e5853010 	str	r3, [r5, #16]
  c8:	e5950018 	ldr	r0, [r5, #24]
  cc:	e3500000 	cmp	r0, #0
  d0:	0a000002 	beq	e0 <SlushDmx::~SlushDmx()+0x58>
  d4:	ebfffffe 	bl	0 <operator delete[](void*)>
  d8:	e3a03000 	mov	r3, #0
  dc:	e5853018 	str	r3, [r5, #24]
  e0:	e595001c 	ldr	r0, [r5, #28]
  e4:	e3500000 	cmp	r0, #0
  e8:	0a000002 	beq	f8 <SlushDmx::~SlushDmx()+0x70>
  ec:	ebfffffe 	bl	0 <operator delete[](void*)>
  f0:	e3a03000 	mov	r3, #0
  f4:	e585301c 	str	r3, [r5, #28]
  f8:	e3a06000 	mov	r6, #0
  fc:	e285402c 	add	r4, r5, #44	; 0x2c
 100:	e285803c 	add	r8, r5, #60	; 0x3c
 104:	e4940004 	ldr	r0, [r4], #4
 108:	e3500000 	cmp	r0, #0
 10c:	0a000003 	beq	120 <SlushDmx::~SlushDmx()+0x98>
 110:	e5903000 	ldr	r3, [r0]
 114:	e5933004 	ldr	r3, [r3, #4]
 118:	e12fff33 	blx	r3
 11c:	e5046004 	str	r6, [r4, #-4]
 120:	e594000c 	ldr	r0, [r4, #12]
 124:	e3500000 	cmp	r0, #0
 128:	0a000001 	beq	134 <SlushDmx::~SlushDmx()+0xac>
 12c:	ebfffffe 	bl	0 <operator delete(void*)>
 130:	e584600c 	str	r6, [r4, #12]
 134:	e594701c 	ldr	r7, [r4, #28]
 138:	e3570000 	cmp	r7, #0
 13c:	0a000004 	beq	154 <SlushDmx::~SlushDmx()+0xcc>
 140:	e1a00007 	mov	r0, r7
 144:	ebfffffe 	bl	0 <ModeParams::~ModeParams()>
 148:	e1a00007 	mov	r0, r7
 14c:	ebfffffe 	bl	0 <operator delete(void*)>
 150:	e584601c 	str	r6, [r4, #28]
 154:	e594702c 	ldr	r7, [r4, #44]	; 0x2c
 158:	e3570000 	cmp	r7, #0
 15c:	0a000004 	beq	174 <SlushDmx::~SlushDmx()+0xec>
 160:	e1a00007 	mov	r0, r7
 164:	ebfffffe 	bl	0 <L6470DmxModes::~L6470DmxModes()>
 168:	e1a00007 	mov	r0, r7
 16c:	ebfffffe 	bl	0 <operator delete(void*)>
 170:	e584602c 	str	r6, [r4, #44]	; 0x2c
 174:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
 178:	e3500000 	cmp	r0, #0
 17c:	0a000001 	beq	188 <SlushDmx::~SlushDmx()+0x100>
 180:	ebfffffe 	bl	0 <operator delete[](void*)>
 184:	e584603c 	str	r6, [r4, #60]	; 0x3c
 188:	e1580004 	cmp	r8, r4
 18c:	1affffdc 	bne	104 <SlushDmx::~SlushDmx()+0x7c>
 190:	e5950084 	ldr	r0, [r5, #132]	; 0x84
 194:	e3500000 	cmp	r0, #0
 198:	0a000002 	beq	1a8 <SlushDmx::~SlushDmx()+0x120>
 19c:	ebfffffe 	bl	0 <operator delete[](void*)>
 1a0:	e3a03000 	mov	r3, #0
 1a4:	e5853084 	str	r3, [r5, #132]	; 0x84
 1a8:	e5954020 	ldr	r4, [r5, #32]
 1ac:	e3540000 	cmp	r4, #0
 1b0:	0a000003 	beq	1c4 <SlushDmx::~SlushDmx()+0x13c>
 1b4:	e1a00004 	mov	r0, r4
 1b8:	ebfffffe 	bl	0 <SlushBoard::~SlushBoard()>
 1bc:	e1a00004 	mov	r0, r4
 1c0:	ebfffffe 	bl	0 <operator delete(void*)>
 1c4:	e1a00005 	mov	r0, r5
 1c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 1cc:	00000008 	andeq	r0, r0, r8

000001d0 <SlushDmx::~SlushDmx()>:
 1d0:	e92d4010 	push	{r4, lr}
 1d4:	e1a04000 	mov	r4, r0
 1d8:	ebfffffe 	bl	88 <SlushDmx::~SlushDmx()>
 1dc:	e1a00004 	mov	r0, r4
 1e0:	ebfffffe 	bl	0 <operator delete(void*)>
 1e4:	e1a00004 	mov	r0, r4
 1e8:	e8bd8010 	pop	{r4, pc}

000001ec <SlushDmx::Start(unsigned int)>:
 1ec:	e92d4070 	push	{r4, r5, r6, lr}
 1f0:	e280405c 	add	r4, r0, #92	; 0x5c
 1f4:	e280506c 	add	r5, r0, #108	; 0x6c
 1f8:	e4940004 	ldr	r0, [r4], #4
 1fc:	e3500000 	cmp	r0, #0
 200:	0a000000 	beq	208 <SlushDmx::Start(unsigned int)+0x1c>
 204:	ebfffffe 	bl	0 <L6470DmxModes::Start()>
 208:	e1540005 	cmp	r4, r5
 20c:	1afffff9 	bne	1f8 <SlushDmx::Start(unsigned int)+0xc>
 210:	e8bd8070 	pop	{r4, r5, r6, pc}

00000214 <SlushDmx::Stop(unsigned int)>:
 214:	e92d4070 	push	{r4, r5, r6, lr}
 218:	e280405c 	add	r4, r0, #92	; 0x5c
 21c:	e280506c 	add	r5, r0, #108	; 0x6c
 220:	e4940004 	ldr	r0, [r4], #4
 224:	e3500000 	cmp	r0, #0
 228:	0a000000 	beq	230 <SlushDmx::Stop(unsigned int)+0x1c>
 22c:	ebfffffe 	bl	0 <L6470DmxModes::Stop()>
 230:	e1540005 	cmp	r4, r5
 234:	1afffff9 	bne	220 <SlushDmx::Stop(unsigned int)+0xc>
 238:	e8bd8070 	pop	{r4, r5, r6, pc}

0000023c <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 23c:	e1d038b2 	ldrh	r3, [r0, #130]	; 0x82
 240:	e1530001 	cmp	r3, r1
 244:	3a00002b 	bcc	2f8 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0xbc>
 248:	e92d4070 	push	{r4, r5, r6, lr}
 24c:	e1a0e000 	mov	lr, r0
 250:	e1d038b0 	ldrh	r3, [r0, #128]	; 0x80
 254:	e280c05c 	add	ip, r0, #92	; 0x5c
 258:	e0811003 	add	r1, r1, r3
 25c:	e6ff3071 	uxth	r3, r1
 260:	e280606c 	add	r6, r0, #108	; 0x6c
 264:	e49c1004 	ldr	r1, [ip], #4
 268:	e3510000 	cmp	r1, #0
 26c:	0a00000a 	beq	29c <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x60>
 270:	e59c500c 	ldr	r5, [ip, #12]
 274:	e3550000 	cmp	r5, #0
 278:	0a000007 	beq	29c <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x60>
 27c:	e1d140b4 	ldrh	r4, [r1, #4]
 280:	e0430004 	sub	r0, r3, r4
 284:	e1530004 	cmp	r3, r4
 288:	e6bf0070 	sxth	r0, r0
 28c:	3a000002 	bcc	29c <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x60>
 290:	e1d110bc 	ldrh	r1, [r1, #12]
 294:	e1500001 	cmp	r0, r1
 298:	ba00002b 	blt	34c <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x110>
 29c:	e15c0006 	cmp	ip, r6
 2a0:	1affffef 	bne	264 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 2a4:	e1de10b8 	ldrh	r1, [lr, #8]
 2a8:	e5de0004 	ldrb	r0, [lr, #4]
 2ac:	e1530001 	cmp	r3, r1
 2b0:	33a00000 	movcc	r0, #0
 2b4:	22000001 	andcs	r0, r0, #1
 2b8:	e3500000 	cmp	r0, #0
 2bc:	1a00000f 	bne	300 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0xc4>
 2c0:	e1de11b4 	ldrh	r1, [lr, #20]
 2c4:	e5de0005 	ldrb	r0, [lr, #5]
 2c8:	e1530001 	cmp	r3, r1
 2cc:	33a00000 	movcc	r0, #0
 2d0:	22000001 	andcs	r0, r0, #1
 2d4:	e3500000 	cmp	r0, #0
 2d8:	08bd8070 	popeq	{r4, r5, r6, pc}
 2dc:	e0433001 	sub	r3, r3, r1
 2e0:	e1de11b6 	ldrh	r1, [lr, #22]
 2e4:	e6bf3073 	sxth	r3, r3
 2e8:	e1530001 	cmp	r3, r1
 2ec:	ba00000f 	blt	330 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0xf4>
 2f0:	e3a00000 	mov	r0, #0
 2f4:	e8bd8070 	pop	{r4, r5, r6, pc}
 2f8:	e3a00000 	mov	r0, #0
 2fc:	e12fff1e 	bx	lr
 300:	e1dec0ba 	ldrh	ip, [lr, #10]
 304:	e0431001 	sub	r1, r3, r1
 308:	e6bf1071 	sxth	r1, r1
 30c:	e151000c 	cmp	r1, ip
 310:	aaffffea 	bge	2c0 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x84>
 314:	e59e3010 	ldr	r3, [lr, #16]
 318:	e083c101 	add	ip, r3, r1, lsl #2
 31c:	e7d33101 	ldrb	r3, [r3, r1, lsl #2]
 320:	e5c23000 	strb	r3, [r2]
 324:	e1dc30b2 	ldrh	r3, [ip, #2]
 328:	e1c230b2 	strh	r3, [r2, #2]
 32c:	e8bd8070 	pop	{r4, r5, r6, pc}
 330:	e59e101c 	ldr	r1, [lr, #28]
 334:	e081c103 	add	ip, r1, r3, lsl #2
 338:	e7d13103 	ldrb	r3, [r1, r3, lsl #2]
 33c:	e5c23000 	strb	r3, [r2]
 340:	e1dc30b2 	ldrh	r3, [ip, #2]
 344:	e1c230b2 	strh	r3, [r2, #2]
 348:	e8bd8070 	pop	{r4, r5, r6, pc}
 34c:	e7d53100 	ldrb	r3, [r5, r0, lsl #2]
 350:	e0850100 	add	r0, r5, r0, lsl #2
 354:	e5c23000 	strb	r3, [r2]
 358:	e1d030b2 	ldrh	r3, [r0, #2]
 35c:	e3a00001 	mov	r0, #1
 360:	e1c230b2 	strh	r3, [r2, #2]
 364:	e8bd8070 	pop	{r4, r5, r6, pc}

00000368 <SlushDmx::callbackFunction(char const*)>:
 368:	e92d4070 	push	{r4, r5, r6, lr}
 36c:	e1a04001 	mov	r4, r1
 370:	e24dd008 	sub	sp, sp, #8
 374:	e1a05000 	mov	r5, r0
 378:	e59f11a4 	ldr	r1, [pc, #420]	; 524 <SlushDmx::callbackFunction(char const*)+0x1bc>
 37c:	e1a00004 	mov	r0, r4
 380:	e28d2001 	add	r2, sp, #1
 384:	ebfffffe 	bl	0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 388:	e3500000 	cmp	r0, #0
 38c:	1a000004 	bne	3a4 <SlushDmx::callbackFunction(char const*)+0x3c>
 390:	e5dd3001 	ldrb	r3, [sp, #1]
 394:	e3530000 	cmp	r3, #0
 398:	13a03001 	movne	r3, #1
 39c:	15c53024 	strbne	r3, [r5, #36]	; 0x24
 3a0:	1a000008 	bne	3c8 <SlushDmx::callbackFunction(char const*)+0x60>
 3a4:	e1a00004 	mov	r0, r4
 3a8:	e59f1178 	ldr	r1, [pc, #376]	; 528 <SlushDmx::callbackFunction(char const*)+0x1c0>
 3ac:	e28d2002 	add	r2, sp, #2
 3b0:	ebfffffe 	bl	0 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 3b4:	e3500000 	cmp	r0, #0
 3b8:	1a000004 	bne	3d0 <SlushDmx::callbackFunction(char const*)+0x68>
 3bc:	e1dd30b2 	ldrh	r3, [sp, #2]
 3c0:	e3530c02 	cmp	r3, #512	; 0x200
 3c4:	91c530b8 	strhls	r3, [r5, #8]
 3c8:	e28dd008 	add	sp, sp, #8
 3cc:	e8bd8070 	pop	{r4, r5, r6, pc}
 3d0:	e1a00004 	mov	r0, r4
 3d4:	e59f1150 	ldr	r1, [pc, #336]	; 52c <SlushDmx::callbackFunction(char const*)+0x1c4>
 3d8:	e28d2002 	add	r2, sp, #2
 3dc:	ebfffffe 	bl	0 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 3e0:	e3500000 	cmp	r0, #0
 3e4:	1a000004 	bne	3fc <SlushDmx::callbackFunction(char const*)+0x94>
 3e8:	e1dd30b2 	ldrh	r3, [sp, #2]
 3ec:	e3530c02 	cmp	r3, #512	; 0x200
 3f0:	91c531b4 	strhls	r3, [r5, #20]
 3f4:	e28dd008 	add	sp, sp, #8
 3f8:	e8bd8070 	pop	{r4, r5, r6, pc}
 3fc:	e1a00004 	mov	r0, r4
 400:	e59f1128 	ldr	r1, [pc, #296]	; 530 <SlushDmx::callbackFunction(char const*)+0x1c8>
 404:	e28d2002 	add	r2, sp, #2
 408:	ebfffffe 	bl	0 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 40c:	e3500000 	cmp	r0, #0
 410:	1a000004 	bne	428 <SlushDmx::callbackFunction(char const*)+0xc0>
 414:	e1dd30b2 	ldrh	r3, [sp, #2]
 418:	e2432001 	sub	r2, r3, #1
 41c:	e3520007 	cmp	r2, #7
 420:	91c530ba 	strhls	r3, [r5, #10]
 424:	eaffffe7 	b	3c8 <SlushDmx::callbackFunction(char const*)+0x60>
 428:	e1a00004 	mov	r0, r4
 42c:	e59f1100 	ldr	r1, [pc, #256]	; 534 <SlushDmx::callbackFunction(char const*)+0x1cc>
 430:	e28d2002 	add	r2, sp, #2
 434:	ebfffffe 	bl	0 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 438:	e3500000 	cmp	r0, #0
 43c:	1a000004 	bne	454 <SlushDmx::callbackFunction(char const*)+0xec>
 440:	e1dd30b2 	ldrh	r3, [sp, #2]
 444:	e2432001 	sub	r2, r3, #1
 448:	e3520007 	cmp	r2, #7
 44c:	91c531b6 	strhls	r3, [r5, #22]
 450:	eaffffdc 	b	3c8 <SlushDmx::callbackFunction(char const*)+0x60>
 454:	e1a00004 	mov	r0, r4
 458:	e59f10d8 	ldr	r1, [pc, #216]	; 538 <SlushDmx::callbackFunction(char const*)+0x1d0>
 45c:	e285207c 	add	r2, r5, #124	; 0x7c
 460:	ebfffffe 	bl	0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 464:	e3500000 	cmp	r0, #0
 468:	0affffd6 	beq	3c8 <SlushDmx::callbackFunction(char const*)+0x60>
 46c:	e1a00004 	mov	r0, r4
 470:	e59f10c4 	ldr	r1, [pc, #196]	; 53c <SlushDmx::callbackFunction(char const*)+0x1d4>
 474:	e285207e 	add	r2, r5, #126	; 0x7e
 478:	ebfffffe 	bl	0 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 47c:	e3500000 	cmp	r0, #0
 480:	0affffd0 	beq	3c8 <SlushDmx::callbackFunction(char const*)+0x60>
 484:	e3a06080 	mov	r6, #128	; 0x80
 488:	e1a00004 	mov	r0, r4
 48c:	e595200c 	ldr	r2, [r5, #12]
 490:	e59f10a8 	ldr	r1, [pc, #168]	; 540 <SlushDmx::callbackFunction(char const*)+0x1d8>
 494:	e28d3004 	add	r3, sp, #4
 498:	e58d6004 	str	r6, [sp, #4]
 49c:	ebfffffe 	bl	0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 4a0:	e3500000 	cmp	r0, #0
 4a4:	1a000004 	bne	4bc <SlushDmx::callbackFunction(char const*)+0x154>
 4a8:	e59d3004 	ldr	r3, [sp, #4]
 4ac:	e3530006 	cmp	r3, #6
 4b0:	9595300c 	ldrls	r3, [r5, #12]
 4b4:	95c30000 	strbls	r0, [r3]
 4b8:	eaffffc2 	b	3c8 <SlushDmx::callbackFunction(char const*)+0x60>
 4bc:	e1a00004 	mov	r0, r4
 4c0:	e5952018 	ldr	r2, [r5, #24]
 4c4:	e59f1078 	ldr	r1, [pc, #120]	; 544 <SlushDmx::callbackFunction(char const*)+0x1dc>
 4c8:	e28d3004 	add	r3, sp, #4
 4cc:	e58d6004 	str	r6, [sp, #4]
 4d0:	ebfffffe 	bl	0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 4d4:	e3500000 	cmp	r0, #0
 4d8:	1a000003 	bne	4ec <SlushDmx::callbackFunction(char const*)+0x184>
 4dc:	e59d3004 	ldr	r3, [sp, #4]
 4e0:	e3530006 	cmp	r3, #6
 4e4:	95953018 	ldrls	r3, [r5, #24]
 4e8:	95c30000 	strbls	r0, [r3]
 4ec:	e3a0c080 	mov	ip, #128	; 0x80
 4f0:	e1a00004 	mov	r0, r4
 4f4:	e5952084 	ldr	r2, [r5, #132]	; 0x84
 4f8:	e59f1048 	ldr	r1, [pc, #72]	; 548 <SlushDmx::callbackFunction(char const*)+0x1e0>
 4fc:	e28d3004 	add	r3, sp, #4
 500:	e58dc004 	str	ip, [sp, #4]
 504:	ebfffffe 	bl	0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 508:	e3500000 	cmp	r0, #0
 50c:	1affffad 	bne	3c8 <SlushDmx::callbackFunction(char const*)+0x60>
 510:	e59d3004 	ldr	r3, [sp, #4]
 514:	e3530006 	cmp	r3, #6
 518:	95953084 	ldrls	r3, [r5, #132]	; 0x84
 51c:	95c30000 	strbls	r0, [r3]
 520:	eaffffa8 	b	3c8 <SlushDmx::callbackFunction(char const*)+0x60>
 524:	00000034 	andeq	r0, r0, r4, lsr r0
 528:	00000044 	andeq	r0, r0, r4, asr #32
 52c:	00000060 	andeq	r0, r0, r0, rrx
 530:	0000007c 	andeq	r0, r0, ip, ror r0
 534:	00000094 	muleq	r0, r4, r0
 538:	000000ac 	andeq	r0, r0, ip, lsr #1
 53c:	000000b8 	strheq	r0, [r0], -r8
 540:	000000cc 	andeq	r0, r0, ip, asr #1
 544:	000000e4 	andeq	r0, r0, r4, ror #1
 548:	000000fc 	strdeq	r0, [r0], -ip

0000054c <SlushDmx::staticCallbackFunction(void*, char const*)>:
 54c:	eafffffe 	b	368 <SlushDmx::callbackFunction(char const*)>

00000550 <SlushDmx::SlushDmx(bool)>:
 550:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 554:	e1a04000 	mov	r4, r0
 558:	e3a05000 	mov	r5, #0
 55c:	e1a06001 	mov	r6, r1
 560:	ebfffffe 	bl	0 <LightSet::LightSet()>
 564:	e59f20d0 	ldr	r2, [pc, #208]	; 63c <SlushDmx::SlushDmx(bool)+0xec>
 568:	e59f30d0 	ldr	r3, [pc, #208]	; 640 <SlushDmx::SlushDmx(bool)+0xf0>
 56c:	e5842080 	str	r2, [r4, #128]	; 0x80
 570:	e5843000 	str	r3, [r4]
 574:	e5c46024 	strb	r6, [r4, #36]	; 0x24
 578:	e3a00001 	mov	r0, #1
 57c:	e1c450b4 	strh	r5, [r4, #4]
 580:	e5845028 	str	r5, [r4, #40]	; 0x28
 584:	ebfffffe 	bl	0 <operator new(unsigned int)>
 588:	e3a07702 	mov	r7, #524288	; 0x80000
 58c:	e1a06000 	mov	r6, r0
 590:	ebfffffe 	bl	0 <SlushBoard::SlushBoard()>
 594:	e3a03007 	mov	r3, #7
 598:	e3a00080 	mov	r0, #128	; 0x80
 59c:	e5c4307c 	strb	r3, [r4, #124]	; 0x7c
 5a0:	e1c457be 	strh	r5, [r4, #126]	; 0x7e
 5a4:	e5847008 	str	r7, [r4, #8]
 5a8:	e5846020 	str	r6, [r4, #32]
 5ac:	ebfffffe 	bl	0 <operator new[](unsigned int)>
 5b0:	e1a03000 	mov	r3, r0
 5b4:	e5c45006 	strb	r5, [r4, #6]
 5b8:	e584300c 	str	r3, [r4, #12]
 5bc:	e3a00080 	mov	r0, #128	; 0x80
 5c0:	e5845010 	str	r5, [r4, #16]
 5c4:	e5847014 	str	r7, [r4, #20]
 5c8:	ebfffffe 	bl	0 <operator new[](unsigned int)>
 5cc:	e584501c 	str	r5, [r4, #28]
 5d0:	e5c45007 	strb	r5, [r4, #7]
 5d4:	e284302c 	add	r3, r4, #44	; 0x2c
 5d8:	e284203c 	add	r2, r4, #60	; 0x3c
 5dc:	e5840018 	str	r0, [r4, #24]
 5e0:	e4835004 	str	r5, [r3], #4
 5e4:	e1530002 	cmp	r3, r2
 5e8:	e583500c 	str	r5, [r3, #12]
 5ec:	e583501c 	str	r5, [r3, #28]
 5f0:	e583502c 	str	r5, [r3, #44]	; 0x2c
 5f4:	e583503c 	str	r5, [r3, #60]	; 0x3c
 5f8:	1afffff8 	bne	5e0 <SlushDmx::SlushDmx(bool)+0x90>
 5fc:	e3a00080 	mov	r0, #128	; 0x80
 600:	ebfffffe 	bl	0 <operator new[](unsigned int)>
 604:	e3a03000 	mov	r3, #0
 608:	e1a02003 	mov	r2, r3
 60c:	e5840084 	str	r0, [r4, #132]	; 0x84
 610:	e594100c 	ldr	r1, [r4, #12]
 614:	e7c12003 	strb	r2, [r1, r3]
 618:	e5941018 	ldr	r1, [r4, #24]
 61c:	e7c12003 	strb	r2, [r1, r3]
 620:	e5941084 	ldr	r1, [r4, #132]	; 0x84
 624:	e7c12003 	strb	r2, [r1, r3]
 628:	e2833001 	add	r3, r3, #1
 62c:	e3530080 	cmp	r3, #128	; 0x80
 630:	1afffff6 	bne	610 <SlushDmx::SlushDmx(bool)+0xc0>
 634:	e1a00004 	mov	r0, r4
 638:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 63c:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
 640:	00000008 	andeq	r0, r0, r8

00000644 <SlushDmx::ReadConfigFiles()>:
 644:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 648:	e1a04000 	mov	r4, r0
 64c:	e3a05000 	mov	r5, #0
 650:	e24dd054 	sub	sp, sp, #84	; 0x54
 654:	e1a02004 	mov	r2, r4
 658:	e59f1544 	ldr	r1, [pc, #1348]	; ba4 <SlushDmx::ReadConfigFiles()+0x560>
 65c:	e28d000c 	add	r0, sp, #12
 660:	ebfffffe 	bl	0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 664:	e59f153c 	ldr	r1, [pc, #1340]	; ba8 <SlushDmx::ReadConfigFiles()+0x564>
 668:	e28d000c 	add	r0, sp, #12
 66c:	e1c450b8 	strh	r5, [r4, #8]
 670:	e1c451b4 	strh	r5, [r4, #20]
 674:	ebfffffe 	bl	0 <ReadConfigFile::Read(char const*)>
 678:	e1500005 	cmp	r0, r5
 67c:	0a000037 	beq	760 <SlushDmx::ReadConfigFiles()+0x11c>
 680:	e1d420b8 	ldrh	r2, [r4, #8]
 684:	e1520005 	cmp	r2, r5
 688:	0a000031 	beq	754 <SlushDmx::ReadConfigFiles()+0x110>
 68c:	e1d430ba 	ldrh	r3, [r4, #10]
 690:	e1530005 	cmp	r3, r5
 694:	0a000138 	beq	b7c <SlushDmx::ReadConfigFiles()+0x538>
 698:	e3a03000 	mov	r3, #0
 69c:	e6ef2075 	uxtb	r2, r5
 6a0:	e1a01003 	mov	r1, r3
 6a4:	e5940020 	ldr	r0, [r4, #32]
 6a8:	ebfffffe 	bl	0 <SlushBoard::IOFSel(TSlushIOPorts, TSlushIOPins, TSlushIOFSel)>
 6ac:	e1d430ba 	ldrh	r3, [r4, #10]
 6b0:	e2855001 	add	r5, r5, #1
 6b4:	e1530005 	cmp	r3, r5
 6b8:	8afffff6 	bhi	698 <SlushDmx::ReadConfigFiles()+0x54>
 6bc:	e1d420b8 	ldrh	r2, [r4, #8]
 6c0:	e1a00103 	lsl	r0, r3, #2
 6c4:	e1c438b2 	strh	r3, [r4, #130]	; 0x82
 6c8:	e3a03001 	mov	r3, #1
 6cc:	e1c428b0 	strh	r2, [r4, #128]	; 0x80
 6d0:	e5c43004 	strb	r3, [r4, #4]
 6d4:	ebfffffe 	bl	0 <operator new[](unsigned int)>
 6d8:	e1a02000 	mov	r2, r0
 6dc:	e1d430ba 	ldrh	r3, [r4, #10]
 6e0:	e594000c 	ldr	r0, [r4, #12]
 6e4:	e3530000 	cmp	r3, #0
 6e8:	e5842010 	str	r2, [r4, #16]
 6ec:	0a000018 	beq	754 <SlushDmx::ReadConfigFiles()+0x110>
 6f0:	e3a05000 	mov	r5, #0
 6f4:	e3e07000 	mvn	r7, #0
 6f8:	e1a06005 	mov	r6, r5
 6fc:	ea000008 	b	724 <SlushDmx::ReadConfigFiles()+0xe0>
 700:	e28d1020 	add	r1, sp, #32
 704:	ebfffffe 	bl	0 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)>
 708:	e5dd3020 	ldrb	r3, [sp, #32]
 70c:	e3530000 	cmp	r3, #0
 710:	0a0000a8 	beq	9b8 <SlushDmx::ReadConfigFiles()+0x374>
 714:	e1d430ba 	ldrh	r3, [r4, #10]
 718:	e1530005 	cmp	r3, r5
 71c:	9a00000c 	bls	754 <SlushDmx::ReadConfigFiles()+0x110>
 720:	e5942010 	ldr	r2, [r4, #16]
 724:	e0822105 	add	r2, r2, r5, lsl #2
 728:	e3500000 	cmp	r0, #0
 72c:	e1a08105 	lsl	r8, r5, #2
 730:	e2823002 	add	r3, r2, #2
 734:	e5cd6020 	strb	r6, [sp, #32]
 738:	e2855001 	add	r5, r5, #1
 73c:	1affffef 	bne	700 <SlushDmx::ReadConfigFiles()+0xbc>
 740:	e5c26000 	strb	r6, [r2]
 744:	e1d430ba 	ldrh	r3, [r4, #10]
 748:	e1c270b2 	strh	r7, [r2, #2]
 74c:	e1530005 	cmp	r3, r5
 750:	8afffff2 	bhi	720 <SlushDmx::ReadConfigFiles()+0xdc>
 754:	e1d421b4 	ldrh	r2, [r4, #20]
 758:	e3520000 	cmp	r2, #0
 75c:	1a000054 	bne	8b4 <SlushDmx::ReadConfigFiles()+0x270>
 760:	e3a05000 	mov	r5, #0
 764:	e1a08005 	mov	r8, r5
 768:	e59f243c 	ldr	r2, [pc, #1084]	; bac <SlushDmx::ReadConfigFiles()+0x568>
 76c:	e28d3014 	add	r3, sp, #20
 770:	e8920007 	ldm	r2, {r0, r1, r2}
 774:	e8a30003 	stmia	r3!, {r0, r1}
 778:	e59f7430 	ldr	r7, [pc, #1072]	; bb0 <SlushDmx::ReadConfigFiles()+0x56c>
 77c:	e0c320b2 	strh	r2, [r3], #2
 780:	e1a02822 	lsr	r2, r2, #16
 784:	e284602c 	add	r6, r4, #44	; 0x2c
 788:	e5c32000 	strb	r2, [r3]
 78c:	e5943084 	ldr	r3, [r4, #132]	; 0x84
 790:	e2852030 	add	r2, r5, #48	; 0x30
 794:	e5cd2019 	strb	r2, [sp, #25]
 798:	e28d1014 	add	r1, sp, #20
 79c:	e28d000c 	add	r0, sp, #12
 7a0:	e5c38000 	strb	r8, [r3]
 7a4:	ebfffffe 	bl	0 <ReadConfigFile::Read(char const*)>
 7a8:	e3500000 	cmp	r0, #0
 7ac:	0a000002 	beq	7bc <SlushDmx::ReadConfigFiles()+0x178>
 7b0:	e1d437be 	ldrh	r3, [r4, #126]	; 0x7e
 7b4:	e3530c02 	cmp	r3, #512	; 0x200
 7b8:	9a000026 	bls	858 <SlushDmx::ReadConfigFiles()+0x214>
 7bc:	e2855001 	add	r5, r5, #1
 7c0:	e3550004 	cmp	r5, #4
 7c4:	e2866004 	add	r6, r6, #4
 7c8:	1affffef 	bne	78c <SlushDmx::ReadConfigFiles()+0x148>
 7cc:	e284605c 	add	r6, r4, #92	; 0x5c
 7d0:	e1a05006 	mov	r5, r6
 7d4:	e284406c 	add	r4, r4, #108	; 0x6c
 7d8:	e4950004 	ldr	r0, [r5], #4
 7dc:	e3500000 	cmp	r0, #0
 7e0:	0a000000 	beq	7e8 <SlushDmx::ReadConfigFiles()+0x1a4>
 7e4:	ebfffffe 	bl	0 <L6470DmxModes::InitSwitch()>
 7e8:	e1540005 	cmp	r4, r5
 7ec:	1afffff9 	bne	7d8 <SlushDmx::ReadConfigFiles()+0x194>
 7f0:	e1a05006 	mov	r5, r6
 7f4:	e5153030 	ldr	r3, [r5, #-48]	; 0xffffffd0
 7f8:	e3530000 	cmp	r3, #0
 7fc:	1a00000c 	bne	834 <SlushDmx::ReadConfigFiles()+0x1f0>
 800:	e2855004 	add	r5, r5, #4
 804:	e1540005 	cmp	r4, r5
 808:	1afffff9 	bne	7f4 <SlushDmx::ReadConfigFiles()+0x1b0>
 80c:	e4960004 	ldr	r0, [r6], #4
 810:	e3500000 	cmp	r0, #0
 814:	0a000000 	beq	81c <SlushDmx::ReadConfigFiles()+0x1d8>
 818:	ebfffffe 	bl	0 <L6470DmxModes::InitPos()>
 81c:	e1540006 	cmp	r4, r6
 820:	1afffff9 	bne	80c <SlushDmx::ReadConfigFiles()+0x1c8>
 824:	e28d000c 	add	r0, sp, #12
 828:	ebfffffe 	bl	0 <ReadConfigFile::~ReadConfigFile()>
 82c:	e28dd054 	add	sp, sp, #84	; 0x54
 830:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 834:	e5950000 	ldr	r0, [r5]
 838:	ebfffffe 	bl	0 <L6470DmxModes::BusyCheck()>
 83c:	e3500000 	cmp	r0, #0
 840:	0affffee 	beq	800 <SlushDmx::ReadConfigFiles()+0x1bc>
 844:	e5950000 	ldr	r0, [r5]
 848:	ebfffffe 	bl	0 <L6470DmxModes::BusyCheck()>
 84c:	e3500000 	cmp	r0, #0
 850:	1afffff7 	bne	834 <SlushDmx::ReadConfigFiles()+0x1f0>
 854:	eaffffe9 	b	800 <SlushDmx::ReadConfigFiles()+0x1bc>
 858:	e5d4007c 	ldrb	r0, [r4, #124]	; 0x7c
 85c:	ebfffffe 	bl	0 <L6470DmxModes::GetDmxFootPrintMode(unsigned int)>
 860:	e3500000 	cmp	r0, #0
 864:	0affffd4 	beq	7bc <SlushDmx::ReadConfigFiles()+0x178>
 868:	e3a00014 	mov	r0, #20
 86c:	ebfffffe 	bl	0 <operator new(unsigned int)>
 870:	e1a09000 	mov	r9, r0
 874:	e1a01005 	mov	r1, r5
 878:	e5d42024 	ldrb	r2, [r4, #36]	; 0x24
 87c:	ebfffffe 	bl	0 <SlushMotor::SlushMotor(unsigned int, bool)>
 880:	e1a00009 	mov	r0, r9
 884:	e5869000 	str	r9, [r6]
 888:	ebfffffe 	bl	0 <SlushMotor::IsConnected() const>
 88c:	e3500000 	cmp	r0, #0
 890:	1a00004e 	bne	9d0 <SlushDmx::ReadConfigFiles()+0x38c>
 894:	e5960000 	ldr	r0, [r6]
 898:	e3500000 	cmp	r0, #0
 89c:	0a000002 	beq	8ac <SlushDmx::ReadConfigFiles()+0x268>
 8a0:	e5903000 	ldr	r3, [r0]
 8a4:	e5933004 	ldr	r3, [r3, #4]
 8a8:	e12fff33 	blx	r3
 8ac:	e5868000 	str	r8, [r6]
 8b0:	eaffffc1 	b	7bc <SlushDmx::ReadConfigFiles()+0x178>
 8b4:	e1d431b6 	ldrh	r3, [r4, #22]
 8b8:	e3530000 	cmp	r3, #0
 8bc:	0a0000ac 	beq	b74 <SlushDmx::ReadConfigFiles()+0x530>
 8c0:	e3a05000 	mov	r5, #0
 8c4:	e3a03000 	mov	r3, #0
 8c8:	e6ef2075 	uxtb	r2, r5
 8cc:	e3a01001 	mov	r1, #1
 8d0:	e5940020 	ldr	r0, [r4, #32]
 8d4:	ebfffffe 	bl	0 <SlushBoard::IOFSel(TSlushIOPorts, TSlushIOPins, TSlushIOFSel)>
 8d8:	e1d431b6 	ldrh	r3, [r4, #22]
 8dc:	e2855001 	add	r5, r5, #1
 8e0:	e1530005 	cmp	r3, r5
 8e4:	8afffff6 	bhi	8c4 <SlushDmx::ReadConfigFiles()+0x280>
 8e8:	e1d421b4 	ldrh	r2, [r4, #20]
 8ec:	e1a00103 	lsl	r0, r3, #2
 8f0:	e3a01001 	mov	r1, #1
 8f4:	e59fc2b4 	ldr	ip, [pc, #692]	; bb0 <SlushDmx::ReadConfigFiles()+0x56c>
 8f8:	e5c41005 	strb	r1, [r4, #5]
 8fc:	e1d418b0 	ldrh	r1, [r4, #128]	; 0x80
 900:	e151000c 	cmp	r1, ip
 904:	01c428b0 	strheq	r2, [r4, #128]	; 0x80
 908:	01c438b2 	strheq	r3, [r4, #130]	; 0x82
 90c:	0a00000b 	beq	940 <SlushDmx::ReadConfigFiles()+0x2fc>
 910:	e1510002 	cmp	r1, r2
 914:	e0823003 	add	r3, r2, r3
 918:	31a02001 	movcc	r2, r1
 91c:	e1d4c8b2 	ldrh	ip, [r4, #130]	; 0x82
 920:	e6ff3073 	uxth	r3, r3
 924:	e081100c 	add	r1, r1, ip
 928:	e6ff1071 	uxth	r1, r1
 92c:	e1530001 	cmp	r3, r1
 930:	2062c003 	rsbcs	ip, r2, r3
 934:	3062c001 	rsbcc	ip, r2, r1
 938:	e1c428b0 	strh	r2, [r4, #128]	; 0x80
 93c:	e1c4c8b2 	strh	ip, [r4, #130]	; 0x82
 940:	ebfffffe 	bl	0 <operator new[](unsigned int)>
 944:	e1a02000 	mov	r2, r0
 948:	e1d431b6 	ldrh	r3, [r4, #22]
 94c:	e5940018 	ldr	r0, [r4, #24]
 950:	e3530000 	cmp	r3, #0
 954:	e584201c 	str	r2, [r4, #28]
 958:	0affff80 	beq	760 <SlushDmx::ReadConfigFiles()+0x11c>
 95c:	e3a05000 	mov	r5, #0
 960:	e3e07000 	mvn	r7, #0
 964:	e1a06005 	mov	r6, r5
 968:	ea000008 	b	990 <SlushDmx::ReadConfigFiles()+0x34c>
 96c:	e28d1020 	add	r1, sp, #32
 970:	ebfffffe 	bl	0 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)>
 974:	e5dd3020 	ldrb	r3, [sp, #32]
 978:	e3530000 	cmp	r3, #0
 97c:	0a000010 	beq	9c4 <SlushDmx::ReadConfigFiles()+0x380>
 980:	e1d431b6 	ldrh	r3, [r4, #22]
 984:	e1530005 	cmp	r3, r5
 988:	9affff74 	bls	760 <SlushDmx::ReadConfigFiles()+0x11c>
 98c:	e594201c 	ldr	r2, [r4, #28]
 990:	e0822105 	add	r2, r2, r5, lsl #2
 994:	e3500000 	cmp	r0, #0
 998:	e1a08105 	lsl	r8, r5, #2
 99c:	e2823002 	add	r3, r2, #2
 9a0:	e5cd6020 	strb	r6, [sp, #32]
 9a4:	e2855001 	add	r5, r5, #1
 9a8:	1affffef 	bne	96c <SlushDmx::ReadConfigFiles()+0x328>
 9ac:	e5c26000 	strb	r6, [r2]
 9b0:	e1c270b2 	strh	r7, [r2, #2]
 9b4:	eafffff1 	b	980 <SlushDmx::ReadConfigFiles()+0x33c>
 9b8:	e5942010 	ldr	r2, [r4, #16]
 9bc:	e0822008 	add	r2, r2, r8
 9c0:	eaffff5e 	b	740 <SlushDmx::ReadConfigFiles()+0xfc>
 9c4:	e594201c 	ldr	r2, [r4, #28]
 9c8:	e0822008 	add	r2, r2, r8
 9cc:	eafffff6 	b	9ac <SlushDmx::ReadConfigFiles()+0x368>
 9d0:	e5943028 	ldr	r3, [r4, #40]	; 0x28
 9d4:	e5960000 	ldr	r0, [r6]
 9d8:	e2833001 	add	r3, r3, #1
 9dc:	e5843028 	str	r3, [r4, #40]	; 0x28
 9e0:	ebfffffe 	bl	0 <L6470::Dump()>
 9e4:	e3a0002c 	mov	r0, #44	; 0x2c
 9e8:	ebfffffe 	bl	0 <operator new(unsigned int)>
 9ec:	e1a09000 	mov	r9, r0
 9f0:	e3a01000 	mov	r1, #0
 9f4:	ebfffffe 	bl	0 <MotorParams::MotorParams(MotorParamsStore*)>
 9f8:	e1a01005 	mov	r1, r5
 9fc:	e1a00009 	mov	r0, r9
 a00:	e5869010 	str	r9, [r6, #16]
 a04:	ebfffffe 	bl	0 <MotorParams::Load(unsigned int)>
 a08:	e5960010 	ldr	r0, [r6, #16]
 a0c:	ebfffffe 	bl	0 <MotorParams::Dump()>
 a10:	e5961000 	ldr	r1, [r6]
 a14:	e5960010 	ldr	r0, [r6, #16]
 a18:	ebfffffe 	bl	0 <MotorParams::Set(L6470*)>
 a1c:	e3a01000 	mov	r1, #0
 a20:	e28d0020 	add	r0, sp, #32
 a24:	ebfffffe 	bl	0 <L6470Params::L6470Params(L6470ParamsStore*)>
 a28:	e1a01005 	mov	r1, r5
 a2c:	e28d0020 	add	r0, sp, #32
 a30:	ebfffffe 	bl	0 <L6470Params::Load(unsigned int)>
 a34:	e28d0020 	add	r0, sp, #32
 a38:	ebfffffe 	bl	0 <L6470Params::Dump()>
 a3c:	e5961000 	ldr	r1, [r6]
 a40:	e28d0020 	add	r0, sp, #32
 a44:	ebfffffe 	bl	0 <L6470Params::Set(L6470*)>
 a48:	e5960000 	ldr	r0, [r6]
 a4c:	ebfffffe 	bl	0 <L6470::Dump()>
 a50:	e3a0003c 	mov	r0, #60	; 0x3c
 a54:	ebfffffe 	bl	0 <operator new(unsigned int)>
 a58:	e1a09000 	mov	r9, r0
 a5c:	e3a01000 	mov	r1, #0
 a60:	ebfffffe 	bl	0 <ModeParams::ModeParams(ModeParamsStore*)>
 a64:	e1a01005 	mov	r1, r5
 a68:	e1a00009 	mov	r0, r9
 a6c:	e5869020 	str	r9, [r6, #32]
 a70:	ebfffffe 	bl	0 <ModeParams::Load(unsigned int)>
 a74:	e5960020 	ldr	r0, [r6, #32]
 a78:	ebfffffe 	bl	0 <ModeParams::Dump()>
 a7c:	e3a00014 	mov	r0, #20
 a80:	ebfffffe 	bl	0 <operator new(unsigned int)>
 a84:	e1a09000 	mov	r9, r0
 a88:	e5963020 	ldr	r3, [r6, #32]
 a8c:	e58d3004 	str	r3, [sp, #4]
 a90:	e5963010 	ldr	r3, [r6, #16]
 a94:	e58d3000 	str	r3, [sp]
 a98:	e5963000 	ldr	r3, [r6]
 a9c:	e1d427be 	ldrh	r2, [r4, #126]	; 0x7e
 aa0:	e5d4107c 	ldrb	r1, [r4, #124]	; 0x7c
 aa4:	ebfffffe 	bl	0 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)>
 aa8:	e1d438b0 	ldrh	r3, [r4, #128]	; 0x80
 aac:	e5869030 	str	r9, [r6, #48]	; 0x30
 ab0:	e1530007 	cmp	r3, r7
 ab4:	0a000032 	beq	b84 <SlushDmx::ReadConfigFiles()+0x540>
 ab8:	e1d910b4 	ldrh	r1, [r9, #4]
 abc:	e1d428b2 	ldrh	r2, [r4, #130]	; 0x82
 ac0:	e1510003 	cmp	r1, r3
 ac4:	21a01003 	movcs	r1, r3
 ac8:	e1d900bc 	ldrh	r0, [r9, #12]
 acc:	e0833002 	add	r3, r3, r2
 ad0:	e1d427be 	ldrh	r2, [r4, #126]	; 0x7e
 ad4:	e6ff3073 	uxth	r3, r3
 ad8:	e0802002 	add	r2, r0, r2
 adc:	e6ff2072 	uxth	r2, r2
 ae0:	e1520003 	cmp	r2, r3
 ae4:	2061c002 	rsbcs	ip, r1, r2
 ae8:	3061c003 	rsbcc	ip, r1, r3
 aec:	e1c418b0 	strh	r1, [r4, #128]	; 0x80
 af0:	e1c4c8b2 	strh	ip, [r4, #130]	; 0x82
 af4:	e1a00100 	lsl	r0, r0, #2
 af8:	ebfffffe 	bl	0 <operator new[](unsigned int)>
 afc:	e1a02000 	mov	r2, r0
 b00:	e5963030 	ldr	r3, [r6, #48]	; 0x30
 b04:	e5940084 	ldr	r0, [r4, #132]	; 0x84
 b08:	e1d330bc 	ldrh	r3, [r3, #12]
 b0c:	e5862040 	str	r2, [r6, #64]	; 0x40
 b10:	e3530000 	cmp	r3, #0
 b14:	0affff28 	beq	7bc <SlushDmx::ReadConfigFiles()+0x178>
 b18:	e3a09000 	mov	r9, #0
 b1c:	e3e0b000 	mvn	fp, #0
 b20:	ea00000a 	b	b50 <SlushDmx::ReadConfigFiles()+0x50c>
 b24:	e2823002 	add	r3, r2, #2
 b28:	e28d100b 	add	r1, sp, #11
 b2c:	ebfffffe 	bl	0 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)>
 b30:	e5dd300b 	ldrb	r3, [sp, #11]
 b34:	e3530000 	cmp	r3, #0
 b38:	0a000016 	beq	b98 <SlushDmx::ReadConfigFiles()+0x554>
 b3c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
 b40:	e1d330bc 	ldrh	r3, [r3, #12]
 b44:	e1530009 	cmp	r3, r9
 b48:	9affff1b 	bls	7bc <SlushDmx::ReadConfigFiles()+0x178>
 b4c:	e5962040 	ldr	r2, [r6, #64]	; 0x40
 b50:	e3500000 	cmp	r0, #0
 b54:	e0822109 	add	r2, r2, r9, lsl #2
 b58:	e1a0a109 	lsl	sl, r9, #2
 b5c:	e5cd800b 	strb	r8, [sp, #11]
 b60:	e2899001 	add	r9, r9, #1
 b64:	1affffee 	bne	b24 <SlushDmx::ReadConfigFiles()+0x4e0>
 b68:	e5c28000 	strb	r8, [r2]
 b6c:	e1c2b0b2 	strh	fp, [r2, #2]
 b70:	eafffff1 	b	b3c <SlushDmx::ReadConfigFiles()+0x4f8>
 b74:	e1a00003 	mov	r0, r3
 b78:	eaffff5c 	b	8f0 <SlushDmx::ReadConfigFiles()+0x2ac>
 b7c:	e1a00003 	mov	r0, r3
 b80:	eafffecf 	b	6c4 <SlushDmx::ReadConfigFiles()+0x80>
 b84:	e1d930b4 	ldrh	r3, [r9, #4]
 b88:	e1d900bc 	ldrh	r0, [r9, #12]
 b8c:	e1c438b0 	strh	r3, [r4, #128]	; 0x80
 b90:	e1c408b2 	strh	r0, [r4, #130]	; 0x82
 b94:	eaffffd6 	b	af4 <SlushDmx::ReadConfigFiles()+0x4b0>
 b98:	e5962040 	ldr	r2, [r6, #64]	; 0x40
 b9c:	e082200a 	add	r2, r2, sl
 ba0:	eafffff0 	b	b68 <SlushDmx::ReadConfigFiles()+0x524>
	...
 bac:	0000000c 	andeq	r0, r0, ip
 bb0:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

00000bb4 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)>:
 bb4:	e5d03004 	ldrb	r3, [r0, #4]
 bb8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 bbc:	e3530000 	cmp	r3, #0
 bc0:	e1a05000 	mov	r5, r0
 bc4:	e1a06001 	mov	r6, r1
 bc8:	e1a04002 	mov	r4, r2
 bcc:	0a00001b 	beq	c40 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x8c>
 bd0:	e1d010b8 	ldrh	r1, [r0, #8]
 bd4:	e1510002 	cmp	r1, r2
 bd8:	8a000018 	bhi	c40 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x8c>
 bdc:	e1d0e0ba 	ldrh	lr, [r0, #10]
 be0:	e35e0000 	cmp	lr, #0
 be4:	0a00003e 	beq	ce4 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x130>
 be8:	e3a00000 	mov	r0, #0
 bec:	e2817001 	add	r7, r1, #1
 bf0:	e2411002 	sub	r1, r1, #2
 bf4:	e3a08001 	mov	r8, #1
 bf8:	e1a02000 	mov	r2, r0
 bfc:	e6ff7077 	uxth	r7, r7
 c00:	e0861001 	add	r1, r6, r1
 c04:	ea000001 	b	c10 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x5c>
 c08:	e1530004 	cmp	r3, r4
 c0c:	8a000008 	bhi	c34 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x80>
 c10:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
 c14:	e0873000 	add	r3, r7, r0
 c18:	e35c0000 	cmp	ip, #0
 c1c:	b1822018 	orrlt	r2, r2, r8, lsl r0
 c20:	e2800001 	add	r0, r0, #1
 c24:	b6ef2072 	uxtblt	r2, r2
 c28:	e150000e 	cmp	r0, lr
 c2c:	e6ff3073 	uxth	r3, r3
 c30:	1afffff4 	bne	c08 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x54>
 c34:	e5d53006 	ldrb	r3, [r5, #6]
 c38:	e1530002 	cmp	r3, r2
 c3c:	1a000023 	bne	cd0 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x11c>
 c40:	e5d53005 	ldrb	r3, [r5, #5]
 c44:	e3530000 	cmp	r3, #0
 c48:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
 c4c:	e1d531b4 	ldrh	r3, [r5, #20]
 c50:	e1530004 	cmp	r3, r4
 c54:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
 c58:	e1d5e1b6 	ldrh	lr, [r5, #22]
 c5c:	e35e0000 	cmp	lr, #0
 c60:	0a000021 	beq	cec <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x138>
 c64:	e3a0c000 	mov	ip, #0
 c68:	e2830001 	add	r0, r3, #1
 c6c:	e2433002 	sub	r3, r3, #2
 c70:	e3a07001 	mov	r7, #1
 c74:	e1a0200c 	mov	r2, ip
 c78:	e0866003 	add	r6, r6, r3
 c7c:	e6ff0070 	uxth	r0, r0
 c80:	ea000001 	b	c8c <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0xd8>
 c84:	e1530004 	cmp	r3, r4
 c88:	8a000008 	bhi	cb0 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0xfc>
 c8c:	e1f610d1 	ldrsb	r1, [r6, #1]!
 c90:	e080300c 	add	r3, r0, ip
 c94:	e3510000 	cmp	r1, #0
 c98:	b1822c17 	orrlt	r2, r2, r7, lsl ip
 c9c:	e28cc001 	add	ip, ip, #1
 ca0:	b6ef2072 	uxtblt	r2, r2
 ca4:	e15c000e 	cmp	ip, lr
 ca8:	e6ff3073 	uxth	r3, r3
 cac:	1afffff4 	bne	c84 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0xd0>
 cb0:	e5d53007 	ldrb	r3, [r5, #7]
 cb4:	e1530002 	cmp	r3, r2
 cb8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
 cbc:	e5c52007 	strb	r2, [r5, #7]
 cc0:	e5950020 	ldr	r0, [r5, #32]
 cc4:	e3a01001 	mov	r1, #1
 cc8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 ccc:	eafffffe 	b	0 <SlushBoard::IOWrite(TSlushIOPorts, unsigned char)>
 cd0:	e3a01000 	mov	r1, #0
 cd4:	e5950020 	ldr	r0, [r5, #32]
 cd8:	e5c52006 	strb	r2, [r5, #6]
 cdc:	ebfffffe 	bl	0 <SlushBoard::IOWrite(TSlushIOPorts, unsigned char)>
 ce0:	eaffffd6 	b	c40 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x8c>
 ce4:	e1a0200e 	mov	r2, lr
 ce8:	eaffffd1 	b	c34 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x80>
 cec:	e1a0200e 	mov	r2, lr
 cf0:	eaffffee 	b	cb0 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0xfc>

00000cf4 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 cf4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 cf8:	e24dd014 	sub	sp, sp, #20
 cfc:	e28d400c 	add	r4, sp, #12
 d00:	e280505c 	add	r5, r0, #92	; 0x5c
 d04:	e1a06004 	mov	r6, r4
 d08:	e1a08002 	mov	r8, r2
 d0c:	e1a09003 	mov	r9, r3
 d10:	e1a0b005 	mov	fp, r5
 d14:	e28d7010 	add	r7, sp, #16
 d18:	e58d0004 	str	r0, [sp, #4]
 d1c:	e49b0004 	ldr	r0, [fp], #4
 d20:	e3500000 	cmp	r0, #0
 d24:	05c60000 	strbeq	r0, [r6]
 d28:	0a000005 	beq	d44 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x50>
 d2c:	e1a02009 	mov	r2, r9
 d30:	e1a01008 	mov	r1, r8
 d34:	ebfffffe 	bl	0 <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)>
 d38:	e3500000 	cmp	r0, #0
 d3c:	e5c60000 	strb	r0, [r6]
 d40:	1a000026 	bne	de0 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xec>
 d44:	e2866001 	add	r6, r6, #1
 d48:	e1560007 	cmp	r6, r7
 d4c:	1afffff2 	bne	d1c <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x28>
 d50:	e1a0a005 	mov	sl, r5
 d54:	e1a06004 	mov	r6, r4
 d58:	e59d3004 	ldr	r3, [sp, #4]
 d5c:	e283b06c 	add	fp, r3, #108	; 0x6c
 d60:	e4d62001 	ldrb	r2, [r6], #1
 d64:	e3520000 	cmp	r2, #0
 d68:	1a00000e 	bne	da8 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xb4>
 d6c:	e28aa004 	add	sl, sl, #4
 d70:	e15a000b 	cmp	sl, fp
 d74:	1afffff9 	bne	d60 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x6c>
 d78:	e4d43001 	ldrb	r3, [r4], #1
 d7c:	e3530000 	cmp	r3, #0
 d80:	1a000011 	bne	dcc <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xd8>
 d84:	e1540007 	cmp	r4, r7
 d88:	e2855004 	add	r5, r5, #4
 d8c:	1afffff9 	bne	d78 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x84>
 d90:	e1a02009 	mov	r2, r9
 d94:	e1a01008 	mov	r1, r8
 d98:	e59d0004 	ldr	r0, [sp, #4]
 d9c:	e28dd014 	add	sp, sp, #20
 da0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 da4:	eafffffe 	b	bb4 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)>
 da8:	e59a0000 	ldr	r0, [sl]
 dac:	ebfffffe 	bl	0 <L6470DmxModes::BusyCheck()>
 db0:	e3500000 	cmp	r0, #0
 db4:	0affffec 	beq	d6c <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>
 db8:	e59a0000 	ldr	r0, [sl]
 dbc:	ebfffffe 	bl	0 <L6470DmxModes::BusyCheck()>
 dc0:	e3500000 	cmp	r0, #0
 dc4:	1afffff7 	bne	da8 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xb4>
 dc8:	eaffffe7 	b	d6c <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>
 dcc:	e1a02009 	mov	r2, r9
 dd0:	e1a01008 	mov	r1, r8
 dd4:	e5950000 	ldr	r0, [r5]
 dd8:	ebfffffe 	bl	0 <L6470DmxModes::DmxData(unsigned char const*, unsigned int)>
 ddc:	eaffffe8 	b	d84 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x90>
 de0:	e51b0004 	ldr	r0, [fp, #-4]
 de4:	ebfffffe 	bl	0 <L6470DmxModes::HandleBusy()>
 de8:	eaffffd5 	b	d44 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x50>

Disassembly of section .text._ZN8LightSet8BlackoutEb:

00000000 <LightSet::Blackout(bool)>:
   0:	e12fff1e 	bx	lr

Disassembly of section .text._ZN8LightSet5PrintEv:

00000000 <LightSet::Print()>:
   0:	e12fff1e 	bx	lr

Disassembly of section .text._ZN8SlushDmx18GetDmxStartAddressEv:

00000000 <SlushDmx::GetDmxStartAddress()>:
   0:	e1d008b0 	ldrh	r0, [r0, #128]	; 0x80
   4:	e12fff1e 	bx	lr

Disassembly of section .text._ZN8SlushDmx15GetDmxFootprintEv:

00000000 <SlushDmx::GetDmxFootprint()>:
   0:	e1d008b2 	ldrh	r0, [r0, #130]	; 0x82
   4:	e12fff1e 	bx	lr

Disassembly of section .rodata.str1.4:

00000000 <.rodata.str1.4>:
   0:	73756c73 	cmnvc	r5, #29440	; 0x7300
   4:	78742e68 	ldmdavc	r4!, {r3, r5, r6, r9, sl, fp, sp}^
   8:	00000074 	andeq	r0, r0, r4, ror r0
   c:	6f746f6d 	svcvs	0x00746f6d
  10:	742e2572 	strtvc	r2, [lr], #-1394	; 0xfffffa8e
  14:	Address 0x0000000000000014 is out of bounds.


Disassembly of section .rodata:

00000000 <vtable for SlushDmx>:
	...

00000034 <PARAMS_SLUSH_USE_SPI>:
  34:	5f657375 	svcpl	0x00657375
  38:	5f697073 	svcpl	0x00697073
  3c:	79737562 	ldmdbvc	r3!, {r1, r5, r6, r8, sl, ip, sp, lr}^
  40:	00000000 	andeq	r0, r0, r0

00000044 <PARAMS_SLUSH_DMX_START_ADDRESS_PORT_A>:
  44:	5f786d64 	svcpl	0x00786d64
  48:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  4c:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
  50:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
  54:	6f705f73 	svcvs	0x00705f73
  58:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
  5c:	00000000 	andeq	r0, r0, r0

00000060 <PARAMS_SLUSH_DMX_START_ADDRESS_PORT_B>:
  60:	5f786d64 	svcpl	0x00786d64
  64:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  68:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
  6c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
  70:	6f705f73 	svcvs	0x00705f73
  74:	625f7472 	subsvs	r7, pc, #1912602624	; 0x72000000
  78:	00000000 	andeq	r0, r0, r0

0000007c <PARAMS_SLUSH_DMX_FOOTPRINT_PORT_A>:
  7c:	5f786d64 	svcpl	0x00786d64
  80:	746f6f66 	strbtvc	r6, [pc], #-3942	; 88 <PARAMS_SLUSH_DMX_FOOTPRINT_PORT_A+0xc>
  84:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
  88:	6f705f74 	svcvs	0x00705f74
  8c:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
  90:	00000000 	andeq	r0, r0, r0

00000094 <PARAMS_SLUSH_DMX_FOOTPRINT_PORT_B>:
  94:	5f786d64 	svcpl	0x00786d64
  98:	746f6f66 	strbtvc	r6, [pc], #-3942	; a0 <PARAMS_SLUSH_DMX_FOOTPRINT_PORT_B+0xc>
  9c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
  a0:	6f705f74 	svcvs	0x00705f74
  a4:	625f7472 	subsvs	r7, pc, #1912602624	; 0x72000000
  a8:	00000000 	andeq	r0, r0, r0

000000ac <PARAMS_DMX_MODE>:
  ac:	5f786d64 	svcpl	0x00786d64
  b0:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
  b4:	00000000 	andeq	r0, r0, r0

000000b8 <PARAMS_DMX_START_ADDRESS>:
  b8:	5f786d64 	svcpl	0x00786d64
  bc:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  c0:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
  c4:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
  c8:	00000073 	andeq	r0, r0, r3, ror r0

000000cc <PARAMS_DMX_SLOT_INFO_PORT_A>:
  cc:	5f786d64 	svcpl	0x00786d64
  d0:	746f6c73 	strbtvc	r6, [pc], #-3187	; d8 <PARAMS_DMX_SLOT_INFO_PORT_A+0xc>
  d4:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
  d8:	6f705f6f 	svcvs	0x00705f6f
  dc:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
  e0:	00000000 	andeq	r0, r0, r0

000000e4 <PARAMS_DMX_SLOT_INFO_PORT_B>:
  e4:	5f786d64 	svcpl	0x00786d64
  e8:	746f6c73 	strbtvc	r6, [pc], #-3187	; f0 <PARAMS_DMX_SLOT_INFO_PORT_B+0xc>
  ec:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
  f0:	6f705f6f 	svcvs	0x00705f6f
  f4:	625f7472 	subsvs	r7, pc, #1912602624	; 0x72000000
  f8:	00000000 	andeq	r0, r0, r0

000000fc <PARAMS_DMX_SLOT_INFO>:
  fc:	5f786d64 	svcpl	0x00786d64
 100:	746f6c73 	strbtvc	r6, [pc], #-3187	; 108 <PARAMS_DMX_SLOT_INFO+0xc>
 104:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
 108:	Address 0x0000000000000108 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x168cb38>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x41730>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


l6470dmxmode5.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <L6470DmxMode5::Stop()>:
   0:	e12fff1e 	bx	lr

00000004 <L6470DmxMode5::BusyCheck()>:
   4:	e5900008 	ldr	r0, [r0, #8]
   8:	e92d4010 	push	{r4, lr}
   c:	e5903000 	ldr	r3, [r0]
  10:	e5933008 	ldr	r3, [r3, #8]
  14:	e12fff33 	blx	r3
  18:	e2500000 	subs	r0, r0, #0
  1c:	13a00001 	movne	r0, #1
  20:	e8bd8010 	pop	{r4, pc}

00000024 <L6470DmxMode5::~L6470DmxMode5()>:
  24:	e92d4010 	push	{r4, lr}
  28:	e1a04000 	mov	r4, r0
  2c:	e59f300c 	ldr	r3, [pc, #12]	; 40 <L6470DmxMode5::~L6470DmxMode5()+0x1c>
  30:	e5803000 	str	r3, [r0]
  34:	ebfffffe 	bl	0 <L6470DmxMode::~L6470DmxMode()>
  38:	e1a00004 	mov	r0, r4
  3c:	e8bd8010 	pop	{r4, pc}
  40:	00000008 	andeq	r0, r0, r8

00000044 <L6470DmxMode5::~L6470DmxMode5()>:
  44:	e92d4010 	push	{r4, lr}
  48:	e1a04000 	mov	r4, r0
  4c:	e59f3014 	ldr	r3, [pc, #20]	; 68 <L6470DmxMode5::~L6470DmxMode5()+0x24>
  50:	e5803000 	str	r3, [r0]
  54:	ebfffffe 	bl	0 <L6470DmxMode::~L6470DmxMode()>
  58:	e1a00004 	mov	r0, r4
  5c:	ebfffffe 	bl	0 <operator delete(void*)>
  60:	e1a00004 	mov	r0, r4
  64:	e8bd8010 	pop	{r4, pc}
  68:	00000008 	andeq	r0, r0, r8

0000006c <L6470DmxMode5::InitSwitch()>:
  6c:	e5903004 	ldr	r3, [r0, #4]
  70:	e5d32015 	ldrb	r2, [r3, #21]
  74:	e3520000 	cmp	r2, #0
  78:	012fff1e 	bxeq	lr
  7c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  80:	e5d3c014 	ldrb	ip, [r3, #20]
  84:	e593e010 	ldr	lr, [r3, #16]
  88:	e1a0cc0c 	lsl	ip, ip, #24
  8c:	e5d32010 	ldrb	r2, [r3, #16]
  90:	e5d3100f 	ldrb	r1, [r3, #15]
  94:	e18c342e 	orr	r3, ip, lr, lsr #8
  98:	ee003a10 	vmov	s0, r3
  9c:	e5900008 	ldr	r0, [r0, #8]
  a0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  a4:	eafffffe 	b	0 <L6470::goUntil(TL6470Action, TL6470Direction, float)>

000000a8 <L6470DmxMode5::InitPos()>:
  a8:	e5900008 	ldr	r0, [r0, #8]
  ac:	eafffffe 	b	0 <L6470::resetPos()>

000000b0 <L6470DmxMode5::Data(unsigned char const*)>:
  b0:	e92d4070 	push	{r4, r5, r6, lr}
  b4:	e1d160b0 	ldrh	r6, [r1]
  b8:	ed907a03 	vldr	s14, [r0, #12]
  bc:	e6bf6fb6 	rev16	r6, r6
  c0:	e6ff1076 	uxth	r1, r6
  c4:	ee071a90 	vmov	s15, r1
  c8:	eef87a67 	vcvt.f32.u32	s15, s15
  cc:	ee677a87 	vmul.f32	s15, s15, s14
  d0:	e1a04000 	mov	r4, r0
  d4:	eefc7ae7 	vcvt.u32.f32	s15, s15
  d8:	e5d43012 	ldrb	r3, [r4, #18]
  dc:	ee175a90 	vmov	r5, s15
  e0:	e3530000 	cmp	r3, #0
  e4:	e5900008 	ldr	r0, [r0, #8]
  e8:	1a000008 	bne	110 <L6470DmxMode5::Data(unsigned char const*)+0x60>
  ec:	e1d431b0 	ldrh	r3, [r4, #16]
  f0:	e1530001 	cmp	r3, r1
  f4:	93a01000 	movls	r1, #0
  f8:	83a01001 	movhi	r1, #1
  fc:	e1a02005 	mov	r2, r5
 100:	e2211001 	eor	r1, r1, #1
 104:	ebfffffe 	bl	0 <L6470::goToDir(TL6470Direction, long)>
 108:	e1c461b0 	strh	r6, [r4, #16]
 10c:	e8bd8070 	pop	{r4, r5, r6, pc}
 110:	ebfffffe 	bl	0 <L6470::getPos()>
 114:	e1a01000 	mov	r1, r0
 118:	e1550001 	cmp	r5, r1
 11c:	23a01000 	movcs	r1, #0
 120:	33a01001 	movcc	r1, #1
 124:	e5940008 	ldr	r0, [r4, #8]
 128:	eafffff3 	b	fc <L6470DmxMode5::Data(unsigned char const*)+0x4c>

0000012c <L6470DmxMode5::HandleBusy()>:
 12c:	e92d4010 	push	{r4, lr}
 130:	e1a04000 	mov	r4, r0
 134:	e5900008 	ldr	r0, [r0, #8]
 138:	e5903000 	ldr	r3, [r0]
 13c:	e5933008 	ldr	r3, [r3, #8]
 140:	e12fff33 	blx	r3
 144:	e3500000 	cmp	r0, #0
 148:	1a000001 	bne	154 <L6470DmxMode5::HandleBusy()+0x28>
 14c:	e5c40012 	strb	r0, [r4, #18]
 150:	e8bd8010 	pop	{r4, pc}
 154:	e5940008 	ldr	r0, [r4, #8]
 158:	ebfffffe 	bl	0 <L6470::softStop()>
 15c:	e3a03001 	mov	r3, #1
 160:	e5c43012 	strb	r3, [r4, #18]
 164:	e8bd8010 	pop	{r4, pc}

00000168 <L6470DmxMode5::L6470DmxMode5(L6470*, MotorParams*, ModeParams*)>:
 168:	e3a0c000 	mov	ip, #0
 16c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 170:	e59fe038 	ldr	lr, [pc, #56]	; 1b0 <L6470DmxMode5::L6470DmxMode5(L6470*, MotorParams*, ModeParams*)+0x48>
 174:	e5801008 	str	r1, [r0, #8]
 178:	e580e000 	str	lr, [r0]
 17c:	e1c0c1b0 	strh	ip, [r0, #16]
 180:	e5c0c012 	strb	ip, [r0, #18]
 184:	e5803004 	str	r3, [r0, #4]
 188:	e5d3100b 	ldrb	r1, [r3, #11]
 18c:	e593300c 	ldr	r3, [r3, #12]
 190:	eddf6a05 	vldr	s13, [pc, #20]	; 1ac <L6470DmxMode5::L6470DmxMode5(L6470*, MotorParams*, ModeParams*)+0x44>
 194:	e1811403 	orr	r1, r1, r3, lsl #8
 198:	ee071a90 	vmov	s15, r1
 19c:	eef87a67 	vcvt.f32.u32	s15, s15
 1a0:	ee877aa6 	vdiv.f32	s14, s15, s13
 1a4:	ed807a03 	vstr	s14, [r0, #12]
 1a8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
 1ac:	477fff00 	ldrbmi	pc, [pc, -r0, lsl #30]!	; <UNPREDICTABLE>
 1b0:	00000008 	andeq	r0, r0, r8

Disassembly of section .rodata:

00000000 <vtable for L6470DmxMode5>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <L6470DmxMode5::L6470DmxMode5(L6470*, MotorParams*, ModeParams*)+0x168d6c4>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <L6470DmxMode5::L6470DmxMode5(L6470*, MotorParams*, ModeParams*)+0x422bc>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


l6470dmxconst.o:     file format elf32-littlearm


Disassembly of section .rodata:

00000000 <L6470DmxConst::FILE_NAME_MOTOR>:
   0:	6f746f6d 	svcvs	0x00746f6d
   4:	742e3f72 	strtvc	r3, [lr], #-3954	; 0xfffff08e
   8:	Address 0x0000000000000008 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003b41 	andeq	r3, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000031 	andeq	r0, r0, r1, lsr r0
  10:	4d524105 	ldfmie	f4, [r2, #-20]	; 0xffffffec
  14:	36373131 			; <UNDEFINED> instruction: 0x36373131
  18:	2d465a4a 	vstrcs	s11, [r6, #-296]	; 0xfffffed8
  1c:	07060053 	smlsdeq	r6, r3, r0, r0
  20:	01090108 	tsteq	r9, r8, lsl #2
  24:	0412020a 	ldreq	r0, [r2], #-522	; 0xfffffdf6
  28:	01150114 	tsteq	r5, r4, lsl r1
  2c:	01180317 	tsteq	r8, r7, lsl r3
  30:	011a0119 	tsteq	sl, r9, lsl r1
  34:	021e011c 	andseq	r0, lr, #28, 2
  38:	01440122 	cmpeq	r4, r2, lsr #2

l6470dmxmode2.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <L6470DmxMode2::~L6470DmxMode2()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e59f300c 	ldr	r3, [pc, #12]	; 1c <L6470DmxMode2::~L6470DmxMode2()+0x1c>
   c:	e5803000 	str	r3, [r0]
  10:	ebfffffe 	bl	0 <L6470DmxMode::~L6470DmxMode()>
  14:	e1a00004 	mov	r0, r4
  18:	e8bd8010 	pop	{r4, pc}
  1c:	00000008 	andeq	r0, r0, r8

00000020 <L6470DmxMode2::~L6470DmxMode2()>:
  20:	e92d4010 	push	{r4, lr}
  24:	e1a04000 	mov	r4, r0
  28:	e59f3014 	ldr	r3, [pc, #20]	; 44 <L6470DmxMode2::~L6470DmxMode2()+0x24>
  2c:	e5803000 	str	r3, [r0]
  30:	ebfffffe 	bl	0 <L6470DmxMode::~L6470DmxMode()>
  34:	e1a00004 	mov	r0, r4
  38:	ebfffffe 	bl	0 <operator delete(void*)>
  3c:	e1a00004 	mov	r0, r4
  40:	e8bd8010 	pop	{r4, pc}
  44:	00000008 	andeq	r0, r0, r8

00000048 <L6470DmxMode2::Start()>:
  48:	ed900a02 	vldr	s0, [r0, #8]
  4c:	e3a01001 	mov	r1, #1
  50:	e5900004 	ldr	r0, [r0, #4]
  54:	eafffffe 	b	0 <L6470::run(TL6470Direction, float)>

00000058 <L6470DmxMode2::Data(unsigned char const*)>:
  58:	e1a03001 	mov	r3, r1
  5c:	ed900a02 	vldr	s0, [r0, #8]
  60:	ed907a03 	vldr	s14, [r0, #12]
  64:	e5d33000 	ldrb	r3, [r3]
  68:	ee377a40 	vsub.f32	s14, s14, s0
  6c:	ed9f6a06 	vldr	s12, [pc, #24]	; 8c <L6470DmxMode2::Data(unsigned char const*)+0x34>
  70:	ee073a90 	vmov	s15, r3
  74:	eec76a06 	vdiv.f32	s13, s14, s12
  78:	eef87a67 	vcvt.f32.u32	s15, s15
  7c:	e3a01001 	mov	r1, #1
  80:	ee060aa7 	vmla.f32	s0, s13, s15
  84:	e5900004 	ldr	r0, [r0, #4]
  88:	eafffffe 	b	0 <L6470::run(TL6470Direction, float)>
  8c:	437f0000 	cmnmi	pc, #0

00000090 <L6470DmxMode2::Stop()>:
  90:	e5900004 	ldr	r0, [r0, #4]
  94:	eafffffe 	b	0 <L6470::hardHiZ()>

00000098 <L6470DmxMode2::L6470DmxMode2(L6470*)>:
  98:	e92d4010 	push	{r4, lr}
  9c:	e1a04000 	mov	r4, r0
  a0:	e59f3024 	ldr	r3, [pc, #36]	; cc <L6470DmxMode2::L6470DmxMode2(L6470*)+0x34>
  a4:	e1a00001 	mov	r0, r1
  a8:	e5843000 	str	r3, [r4]
  ac:	e5841004 	str	r1, [r4, #4]
  b0:	ebfffffe 	bl	0 <L6470::getMinSpeed()>
  b4:	e5940004 	ldr	r0, [r4, #4]
  b8:	ed840a02 	vstr	s0, [r4, #8]
  bc:	ebfffffe 	bl	0 <L6470::getMaxSpeed()>
  c0:	e1a00004 	mov	r0, r4
  c4:	ed840a03 	vstr	s0, [r4, #12]
  c8:	e8bd8010 	pop	{r4, pc}
  cc:	00000008 	andeq	r0, r0, r8

Disassembly of section .rodata:

00000000 <vtable for L6470DmxMode2>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <L6470DmxMode2::L6470DmxMode2(L6470*)+0x168d794>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <L6470DmxMode2::L6470DmxMode2(L6470*)+0x4238c>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


sparkfundmxconst.o:     file format elf32-littlearm


Disassembly of section .rodata:

00000000 <SparkFunDmxConst::MSG_INIT>:
   0:	72617053 	rsbvc	r7, r1, #83	; 0x53
   4:	6e75466b 	cdpvs	6, 7, cr4, cr5, cr11, {3}
   8:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
   c:	Address 0x000000000000000c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003b41 	andeq	r3, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000031 	andeq	r0, r0, r1, lsr r0
  10:	4d524105 	ldfmie	f4, [r2, #-20]	; 0xffffffec
  14:	36373131 			; <UNDEFINED> instruction: 0x36373131
  18:	2d465a4a 	vstrcs	s11, [r6, #-296]	; 0xfffffed8
  1c:	07060053 	smlsdeq	r6, r3, r0, r0
  20:	01090108 	tsteq	r9, r8, lsl #2
  24:	0412020a 	ldreq	r0, [r2], #-522	; 0xfffffdf6
  28:	01150114 	tsteq	r5, r4, lsl r1
  2c:	01180317 	tsteq	r8, r7, lsl r3
  30:	011a0119 	tsteq	sl, r9, lsl r1
  34:	021e011c 	andseq	r0, lr, #28, 2
  38:	01440122 	cmpeq	r4, r2, lsr #2

slushdmxparamsconst.o:     file format elf32-littlearm


Disassembly of section .rodata:

00000000 <SlushDmxParamsConst::DMX_SLOT_INFO_PORT_B>:
   0:	5f786d64 	svcpl	0x00786d64
   4:	746f6c73 	strbtvc	r6, [pc], #-3187	; c <SlushDmxParamsConst::DMX_SLOT_INFO_PORT_B+0xc>
   8:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
   c:	6f705f6f 	svcvs	0x00705f6f
  10:	625f7472 	subsvs	r7, pc, #1912602624	; 0x72000000
  14:	00000000 	andeq	r0, r0, r0

00000018 <SlushDmxParamsConst::DMX_FOOTPRINT_PORT_B>:
  18:	5f786d64 	svcpl	0x00786d64
  1c:	746f6f66 	strbtvc	r6, [pc], #-3942	; 24 <SlushDmxParamsConst::DMX_FOOTPRINT_PORT_B+0xc>
  20:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
  24:	6f705f74 	svcvs	0x00705f74
  28:	625f7472 	subsvs	r7, pc, #1912602624	; 0x72000000
  2c:	00000000 	andeq	r0, r0, r0

00000030 <SlushDmxParamsConst::DMX_START_ADDRESS_PORT_B>:
  30:	5f786d64 	svcpl	0x00786d64
  34:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  38:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
  3c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
  40:	6f705f73 	svcvs	0x00705f73
  44:	625f7472 	subsvs	r7, pc, #1912602624	; 0x72000000
  48:	00000000 	andeq	r0, r0, r0

0000004c <SlushDmxParamsConst::DMX_SLOT_INFO_PORT_A>:
  4c:	5f786d64 	svcpl	0x00786d64
  50:	746f6c73 	strbtvc	r6, [pc], #-3187	; 58 <SlushDmxParamsConst::DMX_SLOT_INFO_PORT_A+0xc>
  54:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
  58:	6f705f6f 	svcvs	0x00705f6f
  5c:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
  60:	00000000 	andeq	r0, r0, r0

00000064 <SlushDmxParamsConst::DMX_FOOTPRINT_PORT_A>:
  64:	5f786d64 	svcpl	0x00786d64
  68:	746f6f66 	strbtvc	r6, [pc], #-3942	; 70 <SlushDmxParamsConst::DMX_FOOTPRINT_PORT_A+0xc>
  6c:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
  70:	6f705f74 	svcvs	0x00705f74
  74:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
  78:	00000000 	andeq	r0, r0, r0

0000007c <SlushDmxParamsConst::DMX_START_ADDRESS_PORT_A>:
  7c:	5f786d64 	svcpl	0x00786d64
  80:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  84:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
  88:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
  8c:	6f705f73 	svcvs	0x00705f73
  90:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
  94:	00000000 	andeq	r0, r0, r0

00000098 <SlushDmxParamsConst::USE_SPI>:
  98:	5f657375 	svcpl	0x00657375
  9c:	5f697073 	svcpl	0x00697073
  a0:	79737562 	ldmdbvc	r3!, {r1, r5, r6, r8, sl, ip, sp, lr}^
  a4:	00000000 	andeq	r0, r0, r0

000000a8 <SlushDmxParamsConst::FILE_NAME>:
  a8:	73756c73 	cmnvc	r5, #29440	; 0x7300
  ac:	78742e68 	ldmdavc	r4!, {r3, r5, r6, r9, sl, fp, sp}^
  b0:	Address 0x00000000000000b0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003b41 	andeq	r3, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000031 	andeq	r0, r0, r1, lsr r0
  10:	4d524105 	ldfmie	f4, [r2, #-20]	; 0xffffffec
  14:	36373131 			; <UNDEFINED> instruction: 0x36373131
  18:	2d465a4a 	vstrcs	s11, [r6, #-296]	; 0xfffffed8
  1c:	07060053 	smlsdeq	r6, r3, r0, r0
  20:	01090108 	tsteq	r9, r8, lsl #2
  24:	0412020a 	ldreq	r0, [r2], #-522	; 0xfffffdf6
  28:	01150114 	tsteq	r5, r4, lsl r1
  2c:	01180317 	tsteq	r8, r7, lsl r3
  30:	011a0119 	tsteq	sl, r9, lsl r1
  34:	021e011c 	andseq	r0, lr, #28, 2
  38:	01440122 	cmpeq	r4, r2, lsr #2

l6470dmxmode.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <L6470DmxMode::HandleBusy()>:
   0:	e12fff1e 	bx	lr

00000004 <L6470DmxMode::BusyCheck()>:
   4:	e3a00000 	mov	r0, #0
   8:	e12fff1e 	bx	lr

0000000c <L6470DmxMode::~L6470DmxMode()>:
   c:	e12fff1e 	bx	lr

00000010 <L6470DmxMode::~L6470DmxMode()>:
  10:	e92d4010 	push	{r4, lr}
  14:	e1a04000 	mov	r4, r0
  18:	ebfffffe 	bl	0 <operator delete(void*)>
  1c:	e1a00004 	mov	r0, r4
  20:	e8bd8010 	pop	{r4, pc}

Disassembly of section .rodata:

00000000 <vtable for L6470DmxMode>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <L6470DmxMode::~L6470DmxMode()+0x168d81c>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <L6470DmxMode::~L6470DmxMode()+0x42414>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


motorparamsconst.o:     file format elf32-littlearm


Disassembly of section .rodata:

00000000 <MotorParamsConst::INDUCTANCE>:
   0:	6f746f6d 	svcvs	0x00746f6d
   4:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
   8:	74637564 	strbtvc	r7, [r3], #-1380	; 0xfffffa9c
   c:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
  10:	00000000 	andeq	r0, r0, r0

00000014 <MotorParamsConst::RESISTANCE>:
  14:	6f746f6d 	svcvs	0x00746f6d
  18:	65725f72 	ldrbvs	r5, [r2, #-3954]!	; 0xfffff08e
  1c:	74736973 	ldrbtvc	r6, [r3], #-2419	; 0xfffff68d
  20:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
  24:	00000000 	andeq	r0, r0, r0

00000028 <MotorParamsConst::CURRENT>:
  28:	6f746f6d 	svcvs	0x00746f6d
  2c:	75635f72 	strbvc	r5, [r3, #-3954]!	; 0xfffff08e
  30:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
  34:	00000074 	andeq	r0, r0, r4, ror r0

00000038 <MotorParamsConst::VOLTAGE>:
  38:	6f746f6d 	svcvs	0x00746f6d
  3c:	6f765f72 	svcvs	0x00765f72
  40:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
  44:	00000065 	andeq	r0, r0, r5, rrx

00000048 <MotorParamsConst::STEP_ANGEL>:
  48:	6f746f6d 	svcvs	0x00746f6d
  4c:	74735f72 	ldrbtvc	r5, [r3], #-3954	; 0xfffff08e
  50:	615f7065 	cmpvs	pc, r5, rrx
  54:	6c65676e 	stclvs	7, cr6, [r5], #-440	; 0xfffffe48
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003b41 	andeq	r3, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000031 	andeq	r0, r0, r1, lsr r0
  10:	4d524105 	ldfmie	f4, [r2, #-20]	; 0xffffffec
  14:	36373131 			; <UNDEFINED> instruction: 0x36373131
  18:	2d465a4a 	vstrcs	s11, [r6, #-296]	; 0xfffffed8
  1c:	07060053 	smlsdeq	r6, r3, r0, r0
  20:	01090108 	tsteq	r9, r8, lsl #2
  24:	0412020a 	ldreq	r0, [r2], #-522	; 0xfffffdf6
  28:	01150114 	tsteq	r5, r4, lsl r1
  2c:	01180317 	tsteq	r8, r7, lsl r3
  30:	011a0119 	tsteq	sl, r9, lsl r1
  34:	021e011c 	andseq	r0, lr, #28, 2
  38:	01440122 	cmpeq	r4, r2, lsr #2

modeparams.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <memcmp>:
   0:	e2411001 	sub	r1, r1, #1
   4:	e0802002 	add	r2, r0, r2
   8:	e1500002 	cmp	r0, r2
   c:	0a000007 	beq	30 <memcmp+0x30>
  10:	e5d03000 	ldrb	r3, [r0]
  14:	e5f1c001 	ldrb	ip, [r1, #1]!
  18:	e153000c 	cmp	r3, ip
  1c:	0a000001 	beq	28 <memcmp+0x28>
  20:	e043000c 	sub	r0, r3, ip
  24:	e12fff1e 	bx	lr
  28:	e2800001 	add	r0, r0, #1
  2c:	eafffff5 	b	8 <memcmp+0x8>
  30:	e3a00000 	mov	r0, #0
  34:	e12fff1e 	bx	lr

00000038 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
  38:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
  3c:	e1d0c0b8 	ldrh	ip, [r0, #8]
  40:	e5905004 	ldr	r5, [r0, #4]
  44:	e15c0005 	cmp	ip, r5
  48:	2a00000e 	bcs	88 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x50>
  4c:	e1a04000 	mov	r4, r0
  50:	e5900000 	ldr	r0, [r0]
  54:	e3530000 	cmp	r3, #0
  58:	e045500c 	sub	r5, r5, ip
  5c:	e1a03001 	mov	r3, r1
  60:	e58d2000 	str	r2, [sp]
  64:	e1a01005 	mov	r1, r5
  68:	159f2020 	ldrne	r2, [pc, #32]	; 90 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x58>
  6c:	059f2020 	ldreq	r2, [pc, #32]	; 94 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x5c>
  70:	e080000c 	add	r0, r0, ip
  74:	ebfffffe 	bl	0 <snprintf>
  78:	e1550000 	cmp	r5, r0
  7c:	a1d430b8 	ldrhge	r3, [r4, #8]
  80:	a0830000 	addge	r0, r3, r0
  84:	a1c400b8 	strhge	r0, [r4, #8]
  88:	e28dd00c 	add	sp, sp, #12
  8c:	e8bd8030 	pop	{r4, r5, pc}
  90:	00000000 	andeq	r0, r0, r0
  94:	00000007 	andeq	r0, r0, r7

00000098 <ModeParams::ModeParams(ModeParamsStore*)>:
  98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  9c:	e3a02022 	mov	r2, #34	; 0x22
  a0:	e1a04000 	mov	r4, r0
  a4:	e4801004 	str	r1, [r0], #4
  a8:	e3a01000 	mov	r1, #0
  ac:	ebfffffe 	bl	0 <memset>
  b0:	e3a03007 	mov	r3, #7
  b4:	e5c43008 	strb	r3, [r4, #8]
  b8:	e3e03000 	mvn	r3, #0
  bc:	e5c43009 	strb	r3, [r4, #9]
  c0:	e5c4300a 	strb	r3, [r4, #10]
  c4:	e3a03001 	mov	r3, #1
  c8:	e3a00010 	mov	r0, #16
  cc:	e5c43015 	strb	r3, [r4, #21]
  d0:	ebfffffe 	bl	0 <operator new[](unsigned int)>
  d4:	e1a06000 	mov	r6, r0
  d8:	e1a03000 	mov	r3, r0
  dc:	e2845016 	add	r5, r4, #22
  e0:	e2842026 	add	r2, r4, #38	; 0x26
  e4:	e4951004 	ldr	r1, [r5], #4
  e8:	e1550002 	cmp	r5, r2
  ec:	e4831004 	str	r1, [r3], #4
  f0:	1afffffb 	bne	e4 <ModeParams::ModeParams(ModeParamsStore*)+0x4c>
  f4:	e3a0000c 	mov	r0, #12
  f8:	ebfffffe 	bl	0 <operator new(unsigned int)>
  fc:	e3a02004 	mov	r2, #4
 100:	e1a07000 	mov	r7, r0
 104:	e1a01006 	mov	r1, r6
 108:	ebfffffe 	bl	0 <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)>
 10c:	e1a00005 	mov	r0, r5
 110:	e3a02010 	mov	r2, #16
 114:	e59f3028 	ldr	r3, [pc, #40]	; 144 <ModeParams::ModeParams(ModeParamsStore*)+0xac>
 118:	e5847038 	str	r7, [r4, #56]	; 0x38
 11c:	e4d31001 	ldrb	r1, [r3], #1
 120:	e3510000 	cmp	r1, #0
 124:	1a000001 	bne	130 <ModeParams::ModeParams(ModeParamsStore*)+0x98>
 128:	ebfffffe 	bl	0 <memset>
 12c:	ea000002 	b	13c <ModeParams::ModeParams(ModeParamsStore*)+0xa4>
 130:	e2522001 	subs	r2, r2, #1
 134:	e4c01001 	strb	r1, [r0], #1
 138:	1afffff7 	bne	11c <ModeParams::ModeParams(ModeParamsStore*)+0x84>
 13c:	e1a00004 	mov	r0, r4
 140:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 144:	00000000 	andeq	r0, r0, r0

00000148 <ModeParams::~ModeParams()>:
 148:	e92d4070 	push	{r4, r5, r6, lr}
 14c:	e5905038 	ldr	r5, [r0, #56]	; 0x38
 150:	e1a04000 	mov	r4, r0
 154:	e3550000 	cmp	r5, #0
 158:	0a000003 	beq	16c <ModeParams::~ModeParams()+0x24>
 15c:	e1a00005 	mov	r0, r5
 160:	ebfffffe 	bl	0 <DmxSlotInfo::~DmxSlotInfo()>
 164:	e1a00005 	mov	r0, r5
 168:	ebfffffe 	bl	0 <operator delete(void*)>
 16c:	e1a00004 	mov	r0, r4
 170:	e8bd8070 	pop	{r4, r5, r6, pc}

00000174 <ModeParams::Load(unsigned int)>:
 174:	e2813030 	add	r3, r1, #48	; 0x30
 178:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
 17c:	e5c0302b 	strb	r3, [r0, #43]	; 0x2b
 180:	e3a03000 	mov	r3, #0
 184:	e1a04000 	mov	r4, r0
 188:	e1a02000 	mov	r2, r0
 18c:	e5803004 	str	r3, [r0, #4]
 190:	e1a06001 	mov	r6, r1
 194:	e1a0000d 	mov	r0, sp
 198:	e59f106c 	ldr	r1, [pc, #108]	; 20c <ModeParams::Load(unsigned int)+0x98>
 19c:	ebfffffe 	bl	0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 1a0:	e1a0000d 	mov	r0, sp
 1a4:	e2841026 	add	r1, r4, #38	; 0x26
 1a8:	ebfffffe 	bl	0 <ReadConfigFile::Read(char const*)>
 1ac:	e2505000 	subs	r5, r0, #0
 1b0:	e5940000 	ldr	r0, [r4]
 1b4:	0a000007 	beq	1d8 <ModeParams::Load(unsigned int)+0x64>
 1b8:	e3500000 	cmp	r0, #0
 1bc:	0a00000d 	beq	1f8 <ModeParams::Load(unsigned int)+0x84>
 1c0:	e5903000 	ldr	r3, [r0]
 1c4:	e1a01006 	mov	r1, r6
 1c8:	e5933008 	ldr	r3, [r3, #8]
 1cc:	e2842004 	add	r2, r4, #4
 1d0:	e12fff33 	blx	r3
 1d4:	ea000007 	b	1f8 <ModeParams::Load(unsigned int)+0x84>
 1d8:	e3500000 	cmp	r0, #0
 1dc:	0a000005 	beq	1f8 <ModeParams::Load(unsigned int)+0x84>
 1e0:	e5903000 	ldr	r3, [r0]
 1e4:	e1a01006 	mov	r1, r6
 1e8:	e593300c 	ldr	r3, [r3, #12]
 1ec:	e2842004 	add	r2, r4, #4
 1f0:	e12fff33 	blx	r3
 1f4:	e3a05001 	mov	r5, #1
 1f8:	e1a0000d 	mov	r0, sp
 1fc:	ebfffffe 	bl	0 <ReadConfigFile::~ReadConfigFile()>
 200:	e1a00005 	mov	r0, r5
 204:	e28dd008 	add	sp, sp, #8
 208:	e8bd8070 	pop	{r4, r5, r6, pc}
 20c:	00000000 	andeq	r0, r0, r0

00000210 <ModeParams::Load(unsigned int, char const*, unsigned int)>:
 210:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 214:	e1a07003 	mov	r7, r3
 218:	e5903000 	ldr	r3, [r0]
 21c:	e3530000 	cmp	r3, #0
 220:	0a000014 	beq	278 <ModeParams::Load(unsigned int, char const*, unsigned int)+0x68>
 224:	e3a03000 	mov	r3, #0
 228:	e1a06002 	mov	r6, r2
 22c:	e1a04000 	mov	r4, r0
 230:	e5803004 	str	r3, [r0, #4]
 234:	e1a02000 	mov	r2, r0
 238:	e1a05001 	mov	r5, r1
 23c:	e1a0000d 	mov	r0, sp
 240:	e59f1038 	ldr	r1, [pc, #56]	; 280 <ModeParams::Load(unsigned int, char const*, unsigned int)+0x70>
 244:	ebfffffe 	bl	0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 248:	e1a02007 	mov	r2, r7
 24c:	e1a01006 	mov	r1, r6
 250:	e1a0000d 	mov	r0, sp
 254:	ebfffffe 	bl	0 <ReadConfigFile::Read(char const*, unsigned int)>
 258:	e1a02004 	mov	r2, r4
 25c:	e4920004 	ldr	r0, [r2], #4
 260:	e1a01005 	mov	r1, r5
 264:	e5903000 	ldr	r3, [r0]
 268:	e5933008 	ldr	r3, [r3, #8]
 26c:	e12fff33 	blx	r3
 270:	e1a0000d 	mov	r0, sp
 274:	ebfffffe 	bl	0 <ReadConfigFile::~ReadConfigFile()>
 278:	e28dd00c 	add	sp, sp, #12
 27c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
 280:	00000000 	andeq	r0, r0, r0

00000284 <ModeParams::callbackFunction(char const*)>:
 284:	e92d4030 	push	{r4, r5, lr}
 288:	e1a05001 	mov	r5, r1
 28c:	e24dd09c 	sub	sp, sp, #156	; 0x9c
 290:	e1a04000 	mov	r4, r0
 294:	e59f1278 	ldr	r1, [pc, #632]	; 514 <ModeParams::callbackFunction(char const*)+0x290>
 298:	e1a00005 	mov	r0, r5
 29c:	e28d2009 	add	r2, sp, #9
 2a0:	ebfffffe 	bl	0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 2a4:	e3500000 	cmp	r0, #0
 2a8:	1a000006 	bne	2c8 <ModeParams::callbackFunction(char const*)+0x44>
 2ac:	e5dd3009 	ldrb	r3, [sp, #9]
 2b0:	e3530006 	cmp	r3, #6
 2b4:	95c43008 	strbls	r3, [r4, #8]
 2b8:	95943004 	ldrls	r3, [r4, #4]
 2bc:	93833001 	orrls	r3, r3, #1
 2c0:	9a000090 	bls	508 <ModeParams::callbackFunction(char const*)+0x284>
 2c4:	ea000090 	b	50c <ModeParams::callbackFunction(char const*)+0x288>
 2c8:	e1a00005 	mov	r0, r5
 2cc:	e59f1244 	ldr	r1, [pc, #580]	; 518 <ModeParams::callbackFunction(char const*)+0x294>
 2d0:	e28d200a 	add	r2, sp, #10
 2d4:	ebfffffe 	bl	0 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 2d8:	e3500000 	cmp	r0, #0
 2dc:	1a000009 	bne	308 <ModeParams::callbackFunction(char const*)+0x84>
 2e0:	e1dd30ba 	ldrh	r3, [sp, #10]
 2e4:	e2432001 	sub	r2, r3, #1
 2e8:	e3520c02 	cmp	r2, #512	; 0x200
 2ec:	2a000086 	bcs	50c <ModeParams::callbackFunction(char const*)+0x288>
 2f0:	e5c43009 	strb	r3, [r4, #9]
 2f4:	e1a03423 	lsr	r3, r3, #8
 2f8:	e5c4300a 	strb	r3, [r4, #10]
 2fc:	e5943004 	ldr	r3, [r4, #4]
 300:	e3833002 	orr	r3, r3, #2
 304:	ea00007f 	b	508 <ModeParams::callbackFunction(char const*)+0x284>
 308:	e3a0307f 	mov	r3, #127	; 0x7f
 30c:	e1a00005 	mov	r0, r5
 310:	e58d3010 	str	r3, [sp, #16]
 314:	e59f1200 	ldr	r1, [pc, #512]	; 51c <ModeParams::callbackFunction(char const*)+0x298>
 318:	e28d3010 	add	r3, sp, #16
 31c:	e28d2018 	add	r2, sp, #24
 320:	ebfffffe 	bl	0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 324:	e3500000 	cmp	r0, #0
 328:	1a00000c 	bne	360 <ModeParams::callbackFunction(char const*)+0xdc>
 32c:	e59d3010 	ldr	r3, [sp, #16]
 330:	e28d2098 	add	r2, sp, #152	; 0x98
 334:	e0823003 	add	r3, r2, r3
 338:	e5430080 	strb	r0, [r3, #-128]	; 0xffffff80
 33c:	e58d0014 	str	r0, [sp, #20]
 340:	e28d2014 	add	r2, sp, #20
 344:	e5940038 	ldr	r0, [r4, #56]	; 0x38
 348:	e28d1018 	add	r1, sp, #24
 34c:	ebfffffe 	bl	0 <DmxSlotInfo::FromString(char const*, unsigned int&)>
 350:	e5943004 	ldr	r3, [r4, #4]
 354:	e59d2014 	ldr	r2, [sp, #20]
 358:	e1833e02 	orr	r3, r3, r2, lsl #28
 35c:	e5843004 	str	r3, [r4, #4]
 360:	e1a00005 	mov	r0, r5
 364:	e59f11b4 	ldr	r1, [pc, #436]	; 520 <ModeParams::callbackFunction(char const*)+0x29c>
 368:	e28d2014 	add	r2, sp, #20
 36c:	ebfffffe 	bl	0 <Sscan::Uint32(char const*, char const*, unsigned int&)>
 370:	e3500000 	cmp	r0, #0
 374:	1a00000a 	bne	3a4 <ModeParams::callbackFunction(char const*)+0x120>
 378:	e5dd3014 	ldrb	r3, [sp, #20]
 37c:	e5c4300b 	strb	r3, [r4, #11]
 380:	e5dd3015 	ldrb	r3, [sp, #21]
 384:	e5c4300c 	strb	r3, [r4, #12]
 388:	e5dd3016 	ldrb	r3, [sp, #22]
 38c:	e5c4300d 	strb	r3, [r4, #13]
 390:	e5dd3017 	ldrb	r3, [sp, #23]
 394:	e5c4300e 	strb	r3, [r4, #14]
 398:	e5943004 	ldr	r3, [r4, #4]
 39c:	e3833004 	orr	r3, r3, #4
 3a0:	ea000058 	b	508 <ModeParams::callbackFunction(char const*)+0x284>
 3a4:	e3a03005 	mov	r3, #5
 3a8:	e1a00005 	mov	r0, r5
 3ac:	e58d3010 	str	r3, [sp, #16]
 3b0:	e59f116c 	ldr	r1, [pc, #364]	; 524 <ModeParams::callbackFunction(char const*)+0x2a0>
 3b4:	e28d3010 	add	r3, sp, #16
 3b8:	e28d2018 	add	r2, sp, #24
 3bc:	ebfffffe 	bl	0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 3c0:	e3500000 	cmp	r0, #0
 3c4:	1a000015 	bne	420 <ModeParams::callbackFunction(char const*)+0x19c>
 3c8:	e59d2010 	ldr	r2, [sp, #16]
 3cc:	e3520004 	cmp	r2, #4
 3d0:	1a000007 	bne	3f4 <ModeParams::callbackFunction(char const*)+0x170>
 3d4:	e59f114c 	ldr	r1, [pc, #332]	; 528 <ModeParams::callbackFunction(char const*)+0x2a4>
 3d8:	e28d0018 	add	r0, sp, #24
 3dc:	ebffff07 	bl	0 <memcmp>
 3e0:	e3500000 	cmp	r0, #0
 3e4:	03a03008 	moveq	r3, #8
 3e8:	05c4300f 	strbeq	r3, [r4, #15]
 3ec:	1a00000b 	bne	420 <ModeParams::callbackFunction(char const*)+0x19c>
 3f0:	ea000007 	b	414 <ModeParams::callbackFunction(char const*)+0x190>
 3f4:	e3520005 	cmp	r2, #5
 3f8:	1a000008 	bne	420 <ModeParams::callbackFunction(char const*)+0x19c>
 3fc:	e59f1128 	ldr	r1, [pc, #296]	; 52c <ModeParams::callbackFunction(char const*)+0x2a8>
 400:	e28d0018 	add	r0, sp, #24
 404:	ebfffefd 	bl	0 <memcmp>
 408:	e3500000 	cmp	r0, #0
 40c:	1a000003 	bne	420 <ModeParams::callbackFunction(char const*)+0x19c>
 410:	e5c4000f 	strb	r0, [r4, #15]
 414:	e5943004 	ldr	r3, [r4, #4]
 418:	e3833008 	orr	r3, r3, #8
 41c:	ea000039 	b	508 <ModeParams::callbackFunction(char const*)+0x284>
 420:	e3a03007 	mov	r3, #7
 424:	e1a00005 	mov	r0, r5
 428:	e58d3010 	str	r3, [sp, #16]
 42c:	e59f10fc 	ldr	r1, [pc, #252]	; 530 <ModeParams::callbackFunction(char const*)+0x2ac>
 430:	e28d3010 	add	r3, sp, #16
 434:	e28d2018 	add	r2, sp, #24
 438:	ebfffffe 	bl	0 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 43c:	e3500000 	cmp	r0, #0
 440:	1a000014 	bne	498 <ModeParams::callbackFunction(char const*)+0x214>
 444:	e59d2010 	ldr	r2, [sp, #16]
 448:	e3520007 	cmp	r2, #7
 44c:	1a00002e 	bne	50c <ModeParams::callbackFunction(char const*)+0x288>
 450:	e59f10dc 	ldr	r1, [pc, #220]	; 534 <ModeParams::callbackFunction(char const*)+0x2b0>
 454:	e28d0018 	add	r0, sp, #24
 458:	e58d2004 	str	r2, [sp, #4]
 45c:	ebfffee7 	bl	0 <memcmp>
 460:	e3500000 	cmp	r0, #0
 464:	03a03001 	moveq	r3, #1
 468:	e59d2004 	ldr	r2, [sp, #4]
 46c:	05c43010 	strbeq	r3, [r4, #16]
 470:	0a000005 	beq	48c <ModeParams::callbackFunction(char const*)+0x208>
 474:	e59f10bc 	ldr	r1, [pc, #188]	; 538 <ModeParams::callbackFunction(char const*)+0x2b4>
 478:	e28d0018 	add	r0, sp, #24
 47c:	ebfffedf 	bl	0 <memcmp>
 480:	e3500000 	cmp	r0, #0
 484:	1a000003 	bne	498 <ModeParams::callbackFunction(char const*)+0x214>
 488:	e5c40010 	strb	r0, [r4, #16]
 48c:	e5943004 	ldr	r3, [r4, #4]
 490:	e3833010 	orr	r3, r3, #16
 494:	ea00001b 	b	508 <ModeParams::callbackFunction(char const*)+0x284>
 498:	e1a00005 	mov	r0, r5
 49c:	e59f1098 	ldr	r1, [pc, #152]	; 53c <ModeParams::callbackFunction(char const*)+0x2b8>
 4a0:	e28d200c 	add	r2, sp, #12
 4a4:	ebfffffe 	bl	0 <Sscan::Float(char const*, char const*, float&)>
 4a8:	e3500000 	cmp	r0, #0
 4ac:	1a00000a 	bne	4dc <ModeParams::callbackFunction(char const*)+0x258>
 4b0:	e59d300c 	ldr	r3, [sp, #12]
 4b4:	e1a02423 	lsr	r2, r3, #8
 4b8:	e5c43011 	strb	r3, [r4, #17]
 4bc:	e5c42012 	strb	r2, [r4, #18]
 4c0:	e1a02823 	lsr	r2, r3, #16
 4c4:	e1a03c23 	lsr	r3, r3, #24
 4c8:	e5c43014 	strb	r3, [r4, #20]
 4cc:	e5943004 	ldr	r3, [r4, #4]
 4d0:	e5c42013 	strb	r2, [r4, #19]
 4d4:	e3833020 	orr	r3, r3, #32
 4d8:	ea00000a 	b	508 <ModeParams::callbackFunction(char const*)+0x284>
 4dc:	e1a00005 	mov	r0, r5
 4e0:	e59f1058 	ldr	r1, [pc, #88]	; 540 <ModeParams::callbackFunction(char const*)+0x2bc>
 4e4:	e28d2009 	add	r2, sp, #9
 4e8:	ebfffffe 	bl	0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 4ec:	e5dd3009 	ldrb	r3, [sp, #9]
 4f0:	e1800003 	orr	r0, r0, r3
 4f4:	e21000ff 	ands	r0, r0, #255	; 0xff
 4f8:	1a000003 	bne	50c <ModeParams::callbackFunction(char const*)+0x288>
 4fc:	e5943004 	ldr	r3, [r4, #4]
 500:	e5c40015 	strb	r0, [r4, #21]
 504:	e3833040 	orr	r3, r3, #64	; 0x40
 508:	e5843004 	str	r3, [r4, #4]
 50c:	e28dd09c 	add	sp, sp, #156	; 0x9c
 510:	e8bd8030 	pop	{r4, r5, pc}
	...
 528:	0000000f 	andeq	r0, r0, pc
 52c:	00000014 	andeq	r0, r0, r4, lsl r0
 530:	00000000 	andeq	r0, r0, r0
 534:	0000001a 	andeq	r0, r0, sl, lsl r0
 538:	00000022 	andeq	r0, r0, r2, lsr #32
	...

00000544 <ModeParams::staticCallbackFunction(void*, char const*)>:
 544:	eafffffe 	b	284 <ModeParams::callbackFunction(char const*)>

00000548 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)>:
 548:	e92d4030 	push	{r4, r5, lr}
 54c:	e1a05003 	mov	r5, r3
 550:	e2813030 	add	r3, r1, #48	; 0x30
 554:	e1a04000 	mov	r4, r0
 558:	e5c0302b 	strb	r3, [r0, #43]	; 0x2b
 55c:	e280c004 	add	ip, r0, #4
 560:	e2520000 	subs	r0, r2, #0
 564:	e24dd024 	sub	sp, sp, #36	; 0x24
 568:	0a000009 	beq	594 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x4c>
 56c:	e1a01000 	mov	r1, r0
 570:	e1a0000c 	mov	r0, ip
 574:	e2813020 	add	r3, r1, #32
 578:	e4912004 	ldr	r2, [r1], #4
 57c:	e1510003 	cmp	r1, r3
 580:	e4802004 	str	r2, [r0], #4
 584:	1afffffb 	bne	578 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x30>
 588:	e1d130b0 	ldrh	r3, [r1]
 58c:	e1c030b0 	strh	r3, [r0]
 590:	ea000004 	b	5a8 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x60>
 594:	e5940000 	ldr	r0, [r4]
 598:	e1a0200c 	mov	r2, ip
 59c:	e5903000 	ldr	r3, [r0]
 5a0:	e593300c 	ldr	r3, [r3, #12]
 5a4:	e12fff33 	blx	r3
 5a8:	e1a02005 	mov	r2, r5
 5ac:	e2841026 	add	r1, r4, #38	; 0x26
 5b0:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
 5b4:	e28d0014 	add	r0, sp, #20
 5b8:	ebfffffe 	bl	0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 5bc:	e1dd11bc 	ldrh	r1, [sp, #28]
 5c0:	e59d5018 	ldr	r5, [sp, #24]
 5c4:	e1510005 	cmp	r1, r5
 5c8:	2a00000f 	bcs	60c <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0xc4>
 5cc:	e5942004 	ldr	r2, [r4, #4]
 5d0:	e5d43008 	ldrb	r3, [r4, #8]
 5d4:	e59d0014 	ldr	r0, [sp, #20]
 5d8:	e3120001 	tst	r2, #1
 5dc:	e0455001 	sub	r5, r5, r1
 5e0:	159f2228 	ldrne	r2, [pc, #552]	; 810 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2c8>
 5e4:	059f2228 	ldreq	r2, [pc, #552]	; 814 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2cc>
 5e8:	e0800001 	add	r0, r0, r1
 5ec:	e58d3000 	str	r3, [sp]
 5f0:	e1a01005 	mov	r1, r5
 5f4:	e59f321c 	ldr	r3, [pc, #540]	; 818 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2d0>
 5f8:	ebfffffe 	bl	0 <snprintf>
 5fc:	e1550000 	cmp	r5, r0
 600:	a1dd31bc 	ldrhge	r3, [sp, #28]
 604:	a0830000 	addge	r0, r3, r0
 608:	a1cd01bc 	strhge	r0, [sp, #28]
 60c:	e1dd11bc 	ldrh	r1, [sp, #28]
 610:	e59d5018 	ldr	r5, [sp, #24]
 614:	e1510005 	cmp	r1, r5
 618:	2a000011 	bcs	664 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x11c>
 61c:	e5943008 	ldr	r3, [r4, #8]
 620:	e5942004 	ldr	r2, [r4, #4]
 624:	e59d0014 	ldr	r0, [sp, #20]
 628:	e1a03423 	lsr	r3, r3, #8
 62c:	e3120002 	tst	r2, #2
 630:	e0455001 	sub	r5, r5, r1
 634:	e6ff3073 	uxth	r3, r3
 638:	159f21d0 	ldrne	r2, [pc, #464]	; 810 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2c8>
 63c:	059f21d0 	ldreq	r2, [pc, #464]	; 814 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2cc>
 640:	e0800001 	add	r0, r0, r1
 644:	e58d3000 	str	r3, [sp]
 648:	e1a01005 	mov	r1, r5
 64c:	e59f31c8 	ldr	r3, [pc, #456]	; 81c <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2d4>
 650:	ebfffffe 	bl	0 <snprintf>
 654:	e1550000 	cmp	r5, r0
 658:	a1dd31bc 	ldrhge	r3, [sp, #28]
 65c:	a0830000 	addge	r0, r3, r0
 660:	a1cd01bc 	strhge	r0, [sp, #28]
 664:	e5945004 	ldr	r5, [r4, #4]
 668:	e5940038 	ldr	r0, [r4, #56]	; 0x38
 66c:	e1a05e25 	lsr	r5, r5, #28
 670:	e1a01005 	mov	r1, r5
 674:	ebfffffe 	bl	0 <DmxSlotInfo::ToString(unsigned int)>
 678:	e2553000 	subs	r3, r5, #0
 67c:	e1a02000 	mov	r2, r0
 680:	13a03001 	movne	r3, #1
 684:	e59f1194 	ldr	r1, [pc, #404]	; 820 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2d8>
 688:	e28d0014 	add	r0, sp, #20
 68c:	ebfffe69 	bl	38 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 690:	e1dd11bc 	ldrh	r1, [sp, #28]
 694:	e59d5018 	ldr	r5, [sp, #24]
 698:	e1510005 	cmp	r1, r5
 69c:	2a000011 	bcs	6e8 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x1a0>
 6a0:	e594200c 	ldr	r2, [r4, #12]
 6a4:	e5d4300b 	ldrb	r3, [r4, #11]
 6a8:	e59d0014 	ldr	r0, [sp, #20]
 6ac:	e1833402 	orr	r3, r3, r2, lsl #8
 6b0:	e5942004 	ldr	r2, [r4, #4]
 6b4:	e0455001 	sub	r5, r5, r1
 6b8:	e3120004 	tst	r2, #4
 6bc:	159f214c 	ldrne	r2, [pc, #332]	; 810 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2c8>
 6c0:	059f214c 	ldreq	r2, [pc, #332]	; 814 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2cc>
 6c4:	e0800001 	add	r0, r0, r1
 6c8:	e58d3000 	str	r3, [sp]
 6cc:	e1a01005 	mov	r1, r5
 6d0:	e59f314c 	ldr	r3, [pc, #332]	; 824 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2dc>
 6d4:	ebfffffe 	bl	0 <snprintf>
 6d8:	e1550000 	cmp	r5, r0
 6dc:	a1dd31bc 	ldrhge	r3, [sp, #28]
 6e0:	a0830000 	addge	r0, r3, r0
 6e4:	a1cd01bc 	strhge	r0, [sp, #28]
 6e8:	e5d4000f 	ldrb	r0, [r4, #15]
 6ec:	e5943004 	ldr	r3, [r4, #4]
 6f0:	e59f1130 	ldr	r1, [pc, #304]	; 828 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2e0>
 6f4:	e3500008 	cmp	r0, #8
 6f8:	e1a031a3 	lsr	r3, r3, #3
 6fc:	e59f2128 	ldr	r2, [pc, #296]	; 82c <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2e4>
 700:	e2033001 	and	r3, r3, #1
 704:	11a02001 	movne	r2, r1
 708:	e28d0014 	add	r0, sp, #20
 70c:	e59f111c 	ldr	r1, [pc, #284]	; 830 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2e8>
 710:	ebfffe48 	bl	38 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 714:	e5d40010 	ldrb	r0, [r4, #16]
 718:	e5943004 	ldr	r3, [r4, #4]
 71c:	e59f1110 	ldr	r1, [pc, #272]	; 834 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2ec>
 720:	e3500001 	cmp	r0, #1
 724:	e1a03223 	lsr	r3, r3, #4
 728:	e59f2108 	ldr	r2, [pc, #264]	; 838 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2f0>
 72c:	e2033001 	and	r3, r3, #1
 730:	11a02001 	movne	r2, r1
 734:	e28d0014 	add	r0, sp, #20
 738:	e59f10fc 	ldr	r1, [pc, #252]	; 83c <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2f4>
 73c:	ebfffe3d 	bl	38 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 740:	e1dd11bc 	ldrh	r1, [sp, #28]
 744:	e59d5018 	ldr	r5, [sp, #24]
 748:	e1510005 	cmp	r1, r5
 74c:	2a000016 	bcs	7ac <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x264>
 750:	e5d43014 	ldrb	r3, [r4, #20]
 754:	e5942010 	ldr	r2, [r4, #16]
 758:	e1a03c03 	lsl	r3, r3, #24
 75c:	e1833422 	orr	r3, r3, r2, lsr #8
 760:	ee073a90 	vmov	s15, r3
 764:	e5943004 	ldr	r3, [r4, #4]
 768:	eeb77ae7 	vcvt.f64.f32	d7, s15
 76c:	e3130020 	tst	r3, #32
 770:	e3a03001 	mov	r3, #1
 774:	e59d0014 	ldr	r0, [sp, #20]
 778:	e0455001 	sub	r5, r5, r1
 77c:	159f20bc 	ldrne	r2, [pc, #188]	; 840 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2f8>
 780:	059f20bc 	ldreq	r2, [pc, #188]	; 844 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2fc>
 784:	e0800001 	add	r0, r0, r1
 788:	e58d3000 	str	r3, [sp]
 78c:	ed8d7b02 	vstr	d7, [sp, #8]
 790:	e59f30b0 	ldr	r3, [pc, #176]	; 848 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x300>
 794:	e1a01005 	mov	r1, r5
 798:	ebfffffe 	bl	0 <snprintf>
 79c:	e1550000 	cmp	r5, r0
 7a0:	a1dd31bc 	ldrhge	r3, [sp, #28]
 7a4:	a0830000 	addge	r0, r3, r0
 7a8:	a1cd01bc 	strhge	r0, [sp, #28]
 7ac:	e1dd11bc 	ldrh	r1, [sp, #28]
 7b0:	e59d5018 	ldr	r5, [sp, #24]
 7b4:	e1510005 	cmp	r1, r5
 7b8:	2a00000f 	bcs	7fc <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2b4>
 7bc:	e5942004 	ldr	r2, [r4, #4]
 7c0:	e5d43015 	ldrb	r3, [r4, #21]
 7c4:	e59d0014 	ldr	r0, [sp, #20]
 7c8:	e3120040 	tst	r2, #64	; 0x40
 7cc:	e0455001 	sub	r5, r5, r1
 7d0:	159f2038 	ldrne	r2, [pc, #56]	; 810 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2c8>
 7d4:	059f2038 	ldreq	r2, [pc, #56]	; 814 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x2cc>
 7d8:	e0800001 	add	r0, r0, r1
 7dc:	e58d3000 	str	r3, [sp]
 7e0:	e1a01005 	mov	r1, r5
 7e4:	e59f3060 	ldr	r3, [pc, #96]	; 84c <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x304>
 7e8:	ebfffffe 	bl	0 <snprintf>
 7ec:	e1550000 	cmp	r5, r0
 7f0:	a1dd31bc 	ldrhge	r3, [sp, #28]
 7f4:	a0830000 	addge	r0, r3, r0
 7f8:	a1cd01bc 	strhge	r0, [sp, #28]
 7fc:	e1dd21bc 	ldrh	r2, [sp, #28]
 800:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
 804:	e5832000 	str	r2, [r3]
 808:	e28dd024 	add	sp, sp, #36	; 0x24
 80c:	e8bd8030 	pop	{r4, r5, pc}
 810:	0000002a 	andeq	r0, r0, sl, lsr #32
 814:	00000031 	andeq	r0, r0, r1, lsr r0
	...
 828:	00000014 	andeq	r0, r0, r4, lsl r0
 82c:	0000000f 	andeq	r0, r0, pc
 830:	00000000 	andeq	r0, r0, r0
 834:	00000022 	andeq	r0, r0, r2, lsr #32
 838:	0000001a 	andeq	r0, r0, sl, lsl r0
 83c:	00000000 	andeq	r0, r0, r0
 840:	00000039 	andeq	r0, r0, r9, lsr r0
 844:	00000042 	andeq	r0, r0, r2, asr #32
	...

00000850 <ModeParams::Save(unsigned int, char*, unsigned int, unsigned int&)>:
 850:	e92d4007 	push	{r0, r1, r2, lr}
 854:	e590e000 	ldr	lr, [r0]
 858:	e59dc010 	ldr	ip, [sp, #16]
 85c:	e35e0000 	cmp	lr, #0
 860:	058ce000 	streq	lr, [ip]
 864:	0a000003 	beq	878 <ModeParams::Save(unsigned int, char*, unsigned int, unsigned int&)+0x28>
 868:	e88d1008 	stm	sp, {r3, ip}
 86c:	e1a03002 	mov	r3, r2
 870:	e3a02000 	mov	r2, #0
 874:	ebfffffe 	bl	548 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)>
 878:	e28dd00c 	add	sp, sp, #12
 87c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00000880 <ModeParams::Dump()>:
 880:	e12fff1e 	bx	lr

00000884 <ModeParams::GetSlotInfo(unsigned int, lightset::SlotInfo&)>:
 884:	e3510003 	cmp	r1, #3
 888:	83a03000 	movhi	r3, #0
 88c:	85c23000 	strbhi	r3, [r2]
 890:	83e03000 	mvnhi	r3, #0
 894:	90801101 	addls	r1, r0, r1, lsl #2
 898:	95d13016 	ldrbls	r3, [r1, #22]
 89c:	95c23000 	strbls	r3, [r2]
 8a0:	91d131b8 	ldrhls	r3, [r1, #24]
 8a4:	e1c230b2 	strh	r3, [r2, #2]
 8a8:	e12fff1e 	bx	lr

Disassembly of section .rodata.str1.1:

00000000 <.rodata.str1.1>:
   0:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
   4:	23000a73 	movwcs	r0, #2675	; 0xa73
   8:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
   c:	63000a73 	movwvs	r0, #2675	; 0xa73
  10:	0079706f 	rsbseq	r7, r9, pc, rrx
  14:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
  18:	6f660074 	svcvs	0x00660074
  1c:	72617772 	rsbvc	r7, r1, #29884416	; 0x1c80000
  20:	65720064 	ldrbvs	r0, [r2, #-100]!	; 0xffffff9c
  24:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
  28:	73250065 			; <UNDEFINED> instruction: 0x73250065
  2c:	0a64253d 	beq	1909528 <ModeParams::GetSlotInfo(unsigned int, lightset::SlotInfo&)+0x1908ca4>
  30:	73252300 			; <UNDEFINED> instruction: 0x73252300
  34:	0a64253d 	beq	1909530 <ModeParams::GetSlotInfo(unsigned int, lightset::SlotInfo&)+0x1908cac>
  38:	3d732500 	cfldr64cc	mvdx2, [r3, #-0]
  3c:	662a2e25 	strtvs	r2, [sl], -r5, lsr #28
  40:	2523000a 	strcs	r0, [r3, #-10]!
  44:	2e253d73 	mcrcs	13, 1, r3, cr5, cr3, {3}
  48:	000a662a 	andeq	r6, sl, sl, lsr #12

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <ModeParams::GetSlotInfo(unsigned int, lightset::SlotInfo&)+0x168cfa8>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <ModeParams::GetSlotInfo(unsigned int, lightset::SlotInfo&)+0x41ba0>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


sparkfundmxparamsconst.o:     file format elf32-littlearm


Disassembly of section .rodata:

00000000 <SparkFunDmxParamsConst::BUSY_PIN>:
   0:	72617073 	rsbvc	r7, r1, #115	; 0x73
   4:	6e75666b 	cdpvs	6, 7, cr6, cr5, cr11, {3}
   8:	7375625f 	cmnvc	r5, #-268435451	; 0xf0000005
   c:	69705f79 	ldmdbvs	r0!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  10:	0000006e 	andeq	r0, r0, lr, rrx

00000014 <SparkFunDmxParamsConst::RESET_PIN>:
  14:	72617073 	rsbvc	r7, r1, #115	; 0x73
  18:	6e75666b 	cdpvs	6, 7, cr6, cr5, cr11, {3}
  1c:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
  20:	705f7465 	subsvc	r7, pc, r5, ror #8
  24:	00006e69 	andeq	r6, r0, r9, ror #28

00000028 <SparkFunDmxParamsConst::SPI_CS>:
  28:	72617073 	rsbvc	r7, r1, #115	; 0x73
  2c:	6e75666b 	cdpvs	6, 7, cr6, cr5, cr11, {3}
  30:	6970735f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
  34:	0073635f 	rsbseq	r6, r3, pc, asr r3

00000038 <SparkFunDmxParamsConst::POSITION>:
  38:	72617073 	rsbvc	r7, r1, #115	; 0x73
  3c:	6e75666b 	cdpvs	6, 7, cr6, cr5, cr11, {3}
  40:	736f705f 	cmnvc	pc, #95	; 0x5f
  44:	6f697469 	svcvs	0x00697469
  48:	0000006e 	andeq	r0, r0, lr, rrx

0000004c <SparkFunDmxParamsConst::FILE_NAME>:
  4c:	72617073 	rsbvc	r7, r1, #115	; 0x73
  50:	6e75666b 	cdpvs	6, 7, cr6, cr5, cr11, {3}
  54:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003b41 	andeq	r3, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000031 	andeq	r0, r0, r1, lsr r0
  10:	4d524105 	ldfmie	f4, [r2, #-20]	; 0xffffffec
  14:	36373131 			; <UNDEFINED> instruction: 0x36373131
  18:	2d465a4a 	vstrcs	s11, [r6, #-296]	; 0xfffffed8
  1c:	07060053 	smlsdeq	r6, r3, r0, r0
  20:	01090108 	tsteq	r9, r8, lsl #2
  24:	0412020a 	ldreq	r0, [r2], #-522	; 0xfffffdf6
  28:	01150114 	tsteq	r5, r4, lsl r1
  2c:	01180317 	tsteq	r8, r7, lsl r3
  30:	011a0119 	tsteq	sl, r9, lsl r1
  34:	021e011c 	andseq	r0, lr, #28, 2
  38:	01440122 	cmpeq	r4, r2, lsr #2

l6470params.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <L6470Params::L6470Params(L6470ParamsStore*)>:
   0:	e1a03000 	mov	r3, r0
   4:	e3a0c000 	mov	ip, #0
   8:	e92d4010 	push	{r4, lr}
   c:	e280201d 	add	r2, r0, #29
  10:	e4831004 	str	r1, [r3], #4
  14:	e4c3c001 	strb	ip, [r3], #1
  18:	e1530002 	cmp	r3, r2
  1c:	1afffffc 	bne	14 <L6470Params::L6470Params(L6470ParamsStore*)+0x14>
  20:	e59f1040 	ldr	r1, [pc, #64]	; 68 <L6470Params::L6470Params(L6470ParamsStore*)+0x68>
  24:	e280e02d 	add	lr, r0, #45	; 0x2d
  28:	e2814010 	add	r4, r1, #16
  2c:	ea000002 	b	3c <L6470Params::L6470Params(L6470ParamsStore*)+0x3c>
  30:	e1510004 	cmp	r1, r4
  34:	e4c32001 	strb	r2, [r3], #1
  38:	08bd8010 	popeq	{r4, pc}
  3c:	e5f12001 	ldrb	r2, [r1, #1]!
  40:	e04ec003 	sub	ip, lr, r3
  44:	e3520000 	cmp	r2, #0
  48:	1afffff8 	bne	30 <L6470Params::L6470Params(L6470ParamsStore*)+0x30>
  4c:	e35c0000 	cmp	ip, #0
  50:	08bd8010 	popeq	{r4, pc}
  54:	e083c00c 	add	ip, r3, ip
  58:	e4c32001 	strb	r2, [r3], #1
  5c:	e15c0003 	cmp	ip, r3
  60:	1afffffc 	bne	58 <L6470Params::L6470Params(L6470ParamsStore*)+0x58>
  64:	e8bd8010 	pop	{r4, pc}
  68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

0000006c <L6470Params::Load(unsigned int)>:
  6c:	e92d4070 	push	{r4, r5, r6, lr}
  70:	e1a06001 	mov	r6, r1
  74:	e1a04000 	mov	r4, r0
  78:	e3a03000 	mov	r3, #0
  7c:	e24dd008 	sub	sp, sp, #8
  80:	e2862030 	add	r2, r6, #48	; 0x30
  84:	e59f107c 	ldr	r1, [pc, #124]	; 108 <L6470Params::Load(unsigned int)+0x9c>
  88:	e5c42022 	strb	r2, [r4, #34]	; 0x22
  8c:	e5843004 	str	r3, [r4, #4]
  90:	e1a02004 	mov	r2, r4
  94:	e1a0000d 	mov	r0, sp
  98:	ebfffffe 	bl	0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
  9c:	e1a0000d 	mov	r0, sp
  a0:	e284101d 	add	r1, r4, #29
  a4:	ebfffffe 	bl	0 <ReadConfigFile::Read(char const*)>
  a8:	e2505000 	subs	r5, r0, #0
  ac:	e5940000 	ldr	r0, [r4]
  b0:	0a00000b 	beq	e4 <L6470Params::Load(unsigned int)+0x78>
  b4:	e3500000 	cmp	r0, #0
  b8:	0a000004 	beq	d0 <L6470Params::Load(unsigned int)+0x64>
  bc:	e5903000 	ldr	r3, [r0]
  c0:	e1a01006 	mov	r1, r6
  c4:	e5933008 	ldr	r3, [r3, #8]
  c8:	e2842004 	add	r2, r4, #4
  cc:	e12fff33 	blx	r3
  d0:	e1a0000d 	mov	r0, sp
  d4:	ebfffffe 	bl	0 <ReadConfigFile::~ReadConfigFile()>
  d8:	e1a00005 	mov	r0, r5
  dc:	e28dd008 	add	sp, sp, #8
  e0:	e8bd8070 	pop	{r4, r5, r6, pc}
  e4:	e3500000 	cmp	r0, #0
  e8:	0afffff8 	beq	d0 <L6470Params::Load(unsigned int)+0x64>
  ec:	e5903000 	ldr	r3, [r0]
  f0:	e1a01006 	mov	r1, r6
  f4:	e593300c 	ldr	r3, [r3, #12]
  f8:	e2842004 	add	r2, r4, #4
  fc:	e12fff33 	blx	r3
 100:	e3a05001 	mov	r5, #1
 104:	eafffff1 	b	d0 <L6470Params::Load(unsigned int)+0x64>
 108:	00000000 	andeq	r0, r0, r0

0000010c <L6470Params::Load(unsigned int, char const*, unsigned int)>:
 10c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 110:	e1a07003 	mov	r7, r3
 114:	e5903000 	ldr	r3, [r0]
 118:	e24dd00c 	sub	sp, sp, #12
 11c:	e3530000 	cmp	r3, #0
 120:	0a000014 	beq	178 <L6470Params::Load(unsigned int, char const*, unsigned int)+0x6c>
 124:	e3a03000 	mov	r3, #0
 128:	e1a04000 	mov	r4, r0
 12c:	e1a06002 	mov	r6, r2
 130:	e5843004 	str	r3, [r4, #4]
 134:	e1a02000 	mov	r2, r0
 138:	e1a05001 	mov	r5, r1
 13c:	e1a0000d 	mov	r0, sp
 140:	e59f1038 	ldr	r1, [pc, #56]	; 180 <L6470Params::Load(unsigned int, char const*, unsigned int)+0x74>
 144:	ebfffffe 	bl	0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 148:	e1a02007 	mov	r2, r7
 14c:	e1a01006 	mov	r1, r6
 150:	e1a0000d 	mov	r0, sp
 154:	ebfffffe 	bl	0 <ReadConfigFile::Read(char const*, unsigned int)>
 158:	e1a02004 	mov	r2, r4
 15c:	e4920004 	ldr	r0, [r2], #4
 160:	e1a01005 	mov	r1, r5
 164:	e5903000 	ldr	r3, [r0]
 168:	e5933008 	ldr	r3, [r3, #8]
 16c:	e12fff33 	blx	r3
 170:	e1a0000d 	mov	r0, sp
 174:	ebfffffe 	bl	0 <ReadConfigFile::~ReadConfigFile()>
 178:	e28dd00c 	add	sp, sp, #12
 17c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
 180:	00000000 	andeq	r0, r0, r0

00000184 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)>:
 184:	e92d4030 	push	{r4, r5, lr}
 188:	e1a04000 	mov	r4, r0
 18c:	e252c000 	subs	ip, r2, #0
 190:	e2810030 	add	r0, r1, #48	; 0x30
 194:	e1a05003 	mov	r5, r3
 198:	e24dd024 	sub	sp, sp, #36	; 0x24
 19c:	e5c40022 	strb	r0, [r4, #34]	; 0x22
 1a0:	0a0000e2 	beq	530 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3ac>
 1a4:	e2841003 	add	r1, r4, #3
 1a8:	e28ce019 	add	lr, ip, #25
 1ac:	e4dc0001 	ldrb	r0, [ip], #1
 1b0:	e15c000e 	cmp	ip, lr
 1b4:	e5e10001 	strb	r0, [r1, #1]!
 1b8:	1afffffb 	bne	1ac <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x28>
 1bc:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
 1c0:	e284101d 	add	r1, r4, #29
 1c4:	e1a02005 	mov	r2, r5
 1c8:	e28d0014 	add	r0, sp, #20
 1cc:	ebfffffe 	bl	0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 1d0:	e1dd31bc 	ldrh	r3, [sp, #28]
 1d4:	e59d1018 	ldr	r1, [sp, #24]
 1d8:	e1530001 	cmp	r3, r1
 1dc:	3a000003 	bcc	1f0 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x6c>
 1e0:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
 1e4:	e5823000 	str	r3, [r2]
 1e8:	e28dd024 	add	sp, sp, #36	; 0x24
 1ec:	e8bd8030 	pop	{r4, r5, pc}
 1f0:	ed947a02 	vldr	s14, [r4, #8]
 1f4:	e3a0c001 	mov	ip, #1
 1f8:	eeb77ac7 	vcvt.f64.f32	d7, s14
 1fc:	e5942004 	ldr	r2, [r4, #4]
 200:	e59d0014 	ldr	r0, [sp, #20]
 204:	e3120001 	tst	r2, #1
 208:	e0415003 	sub	r5, r1, r3
 20c:	e1a01005 	mov	r1, r5
 210:	159f2330 	ldrne	r2, [pc, #816]	; 548 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3c4>
 214:	059f2330 	ldreq	r2, [pc, #816]	; 54c <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3c8>
 218:	ed8d7b02 	vstr	d7, [sp, #8]
 21c:	e0800003 	add	r0, r0, r3
 220:	e58dc000 	str	ip, [sp]
 224:	e59f3324 	ldr	r3, [pc, #804]	; 550 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3cc>
 228:	ebfffffe 	bl	0 <snprintf>
 22c:	e1dd21bc 	ldrh	r2, [sp, #28]
 230:	e1550000 	cmp	r5, r0
 234:	a0822000 	addge	r2, r2, r0
 238:	e59d5018 	ldr	r5, [sp, #24]
 23c:	a6ff2072 	uxthge	r2, r2
 240:	e5941004 	ldr	r1, [r4, #4]
 244:	a1cd21bc 	strhge	r2, [sp, #28]
 248:	e1520005 	cmp	r2, r5
 24c:	ed947a03 	vldr	s14, [r4, #12]
 250:	e1a03002 	mov	r3, r2
 254:	e2011002 	and	r1, r1, #2
 258:	2affffe0 	bcs	1e0 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x5c>
 25c:	eeb77ac7 	vcvt.f64.f32	d7, s14
 260:	e3a0c001 	mov	ip, #1
 264:	e59d0014 	ldr	r0, [sp, #20]
 268:	e0455002 	sub	r5, r5, r2
 26c:	e3510000 	cmp	r1, #0
 270:	e0800002 	add	r0, r0, r2
 274:	e1a01005 	mov	r1, r5
 278:	159f22c8 	ldrne	r2, [pc, #712]	; 548 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3c4>
 27c:	059f22c8 	ldreq	r2, [pc, #712]	; 54c <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3c8>
 280:	ed8d7b02 	vstr	d7, [sp, #8]
 284:	e59f32c8 	ldr	r3, [pc, #712]	; 554 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3d0>
 288:	e58dc000 	str	ip, [sp]
 28c:	ebfffffe 	bl	0 <snprintf>
 290:	e1dd21bc 	ldrh	r2, [sp, #28]
 294:	e1550000 	cmp	r5, r0
 298:	a0822000 	addge	r2, r2, r0
 29c:	e59d5018 	ldr	r5, [sp, #24]
 2a0:	a6ff2072 	uxthge	r2, r2
 2a4:	e5941004 	ldr	r1, [r4, #4]
 2a8:	a1cd21bc 	strhge	r2, [sp, #28]
 2ac:	e1520005 	cmp	r2, r5
 2b0:	ed947a04 	vldr	s14, [r4, #16]
 2b4:	e1a03002 	mov	r3, r2
 2b8:	e2011004 	and	r1, r1, #4
 2bc:	2affffc7 	bcs	1e0 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x5c>
 2c0:	eeb77ac7 	vcvt.f64.f32	d7, s14
 2c4:	e3a0c001 	mov	ip, #1
 2c8:	e59d0014 	ldr	r0, [sp, #20]
 2cc:	e0455002 	sub	r5, r5, r2
 2d0:	e3510000 	cmp	r1, #0
 2d4:	e0800002 	add	r0, r0, r2
 2d8:	e1a01005 	mov	r1, r5
 2dc:	159f2264 	ldrne	r2, [pc, #612]	; 548 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3c4>
 2e0:	059f2264 	ldreq	r2, [pc, #612]	; 54c <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3c8>
 2e4:	ed8d7b02 	vstr	d7, [sp, #8]
 2e8:	e59f3268 	ldr	r3, [pc, #616]	; 558 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3d4>
 2ec:	e58dc000 	str	ip, [sp]
 2f0:	ebfffffe 	bl	0 <snprintf>
 2f4:	e1dd21bc 	ldrh	r2, [sp, #28]
 2f8:	e1550000 	cmp	r5, r0
 2fc:	a0822000 	addge	r2, r2, r0
 300:	e59d5018 	ldr	r5, [sp, #24]
 304:	a6ff2072 	uxthge	r2, r2
 308:	e5941004 	ldr	r1, [r4, #4]
 30c:	a1cd21bc 	strhge	r2, [sp, #28]
 310:	e1520005 	cmp	r2, r5
 314:	ed947a05 	vldr	s14, [r4, #20]
 318:	e1a03002 	mov	r3, r2
 31c:	e2011008 	and	r1, r1, #8
 320:	2affffae 	bcs	1e0 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x5c>
 324:	e3a0c001 	mov	ip, #1
 328:	eeb77ac7 	vcvt.f64.f32	d7, s14
 32c:	e59d0014 	ldr	r0, [sp, #20]
 330:	e0455002 	sub	r5, r5, r2
 334:	e3510000 	cmp	r1, #0
 338:	e0800002 	add	r0, r0, r2
 33c:	e1a01005 	mov	r1, r5
 340:	159f2200 	ldrne	r2, [pc, #512]	; 548 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3c4>
 344:	059f2200 	ldreq	r2, [pc, #512]	; 54c <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3c8>
 348:	e59f320c 	ldr	r3, [pc, #524]	; 55c <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3d8>
 34c:	e58dc000 	str	ip, [sp]
 350:	ed8d7b02 	vstr	d7, [sp, #8]
 354:	ebfffffe 	bl	0 <snprintf>
 358:	e1dd21bc 	ldrh	r2, [sp, #28]
 35c:	e1550000 	cmp	r5, r0
 360:	a0822000 	addge	r2, r2, r0
 364:	e59d5018 	ldr	r5, [sp, #24]
 368:	a6ff2072 	uxthge	r2, r2
 36c:	e5941004 	ldr	r1, [r4, #4]
 370:	a1cd21bc 	strhge	r2, [sp, #28]
 374:	e1520005 	cmp	r2, r5
 378:	e1a03002 	mov	r3, r2
 37c:	e5d4c018 	ldrb	ip, [r4, #24]
 380:	e2011010 	and	r1, r1, #16
 384:	2affff95 	bcs	1e0 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x5c>
 388:	e59d0014 	ldr	r0, [sp, #20]
 38c:	e0455002 	sub	r5, r5, r2
 390:	e3510000 	cmp	r1, #0
 394:	e0800002 	add	r0, r0, r2
 398:	e1a01005 	mov	r1, r5
 39c:	159f21bc 	ldrne	r2, [pc, #444]	; 560 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3dc>
 3a0:	059f21bc 	ldreq	r2, [pc, #444]	; 564 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3e0>
 3a4:	e59f31bc 	ldr	r3, [pc, #444]	; 568 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3e4>
 3a8:	e58dc000 	str	ip, [sp]
 3ac:	ebfffffe 	bl	0 <snprintf>
 3b0:	e1dd21bc 	ldrh	r2, [sp, #28]
 3b4:	e1550000 	cmp	r5, r0
 3b8:	a0822000 	addge	r2, r2, r0
 3bc:	e59d5018 	ldr	r5, [sp, #24]
 3c0:	a6ff2072 	uxthge	r2, r2
 3c4:	e5941004 	ldr	r1, [r4, #4]
 3c8:	a1cd21bc 	strhge	r2, [sp, #28]
 3cc:	e1520005 	cmp	r2, r5
 3d0:	e1a03002 	mov	r3, r2
 3d4:	e5d4c019 	ldrb	ip, [r4, #25]
 3d8:	e2011020 	and	r1, r1, #32
 3dc:	2affff7f 	bcs	1e0 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x5c>
 3e0:	e59d0014 	ldr	r0, [sp, #20]
 3e4:	e0455002 	sub	r5, r5, r2
 3e8:	e3510000 	cmp	r1, #0
 3ec:	e0800002 	add	r0, r0, r2
 3f0:	e1a01005 	mov	r1, r5
 3f4:	159f2164 	ldrne	r2, [pc, #356]	; 560 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3dc>
 3f8:	059f2164 	ldreq	r2, [pc, #356]	; 564 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3e0>
 3fc:	e59f3168 	ldr	r3, [pc, #360]	; 56c <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3e8>
 400:	e58dc000 	str	ip, [sp]
 404:	ebfffffe 	bl	0 <snprintf>
 408:	e1dd21bc 	ldrh	r2, [sp, #28]
 40c:	e1550000 	cmp	r5, r0
 410:	a0822000 	addge	r2, r2, r0
 414:	e59d5018 	ldr	r5, [sp, #24]
 418:	a6ff2072 	uxthge	r2, r2
 41c:	e5941004 	ldr	r1, [r4, #4]
 420:	a1cd21bc 	strhge	r2, [sp, #28]
 424:	e1520005 	cmp	r2, r5
 428:	e1a03002 	mov	r3, r2
 42c:	e5d4c01a 	ldrb	ip, [r4, #26]
 430:	e2011040 	and	r1, r1, #64	; 0x40
 434:	2affff69 	bcs	1e0 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x5c>
 438:	e59d0014 	ldr	r0, [sp, #20]
 43c:	e0455002 	sub	r5, r5, r2
 440:	e3510000 	cmp	r1, #0
 444:	e0800002 	add	r0, r0, r2
 448:	e1a01005 	mov	r1, r5
 44c:	159f210c 	ldrne	r2, [pc, #268]	; 560 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3dc>
 450:	059f210c 	ldreq	r2, [pc, #268]	; 564 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3e0>
 454:	e59f3114 	ldr	r3, [pc, #276]	; 570 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3ec>
 458:	e58dc000 	str	ip, [sp]
 45c:	ebfffffe 	bl	0 <snprintf>
 460:	e1dd21bc 	ldrh	r2, [sp, #28]
 464:	e1550000 	cmp	r5, r0
 468:	a0822000 	addge	r2, r2, r0
 46c:	e59d5018 	ldr	r5, [sp, #24]
 470:	a6ff2072 	uxthge	r2, r2
 474:	e5941004 	ldr	r1, [r4, #4]
 478:	a1cd21bc 	strhge	r2, [sp, #28]
 47c:	e1520005 	cmp	r2, r5
 480:	e1a03002 	mov	r3, r2
 484:	e5d4c01b 	ldrb	ip, [r4, #27]
 488:	e2011080 	and	r1, r1, #128	; 0x80
 48c:	2affff53 	bcs	1e0 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x5c>
 490:	e59d0014 	ldr	r0, [sp, #20]
 494:	e0455002 	sub	r5, r5, r2
 498:	e3510000 	cmp	r1, #0
 49c:	e0800002 	add	r0, r0, r2
 4a0:	e1a01005 	mov	r1, r5
 4a4:	159f20b4 	ldrne	r2, [pc, #180]	; 560 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3dc>
 4a8:	059f20b4 	ldreq	r2, [pc, #180]	; 564 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3e0>
 4ac:	e59f30c0 	ldr	r3, [pc, #192]	; 574 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3f0>
 4b0:	e58dc000 	str	ip, [sp]
 4b4:	ebfffffe 	bl	0 <snprintf>
 4b8:	e1dd21bc 	ldrh	r2, [sp, #28]
 4bc:	e1550000 	cmp	r5, r0
 4c0:	a0822000 	addge	r2, r2, r0
 4c4:	e5941004 	ldr	r1, [r4, #4]
 4c8:	e5d4c01c 	ldrb	ip, [r4, #28]
 4cc:	e59d4018 	ldr	r4, [sp, #24]
 4d0:	a6ff2072 	uxthge	r2, r2
 4d4:	a1cd21bc 	strhge	r2, [sp, #28]
 4d8:	e1520004 	cmp	r2, r4
 4dc:	e1a03002 	mov	r3, r2
 4e0:	e2011c01 	and	r1, r1, #256	; 0x100
 4e4:	2affff3d 	bcs	1e0 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x5c>
 4e8:	e59d0014 	ldr	r0, [sp, #20]
 4ec:	e0444002 	sub	r4, r4, r2
 4f0:	e3510000 	cmp	r1, #0
 4f4:	e0800002 	add	r0, r0, r2
 4f8:	e1a01004 	mov	r1, r4
 4fc:	159f205c 	ldrne	r2, [pc, #92]	; 560 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3dc>
 500:	059f205c 	ldreq	r2, [pc, #92]	; 564 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3e0>
 504:	e59f306c 	ldr	r3, [pc, #108]	; 578 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x3f4>
 508:	e58dc000 	str	ip, [sp]
 50c:	ebfffffe 	bl	0 <snprintf>
 510:	e1dd31bc 	ldrh	r3, [sp, #28]
 514:	e1540000 	cmp	r4, r0
 518:	a0833000 	addge	r3, r3, r0
 51c:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
 520:	a6ff3073 	uxthge	r3, r3
 524:	e5823000 	str	r3, [r2]
 528:	e28dd024 	add	sp, sp, #36	; 0x24
 52c:	e8bd8030 	pop	{r4, r5, pc}
 530:	e5940000 	ldr	r0, [r4]
 534:	e2842004 	add	r2, r4, #4
 538:	e5903000 	ldr	r3, [r0]
 53c:	e593300c 	ldr	r3, [r3, #12]
 540:	e12fff33 	blx	r3
 544:	eaffff1c 	b	1bc <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x38>
 548:	00000000 	andeq	r0, r0, r0
 54c:	0000000c 	andeq	r0, r0, ip
	...
 560:	00000018 	andeq	r0, r0, r8, lsl r0
 564:	00000020 	andeq	r0, r0, r0, lsr #32
	...

0000057c <L6470Params::Save(unsigned int, char*, unsigned int, unsigned int&)>:
 57c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 580:	e590e000 	ldr	lr, [r0]
 584:	e24dd00c 	sub	sp, sp, #12
 588:	e35e0000 	cmp	lr, #0
 58c:	0a000007 	beq	5b0 <L6470Params::Save(unsigned int, char*, unsigned int, unsigned int&)+0x34>
 590:	e1a0c003 	mov	ip, r3
 594:	e59de010 	ldr	lr, [sp, #16]
 598:	e1a03002 	mov	r3, r2
 59c:	e88d5000 	stm	sp, {ip, lr}
 5a0:	e3a02000 	mov	r2, #0
 5a4:	ebfffffe 	bl	184 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)>
 5a8:	e28dd00c 	add	sp, sp, #12
 5ac:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
 5b0:	e59d3010 	ldr	r3, [sp, #16]
 5b4:	e583e000 	str	lr, [r3]
 5b8:	e28dd00c 	add	sp, sp, #12
 5bc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000005c0 <L6470Params::callbackFunction(char const*)>:
 5c0:	e92d4030 	push	{r4, r5, lr}
 5c4:	e1a05001 	mov	r5, r1
 5c8:	e24dd00c 	sub	sp, sp, #12
 5cc:	e1a04000 	mov	r4, r0
 5d0:	e59f11b0 	ldr	r1, [pc, #432]	; 788 <L6470Params::callbackFunction(char const*)+0x1c8>
 5d4:	e1a00005 	mov	r0, r5
 5d8:	e28d2004 	add	r2, sp, #4
 5dc:	ebfffffe 	bl	0 <Sscan::Float(char const*, char const*, float&)>
 5e0:	e3500000 	cmp	r0, #0
 5e4:	1a000006 	bne	604 <L6470Params::callbackFunction(char const*)+0x44>
 5e8:	e5943004 	ldr	r3, [r4, #4]
 5ec:	e59d2004 	ldr	r2, [sp, #4]
 5f0:	e3833001 	orr	r3, r3, #1
 5f4:	e5842008 	str	r2, [r4, #8]
 5f8:	e5843004 	str	r3, [r4, #4]
 5fc:	e28dd00c 	add	sp, sp, #12
 600:	e8bd8030 	pop	{r4, r5, pc}
 604:	e1a00005 	mov	r0, r5
 608:	e59f117c 	ldr	r1, [pc, #380]	; 78c <L6470Params::callbackFunction(char const*)+0x1cc>
 60c:	e28d2004 	add	r2, sp, #4
 610:	ebfffffe 	bl	0 <Sscan::Float(char const*, char const*, float&)>
 614:	e3500000 	cmp	r0, #0
 618:	1a000006 	bne	638 <L6470Params::callbackFunction(char const*)+0x78>
 61c:	e5943004 	ldr	r3, [r4, #4]
 620:	e59d2004 	ldr	r2, [sp, #4]
 624:	e3833002 	orr	r3, r3, #2
 628:	e584200c 	str	r2, [r4, #12]
 62c:	e5843004 	str	r3, [r4, #4]
 630:	e28dd00c 	add	sp, sp, #12
 634:	e8bd8030 	pop	{r4, r5, pc}
 638:	e1a00005 	mov	r0, r5
 63c:	e59f114c 	ldr	r1, [pc, #332]	; 790 <L6470Params::callbackFunction(char const*)+0x1d0>
 640:	e28d2004 	add	r2, sp, #4
 644:	ebfffffe 	bl	0 <Sscan::Float(char const*, char const*, float&)>
 648:	e3500000 	cmp	r0, #0
 64c:	1a000006 	bne	66c <L6470Params::callbackFunction(char const*)+0xac>
 650:	e5943004 	ldr	r3, [r4, #4]
 654:	e59d2004 	ldr	r2, [sp, #4]
 658:	e3833004 	orr	r3, r3, #4
 65c:	e5842010 	str	r2, [r4, #16]
 660:	e5843004 	str	r3, [r4, #4]
 664:	e28dd00c 	add	sp, sp, #12
 668:	e8bd8030 	pop	{r4, r5, pc}
 66c:	e1a00005 	mov	r0, r5
 670:	e59f111c 	ldr	r1, [pc, #284]	; 794 <L6470Params::callbackFunction(char const*)+0x1d4>
 674:	e28d2004 	add	r2, sp, #4
 678:	ebfffffe 	bl	0 <Sscan::Float(char const*, char const*, float&)>
 67c:	e3500000 	cmp	r0, #0
 680:	1a000005 	bne	69c <L6470Params::callbackFunction(char const*)+0xdc>
 684:	e5943004 	ldr	r3, [r4, #4]
 688:	e59d2004 	ldr	r2, [sp, #4]
 68c:	e3833008 	orr	r3, r3, #8
 690:	e5842014 	str	r2, [r4, #20]
 694:	e5843004 	str	r3, [r4, #4]
 698:	eaffffd7 	b	5fc <L6470Params::callbackFunction(char const*)+0x3c>
 69c:	e1a00005 	mov	r0, r5
 6a0:	e59f10f0 	ldr	r1, [pc, #240]	; 798 <L6470Params::callbackFunction(char const*)+0x1d8>
 6a4:	e28d2003 	add	r2, sp, #3
 6a8:	ebfffffe 	bl	0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 6ac:	e3500000 	cmp	r0, #0
 6b0:	1a000005 	bne	6cc <L6470Params::callbackFunction(char const*)+0x10c>
 6b4:	e5943004 	ldr	r3, [r4, #4]
 6b8:	e5dd2003 	ldrb	r2, [sp, #3]
 6bc:	e3833010 	orr	r3, r3, #16
 6c0:	e5c42018 	strb	r2, [r4, #24]
 6c4:	e5843004 	str	r3, [r4, #4]
 6c8:	eaffffcb 	b	5fc <L6470Params::callbackFunction(char const*)+0x3c>
 6cc:	e1a00005 	mov	r0, r5
 6d0:	e59f10c4 	ldr	r1, [pc, #196]	; 79c <L6470Params::callbackFunction(char const*)+0x1dc>
 6d4:	e28d2003 	add	r2, sp, #3
 6d8:	ebfffffe 	bl	0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 6dc:	e3500000 	cmp	r0, #0
 6e0:	1a000005 	bne	6fc <L6470Params::callbackFunction(char const*)+0x13c>
 6e4:	e5943004 	ldr	r3, [r4, #4]
 6e8:	e5dd2003 	ldrb	r2, [sp, #3]
 6ec:	e3833020 	orr	r3, r3, #32
 6f0:	e5c42019 	strb	r2, [r4, #25]
 6f4:	e5843004 	str	r3, [r4, #4]
 6f8:	eaffffbf 	b	5fc <L6470Params::callbackFunction(char const*)+0x3c>
 6fc:	e1a00005 	mov	r0, r5
 700:	e59f1098 	ldr	r1, [pc, #152]	; 7a0 <L6470Params::callbackFunction(char const*)+0x1e0>
 704:	e28d2003 	add	r2, sp, #3
 708:	ebfffffe 	bl	0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 70c:	e3500000 	cmp	r0, #0
 710:	1a000005 	bne	72c <L6470Params::callbackFunction(char const*)+0x16c>
 714:	e5943004 	ldr	r3, [r4, #4]
 718:	e5dd2003 	ldrb	r2, [sp, #3]
 71c:	e3833040 	orr	r3, r3, #64	; 0x40
 720:	e5c4201a 	strb	r2, [r4, #26]
 724:	e5843004 	str	r3, [r4, #4]
 728:	eaffffb3 	b	5fc <L6470Params::callbackFunction(char const*)+0x3c>
 72c:	e1a00005 	mov	r0, r5
 730:	e59f106c 	ldr	r1, [pc, #108]	; 7a4 <L6470Params::callbackFunction(char const*)+0x1e4>
 734:	e28d2003 	add	r2, sp, #3
 738:	ebfffffe 	bl	0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 73c:	e3500000 	cmp	r0, #0
 740:	1a000005 	bne	75c <L6470Params::callbackFunction(char const*)+0x19c>
 744:	e5943004 	ldr	r3, [r4, #4]
 748:	e5dd2003 	ldrb	r2, [sp, #3]
 74c:	e3833080 	orr	r3, r3, #128	; 0x80
 750:	e5c4201b 	strb	r2, [r4, #27]
 754:	e5843004 	str	r3, [r4, #4]
 758:	eaffffa7 	b	5fc <L6470Params::callbackFunction(char const*)+0x3c>
 75c:	e28d2003 	add	r2, sp, #3
 760:	e1a00005 	mov	r0, r5
 764:	e59f103c 	ldr	r1, [pc, #60]	; 7a8 <L6470Params::callbackFunction(char const*)+0x1e8>
 768:	ebfffffe 	bl	0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 76c:	e3500000 	cmp	r0, #0
 770:	05943004 	ldreq	r3, [r4, #4]
 774:	05dd2003 	ldrbeq	r2, [sp, #3]
 778:	03833c01 	orreq	r3, r3, #256	; 0x100
 77c:	05c4201c 	strbeq	r2, [r4, #28]
 780:	05843004 	streq	r3, [r4, #4]
 784:	eaffff9c 	b	5fc <L6470Params::callbackFunction(char const*)+0x3c>
	...

000007ac <L6470Params::staticCallbackFunction(void*, char const*)>:
 7ac:	eafffffe 	b	5c0 <L6470Params::callbackFunction(char const*)>

000007b0 <L6470Params::Set(L6470*)>:
 7b0:	e5903004 	ldr	r3, [r0, #4]
 7b4:	e92d4070 	push	{r4, r5, r6, lr}
 7b8:	e3130001 	tst	r3, #1
 7bc:	e1a04000 	mov	r4, r0
 7c0:	e1a05001 	mov	r5, r1
 7c4:	1a000038 	bne	8ac <L6470Params::Set(L6470*)+0xfc>
 7c8:	e3130002 	tst	r3, #2
 7cc:	1a000031 	bne	898 <L6470Params::Set(L6470*)+0xe8>
 7d0:	e3130004 	tst	r3, #4
 7d4:	1a00002a 	bne	884 <L6470Params::Set(L6470*)+0xd4>
 7d8:	e3130008 	tst	r3, #8
 7dc:	1a000023 	bne	870 <L6470Params::Set(L6470*)+0xc0>
 7e0:	e3130010 	tst	r3, #16
 7e4:	1a00001c 	bne	85c <L6470Params::Set(L6470*)+0xac>
 7e8:	e3130020 	tst	r3, #32
 7ec:	1a000015 	bne	848 <L6470Params::Set(L6470*)+0x98>
 7f0:	e3130040 	tst	r3, #64	; 0x40
 7f4:	1a00000e 	bne	834 <L6470Params::Set(L6470*)+0x84>
 7f8:	e3130080 	tst	r3, #128	; 0x80
 7fc:	1a000005 	bne	818 <L6470Params::Set(L6470*)+0x68>
 800:	e3130c01 	tst	r3, #256	; 0x100
 804:	08bd8070 	popeq	{r4, r5, r6, pc}
 808:	e1a00005 	mov	r0, r5
 80c:	e5d4101c 	ldrb	r1, [r4, #28]
 810:	e8bd4070 	pop	{r4, r5, r6, lr}
 814:	eafffffe 	b	0 <L6470::setMicroSteps(unsigned int)>
 818:	e1a00005 	mov	r0, r5
 81c:	e5d4101b 	ldrb	r1, [r4, #27]
 820:	ebfffffe 	bl	0 <L6470::setDecKVAL(unsigned char)>
 824:	e5943004 	ldr	r3, [r4, #4]
 828:	e3130c01 	tst	r3, #256	; 0x100
 82c:	08bd8070 	popeq	{r4, r5, r6, pc}
 830:	eafffff4 	b	808 <L6470Params::Set(L6470*)+0x58>
 834:	e1a00005 	mov	r0, r5
 838:	e5d4101a 	ldrb	r1, [r4, #26]
 83c:	ebfffffe 	bl	0 <L6470::setAccKVAL(unsigned char)>
 840:	e5943004 	ldr	r3, [r4, #4]
 844:	eaffffeb 	b	7f8 <L6470Params::Set(L6470*)+0x48>
 848:	e1a00005 	mov	r0, r5
 84c:	e5d41019 	ldrb	r1, [r4, #25]
 850:	ebfffffe 	bl	0 <L6470::setRunKVAL(unsigned char)>
 854:	e5943004 	ldr	r3, [r4, #4]
 858:	eaffffe4 	b	7f0 <L6470Params::Set(L6470*)+0x40>
 85c:	e1a00005 	mov	r0, r5
 860:	e5d41018 	ldrb	r1, [r4, #24]
 864:	ebfffffe 	bl	0 <L6470::setHoldKVAL(unsigned char)>
 868:	e5943004 	ldr	r3, [r4, #4]
 86c:	eaffffdd 	b	7e8 <L6470Params::Set(L6470*)+0x38>
 870:	ed940a05 	vldr	s0, [r4, #20]
 874:	e1a00005 	mov	r0, r5
 878:	ebfffffe 	bl	0 <L6470::setDec(float)>
 87c:	e5943004 	ldr	r3, [r4, #4]
 880:	eaffffd6 	b	7e0 <L6470Params::Set(L6470*)+0x30>
 884:	ed940a04 	vldr	s0, [r4, #16]
 888:	e1a00005 	mov	r0, r5
 88c:	ebfffffe 	bl	0 <L6470::setAcc(float)>
 890:	e5943004 	ldr	r3, [r4, #4]
 894:	eaffffcf 	b	7d8 <L6470Params::Set(L6470*)+0x28>
 898:	ed940a03 	vldr	s0, [r4, #12]
 89c:	e1a00005 	mov	r0, r5
 8a0:	ebfffffe 	bl	0 <L6470::setMaxSpeed(float)>
 8a4:	e5943004 	ldr	r3, [r4, #4]
 8a8:	eaffffc8 	b	7d0 <L6470Params::Set(L6470*)+0x20>
 8ac:	ed900a02 	vldr	s0, [r0, #8]
 8b0:	e1a00001 	mov	r0, r1
 8b4:	ebfffffe 	bl	0 <L6470::setMinSpeed(float)>
 8b8:	e5943004 	ldr	r3, [r4, #4]
 8bc:	eaffffc1 	b	7c8 <L6470Params::Set(L6470*)+0x18>

000008c0 <L6470Params::Dump()>:
 8c0:	e12fff1e 	bx	lr

Disassembly of section .rodata.str1.4:

00000000 <.rodata.str1.4>:
   0:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
   4:	0a662a2e 	beq	198a8c4 <L6470Params::Dump()+0x198a004>
   8:	00000000 	andeq	r0, r0, r0
   c:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
  10:	662a2e25 	strtvs	r2, [sl], -r5, lsr #28
  14:	0000000a 	andeq	r0, r0, sl
  18:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
  1c:	00000a64 	andeq	r0, r0, r4, ror #20
  20:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
  24:	000a6425 	andeq	r6, sl, r5, lsr #8

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <L6470Params::Dump()+0x168cf6c>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <L6470Params::Dump()+0x41b64>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


l6470paramsconst.o:     file format elf32-littlearm


Disassembly of section .rodata:

00000000 <L6470ParamsConst::MICRO_STEPS>:
   0:	3734366c 	ldrcc	r3, [r4, -ip, ror #12]!
   4:	696d5f30 	stmdbvs	sp!, {r4, r5, r8, r9, sl, fp, ip, lr}^
   8:	5f6f7263 	svcpl	0x006f7263
   c:	70657473 	rsbvc	r7, r5, r3, ror r4
  10:	00000073 	andeq	r0, r0, r3, ror r0

00000014 <L6470ParamsConst::KVAL_DEC>:
  14:	3734366c 	ldrcc	r3, [r4, -ip, ror #12]!
  18:	766b5f30 	uqasxvc	r5, fp, r0
  1c:	645f6c61 	ldrbvs	r6, [pc], #-3169	; 24 <L6470ParamsConst::KVAL_ACC>
  20:	00006365 	andeq	r6, r0, r5, ror #6

00000024 <L6470ParamsConst::KVAL_ACC>:
  24:	3734366c 	ldrcc	r3, [r4, -ip, ror #12]!
  28:	766b5f30 	uqasxvc	r5, fp, r0
  2c:	615f6c61 	cmpvs	pc, r1, ror #24
  30:	00006363 	andeq	r6, r0, r3, ror #6

00000034 <L6470ParamsConst::KVAL_RUN>:
  34:	3734366c 	ldrcc	r3, [r4, -ip, ror #12]!
  38:	766b5f30 	uqasxvc	r5, fp, r0
  3c:	725f6c61 	subsvc	r6, pc, #24832	; 0x6100
  40:	00006e75 	andeq	r6, r0, r5, ror lr

00000044 <L6470ParamsConst::KVAL_HOLD>:
  44:	3734366c 	ldrcc	r3, [r4, -ip, ror #12]!
  48:	766b5f30 	uqasxvc	r5, fp, r0
  4c:	685f6c61 	ldmdavs	pc, {r0, r5, r6, sl, fp, sp, lr}^	; <UNPREDICTABLE>
  50:	00646c6f 	rsbeq	r6, r4, pc, ror #24

00000054 <L6470ParamsConst::DEC>:
  54:	3734366c 	ldrcc	r3, [r4, -ip, ror #12]!
  58:	65645f30 	strbvs	r5, [r4, #-3888]!	; 0xfffff0d0
  5c:	00000063 	andeq	r0, r0, r3, rrx

00000060 <L6470ParamsConst::ACC>:
  60:	3734366c 	ldrcc	r3, [r4, -ip, ror #12]!
  64:	63615f30 	cmnvs	r1, #48, 30	; 0xc0
  68:	00000063 	andeq	r0, r0, r3, rrx

0000006c <L6470ParamsConst::MAX_SPEED>:
  6c:	3734366c 	ldrcc	r3, [r4, -ip, ror #12]!
  70:	616d5f30 	cmnvs	sp, r0, lsr pc
  74:	70735f78 	rsbsvc	r5, r3, r8, ror pc
  78:	00646565 	rsbeq	r6, r4, r5, ror #10

0000007c <L6470ParamsConst::MIN_SPEED>:
  7c:	3734366c 	ldrcc	r3, [r4, -ip, ror #12]!
  80:	696d5f30 	stmdbvs	sp!, {r4, r5, r8, r9, sl, fp, ip, lr}^
  84:	70735f6e 	rsbsvc	r5, r3, lr, ror #30
  88:	00646565 	rsbeq	r6, r4, r5, ror #10

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003b41 	andeq	r3, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000031 	andeq	r0, r0, r1, lsr r0
  10:	4d524105 	ldfmie	f4, [r2, #-20]	; 0xffffffec
  14:	36373131 			; <UNDEFINED> instruction: 0x36373131
  18:	2d465a4a 	vstrcs	s11, [r6, #-296]	; 0xfffffed8
  1c:	07060053 	smlsdeq	r6, r3, r0, r0
  20:	01090108 	tsteq	r9, r8, lsl #2
  24:	0412020a 	ldreq	r0, [r2], #-522	; 0xfffffdf6
  28:	01150114 	tsteq	r5, r4, lsl r1
  2c:	01180317 	tsteq	r8, r7, lsl r3
  30:	011a0119 	tsteq	sl, r9, lsl r1
  34:	021e011c 	andseq	r0, lr, #28, 2
  38:	01440122 	cmpeq	r4, r2, lsr #2

l6470dmxmode0.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <L6470DmxMode0::~L6470DmxMode0()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e59f300c 	ldr	r3, [pc, #12]	; 1c <L6470DmxMode0::~L6470DmxMode0()+0x1c>
   c:	e5803000 	str	r3, [r0]
  10:	ebfffffe 	bl	0 <L6470DmxMode::~L6470DmxMode()>
  14:	e1a00004 	mov	r0, r4
  18:	e8bd8010 	pop	{r4, pc}
  1c:	00000008 	andeq	r0, r0, r8

00000020 <L6470DmxMode0::~L6470DmxMode0()>:
  20:	e92d4010 	push	{r4, lr}
  24:	e1a04000 	mov	r4, r0
  28:	e59f3014 	ldr	r3, [pc, #20]	; 44 <L6470DmxMode0::~L6470DmxMode0()+0x24>
  2c:	e5803000 	str	r3, [r0]
  30:	ebfffffe 	bl	0 <L6470DmxMode::~L6470DmxMode()>
  34:	e1a00004 	mov	r0, r4
  38:	ebfffffe 	bl	0 <operator delete(void*)>
  3c:	e1a00004 	mov	r0, r4
  40:	e8bd8010 	pop	{r4, pc}
  44:	00000008 	andeq	r0, r0, r8

00000048 <L6470DmxMode0::Start()>:
  48:	ed900a03 	vldr	s0, [r0, #12]
  4c:	e3a01001 	mov	r1, #1
  50:	e5900004 	ldr	r0, [r0, #4]
  54:	eafffffe 	b	0 <L6470::run(TL6470Direction, float)>

00000058 <L6470DmxMode0::Stop()>:
  58:	e5900004 	ldr	r0, [r0, #4]
  5c:	eafffffe 	b	0 <L6470::hardHiZ()>

00000060 <L6470DmxMode0::Data(unsigned char const*)>:
  60:	e5d13000 	ldrb	r3, [r1]
  64:	e5902004 	ldr	r2, [r0, #4]
  68:	e353007e 	cmp	r3, #126	; 0x7e
  6c:	9a00000f 	bls	b0 <L6470DmxMode0::Data(unsigned char const*)+0x50>
  70:	e3530081 	cmp	r3, #129	; 0x81
  74:	8a000001 	bhi	80 <L6470DmxMode0::Data(unsigned char const*)+0x20>
  78:	e1a00002 	mov	r0, r2
  7c:	eafffffe 	b	0 <L6470::softStop()>
  80:	e2433081 	sub	r3, r3, #129	; 0x81
  84:	ee073a90 	vmov	s15, r3
  88:	ed900a02 	vldr	s0, [r0, #8]
  8c:	ed907a03 	vldr	s14, [r0, #12]
  90:	ed9f6a0e 	vldr	s12, [pc, #56]	; d0 <L6470DmxMode0::Data(unsigned char const*)+0x70>
  94:	eef87ae7 	vcvt.f32.s32	s15, s15
  98:	e3a01000 	mov	r1, #0
  9c:	ee377a40 	vsub.f32	s14, s14, s0
  a0:	eec76a06 	vdiv.f32	s13, s14, s12
  a4:	e1a00002 	mov	r0, r2
  a8:	ee060aa7 	vmla.f32	s0, s13, s15
  ac:	eafffffe 	b	0 <L6470::run(TL6470Direction, float)>
  b0:	e263307f 	rsb	r3, r3, #127	; 0x7f
  b4:	ee073a90 	vmov	s15, r3
  b8:	ed900a02 	vldr	s0, [r0, #8]
  bc:	ed907a03 	vldr	s14, [r0, #12]
  c0:	ed9f6a02 	vldr	s12, [pc, #8]	; d0 <L6470DmxMode0::Data(unsigned char const*)+0x70>
  c4:	eef87ae7 	vcvt.f32.s32	s15, s15
  c8:	e3a01001 	mov	r1, #1
  cc:	eafffff2 	b	9c <L6470DmxMode0::Data(unsigned char const*)+0x3c>
  d0:	42fe0000 	rscsmi	r0, lr, #0

000000d4 <L6470DmxMode0::L6470DmxMode0(L6470*)>:
  d4:	e92d4010 	push	{r4, lr}
  d8:	e1a04000 	mov	r4, r0
  dc:	e59f3024 	ldr	r3, [pc, #36]	; 108 <L6470DmxMode0::L6470DmxMode0(L6470*)+0x34>
  e0:	e1a00001 	mov	r0, r1
  e4:	e5843000 	str	r3, [r4]
  e8:	e5841004 	str	r1, [r4, #4]
  ec:	ebfffffe 	bl	0 <L6470::getMinSpeed()>
  f0:	e5940004 	ldr	r0, [r4, #4]
  f4:	ed840a02 	vstr	s0, [r4, #8]
  f8:	ebfffffe 	bl	0 <L6470::getMaxSpeed()>
  fc:	e1a00004 	mov	r0, r4
 100:	ed840a03 	vstr	s0, [r4, #12]
 104:	e8bd8010 	pop	{r4, pc}
 108:	00000008 	andeq	r0, r0, r8

Disassembly of section .rodata:

00000000 <vtable for L6470DmxMode0>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <L6470DmxMode0::L6470DmxMode0(L6470*)+0x168d758>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <L6470DmxMode0::L6470DmxMode0(L6470*)+0x42350>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


sparkfundmxparams.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
   0:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
   4:	e1d0c0b8 	ldrh	ip, [r0, #8]
   8:	e5905004 	ldr	r5, [r0, #4]
   c:	e15c0005 	cmp	ip, r5
  10:	2a00000e 	bcs	50 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x50>
  14:	e1a04000 	mov	r4, r0
  18:	e5900000 	ldr	r0, [r0]
  1c:	e3530000 	cmp	r3, #0
  20:	e045500c 	sub	r5, r5, ip
  24:	e1a03001 	mov	r3, r1
  28:	e58d2000 	str	r2, [sp]
  2c:	e1a01005 	mov	r1, r5
  30:	159f2020 	ldrne	r2, [pc, #32]	; 58 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x58>
  34:	059f2020 	ldreq	r2, [pc, #32]	; 5c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x5c>
  38:	e080000c 	add	r0, r0, ip
  3c:	ebfffffe 	bl	0 <snprintf>
  40:	e1550000 	cmp	r5, r0
  44:	a1d430b8 	ldrhge	r3, [r4, #8]
  48:	a0830000 	addge	r0, r3, r0
  4c:	a1c400b8 	strhge	r0, [r4, #8]
  50:	e28dd00c 	add	sp, sp, #12
  54:	e8bd8030 	pop	{r4, r5, pc}
  58:	00000000 	andeq	r0, r0, r0
  5c:	00000007 	andeq	r0, r0, r7

00000060 <SparkFunDmxParams::SparkFunDmxParams(SparkFunDmxParamsStore*)>:
  60:	e3a03000 	mov	r3, #0
  64:	e3a02010 	mov	r2, #16
  68:	e92d4010 	push	{r4, lr}
  6c:	e5803004 	str	r3, [r0, #4]
  70:	e5c03009 	strb	r3, [r0, #9]
  74:	e59f3038 	ldr	r3, [pc, #56]	; b4 <SparkFunDmxParams::SparkFunDmxParams(SparkFunDmxParamsStore*)+0x54>
  78:	e1a04000 	mov	r4, r0
  7c:	e1c030ba 	strh	r3, [r0, #10]
  80:	e59f3030 	ldr	r3, [pc, #48]	; b8 <SparkFunDmxParams::SparkFunDmxParams(SparkFunDmxParamsStore*)+0x58>
  84:	e5801000 	str	r1, [r0]
  88:	e280000c 	add	r0, r0, #12
  8c:	e4d31001 	ldrb	r1, [r3], #1
  90:	e3510000 	cmp	r1, #0
  94:	1a000001 	bne	a0 <SparkFunDmxParams::SparkFunDmxParams(SparkFunDmxParamsStore*)+0x40>
  98:	ebfffffe 	bl	0 <memset>
  9c:	ea000002 	b	ac <SparkFunDmxParams::SparkFunDmxParams(SparkFunDmxParamsStore*)+0x4c>
  a0:	e2522001 	subs	r2, r2, #1
  a4:	e4c01001 	strb	r1, [r0], #1
  a8:	1afffff7 	bne	8c <SparkFunDmxParams::SparkFunDmxParams(SparkFunDmxParamsStore*)+0x2c>
  ac:	e1a00004 	mov	r0, r4
  b0:	e8bd8010 	pop	{r4, pc}
  b4:	00001314 	andeq	r1, r0, r4, lsl r3
  b8:	00000000 	andeq	r0, r0, r0

000000bc <SparkFunDmxParams::Load()>:
  bc:	e3a03000 	mov	r3, #0
  c0:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
  c4:	e1a02000 	mov	r2, r0
  c8:	e5803004 	str	r3, [r0, #4]
  cc:	e1a04000 	mov	r4, r0
  d0:	e59f1068 	ldr	r1, [pc, #104]	; 140 <SparkFunDmxParams::Load()+0x84>
  d4:	e1a0000d 	mov	r0, sp
  d8:	ebfffffe 	bl	0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
  dc:	e1a0000d 	mov	r0, sp
  e0:	e59f105c 	ldr	r1, [pc, #92]	; 144 <SparkFunDmxParams::Load()+0x88>
  e4:	ebfffffe 	bl	0 <ReadConfigFile::Read(char const*)>
  e8:	e2505000 	subs	r5, r0, #0
  ec:	e5940000 	ldr	r0, [r4]
  f0:	0a000006 	beq	110 <SparkFunDmxParams::Load()+0x54>
  f4:	e3500000 	cmp	r0, #0
  f8:	0a00000b 	beq	12c <SparkFunDmxParams::Load()+0x70>
  fc:	e5903000 	ldr	r3, [r0]
 100:	e2841004 	add	r1, r4, #4
 104:	e5933008 	ldr	r3, [r3, #8]
 108:	e12fff33 	blx	r3
 10c:	ea000006 	b	12c <SparkFunDmxParams::Load()+0x70>
 110:	e3500000 	cmp	r0, #0
 114:	0a000004 	beq	12c <SparkFunDmxParams::Load()+0x70>
 118:	e5903000 	ldr	r3, [r0]
 11c:	e2841004 	add	r1, r4, #4
 120:	e593300c 	ldr	r3, [r3, #12]
 124:	e12fff33 	blx	r3
 128:	e3a05001 	mov	r5, #1
 12c:	e1a0000d 	mov	r0, sp
 130:	ebfffffe 	bl	0 <ReadConfigFile::~ReadConfigFile()>
 134:	e1a00005 	mov	r0, r5
 138:	e28dd00c 	add	sp, sp, #12
 13c:	e8bd8030 	pop	{r4, r5, pc}
	...

00000148 <SparkFunDmxParams::Load(char const*, unsigned int)>:
 148:	e5903000 	ldr	r3, [r0]
 14c:	e3530000 	cmp	r3, #0
 150:	012fff1e 	bxeq	lr
 154:	e3a03000 	mov	r3, #0
 158:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
 15c:	e1a05001 	mov	r5, r1
 160:	e1a06002 	mov	r6, r2
 164:	e1a04000 	mov	r4, r0
 168:	e5803004 	str	r3, [r0, #4]
 16c:	e1a02000 	mov	r2, r0
 170:	e59f1038 	ldr	r1, [pc, #56]	; 1b0 <SparkFunDmxParams::Load(char const*, unsigned int)+0x68>
 174:	e1a0000d 	mov	r0, sp
 178:	ebfffffe 	bl	0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 17c:	e1a02006 	mov	r2, r6
 180:	e1a01005 	mov	r1, r5
 184:	e1a0000d 	mov	r0, sp
 188:	ebfffffe 	bl	0 <ReadConfigFile::Read(char const*, unsigned int)>
 18c:	e1a01004 	mov	r1, r4
 190:	e4910004 	ldr	r0, [r1], #4
 194:	e5903000 	ldr	r3, [r0]
 198:	e5933008 	ldr	r3, [r3, #8]
 19c:	e12fff33 	blx	r3
 1a0:	e1a0000d 	mov	r0, sp
 1a4:	ebfffffe 	bl	0 <ReadConfigFile::~ReadConfigFile()>
 1a8:	e28dd008 	add	sp, sp, #8
 1ac:	e8bd8070 	pop	{r4, r5, r6, pc}
 1b0:	00000000 	andeq	r0, r0, r0

000001b4 <SparkFunDmxParams::Load(unsigned int)>:
 1b4:	e2813030 	add	r3, r1, #48	; 0x30
 1b8:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
 1bc:	e5c03011 	strb	r3, [r0, #17]
 1c0:	e3a03000 	mov	r3, #0
 1c4:	e1a04000 	mov	r4, r0
 1c8:	e1a02000 	mov	r2, r0
 1cc:	e5803004 	str	r3, [r0, #4]
 1d0:	e1a06001 	mov	r6, r1
 1d4:	e1a0000d 	mov	r0, sp
 1d8:	e59f106c 	ldr	r1, [pc, #108]	; 24c <SparkFunDmxParams::Load(unsigned int)+0x98>
 1dc:	ebfffffe 	bl	0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 1e0:	e1a0000d 	mov	r0, sp
 1e4:	e284100c 	add	r1, r4, #12
 1e8:	ebfffffe 	bl	0 <ReadConfigFile::Read(char const*)>
 1ec:	e2505000 	subs	r5, r0, #0
 1f0:	e5940000 	ldr	r0, [r4]
 1f4:	0a000007 	beq	218 <SparkFunDmxParams::Load(unsigned int)+0x64>
 1f8:	e3500000 	cmp	r0, #0
 1fc:	0a00000d 	beq	238 <SparkFunDmxParams::Load(unsigned int)+0x84>
 200:	e5903000 	ldr	r3, [r0]
 204:	e1a01006 	mov	r1, r6
 208:	e5933010 	ldr	r3, [r3, #16]
 20c:	e2842004 	add	r2, r4, #4
 210:	e12fff33 	blx	r3
 214:	ea000007 	b	238 <SparkFunDmxParams::Load(unsigned int)+0x84>
 218:	e3500000 	cmp	r0, #0
 21c:	0a000005 	beq	238 <SparkFunDmxParams::Load(unsigned int)+0x84>
 220:	e5903000 	ldr	r3, [r0]
 224:	e1a01006 	mov	r1, r6
 228:	e5933014 	ldr	r3, [r3, #20]
 22c:	e2842004 	add	r2, r4, #4
 230:	e12fff33 	blx	r3
 234:	e3a05001 	mov	r5, #1
 238:	e1a0000d 	mov	r0, sp
 23c:	ebfffffe 	bl	0 <ReadConfigFile::~ReadConfigFile()>
 240:	e1a00005 	mov	r0, r5
 244:	e28dd008 	add	sp, sp, #8
 248:	e8bd8070 	pop	{r4, r5, r6, pc}
 24c:	00000000 	andeq	r0, r0, r0

00000250 <SparkFunDmxParams::Load(unsigned int, char const*, unsigned int)>:
 250:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 254:	e1a07003 	mov	r7, r3
 258:	e5903000 	ldr	r3, [r0]
 25c:	e3530000 	cmp	r3, #0
 260:	0a000014 	beq	2b8 <SparkFunDmxParams::Load(unsigned int, char const*, unsigned int)+0x68>
 264:	e3a03000 	mov	r3, #0
 268:	e1a06002 	mov	r6, r2
 26c:	e1a04000 	mov	r4, r0
 270:	e5803004 	str	r3, [r0, #4]
 274:	e1a02000 	mov	r2, r0
 278:	e1a05001 	mov	r5, r1
 27c:	e1a0000d 	mov	r0, sp
 280:	e59f1038 	ldr	r1, [pc, #56]	; 2c0 <SparkFunDmxParams::Load(unsigned int, char const*, unsigned int)+0x70>
 284:	ebfffffe 	bl	0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 288:	e1a02007 	mov	r2, r7
 28c:	e1a01006 	mov	r1, r6
 290:	e1a0000d 	mov	r0, sp
 294:	ebfffffe 	bl	0 <ReadConfigFile::Read(char const*, unsigned int)>
 298:	e1a02004 	mov	r2, r4
 29c:	e4920004 	ldr	r0, [r2], #4
 2a0:	e1a01005 	mov	r1, r5
 2a4:	e5903000 	ldr	r3, [r0]
 2a8:	e5933010 	ldr	r3, [r3, #16]
 2ac:	e12fff33 	blx	r3
 2b0:	e1a0000d 	mov	r0, sp
 2b4:	ebfffffe 	bl	0 <ReadConfigFile::~ReadConfigFile()>
 2b8:	e28dd00c 	add	sp, sp, #12
 2bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
 2c0:	00000000 	andeq	r0, r0, r0

000002c4 <SparkFunDmxParams::callbackFunction(char const*)>:
 2c4:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
 2c8:	e1a05001 	mov	r5, r1
 2cc:	e1a04000 	mov	r4, r0
 2d0:	e59f10b8 	ldr	r1, [pc, #184]	; 390 <SparkFunDmxParams::callbackFunction(char const*)+0xcc>
 2d4:	e1a00005 	mov	r0, r5
 2d8:	e28d2007 	add	r2, sp, #7
 2dc:	ebfffffe 	bl	0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 2e0:	e3500000 	cmp	r0, #0
 2e4:	1a000006 	bne	304 <SparkFunDmxParams::callbackFunction(char const*)+0x40>
 2e8:	e5dd3007 	ldrb	r3, [sp, #7]
 2ec:	e3530007 	cmp	r3, #7
 2f0:	95c43008 	strbls	r3, [r4, #8]
 2f4:	95943004 	ldrls	r3, [r4, #4]
 2f8:	93833001 	orrls	r3, r3, #1
 2fc:	9a000020 	bls	384 <SparkFunDmxParams::callbackFunction(char const*)+0xc0>
 300:	ea000020 	b	388 <SparkFunDmxParams::callbackFunction(char const*)+0xc4>
 304:	e1a00005 	mov	r0, r5
 308:	e59f1084 	ldr	r1, [pc, #132]	; 394 <SparkFunDmxParams::callbackFunction(char const*)+0xd0>
 30c:	e28d2007 	add	r2, sp, #7
 310:	ebfffffe 	bl	0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 314:	e3500000 	cmp	r0, #0
 318:	1a000004 	bne	330 <SparkFunDmxParams::callbackFunction(char const*)+0x6c>
 31c:	e5dd3007 	ldrb	r3, [sp, #7]
 320:	e5c43009 	strb	r3, [r4, #9]
 324:	e5943004 	ldr	r3, [r4, #4]
 328:	e3833002 	orr	r3, r3, #2
 32c:	ea000014 	b	384 <SparkFunDmxParams::callbackFunction(char const*)+0xc0>
 330:	e1a00005 	mov	r0, r5
 334:	e59f105c 	ldr	r1, [pc, #92]	; 398 <SparkFunDmxParams::callbackFunction(char const*)+0xd4>
 338:	e28d2007 	add	r2, sp, #7
 33c:	ebfffffe 	bl	0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 340:	e3500000 	cmp	r0, #0
 344:	1a000004 	bne	35c <SparkFunDmxParams::callbackFunction(char const*)+0x98>
 348:	e5dd3007 	ldrb	r3, [sp, #7]
 34c:	e5c4300a 	strb	r3, [r4, #10]
 350:	e5943004 	ldr	r3, [r4, #4]
 354:	e3833004 	orr	r3, r3, #4
 358:	ea000009 	b	384 <SparkFunDmxParams::callbackFunction(char const*)+0xc0>
 35c:	e1a00005 	mov	r0, r5
 360:	e59f1034 	ldr	r1, [pc, #52]	; 39c <SparkFunDmxParams::callbackFunction(char const*)+0xd8>
 364:	e28d2007 	add	r2, sp, #7
 368:	ebfffffe 	bl	0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 36c:	e3500000 	cmp	r0, #0
 370:	1a000004 	bne	388 <SparkFunDmxParams::callbackFunction(char const*)+0xc4>
 374:	e5dd3007 	ldrb	r3, [sp, #7]
 378:	e5c4300b 	strb	r3, [r4, #11]
 37c:	e5943004 	ldr	r3, [r4, #4]
 380:	e3833008 	orr	r3, r3, #8
 384:	e5843004 	str	r3, [r4, #4]
 388:	e28dd00c 	add	sp, sp, #12
 38c:	e8bd8030 	pop	{r4, r5, pc}
	...

000003a0 <SparkFunDmxParams::staticCallbackFunction(void*, char const*)>:
 3a0:	eafffffe 	b	2c4 <SparkFunDmxParams::callbackFunction(char const*)>

000003a4 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)>:
 3a4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
 3a8:	e1a04000 	mov	r4, r0
 3ac:	e1a06002 	mov	r6, r2
 3b0:	e24dd014 	sub	sp, sp, #20
 3b4:	e2802004 	add	r2, r0, #4
 3b8:	e2510000 	subs	r0, r1, #0
 3bc:	e1a07003 	mov	r7, r3
 3c0:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
 3c4:	0a000006 	beq	3e4 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x40>
 3c8:	e5903000 	ldr	r3, [r0]
 3cc:	e3550007 	cmp	r5, #7
 3d0:	e5843004 	str	r3, [r4, #4]
 3d4:	e5903004 	ldr	r3, [r0, #4]
 3d8:	e5823004 	str	r3, [r2, #4]
 3dc:	9a00000f 	bls	420 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x7c>
 3e0:	ea00000c 	b	418 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x74>
 3e4:	e5940000 	ldr	r0, [r4]
 3e8:	e3550007 	cmp	r5, #7
 3ec:	e5903000 	ldr	r3, [r0]
 3f0:	8a000005 	bhi	40c <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x68>
 3f4:	e5933014 	ldr	r3, [r3, #20]
 3f8:	e1a01005 	mov	r1, r5
 3fc:	e12fff33 	blx	r3
 400:	e2853030 	add	r3, r5, #48	; 0x30
 404:	e5c43011 	strb	r3, [r4, #17]
 408:	ea000004 	b	420 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x7c>
 40c:	e1a01002 	mov	r1, r2
 410:	e593300c 	ldr	r3, [r3, #12]
 414:	e12fff33 	blx	r3
 418:	e59f109c 	ldr	r1, [pc, #156]	; 4bc <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x118>
 41c:	ea000000 	b	424 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x80>
 420:	e284100c 	add	r1, r4, #12
 424:	e1a03007 	mov	r3, r7
 428:	e1a02006 	mov	r2, r6
 42c:	e28d0004 	add	r0, sp, #4
 430:	ebfffffe 	bl	0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 434:	e3550007 	cmp	r5, #7
 438:	8a000005 	bhi	454 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0xb0>
 43c:	e5943004 	ldr	r3, [r4, #4]
 440:	e5d42008 	ldrb	r2, [r4, #8]
 444:	e59f1074 	ldr	r1, [pc, #116]	; 4c0 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x11c>
 448:	e2033001 	and	r3, r3, #1
 44c:	e28d0004 	add	r0, sp, #4
 450:	ebfffeea 	bl	0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 454:	e5943004 	ldr	r3, [r4, #4]
 458:	e5d4200a 	ldrb	r2, [r4, #10]
 45c:	e1a03123 	lsr	r3, r3, #2
 460:	e28d0004 	add	r0, sp, #4
 464:	e59f1058 	ldr	r1, [pc, #88]	; 4c4 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x120>
 468:	e2033001 	and	r3, r3, #1
 46c:	ebfffee3 	bl	0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 470:	e5943004 	ldr	r3, [r4, #4]
 474:	e5d4200b 	ldrb	r2, [r4, #11]
 478:	e1a031a3 	lsr	r3, r3, #3
 47c:	e28d0004 	add	r0, sp, #4
 480:	e59f1040 	ldr	r1, [pc, #64]	; 4c8 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x124>
 484:	e2033001 	and	r3, r3, #1
 488:	ebfffedc 	bl	0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 48c:	e5943004 	ldr	r3, [r4, #4]
 490:	e5d42009 	ldrb	r2, [r4, #9]
 494:	e1a030a3 	lsr	r3, r3, #1
 498:	e59f102c 	ldr	r1, [pc, #44]	; 4cc <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x128>
 49c:	e2033001 	and	r3, r3, #1
 4a0:	e28d0004 	add	r0, sp, #4
 4a4:	ebfffed5 	bl	0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 4a8:	e1dd20bc 	ldrh	r2, [sp, #12]
 4ac:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
 4b0:	e5832000 	str	r2, [r3]
 4b4:	e28dd014 	add	sp, sp, #20
 4b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	...

000004d0 <SparkFunDmxParams::Save(char*, unsigned int, unsigned int&, unsigned int)>:
 4d0:	e590c000 	ldr	ip, [r0]
 4d4:	e35c0000 	cmp	ip, #0
 4d8:	1a000001 	bne	4e4 <SparkFunDmxParams::Save(char*, unsigned int, unsigned int&, unsigned int)+0x14>
 4dc:	e583c000 	str	ip, [r3]
 4e0:	e12fff1e 	bx	lr
 4e4:	e92d4007 	push	{r0, r1, r2, lr}
 4e8:	e59dc010 	ldr	ip, [sp, #16]
 4ec:	e88d1008 	stm	sp, {r3, ip}
 4f0:	e1a03002 	mov	r3, r2
 4f4:	e1a02001 	mov	r2, r1
 4f8:	e3a01000 	mov	r1, #0
 4fc:	ebfffffe 	bl	3a4 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)>
 500:	e28dd00c 	add	sp, sp, #12
 504:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00000508 <SparkFunDmxParams::SetGlobal(SparkFunDmx*)>:
 508:	e5903004 	ldr	r3, [r0, #4]
 50c:	e3130002 	tst	r3, #2
 510:	15d03009 	ldrbne	r3, [r0, #9]
 514:	15c130a4 	strbne	r3, [r1, #164]	; 0xa4
 518:	13a03001 	movne	r3, #1
 51c:	15c130a7 	strbne	r3, [r1, #167]	; 0xa7
 520:	e5903004 	ldr	r3, [r0, #4]
 524:	e3130004 	tst	r3, #4
 528:	15d0300a 	ldrbne	r3, [r0, #10]
 52c:	15c130a5 	strbne	r3, [r1, #165]	; 0xa5
 530:	13a03001 	movne	r3, #1
 534:	15c130a8 	strbne	r3, [r1, #168]	; 0xa8
 538:	e5903004 	ldr	r3, [r0, #4]
 53c:	e3130008 	tst	r3, #8
 540:	15d0300b 	ldrbne	r3, [r0, #11]
 544:	15c130a6 	strbne	r3, [r1, #166]	; 0xa6
 548:	13a03001 	movne	r3, #1
 54c:	15c130a9 	strbne	r3, [r1, #169]	; 0xa9
 550:	e12fff1e 	bx	lr

00000554 <SparkFunDmxParams::SetLocal(SparkFunDmx*)>:
 554:	e5903004 	ldr	r3, [r0, #4]
 558:	e3130001 	tst	r3, #1
 55c:	15d03008 	ldrbne	r3, [r0, #8]
 560:	15c130aa 	strbne	r3, [r1, #170]	; 0xaa
 564:	13a03001 	movne	r3, #1
 568:	15c130ae 	strbne	r3, [r1, #174]	; 0xae
 56c:	e5903004 	ldr	r3, [r0, #4]
 570:	e3130002 	tst	r3, #2
 574:	15d03009 	ldrbne	r3, [r0, #9]
 578:	15c130ab 	strbne	r3, [r1, #171]	; 0xab
 57c:	13a03001 	movne	r3, #1
 580:	15c130af 	strbne	r3, [r1, #175]	; 0xaf
 584:	e5903004 	ldr	r3, [r0, #4]
 588:	e3130004 	tst	r3, #4
 58c:	15d0300a 	ldrbne	r3, [r0, #10]
 590:	15c130ac 	strbne	r3, [r1, #172]	; 0xac
 594:	13a03001 	movne	r3, #1
 598:	15c130b0 	strbne	r3, [r1, #176]	; 0xb0
 59c:	e5903004 	ldr	r3, [r0, #4]
 5a0:	e3130008 	tst	r3, #8
 5a4:	15d0300b 	ldrbne	r3, [r0, #11]
 5a8:	15c130ad 	strbne	r3, [r1, #173]	; 0xad
 5ac:	13a03001 	movne	r3, #1
 5b0:	15c130b1 	strbne	r3, [r1, #177]	; 0xb1
 5b4:	e12fff1e 	bx	lr

000005b8 <SparkFunDmxParams::Dump(unsigned int)>:
 5b8:	e12fff1e 	bx	lr

Disassembly of section .rodata.str1.1:

00000000 <.rodata.str1.1>:
   0:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
   4:	23000a64 	movwcs	r0, #2660	; 0xa64
   8:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
   c:	Address 0x000000000000000c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <SparkFunDmxParams::Dump(unsigned int)+0x168d274>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <SparkFunDmxParams::Dump(unsigned int)+0x41e6c>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


l6470dmxmode4.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <L6470DmxMode4::Stop()>:
   0:	e12fff1e 	bx	lr

00000004 <L6470DmxMode4::BusyCheck()>:
   4:	e5900008 	ldr	r0, [r0, #8]
   8:	e92d4010 	push	{r4, lr}
   c:	e5903000 	ldr	r3, [r0]
  10:	e5933008 	ldr	r3, [r3, #8]
  14:	e12fff33 	blx	r3
  18:	e2500000 	subs	r0, r0, #0
  1c:	13a00001 	movne	r0, #1
  20:	e8bd8010 	pop	{r4, pc}

00000024 <L6470DmxMode4::~L6470DmxMode4()>:
  24:	e92d4010 	push	{r4, lr}
  28:	e1a04000 	mov	r4, r0
  2c:	e59f300c 	ldr	r3, [pc, #12]	; 40 <L6470DmxMode4::~L6470DmxMode4()+0x1c>
  30:	e5803000 	str	r3, [r0]
  34:	ebfffffe 	bl	0 <L6470DmxMode::~L6470DmxMode()>
  38:	e1a00004 	mov	r0, r4
  3c:	e8bd8010 	pop	{r4, pc}
  40:	00000008 	andeq	r0, r0, r8

00000044 <L6470DmxMode4::~L6470DmxMode4()>:
  44:	e92d4010 	push	{r4, lr}
  48:	e1a04000 	mov	r4, r0
  4c:	e59f3014 	ldr	r3, [pc, #20]	; 68 <L6470DmxMode4::~L6470DmxMode4()+0x24>
  50:	e5803000 	str	r3, [r0]
  54:	ebfffffe 	bl	0 <L6470DmxMode::~L6470DmxMode()>
  58:	e1a00004 	mov	r0, r4
  5c:	ebfffffe 	bl	0 <operator delete(void*)>
  60:	e1a00004 	mov	r0, r4
  64:	e8bd8010 	pop	{r4, pc}
  68:	00000008 	andeq	r0, r0, r8

0000006c <L6470DmxMode4::InitSwitch()>:
  6c:	e5903004 	ldr	r3, [r0, #4]
  70:	e5d32015 	ldrb	r2, [r3, #21]
  74:	e3520000 	cmp	r2, #0
  78:	012fff1e 	bxeq	lr
  7c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  80:	e5d3c014 	ldrb	ip, [r3, #20]
  84:	e593e010 	ldr	lr, [r3, #16]
  88:	e1a0cc0c 	lsl	ip, ip, #24
  8c:	e5d32010 	ldrb	r2, [r3, #16]
  90:	e5d3100f 	ldrb	r1, [r3, #15]
  94:	e18c342e 	orr	r3, ip, lr, lsr #8
  98:	ee003a10 	vmov	s0, r3
  9c:	e5900008 	ldr	r0, [r0, #8]
  a0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  a4:	eafffffe 	b	0 <L6470::goUntil(TL6470Action, TL6470Direction, float)>

000000a8 <L6470DmxMode4::InitPos()>:
  a8:	e5900008 	ldr	r0, [r0, #8]
  ac:	eafffffe 	b	0 <L6470::resetPos()>

000000b0 <L6470DmxMode4::Data(unsigned char const*)>:
  b0:	e92d4070 	push	{r4, r5, r6, lr}
  b4:	e1a06001 	mov	r6, r1
  b8:	e5d11000 	ldrb	r1, [r1]
  bc:	ed907a03 	vldr	s14, [r0, #12]
  c0:	ee071a90 	vmov	s15, r1
  c4:	eef87a67 	vcvt.f32.u32	s15, s15
  c8:	ee677a87 	vmul.f32	s15, s15, s14
  cc:	e1a04000 	mov	r4, r0
  d0:	eefc7ae7 	vcvt.u32.f32	s15, s15
  d4:	e5d43011 	ldrb	r3, [r4, #17]
  d8:	ee175a90 	vmov	r5, s15
  dc:	e3530000 	cmp	r3, #0
  e0:	e5900008 	ldr	r0, [r0, #8]
  e4:	1a000009 	bne	110 <L6470DmxMode4::Data(unsigned char const*)+0x60>
  e8:	e5d43010 	ldrb	r3, [r4, #16]
  ec:	e1530001 	cmp	r3, r1
  f0:	93a01000 	movls	r1, #0
  f4:	83a01001 	movhi	r1, #1
  f8:	e1a02005 	mov	r2, r5
  fc:	e2211001 	eor	r1, r1, #1
 100:	ebfffffe 	bl	0 <L6470::goToDir(TL6470Direction, long)>
 104:	e5d63000 	ldrb	r3, [r6]
 108:	e5c43010 	strb	r3, [r4, #16]
 10c:	e8bd8070 	pop	{r4, r5, r6, pc}
 110:	ebfffffe 	bl	0 <L6470::getPos()>
 114:	e1a01000 	mov	r1, r0
 118:	e1550001 	cmp	r5, r1
 11c:	23a01000 	movcs	r1, #0
 120:	33a01001 	movcc	r1, #1
 124:	e5940008 	ldr	r0, [r4, #8]
 128:	eafffff2 	b	f8 <L6470DmxMode4::Data(unsigned char const*)+0x48>

0000012c <L6470DmxMode4::HandleBusy()>:
 12c:	e92d4010 	push	{r4, lr}
 130:	e1a04000 	mov	r4, r0
 134:	e5900008 	ldr	r0, [r0, #8]
 138:	e5903000 	ldr	r3, [r0]
 13c:	e5933008 	ldr	r3, [r3, #8]
 140:	e12fff33 	blx	r3
 144:	e3500000 	cmp	r0, #0
 148:	1a000001 	bne	154 <L6470DmxMode4::HandleBusy()+0x28>
 14c:	e5c40011 	strb	r0, [r4, #17]
 150:	e8bd8010 	pop	{r4, pc}
 154:	e5940008 	ldr	r0, [r4, #8]
 158:	ebfffffe 	bl	0 <L6470::softStop()>
 15c:	e3a03001 	mov	r3, #1
 160:	e5c43011 	strb	r3, [r4, #17]
 164:	e8bd8010 	pop	{r4, pc}

00000168 <L6470DmxMode4::L6470DmxMode4(L6470*, MotorParams*, ModeParams*)>:
 168:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 16c:	e3a0e000 	mov	lr, #0
 170:	e59fc034 	ldr	ip, [pc, #52]	; 1ac <L6470DmxMode4::L6470DmxMode4(L6470*, MotorParams*, ModeParams*)+0x44>
 174:	e1c0e1b0 	strh	lr, [r0, #16]
 178:	e580c000 	str	ip, [r0]
 17c:	e5803004 	str	r3, [r0, #4]
 180:	e5801008 	str	r1, [r0, #8]
 184:	e5d3100b 	ldrb	r1, [r3, #11]
 188:	e593300c 	ldr	r3, [r3, #12]
 18c:	eddf6a05 	vldr	s13, [pc, #20]	; 1a8 <L6470DmxMode4::L6470DmxMode4(L6470*, MotorParams*, ModeParams*)+0x40>
 190:	e1811403 	orr	r1, r1, r3, lsl #8
 194:	ee071a90 	vmov	s15, r1
 198:	eef87a67 	vcvt.f32.u32	s15, s15
 19c:	ee877aa6 	vdiv.f32	s14, s15, s13
 1a0:	ed807a03 	vstr	s14, [r0, #12]
 1a4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
 1a8:	437f0000 	cmnmi	pc, #0
 1ac:	00000008 	andeq	r0, r0, r8

Disassembly of section .rodata:

00000000 <vtable for L6470DmxMode4>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <L6470DmxMode4::L6470DmxMode4(L6470*, MotorParams*, ModeParams*)+0x168d6c4>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <L6470DmxMode4::L6470DmxMode4(L6470*, MotorParams*, ModeParams*)+0x422bc>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


l6470dmxmode1.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <L6470DmxMode1::Start()>:
   0:	e12fff1e 	bx	lr

00000004 <L6470DmxMode1::~L6470DmxMode1()>:
   4:	e92d4010 	push	{r4, lr}
   8:	e1a04000 	mov	r4, r0
   c:	e59f300c 	ldr	r3, [pc, #12]	; 20 <L6470DmxMode1::~L6470DmxMode1()+0x1c>
  10:	e5803000 	str	r3, [r0]
  14:	ebfffffe 	bl	0 <L6470DmxMode::~L6470DmxMode()>
  18:	e1a00004 	mov	r0, r4
  1c:	e8bd8010 	pop	{r4, pc}
  20:	00000008 	andeq	r0, r0, r8

00000024 <L6470DmxMode1::~L6470DmxMode1()>:
  24:	e92d4010 	push	{r4, lr}
  28:	e1a04000 	mov	r4, r0
  2c:	e59f3014 	ldr	r3, [pc, #20]	; 48 <L6470DmxMode1::~L6470DmxMode1()+0x24>
  30:	e5803000 	str	r3, [r0]
  34:	ebfffffe 	bl	0 <L6470DmxMode::~L6470DmxMode()>
  38:	e1a00004 	mov	r0, r4
  3c:	ebfffffe 	bl	0 <operator delete(void*)>
  40:	e1a00004 	mov	r0, r4
  44:	e8bd8010 	pop	{r4, pc}
  48:	00000008 	andeq	r0, r0, r8

0000004c <L6470DmxMode1::Stop()>:
  4c:	e5900004 	ldr	r0, [r0, #4]
  50:	eafffffe 	b	0 <L6470::hardHiZ()>

00000054 <L6470DmxMode1::Data(unsigned char const*)>:
  54:	ed900a02 	vldr	s0, [r0, #8]
  58:	ed907a03 	vldr	s14, [r0, #12]
  5c:	e5d13000 	ldrb	r3, [r1]
  60:	ee377a40 	vsub.f32	s14, s14, s0
  64:	ee073a90 	vmov	s15, r3
  68:	ed9f6a0a 	vldr	s12, [pc, #40]	; 98 <L6470DmxMode1::Data(unsigned char const*)+0x44>
  6c:	eef87a67 	vcvt.f32.u32	s15, s15
  70:	eec76a06 	vdiv.f32	s13, s14, s12
  74:	e1d130d1 	ldrsb	r3, [r1, #1]
  78:	ee060aa7 	vmla.f32	s0, s13, s15
  7c:	e3530000 	cmp	r3, #0
  80:	e5900004 	ldr	r0, [r0, #4]
  84:	ba000001 	blt	90 <L6470DmxMode1::Data(unsigned char const*)+0x3c>
  88:	e3a01000 	mov	r1, #0
  8c:	eafffffe 	b	0 <L6470::run(TL6470Direction, float)>
  90:	e3a01001 	mov	r1, #1
  94:	eafffffe 	b	0 <L6470::run(TL6470Direction, float)>
  98:	437f0000 	cmnmi	pc, #0

0000009c <L6470DmxMode1::L6470DmxMode1(L6470*)>:
  9c:	e92d4010 	push	{r4, lr}
  a0:	e1a04000 	mov	r4, r0
  a4:	e59f3024 	ldr	r3, [pc, #36]	; d0 <L6470DmxMode1::L6470DmxMode1(L6470*)+0x34>
  a8:	e1a00001 	mov	r0, r1
  ac:	e5843000 	str	r3, [r4]
  b0:	e5841004 	str	r1, [r4, #4]
  b4:	ebfffffe 	bl	0 <L6470::getMinSpeed()>
  b8:	e5940004 	ldr	r0, [r4, #4]
  bc:	ed840a02 	vstr	s0, [r4, #8]
  c0:	ebfffffe 	bl	0 <L6470::getMaxSpeed()>
  c4:	e1a00004 	mov	r0, r4
  c8:	ed840a03 	vstr	s0, [r4, #12]
  cc:	e8bd8010 	pop	{r4, pc}
  d0:	00000008 	andeq	r0, r0, r8

Disassembly of section .rodata:

00000000 <vtable for L6470DmxMode1>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <L6470DmxMode1::L6470DmxMode1(L6470*)+0x168d790>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <L6470DmxMode1::L6470DmxMode1(L6470*)+0x42388>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


slushdmxparams.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
   0:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
   4:	e1d0c0b8 	ldrh	ip, [r0, #8]
   8:	e5905004 	ldr	r5, [r0, #4]
   c:	e15c0005 	cmp	ip, r5
  10:	2a00000e 	bcs	50 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x50>
  14:	e1a04000 	mov	r4, r0
  18:	e5900000 	ldr	r0, [r0]
  1c:	e3530000 	cmp	r3, #0
  20:	e045500c 	sub	r5, r5, ip
  24:	e1a03001 	mov	r3, r1
  28:	e58d2000 	str	r2, [sp]
  2c:	e1a01005 	mov	r1, r5
  30:	159f2020 	ldrne	r2, [pc, #32]	; 58 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x58>
  34:	059f2020 	ldreq	r2, [pc, #32]	; 5c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x5c>
  38:	e080000c 	add	r0, r0, ip
  3c:	ebfffffe 	bl	0 <snprintf>
  40:	e1550000 	cmp	r5, r0
  44:	a1d430b8 	ldrhge	r3, [r4, #8]
  48:	a0830000 	addge	r0, r3, r0
  4c:	a1c400b8 	strhge	r0, [r4, #8]
  50:	e28dd00c 	add	sp, sp, #12
  54:	e8bd8030 	pop	{r4, r5, pc}
  58:	00000000 	andeq	r0, r0, r0
  5c:	00000007 	andeq	r0, r0, r7

00000060 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
  60:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
  64:	e1d0c0b8 	ldrh	ip, [r0, #8]
  68:	e5905004 	ldr	r5, [r0, #4]
  6c:	e15c0005 	cmp	ip, r5
  70:	2a00000e 	bcs	b0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x50>
  74:	e1a04000 	mov	r4, r0
  78:	e5900000 	ldr	r0, [r0]
  7c:	e3530000 	cmp	r3, #0
  80:	e045500c 	sub	r5, r5, ip
  84:	e1a03001 	mov	r3, r1
  88:	e58d2000 	str	r2, [sp]
  8c:	e1a01005 	mov	r1, r5
  90:	159f2020 	ldrne	r2, [pc, #32]	; b8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x58>
  94:	059f2020 	ldreq	r2, [pc, #32]	; bc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x5c>
  98:	e080000c 	add	r0, r0, ip
  9c:	ebfffffe 	bl	0 <snprintf>
  a0:	e1550000 	cmp	r5, r0
  a4:	a1d430b8 	ldrhge	r3, [r4, #8]
  a8:	a0830000 	addge	r0, r3, r0
  ac:	a1c400b8 	strhge	r0, [r4, #8]
  b0:	e28dd00c 	add	sp, sp, #12
  b4:	e8bd8030 	pop	{r4, r5, pc}
  b8:	00000000 	andeq	r0, r0, r0
  bc:	00000007 	andeq	r0, r0, r7

000000c0 <SlushDmxParams::SlushDmxParams(SlushDmxParamsStore*)>:
  c0:	e3a02010 	mov	r2, #16
  c4:	e59f3030 	ldr	r3, [pc, #48]	; fc <SlushDmxParams::SlushDmxParams(SlushDmxParamsStore*)+0x3c>
  c8:	e92d4010 	push	{r4, lr}
  cc:	e1a04000 	mov	r4, r0
  d0:	e480100f 	str	r1, [r0], #15
  d4:	e4d31001 	ldrb	r1, [r3], #1
  d8:	e3510000 	cmp	r1, #0
  dc:	1a000001 	bne	e8 <SlushDmxParams::SlushDmxParams(SlushDmxParamsStore*)+0x28>
  e0:	ebfffffe 	bl	0 <memset>
  e4:	ea000002 	b	f4 <SlushDmxParams::SlushDmxParams(SlushDmxParamsStore*)+0x34>
  e8:	e2522001 	subs	r2, r2, #1
  ec:	e4c01001 	strb	r1, [r0], #1
  f0:	1afffff7 	bne	d4 <SlushDmxParams::SlushDmxParams(SlushDmxParamsStore*)+0x14>
  f4:	e1a00004 	mov	r0, r4
  f8:	e8bd8010 	pop	{r4, pc}
  fc:	00000000 	andeq	r0, r0, r0

00000100 <SlushDmxParams::Load()>:
 100:	e3a03000 	mov	r3, #0
 104:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
 108:	e1a02000 	mov	r2, r0
 10c:	e5803004 	str	r3, [r0, #4]
 110:	e1a04000 	mov	r4, r0
 114:	e59f1068 	ldr	r1, [pc, #104]	; 184 <SlushDmxParams::Load()+0x84>
 118:	e1a0000d 	mov	r0, sp
 11c:	ebfffffe 	bl	0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 120:	e1a0000d 	mov	r0, sp
 124:	e59f105c 	ldr	r1, [pc, #92]	; 188 <SlushDmxParams::Load()+0x88>
 128:	ebfffffe 	bl	0 <ReadConfigFile::Read(char const*)>
 12c:	e2505000 	subs	r5, r0, #0
 130:	e5940000 	ldr	r0, [r4]
 134:	0a000006 	beq	154 <SlushDmxParams::Load()+0x54>
 138:	e3500000 	cmp	r0, #0
 13c:	0a00000b 	beq	170 <SlushDmxParams::Load()+0x70>
 140:	e5903000 	ldr	r3, [r0]
 144:	e2841004 	add	r1, r4, #4
 148:	e5933008 	ldr	r3, [r3, #8]
 14c:	e12fff33 	blx	r3
 150:	ea000006 	b	170 <SlushDmxParams::Load()+0x70>
 154:	e3500000 	cmp	r0, #0
 158:	0a000004 	beq	170 <SlushDmxParams::Load()+0x70>
 15c:	e5903000 	ldr	r3, [r0]
 160:	e2841004 	add	r1, r4, #4
 164:	e593300c 	ldr	r3, [r3, #12]
 168:	e12fff33 	blx	r3
 16c:	e3a05001 	mov	r5, #1
 170:	e1a0000d 	mov	r0, sp
 174:	ebfffffe 	bl	0 <ReadConfigFile::~ReadConfigFile()>
 178:	e1a00005 	mov	r0, r5
 17c:	e28dd00c 	add	sp, sp, #12
 180:	e8bd8030 	pop	{r4, r5, pc}
	...

0000018c <SlushDmxParams::Load(char const*, unsigned int)>:
 18c:	e5903000 	ldr	r3, [r0]
 190:	e3530000 	cmp	r3, #0
 194:	012fff1e 	bxeq	lr
 198:	e3a03000 	mov	r3, #0
 19c:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
 1a0:	e1a05001 	mov	r5, r1
 1a4:	e1a06002 	mov	r6, r2
 1a8:	e1a04000 	mov	r4, r0
 1ac:	e5803004 	str	r3, [r0, #4]
 1b0:	e1a02000 	mov	r2, r0
 1b4:	e59f1038 	ldr	r1, [pc, #56]	; 1f4 <SlushDmxParams::Load(char const*, unsigned int)+0x68>
 1b8:	e1a0000d 	mov	r0, sp
 1bc:	ebfffffe 	bl	0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 1c0:	e1a02006 	mov	r2, r6
 1c4:	e1a01005 	mov	r1, r5
 1c8:	e1a0000d 	mov	r0, sp
 1cc:	ebfffffe 	bl	0 <ReadConfigFile::Read(char const*, unsigned int)>
 1d0:	e1a01004 	mov	r1, r4
 1d4:	e4910004 	ldr	r0, [r1], #4
 1d8:	e5903000 	ldr	r3, [r0]
 1dc:	e5933008 	ldr	r3, [r3, #8]
 1e0:	e12fff33 	blx	r3
 1e4:	e1a0000d 	mov	r0, sp
 1e8:	ebfffffe 	bl	0 <ReadConfigFile::~ReadConfigFile()>
 1ec:	e28dd008 	add	sp, sp, #8
 1f0:	e8bd8070 	pop	{r4, r5, r6, pc}
 1f4:	00000000 	andeq	r0, r0, r0

000001f8 <SlushDmxParams::callbackFunction(char const*)>:
 1f8:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
 1fc:	e1a05001 	mov	r5, r1
 200:	e1a04000 	mov	r4, r0
 204:	e59f1118 	ldr	r1, [pc, #280]	; 324 <SlushDmxParams::callbackFunction(char const*)+0x12c>
 208:	e1a00005 	mov	r0, r5
 20c:	e28d2005 	add	r2, sp, #5
 210:	ebfffffe 	bl	0 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 214:	e3500000 	cmp	r0, #0
 218:	1a000007 	bne	23c <SlushDmxParams::callbackFunction(char const*)+0x44>
 21c:	e5dd3005 	ldrb	r3, [sp, #5]
 220:	e3530000 	cmp	r3, #0
 224:	0a000004 	beq	23c <SlushDmxParams::callbackFunction(char const*)+0x44>
 228:	e3a03001 	mov	r3, #1
 22c:	e5c43008 	strb	r3, [r4, #8]
 230:	e5943004 	ldr	r3, [r4, #4]
 234:	e3833001 	orr	r3, r3, #1
 238:	ea000036 	b	318 <SlushDmxParams::callbackFunction(char const*)+0x120>
 23c:	e1a00005 	mov	r0, r5
 240:	e59f10e0 	ldr	r1, [pc, #224]	; 328 <SlushDmxParams::callbackFunction(char const*)+0x130>
 244:	e28d2006 	add	r2, sp, #6
 248:	ebfffffe 	bl	0 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 24c:	e3500000 	cmp	r0, #0
 250:	1a000008 	bne	278 <SlushDmxParams::callbackFunction(char const*)+0x80>
 254:	e1dd30b6 	ldrh	r3, [sp, #6]
 258:	e3530c02 	cmp	r3, #512	; 0x200
 25c:	8a00002e 	bhi	31c <SlushDmxParams::callbackFunction(char const*)+0x124>
 260:	e5c43009 	strb	r3, [r4, #9]
 264:	e1a03423 	lsr	r3, r3, #8
 268:	e5c4300a 	strb	r3, [r4, #10]
 26c:	e5943004 	ldr	r3, [r4, #4]
 270:	e3833002 	orr	r3, r3, #2
 274:	ea000027 	b	318 <SlushDmxParams::callbackFunction(char const*)+0x120>
 278:	e1a00005 	mov	r0, r5
 27c:	e59f10a8 	ldr	r1, [pc, #168]	; 32c <SlushDmxParams::callbackFunction(char const*)+0x134>
 280:	e28d2006 	add	r2, sp, #6
 284:	ebfffffe 	bl	0 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 288:	e3500000 	cmp	r0, #0
 28c:	1a000006 	bne	2ac <SlushDmxParams::callbackFunction(char const*)+0xb4>
 290:	e1dd30b6 	ldrh	r3, [sp, #6]
 294:	e3530c02 	cmp	r3, #512	; 0x200
 298:	91c430bc 	strhls	r3, [r4, #12]
 29c:	95943004 	ldrls	r3, [r4, #4]
 2a0:	93833008 	orrls	r3, r3, #8
 2a4:	9a00001b 	bls	318 <SlushDmxParams::callbackFunction(char const*)+0x120>
 2a8:	ea00001b 	b	31c <SlushDmxParams::callbackFunction(char const*)+0x124>
 2ac:	e1a00005 	mov	r0, r5
 2b0:	e59f1078 	ldr	r1, [pc, #120]	; 330 <SlushDmxParams::callbackFunction(char const*)+0x138>
 2b4:	e28d2006 	add	r2, sp, #6
 2b8:	ebfffffe 	bl	0 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 2bc:	e3500000 	cmp	r0, #0
 2c0:	1a000007 	bne	2e4 <SlushDmxParams::callbackFunction(char const*)+0xec>
 2c4:	e1dd30b6 	ldrh	r3, [sp, #6]
 2c8:	e2432001 	sub	r2, r3, #1
 2cc:	e3520007 	cmp	r2, #7
 2d0:	95c4300b 	strbls	r3, [r4, #11]
 2d4:	95943004 	ldrls	r3, [r4, #4]
 2d8:	93833004 	orrls	r3, r3, #4
 2dc:	9a00000d 	bls	318 <SlushDmxParams::callbackFunction(char const*)+0x120>
 2e0:	ea00000d 	b	31c <SlushDmxParams::callbackFunction(char const*)+0x124>
 2e4:	e1a00005 	mov	r0, r5
 2e8:	e59f1044 	ldr	r1, [pc, #68]	; 334 <SlushDmxParams::callbackFunction(char const*)+0x13c>
 2ec:	e28d2006 	add	r2, sp, #6
 2f0:	ebfffffe 	bl	0 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 2f4:	e3500000 	cmp	r0, #0
 2f8:	1a000007 	bne	31c <SlushDmxParams::callbackFunction(char const*)+0x124>
 2fc:	e1dd30b6 	ldrh	r3, [sp, #6]
 300:	e2432001 	sub	r2, r3, #1
 304:	e3520007 	cmp	r2, #7
 308:	8a000003 	bhi	31c <SlushDmxParams::callbackFunction(char const*)+0x124>
 30c:	e5c4300e 	strb	r3, [r4, #14]
 310:	e5943004 	ldr	r3, [r4, #4]
 314:	e3833010 	orr	r3, r3, #16
 318:	e5843004 	str	r3, [r4, #4]
 31c:	e28dd00c 	add	sp, sp, #12
 320:	e8bd8030 	pop	{r4, r5, pc}
	...

00000338 <SlushDmxParams::staticCallbackFunction(void*, char const*)>:
 338:	eafffffe 	b	1f8 <SlushDmxParams::callbackFunction(char const*)>

0000033c <SlushDmxParams::Set(SlushDmx*)>:
 33c:	e5903004 	ldr	r3, [r0, #4]
 340:	e3130001 	tst	r3, #1
 344:	15d02008 	ldrbne	r2, [r0, #8]
 348:	12422001 	subne	r2, r2, #1
 34c:	116f2f12 	clzne	r2, r2
 350:	11a022a2 	lsrne	r2, r2, #5
 354:	15c12024 	strbne	r2, [r1, #36]	; 0x24
 358:	e3130002 	tst	r3, #2
 35c:	15902008 	ldrne	r2, [r0, #8]
 360:	11a02422 	lsrne	r2, r2, #8
 364:	11c120b8 	strhne	r2, [r1, #8]
 368:	e3130004 	tst	r3, #4
 36c:	15d0200b 	ldrbne	r2, [r0, #11]
 370:	11c120ba 	strhne	r2, [r1, #10]
 374:	e3130008 	tst	r3, #8
 378:	11d020bc 	ldrhne	r2, [r0, #12]
 37c:	11c121b4 	strhne	r2, [r1, #20]
 380:	e3130010 	tst	r3, #16
 384:	15d0300e 	ldrbne	r3, [r0, #14]
 388:	11c131b6 	strhne	r3, [r1, #22]
 38c:	e12fff1e 	bx	lr

00000390 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)>:
 390:	e92d4030 	push	{r4, r5, lr}
 394:	e280c004 	add	ip, r0, #4
 398:	e1a04000 	mov	r4, r0
 39c:	e2510000 	subs	r0, r1, #0
 3a0:	e24dd01c 	sub	sp, sp, #28
 3a4:	0a000008 	beq	3cc <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x3c>
 3a8:	e5901000 	ldr	r1, [r0]
 3ac:	e5841004 	str	r1, [r4, #4]
 3b0:	e5901004 	ldr	r1, [r0, #4]
 3b4:	e58c1004 	str	r1, [ip, #4]
 3b8:	e1d010b8 	ldrh	r1, [r0, #8]
 3bc:	e1cc10b8 	strh	r1, [ip, #8]
 3c0:	e5d0100a 	ldrb	r1, [r0, #10]
 3c4:	e5cc100a 	strb	r1, [ip, #10]
 3c8:	ea000006 	b	3e8 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x58>
 3cc:	e5940000 	ldr	r0, [r4]
 3d0:	e1cd20f0 	strd	r2, [sp]
 3d4:	e5901000 	ldr	r1, [r0]
 3d8:	e591500c 	ldr	r5, [r1, #12]
 3dc:	e1a0100c 	mov	r1, ip
 3e0:	e12fff35 	blx	r5
 3e4:	e1cd20d0 	ldrd	r2, [sp]
 3e8:	e59f10a8 	ldr	r1, [pc, #168]	; 498 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x108>
 3ec:	e28d000c 	add	r0, sp, #12
 3f0:	ebfffffe 	bl	0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 3f4:	e5943004 	ldr	r3, [r4, #4]
 3f8:	e5d42008 	ldrb	r2, [r4, #8]
 3fc:	e28d000c 	add	r0, sp, #12
 400:	e59f1094 	ldr	r1, [pc, #148]	; 49c <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x10c>
 404:	e2033001 	and	r3, r3, #1
 408:	ebffff14 	bl	60 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 40c:	e5943004 	ldr	r3, [r4, #4]
 410:	e5942008 	ldr	r2, [r4, #8]
 414:	e1a030a3 	lsr	r3, r3, #1
 418:	e1a02422 	lsr	r2, r2, #8
 41c:	e28d000c 	add	r0, sp, #12
 420:	e59f1078 	ldr	r1, [pc, #120]	; 4a0 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x110>
 424:	e2033001 	and	r3, r3, #1
 428:	e6ff2072 	uxth	r2, r2
 42c:	ebfffef3 	bl	0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 430:	e5943004 	ldr	r3, [r4, #4]
 434:	e5d4200b 	ldrb	r2, [r4, #11]
 438:	e1a03123 	lsr	r3, r3, #2
 43c:	e28d000c 	add	r0, sp, #12
 440:	e59f105c 	ldr	r1, [pc, #92]	; 4a4 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x114>
 444:	e2033001 	and	r3, r3, #1
 448:	ebffff04 	bl	60 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 44c:	e5943004 	ldr	r3, [r4, #4]
 450:	e1d420bc 	ldrh	r2, [r4, #12]
 454:	e1a031a3 	lsr	r3, r3, #3
 458:	e28d000c 	add	r0, sp, #12
 45c:	e59f1044 	ldr	r1, [pc, #68]	; 4a8 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x118>
 460:	e2033001 	and	r3, r3, #1
 464:	ebfffee5 	bl	0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 468:	e5943004 	ldr	r3, [r4, #4]
 46c:	e5d4200e 	ldrb	r2, [r4, #14]
 470:	e1a03223 	lsr	r3, r3, #4
 474:	e59f1030 	ldr	r1, [pc, #48]	; 4ac <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x11c>
 478:	e2033001 	and	r3, r3, #1
 47c:	e28d000c 	add	r0, sp, #12
 480:	ebfffef6 	bl	60 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 484:	e1dd21b4 	ldrh	r2, [sp, #20]
 488:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
 48c:	e5832000 	str	r2, [r3]
 490:	e28dd01c 	add	sp, sp, #28
 494:	e8bd8030 	pop	{r4, r5, pc}
	...

000004b0 <SlushDmxParams::Save(char*, unsigned int, unsigned int&)>:
 4b0:	e590c000 	ldr	ip, [r0]
 4b4:	e35c0000 	cmp	ip, #0
 4b8:	1a000001 	bne	4c4 <SlushDmxParams::Save(char*, unsigned int, unsigned int&)+0x14>
 4bc:	e583c000 	str	ip, [r3]
 4c0:	e12fff1e 	bx	lr
 4c4:	e92d4007 	push	{r0, r1, r2, lr}
 4c8:	e58d3000 	str	r3, [sp]
 4cc:	e1a03002 	mov	r3, r2
 4d0:	e1a02001 	mov	r2, r1
 4d4:	e3a01000 	mov	r1, #0
 4d8:	ebfffffe 	bl	390 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)>
 4dc:	e28dd00c 	add	sp, sp, #12
 4e0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000004e4 <SlushDmxParams::Dump()>:
 4e4:	e12fff1e 	bx	lr

Disassembly of section .rodata.str1.1:

00000000 <.rodata.str1.1>:
   0:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
   4:	23000a64 	movwcs	r0, #2660	; 0xa64
   8:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
   c:	Address 0x000000000000000c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <SlushDmxParams::Dump()+0x168d348>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <SlushDmxParams::Dump()+0x41f40>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


sparkfundmxprint.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <SparkFunDmx::Print()>:
   0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   4:	e59f9094 	ldr	r9, [pc, #148]	; a0 <SparkFunDmx::Print()+0xa0>
   8:	e59f8094 	ldr	r8, [pc, #148]	; a4 <SparkFunDmx::Print()+0xa4>
   c:	e59f7094 	ldr	r7, [pc, #148]	; a8 <SparkFunDmx::Print()+0xa8>
  10:	e2805004 	add	r5, r0, #4
  14:	e2806024 	add	r6, r0, #36	; 0x24
  18:	ea000001 	b	24 <SparkFunDmx::Print()+0x24>
  1c:	e1550006 	cmp	r5, r6
  20:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  24:	e4950004 	ldr	r0, [r5], #4
  28:	e3500000 	cmp	r0, #0
  2c:	0afffffa 	beq	1c <SparkFunDmx::Print()+0x1c>
  30:	ebfffffe 	bl	0 <AutoDriver::Print()>
  34:	e595005c 	ldr	r0, [r5, #92]	; 0x5c
  38:	e3500000 	cmp	r0, #0
  3c:	0afffff6 	beq	1c <SparkFunDmx::Print()+0x1c>
  40:	ebfffffe 	bl	0 <L6470DmxModes::Print()>
  44:	e1a00009 	mov	r0, r9
  48:	ebfffffe 	bl	0 <printf>
  4c:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
  50:	e1d330bc 	ldrh	r3, [r3, #12]
  54:	e3530000 	cmp	r3, #0
  58:	0a00000b 	beq	8c <SparkFunDmx::Print()+0x8c>
  5c:	e3a04000 	mov	r4, #0
  60:	e595307c 	ldr	r3, [r5, #124]	; 0x7c
  64:	e1a00007 	mov	r0, r7
  68:	e0832104 	add	r2, r3, r4, lsl #2
  6c:	e7d31104 	ldrb	r1, [r3, r4, lsl #2]
  70:	e1d220b2 	ldrh	r2, [r2, #2]
  74:	ebfffffe 	bl	0 <printf>
  78:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
  7c:	e2844001 	add	r4, r4, #1
  80:	e1d330bc 	ldrh	r3, [r3, #12]
  84:	e1530004 	cmp	r3, r4
  88:	8afffff4 	bhi	60 <SparkFunDmx::Print()+0x60>
  8c:	e1a00008 	mov	r0, r8
  90:	ebfffffe 	bl	0 <puts>
  94:	e1550006 	cmp	r5, r6
  98:	1affffe1 	bne	24 <SparkFunDmx::Print()+0x24>
  9c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  a0:	00000000 	andeq	r0, r0, r0
  a4:	00000018 	andeq	r0, r0, r8, lsl r0
  a8:	0000000c 	andeq	r0, r0, ip

Disassembly of section .rodata.str1.4:

00000000 <.rodata.str1.4>:
   0:	6f6c5320 	svcvs	0x006c5320
   4:	666e4974 			; <UNDEFINED> instruction: 0x666e4974
   8:	00203a6f 	eoreq	r3, r0, pc, ror #20
   c:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
  10:	342e253a 	strtcc	r2, [lr], #-1338	; 0xfffffac6
  14:	00002078 	andeq	r2, r0, r8, ror r0
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <SparkFunDmx::Print()+0x168d82c>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <SparkFunDmx::Print()+0x42424>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


motorparams.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>:
   0:	e92d4030 	push	{r4, r5, lr}
   4:	e1d0c0b8 	ldrh	ip, [r0, #8]
   8:	e5905004 	ldr	r5, [r0, #4]
   c:	e24dd014 	sub	sp, sp, #20
  10:	e15c0005 	cmp	ip, r5
  14:	2a000010 	bcs	5c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x5c>
  18:	eeb70ac0 	vcvt.f64.f32	d0, s0
  1c:	e1a04000 	mov	r4, r0
  20:	e5900000 	ldr	r0, [r0]
  24:	e3520000 	cmp	r2, #0
  28:	e045500c 	sub	r5, r5, ip
  2c:	159f2030 	ldrne	r2, [pc, #48]	; 64 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x64>
  30:	059f2030 	ldreq	r2, [pc, #48]	; 68 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x68>
  34:	e58d3000 	str	r3, [sp]
  38:	ed8d0b02 	vstr	d0, [sp, #8]
  3c:	e1a03001 	mov	r3, r1
  40:	e080000c 	add	r0, r0, ip
  44:	e1a01005 	mov	r1, r5
  48:	ebfffffe 	bl	0 <snprintf>
  4c:	e1550000 	cmp	r5, r0
  50:	a1d430b8 	ldrhge	r3, [r4, #8]
  54:	a0830000 	addge	r0, r3, r0
  58:	a1c400b8 	strhge	r0, [r4, #8]
  5c:	e28dd014 	add	sp, sp, #20
  60:	e8bd8030 	pop	{r4, r5, pc}
  64:	00000000 	andeq	r0, r0, r0
  68:	00000009 	andeq	r0, r0, r9

0000006c <MotorParams::MotorParams(MotorParamsStore*)>:
  6c:	e92d4010 	push	{r4, lr}
  70:	e1a04000 	mov	r4, r0
  74:	e3a02018 	mov	r2, #24
  78:	e4801004 	str	r1, [r0], #4
  7c:	e3a01000 	mov	r1, #0
  80:	ebfffffe 	bl	0 <memset>
  84:	e3a02010 	mov	r2, #16
  88:	e59f3030 	ldr	r3, [pc, #48]	; c0 <MotorParams::MotorParams(MotorParamsStore*)+0x54>
  8c:	e284001c 	add	r0, r4, #28
  90:	e5843008 	str	r3, [r4, #8]
  94:	e59f3028 	ldr	r3, [pc, #40]	; c4 <MotorParams::MotorParams(MotorParamsStore*)+0x58>
  98:	e4d31001 	ldrb	r1, [r3], #1
  9c:	e3510000 	cmp	r1, #0
  a0:	1a000001 	bne	ac <MotorParams::MotorParams(MotorParamsStore*)+0x40>
  a4:	ebfffffe 	bl	0 <memset>
  a8:	ea000002 	b	b8 <MotorParams::MotorParams(MotorParamsStore*)+0x4c>
  ac:	e2522001 	subs	r2, r2, #1
  b0:	e4c01001 	strb	r1, [r0], #1
  b4:	1afffff7 	bne	98 <MotorParams::MotorParams(MotorParamsStore*)+0x2c>
  b8:	e1a00004 	mov	r0, r4
  bc:	e8bd8010 	pop	{r4, pc}
  c0:	3fe66666 	svccc	0x00e66666
  c4:	00000000 	andeq	r0, r0, r0

000000c8 <MotorParams::Load(unsigned int)>:
  c8:	e2813030 	add	r3, r1, #48	; 0x30
  cc:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
  d0:	e5c03021 	strb	r3, [r0, #33]	; 0x21
  d4:	e3a03000 	mov	r3, #0
  d8:	e1a04000 	mov	r4, r0
  dc:	e1a02000 	mov	r2, r0
  e0:	e5803004 	str	r3, [r0, #4]
  e4:	e1a06001 	mov	r6, r1
  e8:	e1a0000d 	mov	r0, sp
  ec:	e59f106c 	ldr	r1, [pc, #108]	; 160 <MotorParams::Load(unsigned int)+0x98>
  f0:	ebfffffe 	bl	0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
  f4:	e1a0000d 	mov	r0, sp
  f8:	e284101c 	add	r1, r4, #28
  fc:	ebfffffe 	bl	0 <ReadConfigFile::Read(char const*)>
 100:	e2505000 	subs	r5, r0, #0
 104:	e5940000 	ldr	r0, [r4]
 108:	0a000007 	beq	12c <MotorParams::Load(unsigned int)+0x64>
 10c:	e3500000 	cmp	r0, #0
 110:	0a00000d 	beq	14c <MotorParams::Load(unsigned int)+0x84>
 114:	e5903000 	ldr	r3, [r0]
 118:	e1a01006 	mov	r1, r6
 11c:	e5933008 	ldr	r3, [r3, #8]
 120:	e2842004 	add	r2, r4, #4
 124:	e12fff33 	blx	r3
 128:	ea000007 	b	14c <MotorParams::Load(unsigned int)+0x84>
 12c:	e3500000 	cmp	r0, #0
 130:	0a000005 	beq	14c <MotorParams::Load(unsigned int)+0x84>
 134:	e5903000 	ldr	r3, [r0]
 138:	e1a01006 	mov	r1, r6
 13c:	e593300c 	ldr	r3, [r3, #12]
 140:	e2842004 	add	r2, r4, #4
 144:	e12fff33 	blx	r3
 148:	e3a05001 	mov	r5, #1
 14c:	e1a0000d 	mov	r0, sp
 150:	ebfffffe 	bl	0 <ReadConfigFile::~ReadConfigFile()>
 154:	e1a00005 	mov	r0, r5
 158:	e28dd008 	add	sp, sp, #8
 15c:	e8bd8070 	pop	{r4, r5, r6, pc}
 160:	00000000 	andeq	r0, r0, r0

00000164 <MotorParams::Load(unsigned int, char const*, unsigned int)>:
 164:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 168:	e1a07003 	mov	r7, r3
 16c:	e5903000 	ldr	r3, [r0]
 170:	e3530000 	cmp	r3, #0
 174:	0a000014 	beq	1cc <MotorParams::Load(unsigned int, char const*, unsigned int)+0x68>
 178:	e3a03000 	mov	r3, #0
 17c:	e1a06002 	mov	r6, r2
 180:	e1a04000 	mov	r4, r0
 184:	e5803004 	str	r3, [r0, #4]
 188:	e1a02000 	mov	r2, r0
 18c:	e1a05001 	mov	r5, r1
 190:	e1a0000d 	mov	r0, sp
 194:	e59f1038 	ldr	r1, [pc, #56]	; 1d4 <MotorParams::Load(unsigned int, char const*, unsigned int)+0x70>
 198:	ebfffffe 	bl	0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 19c:	e1a02007 	mov	r2, r7
 1a0:	e1a01006 	mov	r1, r6
 1a4:	e1a0000d 	mov	r0, sp
 1a8:	ebfffffe 	bl	0 <ReadConfigFile::Read(char const*, unsigned int)>
 1ac:	e1a02004 	mov	r2, r4
 1b0:	e4920004 	ldr	r0, [r2], #4
 1b4:	e1a01005 	mov	r1, r5
 1b8:	e5903000 	ldr	r3, [r0]
 1bc:	e5933008 	ldr	r3, [r3, #8]
 1c0:	e12fff33 	blx	r3
 1c4:	e1a0000d 	mov	r0, sp
 1c8:	ebfffffe 	bl	0 <ReadConfigFile::~ReadConfigFile()>
 1cc:	e28dd00c 	add	sp, sp, #12
 1d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
 1d4:	00000000 	andeq	r0, r0, r0

000001d8 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)>:
 1d8:	e92d4030 	push	{r4, r5, lr}
 1dc:	e1a05003 	mov	r5, r3
 1e0:	e2813030 	add	r3, r1, #48	; 0x30
 1e4:	e1a04000 	mov	r4, r0
 1e8:	e5c03021 	strb	r3, [r0, #33]	; 0x21
 1ec:	e280c004 	add	ip, r0, #4
 1f0:	e2520000 	subs	r0, r2, #0
 1f4:	e24dd014 	sub	sp, sp, #20
 1f8:	0a000006 	beq	218 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x40>
 1fc:	e1a01000 	mov	r1, r0
 200:	e2803018 	add	r3, r0, #24
 204:	e4912004 	ldr	r2, [r1], #4
 208:	e1510003 	cmp	r1, r3
 20c:	e48c2004 	str	r2, [ip], #4
 210:	1afffffb 	bne	204 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x2c>
 214:	ea000004 	b	22c <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x54>
 218:	e5940000 	ldr	r0, [r4]
 21c:	e1a0200c 	mov	r2, ip
 220:	e5903000 	ldr	r3, [r0]
 224:	e593300c 	ldr	r3, [r3, #12]
 228:	e12fff33 	blx	r3
 22c:	e1a02005 	mov	r2, r5
 230:	e59d3020 	ldr	r3, [sp, #32]
 234:	e284101c 	add	r1, r4, #28
 238:	e28d0004 	add	r0, sp, #4
 23c:	ebfffffe 	bl	0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 240:	e3a03001 	mov	r3, #1
 244:	e5942004 	ldr	r2, [r4, #4]
 248:	ed940a02 	vldr	s0, [r4, #8]
 24c:	e0022003 	and	r2, r2, r3
 250:	e28d0004 	add	r0, sp, #4
 254:	e59f1094 	ldr	r1, [pc, #148]	; 2f0 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x118>
 258:	ebffff68 	bl	0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 25c:	e3a03001 	mov	r3, #1
 260:	e5942004 	ldr	r2, [r4, #4]
 264:	ed940a03 	vldr	s0, [r4, #12]
 268:	e1a020a2 	lsr	r2, r2, #1
 26c:	e0022003 	and	r2, r2, r3
 270:	e28d0004 	add	r0, sp, #4
 274:	e59f1078 	ldr	r1, [pc, #120]	; 2f4 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x11c>
 278:	ebffff60 	bl	0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 27c:	e3a03001 	mov	r3, #1
 280:	e5942004 	ldr	r2, [r4, #4]
 284:	ed940a04 	vldr	s0, [r4, #16]
 288:	e1a02122 	lsr	r2, r2, #2
 28c:	e0022003 	and	r2, r2, r3
 290:	e28d0004 	add	r0, sp, #4
 294:	e59f105c 	ldr	r1, [pc, #92]	; 2f8 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x120>
 298:	ebffff58 	bl	0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 29c:	e3a03001 	mov	r3, #1
 2a0:	e5942004 	ldr	r2, [r4, #4]
 2a4:	ed940a05 	vldr	s0, [r4, #20]
 2a8:	e1a021a2 	lsr	r2, r2, #3
 2ac:	e0022003 	and	r2, r2, r3
 2b0:	e28d0004 	add	r0, sp, #4
 2b4:	e59f1040 	ldr	r1, [pc, #64]	; 2fc <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x124>
 2b8:	ebffff50 	bl	0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 2bc:	e3a03001 	mov	r3, #1
 2c0:	e5942004 	ldr	r2, [r4, #4]
 2c4:	ed940a06 	vldr	s0, [r4, #24]
 2c8:	e1a02222 	lsr	r2, r2, #4
 2cc:	e0022003 	and	r2, r2, r3
 2d0:	e59f1028 	ldr	r1, [pc, #40]	; 300 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x128>
 2d4:	e28d0004 	add	r0, sp, #4
 2d8:	ebffff48 	bl	0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 2dc:	e1dd20bc 	ldrh	r2, [sp, #12]
 2e0:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
 2e4:	e5832000 	str	r2, [r3]
 2e8:	e28dd014 	add	sp, sp, #20
 2ec:	e8bd8030 	pop	{r4, r5, pc}
	...

00000304 <MotorParams::Save(unsigned int, char*, unsigned int, unsigned int&)>:
 304:	e92d4007 	push	{r0, r1, r2, lr}
 308:	e590e000 	ldr	lr, [r0]
 30c:	e59dc010 	ldr	ip, [sp, #16]
 310:	e35e0000 	cmp	lr, #0
 314:	058ce000 	streq	lr, [ip]
 318:	0a000003 	beq	32c <MotorParams::Save(unsigned int, char*, unsigned int, unsigned int&)+0x28>
 31c:	e88d1008 	stm	sp, {r3, ip}
 320:	e1a03002 	mov	r3, r2
 324:	e3a02000 	mov	r2, #0
 328:	ebfffffe 	bl	1d8 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)>
 32c:	e28dd00c 	add	sp, sp, #12
 330:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00000334 <MotorParams::callbackFunction(char const*)>:
 334:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
 338:	e1a05001 	mov	r5, r1
 33c:	e1a04000 	mov	r4, r0
 340:	e59f10e8 	ldr	r1, [pc, #232]	; 430 <MotorParams::callbackFunction(char const*)+0xfc>
 344:	e1a00005 	mov	r0, r5
 348:	e28d2004 	add	r2, sp, #4
 34c:	ebfffffe 	bl	0 <Sscan::Float(char const*, char const*, float&)>
 350:	e3500000 	cmp	r0, #0
 354:	1a000007 	bne	378 <MotorParams::callbackFunction(char const*)+0x44>
 358:	eddd7a01 	vldr	s15, [sp, #4]
 35c:	eef57a40 	vcmp.f32	s15, #0.0
 360:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 364:	15943004 	ldrne	r3, [r4, #4]
 368:	1dc47a02 	vstrne	s15, [r4, #8]
 36c:	13833001 	orrne	r3, r3, #1
 370:	1a00002b 	bne	424 <MotorParams::callbackFunction(char const*)+0xf0>
 374:	ea00002b 	b	428 <MotorParams::callbackFunction(char const*)+0xf4>
 378:	e1a00005 	mov	r0, r5
 37c:	e59f10b0 	ldr	r1, [pc, #176]	; 434 <MotorParams::callbackFunction(char const*)+0x100>
 380:	e28d2004 	add	r2, sp, #4
 384:	ebfffffe 	bl	0 <Sscan::Float(char const*, char const*, float&)>
 388:	e3500000 	cmp	r0, #0
 38c:	1a000004 	bne	3a4 <MotorParams::callbackFunction(char const*)+0x70>
 390:	e59d3004 	ldr	r3, [sp, #4]
 394:	e584300c 	str	r3, [r4, #12]
 398:	e5943004 	ldr	r3, [r4, #4]
 39c:	e3833002 	orr	r3, r3, #2
 3a0:	ea00001f 	b	424 <MotorParams::callbackFunction(char const*)+0xf0>
 3a4:	e1a00005 	mov	r0, r5
 3a8:	e59f1088 	ldr	r1, [pc, #136]	; 438 <MotorParams::callbackFunction(char const*)+0x104>
 3ac:	e28d2004 	add	r2, sp, #4
 3b0:	ebfffffe 	bl	0 <Sscan::Float(char const*, char const*, float&)>
 3b4:	e3500000 	cmp	r0, #0
 3b8:	1a000004 	bne	3d0 <MotorParams::callbackFunction(char const*)+0x9c>
 3bc:	e59d3004 	ldr	r3, [sp, #4]
 3c0:	e5843010 	str	r3, [r4, #16]
 3c4:	e5943004 	ldr	r3, [r4, #4]
 3c8:	e3833004 	orr	r3, r3, #4
 3cc:	ea000014 	b	424 <MotorParams::callbackFunction(char const*)+0xf0>
 3d0:	e1a00005 	mov	r0, r5
 3d4:	e59f1060 	ldr	r1, [pc, #96]	; 43c <MotorParams::callbackFunction(char const*)+0x108>
 3d8:	e28d2004 	add	r2, sp, #4
 3dc:	ebfffffe 	bl	0 <Sscan::Float(char const*, char const*, float&)>
 3e0:	e3500000 	cmp	r0, #0
 3e4:	1a000004 	bne	3fc <MotorParams::callbackFunction(char const*)+0xc8>
 3e8:	e59d3004 	ldr	r3, [sp, #4]
 3ec:	e5843014 	str	r3, [r4, #20]
 3f0:	e5943004 	ldr	r3, [r4, #4]
 3f4:	e3833008 	orr	r3, r3, #8
 3f8:	ea000009 	b	424 <MotorParams::callbackFunction(char const*)+0xf0>
 3fc:	e1a00005 	mov	r0, r5
 400:	e59f1038 	ldr	r1, [pc, #56]	; 440 <MotorParams::callbackFunction(char const*)+0x10c>
 404:	e28d2004 	add	r2, sp, #4
 408:	ebfffffe 	bl	0 <Sscan::Float(char const*, char const*, float&)>
 40c:	e3500000 	cmp	r0, #0
 410:	1a000004 	bne	428 <MotorParams::callbackFunction(char const*)+0xf4>
 414:	e59d3004 	ldr	r3, [sp, #4]
 418:	e5843018 	str	r3, [r4, #24]
 41c:	e5943004 	ldr	r3, [r4, #4]
 420:	e3833010 	orr	r3, r3, #16
 424:	e5843004 	str	r3, [r4, #4]
 428:	e28dd00c 	add	sp, sp, #12
 42c:	e8bd8030 	pop	{r4, r5, pc}
	...

00000444 <MotorParams::staticCallbackFunction(void*, char const*)>:
 444:	eafffffe 	b	334 <MotorParams::callbackFunction(char const*)>

00000448 <MotorParams::Dump()>:
 448:	e12fff1e 	bx	lr

0000044c <MotorParams::calcIntersectSpeed()>:
 44c:	e5903004 	ldr	r3, [r0, #4]
 450:	e2033018 	and	r3, r3, #24
 454:	e3530018 	cmp	r3, #24
 458:	1a00000b 	bne	48c <MotorParams::calcIntersectSpeed()+0x40>
 45c:	edd06a05 	vldr	s13, [r0, #20]
 460:	eddf7a10 	vldr	s15, [pc, #64]	; 4a8 <MotorParams::calcIntersectSpeed()+0x5c>
 464:	ed907a06 	vldr	s14, [r0, #24]
 468:	ee666aa7 	vmul.f32	s13, s13, s15
 46c:	ed9f5b09 	vldr	d5, [pc, #36]	; 498 <MotorParams::calcIntersectSpeed()+0x4c>
 470:	eeb77ac7 	vcvt.f64.f32	d7, s14
 474:	ee277b05 	vmul.f64	d7, d7, d5
 478:	ed9f5b08 	vldr	d5, [pc, #32]	; 4a0 <MotorParams::calcIntersectSpeed()+0x54>
 47c:	ee277b05 	vmul.f64	d7, d7, d5
 480:	eeb77bc7 	vcvt.f32.f64	s14, d7
 484:	ee860a87 	vdiv.f32	s0, s13, s14
 488:	e12fff1e 	bx	lr
 48c:	ed9f0a06 	vldr	s0, [pc, #24]	; 4ac <MotorParams::calcIntersectSpeed()+0x60>
 490:	e12fff1e 	bx	lr
 494:	e320f000 	nop	{0}
 498:	54442d18 	strbpl	r2, [r4], #-3352	; 0xfffff2e8
 49c:	401921fb 			; <UNDEFINED> instruction: 0x401921fb
 4a0:	d2f1a9fc 	rscsle	sl, r1, #252, 18	; 0x3f0000
 4a4:	3f50624d 	svccc	0x0050624d
 4a8:	40800000 	addmi	r0, r0, r0
 4ac:	00000000 	andeq	r0, r0, r0

000004b0 <MotorParams::Set(L6470*)>:
 4b0:	e92d4010 	push	{r4, lr}
 4b4:	ebfffffe 	bl	44c <MotorParams::calcIntersectSpeed()>
 4b8:	eeb50a40 	vcmp.f32	s0, #0.0
 4bc:	eef1fa10 	vmrs	APSR_nzcv, fpscr
 4c0:	08bd8010 	popeq	{r4, pc}
 4c4:	eddf7a07 	vldr	s15, [pc, #28]	; 4e8 <MotorParams::Set(L6470*)+0x38>
 4c8:	ee200a27 	vmul.f32	s0, s0, s15
 4cc:	e1a04001 	mov	r4, r1
 4d0:	eefc7ac0 	vcvt.u32.f32	s15, s0
 4d4:	e1a00004 	mov	r0, r4
 4d8:	e8bd4010 	pop	{r4, lr}
 4dc:	ee172a90 	vmov	r2, s15
 4e0:	e3a0100d 	mov	r1, #13
 4e4:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>
 4e8:	418637bd 			; <UNDEFINED> instruction: 0x418637bd

000004ec <MotorParams::calcIntersectSpeedReg(float) const>:
 4ec:	eddf7a03 	vldr	s15, [pc, #12]	; 500 <MotorParams::calcIntersectSpeedReg(float) const+0x14>
 4f0:	ee200a27 	vmul.f32	s0, s0, s15
 4f4:	eefc7ac0 	vcvt.u32.f32	s15, s0
 4f8:	ee170a90 	vmov	r0, s15
 4fc:	e12fff1e 	bx	lr
 500:	418637bd 			; <UNDEFINED> instruction: 0x418637bd

Disassembly of section .rodata.str1.1:

00000000 <.rodata.str1.1>:
   0:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
   4:	0a662a2e 	beq	198a8c4 <MotorParams::calcIntersectSpeedReg(float) const+0x198a3d8>
   8:	73252300 			; <UNDEFINED> instruction: 0x73252300
   c:	2a2e253d 	bcs	b89508 <MotorParams::calcIntersectSpeedReg(float) const+0xb8901c>
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <MotorParams::calcIntersectSpeedReg(float) const+0x168d340>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <MotorParams::calcIntersectSpeedReg(float) const+0x41f38>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.

