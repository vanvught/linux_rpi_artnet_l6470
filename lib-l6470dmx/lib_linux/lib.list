In archive lib_linux/libl6470dmx.a:

l6470dmxconst.o:     file format elf64-x86-64


l6470dmxmode0.o:     file format elf64-x86-64


Disassembly of section .text._ZN12L6470DmxModeC2Ev:

0000000000000000 <L6470DmxMode::L6470DmxMode()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13 <L6470DmxMode::L6470DmxMode()+0x13>
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode0C2EP5L6470:

0000000000000000 <L6470DmxMode0::L6470DmxMode0(L6470*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	call   20 <L6470DmxMode0::L6470DmxMode0(L6470*)+0x20>
  20:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 27 <L6470DmxMode0::L6470DmxMode0(L6470*)+0x27>
  27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2b:	48 89 10             	mov    %rdx,(%rax)
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  36:	48 89 50 08          	mov    %rdx,0x8(%rax)
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	48 8b 40 08          	mov    0x8(%rax),%rax
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	call   4a <L6470DmxMode0::L6470DmxMode0(L6470*)+0x4a>
  4a:	66 0f 7e c0          	movd   %xmm0,%eax
  4e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  52:	89 42 10             	mov    %eax,0x10(%rdx)
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	48 8b 40 08          	mov    0x8(%rax),%rax
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	call   65 <L6470DmxMode0::L6470DmxMode0(L6470*)+0x65>
  65:	66 0f 7e c0          	movd   %xmm0,%eax
  69:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  6d:	89 42 14             	mov    %eax,0x14(%rdx)
  70:	90                   	nop
  71:	c9                   	leave  
  72:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode0D2Ev:

0000000000000000 <L6470DmxMode0::~L6470DmxMode0()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 17 <L6470DmxMode0::~L6470DmxMode0()+0x17>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <L6470DmxMode0::~L6470DmxMode0()+0x2a>
  2a:	90                   	nop
  2b:	c9                   	leave  
  2c:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode0D0Ev:

0000000000000000 <L6470DmxMode0::~L6470DmxMode0()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <L6470DmxMode0::~L6470DmxMode0()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <L6470DmxMode0::~L6470DmxMode0()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode05StartEv:

0000000000000000 <L6470DmxMode0::Start()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  1c:	8b 52 14             	mov    0x14(%rdx),%edx
  1f:	66 0f 6e c2          	movd   %edx,%xmm0
  23:	be 01 00 00 00       	mov    $0x1,%esi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <L6470DmxMode0::Start()+0x30>
  30:	90                   	nop
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode04StopEv:

0000000000000000 <L6470DmxMode0::Stop()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	call   20 <L6470DmxMode0::Stop()+0x20>
  20:	90                   	nop
  21:	c9                   	leave  
  22:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode04DataEPKh:

0000000000000000 <L6470DmxMode0::Data(unsigned char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	0f b6 00             	movzbl (%rax),%eax
  1b:	3c 7e                	cmp    $0x7e,%al
  1d:	77 6e                	ja     8d <L6470DmxMode0::Data(unsigned char const*)+0x8d>
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8b 40 08          	mov    0x8(%rax),%rax
  27:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2b:	f3 0f 10 4a 10       	movss  0x10(%rdx),%xmm1
  30:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  34:	0f b6 12             	movzbl (%rdx),%edx
  37:	0f b6 d2             	movzbl %dl,%edx
  3a:	b9 7f 00 00 00       	mov    $0x7f,%ecx
  3f:	29 d1                	sub    %edx,%ecx
  41:	66 0f ef d2          	pxor   %xmm2,%xmm2
  45:	f3 0f 2a d1          	cvtsi2ss %ecx,%xmm2
  49:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4d:	f3 0f 10 42 14       	movss  0x14(%rdx),%xmm0
  52:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  56:	f3 0f 10 5a 10       	movss  0x10(%rdx),%xmm3
  5b:	f3 0f 5c c3          	subss  %xmm3,%xmm0
  5f:	f3 0f 10 1d 00 00 00 	movss  0x0(%rip),%xmm3        # 67 <L6470DmxMode0::Data(unsigned char const*)+0x67>
  66:	00 
  67:	f3 0f 5e c3          	divss  %xmm3,%xmm0
  6b:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
  6f:	f3 0f 58 c8          	addss  %xmm0,%xmm1
  73:	66 0f 7e ca          	movd   %xmm1,%edx
  77:	66 0f 6e c2          	movd   %edx,%xmm0
  7b:	be 01 00 00 00       	mov    $0x1,%esi
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	call   88 <L6470DmxMode0::Data(unsigned char const*)+0x88>
  88:	e9 85 00 00 00       	jmp    112 <L6470DmxMode0::Data(unsigned char const*)+0x112>
  8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  91:	0f b6 00             	movzbl (%rax),%eax
  94:	3c 81                	cmp    $0x81,%al
  96:	76 6a                	jbe    102 <L6470DmxMode0::Data(unsigned char const*)+0x102>
  98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  9c:	48 8b 40 08          	mov    0x8(%rax),%rax
  a0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  a4:	f3 0f 10 4a 10       	movss  0x10(%rdx),%xmm1
  a9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  ad:	0f b6 12             	movzbl (%rdx),%edx
  b0:	0f b6 d2             	movzbl %dl,%edx
  b3:	81 ea 81 00 00 00    	sub    $0x81,%edx
  b9:	66 0f ef d2          	pxor   %xmm2,%xmm2
  bd:	f3 0f 2a d2          	cvtsi2ss %edx,%xmm2
  c1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  c5:	f3 0f 10 42 14       	movss  0x14(%rdx),%xmm0
  ca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  ce:	f3 0f 10 5a 10       	movss  0x10(%rdx),%xmm3
  d3:	f3 0f 5c c3          	subss  %xmm3,%xmm0
  d7:	f3 0f 10 1d 00 00 00 	movss  0x0(%rip),%xmm3        # df <L6470DmxMode0::Data(unsigned char const*)+0xdf>
  de:	00 
  df:	f3 0f 5e c3          	divss  %xmm3,%xmm0
  e3:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
  e7:	f3 0f 58 c8          	addss  %xmm0,%xmm1
  eb:	66 0f 7e ca          	movd   %xmm1,%edx
  ef:	66 0f 6e c2          	movd   %edx,%xmm0
  f3:	be 00 00 00 00       	mov    $0x0,%esi
  f8:	48 89 c7             	mov    %rax,%rdi
  fb:	e8 00 00 00 00       	call   100 <L6470DmxMode0::Data(unsigned char const*)+0x100>
 100:	eb 10                	jmp    112 <L6470DmxMode0::Data(unsigned char const*)+0x112>
 102:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 106:	48 8b 40 08          	mov    0x8(%rax),%rax
 10a:	48 89 c7             	mov    %rax,%rdi
 10d:	e8 00 00 00 00       	call   112 <L6470DmxMode0::Data(unsigned char const*)+0x112>
 112:	c9                   	leave  
 113:	c3                   	ret    

l6470dmxmode1.o:     file format elf64-x86-64


Disassembly of section .text._ZN12L6470DmxModeC2Ev:

0000000000000000 <L6470DmxMode::L6470DmxMode()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13 <L6470DmxMode::L6470DmxMode()+0x13>
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode1C2EP5L6470:

0000000000000000 <L6470DmxMode1::L6470DmxMode1(L6470*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	call   20 <L6470DmxMode1::L6470DmxMode1(L6470*)+0x20>
  20:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 27 <L6470DmxMode1::L6470DmxMode1(L6470*)+0x27>
  27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2b:	48 89 10             	mov    %rdx,(%rax)
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  36:	48 89 50 08          	mov    %rdx,0x8(%rax)
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	48 8b 40 08          	mov    0x8(%rax),%rax
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	call   4a <L6470DmxMode1::L6470DmxMode1(L6470*)+0x4a>
  4a:	66 0f 7e c0          	movd   %xmm0,%eax
  4e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  52:	89 42 10             	mov    %eax,0x10(%rdx)
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	48 8b 40 08          	mov    0x8(%rax),%rax
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	call   65 <L6470DmxMode1::L6470DmxMode1(L6470*)+0x65>
  65:	66 0f 7e c0          	movd   %xmm0,%eax
  69:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  6d:	89 42 14             	mov    %eax,0x14(%rdx)
  70:	90                   	nop
  71:	c9                   	leave  
  72:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode1D2Ev:

0000000000000000 <L6470DmxMode1::~L6470DmxMode1()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 17 <L6470DmxMode1::~L6470DmxMode1()+0x17>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <L6470DmxMode1::~L6470DmxMode1()+0x2a>
  2a:	90                   	nop
  2b:	c9                   	leave  
  2c:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode1D0Ev:

0000000000000000 <L6470DmxMode1::~L6470DmxMode1()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <L6470DmxMode1::~L6470DmxMode1()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <L6470DmxMode1::~L6470DmxMode1()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode15StartEv:

0000000000000000 <L6470DmxMode1::Start()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode14StopEv:

0000000000000000 <L6470DmxMode1::Stop()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	call   20 <L6470DmxMode1::Stop()+0x20>
  20:	90                   	nop
  21:	c9                   	leave  
  22:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode14DataEPKh:

0000000000000000 <L6470DmxMode1::Data(unsigned char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  18:	f3 0f 10 48 10       	movss  0x10(%rax),%xmm1
  1d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  21:	0f b6 00             	movzbl (%rax),%eax
  24:	0f b6 c0             	movzbl %al,%eax
  27:	66 0f ef d2          	pxor   %xmm2,%xmm2
  2b:	f3 0f 2a d0          	cvtsi2ss %eax,%xmm2
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	f3 0f 10 40 14       	movss  0x14(%rax),%xmm0
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	f3 0f 10 58 10       	movss  0x10(%rax),%xmm3
  41:	f3 0f 5c c3          	subss  %xmm3,%xmm0
  45:	f3 0f 10 1d 00 00 00 	movss  0x0(%rip),%xmm3        # 4d <L6470DmxMode1::Data(unsigned char const*)+0x4d>
  4c:	00 
  4d:	f3 0f 5e c3          	divss  %xmm3,%xmm0
  51:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
  55:	f3 0f 58 c1          	addss  %xmm1,%xmm0
  59:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  5e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  62:	48 83 c0 01          	add    $0x1,%rax
  66:	0f b6 00             	movzbl (%rax),%eax
  69:	84 c0                	test   %al,%al
  6b:	78 1e                	js     8b <L6470DmxMode1::Data(unsigned char const*)+0x8b>
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 8b 40 08          	mov    0x8(%rax),%rax
  75:	8b 55 fc             	mov    -0x4(%rbp),%edx
  78:	66 0f 6e c2          	movd   %edx,%xmm0
  7c:	be 00 00 00 00       	mov    $0x0,%esi
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	call   89 <L6470DmxMode1::Data(unsigned char const*)+0x89>
  89:	eb 1c                	jmp    a7 <L6470DmxMode1::Data(unsigned char const*)+0xa7>
  8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8f:	48 8b 40 08          	mov    0x8(%rax),%rax
  93:	8b 55 fc             	mov    -0x4(%rbp),%edx
  96:	66 0f 6e c2          	movd   %edx,%xmm0
  9a:	be 01 00 00 00       	mov    $0x1,%esi
  9f:	48 89 c7             	mov    %rax,%rdi
  a2:	e8 00 00 00 00       	call   a7 <L6470DmxMode1::Data(unsigned char const*)+0xa7>
  a7:	90                   	nop
  a8:	c9                   	leave  
  a9:	c3                   	ret    

l6470dmxmode2.o:     file format elf64-x86-64


Disassembly of section .text._ZN12L6470DmxModeC2Ev:

0000000000000000 <L6470DmxMode::L6470DmxMode()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13 <L6470DmxMode::L6470DmxMode()+0x13>
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode2C2EP5L6470:

0000000000000000 <L6470DmxMode2::L6470DmxMode2(L6470*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	call   20 <L6470DmxMode2::L6470DmxMode2(L6470*)+0x20>
  20:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 27 <L6470DmxMode2::L6470DmxMode2(L6470*)+0x27>
  27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2b:	48 89 10             	mov    %rdx,(%rax)
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  36:	48 89 50 08          	mov    %rdx,0x8(%rax)
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	48 8b 40 08          	mov    0x8(%rax),%rax
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	call   4a <L6470DmxMode2::L6470DmxMode2(L6470*)+0x4a>
  4a:	66 0f 7e c0          	movd   %xmm0,%eax
  4e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  52:	89 42 10             	mov    %eax,0x10(%rdx)
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	48 8b 40 08          	mov    0x8(%rax),%rax
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	call   65 <L6470DmxMode2::L6470DmxMode2(L6470*)+0x65>
  65:	66 0f 7e c0          	movd   %xmm0,%eax
  69:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  6d:	89 42 14             	mov    %eax,0x14(%rdx)
  70:	90                   	nop
  71:	c9                   	leave  
  72:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode2D2Ev:

0000000000000000 <L6470DmxMode2::~L6470DmxMode2()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 17 <L6470DmxMode2::~L6470DmxMode2()+0x17>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <L6470DmxMode2::~L6470DmxMode2()+0x2a>
  2a:	90                   	nop
  2b:	c9                   	leave  
  2c:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode2D0Ev:

0000000000000000 <L6470DmxMode2::~L6470DmxMode2()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <L6470DmxMode2::~L6470DmxMode2()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <L6470DmxMode2::~L6470DmxMode2()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode25StartEv:

0000000000000000 <L6470DmxMode2::Start()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  1c:	8b 52 10             	mov    0x10(%rdx),%edx
  1f:	66 0f 6e c2          	movd   %edx,%xmm0
  23:	be 01 00 00 00       	mov    $0x1,%esi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <L6470DmxMode2::Start()+0x30>
  30:	90                   	nop
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode24StopEv:

0000000000000000 <L6470DmxMode2::Stop()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	call   20 <L6470DmxMode2::Stop()+0x20>
  20:	90                   	nop
  21:	c9                   	leave  
  22:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode24DataEPKh:

0000000000000000 <L6470DmxMode2::Data(unsigned char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 8b 40 08          	mov    0x8(%rax),%rax
  1c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  20:	f3 0f 10 4a 10       	movss  0x10(%rdx),%xmm1
  25:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  29:	0f b6 12             	movzbl (%rdx),%edx
  2c:	0f b6 d2             	movzbl %dl,%edx
  2f:	66 0f ef d2          	pxor   %xmm2,%xmm2
  33:	f3 0f 2a d2          	cvtsi2ss %edx,%xmm2
  37:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3b:	f3 0f 10 42 14       	movss  0x14(%rdx),%xmm0
  40:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  44:	f3 0f 10 5a 10       	movss  0x10(%rdx),%xmm3
  49:	f3 0f 5c c3          	subss  %xmm3,%xmm0
  4d:	f3 0f 10 1d 00 00 00 	movss  0x0(%rip),%xmm3        # 55 <L6470DmxMode2::Data(unsigned char const*)+0x55>
  54:	00 
  55:	f3 0f 5e c3          	divss  %xmm3,%xmm0
  59:	f3 0f 59 c2          	mulss  %xmm2,%xmm0
  5d:	f3 0f 58 c8          	addss  %xmm0,%xmm1
  61:	66 0f 7e ca          	movd   %xmm1,%edx
  65:	66 0f 6e c2          	movd   %edx,%xmm0
  69:	be 01 00 00 00       	mov    $0x1,%esi
  6e:	48 89 c7             	mov    %rax,%rdi
  71:	e8 00 00 00 00       	call   76 <L6470DmxMode2::Data(unsigned char const*)+0x76>
  76:	90                   	nop
  77:	c9                   	leave  
  78:	c3                   	ret    

l6470dmxmode3.o:     file format elf64-x86-64


Disassembly of section .text._ZNK11MotorParams12GetStepAngelEv:

0000000000000000 <MotorParams::GetStepAngel() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	f3 0f 10 40 0c       	movss  0xc(%rax),%xmm0
  15:	5d                   	pop    %rbp
  16:	c3                   	ret    

Disassembly of section .text._ZN12L6470DmxModeC2Ev:

0000000000000000 <L6470DmxMode::L6470DmxMode()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13 <L6470DmxMode::L6470DmxMode()+0x13>
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode3C2EP5L6470P11MotorParams:

0000000000000000 <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	call   24 <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)+0x24>
  24:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2b <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)+0x2b>
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 10             	mov    %rdx,(%rax)
  32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  36:	c6 40 14 00          	movb   $0x0,0x14(%rax)
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c6 40 15 00          	movb   $0x0,0x15(%rax)
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  4a:	48 89 50 08          	mov    %rdx,0x8(%rax)
  4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  52:	48 8b 40 08          	mov    0x8(%rax),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	call   5e <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)+0x5e>
  5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	call   6a <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)+0x6a>
  6a:	0f b6 c0             	movzbl %al,%eax
  6d:	ba 68 01 00 00       	mov    $0x168,%edx
  72:	89 c1                	mov    %eax,%ecx
  74:	d3 e2                	shl    %cl,%edx
  76:	89 d0                	mov    %edx,%eax
  78:	89 c0                	mov    %eax,%eax
  7a:	48 85 c0             	test   %rax,%rax
  7d:	78 10                	js     8f <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)+0x8f>
  7f:	66 0f ef d2          	pxor   %xmm2,%xmm2
  83:	f3 48 0f 2a d0       	cvtsi2ss %rax,%xmm2
  88:	f3 0f 11 55 e4       	movss  %xmm2,-0x1c(%rbp)
  8d:	eb 1e                	jmp    ad <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)+0xad>
  8f:	48 89 c2             	mov    %rax,%rdx
  92:	48 d1 ea             	shr    %rdx
  95:	83 e0 01             	and    $0x1,%eax
  98:	48 09 c2             	or     %rax,%rdx
  9b:	66 0f ef c0          	pxor   %xmm0,%xmm0
  9f:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  a4:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  a8:	f3 0f 11 45 e4       	movss  %xmm0,-0x1c(%rbp)
  ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b1:	48 89 c7             	mov    %rax,%rdi
  b4:	e8 00 00 00 00       	call   b9 <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)+0xb9>
  b9:	0f 28 c8             	movaps %xmm0,%xmm1
  bc:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  c1:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  c5:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # cd <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)+0xcd>
  cc:	00 
  cd:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d5:	f3 0f 11 40 10       	movss  %xmm0,0x10(%rax)
  da:	90                   	nop
  db:	c9                   	leave  
  dc:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode3D2Ev:

0000000000000000 <L6470DmxMode3::~L6470DmxMode3()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 17 <L6470DmxMode3::~L6470DmxMode3()+0x17>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <L6470DmxMode3::~L6470DmxMode3()+0x2a>
  2a:	90                   	nop
  2b:	c9                   	leave  
  2c:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode3D0Ev:

0000000000000000 <L6470DmxMode3::~L6470DmxMode3()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <L6470DmxMode3::~L6470DmxMode3()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <L6470DmxMode3::~L6470DmxMode3()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode35StartEv:

0000000000000000 <L6470DmxMode3::Start()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode34StopEv:

0000000000000000 <L6470DmxMode3::Stop()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode310HandleBusyEv:

0000000000000000 <L6470DmxMode3::HandleBusy()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  1c:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  20:	48 8b 12             	mov    (%rdx),%rdx
  23:	48 83 c2 10          	add    $0x10,%rdx
  27:	48 8b 12             	mov    (%rdx),%rdx
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	ff d2                	call   *%rdx
  2f:	85 c0                	test   %eax,%eax
  31:	0f 95 c0             	setne  %al
  34:	84 c0                	test   %al,%al
  36:	74 1a                	je     52 <L6470DmxMode3::HandleBusy()+0x52>
  38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3c:	48 8b 40 08          	mov    0x8(%rax),%rax
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <L6470DmxMode3::HandleBusy()+0x48>
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	c6 40 15 01          	movb   $0x1,0x15(%rax)
  50:	eb 08                	jmp    5a <L6470DmxMode3::HandleBusy()+0x5a>
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	c6 40 15 00          	movb   $0x0,0x15(%rax)
  5a:	90                   	nop
  5b:	c9                   	leave  
  5c:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode39BusyCheckEv:

0000000000000000 <L6470DmxMode3::BusyCheck()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  1c:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  20:	48 8b 12             	mov    (%rdx),%rdx
  23:	48 83 c2 10          	add    $0x10,%rdx
  27:	48 8b 12             	mov    (%rdx),%rdx
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	ff d2                	call   *%rdx
  2f:	85 c0                	test   %eax,%eax
  31:	0f 95 c0             	setne  %al
  34:	c9                   	leave  
  35:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode34DataEPKh:

0000000000000000 <L6470DmxMode3::Data(unsigned char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  18:	0f b6 00             	movzbl (%rax),%eax
  1b:	0f b6 c0             	movzbl %al,%eax
  1e:	66 0f ef c9          	pxor   %xmm1,%xmm1
  22:	f3 0f 2a c8          	cvtsi2ss %eax,%xmm1
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	f3 0f 10 40 10       	movss  0x10(%rax),%xmm0
  2f:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  33:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
  38:	89 45 f8             	mov    %eax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	0f b6 40 15          	movzbl 0x15(%rax),%eax
  43:	84 c0                	test   %al,%al
  45:	74 21                	je     68 <L6470DmxMode3::Data(unsigned char const*)+0x68>
  47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4b:	48 8b 40 08          	mov    0x8(%rax),%rax
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <L6470DmxMode3::Data(unsigned char const*)+0x57>
  57:	89 45 fc             	mov    %eax,-0x4(%rbp)
  5a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  5d:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  60:	0f 97 c0             	seta   %al
  63:	88 45 f7             	mov    %al,-0x9(%rbp)
  66:	eb 17                	jmp    7f <L6470DmxMode3::Data(unsigned char const*)+0x7f>
  68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6c:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  70:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  74:	0f b6 00             	movzbl (%rax),%eax
  77:	38 c2                	cmp    %al,%dl
  79:	0f 97 c0             	seta   %al
  7c:	88 45 f7             	mov    %al,-0x9(%rbp)
  7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  83:	48 8b 40 08          	mov    0x8(%rax),%rax
  87:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8a:	80 7d f7 00          	cmpb   $0x0,-0x9(%rbp)
  8e:	74 07                	je     97 <L6470DmxMode3::Data(unsigned char const*)+0x97>
  90:	b9 00 00 00 00       	mov    $0x0,%ecx
  95:	eb 05                	jmp    9c <L6470DmxMode3::Data(unsigned char const*)+0x9c>
  97:	b9 01 00 00 00       	mov    $0x1,%ecx
  9c:	89 ce                	mov    %ecx,%esi
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	call   a6 <L6470DmxMode3::Data(unsigned char const*)+0xa6>
  a6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  aa:	0f b6 10             	movzbl (%rax),%edx
  ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b1:	88 50 14             	mov    %dl,0x14(%rax)
  b4:	90                   	nop
  b5:	c9                   	leave  
  b6:	c3                   	ret    

l6470dmxmode4.o:     file format elf64-x86-64


Disassembly of section .text._ZNK10ModeParams11GetMaxStepsEv:

0000000000000000 <ModeParams::GetMaxSteps() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 0f             	mov    0xf(%rax),%eax
  13:	5d                   	pop    %rbp
  14:	c3                   	ret    

Disassembly of section .text._ZNK10ModeParams15GetSwitchActionEv:

0000000000000000 <ModeParams::GetSwitchAction() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 13             	mov    0x13(%rax),%eax
  13:	5d                   	pop    %rbp
  14:	c3                   	ret    

Disassembly of section .text._ZNK10ModeParams12GetSwitchDirEv:

0000000000000000 <ModeParams::GetSwitchDir() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 17             	mov    0x17(%rax),%eax
  13:	5d                   	pop    %rbp
  14:	c3                   	ret    

Disassembly of section .text._ZNK10ModeParams20GetSwitchStepsPerSecEv:

0000000000000000 <ModeParams::GetSwitchStepsPerSec() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	f3 0f 10 40 1b       	movss  0x1b(%rax),%xmm0
  15:	5d                   	pop    %rbp
  16:	c3                   	ret    

Disassembly of section .text._ZNK10ModeParams9HasSwitchEv:

0000000000000000 <ModeParams::HasSwitch() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 40 1f          	movzbl 0x1f(%rax),%eax
  14:	5d                   	pop    %rbp
  15:	c3                   	ret    

Disassembly of section .text._ZN12L6470DmxModeC2Ev:

0000000000000000 <L6470DmxMode::L6470DmxMode()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13 <L6470DmxMode::L6470DmxMode()+0x13>
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode4C2EP5L6470P11MotorParamsP10ModeParams:

0000000000000000 <L6470DmxMode4::L6470DmxMode4(L6470*, MotorParams*, ModeParams*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  18:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <L6470DmxMode4::L6470DmxMode4(L6470*, MotorParams*, ModeParams*)+0x28>
  28:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2f <L6470DmxMode4::L6470DmxMode4(L6470*, MotorParams*, ModeParams*)+0x2f>
  2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  33:	48 89 10             	mov    %rdx,(%rax)
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	c6 40 1c 00          	movb   $0x0,0x1c(%rax)
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  42:	c6 40 1d 00          	movb   $0x0,0x1d(%rax)
  46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4e:	48 89 50 08          	mov    %rdx,0x8(%rax)
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  5a:	48 89 50 10          	mov    %rdx,0x10(%rax)
  5e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	call   6a <L6470DmxMode4::L6470DmxMode4(L6470*, MotorParams*, ModeParams*)+0x6a>
  6a:	89 c0                	mov    %eax,%eax
  6c:	48 85 c0             	test   %rax,%rax
  6f:	78 0b                	js     7c <L6470DmxMode4::L6470DmxMode4(L6470*, MotorParams*, ModeParams*)+0x7c>
  71:	66 0f ef c0          	pxor   %xmm0,%xmm0
  75:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  7a:	eb 19                	jmp    95 <L6470DmxMode4::L6470DmxMode4(L6470*, MotorParams*, ModeParams*)+0x95>
  7c:	48 89 c2             	mov    %rax,%rdx
  7f:	48 d1 ea             	shr    %rdx
  82:	83 e0 01             	and    $0x1,%eax
  85:	48 09 c2             	or     %rax,%rdx
  88:	66 0f ef c0          	pxor   %xmm0,%xmm0
  8c:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  91:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  95:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 9d <L6470DmxMode4::L6470DmxMode4(L6470*, MotorParams*, ModeParams*)+0x9d>
  9c:	00 
  9d:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a5:	f3 0f 11 40 18       	movss  %xmm0,0x18(%rax)
  aa:	90                   	nop
  ab:	c9                   	leave  
  ac:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode4D2Ev:

0000000000000000 <L6470DmxMode4::~L6470DmxMode4()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 17 <L6470DmxMode4::~L6470DmxMode4()+0x17>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <L6470DmxMode4::~L6470DmxMode4()+0x2a>
  2a:	90                   	nop
  2b:	c9                   	leave  
  2c:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode4D0Ev:

0000000000000000 <L6470DmxMode4::~L6470DmxMode4()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <L6470DmxMode4::~L6470DmxMode4()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <L6470DmxMode4::~L6470DmxMode4()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode410InitSwitchEv:

0000000000000000 <L6470DmxMode4::InitSwitch()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	call   20 <L6470DmxMode4::InitSwitch()+0x20>
  20:	84 c0                	test   %al,%al
  22:	74 5c                	je     80 <L6470DmxMode4::InitSwitch()+0x80>
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 8b 40 08          	mov    0x8(%rax),%rax
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	call   34 <L6470DmxMode4::InitSwitch()+0x34>
  34:	89 45 f4             	mov    %eax,-0xc(%rbp)
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	48 8b 40 08          	mov    0x8(%rax),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
  42:	e8 00 00 00 00       	call   47 <L6470DmxMode4::InitSwitch()+0x47>
  47:	89 45 f8             	mov    %eax,-0x8(%rbp)
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 8b 40 08          	mov    0x8(%rax),%rax
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	call   5a <L6470DmxMode4::InitSwitch()+0x5a>
  5a:	66 0f 7e c0          	movd   %xmm0,%eax
  5e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  65:	48 8b 40 10          	mov    0x10(%rax),%rax
  69:	8b 75 fc             	mov    -0x4(%rbp),%esi
  6c:	8b 55 f8             	mov    -0x8(%rbp),%edx
  6f:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  72:	66 0f 6e c6          	movd   %esi,%xmm0
  76:	89 ce                	mov    %ecx,%esi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	call   80 <L6470DmxMode4::InitSwitch()+0x80>
  80:	90                   	nop
  81:	c9                   	leave  
  82:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode47InitPosEv:

0000000000000000 <L6470DmxMode4::InitPos()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 10          	mov    0x10(%rax),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	call   20 <L6470DmxMode4::InitPos()+0x20>
  20:	90                   	nop
  21:	c9                   	leave  
  22:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode45StartEv:

0000000000000000 <L6470DmxMode4::Start()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode44StopEv:

0000000000000000 <L6470DmxMode4::Stop()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode410HandleBusyEv:

0000000000000000 <L6470DmxMode4::HandleBusy()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 10          	mov    0x10(%rax),%rax
  18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  1c:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  20:	48 8b 12             	mov    (%rdx),%rdx
  23:	48 83 c2 10          	add    $0x10,%rdx
  27:	48 8b 12             	mov    (%rdx),%rdx
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	ff d2                	call   *%rdx
  2f:	85 c0                	test   %eax,%eax
  31:	0f 95 c0             	setne  %al
  34:	84 c0                	test   %al,%al
  36:	74 1a                	je     52 <L6470DmxMode4::HandleBusy()+0x52>
  38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3c:	48 8b 40 10          	mov    0x10(%rax),%rax
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <L6470DmxMode4::HandleBusy()+0x48>
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	c6 40 1d 01          	movb   $0x1,0x1d(%rax)
  50:	eb 08                	jmp    5a <L6470DmxMode4::HandleBusy()+0x5a>
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	c6 40 1d 00          	movb   $0x0,0x1d(%rax)
  5a:	90                   	nop
  5b:	c9                   	leave  
  5c:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode49BusyCheckEv:

0000000000000000 <L6470DmxMode4::BusyCheck()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 10          	mov    0x10(%rax),%rax
  18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  1c:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  20:	48 8b 12             	mov    (%rdx),%rdx
  23:	48 83 c2 10          	add    $0x10,%rdx
  27:	48 8b 12             	mov    (%rdx),%rdx
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	ff d2                	call   *%rdx
  2f:	85 c0                	test   %eax,%eax
  31:	0f 95 c0             	setne  %al
  34:	c9                   	leave  
  35:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode44DataEPKh:

0000000000000000 <L6470DmxMode4::Data(unsigned char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  18:	0f b6 00             	movzbl (%rax),%eax
  1b:	0f b6 c0             	movzbl %al,%eax
  1e:	66 0f ef c9          	pxor   %xmm1,%xmm1
  22:	f3 0f 2a c8          	cvtsi2ss %eax,%xmm1
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	f3 0f 10 40 18       	movss  0x18(%rax),%xmm0
  2f:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  33:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
  38:	89 45 f8             	mov    %eax,-0x8(%rbp)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	0f b6 40 1d          	movzbl 0x1d(%rax),%eax
  43:	84 c0                	test   %al,%al
  45:	74 21                	je     68 <L6470DmxMode4::Data(unsigned char const*)+0x68>
  47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4b:	48 8b 40 10          	mov    0x10(%rax),%rax
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <L6470DmxMode4::Data(unsigned char const*)+0x57>
  57:	89 45 fc             	mov    %eax,-0x4(%rbp)
  5a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  5d:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  60:	0f 97 c0             	seta   %al
  63:	88 45 f7             	mov    %al,-0x9(%rbp)
  66:	eb 17                	jmp    7f <L6470DmxMode4::Data(unsigned char const*)+0x7f>
  68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6c:	0f b6 50 1c          	movzbl 0x1c(%rax),%edx
  70:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  74:	0f b6 00             	movzbl (%rax),%eax
  77:	38 c2                	cmp    %al,%dl
  79:	0f 97 c0             	seta   %al
  7c:	88 45 f7             	mov    %al,-0x9(%rbp)
  7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  83:	48 8b 40 10          	mov    0x10(%rax),%rax
  87:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8a:	80 7d f7 00          	cmpb   $0x0,-0x9(%rbp)
  8e:	74 07                	je     97 <L6470DmxMode4::Data(unsigned char const*)+0x97>
  90:	b9 00 00 00 00       	mov    $0x0,%ecx
  95:	eb 05                	jmp    9c <L6470DmxMode4::Data(unsigned char const*)+0x9c>
  97:	b9 01 00 00 00       	mov    $0x1,%ecx
  9c:	89 ce                	mov    %ecx,%esi
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	call   a6 <L6470DmxMode4::Data(unsigned char const*)+0xa6>
  a6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  aa:	0f b6 10             	movzbl (%rax),%edx
  ad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b1:	88 50 1c             	mov    %dl,0x1c(%rax)
  b4:	90                   	nop
  b5:	c9                   	leave  
  b6:	c3                   	ret    

l6470dmxmode5.o:     file format elf64-x86-64


Disassembly of section .text._ZNK10ModeParams11GetMaxStepsEv:

0000000000000000 <ModeParams::GetMaxSteps() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 0f             	mov    0xf(%rax),%eax
  13:	5d                   	pop    %rbp
  14:	c3                   	ret    

Disassembly of section .text._ZNK10ModeParams15GetSwitchActionEv:

0000000000000000 <ModeParams::GetSwitchAction() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 13             	mov    0x13(%rax),%eax
  13:	5d                   	pop    %rbp
  14:	c3                   	ret    

Disassembly of section .text._ZNK10ModeParams12GetSwitchDirEv:

0000000000000000 <ModeParams::GetSwitchDir() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 17             	mov    0x17(%rax),%eax
  13:	5d                   	pop    %rbp
  14:	c3                   	ret    

Disassembly of section .text._ZNK10ModeParams20GetSwitchStepsPerSecEv:

0000000000000000 <ModeParams::GetSwitchStepsPerSec() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	f3 0f 10 40 1b       	movss  0x1b(%rax),%xmm0
  15:	5d                   	pop    %rbp
  16:	c3                   	ret    

Disassembly of section .text._ZNK10ModeParams9HasSwitchEv:

0000000000000000 <ModeParams::HasSwitch() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 40 1f          	movzbl 0x1f(%rax),%eax
  14:	5d                   	pop    %rbp
  15:	c3                   	ret    

Disassembly of section .text._ZN12L6470DmxModeC2Ev:

0000000000000000 <L6470DmxMode::L6470DmxMode()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13 <L6470DmxMode::L6470DmxMode()+0x13>
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode5C2EP5L6470P11MotorParamsP10ModeParams:

0000000000000000 <L6470DmxMode5::L6470DmxMode5(L6470*, MotorParams*, ModeParams*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  18:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <L6470DmxMode5::L6470DmxMode5(L6470*, MotorParams*, ModeParams*)+0x28>
  28:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2f <L6470DmxMode5::L6470DmxMode5(L6470*, MotorParams*, ModeParams*)+0x2f>
  2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  33:	48 89 10             	mov    %rdx,(%rax)
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	66 c7 40 1c 00 00    	movw   $0x0,0x1c(%rax)
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44:	c6 40 1e 00          	movb   $0x0,0x1e(%rax)
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  50:	48 89 50 08          	mov    %rdx,0x8(%rax)
  54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  58:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  5c:	48 89 50 10          	mov    %rdx,0x10(%rax)
  60:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	call   6c <L6470DmxMode5::L6470DmxMode5(L6470*, MotorParams*, ModeParams*)+0x6c>
  6c:	89 c0                	mov    %eax,%eax
  6e:	48 85 c0             	test   %rax,%rax
  71:	78 0b                	js     7e <L6470DmxMode5::L6470DmxMode5(L6470*, MotorParams*, ModeParams*)+0x7e>
  73:	66 0f ef c0          	pxor   %xmm0,%xmm0
  77:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  7c:	eb 19                	jmp    97 <L6470DmxMode5::L6470DmxMode5(L6470*, MotorParams*, ModeParams*)+0x97>
  7e:	48 89 c2             	mov    %rax,%rdx
  81:	48 d1 ea             	shr    %rdx
  84:	83 e0 01             	and    $0x1,%eax
  87:	48 09 c2             	or     %rax,%rdx
  8a:	66 0f ef c0          	pxor   %xmm0,%xmm0
  8e:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  93:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  97:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 9f <L6470DmxMode5::L6470DmxMode5(L6470*, MotorParams*, ModeParams*)+0x9f>
  9e:	00 
  9f:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a7:	f3 0f 11 40 18       	movss  %xmm0,0x18(%rax)
  ac:	90                   	nop
  ad:	c9                   	leave  
  ae:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode5D2Ev:

0000000000000000 <L6470DmxMode5::~L6470DmxMode5()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 17 <L6470DmxMode5::~L6470DmxMode5()+0x17>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <L6470DmxMode5::~L6470DmxMode5()+0x2a>
  2a:	90                   	nop
  2b:	c9                   	leave  
  2c:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode5D0Ev:

0000000000000000 <L6470DmxMode5::~L6470DmxMode5()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <L6470DmxMode5::~L6470DmxMode5()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <L6470DmxMode5::~L6470DmxMode5()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode510InitSwitchEv:

0000000000000000 <L6470DmxMode5::InitSwitch()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 8b 40 08          	mov    0x8(%rax),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	call   20 <L6470DmxMode5::InitSwitch()+0x20>
  20:	84 c0                	test   %al,%al
  22:	74 5c                	je     80 <L6470DmxMode5::InitSwitch()+0x80>
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 8b 40 08          	mov    0x8(%rax),%rax
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	call   34 <L6470DmxMode5::InitSwitch()+0x34>
  34:	89 45 f4             	mov    %eax,-0xc(%rbp)
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	48 8b 40 08          	mov    0x8(%rax),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
  42:	e8 00 00 00 00       	call   47 <L6470DmxMode5::InitSwitch()+0x47>
  47:	89 45 f8             	mov    %eax,-0x8(%rbp)
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 8b 40 08          	mov    0x8(%rax),%rax
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	call   5a <L6470DmxMode5::InitSwitch()+0x5a>
  5a:	66 0f 7e c0          	movd   %xmm0,%eax
  5e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  65:	48 8b 40 10          	mov    0x10(%rax),%rax
  69:	8b 75 fc             	mov    -0x4(%rbp),%esi
  6c:	8b 55 f8             	mov    -0x8(%rbp),%edx
  6f:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  72:	66 0f 6e c6          	movd   %esi,%xmm0
  76:	89 ce                	mov    %ecx,%esi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	call   80 <L6470DmxMode5::InitSwitch()+0x80>
  80:	90                   	nop
  81:	c9                   	leave  
  82:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode57InitPosEv:

0000000000000000 <L6470DmxMode5::InitPos()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 10          	mov    0x10(%rax),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	call   20 <L6470DmxMode5::InitPos()+0x20>
  20:	90                   	nop
  21:	c9                   	leave  
  22:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode55StartEv:

0000000000000000 <L6470DmxMode5::Start()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode54StopEv:

0000000000000000 <L6470DmxMode5::Stop()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode510HandleBusyEv:

0000000000000000 <L6470DmxMode5::HandleBusy()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 10          	mov    0x10(%rax),%rax
  18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  1c:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  20:	48 8b 12             	mov    (%rdx),%rdx
  23:	48 83 c2 10          	add    $0x10,%rdx
  27:	48 8b 12             	mov    (%rdx),%rdx
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	ff d2                	call   *%rdx
  2f:	85 c0                	test   %eax,%eax
  31:	0f 95 c0             	setne  %al
  34:	84 c0                	test   %al,%al
  36:	74 1a                	je     52 <L6470DmxMode5::HandleBusy()+0x52>
  38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3c:	48 8b 40 10          	mov    0x10(%rax),%rax
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <L6470DmxMode5::HandleBusy()+0x48>
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	c6 40 1e 01          	movb   $0x1,0x1e(%rax)
  50:	eb 08                	jmp    5a <L6470DmxMode5::HandleBusy()+0x5a>
  52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  56:	c6 40 1e 00          	movb   $0x0,0x1e(%rax)
  5a:	90                   	nop
  5b:	c9                   	leave  
  5c:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode59BusyCheckEv:

0000000000000000 <L6470DmxMode5::BusyCheck()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 10          	mov    0x10(%rax),%rax
  18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  1c:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  20:	48 8b 12             	mov    (%rdx),%rdx
  23:	48 83 c2 10          	add    $0x10,%rdx
  27:	48 8b 12             	mov    (%rdx),%rdx
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	ff d2                	call   *%rdx
  2f:	85 c0                	test   %eax,%eax
  31:	0f 95 c0             	setne  %al
  34:	c9                   	leave  
  35:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode54DataEPKh:

0000000000000000 <L6470DmxMode5::Data(unsigned char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  18:	48 83 c0 01          	add    $0x1,%rax
  1c:	0f b6 00             	movzbl (%rax),%eax
  1f:	0f b6 d0             	movzbl %al,%edx
  22:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  26:	0f b6 00             	movzbl (%rax),%eax
  29:	0f b6 c0             	movzbl %al,%eax
  2c:	c1 e0 08             	shl    $0x8,%eax
  2f:	09 d0                	or     %edx,%eax
  31:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  35:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  39:	66 0f ef c9          	pxor   %xmm1,%xmm1
  3d:	f3 0f 2a c8          	cvtsi2ss %eax,%xmm1
  41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  45:	f3 0f 10 40 18       	movss  0x18(%rax),%xmm0
  4a:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  4e:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
  53:	89 45 f8             	mov    %eax,-0x8(%rbp)
  56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5a:	0f b6 40 1e          	movzbl 0x1e(%rax),%eax
  5e:	84 c0                	test   %al,%al
  60:	74 21                	je     83 <L6470DmxMode5::Data(unsigned char const*)+0x83>
  62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  66:	48 8b 40 10          	mov    0x10(%rax),%rax
  6a:	48 89 c7             	mov    %rax,%rdi
  6d:	e8 00 00 00 00       	call   72 <L6470DmxMode5::Data(unsigned char const*)+0x72>
  72:	89 45 fc             	mov    %eax,-0x4(%rbp)
  75:	8b 45 fc             	mov    -0x4(%rbp),%eax
  78:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  7b:	0f 97 c0             	seta   %al
  7e:	88 45 f5             	mov    %al,-0xb(%rbp)
  81:	eb 12                	jmp    95 <L6470DmxMode5::Data(unsigned char const*)+0x95>
  83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  87:	0f b7 40 1c          	movzwl 0x1c(%rax),%eax
  8b:	66 39 45 f6          	cmp    %ax,-0xa(%rbp)
  8f:	0f 92 c0             	setb   %al
  92:	88 45 f5             	mov    %al,-0xb(%rbp)
  95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  99:	48 8b 40 10          	mov    0x10(%rax),%rax
  9d:	8b 55 f8             	mov    -0x8(%rbp),%edx
  a0:	80 7d f5 00          	cmpb   $0x0,-0xb(%rbp)
  a4:	74 07                	je     ad <L6470DmxMode5::Data(unsigned char const*)+0xad>
  a6:	b9 00 00 00 00       	mov    $0x0,%ecx
  ab:	eb 05                	jmp    b2 <L6470DmxMode5::Data(unsigned char const*)+0xb2>
  ad:	b9 01 00 00 00       	mov    $0x1,%ecx
  b2:	89 ce                	mov    %ecx,%esi
  b4:	48 89 c7             	mov    %rax,%rdi
  b7:	e8 00 00 00 00       	call   bc <L6470DmxMode5::Data(unsigned char const*)+0xbc>
  bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c0:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  c4:	66 89 50 1c          	mov    %dx,0x1c(%rax)
  c8:	90                   	nop
  c9:	c9                   	leave  
  ca:	c3                   	ret    

l6470dmxmode6.o:     file format elf64-x86-64


Disassembly of section .text._ZN12L6470DmxModeC2Ev:

0000000000000000 <L6470DmxMode::L6470DmxMode()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13 <L6470DmxMode::L6470DmxMode()+0x13>
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode6C2EP5L6470P11MotorParamsP10ModeParams:

0000000000000000 <L6470DmxMode6::L6470DmxMode6(L6470*, MotorParams*, ModeParams*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  18:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <L6470DmxMode6::L6470DmxMode6(L6470*, MotorParams*, ModeParams*)+0x28>
  28:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2f <L6470DmxMode6::L6470DmxMode6(L6470*, MotorParams*, ModeParams*)+0x2f>
  2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  33:	48 89 10             	mov    %rdx,(%rax)
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  3e:	48 89 50 08          	mov    %rdx,0x8(%rax)
  42:	90                   	nop
  43:	c9                   	leave  
  44:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode6D2Ev:

0000000000000000 <L6470DmxMode6::~L6470DmxMode6()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 17 <L6470DmxMode6::~L6470DmxMode6()+0x17>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <L6470DmxMode6::~L6470DmxMode6()+0x2a>
  2a:	90                   	nop
  2b:	c9                   	leave  
  2c:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode6D0Ev:

0000000000000000 <L6470DmxMode6::~L6470DmxMode6()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <L6470DmxMode6::~L6470DmxMode6()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <L6470DmxMode6::~L6470DmxMode6()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode65StartEv:

0000000000000000 <L6470DmxMode6::Start()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode64StopEv:

0000000000000000 <L6470DmxMode6::Stop()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode64DataEPKh:

0000000000000000 <L6470DmxMode6::Data(unsigned char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	90                   	nop
  11:	5d                   	pop    %rbp
  12:	c3                   	ret    

l6470dmxmode.o:     file format elf64-x86-64


Disassembly of section .text._ZN12L6470DmxModeD2Ev:

0000000000000000 <L6470DmxMode::~L6470DmxMode()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13 <L6470DmxMode::~L6470DmxMode()+0x13>
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	ret    

Disassembly of section .text._ZN12L6470DmxModeD0Ev:

0000000000000000 <L6470DmxMode::~L6470DmxMode()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <L6470DmxMode::~L6470DmxMode()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <L6470DmxMode::~L6470DmxMode()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN12L6470DmxMode10InitSwitchEv:

0000000000000000 <L6470DmxMode::InitSwitch()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN12L6470DmxMode7InitPosEv:

0000000000000000 <L6470DmxMode::InitPos()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN12L6470DmxMode10HandleBusyEv:

0000000000000000 <L6470DmxMode::HandleBusy()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN12L6470DmxMode9BusyCheckEv:

0000000000000000 <L6470DmxMode::BusyCheck()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	b8 00 00 00 00       	mov    $0x0,%eax
  11:	5d                   	pop    %rbp
  12:	c3                   	ret    

l6470dmxmodes.o:     file format elf64-x86-64


Disassembly of section .text._ZN5L647014GetMotorNumberEv:

0000000000000000 <L6470::GetMotorNumber()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 08             	mov    0x8(%rax),%eax
  13:	5d                   	pop    %rbp
  14:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode015GetDmxFootPrintEv:

0000000000000000 <L6470DmxMode0::GetDmxFootPrint()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	b8 01 00 00 00       	mov    $0x1,%eax
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode115GetDmxFootPrintEv:

0000000000000000 <L6470DmxMode1::GetDmxFootPrint()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	b8 02 00 00 00       	mov    $0x2,%eax
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode215GetDmxFootPrintEv:

0000000000000000 <L6470DmxMode2::GetDmxFootPrint()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	b8 01 00 00 00       	mov    $0x1,%eax
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode315GetDmxFootPrintEv:

0000000000000000 <L6470DmxMode3::GetDmxFootPrint()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	b8 01 00 00 00       	mov    $0x1,%eax
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode415GetDmxFootPrintEv:

0000000000000000 <L6470DmxMode4::GetDmxFootPrint()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	b8 01 00 00 00       	mov    $0x1,%eax
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode515GetDmxFootPrintEv:

0000000000000000 <L6470DmxMode5::GetDmxFootPrint()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	b8 02 00 00 00       	mov    $0x2,%eax
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxMode615GetDmxFootPrintEv:

0000000000000000 <L6470DmxMode6::GetDmxFootPrint()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	b8 00 00 00 00       	mov    $0x0,%eax
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModesC2E14TL6470DmxModestP5L6470P11MotorParamsP10ModeParams:

0000000000000000 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  14:	89 d0                	mov    %edx,%eax
  16:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  1a:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
  1e:	4c 89 4d b8          	mov    %r9,-0x48(%rbp)
  22:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2a:	c6 00 00             	movb   $0x0,(%rax)
  2d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  31:	c6 40 01 00          	movb   $0x0,0x1(%rax)
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%rax)
  40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  44:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  4b:	00 
  4c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  50:	66 c7 40 18 00 00    	movw   $0x0,0x18(%rax)
  56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5a:	0f b7 55 d0          	movzwl -0x30(%rbp),%edx
  5e:	66 89 50 08          	mov    %dx,0x8(%rax)
  62:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  65:	83 f8 06             	cmp    $0x6,%eax
  68:	0f 87 b0 01 00 00    	ja     21e <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x21e>
  6e:	89 c0                	mov    %eax,%eax
  70:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  77:	00 
  78:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7f <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x7f>
  7f:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  82:	48 98                	cltq   
  84:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 8b <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x8b>
  8b:	48 01 d0             	add    %rdx,%rax
  8e:	3e ff e0             	notrack jmp *%rax
  91:	bf 18 00 00 00       	mov    $0x18,%edi
  96:	e8 00 00 00 00       	call   9b <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x9b>
  9b:	48 89 c3             	mov    %rax,%rbx
  9e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a2:	48 89 c6             	mov    %rax,%rsi
  a5:	48 89 df             	mov    %rbx,%rdi
  a8:	e8 00 00 00 00       	call   ad <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0xad>
  ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b1:	48 89 58 10          	mov    %rbx,0x10(%rax)
  b5:	e8 00 00 00 00       	call   ba <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0xba>
  ba:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  be:	66 89 42 18          	mov    %ax,0x18(%rdx)
  c2:	e9 58 01 00 00       	jmp    21f <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x21f>
  c7:	bf 18 00 00 00       	mov    $0x18,%edi
  cc:	e8 00 00 00 00       	call   d1 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0xd1>
  d1:	48 89 c3             	mov    %rax,%rbx
  d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  d8:	48 89 c6             	mov    %rax,%rsi
  db:	48 89 df             	mov    %rbx,%rdi
  de:	e8 00 00 00 00       	call   e3 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0xe3>
  e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  e7:	48 89 58 10          	mov    %rbx,0x10(%rax)
  eb:	e8 00 00 00 00       	call   f0 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0xf0>
  f0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  f4:	66 89 42 18          	mov    %ax,0x18(%rdx)
  f8:	e9 22 01 00 00       	jmp    21f <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x21f>
  fd:	bf 18 00 00 00       	mov    $0x18,%edi
 102:	e8 00 00 00 00       	call   107 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x107>
 107:	48 89 c3             	mov    %rax,%rbx
 10a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 10e:	48 89 c6             	mov    %rax,%rsi
 111:	48 89 df             	mov    %rbx,%rdi
 114:	e8 00 00 00 00       	call   119 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x119>
 119:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 11d:	48 89 58 10          	mov    %rbx,0x10(%rax)
 121:	e8 00 00 00 00       	call   126 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x126>
 126:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 12a:	66 89 42 18          	mov    %ax,0x18(%rdx)
 12e:	e9 ec 00 00 00       	jmp    21f <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x21f>
 133:	bf 18 00 00 00       	mov    $0x18,%edi
 138:	e8 00 00 00 00       	call   13d <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x13d>
 13d:	48 89 c3             	mov    %rax,%rbx
 140:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
 144:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 148:	48 89 c6             	mov    %rax,%rsi
 14b:	48 89 df             	mov    %rbx,%rdi
 14e:	e8 00 00 00 00       	call   153 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x153>
 153:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 157:	48 89 58 10          	mov    %rbx,0x10(%rax)
 15b:	e8 00 00 00 00       	call   160 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x160>
 160:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 164:	66 89 42 18          	mov    %ax,0x18(%rdx)
 168:	e9 b2 00 00 00       	jmp    21f <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x21f>
 16d:	bf 20 00 00 00       	mov    $0x20,%edi
 172:	e8 00 00 00 00       	call   177 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x177>
 177:	48 89 c3             	mov    %rax,%rbx
 17a:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
 17e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
 182:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 186:	48 89 c6             	mov    %rax,%rsi
 189:	48 89 df             	mov    %rbx,%rdi
 18c:	e8 00 00 00 00       	call   191 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x191>
 191:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 195:	48 89 58 10          	mov    %rbx,0x10(%rax)
 199:	e8 00 00 00 00       	call   19e <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x19e>
 19e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 1a2:	66 89 42 18          	mov    %ax,0x18(%rdx)
 1a6:	eb 77                	jmp    21f <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x21f>
 1a8:	bf 20 00 00 00       	mov    $0x20,%edi
 1ad:	e8 00 00 00 00       	call   1b2 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x1b2>
 1b2:	48 89 c3             	mov    %rax,%rbx
 1b5:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
 1b9:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
 1bd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1c1:	48 89 c6             	mov    %rax,%rsi
 1c4:	48 89 df             	mov    %rbx,%rdi
 1c7:	e8 00 00 00 00       	call   1cc <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x1cc>
 1cc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1d0:	48 89 58 10          	mov    %rbx,0x10(%rax)
 1d4:	e8 00 00 00 00       	call   1d9 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x1d9>
 1d9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 1dd:	66 89 42 18          	mov    %ax,0x18(%rdx)
 1e1:	eb 3c                	jmp    21f <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x21f>
 1e3:	bf 10 00 00 00       	mov    $0x10,%edi
 1e8:	e8 00 00 00 00       	call   1ed <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x1ed>
 1ed:	48 89 c3             	mov    %rax,%rbx
 1f0:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
 1f4:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
 1f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1fc:	48 89 c6             	mov    %rax,%rsi
 1ff:	48 89 df             	mov    %rbx,%rdi
 202:	e8 00 00 00 00       	call   207 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x207>
 207:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 20b:	48 89 58 10          	mov    %rbx,0x10(%rax)
 20f:	e8 00 00 00 00       	call   214 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x214>
 214:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 218:	66 89 42 18          	mov    %ax,0x18(%rdx)
 21c:	eb 01                	jmp    21f <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x21f>
 21e:	90                   	nop
 21f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 223:	48 8b 40 10          	mov    0x10(%rax),%rax
 227:	48 85 c0             	test   %rax,%rax
 22a:	74 6d                	je     299 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x299>
 22c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 230:	48 89 c7             	mov    %rax,%rdi
 233:	e8 00 00 00 00       	call   238 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x238>
 238:	89 c2                	mov    %eax,%edx
 23a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 23e:	88 50 01             	mov    %dl,0x1(%rax)
 241:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 245:	8b 55 d4             	mov    -0x2c(%rbp),%edx
 248:	89 50 04             	mov    %edx,0x4(%rax)
 24b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 24f:	0f b7 40 18          	movzwl 0x18(%rax),%eax
 253:	0f b7 c0             	movzwl %ax,%eax
 256:	48 89 c7             	mov    %rax,%rdi
 259:	e8 00 00 00 00       	call   25e <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x25e>
 25e:	48 89 c2             	mov    %rax,%rdx
 261:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 265:	48 89 50 20          	mov    %rdx,0x20(%rax)
 269:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
 270:	eb 17                	jmp    289 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x289>
 272:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 276:	48 8b 50 20          	mov    0x20(%rax),%rdx
 27a:	8b 45 ec             	mov    -0x14(%rbp),%eax
 27d:	48 98                	cltq   
 27f:	48 01 d0             	add    %rdx,%rax
 282:	c6 00 00             	movb   $0x0,(%rax)
 285:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
 289:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 28d:	0f b7 40 18          	movzwl 0x18(%rax),%eax
 291:	0f b7 c0             	movzwl %ax,%eax
 294:	39 45 ec             	cmp    %eax,-0x14(%rbp)
 297:	7c d9                	jl     272 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x272>
 299:	90                   	nop
 29a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 29e:	c9                   	leave  
 29f:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModesD2Ev:

0000000000000000 <L6470DmxModes::~L6470DmxModes()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 20          	mov    0x20(%rax),%rax
  18:	48 85 c0             	test   %rax,%rax
  1b:	74 10                	je     2d <L6470DmxModes::~L6470DmxModes()+0x2d>
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 8b 40 20          	mov    0x20(%rax),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	call   2d <L6470DmxModes::~L6470DmxModes()+0x2d>
  2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  31:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  38:	00 
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	48 8b 40 10          	mov    0x10(%rax),%rax
  41:	48 85 c0             	test   %rax,%rax
  44:	74 0f                	je     55 <L6470DmxModes::~L6470DmxModes()+0x55>
  46:	48 8b 10             	mov    (%rax),%rdx
  49:	48 83 c2 08          	add    $0x8,%rdx
  4d:	48 8b 12             	mov    (%rdx),%rdx
  50:	48 89 c7             	mov    %rax,%rdi
  53:	ff d2                	call   *%rdx
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  60:	00 
  61:	90                   	nop
  62:	c9                   	leave  
  63:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModes10InitSwitchEv:

0000000000000000 <L6470DmxModes::InitSwitch()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 10          	mov    0x10(%rax),%rax
  18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  1c:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  20:	48 8b 12             	mov    (%rdx),%rdx
  23:	48 83 c2 10          	add    $0x10,%rdx
  27:	48 8b 12             	mov    (%rdx),%rdx
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	ff d2                	call   *%rdx
  2f:	90                   	nop
  30:	c9                   	leave  
  31:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModes7InitPosEv:

0000000000000000 <L6470DmxModes::InitPos()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 10          	mov    0x10(%rax),%rax
  18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  1c:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  20:	48 8b 12             	mov    (%rdx),%rdx
  23:	48 83 c2 18          	add    $0x18,%rdx
  27:	48 8b 12             	mov    (%rdx),%rdx
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	ff d2                	call   *%rdx
  2f:	90                   	nop
  30:	c9                   	leave  
  31:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModes19GetDmxFootPrintModeEj:

0000000000000000 <L6470DmxModes::GetDmxFootPrintMode(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	89 7d fc             	mov    %edi,-0x4(%rbp)
   f:	83 7d fc 06          	cmpl   $0x6,-0x4(%rbp)
  13:	77 55                	ja     6a <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x6a>
  15:	8b 45 fc             	mov    -0x4(%rbp),%eax
  18:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  1f:	00 
  20:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 27 <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x27>
  27:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  2a:	48 98                	cltq   
  2c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 33 <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x33>
  33:	48 01 d0             	add    %rdx,%rax
  36:	3e ff e0             	notrack jmp *%rax
  39:	e8 00 00 00 00       	call   3e <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x3e>
  3e:	eb 2f                	jmp    6f <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x6f>
  40:	e8 00 00 00 00       	call   45 <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x45>
  45:	eb 28                	jmp    6f <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x6f>
  47:	e8 00 00 00 00       	call   4c <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x4c>
  4c:	eb 21                	jmp    6f <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x6f>
  4e:	e8 00 00 00 00       	call   53 <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x53>
  53:	eb 1a                	jmp    6f <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x6f>
  55:	e8 00 00 00 00       	call   5a <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x5a>
  5a:	eb 13                	jmp    6f <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x6f>
  5c:	e8 00 00 00 00       	call   61 <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x61>
  61:	eb 0c                	jmp    6f <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x6f>
  63:	e8 00 00 00 00       	call   68 <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x68>
  68:	eb 05                	jmp    6f <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x6f>
  6a:	b8 00 00 00 00       	mov    $0x0,%eax
  6f:	c9                   	leave  
  70:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModes5StartEv:

0000000000000000 <L6470DmxModes::Start()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b6 00             	movzbl (%rax),%eax
  17:	84 c0                	test   %al,%al
  19:	75 28                	jne    43 <L6470DmxModes::Start()+0x43>
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	48 8b 40 10          	mov    0x10(%rax),%rax
  23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  27:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  2b:	48 8b 12             	mov    (%rdx),%rdx
  2e:	48 83 c2 20          	add    $0x20,%rdx
  32:	48 8b 12             	mov    (%rdx),%rdx
  35:	48 89 c7             	mov    %rax,%rdi
  38:	ff d2                	call   *%rdx
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c6 00 01             	movb   $0x1,(%rax)
  41:	eb 01                	jmp    44 <L6470DmxModes::Start()+0x44>
  43:	90                   	nop
  44:	c9                   	leave  
  45:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModes4StopEv:

0000000000000000 <L6470DmxModes::Stop()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b6 00             	movzbl (%rax),%eax
  17:	83 f0 01             	xor    $0x1,%eax
  1a:	84 c0                	test   %al,%al
  1c:	75 28                	jne    46 <L6470DmxModes::Stop()+0x46>
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 8b 40 10          	mov    0x10(%rax),%rax
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  2e:	48 8b 12             	mov    (%rdx),%rdx
  31:	48 83 c2 28          	add    $0x28,%rdx
  35:	48 8b 12             	mov    (%rdx),%rdx
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	ff d2                	call   *%rdx
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	c6 00 00             	movb   $0x0,(%rax)
  44:	eb 01                	jmp    47 <L6470DmxModes::Stop()+0x47>
  46:	90                   	nop
  47:	c9                   	leave  
  48:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModes10HandleBusyEv:

0000000000000000 <L6470DmxModes::HandleBusy()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 10          	mov    0x10(%rax),%rax
  18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  1c:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  20:	48 8b 12             	mov    (%rdx),%rdx
  23:	48 83 c2 30          	add    $0x30,%rdx
  27:	48 8b 12             	mov    (%rdx),%rdx
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	ff d2                	call   *%rdx
  2f:	90                   	nop
  30:	c9                   	leave  
  31:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModes9BusyCheckEv:

0000000000000000 <L6470DmxModes::BusyCheck()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 10          	mov    0x10(%rax),%rax
  18:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  1c:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  20:	48 8b 12             	mov    (%rdx),%rdx
  23:	48 83 c2 38          	add    $0x38,%rdx
  27:	48 8b 12             	mov    (%rdx),%rdx
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	ff d2                	call   *%rdx
  2f:	c9                   	leave  
  30:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModes16IsDmxDataChangedEPKh:

0000000000000000 <L6470DmxModes::IsDmxDataChanged(unsigned char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  10:	c6 45 f3 00          	movb   $0x0,-0xd(%rbp)
  14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  18:	0f b7 50 08          	movzwl 0x8(%rax),%edx
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  24:	01 d0                	add    %edx,%eax
  26:	83 e8 01             	sub    $0x1,%eax
  29:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 8b 40 20          	mov    0x20(%rax),%rax
  35:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  41:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
  45:	eb 38                	jmp    7f <L6470DmxModes::IsDmxDataChanged(unsigned char const*)+0x7f>
  47:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4b:	0f b6 10             	movzbl (%rax),%edx
  4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  52:	0f b6 00             	movzbl (%rax),%eax
  55:	38 c2                	cmp    %al,%dl
  57:	74 04                	je     5d <L6470DmxModes::IsDmxDataChanged(unsigned char const*)+0x5d>
  59:	c6 45 f3 01          	movb   $0x1,-0xd(%rbp)
  5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  61:	0f b6 10             	movzbl (%rax),%edx
  64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  68:	88 10                	mov    %dl,(%rax)
  6a:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  6f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  74:	0f b7 45 f4          	movzwl -0xc(%rbp),%eax
  78:	83 c0 01             	add    $0x1,%eax
  7b:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
  7f:	0f b7 45 f4          	movzwl -0xc(%rbp),%eax
  83:	66 3b 45 f6          	cmp    -0xa(%rbp),%ax
  87:	77 08                	ja     91 <L6470DmxModes::IsDmxDataChanged(unsigned char const*)+0x91>
  89:	66 81 7d f4 00 02    	cmpw   $0x200,-0xc(%rbp)
  8f:	76 b6                	jbe    47 <L6470DmxModes::IsDmxDataChanged(unsigned char const*)+0x47>
  91:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  95:	5d                   	pop    %rbp
  96:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModes16IsDmxDataChangedEPKhj:

0000000000000000 <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 28          	sub    $0x28,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1b:	48 8b 40 10          	mov    0x10(%rax),%rax
  1f:	48 85 c0             	test   %rax,%rax
  22:	75 07                	jne    2b <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)+0x2b>
  24:	b8 00 00 00 00       	mov    $0x0,%eax
  29:	eb 52                	jmp    7d <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)+0x7d>
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  33:	0f b7 d0             	movzwl %ax,%edx
  36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3a:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  3e:	0f b7 c0             	movzwl %ax,%eax
  41:	01 d0                	add    %edx,%eax
  43:	39 45 dc             	cmp    %eax,-0x24(%rbp)
  46:	73 07                	jae    4f <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)+0x4f>
  48:	b8 00 00 00 00       	mov    $0x0,%eax
  4d:	eb 2e                	jmp    7d <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)+0x7d>
  4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  53:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  57:	0f b7 c0             	movzwl %ax,%eax
  5a:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  5e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  62:	48 01 d0             	add    %rdx,%rax
  65:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  69:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 89 d6             	mov    %rdx,%rsi
  74:	48 89 c7             	mov    %rax,%rdi
  77:	e8 00 00 00 00       	call   7c <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)+0x7c>
  7c:	90                   	nop
  7d:	c9                   	leave  
  7e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModes7DmxDataEPKhj:

0000000000000000 <L6470DmxModes::DmxData(unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1b:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  1f:	0f b7 d0             	movzwl %ax,%edx
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  2a:	0f b7 c0             	movzwl %ax,%eax
  2d:	01 d0                	add    %edx,%eax
  2f:	39 45 dc             	cmp    %eax,-0x24(%rbp)
  32:	72 49                	jb     7d <L6470DmxModes::DmxData(unsigned char const*, unsigned int)+0x7d>
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  3c:	0f b7 c0             	movzwl %ax,%eax
  3f:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  43:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  47:	48 01 d0             	add    %rdx,%rax
  4a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  52:	48 8b 40 10          	mov    0x10(%rax),%rax
  56:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5a:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  5e:	48 8b 12             	mov    (%rdx),%rdx
  61:	48 83 c2 40          	add    $0x40,%rdx
  65:	48 8b 0a             	mov    (%rdx),%rcx
  68:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  6c:	48 89 d6             	mov    %rdx,%rsi
  6f:	48 89 c7             	mov    %rax,%rdi
  72:	ff d1                	call   *%rcx
  74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  78:	c6 00 01             	movb   $0x1,(%rax)
  7b:	eb 01                	jmp    7e <L6470DmxModes::DmxData(unsigned char const*, unsigned int)+0x7e>
  7d:	90                   	nop
  7e:	c9                   	leave  
  7f:	c3                   	ret    

l6470dmxmodesprint.o:     file format elf64-x86-64


Disassembly of section .text._ZN13L6470DmxModes5PrintEv:

0000000000000000 <L6470DmxModes::Print()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  18:	0f b7 d0             	movzwl %ax,%edx
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  23:	0f b7 c0             	movzwl %ax,%eax
  26:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  2a:	8b 49 04             	mov    0x4(%rcx),%ecx
  2d:	89 ce                	mov    %ecx,%esi
  2f:	89 d1                	mov    %edx,%ecx
  31:	89 c2                	mov    %eax,%edx
  33:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3a <L6470DmxModes::Print()+0x3a>
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	b8 00 00 00 00       	mov    $0x0,%eax
  42:	e8 00 00 00 00       	call   47 <L6470DmxModes::Print()+0x47>
  47:	90                   	nop
  48:	c9                   	leave  
  49:	c3                   	ret    

l6470paramsconst.o:     file format elf64-x86-64


l6470params.o:     file format elf64-x86-64


Disassembly of section .text._ZN11L6470Params9isMaskSetEj:

0000000000000000 <L6470Params::isMaskSet(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	8b 40 08             	mov    0x8(%rax),%eax
  16:	23 45 f4             	and    -0xc(%rbp),%eax
  19:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  1c:	0f 94 c0             	sete   %al
  1f:	5d                   	pop    %rbp
  20:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder7GetSizeEv:

0000000000000000 <PropertiesBuilder::GetSize()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  14:	84 c0                	test   %al,%al
  16:	74 47                	je     5f <PropertiesBuilder::GetSize()+0x5f>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 10             	mov    (%rax),%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
  27:	0f b7 c0             	movzwl %ax,%eax
  2a:	48 83 e8 01          	sub    $0x1,%rax
  2e:	48 01 d0             	add    %rdx,%rax
  31:	c6 00 7d             	movb   $0x7d,(%rax)
  34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  38:	48 8b 10             	mov    (%rax),%rdx
  3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3f:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
  43:	0f b7 c0             	movzwl %ax,%eax
  46:	48 01 d0             	add    %rdx,%rax
  49:	c6 00 7d             	movb   $0x7d,(%rax)
  4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  50:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
  54:	8d 50 01             	lea    0x1(%rax),%edx
  57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5b:	66 89 50 0a          	mov    %dx,0xa(%rax)
  5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  63:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
  67:	5d                   	pop    %rbp
  68:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIfEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	89 55 ec             	mov    %edx,-0x14(%rbp)
  17:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  1b:	f3 0f 11 45 e8       	movss  %xmm0,-0x18(%rbp)
  20:	44 89 c0             	mov    %r8d,%eax
  23:	44 89 4d d8          	mov    %r9d,-0x28(%rbp)
  27:	88 45 dc             	mov    %al,-0x24(%rbp)
  2a:	80 7d dc 00          	cmpb   $0x0,-0x24(%rbp)
  2e:	75 10                	jne    40 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x40>
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  38:	84 c0                	test   %al,%al
  3a:	0f 84 86 00 00 00    	je     c6 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0xc6>
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  48:	84 c0                	test   %al,%al
  4a:	74 3d                	je     89 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x89>
  4c:	66 0f ef c9          	pxor   %xmm1,%xmm1
  50:	f3 0f 5a 4d e8       	cvtss2sd -0x18(%rbp),%xmm1
  55:	66 48 0f 7e c9       	movq   %xmm1,%rcx
  5a:	8b 75 ec             	mov    -0x14(%rbp),%esi
  5d:	8b 7d d8             	mov    -0x28(%rbp),%edi
  60:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  68:	66 48 0f 6e c1       	movq   %rcx,%xmm0
  6d:	41 89 f8             	mov    %edi,%r8d
  70:	48 89 d1             	mov    %rdx,%rcx
  73:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 7a <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x7a>
  7a:	48 89 c7             	mov    %rax,%rdi
  7d:	b8 01 00 00 00       	mov    $0x1,%eax
  82:	e8 00 00 00 00       	call   87 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x87>
  87:	eb 79                	jmp    102 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x102>
  89:	66 0f ef d2          	pxor   %xmm2,%xmm2
  8d:	f3 0f 5a 55 e8       	cvtss2sd -0x18(%rbp),%xmm2
  92:	66 48 0f 7e d1       	movq   %xmm2,%rcx
  97:	8b 75 ec             	mov    -0x14(%rbp),%esi
  9a:	8b 7d d8             	mov    -0x28(%rbp),%edi
  9d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  a5:	66 48 0f 6e c1       	movq   %rcx,%xmm0
  aa:	41 89 f8             	mov    %edi,%r8d
  ad:	48 89 d1             	mov    %rdx,%rcx
  b0:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # b7 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0xb7>
  b7:	48 89 c7             	mov    %rax,%rdi
  ba:	b8 01 00 00 00       	mov    $0x1,%eax
  bf:	e8 00 00 00 00       	call   c4 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0xc4>
  c4:	eb 3c                	jmp    102 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x102>
  c6:	66 0f ef db          	pxor   %xmm3,%xmm3
  ca:	f3 0f 5a 5d e8       	cvtss2sd -0x18(%rbp),%xmm3
  cf:	66 48 0f 7e d9       	movq   %xmm3,%rcx
  d4:	8b 75 ec             	mov    -0x14(%rbp),%esi
  d7:	8b 7d d8             	mov    -0x28(%rbp),%edi
  da:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  e2:	66 48 0f 6e c1       	movq   %rcx,%xmm0
  e7:	41 89 f8             	mov    %edi,%r8d
  ea:	48 89 d1             	mov    %rdx,%rcx
  ed:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # f4 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0xf4>
  f4:	48 89 c7             	mov    %rax,%rdi
  f7:	b8 01 00 00 00       	mov    $0x1,%eax
  fc:	e8 00 00 00 00       	call   101 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x101>
 101:	90                   	nop
 102:	c9                   	leave  
 103:	c3                   	ret    

Disassembly of section .text._ZN11L6470ParamsC2EP16L6470ParamsStore:

0000000000000000 <L6470Params::L6470Params(L6470ParamsStore*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1c:	48 89 10             	mov    %rdx,(%rax)
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 83 c0 08          	add    $0x8,%rax
  27:	ba 19 00 00 00       	mov    $0x19,%edx
  2c:	be 00 00 00 00       	mov    $0x0,%esi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	call   39 <L6470Params::L6470Params(L6470ParamsStore*)+0x39>
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	48 83 c0 21          	add    $0x21,%rax
  41:	ba 10 00 00 00       	mov    $0x10,%edx
  46:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 4d <L6470Params::L6470Params(L6470ParamsStore*)+0x4d>
  4d:	48 89 ce             	mov    %rcx,%rsi
  50:	48 89 c7             	mov    %rax,%rdi
  53:	e8 00 00 00 00       	call   58 <L6470Params::L6470Params(L6470ParamsStore*)+0x58>
  58:	90                   	nop
  59:	c9                   	leave  
  5a:	c3                   	ret    

Disassembly of section .text._ZN11L6470Params4LoadEj:

0000000000000000 <L6470Params::Load(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  26:	83 c0 30             	add    $0x30,%eax
  29:	89 c2                	mov    %eax,%edx
  2b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  2f:	88 50 26             	mov    %dl,0x26(%rax)
  32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  36:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  3d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  41:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  45:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 4c <L6470Params::Load(unsigned int)+0x4c>
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <L6470Params::Load(unsigned int)+0x57>
  57:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  5b:	48 8d 50 21          	lea    0x21(%rax),%rdx
  5f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	call   6e <L6470Params::Load(unsigned int)+0x6e>
  6e:	84 c0                	test   %al,%al
  70:	74 39                	je     ab <L6470Params::Load(unsigned int)+0xab>
  72:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  76:	48 8b 00             	mov    (%rax),%rax
  79:	48 85 c0             	test   %rax,%rax
  7c:	74 6d                	je     eb <L6470Params::Load(unsigned int)+0xeb>
  7e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  82:	48 8b 00             	mov    (%rax),%rax
  85:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  89:	48 8b 12             	mov    (%rdx),%rdx
  8c:	48 8b 12             	mov    (%rdx),%rdx
  8f:	48 83 c2 10          	add    $0x10,%rdx
  93:	4c 8b 02             	mov    (%rdx),%r8
  96:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  9a:	48 83 c2 08          	add    $0x8,%rdx
  9e:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  a1:	89 ce                	mov    %ecx,%esi
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	41 ff d0             	call   *%r8
  a9:	eb 40                	jmp    eb <L6470Params::Load(unsigned int)+0xeb>
  ab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  af:	48 8b 00             	mov    (%rax),%rax
  b2:	48 85 c0             	test   %rax,%rax
  b5:	74 2d                	je     e4 <L6470Params::Load(unsigned int)+0xe4>
  b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bb:	48 8b 00             	mov    (%rax),%rax
  be:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  c2:	48 8b 12             	mov    (%rdx),%rdx
  c5:	48 8b 12             	mov    (%rdx),%rdx
  c8:	48 83 c2 18          	add    $0x18,%rdx
  cc:	4c 8b 02             	mov    (%rdx),%r8
  cf:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  d3:	48 83 c2 08          	add    $0x8,%rdx
  d7:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  da:	89 ce                	mov    %ecx,%esi
  dc:	48 89 c7             	mov    %rax,%rdi
  df:	41 ff d0             	call   *%r8
  e2:	eb 07                	jmp    eb <L6470Params::Load(unsigned int)+0xeb>
  e4:	bb 00 00 00 00       	mov    $0x0,%ebx
  e9:	eb 05                	jmp    f0 <L6470Params::Load(unsigned int)+0xf0>
  eb:	bb 01 00 00 00       	mov    $0x1,%ebx
  f0:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  f4:	48 89 c7             	mov    %rax,%rdi
  f7:	e8 00 00 00 00       	call   fc <L6470Params::Load(unsigned int)+0xfc>
  fc:	89 d8                	mov    %ebx,%eax
  fe:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 102:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 109:	00 00 
 10b:	74 05                	je     112 <L6470Params::Load(unsigned int)+0x112>
 10d:	e8 00 00 00 00       	call   112 <L6470Params::Load(unsigned int)+0x112>
 112:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 116:	c9                   	leave  
 117:	c3                   	ret    

Disassembly of section .text._ZN11L6470Params4LoadEjPKcj:

0000000000000000 <L6470Params::Load(unsigned int, char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  13:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  17:	89 4d d0             	mov    %ecx,-0x30(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2d:	48 8b 00             	mov    (%rax),%rax
  30:	48 85 c0             	test   %rax,%rax
  33:	74 74                	je     a9 <L6470Params::Load(unsigned int, char const*, unsigned int)+0xa9>
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  40:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  44:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  48:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 4f <L6470Params::Load(unsigned int, char const*, unsigned int)+0x4f>
  4f:	48 89 ce             	mov    %rcx,%rsi
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	call   5a <L6470Params::Load(unsigned int, char const*, unsigned int)+0x5a>
  5a:	8b 55 d0             	mov    -0x30(%rbp),%edx
  5d:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  61:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  65:	48 89 ce             	mov    %rcx,%rsi
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	call   70 <L6470Params::Load(unsigned int, char const*, unsigned int)+0x70>
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	48 8b 00             	mov    (%rax),%rax
  77:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  7b:	48 8b 12             	mov    (%rdx),%rdx
  7e:	48 8b 12             	mov    (%rdx),%rdx
  81:	48 83 c2 10          	add    $0x10,%rdx
  85:	4c 8b 02             	mov    (%rdx),%r8
  88:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8c:	48 83 c2 08          	add    $0x8,%rdx
  90:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  93:	89 ce                	mov    %ecx,%esi
  95:	48 89 c7             	mov    %rax,%rdi
  98:	41 ff d0             	call   *%r8
  9b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  9f:	48 89 c7             	mov    %rax,%rdi
  a2:	e8 00 00 00 00       	call   a7 <L6470Params::Load(unsigned int, char const*, unsigned int)+0xa7>
  a7:	eb 01                	jmp    aa <L6470Params::Load(unsigned int, char const*, unsigned int)+0xaa>
  a9:	90                   	nop
  aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ae:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  b5:	00 00 
  b7:	74 05                	je     be <L6470Params::Load(unsigned int, char const*, unsigned int)+0xbe>
  b9:	e8 00 00 00 00       	call   be <L6470Params::Load(unsigned int, char const*, unsigned int)+0xbe>
  be:	c9                   	leave  
  bf:	c3                   	ret    

Disassembly of section .text._ZN11L6470Params7BuilderEjPK12TL6470ParamsPcjRj:

0000000000000000 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 50          	sub    $0x50,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  13:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  17:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  1b:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
  1f:	4c 89 4d b8          	mov    %r9,-0x48(%rbp)
  23:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2a:	00 00 
  2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  30:	31 c0                	xor    %eax,%eax
  32:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  35:	83 c0 30             	add    $0x30,%eax
  38:	89 c2                	mov    %eax,%edx
  3a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3e:	88 50 26             	mov    %dl,0x26(%rax)
  41:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  46:	74 1e                	je     66 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x66>
  48:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4c:	48 8d 48 08          	lea    0x8(%rax),%rcx
  50:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  54:	ba 19 00 00 00       	mov    $0x19,%edx
  59:	48 89 c6             	mov    %rax,%rsi
  5c:	48 89 cf             	mov    %rcx,%rdi
  5f:	e8 00 00 00 00       	call   64 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x64>
  64:	eb 2b                	jmp    91 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x91>
  66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6a:	48 8b 00             	mov    (%rax),%rax
  6d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  71:	48 8b 12             	mov    (%rdx),%rdx
  74:	48 8b 12             	mov    (%rdx),%rdx
  77:	48 83 c2 18          	add    $0x18,%rdx
  7b:	4c 8b 02             	mov    (%rdx),%r8
  7e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  82:	48 83 c2 08          	add    $0x8,%rdx
  86:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  89:	89 ce                	mov    %ecx,%esi
  8b:	48 89 c7             	mov    %rax,%rdi
  8e:	41 ff d0             	call   *%r8
  91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  95:	48 8d 70 21          	lea    0x21(%rax),%rsi
  99:	8b 4d d0             	mov    -0x30(%rbp),%ecx
  9c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  a0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  a4:	48 89 c7             	mov    %rax,%rdi
  a7:	e8 00 00 00 00       	call   ac <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0xac>
  ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b0:	be 01 00 00 00       	mov    $0x1,%esi
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	call   bd <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0xbd>
  bd:	0f b6 d0             	movzbl %al,%edx
  c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c4:	8b 70 0c             	mov    0xc(%rax),%esi
  c7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  cb:	b9 01 00 00 00       	mov    $0x1,%ecx
  d0:	66 0f 6e c6          	movd   %esi,%xmm0
  d4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # db <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0xdb>
  db:	48 89 c7             	mov    %rax,%rdi
  de:	e8 00 00 00 00       	call   e3 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0xe3>
  e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  e7:	be 02 00 00 00       	mov    $0x2,%esi
  ec:	48 89 c7             	mov    %rax,%rdi
  ef:	e8 00 00 00 00       	call   f4 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0xf4>
  f4:	0f b6 d0             	movzbl %al,%edx
  f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  fb:	8b 70 10             	mov    0x10(%rax),%esi
  fe:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
 102:	b9 01 00 00 00       	mov    $0x1,%ecx
 107:	66 0f 6e c6          	movd   %esi,%xmm0
 10b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 112 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x112>
 112:	48 89 c7             	mov    %rax,%rdi
 115:	e8 00 00 00 00       	call   11a <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x11a>
 11a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 11e:	be 04 00 00 00       	mov    $0x4,%esi
 123:	48 89 c7             	mov    %rax,%rdi
 126:	e8 00 00 00 00       	call   12b <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x12b>
 12b:	0f b6 d0             	movzbl %al,%edx
 12e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 132:	8b 70 14             	mov    0x14(%rax),%esi
 135:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
 139:	b9 01 00 00 00       	mov    $0x1,%ecx
 13e:	66 0f 6e c6          	movd   %esi,%xmm0
 142:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 149 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x149>
 149:	48 89 c7             	mov    %rax,%rdi
 14c:	e8 00 00 00 00       	call   151 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x151>
 151:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 155:	be 08 00 00 00       	mov    $0x8,%esi
 15a:	48 89 c7             	mov    %rax,%rdi
 15d:	e8 00 00 00 00       	call   162 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x162>
 162:	0f b6 d0             	movzbl %al,%edx
 165:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 169:	8b 70 18             	mov    0x18(%rax),%esi
 16c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
 170:	b9 01 00 00 00       	mov    $0x1,%ecx
 175:	66 0f 6e c6          	movd   %esi,%xmm0
 179:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 180 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x180>
 180:	48 89 c7             	mov    %rax,%rdi
 183:	e8 00 00 00 00       	call   188 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x188>
 188:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18c:	be 10 00 00 00       	mov    $0x10,%esi
 191:	48 89 c7             	mov    %rax,%rdi
 194:	e8 00 00 00 00       	call   199 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x199>
 199:	0f b6 c8             	movzbl %al,%ecx
 19c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a0:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
 1a4:	0f b6 d0             	movzbl %al,%edx
 1a7:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
 1ab:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 1b1:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1b8 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x1b8>
 1b8:	48 89 c7             	mov    %rax,%rdi
 1bb:	e8 00 00 00 00       	call   1c0 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x1c0>
 1c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1c4:	be 20 00 00 00       	mov    $0x20,%esi
 1c9:	48 89 c7             	mov    %rax,%rdi
 1cc:	e8 00 00 00 00       	call   1d1 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x1d1>
 1d1:	0f b6 c8             	movzbl %al,%ecx
 1d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1d8:	0f b6 40 1d          	movzbl 0x1d(%rax),%eax
 1dc:	0f b6 d0             	movzbl %al,%edx
 1df:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
 1e3:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 1e9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1f0 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x1f0>
 1f0:	48 89 c7             	mov    %rax,%rdi
 1f3:	e8 00 00 00 00       	call   1f8 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x1f8>
 1f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1fc:	be 40 00 00 00       	mov    $0x40,%esi
 201:	48 89 c7             	mov    %rax,%rdi
 204:	e8 00 00 00 00       	call   209 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x209>
 209:	0f b6 c8             	movzbl %al,%ecx
 20c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 210:	0f b6 40 1e          	movzbl 0x1e(%rax),%eax
 214:	0f b6 d0             	movzbl %al,%edx
 217:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
 21b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 221:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 228 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x228>
 228:	48 89 c7             	mov    %rax,%rdi
 22b:	e8 00 00 00 00       	call   230 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x230>
 230:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 234:	be 80 00 00 00       	mov    $0x80,%esi
 239:	48 89 c7             	mov    %rax,%rdi
 23c:	e8 00 00 00 00       	call   241 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x241>
 241:	0f b6 c8             	movzbl %al,%ecx
 244:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 248:	0f b6 40 1f          	movzbl 0x1f(%rax),%eax
 24c:	0f b6 d0             	movzbl %al,%edx
 24f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
 253:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 259:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 260 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x260>
 260:	48 89 c7             	mov    %rax,%rdi
 263:	e8 00 00 00 00       	call   268 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x268>
 268:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 26c:	be 00 01 00 00       	mov    $0x100,%esi
 271:	48 89 c7             	mov    %rax,%rdi
 274:	e8 00 00 00 00       	call   279 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x279>
 279:	0f b6 c8             	movzbl %al,%ecx
 27c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 280:	0f b6 40 20          	movzbl 0x20(%rax),%eax
 284:	0f b6 d0             	movzbl %al,%edx
 287:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
 28b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 291:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 298 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x298>
 298:	48 89 c7             	mov    %rax,%rdi
 29b:	e8 00 00 00 00       	call   2a0 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x2a0>
 2a0:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
 2a4:	48 89 c7             	mov    %rax,%rdi
 2a7:	e8 00 00 00 00       	call   2ac <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x2ac>
 2ac:	0f b7 d0             	movzwl %ax,%edx
 2af:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 2b3:	89 10                	mov    %edx,(%rax)
 2b5:	90                   	nop
 2b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 2ba:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 2c1:	00 00 
 2c3:	74 05                	je     2ca <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x2ca>
 2c5:	e8 00 00 00 00       	call   2ca <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x2ca>
 2ca:	c9                   	leave  
 2cb:	c3                   	ret    

Disassembly of section .text._ZN11L6470Params4SaveEjPcjRj:

0000000000000000 <L6470Params::Save(unsigned int, char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  17:	89 4d f0             	mov    %ecx,-0x10(%rbp)
  1a:	4c 89 45 e0          	mov    %r8,-0x20(%rbp)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 8b 00             	mov    (%rax),%rax
  25:	48 85 c0             	test   %rax,%rax
  28:	75 0c                	jne    36 <L6470Params::Save(unsigned int, char*, unsigned int, unsigned int&)+0x36>
  2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2e:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  34:	eb 29                	jmp    5f <L6470Params::Save(unsigned int, char*, unsigned int, unsigned int&)+0x5f>
  36:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
  3a:	8b 4d f0             	mov    -0x10(%rbp),%ecx
  3d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  41:	8b 75 f4             	mov    -0xc(%rbp),%esi
  44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  48:	49 89 f9             	mov    %rdi,%r9
  4b:	41 89 c8             	mov    %ecx,%r8d
  4e:	48 89 d1             	mov    %rdx,%rcx
  51:	ba 00 00 00 00       	mov    $0x0,%edx
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	call   5e <L6470Params::Save(unsigned int, char*, unsigned int, unsigned int&)+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leave  
  60:	c3                   	ret    

Disassembly of section .text._ZN11L6470Params16callbackFunctionEPKc:

0000000000000000 <L6470Params::callbackFunction(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
  27:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 32 <L6470Params::callbackFunction(char const*)+0x32>
  32:	48 89 ce             	mov    %rcx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	call   3d <L6470Params::callbackFunction(char const*)+0x3d>
  3d:	85 c0                	test   %eax,%eax
  3f:	0f 94 c0             	sete   %al
  42:	84 c0                	test   %al,%al
  44:	74 26                	je     6c <L6470Params::callbackFunction(char const*)+0x6c>
  46:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
  4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4f:	f3 0f 11 40 0c       	movss  %xmm0,0xc(%rax)
  54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  58:	8b 40 08             	mov    0x8(%rax),%eax
  5b:	83 c8 01             	or     $0x1,%eax
  5e:	89 c2                	mov    %eax,%edx
  60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  64:	89 50 08             	mov    %edx,0x8(%rax)
  67:	e9 31 02 00 00       	jmp    29d <L6470Params::callbackFunction(char const*)+0x29d>
  6c:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
  70:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  74:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 7b <L6470Params::callbackFunction(char const*)+0x7b>
  7b:	48 89 ce             	mov    %rcx,%rsi
  7e:	48 89 c7             	mov    %rax,%rdi
  81:	e8 00 00 00 00       	call   86 <L6470Params::callbackFunction(char const*)+0x86>
  86:	85 c0                	test   %eax,%eax
  88:	0f 94 c0             	sete   %al
  8b:	84 c0                	test   %al,%al
  8d:	74 26                	je     b5 <L6470Params::callbackFunction(char const*)+0xb5>
  8f:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
  94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  98:	f3 0f 11 40 10       	movss  %xmm0,0x10(%rax)
  9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a1:	8b 40 08             	mov    0x8(%rax),%eax
  a4:	83 c8 02             	or     $0x2,%eax
  a7:	89 c2                	mov    %eax,%edx
  a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ad:	89 50 08             	mov    %edx,0x8(%rax)
  b0:	e9 e8 01 00 00       	jmp    29d <L6470Params::callbackFunction(char const*)+0x29d>
  b5:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
  b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  bd:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # c4 <L6470Params::callbackFunction(char const*)+0xc4>
  c4:	48 89 ce             	mov    %rcx,%rsi
  c7:	48 89 c7             	mov    %rax,%rdi
  ca:	e8 00 00 00 00       	call   cf <L6470Params::callbackFunction(char const*)+0xcf>
  cf:	85 c0                	test   %eax,%eax
  d1:	0f 94 c0             	sete   %al
  d4:	84 c0                	test   %al,%al
  d6:	74 26                	je     fe <L6470Params::callbackFunction(char const*)+0xfe>
  d8:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
  dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e1:	f3 0f 11 40 14       	movss  %xmm0,0x14(%rax)
  e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ea:	8b 40 08             	mov    0x8(%rax),%eax
  ed:	83 c8 04             	or     $0x4,%eax
  f0:	89 c2                	mov    %eax,%edx
  f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f6:	89 50 08             	mov    %edx,0x8(%rax)
  f9:	e9 9f 01 00 00       	jmp    29d <L6470Params::callbackFunction(char const*)+0x29d>
  fe:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
 102:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 106:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 10d <L6470Params::callbackFunction(char const*)+0x10d>
 10d:	48 89 ce             	mov    %rcx,%rsi
 110:	48 89 c7             	mov    %rax,%rdi
 113:	e8 00 00 00 00       	call   118 <L6470Params::callbackFunction(char const*)+0x118>
 118:	85 c0                	test   %eax,%eax
 11a:	0f 94 c0             	sete   %al
 11d:	84 c0                	test   %al,%al
 11f:	74 26                	je     147 <L6470Params::callbackFunction(char const*)+0x147>
 121:	f3 0f 10 45 f4       	movss  -0xc(%rbp),%xmm0
 126:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12a:	f3 0f 11 40 18       	movss  %xmm0,0x18(%rax)
 12f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 133:	8b 40 08             	mov    0x8(%rax),%eax
 136:	83 c8 08             	or     $0x8,%eax
 139:	89 c2                	mov    %eax,%edx
 13b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 13f:	89 50 08             	mov    %edx,0x8(%rax)
 142:	e9 56 01 00 00       	jmp    29d <L6470Params::callbackFunction(char const*)+0x29d>
 147:	48 8d 55 f3          	lea    -0xd(%rbp),%rdx
 14b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 14f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 156 <L6470Params::callbackFunction(char const*)+0x156>
 156:	48 89 ce             	mov    %rcx,%rsi
 159:	48 89 c7             	mov    %rax,%rdi
 15c:	e8 00 00 00 00       	call   161 <L6470Params::callbackFunction(char const*)+0x161>
 161:	85 c0                	test   %eax,%eax
 163:	0f 94 c0             	sete   %al
 166:	84 c0                	test   %al,%al
 168:	74 23                	je     18d <L6470Params::callbackFunction(char const*)+0x18d>
 16a:	0f b6 55 f3          	movzbl -0xd(%rbp),%edx
 16e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 172:	88 50 1c             	mov    %dl,0x1c(%rax)
 175:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 179:	8b 40 08             	mov    0x8(%rax),%eax
 17c:	83 c8 10             	or     $0x10,%eax
 17f:	89 c2                	mov    %eax,%edx
 181:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 185:	89 50 08             	mov    %edx,0x8(%rax)
 188:	e9 10 01 00 00       	jmp    29d <L6470Params::callbackFunction(char const*)+0x29d>
 18d:	48 8d 55 f3          	lea    -0xd(%rbp),%rdx
 191:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 195:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 19c <L6470Params::callbackFunction(char const*)+0x19c>
 19c:	48 89 ce             	mov    %rcx,%rsi
 19f:	48 89 c7             	mov    %rax,%rdi
 1a2:	e8 00 00 00 00       	call   1a7 <L6470Params::callbackFunction(char const*)+0x1a7>
 1a7:	85 c0                	test   %eax,%eax
 1a9:	0f 94 c0             	sete   %al
 1ac:	84 c0                	test   %al,%al
 1ae:	74 23                	je     1d3 <L6470Params::callbackFunction(char const*)+0x1d3>
 1b0:	0f b6 55 f3          	movzbl -0xd(%rbp),%edx
 1b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1b8:	88 50 1d             	mov    %dl,0x1d(%rax)
 1bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1bf:	8b 40 08             	mov    0x8(%rax),%eax
 1c2:	83 c8 20             	or     $0x20,%eax
 1c5:	89 c2                	mov    %eax,%edx
 1c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1cb:	89 50 08             	mov    %edx,0x8(%rax)
 1ce:	e9 ca 00 00 00       	jmp    29d <L6470Params::callbackFunction(char const*)+0x29d>
 1d3:	48 8d 55 f3          	lea    -0xd(%rbp),%rdx
 1d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 1db:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1e2 <L6470Params::callbackFunction(char const*)+0x1e2>
 1e2:	48 89 ce             	mov    %rcx,%rsi
 1e5:	48 89 c7             	mov    %rax,%rdi
 1e8:	e8 00 00 00 00       	call   1ed <L6470Params::callbackFunction(char const*)+0x1ed>
 1ed:	85 c0                	test   %eax,%eax
 1ef:	0f 94 c0             	sete   %al
 1f2:	84 c0                	test   %al,%al
 1f4:	74 23                	je     219 <L6470Params::callbackFunction(char const*)+0x219>
 1f6:	0f b6 55 f3          	movzbl -0xd(%rbp),%edx
 1fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1fe:	88 50 1e             	mov    %dl,0x1e(%rax)
 201:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 205:	8b 40 08             	mov    0x8(%rax),%eax
 208:	83 c8 40             	or     $0x40,%eax
 20b:	89 c2                	mov    %eax,%edx
 20d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 211:	89 50 08             	mov    %edx,0x8(%rax)
 214:	e9 84 00 00 00       	jmp    29d <L6470Params::callbackFunction(char const*)+0x29d>
 219:	48 8d 55 f3          	lea    -0xd(%rbp),%rdx
 21d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 221:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 228 <L6470Params::callbackFunction(char const*)+0x228>
 228:	48 89 ce             	mov    %rcx,%rsi
 22b:	48 89 c7             	mov    %rax,%rdi
 22e:	e8 00 00 00 00       	call   233 <L6470Params::callbackFunction(char const*)+0x233>
 233:	85 c0                	test   %eax,%eax
 235:	0f 94 c0             	sete   %al
 238:	84 c0                	test   %al,%al
 23a:	74 1f                	je     25b <L6470Params::callbackFunction(char const*)+0x25b>
 23c:	0f b6 55 f3          	movzbl -0xd(%rbp),%edx
 240:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 244:	88 50 1f             	mov    %dl,0x1f(%rax)
 247:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 24b:	8b 40 08             	mov    0x8(%rax),%eax
 24e:	0c 80                	or     $0x80,%al
 250:	89 c2                	mov    %eax,%edx
 252:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 256:	89 50 08             	mov    %edx,0x8(%rax)
 259:	eb 42                	jmp    29d <L6470Params::callbackFunction(char const*)+0x29d>
 25b:	48 8d 55 f3          	lea    -0xd(%rbp),%rdx
 25f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 263:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 26a <L6470Params::callbackFunction(char const*)+0x26a>
 26a:	48 89 ce             	mov    %rcx,%rsi
 26d:	48 89 c7             	mov    %rax,%rdi
 270:	e8 00 00 00 00       	call   275 <L6470Params::callbackFunction(char const*)+0x275>
 275:	85 c0                	test   %eax,%eax
 277:	0f 94 c0             	sete   %al
 27a:	84 c0                	test   %al,%al
 27c:	74 1f                	je     29d <L6470Params::callbackFunction(char const*)+0x29d>
 27e:	0f b6 55 f3          	movzbl -0xd(%rbp),%edx
 282:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 286:	88 50 20             	mov    %dl,0x20(%rax)
 289:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 28d:	8b 40 08             	mov    0x8(%rax),%eax
 290:	80 cc 01             	or     $0x1,%ah
 293:	89 c2                	mov    %eax,%edx
 295:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 299:	89 50 08             	mov    %edx,0x8(%rax)
 29c:	90                   	nop
 29d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 2a1:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 2a8:	00 00 
 2aa:	74 05                	je     2b1 <L6470Params::callbackFunction(char const*)+0x2b1>
 2ac:	e8 00 00 00 00       	call   2b1 <L6470Params::callbackFunction(char const*)+0x2b1>
 2b1:	c9                   	leave  
 2b2:	c3                   	ret    

Disassembly of section .text._ZN11L6470Params3SetEP5L6470:

0000000000000000 <L6470Params::Set(L6470*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	be 01 00 00 00       	mov    $0x1,%esi
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	call   25 <L6470Params::Set(L6470*)+0x25>
  25:	84 c0                	test   %al,%al
  27:	74 17                	je     40 <L6470Params::Set(L6470*)+0x40>
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	8b 50 0c             	mov    0xc(%rax),%edx
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	66 0f 6e c2          	movd   %edx,%xmm0
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	call   40 <L6470Params::Set(L6470*)+0x40>
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44:	be 02 00 00 00       	mov    $0x2,%esi
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	call   51 <L6470Params::Set(L6470*)+0x51>
  51:	84 c0                	test   %al,%al
  53:	74 17                	je     6c <L6470Params::Set(L6470*)+0x6c>
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	8b 50 10             	mov    0x10(%rax),%edx
  5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  60:	66 0f 6e c2          	movd   %edx,%xmm0
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	call   6c <L6470Params::Set(L6470*)+0x6c>
  6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  70:	be 04 00 00 00       	mov    $0x4,%esi
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	call   7d <L6470Params::Set(L6470*)+0x7d>
  7d:	84 c0                	test   %al,%al
  7f:	74 17                	je     98 <L6470Params::Set(L6470*)+0x98>
  81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  85:	8b 50 14             	mov    0x14(%rax),%edx
  88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8c:	66 0f 6e c2          	movd   %edx,%xmm0
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	call   98 <L6470Params::Set(L6470*)+0x98>
  98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  9c:	be 08 00 00 00       	mov    $0x8,%esi
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	call   a9 <L6470Params::Set(L6470*)+0xa9>
  a9:	84 c0                	test   %al,%al
  ab:	74 17                	je     c4 <L6470Params::Set(L6470*)+0xc4>
  ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b1:	8b 50 18             	mov    0x18(%rax),%edx
  b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  b8:	66 0f 6e c2          	movd   %edx,%xmm0
  bc:	48 89 c7             	mov    %rax,%rdi
  bf:	e8 00 00 00 00       	call   c4 <L6470Params::Set(L6470*)+0xc4>
  c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c8:	be 10 00 00 00       	mov    $0x10,%esi
  cd:	48 89 c7             	mov    %rax,%rdi
  d0:	e8 00 00 00 00       	call   d5 <L6470Params::Set(L6470*)+0xd5>
  d5:	84 c0                	test   %al,%al
  d7:	74 19                	je     f2 <L6470Params::Set(L6470*)+0xf2>
  d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  dd:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  e1:	0f b6 d0             	movzbl %al,%edx
  e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  e8:	89 d6                	mov    %edx,%esi
  ea:	48 89 c7             	mov    %rax,%rdi
  ed:	e8 00 00 00 00       	call   f2 <L6470Params::Set(L6470*)+0xf2>
  f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f6:	be 20 00 00 00       	mov    $0x20,%esi
  fb:	48 89 c7             	mov    %rax,%rdi
  fe:	e8 00 00 00 00       	call   103 <L6470Params::Set(L6470*)+0x103>
 103:	84 c0                	test   %al,%al
 105:	74 19                	je     120 <L6470Params::Set(L6470*)+0x120>
 107:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 10b:	0f b6 40 1d          	movzbl 0x1d(%rax),%eax
 10f:	0f b6 d0             	movzbl %al,%edx
 112:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 116:	89 d6                	mov    %edx,%esi
 118:	48 89 c7             	mov    %rax,%rdi
 11b:	e8 00 00 00 00       	call   120 <L6470Params::Set(L6470*)+0x120>
 120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 124:	be 40 00 00 00       	mov    $0x40,%esi
 129:	48 89 c7             	mov    %rax,%rdi
 12c:	e8 00 00 00 00       	call   131 <L6470Params::Set(L6470*)+0x131>
 131:	84 c0                	test   %al,%al
 133:	74 19                	je     14e <L6470Params::Set(L6470*)+0x14e>
 135:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 139:	0f b6 40 1e          	movzbl 0x1e(%rax),%eax
 13d:	0f b6 d0             	movzbl %al,%edx
 140:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 144:	89 d6                	mov    %edx,%esi
 146:	48 89 c7             	mov    %rax,%rdi
 149:	e8 00 00 00 00       	call   14e <L6470Params::Set(L6470*)+0x14e>
 14e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 152:	be 80 00 00 00       	mov    $0x80,%esi
 157:	48 89 c7             	mov    %rax,%rdi
 15a:	e8 00 00 00 00       	call   15f <L6470Params::Set(L6470*)+0x15f>
 15f:	84 c0                	test   %al,%al
 161:	74 19                	je     17c <L6470Params::Set(L6470*)+0x17c>
 163:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 167:	0f b6 40 1f          	movzbl 0x1f(%rax),%eax
 16b:	0f b6 d0             	movzbl %al,%edx
 16e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 172:	89 d6                	mov    %edx,%esi
 174:	48 89 c7             	mov    %rax,%rdi
 177:	e8 00 00 00 00       	call   17c <L6470Params::Set(L6470*)+0x17c>
 17c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 180:	be 00 01 00 00       	mov    $0x100,%esi
 185:	48 89 c7             	mov    %rax,%rdi
 188:	e8 00 00 00 00       	call   18d <L6470Params::Set(L6470*)+0x18d>
 18d:	84 c0                	test   %al,%al
 18f:	74 19                	je     1aa <L6470Params::Set(L6470*)+0x1aa>
 191:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 195:	0f b6 40 20          	movzbl 0x20(%rax),%eax
 199:	0f b6 d0             	movzbl %al,%edx
 19c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1a0:	89 d6                	mov    %edx,%esi
 1a2:	48 89 c7             	mov    %rax,%rdi
 1a5:	e8 00 00 00 00       	call   1aa <L6470Params::Set(L6470*)+0x1aa>
 1aa:	90                   	nop
 1ab:	c9                   	leave  
 1ac:	c3                   	ret    

Disassembly of section .text._ZN11L6470Params4DumpEv:

0000000000000000 <L6470Params::Dump()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN11L6470Params22staticCallbackFunctionEPvPKc:

0000000000000000 <L6470Params::staticCallbackFunction(void*, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 89 d6             	mov    %rdx,%rsi
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	call   27 <L6470Params::staticCallbackFunction(void*, char const*)+0x27>
  27:	90                   	nop
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIfEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	f3 0f 11 45 cc       	movss  %xmm0,-0x34(%rbp)
  19:	89 d0                	mov    %edx,%eax
  1b:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  1e:	88 45 c8             	mov    %al,-0x38(%rbp)
  21:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  25:	0f b7 50 0a          	movzwl 0xa(%rax),%edx
  29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  31:	66 39 c2             	cmp    %ax,%dx
  34:	72 0a                	jb     40 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)+0x40>
  36:	b8 00 00 00 00       	mov    $0x0,%eax
  3b:	e9 9c 00 00 00       	jmp    dc <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)+0xdc>
  40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  44:	48 8b 10             	mov    (%rax),%rdx
  47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4b:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
  4f:	0f b7 c0             	movzwl %ax,%eax
  52:	48 01 d0             	add    %rdx,%rax
  55:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  59:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  61:	0f b7 d0             	movzwl %ax,%edx
  64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  68:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
  6c:	0f b7 c8             	movzwl %ax,%ecx
  6f:	89 d0                	mov    %edx,%eax
  71:	29 c8                	sub    %ecx,%eax
  73:	48 98                	cltq   
  75:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  79:	0f b6 7d c8          	movzbl -0x38(%rbp),%edi
  7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  81:	41 89 c2             	mov    %eax,%r10d
  84:	44 8b 45 c4          	mov    -0x3c(%rbp),%r8d
  88:	8b 4d cc             	mov    -0x34(%rbp),%ecx
  8b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  93:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  97:	45 89 c1             	mov    %r8d,%r9d
  9a:	41 89 f8             	mov    %edi,%r8d
  9d:	66 0f 6e c1          	movd   %ecx,%xmm0
  a1:	48 89 d1             	mov    %rdx,%rcx
  a4:	44 89 d2             	mov    %r10d,%edx
  a7:	48 89 c7             	mov    %rax,%rdi
  aa:	e8 00 00 00 00       	call   af <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)+0xaf>
  af:	89 45 ec             	mov    %eax,-0x14(%rbp)
  b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b6:	39 45 ec             	cmp    %eax,-0x14(%rbp)
  b9:	7e 07                	jle    c2 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)+0xc2>
  bb:	b8 00 00 00 00       	mov    $0x0,%eax
  c0:	eb 1a                	jmp    dc <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)+0xdc>
  c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c6:	0f b7 50 0a          	movzwl 0xa(%rax),%edx
  ca:	8b 45 ec             	mov    -0x14(%rbp),%eax
  cd:	01 c2                	add    %eax,%edx
  cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d3:	66 89 50 0a          	mov    %dx,0xa(%rax)
  d7:	b8 01 00 00 00       	mov    $0x1,%eax
  dc:	c9                   	leave  
  dd:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIhEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	89 c8                	mov    %ecx,%eax
  16:	44 89 45 c4          	mov    %r8d,-0x3c(%rbp)
  1a:	88 55 cc             	mov    %dl,-0x34(%rbp)
  1d:	88 45 c8             	mov    %al,-0x38(%rbp)
  20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  24:	0f b7 50 0a          	movzwl 0xa(%rax),%edx
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  30:	66 39 c2             	cmp    %ax,%dx
  33:	72 0a                	jb     3f <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x3f>
  35:	b8 00 00 00 00       	mov    $0x0,%eax
  3a:	e9 a2 00 00 00       	jmp    e1 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0xe1>
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43:	48 8b 10             	mov    (%rax),%rdx
  46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4a:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
  4e:	0f b7 c0             	movzwl %ax,%eax
  51:	48 01 d0             	add    %rdx,%rax
  54:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  60:	0f b7 d0             	movzwl %ax,%edx
  63:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  67:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
  6b:	0f b7 c8             	movzwl %ax,%ecx
  6e:	89 d0                	mov    %edx,%eax
  70:	29 c8                	sub    %ecx,%eax
  72:	48 98                	cltq   
  74:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  78:	44 0f b6 45 c8       	movzbl -0x38(%rbp),%r8d
  7d:	0f b6 7d cc          	movzbl -0x34(%rbp),%edi
  81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  85:	41 89 c2             	mov    %eax,%r10d
  88:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  90:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  94:	48 83 ec 08          	sub    $0x8,%rsp
  98:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
  9b:	51                   	push   %rcx
  9c:	45 89 c1             	mov    %r8d,%r9d
  9f:	41 89 f8             	mov    %edi,%r8d
  a2:	48 89 d1             	mov    %rdx,%rcx
  a5:	44 89 d2             	mov    %r10d,%edx
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	call   b0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0xb0>
  b0:	48 83 c4 10          	add    $0x10,%rsp
  b4:	89 45 ec             	mov    %eax,-0x14(%rbp)
  b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  bb:	39 45 ec             	cmp    %eax,-0x14(%rbp)
  be:	7e 07                	jle    c7 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0xc7>
  c0:	b8 00 00 00 00       	mov    $0x0,%eax
  c5:	eb 1a                	jmp    e1 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0xe1>
  c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  cb:	0f b7 50 0a          	movzwl 0xa(%rax),%edx
  cf:	8b 45 ec             	mov    -0x14(%rbp),%eax
  d2:	01 c2                	add    %eax,%edx
  d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d8:	66 89 50 0a          	mov    %dx,0xa(%rax)
  dc:	b8 01 00 00 00       	mov    $0x1,%eax
  e1:	c9                   	leave  
  e2:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIhEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	89 55 ec             	mov    %edx,-0x14(%rbp)
  17:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  1b:	44 89 c0             	mov    %r8d,%eax
  1e:	44 89 ca             	mov    %r9d,%edx
  21:	88 45 e8             	mov    %al,-0x18(%rbp)
  24:	89 d0                	mov    %edx,%eax
  26:	88 45 dc             	mov    %al,-0x24(%rbp)
  29:	80 7d dc 00          	cmpb   $0x0,-0x24(%rbp)
  2d:	75 0c                	jne    3b <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x3b>
  2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  33:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  37:	84 c0                	test   %al,%al
  39:	74 62                	je     9d <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x9d>
  3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3f:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  43:	84 c0                	test   %al,%al
  45:	74 2b                	je     72 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x72>
  47:	0f b6 4d e8          	movzbl -0x18(%rbp),%ecx
  4b:	8b 75 ec             	mov    -0x14(%rbp),%esi
  4e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  56:	41 89 c8             	mov    %ecx,%r8d
  59:	48 89 d1             	mov    %rdx,%rcx
  5c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 63 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x63>
  63:	48 89 c7             	mov    %rax,%rdi
  66:	b8 00 00 00 00       	mov    $0x0,%eax
  6b:	e8 00 00 00 00       	call   70 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x70>
  70:	eb 55                	jmp    c7 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0xc7>
  72:	0f b6 4d e8          	movzbl -0x18(%rbp),%ecx
  76:	8b 75 ec             	mov    -0x14(%rbp),%esi
  79:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  81:	41 89 c8             	mov    %ecx,%r8d
  84:	48 89 d1             	mov    %rdx,%rcx
  87:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 8e <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x8e>
  8e:	48 89 c7             	mov    %rax,%rdi
  91:	b8 00 00 00 00       	mov    $0x0,%eax
  96:	e8 00 00 00 00       	call   9b <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x9b>
  9b:	eb 2a                	jmp    c7 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0xc7>
  9d:	0f b6 4d e8          	movzbl -0x18(%rbp),%ecx
  a1:	8b 75 ec             	mov    -0x14(%rbp),%esi
  a4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  ac:	41 89 c8             	mov    %ecx,%r8d
  af:	48 89 d1             	mov    %rdx,%rcx
  b2:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # b9 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0xb9>
  b9:	48 89 c7             	mov    %rax,%rdi
  bc:	b8 00 00 00 00       	mov    $0x0,%eax
  c1:	e8 00 00 00 00       	call   c6 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0xc6>
  c6:	90                   	nop
  c7:	c9                   	leave  
  c8:	c3                   	ret    

modeparamsconst.o:     file format elf64-x86-64


modeparams.o:     file format elf64-x86-64


Disassembly of section .text._ZNK10ModeParams9isMaskSetEj:

0000000000000000 <ModeParams::isMaskSet(unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	8b 47 08             	mov    0x8(%rdi),%eax
   7:	21 f0                	and    %esi,%eax
   9:	39 f0                	cmp    %esi,%eax
   b:	0f 94 c0             	sete   %al
   e:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder7GetSizeEv:

0000000000000000 <PropertiesBuilder::GetSize()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	80 7f 0c 00          	cmpb   $0x0,0xc(%rdi)
   8:	74 1b                	je     25 <PropertiesBuilder::GetSize()+0x25>
   a:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
   e:	48 8b 17             	mov    (%rdi),%rdx
  11:	c6 44 02 ff 7d       	movb   $0x7d,-0x1(%rdx,%rax,1)
  16:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  1a:	48 8b 17             	mov    (%rdi),%rdx
  1d:	c6 04 02 7d          	movb   $0x7d,(%rdx,%rax,1)
  21:	66 ff 47 0a          	incw   0xa(%rdi)
  25:	66 8b 47 0a          	mov    0xa(%rdi),%ax
  29:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIfEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fb             	mov    %rdi,%r11
   7:	45 89 c2             	mov    %r8d,%r10d
   a:	48 89 f7             	mov    %rsi,%rdi
   d:	45 89 c8             	mov    %r9d,%r8d
  10:	41 8a 43 0c          	mov    0xc(%r11),%al
  14:	89 d6                	mov    %edx,%esi
  16:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  1a:	45 84 d2             	test   %r10b,%r10b
  1d:	75 06                	jne    25 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x25>
  1f:	84 c0                	test   %al,%al
  21:	75 0d                	jne    30 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x30>
  23:	eb 14                	jmp    39 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x39>
  25:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2c <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x2c>
  2c:	84 c0                	test   %al,%al
  2e:	74 10                	je     40 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x40>
  30:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 37 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x37>
  37:	eb 07                	jmp    40 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x40>
  39:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 40 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x40>
  40:	b0 01                	mov    $0x1,%al
  42:	e9 00 00 00 00       	jmp    47 <.LC2+0x33>

Disassembly of section .text._ZN17PropertiesBuilder8add_partIPcEEiS1_jPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fa             	mov    %rdi,%r10
   7:	48 89 f7             	mov    %rsi,%rdi
   a:	89 d6                	mov    %edx,%esi
   c:	41 8a 42 0c          	mov    0xc(%r10),%al
  10:	45 84 c9             	test   %r9b,%r9b
  13:	75 06                	jne    1b <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x1b>
  15:	84 c0                	test   %al,%al
  17:	75 0d                	jne    26 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x26>
  19:	eb 14                	jmp    2f <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x2f>
  1b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 22 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x22>
  22:	84 c0                	test   %al,%al
  24:	74 10                	je     36 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x36>
  26:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x2d>
  2d:	eb 07                	jmp    36 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x36>
  2f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 36 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x36>
  36:	31 c0                	xor    %eax,%eax
  38:	e9 00 00 00 00       	jmp    3d <.LC2+0x29>

Disassembly of section .text._ZN17PropertiesBuilder8add_partIPKcEEiPcjS2_T_bj:

0000000000000000 <int PropertiesBuilder::add_part<char const*>(char*, unsigned int, char const*, char const*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	45 0f b6 c9          	movzbl %r9b,%r9d
   8:	e9 00 00 00 00       	jmp    d <.LC1+0x2>

Disassembly of section .text._ZN10ModeParamsC2EP15ModeParamsStore:

0000000000000000 <ModeParams::ModeParams(ModeParamsStore*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 8d 57 08          	lea    0x8(%rdi),%rdx
   8:	41 54                	push   %r12
   a:	31 c0                	xor    %eax,%eax
   c:	b9 0a 00 00 00       	mov    $0xa,%ecx
  11:	55                   	push   %rbp
  12:	53                   	push   %rbx
  13:	48 89 fb             	mov    %rdi,%rbx
  16:	48 89 37             	mov    %rsi,(%rdi)
  19:	48 89 d7             	mov    %rdx,%rdi
  1c:	f3 ab                	rep stos %eax,%es:(%rdi)
  1e:	c6 43 0c 07          	movb   $0x7,0xc(%rbx)
  22:	bf 10 00 00 00       	mov    $0x10,%edi
  27:	66 c7 43 0d ff ff    	movw   $0xffff,0xd(%rbx)
  2d:	c6 43 1f 01          	movb   $0x1,0x1f(%rbx)
  31:	e8 00 00 00 00       	call   36 <ModeParams::ModeParams(ModeParamsStore*)+0x36>
  36:	0f 10 43 20          	movups 0x20(%rbx),%xmm0
  3a:	bf 18 00 00 00       	mov    $0x18,%edi
  3f:	49 89 c4             	mov    %rax,%r12
  42:	0f 11 00             	movups %xmm0,(%rax)
  45:	e8 00 00 00 00       	call   4a <ModeParams::ModeParams(ModeParamsStore*)+0x4a>
  4a:	4c 89 e6             	mov    %r12,%rsi
  4d:	ba 04 00 00 00       	mov    $0x4,%edx
  52:	48 89 c5             	mov    %rax,%rbp
  55:	48 89 c7             	mov    %rax,%rdi
  58:	e8 00 00 00 00       	call   5d <ModeParams::ModeParams(ModeParamsStore*)+0x5d>
  5d:	48 89 6b 40          	mov    %rbp,0x40(%rbx)
  61:	48 8d 7b 30          	lea    0x30(%rbx),%rdi
  65:	ba 10 00 00 00       	mov    $0x10,%edx
  6a:	5b                   	pop    %rbx
  6b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 72 <ModeParams::ModeParams(ModeParamsStore*)+0x72>
  72:	5d                   	pop    %rbp
  73:	41 5c                	pop    %r12
  75:	e9 00 00 00 00       	jmp    7a <.LC2+0x66>

Disassembly of section .text._ZN10ModeParamsD2Ev:

0000000000000000 <ModeParams::~ModeParams()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 8b 6f 40          	mov    0x40(%rdi),%rbp
   9:	48 85 ed             	test   %rbp,%rbp
   c:	74 11                	je     1f <ModeParams::~ModeParams()+0x1f>
   e:	48 89 ef             	mov    %rbp,%rdi
  11:	e8 00 00 00 00       	call   16 <ModeParams::~ModeParams()+0x16>
  16:	48 89 ef             	mov    %rbp,%rdi
  19:	5d                   	pop    %rbp
  1a:	e9 00 00 00 00       	jmp    1f <ModeParams::~ModeParams()+0x1f>
  1f:	5d                   	pop    %rbp
  20:	c3                   	ret    

Disassembly of section .text._ZN10ModeParams4LoadEj:

0000000000000000 <ModeParams::Load(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	48 89 fa             	mov    %rdi,%rdx
   9:	41 89 f5             	mov    %esi,%r13d
   c:	41 54                	push   %r12
   e:	55                   	push   %rbp
   f:	53                   	push   %rbx
  10:	48 89 fb             	mov    %rdi,%rbx
  13:	48 83 ec 28          	sub    $0x28,%rsp
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  25:	31 c0                	xor    %eax,%eax
  27:	8d 46 30             	lea    0x30(%rsi),%eax
  2a:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  31:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  36:	88 47 35             	mov    %al,0x35(%rdi)
  39:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 40 <ModeParams::Load(unsigned int)+0x40>
  40:	48 89 ef             	mov    %rbp,%rdi
  43:	e8 00 00 00 00       	call   48 <ModeParams::Load(unsigned int)+0x48>
  48:	48 89 ef             	mov    %rbp,%rdi
  4b:	48 8d 73 30          	lea    0x30(%rbx),%rsi
  4f:	e8 00 00 00 00       	call   54 <ModeParams::Load(unsigned int)+0x54>
  54:	48 8b 3b             	mov    (%rbx),%rdi
  57:	84 c0                	test   %al,%al
  59:	41 89 c4             	mov    %eax,%r12d
  5c:	74 14                	je     72 <ModeParams::Load(unsigned int)+0x72>
  5e:	48 85 ff             	test   %rdi,%rdi
  61:	74 24                	je     87 <ModeParams::Load(unsigned int)+0x87>
  63:	48 8b 07             	mov    (%rdi),%rax
  66:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  6a:	44 89 ee             	mov    %r13d,%esi
  6d:	ff 50 10             	call   *0x10(%rax)
  70:	eb 15                	jmp    87 <ModeParams::Load(unsigned int)+0x87>
  72:	48 85 ff             	test   %rdi,%rdi
  75:	74 10                	je     87 <ModeParams::Load(unsigned int)+0x87>
  77:	48 8b 07             	mov    (%rdi),%rax
  7a:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  7e:	44 89 ee             	mov    %r13d,%esi
  81:	41 b4 01             	mov    $0x1,%r12b
  84:	ff 50 18             	call   *0x18(%rax)
  87:	48 89 ef             	mov    %rbp,%rdi
  8a:	e8 00 00 00 00       	call   8f <ModeParams::Load(unsigned int)+0x8f>
  8f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  94:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  9b:	00 00 
  9d:	74 05                	je     a4 <ModeParams::Load(unsigned int)+0xa4>
  9f:	e8 00 00 00 00       	call   a4 <ModeParams::Load(unsigned int)+0xa4>
  a4:	48 83 c4 28          	add    $0x28,%rsp
  a8:	44 89 e0             	mov    %r12d,%eax
  ab:	5b                   	pop    %rbx
  ac:	5d                   	pop    %rbp
  ad:	41 5c                	pop    %r12
  af:	41 5d                	pop    %r13
  b1:	c3                   	ret    

Disassembly of section .text._ZN10ModeParams4LoadEjPKcj:

0000000000000000 <ModeParams::Load(unsigned int, char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 55                	push   %r13
   8:	41 54                	push   %r12
   a:	55                   	push   %rbp
   b:	53                   	push   %rbx
   c:	48 83 ec 20          	sub    $0x20,%rsp
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  24:	74 50                	je     76 <ModeParams::Load(unsigned int, char const*, unsigned int)+0x76>
  26:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  2d:	41 89 ce             	mov    %ecx,%r14d
  30:	48 89 fb             	mov    %rdi,%rbx
  33:	41 89 f4             	mov    %esi,%r12d
  36:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  3b:	49 89 d5             	mov    %rdx,%r13
  3e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 45 <ModeParams::Load(unsigned int, char const*, unsigned int)+0x45>
  45:	48 89 fa             	mov    %rdi,%rdx
  48:	48 89 ef             	mov    %rbp,%rdi
  4b:	e8 00 00 00 00       	call   50 <ModeParams::Load(unsigned int, char const*, unsigned int)+0x50>
  50:	44 89 f2             	mov    %r14d,%edx
  53:	4c 89 ee             	mov    %r13,%rsi
  56:	48 89 ef             	mov    %rbp,%rdi
  59:	e8 00 00 00 00       	call   5e <ModeParams::Load(unsigned int, char const*, unsigned int)+0x5e>
  5e:	48 8b 3b             	mov    (%rbx),%rdi
  61:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  65:	44 89 e6             	mov    %r12d,%esi
  68:	48 8b 07             	mov    (%rdi),%rax
  6b:	ff 50 10             	call   *0x10(%rax)
  6e:	48 89 ef             	mov    %rbp,%rdi
  71:	e8 00 00 00 00       	call   76 <ModeParams::Load(unsigned int, char const*, unsigned int)+0x76>
  76:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  7b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  82:	00 00 
  84:	74 05                	je     8b <ModeParams::Load(unsigned int, char const*, unsigned int)+0x8b>
  86:	e8 00 00 00 00       	call   8b <ModeParams::Load(unsigned int, char const*, unsigned int)+0x8b>
  8b:	48 83 c4 20          	add    $0x20,%rsp
  8f:	5b                   	pop    %rbx
  90:	5d                   	pop    %rbp
  91:	41 5c                	pop    %r12
  93:	41 5d                	pop    %r13
  95:	41 5e                	pop    %r14
  97:	c3                   	ret    

Disassembly of section .text._ZN10ModeParams16callbackFunctionEPKc:

0000000000000000 <ModeParams::callbackFunction(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 57                	push   %r15
   6:	41 56                	push   %r14
   8:	41 55                	push   %r13
   a:	41 54                	push   %r12
   c:	55                   	push   %rbp
   d:	48 89 f5             	mov    %rsi,%rbp
  10:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 17 <ModeParams::callbackFunction(char const*)+0x17>
  17:	53                   	push   %rbx
  18:	48 89 fb             	mov    %rdi,%rbx
  1b:	48 89 ef             	mov    %rbp,%rdi
  1e:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
  25:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2c:	00 00 
  2e:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
  35:	00 
  36:	31 c0                	xor    %eax,%eax
  38:	4c 8d 74 24 09       	lea    0x9(%rsp),%r14
  3d:	4c 89 f2             	mov    %r14,%rdx
  40:	e8 00 00 00 00       	call   45 <ModeParams::callbackFunction(char const*)+0x45>
  45:	85 c0                	test   %eax,%eax
  47:	75 18                	jne    61 <ModeParams::callbackFunction(char const*)+0x61>
  49:	8a 44 24 09          	mov    0x9(%rsp),%al
  4d:	3c 06                	cmp    $0x6,%al
  4f:	0f 87 fc 01 00 00    	ja     251 <ModeParams::callbackFunction(char const*)+0x251>
  55:	83 4b 08 01          	orl    $0x1,0x8(%rbx)
  59:	88 43 0c             	mov    %al,0xc(%rbx)
  5c:	e9 f0 01 00 00       	jmp    251 <ModeParams::callbackFunction(char const*)+0x251>
  61:	48 8d 54 24 0a       	lea    0xa(%rsp),%rdx
  66:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6d <ModeParams::callbackFunction(char const*)+0x6d>
  6d:	48 89 ef             	mov    %rbp,%rdi
  70:	e8 00 00 00 00       	call   75 <ModeParams::callbackFunction(char const*)+0x75>
  75:	85 c0                	test   %eax,%eax
  77:	75 20                	jne    99 <ModeParams::callbackFunction(char const*)+0x99>
  79:	66 8b 44 24 0a       	mov    0xa(%rsp),%ax
  7e:	8d 50 ff             	lea    -0x1(%rax),%edx
  81:	66 81 fa ff 01       	cmp    $0x1ff,%dx
  86:	0f 87 c5 01 00 00    	ja     251 <ModeParams::callbackFunction(char const*)+0x251>
  8c:	83 4b 08 02          	orl    $0x2,0x8(%rbx)
  90:	66 89 43 0d          	mov    %ax,0xd(%rbx)
  94:	e9 b8 01 00 00       	jmp    251 <ModeParams::callbackFunction(char const*)+0x251>
  99:	4c 8d 6c 24 10       	lea    0x10(%rsp),%r13
  9e:	4c 8d 64 24 18       	lea    0x18(%rsp),%r12
  a3:	48 89 ef             	mov    %rbp,%rdi
  a6:	c7 44 24 10 7f 00 00 	movl   $0x7f,0x10(%rsp)
  ad:	00 
  ae:	4c 89 e9             	mov    %r13,%rcx
  b1:	4c 89 e2             	mov    %r12,%rdx
  b4:	4c 8d 7c 24 14       	lea    0x14(%rsp),%r15
  b9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # c0 <ModeParams::callbackFunction(char const*)+0xc0>
  c0:	e8 00 00 00 00       	call   c5 <ModeParams::callbackFunction(char const*)+0xc5>
  c5:	85 c0                	test   %eax,%eax
  c7:	75 2a                	jne    f3 <ModeParams::callbackFunction(char const*)+0xf3>
  c9:	8b 44 24 10          	mov    0x10(%rsp),%eax
  cd:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
  d1:	4c 89 fa             	mov    %r15,%rdx
  d4:	4c 89 e6             	mov    %r12,%rsi
  d7:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%rsp)
  de:	00 
  df:	c6 44 04 18 00       	movb   $0x0,0x18(%rsp,%rax,1)
  e4:	e8 00 00 00 00       	call   e9 <ModeParams::callbackFunction(char const*)+0xe9>
  e9:	8b 44 24 14          	mov    0x14(%rsp),%eax
  ed:	c1 e0 1c             	shl    $0x1c,%eax
  f0:	09 43 08             	or     %eax,0x8(%rbx)
  f3:	4c 89 fa             	mov    %r15,%rdx
  f6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # fd <ModeParams::callbackFunction(char const*)+0xfd>
  fd:	48 89 ef             	mov    %rbp,%rdi
 100:	e8 00 00 00 00       	call   105 <ModeParams::callbackFunction(char const*)+0x105>
 105:	85 c0                	test   %eax,%eax
 107:	75 10                	jne    119 <ModeParams::callbackFunction(char const*)+0x119>
 109:	8b 44 24 14          	mov    0x14(%rsp),%eax
 10d:	83 4b 08 04          	orl    $0x4,0x8(%rbx)
 111:	89 43 0f             	mov    %eax,0xf(%rbx)
 114:	e9 38 01 00 00       	jmp    251 <ModeParams::callbackFunction(char const*)+0x251>
 119:	4c 89 e9             	mov    %r13,%rcx
 11c:	4c 89 e2             	mov    %r12,%rdx
 11f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 126 <ModeParams::callbackFunction(char const*)+0x126>
 126:	48 89 ef             	mov    %rbp,%rdi
 129:	c7 44 24 10 05 00 00 	movl   $0x5,0x10(%rsp)
 130:	00 
 131:	e8 00 00 00 00       	call   136 <ModeParams::callbackFunction(char const*)+0x136>
 136:	85 c0                	test   %eax,%eax
 138:	75 57                	jne    191 <ModeParams::callbackFunction(char const*)+0x191>
 13a:	8b 44 24 10          	mov    0x10(%rsp),%eax
 13e:	83 f8 04             	cmp    $0x4,%eax
 141:	75 21                	jne    164 <ModeParams::callbackFunction(char const*)+0x164>
 143:	ba 04 00 00 00       	mov    $0x4,%edx
 148:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 14f <ModeParams::callbackFunction(char const*)+0x14f>
 14f:	4c 89 e7             	mov    %r12,%rdi
 152:	e8 00 00 00 00       	call   157 <ModeParams::callbackFunction(char const*)+0x157>
 157:	85 c0                	test   %eax,%eax
 159:	75 36                	jne    191 <ModeParams::callbackFunction(char const*)+0x191>
 15b:	c7 43 13 08 00 00 00 	movl   $0x8,0x13(%rbx)
 162:	eb 24                	jmp    188 <ModeParams::callbackFunction(char const*)+0x188>
 164:	83 f8 05             	cmp    $0x5,%eax
 167:	75 28                	jne    191 <ModeParams::callbackFunction(char const*)+0x191>
 169:	ba 05 00 00 00       	mov    $0x5,%edx
 16e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 175 <ModeParams::callbackFunction(char const*)+0x175>
 175:	4c 89 e7             	mov    %r12,%rdi
 178:	e8 00 00 00 00       	call   17d <ModeParams::callbackFunction(char const*)+0x17d>
 17d:	85 c0                	test   %eax,%eax
 17f:	75 10                	jne    191 <ModeParams::callbackFunction(char const*)+0x191>
 181:	c7 43 13 00 00 00 00 	movl   $0x0,0x13(%rbx)
 188:	83 4b 08 08          	orl    $0x8,0x8(%rbx)
 18c:	e9 c0 00 00 00       	jmp    251 <ModeParams::callbackFunction(char const*)+0x251>
 191:	4c 89 e9             	mov    %r13,%rcx
 194:	4c 89 e2             	mov    %r12,%rdx
 197:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 19e <ModeParams::callbackFunction(char const*)+0x19e>
 19e:	48 89 ef             	mov    %rbp,%rdi
 1a1:	c7 44 24 10 07 00 00 	movl   $0x7,0x10(%rsp)
 1a8:	00 
 1a9:	e8 00 00 00 00       	call   1ae <ModeParams::callbackFunction(char const*)+0x1ae>
 1ae:	85 c0                	test   %eax,%eax
 1b0:	75 51                	jne    203 <ModeParams::callbackFunction(char const*)+0x203>
 1b2:	83 7c 24 10 07       	cmpl   $0x7,0x10(%rsp)
 1b7:	0f 85 94 00 00 00    	jne    251 <ModeParams::callbackFunction(char const*)+0x251>
 1bd:	ba 07 00 00 00       	mov    $0x7,%edx
 1c2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1c9 <ModeParams::callbackFunction(char const*)+0x1c9>
 1c9:	4c 89 e7             	mov    %r12,%rdi
 1cc:	e8 00 00 00 00       	call   1d1 <ModeParams::callbackFunction(char const*)+0x1d1>
 1d1:	85 c0                	test   %eax,%eax
 1d3:	75 09                	jne    1de <ModeParams::callbackFunction(char const*)+0x1de>
 1d5:	c7 43 17 01 00 00 00 	movl   $0x1,0x17(%rbx)
 1dc:	eb 1f                	jmp    1fd <ModeParams::callbackFunction(char const*)+0x1fd>
 1de:	ba 07 00 00 00       	mov    $0x7,%edx
 1e3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1ea <ModeParams::callbackFunction(char const*)+0x1ea>
 1ea:	4c 89 e7             	mov    %r12,%rdi
 1ed:	e8 00 00 00 00       	call   1f2 <ModeParams::callbackFunction(char const*)+0x1f2>
 1f2:	85 c0                	test   %eax,%eax
 1f4:	75 0d                	jne    203 <ModeParams::callbackFunction(char const*)+0x203>
 1f6:	c7 43 17 00 00 00 00 	movl   $0x0,0x17(%rbx)
 1fd:	83 4b 08 10          	orl    $0x10,0x8(%rbx)
 201:	eb 4e                	jmp    251 <ModeParams::callbackFunction(char const*)+0x251>
 203:	48 8d 54 24 0c       	lea    0xc(%rsp),%rdx
 208:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 20f <ModeParams::callbackFunction(char const*)+0x20f>
 20f:	48 89 ef             	mov    %rbp,%rdi
 212:	e8 00 00 00 00       	call   217 <ModeParams::callbackFunction(char const*)+0x217>
 217:	85 c0                	test   %eax,%eax
 219:	75 11                	jne    22c <ModeParams::callbackFunction(char const*)+0x22c>
 21b:	f3 0f 10 44 24 0c    	movss  0xc(%rsp),%xmm0
 221:	83 4b 08 20          	orl    $0x20,0x8(%rbx)
 225:	f3 0f 11 43 1b       	movss  %xmm0,0x1b(%rbx)
 22a:	eb 25                	jmp    251 <ModeParams::callbackFunction(char const*)+0x251>
 22c:	4c 89 f2             	mov    %r14,%rdx
 22f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 236 <ModeParams::callbackFunction(char const*)+0x236>
 236:	48 89 ef             	mov    %rbp,%rdi
 239:	e8 00 00 00 00       	call   23e <ModeParams::callbackFunction(char const*)+0x23e>
 23e:	85 c0                	test   %eax,%eax
 240:	75 0f                	jne    251 <ModeParams::callbackFunction(char const*)+0x251>
 242:	80 7c 24 09 00       	cmpb   $0x0,0x9(%rsp)
 247:	75 08                	jne    251 <ModeParams::callbackFunction(char const*)+0x251>
 249:	83 4b 08 40          	orl    $0x40,0x8(%rbx)
 24d:	c6 43 1f 00          	movb   $0x0,0x1f(%rbx)
 251:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
 258:	00 
 259:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 260:	00 00 
 262:	74 05                	je     269 <ModeParams::callbackFunction(char const*)+0x269>
 264:	e8 00 00 00 00       	call   269 <ModeParams::callbackFunction(char const*)+0x269>
 269:	48 81 c4 a8 00 00 00 	add    $0xa8,%rsp
 270:	5b                   	pop    %rbx
 271:	5d                   	pop    %rbp
 272:	41 5c                	pop    %r12
 274:	41 5d                	pop    %r13
 276:	41 5e                	pop    %r14
 278:	41 5f                	pop    %r15
 27a:	c3                   	ret    

Disassembly of section .text._ZN10ModeParams7BuilderEjPK11TModeParamsPcjRj:

0000000000000000 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 89 f2             	mov    %esi,%r10d
   9:	48 89 d6             	mov    %rdx,%rsi
   c:	45 89 c6             	mov    %r8d,%r14d
   f:	41 55                	push   %r13
  11:	48 8d 57 08          	lea    0x8(%rdi),%rdx
  15:	4d 89 cd             	mov    %r9,%r13
  18:	41 54                	push   %r12
  1a:	49 89 cc             	mov    %rcx,%r12
  1d:	55                   	push   %rbp
  1e:	53                   	push   %rbx
  1f:	48 89 fb             	mov    %rdi,%rbx
  22:	48 83 ec 20          	sub    $0x20,%rsp
  26:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2d:	00 00 
  2f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  34:	31 c0                	xor    %eax,%eax
  36:	41 8d 42 30          	lea    0x30(%r10),%eax
  3a:	88 47 35             	mov    %al,0x35(%rdi)
  3d:	48 85 f6             	test   %rsi,%rsi
  40:	74 0c                	je     4e <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x4e>
  42:	b9 0a 00 00 00       	mov    $0xa,%ecx
  47:	48 89 d7             	mov    %rdx,%rdi
  4a:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  4c:	eb 0c                	jmp    5a <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x5a>
  4e:	48 8b 3f             	mov    (%rdi),%rdi
  51:	44 89 d6             	mov    %r10d,%esi
  54:	48 8b 07             	mov    (%rdi),%rax
  57:	ff 50 18             	call   *0x18(%rax)
  5a:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  5f:	4c 89 e2             	mov    %r12,%rdx
  62:	48 8d 73 30          	lea    0x30(%rbx),%rsi
  66:	44 89 f1             	mov    %r14d,%ecx
  69:	48 89 ef             	mov    %rbp,%rdi
  6c:	e8 00 00 00 00       	call   71 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x71>
  71:	be 01 00 00 00       	mov    $0x1,%esi
  76:	48 89 df             	mov    %rbx,%rdi
  79:	e8 00 00 00 00       	call   7e <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x7e>
  7e:	0f b6 53 0c          	movzbl 0xc(%rbx),%edx
  82:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  88:	48 89 ef             	mov    %rbp,%rdi
  8b:	0f b6 c8             	movzbl %al,%ecx
  8e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 95 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x95>
  95:	e8 00 00 00 00       	call   9a <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x9a>
  9a:	be 02 00 00 00       	mov    $0x2,%esi
  9f:	48 89 df             	mov    %rbx,%rdi
  a2:	e8 00 00 00 00       	call   a7 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0xa7>
  a7:	0f b7 53 0d          	movzwl 0xd(%rbx),%edx
  ab:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  b1:	48 89 ef             	mov    %rbp,%rdi
  b4:	0f b6 c8             	movzbl %al,%ecx
  b7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # be <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0xbe>
  be:	e8 00 00 00 00       	call   c3 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0xc3>
  c3:	44 8b 63 08          	mov    0x8(%rbx),%r12d
  c7:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
  cb:	41 c1 ec 1c          	shr    $0x1c,%r12d
  cf:	44 89 e6             	mov    %r12d,%esi
  d2:	e8 00 00 00 00       	call   d7 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0xd7>
  d7:	31 c9                	xor    %ecx,%ecx
  d9:	45 85 e4             	test   %r12d,%r12d
  dc:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  e2:	0f 95 c1             	setne  %cl
  e5:	48 89 c2             	mov    %rax,%rdx
  e8:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # ef <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0xef>
  ef:	48 89 ef             	mov    %rbp,%rdi
  f2:	e8 00 00 00 00       	call   f7 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0xf7>
  f7:	be 04 00 00 00       	mov    $0x4,%esi
  fc:	48 89 df             	mov    %rbx,%rdi
  ff:	e8 00 00 00 00       	call   104 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x104>
 104:	8b 53 0f             	mov    0xf(%rbx),%edx
 107:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 10d:	48 89 ef             	mov    %rbp,%rdi
 110:	0f b6 c8             	movzbl %al,%ecx
 113:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 11a <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x11a>
 11a:	e8 00 00 00 00       	call   11f <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x11f>
 11f:	be 08 00 00 00       	mov    $0x8,%esi
 124:	48 89 df             	mov    %rbx,%rdi
 127:	e8 00 00 00 00       	call   12c <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x12c>
 12c:	83 7b 13 08          	cmpl   $0x8,0x13(%rbx)
 130:	48 89 ef             	mov    %rbp,%rdi
 133:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13a <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x13a>
 13a:	0f b6 c8             	movzbl %al,%ecx
 13d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 144 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x144>
 144:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 14a:	48 0f 45 d0          	cmovne %rax,%rdx
 14e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 155 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x155>
 155:	e8 00 00 00 00       	call   15a <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x15a>
 15a:	be 10 00 00 00       	mov    $0x10,%esi
 15f:	48 89 df             	mov    %rbx,%rdi
 162:	e8 00 00 00 00       	call   167 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x167>
 167:	83 7b 17 01          	cmpl   $0x1,0x17(%rbx)
 16b:	48 89 ef             	mov    %rbp,%rdi
 16e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 175 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x175>
 175:	0f b6 c8             	movzbl %al,%ecx
 178:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 17f <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x17f>
 17f:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 185:	48 0f 45 d0          	cmovne %rax,%rdx
 189:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 190 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x190>
 190:	e8 00 00 00 00       	call   195 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x195>
 195:	be 20 00 00 00       	mov    $0x20,%esi
 19a:	48 89 df             	mov    %rbx,%rdi
 19d:	e8 00 00 00 00       	call   1a2 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x1a2>
 1a2:	f3 0f 10 43 1b       	movss  0x1b(%rbx),%xmm0
 1a7:	b9 01 00 00 00       	mov    $0x1,%ecx
 1ac:	48 89 ef             	mov    %rbp,%rdi
 1af:	0f b6 d0             	movzbl %al,%edx
 1b2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1b9 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x1b9>
 1b9:	e8 00 00 00 00       	call   1be <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x1be>
 1be:	be 40 00 00 00       	mov    $0x40,%esi
 1c3:	48 89 df             	mov    %rbx,%rdi
 1c6:	e8 00 00 00 00       	call   1cb <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x1cb>
 1cb:	0f b6 53 1f          	movzbl 0x1f(%rbx),%edx
 1cf:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 1d5:	48 89 ef             	mov    %rbp,%rdi
 1d8:	0f b6 c8             	movzbl %al,%ecx
 1db:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1e2 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x1e2>
 1e2:	e8 00 00 00 00       	call   1e7 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x1e7>
 1e7:	48 89 ef             	mov    %rbp,%rdi
 1ea:	e8 00 00 00 00       	call   1ef <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x1ef>
 1ef:	0f b7 c0             	movzwl %ax,%eax
 1f2:	41 89 45 00          	mov    %eax,0x0(%r13)
 1f6:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
 1fb:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 202:	00 00 
 204:	74 05                	je     20b <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x20b>
 206:	e8 00 00 00 00       	call   20b <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x20b>
 20b:	48 83 c4 20          	add    $0x20,%rsp
 20f:	5b                   	pop    %rbx
 210:	5d                   	pop    %rbp
 211:	41 5c                	pop    %r12
 213:	41 5d                	pop    %r13
 215:	41 5e                	pop    %r14
 217:	c3                   	ret    

Disassembly of section .text._ZN10ModeParams4SaveEjPcjRj:

0000000000000000 <ModeParams::Save(unsigned int, char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 3f 00          	cmpq   $0x0,(%rdi)
   8:	4d 89 c1             	mov    %r8,%r9
   b:	75 08                	jne    15 <ModeParams::Save(unsigned int, char*, unsigned int, unsigned int&)+0x15>
   d:	41 c7 00 00 00 00 00 	movl   $0x0,(%r8)
  14:	c3                   	ret    
  15:	41 89 c8             	mov    %ecx,%r8d
  18:	48 89 d1             	mov    %rdx,%rcx
  1b:	31 d2                	xor    %edx,%edx
  1d:	e9 00 00 00 00       	jmp    22 <.LC2+0xe>

Disassembly of section .text._ZN10ModeParams4DumpEv:

0000000000000000 <ModeParams::Dump()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	c3                   	ret    

Disassembly of section .text._ZN10ModeParams11GetSlotInfoEjRN8lightset8SlotInfoE:

0000000000000000 <ModeParams::GetSlotInfo(unsigned int, lightset::SlotInfo&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	83 fe 03             	cmp    $0x3,%esi
   7:	77 13                	ja     1c <ModeParams::GetSlotInfo(unsigned int, lightset::SlotInfo&)+0x1c>
   9:	89 f6                	mov    %esi,%esi
   b:	48 83 c6 04          	add    $0x4,%rsi
   f:	8a 44 b7 12          	mov    0x12(%rdi,%rsi,4),%al
  13:	88 42 02             	mov    %al,0x2(%rdx)
  16:	8b 44 b7 10          	mov    0x10(%rdi,%rsi,4),%eax
  1a:	eb 07                	jmp    23 <ModeParams::GetSlotInfo(unsigned int, lightset::SlotInfo&)+0x23>
  1c:	c6 42 02 00          	movb   $0x0,0x2(%rdx)
  20:	83 c8 ff             	or     $0xffffffff,%eax
  23:	66 89 02             	mov    %ax,(%rdx)
  26:	c3                   	ret    

Disassembly of section .text._ZN10ModeParams22staticCallbackFunctionEPvPKc:

0000000000000000 <ModeParams::staticCallbackFunction(void*, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	e9 00 00 00 00       	jmp    9 <.LC11>

Disassembly of section .text._ZN17PropertiesBuilder3AddIbEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 52                	push   %r10
   8:	49 89 f2             	mov    %rsi,%r10
   b:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 33                	jmp    4f <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x4f>
  1c:	89 d0                	mov    %edx,%eax
  1e:	48 89 fb             	mov    %rdi,%rbx
  21:	0f b7 d6             	movzwl %si,%edx
  24:	48 03 37             	add    (%rdi),%rsi
  27:	57                   	push   %rdi
  28:	29 d5                	sub    %edx,%ebp
  2a:	44 0f b6 c9          	movzbl %cl,%r9d
  2e:	48 89 df             	mov    %rbx,%rdi
  31:	41 50                	push   %r8
  33:	4c 89 d1             	mov    %r10,%rcx
  36:	44 0f b6 c0          	movzbl %al,%r8d
  3a:	89 ea                	mov    %ebp,%edx
  3c:	e8 00 00 00 00       	call   41 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x41>
  41:	41 58                	pop    %r8
  43:	41 59                	pop    %r9
  45:	39 c5                	cmp    %eax,%ebp
  47:	7c cf                	jl     18 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x18>
  49:	66 01 43 0a          	add    %ax,0xa(%rbx)
  4d:	b0 01                	mov    $0x1,%al
  4f:	5a                   	pop    %rdx
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIhEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 52                	push   %r10
   8:	49 89 f2             	mov    %rsi,%r10
   b:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 33                	jmp    4f <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x4f>
  1c:	89 d0                	mov    %edx,%eax
  1e:	48 89 fb             	mov    %rdi,%rbx
  21:	0f b7 d6             	movzwl %si,%edx
  24:	48 03 37             	add    (%rdi),%rsi
  27:	57                   	push   %rdi
  28:	29 d5                	sub    %edx,%ebp
  2a:	44 0f b6 c9          	movzbl %cl,%r9d
  2e:	48 89 df             	mov    %rbx,%rdi
  31:	41 50                	push   %r8
  33:	4c 89 d1             	mov    %r10,%rcx
  36:	44 0f b6 c0          	movzbl %al,%r8d
  3a:	89 ea                	mov    %ebp,%edx
  3c:	e8 00 00 00 00       	call   41 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x41>
  41:	41 58                	pop    %r8
  43:	41 59                	pop    %r9
  45:	39 c5                	cmp    %eax,%ebp
  47:	7c cf                	jl     18 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x18>
  49:	66 01 43 0a          	add    %ax,0xa(%rbx)
  4d:	b0 01                	mov    $0x1,%al
  4f:	5a                   	pop    %rdx
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddItEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 52                	push   %r10
   8:	49 89 f2             	mov    %rsi,%r10
   b:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 33                	jmp    4f <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x4f>
  1c:	89 d0                	mov    %edx,%eax
  1e:	48 89 fb             	mov    %rdi,%rbx
  21:	0f b7 d6             	movzwl %si,%edx
  24:	48 03 37             	add    (%rdi),%rsi
  27:	57                   	push   %rdi
  28:	29 d5                	sub    %edx,%ebp
  2a:	44 0f b6 c9          	movzbl %cl,%r9d
  2e:	48 89 df             	mov    %rbx,%rdi
  31:	41 50                	push   %r8
  33:	4c 89 d1             	mov    %r10,%rcx
  36:	44 0f b7 c0          	movzwl %ax,%r8d
  3a:	89 ea                	mov    %ebp,%edx
  3c:	e8 00 00 00 00       	call   41 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x41>
  41:	41 58                	pop    %r8
  43:	41 59                	pop    %r9
  45:	39 c5                	cmp    %eax,%ebp
  47:	7c cf                	jl     18 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x18>
  49:	66 01 43 0a          	add    %ax,0xa(%rbx)
  4d:	b0 01                	mov    $0x1,%al
  4f:	5a                   	pop    %rdx
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIPKcEEbS2_T_bj:

0000000000000000 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 52                	push   %r10
   8:	49 89 f2             	mov    %rsi,%r10
   b:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 33                	jmp    4f <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x4f>
  1c:	48 89 d0             	mov    %rdx,%rax
  1f:	48 89 fb             	mov    %rdi,%rbx
  22:	0f b7 d6             	movzwl %si,%edx
  25:	48 03 37             	add    (%rdi),%rsi
  28:	57                   	push   %rdi
  29:	29 d5                	sub    %edx,%ebp
  2b:	44 0f b6 c9          	movzbl %cl,%r9d
  2f:	48 89 df             	mov    %rbx,%rdi
  32:	41 50                	push   %r8
  34:	4c 89 d1             	mov    %r10,%rcx
  37:	49 89 c0             	mov    %rax,%r8
  3a:	89 ea                	mov    %ebp,%edx
  3c:	e8 00 00 00 00       	call   41 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x41>
  41:	41 58                	pop    %r8
  43:	41 59                	pop    %r9
  45:	39 c5                	cmp    %eax,%ebp
  47:	7c cf                	jl     18 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x18>
  49:	66 01 43 0a          	add    %ax,0xa(%rbx)
  4d:	b0 01                	mov    $0x1,%al
  4f:	5a                   	pop    %rdx
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIjEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<unsigned int>(char const*, unsigned int, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 52                	push   %r10
   8:	49 89 f2             	mov    %rsi,%r10
   b:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<unsigned int>(char const*, unsigned int, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 32                	jmp    4e <bool PropertiesBuilder::Add<unsigned int>(char const*, unsigned int, bool, unsigned int)+0x4e>
  1c:	89 d0                	mov    %edx,%eax
  1e:	48 89 fb             	mov    %rdi,%rbx
  21:	0f b7 d6             	movzwl %si,%edx
  24:	48 03 37             	add    (%rdi),%rsi
  27:	57                   	push   %rdi
  28:	29 d5                	sub    %edx,%ebp
  2a:	44 0f b6 c9          	movzbl %cl,%r9d
  2e:	48 89 df             	mov    %rbx,%rdi
  31:	41 50                	push   %r8
  33:	4c 89 d1             	mov    %r10,%rcx
  36:	41 89 c0             	mov    %eax,%r8d
  39:	89 ea                	mov    %ebp,%edx
  3b:	e8 00 00 00 00       	call   40 <bool PropertiesBuilder::Add<unsigned int>(char const*, unsigned int, bool, unsigned int)+0x40>
  40:	41 58                	pop    %r8
  42:	41 59                	pop    %r9
  44:	39 c5                	cmp    %eax,%ebp
  46:	7c d0                	jl     18 <bool PropertiesBuilder::Add<unsigned int>(char const*, unsigned int, bool, unsigned int)+0x18>
  48:	66 01 43 0a          	add    %ax,0xa(%rbx)
  4c:	b0 01                	mov    $0x1,%al
  4e:	5a                   	pop    %rdx
  4f:	5b                   	pop    %rbx
  50:	5d                   	pop    %rbp
  51:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIfEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	49 89 f2             	mov    %rsi,%r10
   8:	53                   	push   %rbx
   9:	41 50                	push   %r8
   b:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
   f:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 26                	jmp    42 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)+0x42>
  1c:	0f b7 c6             	movzwl %si,%eax
  1f:	41 89 c9             	mov    %ecx,%r9d
  22:	48 03 37             	add    (%rdi),%rsi
  25:	44 0f b6 c2          	movzbl %dl,%r8d
  29:	29 c5                	sub    %eax,%ebp
  2b:	4c 89 d1             	mov    %r10,%rcx
  2e:	48 89 fb             	mov    %rdi,%rbx
  31:	89 ea                	mov    %ebp,%edx
  33:	e8 00 00 00 00       	call   38 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)+0x38>
  38:	39 c5                	cmp    %eax,%ebp
  3a:	7c dc                	jl     18 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)+0x18>
  3c:	66 01 43 0a          	add    %ax,0xa(%rbx)
  40:	b0 01                	mov    $0x1,%al
  42:	5a                   	pop    %rdx
  43:	5b                   	pop    %rbx
  44:	5d                   	pop    %rbp
  45:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIbEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fa             	mov    %rdi,%r10
   7:	45 0f b6 c0          	movzbl %r8b,%r8d
   b:	48 89 f7             	mov    %rsi,%rdi
   e:	89 d6                	mov    %edx,%esi
  10:	41 8a 42 0c          	mov    0xc(%r10),%al
  14:	45 84 c9             	test   %r9b,%r9b
  17:	75 06                	jne    1f <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x1f>
  19:	84 c0                	test   %al,%al
  1b:	75 0d                	jne    2a <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x2a>
  1d:	eb 14                	jmp    33 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x33>
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x26>
  26:	84 c0                	test   %al,%al
  28:	74 10                	je     3a <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x3a>
  2a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 31 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x31>
  31:	eb 07                	jmp    3a <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x3a>
  33:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x3a>
  3a:	31 c0                	xor    %eax,%eax
  3c:	e9 00 00 00 00       	jmp    41 <.LC2+0x2d>

Disassembly of section .text._ZN17PropertiesBuilder8add_partIhEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fa             	mov    %rdi,%r10
   7:	45 0f b6 c0          	movzbl %r8b,%r8d
   b:	48 89 f7             	mov    %rsi,%rdi
   e:	89 d6                	mov    %edx,%esi
  10:	41 8a 42 0c          	mov    0xc(%r10),%al
  14:	45 84 c9             	test   %r9b,%r9b
  17:	75 06                	jne    1f <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x1f>
  19:	84 c0                	test   %al,%al
  1b:	75 0d                	jne    2a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x2a>
  1d:	eb 14                	jmp    33 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x33>
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x26>
  26:	84 c0                	test   %al,%al
  28:	74 10                	je     3a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x3a>
  2a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 31 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x31>
  31:	eb 07                	jmp    3a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x3a>
  33:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x3a>
  3a:	31 c0                	xor    %eax,%eax
  3c:	e9 00 00 00 00       	jmp    41 <.LC2+0x2d>

Disassembly of section .text._ZN17PropertiesBuilder8add_partItEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fa             	mov    %rdi,%r10
   7:	45 0f b7 c0          	movzwl %r8w,%r8d
   b:	48 89 f7             	mov    %rsi,%rdi
   e:	89 d6                	mov    %edx,%esi
  10:	41 8a 42 0c          	mov    0xc(%r10),%al
  14:	45 84 c9             	test   %r9b,%r9b
  17:	75 06                	jne    1f <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x1f>
  19:	84 c0                	test   %al,%al
  1b:	75 0d                	jne    2a <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x2a>
  1d:	eb 14                	jmp    33 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x33>
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x26>
  26:	84 c0                	test   %al,%al
  28:	74 10                	je     3a <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x3a>
  2a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 31 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x31>
  31:	eb 07                	jmp    3a <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x3a>
  33:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x3a>
  3a:	31 c0                	xor    %eax,%eax
  3c:	e9 00 00 00 00       	jmp    41 <.LC2+0x2d>

Disassembly of section .text._ZN17PropertiesBuilder8add_partIjEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fa             	mov    %rdi,%r10
   7:	48 89 f7             	mov    %rsi,%rdi
   a:	89 d6                	mov    %edx,%esi
   c:	41 8a 42 0c          	mov    0xc(%r10),%al
  10:	45 84 c9             	test   %r9b,%r9b
  13:	75 06                	jne    1b <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x1b>
  15:	84 c0                	test   %al,%al
  17:	75 0d                	jne    26 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x26>
  19:	eb 14                	jmp    2f <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x2f>
  1b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 22 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x22>
  22:	84 c0                	test   %al,%al
  24:	74 10                	je     36 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x36>
  26:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x2d>
  2d:	eb 07                	jmp    36 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x36>
  2f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 36 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x36>
  36:	31 c0                	xor    %eax,%eax
  38:	e9 00 00 00 00       	jmp    3d <.LC2+0x29>

motorparamsconst.o:     file format elf64-x86-64


motorparams.o:     file format elf64-x86-64


Disassembly of section .text._ZNK11MotorParams9isMaskSetEj:

0000000000000000 <MotorParams::isMaskSet(unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	8b 47 08             	mov    0x8(%rdi),%eax
   7:	21 f0                	and    %esi,%eax
   9:	39 f0                	cmp    %esi,%eax
   b:	0f 94 c0             	sete   %al
   e:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder7GetSizeEv:

0000000000000000 <PropertiesBuilder::GetSize()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	80 7f 0c 00          	cmpb   $0x0,0xc(%rdi)
   8:	74 1b                	je     25 <PropertiesBuilder::GetSize()+0x25>
   a:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
   e:	48 8b 17             	mov    (%rdi),%rdx
  11:	c6 44 02 ff 7d       	movb   $0x7d,-0x1(%rdx,%rax,1)
  16:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  1a:	48 8b 17             	mov    (%rdi),%rdx
  1d:	c6 04 02 7d          	movb   $0x7d,(%rdx,%rax,1)
  21:	66 ff 47 0a          	incw   0xa(%rdi)
  25:	66 8b 47 0a          	mov    0xa(%rdi),%ax
  29:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIfEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fb             	mov    %rdi,%r11
   7:	45 89 c2             	mov    %r8d,%r10d
   a:	48 89 f7             	mov    %rsi,%rdi
   d:	45 89 c8             	mov    %r9d,%r8d
  10:	41 8a 43 0c          	mov    0xc(%r11),%al
  14:	89 d6                	mov    %edx,%esi
  16:	f3 0f 5a c0          	cvtss2sd %xmm0,%xmm0
  1a:	45 84 d2             	test   %r10b,%r10b
  1d:	75 06                	jne    25 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x25>
  1f:	84 c0                	test   %al,%al
  21:	75 0d                	jne    30 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x30>
  23:	eb 14                	jmp    39 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x39>
  25:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2c <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x2c>
  2c:	84 c0                	test   %al,%al
  2e:	74 10                	je     40 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x40>
  30:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 37 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x37>
  37:	eb 07                	jmp    40 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x40>
  39:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 40 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x40>
  40:	b0 01                	mov    $0x1,%al
  42:	e9 00 00 00 00       	jmp    47 <.LC2+0x33>

Disassembly of section .text._ZN11MotorParamsC2EP16MotorParamsStore:

0000000000000000 <MotorParams::MotorParams(MotorParamsStore*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 89 37             	mov    %rsi,(%rdi)
   7:	48 8d 77 08          	lea    0x8(%rdi),%rsi
   b:	48 89 fa             	mov    %rdi,%rdx
   e:	b9 06 00 00 00       	mov    $0x6,%ecx
  13:	48 89 f7             	mov    %rsi,%rdi
  16:	31 c0                	xor    %eax,%eax
  18:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1f <MotorParams::MotorParams(MotorParamsStore*)+0x1f>
  1f:	f3 ab                	rep stos %eax,%es:(%rdi)
  21:	c7 42 0c 66 66 e6 3f 	movl   $0x3fe66666,0xc(%rdx)
  28:	48 8d 7a 20          	lea    0x20(%rdx),%rdi
  2c:	ba 10 00 00 00       	mov    $0x10,%edx
  31:	e9 00 00 00 00       	jmp    36 <.LC2+0x22>

Disassembly of section .text._ZN11MotorParams4LoadEj:

0000000000000000 <MotorParams::Load(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	48 89 fa             	mov    %rdi,%rdx
   9:	41 89 f5             	mov    %esi,%r13d
   c:	41 54                	push   %r12
   e:	55                   	push   %rbp
   f:	53                   	push   %rbx
  10:	48 89 fb             	mov    %rdi,%rbx
  13:	48 83 ec 28          	sub    $0x28,%rsp
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  25:	31 c0                	xor    %eax,%eax
  27:	8d 46 30             	lea    0x30(%rsi),%eax
  2a:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  31:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  36:	88 47 25             	mov    %al,0x25(%rdi)
  39:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 40 <MotorParams::Load(unsigned int)+0x40>
  40:	48 89 ef             	mov    %rbp,%rdi
  43:	e8 00 00 00 00       	call   48 <MotorParams::Load(unsigned int)+0x48>
  48:	48 89 ef             	mov    %rbp,%rdi
  4b:	48 8d 73 20          	lea    0x20(%rbx),%rsi
  4f:	e8 00 00 00 00       	call   54 <MotorParams::Load(unsigned int)+0x54>
  54:	48 8b 3b             	mov    (%rbx),%rdi
  57:	84 c0                	test   %al,%al
  59:	41 89 c4             	mov    %eax,%r12d
  5c:	74 14                	je     72 <MotorParams::Load(unsigned int)+0x72>
  5e:	48 85 ff             	test   %rdi,%rdi
  61:	74 24                	je     87 <MotorParams::Load(unsigned int)+0x87>
  63:	48 8b 07             	mov    (%rdi),%rax
  66:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  6a:	44 89 ee             	mov    %r13d,%esi
  6d:	ff 50 10             	call   *0x10(%rax)
  70:	eb 15                	jmp    87 <MotorParams::Load(unsigned int)+0x87>
  72:	48 85 ff             	test   %rdi,%rdi
  75:	74 10                	je     87 <MotorParams::Load(unsigned int)+0x87>
  77:	48 8b 07             	mov    (%rdi),%rax
  7a:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  7e:	44 89 ee             	mov    %r13d,%esi
  81:	41 b4 01             	mov    $0x1,%r12b
  84:	ff 50 18             	call   *0x18(%rax)
  87:	48 89 ef             	mov    %rbp,%rdi
  8a:	e8 00 00 00 00       	call   8f <MotorParams::Load(unsigned int)+0x8f>
  8f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  94:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  9b:	00 00 
  9d:	74 05                	je     a4 <MotorParams::Load(unsigned int)+0xa4>
  9f:	e8 00 00 00 00       	call   a4 <MotorParams::Load(unsigned int)+0xa4>
  a4:	48 83 c4 28          	add    $0x28,%rsp
  a8:	44 89 e0             	mov    %r12d,%eax
  ab:	5b                   	pop    %rbx
  ac:	5d                   	pop    %rbp
  ad:	41 5c                	pop    %r12
  af:	41 5d                	pop    %r13
  b1:	c3                   	ret    

Disassembly of section .text._ZN11MotorParams4LoadEjPKcj:

0000000000000000 <MotorParams::Load(unsigned int, char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 55                	push   %r13
   8:	41 54                	push   %r12
   a:	55                   	push   %rbp
   b:	53                   	push   %rbx
   c:	48 83 ec 20          	sub    $0x20,%rsp
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  24:	74 50                	je     76 <MotorParams::Load(unsigned int, char const*, unsigned int)+0x76>
  26:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  2d:	41 89 ce             	mov    %ecx,%r14d
  30:	48 89 fb             	mov    %rdi,%rbx
  33:	41 89 f4             	mov    %esi,%r12d
  36:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  3b:	49 89 d5             	mov    %rdx,%r13
  3e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 45 <MotorParams::Load(unsigned int, char const*, unsigned int)+0x45>
  45:	48 89 fa             	mov    %rdi,%rdx
  48:	48 89 ef             	mov    %rbp,%rdi
  4b:	e8 00 00 00 00       	call   50 <MotorParams::Load(unsigned int, char const*, unsigned int)+0x50>
  50:	44 89 f2             	mov    %r14d,%edx
  53:	4c 89 ee             	mov    %r13,%rsi
  56:	48 89 ef             	mov    %rbp,%rdi
  59:	e8 00 00 00 00       	call   5e <MotorParams::Load(unsigned int, char const*, unsigned int)+0x5e>
  5e:	48 8b 3b             	mov    (%rbx),%rdi
  61:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  65:	44 89 e6             	mov    %r12d,%esi
  68:	48 8b 07             	mov    (%rdi),%rax
  6b:	ff 50 10             	call   *0x10(%rax)
  6e:	48 89 ef             	mov    %rbp,%rdi
  71:	e8 00 00 00 00       	call   76 <MotorParams::Load(unsigned int, char const*, unsigned int)+0x76>
  76:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  7b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  82:	00 00 
  84:	74 05                	je     8b <MotorParams::Load(unsigned int, char const*, unsigned int)+0x8b>
  86:	e8 00 00 00 00       	call   8b <MotorParams::Load(unsigned int, char const*, unsigned int)+0x8b>
  8b:	48 83 c4 20          	add    $0x20,%rsp
  8f:	5b                   	pop    %rbx
  90:	5d                   	pop    %rbp
  91:	41 5c                	pop    %r12
  93:	41 5d                	pop    %r13
  95:	41 5e                	pop    %r14
  97:	c3                   	ret    

Disassembly of section .text._ZN11MotorParams7BuilderEjPK12TMotorParamsPcjRj:

0000000000000000 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	45 89 c6             	mov    %r8d,%r14d
   9:	4c 8d 47 08          	lea    0x8(%rdi),%r8
   d:	41 55                	push   %r13
   f:	49 89 cd             	mov    %rcx,%r13
  12:	41 54                	push   %r12
  14:	4d 89 cc             	mov    %r9,%r12
  17:	55                   	push   %rbp
  18:	53                   	push   %rbx
  19:	48 89 fb             	mov    %rdi,%rbx
  1c:	48 83 ec 20          	sub    $0x20,%rsp
  20:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  27:	00 00 
  29:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2e:	31 c0                	xor    %eax,%eax
  30:	8d 46 30             	lea    0x30(%rsi),%eax
  33:	88 47 25             	mov    %al,0x25(%rdi)
  36:	48 85 d2             	test   %rdx,%rdx
  39:	74 11                	je     4c <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x4c>
  3b:	0f 10 0a             	movups (%rdx),%xmm1
  3e:	0f 11 4f 08          	movups %xmm1,0x8(%rdi)
  42:	48 8b 42 10          	mov    0x10(%rdx),%rax
  46:	49 89 40 10          	mov    %rax,0x10(%r8)
  4a:	eb 0c                	jmp    58 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x58>
  4c:	48 8b 3f             	mov    (%rdi),%rdi
  4f:	4c 89 c2             	mov    %r8,%rdx
  52:	48 8b 07             	mov    (%rdi),%rax
  55:	ff 50 18             	call   *0x18(%rax)
  58:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  5d:	44 89 f1             	mov    %r14d,%ecx
  60:	48 8d 73 20          	lea    0x20(%rbx),%rsi
  64:	4c 89 ea             	mov    %r13,%rdx
  67:	48 89 ef             	mov    %rbp,%rdi
  6a:	e8 00 00 00 00       	call   6f <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x6f>
  6f:	be 01 00 00 00       	mov    $0x1,%esi
  74:	48 89 df             	mov    %rbx,%rdi
  77:	e8 00 00 00 00       	call   7c <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x7c>
  7c:	f3 0f 10 43 0c       	movss  0xc(%rbx),%xmm0
  81:	b9 01 00 00 00       	mov    $0x1,%ecx
  86:	48 89 ef             	mov    %rbp,%rdi
  89:	0f b6 d0             	movzbl %al,%edx
  8c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 93 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x93>
  93:	e8 00 00 00 00       	call   98 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x98>
  98:	be 02 00 00 00       	mov    $0x2,%esi
  9d:	48 89 df             	mov    %rbx,%rdi
  a0:	e8 00 00 00 00       	call   a5 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0xa5>
  a5:	f3 0f 10 43 10       	movss  0x10(%rbx),%xmm0
  aa:	b9 01 00 00 00       	mov    $0x1,%ecx
  af:	48 89 ef             	mov    %rbp,%rdi
  b2:	0f b6 d0             	movzbl %al,%edx
  b5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # bc <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0xbc>
  bc:	e8 00 00 00 00       	call   c1 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0xc1>
  c1:	be 04 00 00 00       	mov    $0x4,%esi
  c6:	48 89 df             	mov    %rbx,%rdi
  c9:	e8 00 00 00 00       	call   ce <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0xce>
  ce:	f3 0f 10 43 14       	movss  0x14(%rbx),%xmm0
  d3:	b9 01 00 00 00       	mov    $0x1,%ecx
  d8:	48 89 ef             	mov    %rbp,%rdi
  db:	0f b6 d0             	movzbl %al,%edx
  de:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # e5 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0xe5>
  e5:	e8 00 00 00 00       	call   ea <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0xea>
  ea:	be 08 00 00 00       	mov    $0x8,%esi
  ef:	48 89 df             	mov    %rbx,%rdi
  f2:	e8 00 00 00 00       	call   f7 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0xf7>
  f7:	f3 0f 10 43 18       	movss  0x18(%rbx),%xmm0
  fc:	b9 01 00 00 00       	mov    $0x1,%ecx
 101:	48 89 ef             	mov    %rbp,%rdi
 104:	0f b6 d0             	movzbl %al,%edx
 107:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10e <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x10e>
 10e:	e8 00 00 00 00       	call   113 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x113>
 113:	be 10 00 00 00       	mov    $0x10,%esi
 118:	48 89 df             	mov    %rbx,%rdi
 11b:	e8 00 00 00 00       	call   120 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x120>
 120:	f3 0f 10 43 1c       	movss  0x1c(%rbx),%xmm0
 125:	b9 01 00 00 00       	mov    $0x1,%ecx
 12a:	48 89 ef             	mov    %rbp,%rdi
 12d:	0f b6 d0             	movzbl %al,%edx
 130:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 137 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x137>
 137:	e8 00 00 00 00       	call   13c <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x13c>
 13c:	48 89 ef             	mov    %rbp,%rdi
 13f:	e8 00 00 00 00       	call   144 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x144>
 144:	0f b7 c0             	movzwl %ax,%eax
 147:	41 89 04 24          	mov    %eax,(%r12)
 14b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
 150:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 157:	00 00 
 159:	74 05                	je     160 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x160>
 15b:	e8 00 00 00 00       	call   160 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x160>
 160:	48 83 c4 20          	add    $0x20,%rsp
 164:	5b                   	pop    %rbx
 165:	5d                   	pop    %rbp
 166:	41 5c                	pop    %r12
 168:	41 5d                	pop    %r13
 16a:	41 5e                	pop    %r14
 16c:	c3                   	ret    

Disassembly of section .text._ZN11MotorParams4SaveEjPcjRj:

0000000000000000 <MotorParams::Save(unsigned int, char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 3f 00          	cmpq   $0x0,(%rdi)
   8:	4d 89 c1             	mov    %r8,%r9
   b:	75 08                	jne    15 <MotorParams::Save(unsigned int, char*, unsigned int, unsigned int&)+0x15>
   d:	41 c7 00 00 00 00 00 	movl   $0x0,(%r8)
  14:	c3                   	ret    
  15:	41 89 c8             	mov    %ecx,%r8d
  18:	48 89 d1             	mov    %rdx,%rcx
  1b:	31 d2                	xor    %edx,%edx
  1d:	e9 00 00 00 00       	jmp    22 <.LC2+0xe>

Disassembly of section .text._ZN11MotorParams16callbackFunctionEPKc:

0000000000000000 <MotorParams::callbackFunction(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	55                   	push   %rbp
   7:	48 89 f5             	mov    %rsi,%rbp
   a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 11 <MotorParams::callbackFunction(char const*)+0x11>
  11:	53                   	push   %rbx
  12:	48 89 fb             	mov    %rdi,%rbx
  15:	48 89 ef             	mov    %rbp,%rdi
  18:	48 83 ec 10          	sub    $0x10,%rsp
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	4c 8d 64 24 04       	lea    0x4(%rsp),%r12
  31:	4c 89 e2             	mov    %r12,%rdx
  34:	e8 00 00 00 00       	call   39 <MotorParams::callbackFunction(char const*)+0x39>
  39:	85 c0                	test   %eax,%eax
  3b:	75 22                	jne    5f <MotorParams::callbackFunction(char const*)+0x5f>
  3d:	f3 0f 10 44 24 04    	movss  0x4(%rsp),%xmm0
  43:	0f 57 c9             	xorps  %xmm1,%xmm1
  46:	0f 2e c1             	ucomiss %xmm1,%xmm0
  49:	7a 06                	jp     51 <MotorParams::callbackFunction(char const*)+0x51>
  4b:	0f 84 a8 00 00 00    	je     f9 <MotorParams::callbackFunction(char const*)+0xf9>
  51:	83 4b 08 01          	orl    $0x1,0x8(%rbx)
  55:	f3 0f 11 43 0c       	movss  %xmm0,0xc(%rbx)
  5a:	e9 9a 00 00 00       	jmp    f9 <MotorParams::callbackFunction(char const*)+0xf9>
  5f:	4c 89 e2             	mov    %r12,%rdx
  62:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 69 <MotorParams::callbackFunction(char const*)+0x69>
  69:	48 89 ef             	mov    %rbp,%rdi
  6c:	e8 00 00 00 00       	call   71 <MotorParams::callbackFunction(char const*)+0x71>
  71:	85 c0                	test   %eax,%eax
  73:	75 11                	jne    86 <MotorParams::callbackFunction(char const*)+0x86>
  75:	f3 0f 10 44 24 04    	movss  0x4(%rsp),%xmm0
  7b:	83 4b 08 02          	orl    $0x2,0x8(%rbx)
  7f:	f3 0f 11 43 10       	movss  %xmm0,0x10(%rbx)
  84:	eb 73                	jmp    f9 <MotorParams::callbackFunction(char const*)+0xf9>
  86:	4c 89 e2             	mov    %r12,%rdx
  89:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 90 <MotorParams::callbackFunction(char const*)+0x90>
  90:	48 89 ef             	mov    %rbp,%rdi
  93:	e8 00 00 00 00       	call   98 <MotorParams::callbackFunction(char const*)+0x98>
  98:	85 c0                	test   %eax,%eax
  9a:	75 11                	jne    ad <MotorParams::callbackFunction(char const*)+0xad>
  9c:	f3 0f 10 44 24 04    	movss  0x4(%rsp),%xmm0
  a2:	83 4b 08 04          	orl    $0x4,0x8(%rbx)
  a6:	f3 0f 11 43 14       	movss  %xmm0,0x14(%rbx)
  ab:	eb 4c                	jmp    f9 <MotorParams::callbackFunction(char const*)+0xf9>
  ad:	4c 89 e2             	mov    %r12,%rdx
  b0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # b7 <MotorParams::callbackFunction(char const*)+0xb7>
  b7:	48 89 ef             	mov    %rbp,%rdi
  ba:	e8 00 00 00 00       	call   bf <MotorParams::callbackFunction(char const*)+0xbf>
  bf:	85 c0                	test   %eax,%eax
  c1:	75 11                	jne    d4 <MotorParams::callbackFunction(char const*)+0xd4>
  c3:	f3 0f 10 44 24 04    	movss  0x4(%rsp),%xmm0
  c9:	83 4b 08 08          	orl    $0x8,0x8(%rbx)
  cd:	f3 0f 11 43 18       	movss  %xmm0,0x18(%rbx)
  d2:	eb 25                	jmp    f9 <MotorParams::callbackFunction(char const*)+0xf9>
  d4:	4c 89 e2             	mov    %r12,%rdx
  d7:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # de <MotorParams::callbackFunction(char const*)+0xde>
  de:	48 89 ef             	mov    %rbp,%rdi
  e1:	e8 00 00 00 00       	call   e6 <MotorParams::callbackFunction(char const*)+0xe6>
  e6:	85 c0                	test   %eax,%eax
  e8:	75 0f                	jne    f9 <MotorParams::callbackFunction(char const*)+0xf9>
  ea:	83 4b 08 10          	orl    $0x10,0x8(%rbx)
  ee:	f3 0f 10 44 24 04    	movss  0x4(%rsp),%xmm0
  f4:	f3 0f 11 43 1c       	movss  %xmm0,0x1c(%rbx)
  f9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  fe:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 105:	00 00 
 107:	74 05                	je     10e <MotorParams::callbackFunction(char const*)+0x10e>
 109:	e8 00 00 00 00       	call   10e <MotorParams::callbackFunction(char const*)+0x10e>
 10e:	48 83 c4 10          	add    $0x10,%rsp
 112:	5b                   	pop    %rbx
 113:	5d                   	pop    %rbp
 114:	41 5c                	pop    %r12
 116:	c3                   	ret    

Disassembly of section .text._ZN11MotorParams3SetEP5L6470:

0000000000000000 <MotorParams::Set(L6470*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	49 89 f4             	mov    %rsi,%r12
   9:	55                   	push   %rbp
   a:	48 89 fd             	mov    %rdi,%rbp
   d:	41 50                	push   %r8
   f:	e8 00 00 00 00       	call   14 <MotorParams::Set(L6470*)+0x14>
  14:	0f 57 c9             	xorps  %xmm1,%xmm1
  17:	0f 2e c1             	ucomiss %xmm1,%xmm0
  1a:	7a 02                	jp     1e <MotorParams::Set(L6470*)+0x1e>
  1c:	74 1b                	je     39 <MotorParams::Set(L6470*)+0x39>
  1e:	48 89 ef             	mov    %rbp,%rdi
  21:	e8 00 00 00 00       	call   26 <MotorParams::Set(L6470*)+0x26>
  26:	59                   	pop    %rcx
  27:	4c 89 e7             	mov    %r12,%rdi
  2a:	5d                   	pop    %rbp
  2b:	89 c2                	mov    %eax,%edx
  2d:	be 0d 00 00 00       	mov    $0xd,%esi
  32:	41 5c                	pop    %r12
  34:	e9 00 00 00 00       	jmp    39 <MotorParams::Set(L6470*)+0x39>
  39:	58                   	pop    %rax
  3a:	5d                   	pop    %rbp
  3b:	41 5c                	pop    %r12
  3d:	c3                   	ret    

Disassembly of section .text._ZN11MotorParams4DumpEv:

0000000000000000 <MotorParams::Dump()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	c3                   	ret    

Disassembly of section .text._ZN11MotorParams18calcIntersectSpeedEv:

0000000000000000 <MotorParams::calcIntersectSpeed()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	53                   	push   %rbx
   5:	be 08 00 00 00       	mov    $0x8,%esi
   a:	48 89 fb             	mov    %rdi,%rbx
   d:	48 83 ec 10          	sub    $0x10,%rsp
  11:	e8 00 00 00 00       	call   16 <MotorParams::calcIntersectSpeed()+0x16>
  16:	0f 57 c0             	xorps  %xmm0,%xmm0
  19:	84 c0                	test   %al,%al
  1b:	74 44                	je     61 <MotorParams::calcIntersectSpeed()+0x61>
  1d:	be 10 00 00 00       	mov    $0x10,%esi
  22:	48 89 df             	mov    %rbx,%rdi
  25:	f3 0f 11 44 24 0c    	movss  %xmm0,0xc(%rsp)
  2b:	e8 00 00 00 00       	call   30 <MotorParams::calcIntersectSpeed()+0x30>
  30:	0f 57 c0             	xorps  %xmm0,%xmm0
  33:	84 c0                	test   %al,%al
  35:	74 2a                	je     61 <MotorParams::calcIntersectSpeed()+0x61>
  37:	f3 0f 5a 4b 1c       	cvtss2sd 0x1c(%rbx),%xmm1
  3c:	f2 0f 59 0d 00 00 00 	mulsd  0x0(%rip),%xmm1        # 44 <MotorParams::calcIntersectSpeed()+0x44>
  43:	00 
  44:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 4c <MotorParams::calcIntersectSpeed()+0x4c>
  4b:	00 
  4c:	f2 0f 59 0d 00 00 00 	mulsd  0x0(%rip),%xmm1        # 54 <MotorParams::calcIntersectSpeed()+0x54>
  53:	00 
  54:	f3 0f 59 43 18       	mulss  0x18(%rbx),%xmm0
  59:	f2 0f 5a c9          	cvtsd2ss %xmm1,%xmm1
  5d:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  61:	48 83 c4 10          	add    $0x10,%rsp
  65:	5b                   	pop    %rbx
  66:	c3                   	ret    

Disassembly of section .text._ZNK11MotorParams21calcIntersectSpeedRegEf:

0000000000000000 <MotorParams::calcIntersectSpeedReg(float) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	f3 0f 59 05 00 00 00 	mulss  0x0(%rip),%xmm0        # c <MotorParams::calcIntersectSpeedReg(float) const+0xc>
   b:	00 
   c:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
  11:	c3                   	ret    

Disassembly of section .text._ZN11MotorParams22staticCallbackFunctionEPvPKc:

0000000000000000 <MotorParams::staticCallbackFunction(void*, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	e9 00 00 00 00       	jmp    9 <.LC7+0x1>

Disassembly of section .text._ZN17PropertiesBuilder3AddIfEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	49 89 f2             	mov    %rsi,%r10
   8:	53                   	push   %rbx
   9:	41 50                	push   %r8
   b:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
   f:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 26                	jmp    42 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)+0x42>
  1c:	0f b7 c6             	movzwl %si,%eax
  1f:	41 89 c9             	mov    %ecx,%r9d
  22:	48 03 37             	add    (%rdi),%rsi
  25:	44 0f b6 c2          	movzbl %dl,%r8d
  29:	29 c5                	sub    %eax,%ebp
  2b:	4c 89 d1             	mov    %r10,%rcx
  2e:	48 89 fb             	mov    %rdi,%rbx
  31:	89 ea                	mov    %ebp,%edx
  33:	e8 00 00 00 00       	call   38 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)+0x38>
  38:	39 c5                	cmp    %eax,%ebp
  3a:	7c dc                	jl     18 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)+0x18>
  3c:	66 01 43 0a          	add    %ax,0xa(%rbx)
  40:	b0 01                	mov    $0x1,%al
  42:	5a                   	pop    %rdx
  43:	5b                   	pop    %rbx
  44:	5d                   	pop    %rbp
  45:	c3                   	ret    

slushdmx.o:     file format elf64-x86-64


Disassembly of section .text._ZN8LightSetC2Ev:

0000000000000000 <LightSet::LightSet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13 <LightSet::LightSet()+0x13>
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	ret    

Disassembly of section .text._ZN8LightSetD2Ev:

0000000000000000 <LightSet::~LightSet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13 <LightSet::~LightSet()+0x13>
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	ret    

Disassembly of section .text._ZN8LightSetD0Ev:

0000000000000000 <LightSet::~LightSet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <LightSet::~LightSet()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <LightSet::~LightSet()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN8LightSet8BlackoutEb:

0000000000000000 <LightSet::Blackout(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	90                   	nop
  12:	5d                   	pop    %rbp
  13:	c3                   	ret    

Disassembly of section .text._ZN8LightSet6FullOnEv:

0000000000000000 <LightSet::FullOn()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN8LightSet5PrintEv:

0000000000000000 <LightSet::Print()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModes18GetDmxStartAddressEv:

0000000000000000 <L6470DmxModes::GetDmxStartAddress()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  14:	5d                   	pop    %rbp
  15:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModes18SetDmxStartAddressEt:

0000000000000000 <L6470DmxModes::SetDmxStartAddress(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	0f b7 55 f4          	movzwl -0xc(%rbp),%edx
  1a:	66 89 50 08          	mov    %dx,0x8(%rax)
  1e:	90                   	nop
  1f:	5d                   	pop    %rbp
  20:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModes15GetDmxFootPrintEv:

0000000000000000 <L6470DmxModes::GetDmxFootPrint()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  14:	5d                   	pop    %rbp
  15:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmx18GetDmxStartAddressEv:

0000000000000000 <SlushDmx::GetDmxStartAddress()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b7 80 ec 00 00 00 	movzwl 0xec(%rax),%eax
  17:	5d                   	pop    %rbp
  18:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmx15GetDmxFootprintEv:

0000000000000000 <SlushDmx::GetDmxFootprint()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b7 80 ee 00 00 00 	movzwl 0xee(%rax),%eax
  17:	5d                   	pop    %rbp
  18:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmx22staticCallbackFunctionEPvPKc:

0000000000000000 <SlushDmx::staticCallbackFunction(void*, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 89 d6             	mov    %rdx,%rsi
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	call   27 <SlushDmx::staticCallbackFunction(void*, char const*)+0x27>
  27:	90                   	nop
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmx16callbackFunctionEPKc:

0000000000000000 <SlushDmx::callbackFunction(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 8d 55 f1          	lea    -0xf(%rbp),%rdx
  27:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 32 <SlushDmx::callbackFunction(char const*)+0x32>
  32:	48 89 ce             	mov    %rcx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	call   3d <SlushDmx::callbackFunction(char const*)+0x3d>
  3d:	85 c0                	test   %eax,%eax
  3f:	0f 94 c0             	sete   %al
  42:	84 c0                	test   %al,%al
  44:	74 15                	je     5b <SlushDmx::callbackFunction(char const*)+0x5b>
  46:	0f b6 45 f1          	movzbl -0xf(%rbp),%eax
  4a:	84 c0                	test   %al,%al
  4c:	74 0d                	je     5b <SlushDmx::callbackFunction(char const*)+0x5b>
  4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  52:	c6 40 40 01          	movb   $0x1,0x40(%rax)
  56:	e9 68 02 00 00       	jmp    2c3 <SlushDmx::callbackFunction(char const*)+0x2c3>
  5b:	48 8d 55 f2          	lea    -0xe(%rbp),%rdx
  5f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  63:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 6a <SlushDmx::callbackFunction(char const*)+0x6a>
  6a:	48 89 ce             	mov    %rcx,%rsi
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	call   75 <SlushDmx::callbackFunction(char const*)+0x75>
  75:	85 c0                	test   %eax,%eax
  77:	0f 94 c0             	sete   %al
  7a:	84 c0                	test   %al,%al
  7c:	74 1f                	je     9d <SlushDmx::callbackFunction(char const*)+0x9d>
  7e:	0f b7 45 f2          	movzwl -0xe(%rbp),%eax
  82:	66 3d 00 02          	cmp    $0x200,%ax
  86:	0f 87 24 02 00 00    	ja     2b0 <SlushDmx::callbackFunction(char const*)+0x2b0>
  8c:	0f b7 55 f2          	movzwl -0xe(%rbp),%edx
  90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  94:	66 89 50 0c          	mov    %dx,0xc(%rax)
  98:	e9 13 02 00 00       	jmp    2b0 <SlushDmx::callbackFunction(char const*)+0x2b0>
  9d:	48 8d 55 f2          	lea    -0xe(%rbp),%rdx
  a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  a5:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ac <SlushDmx::callbackFunction(char const*)+0xac>
  ac:	48 89 ce             	mov    %rcx,%rsi
  af:	48 89 c7             	mov    %rax,%rdi
  b2:	e8 00 00 00 00       	call   b7 <SlushDmx::callbackFunction(char const*)+0xb7>
  b7:	85 c0                	test   %eax,%eax
  b9:	0f 94 c0             	sete   %al
  bc:	84 c0                	test   %al,%al
  be:	74 1f                	je     df <SlushDmx::callbackFunction(char const*)+0xdf>
  c0:	0f b7 45 f2          	movzwl -0xe(%rbp),%eax
  c4:	66 3d 00 02          	cmp    $0x200,%ax
  c8:	0f 87 e5 01 00 00    	ja     2b3 <SlushDmx::callbackFunction(char const*)+0x2b3>
  ce:	0f b7 55 f2          	movzwl -0xe(%rbp),%edx
  d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d6:	66 89 50 20          	mov    %dx,0x20(%rax)
  da:	e9 d4 01 00 00       	jmp    2b3 <SlushDmx::callbackFunction(char const*)+0x2b3>
  df:	48 8d 55 f2          	lea    -0xe(%rbp),%rdx
  e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  e7:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ee <SlushDmx::callbackFunction(char const*)+0xee>
  ee:	48 89 ce             	mov    %rcx,%rsi
  f1:	48 89 c7             	mov    %rax,%rdi
  f4:	e8 00 00 00 00       	call   f9 <SlushDmx::callbackFunction(char const*)+0xf9>
  f9:	85 c0                	test   %eax,%eax
  fb:	0f 94 c0             	sete   %al
  fe:	84 c0                	test   %al,%al
 100:	74 2c                	je     12e <SlushDmx::callbackFunction(char const*)+0x12e>
 102:	0f b7 45 f2          	movzwl -0xe(%rbp),%eax
 106:	66 85 c0             	test   %ax,%ax
 109:	0f 84 a7 01 00 00    	je     2b6 <SlushDmx::callbackFunction(char const*)+0x2b6>
 10f:	0f b7 45 f2          	movzwl -0xe(%rbp),%eax
 113:	66 83 f8 08          	cmp    $0x8,%ax
 117:	0f 87 99 01 00 00    	ja     2b6 <SlushDmx::callbackFunction(char const*)+0x2b6>
 11d:	0f b7 55 f2          	movzwl -0xe(%rbp),%edx
 121:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 125:	66 89 50 0e          	mov    %dx,0xe(%rax)
 129:	e9 88 01 00 00       	jmp    2b6 <SlushDmx::callbackFunction(char const*)+0x2b6>
 12e:	48 8d 55 f2          	lea    -0xe(%rbp),%rdx
 132:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 136:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 13d <SlushDmx::callbackFunction(char const*)+0x13d>
 13d:	48 89 ce             	mov    %rcx,%rsi
 140:	48 89 c7             	mov    %rax,%rdi
 143:	e8 00 00 00 00       	call   148 <SlushDmx::callbackFunction(char const*)+0x148>
 148:	85 c0                	test   %eax,%eax
 14a:	0f 94 c0             	sete   %al
 14d:	84 c0                	test   %al,%al
 14f:	74 2c                	je     17d <SlushDmx::callbackFunction(char const*)+0x17d>
 151:	0f b7 45 f2          	movzwl -0xe(%rbp),%eax
 155:	66 85 c0             	test   %ax,%ax
 158:	0f 84 5b 01 00 00    	je     2b9 <SlushDmx::callbackFunction(char const*)+0x2b9>
 15e:	0f b7 45 f2          	movzwl -0xe(%rbp),%eax
 162:	66 83 f8 08          	cmp    $0x8,%ax
 166:	0f 87 4d 01 00 00    	ja     2b9 <SlushDmx::callbackFunction(char const*)+0x2b9>
 16c:	0f b7 55 f2          	movzwl -0xe(%rbp),%edx
 170:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 174:	66 89 50 22          	mov    %dx,0x22(%rax)
 178:	e9 3c 01 00 00       	jmp    2b9 <SlushDmx::callbackFunction(char const*)+0x2b9>
 17d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 181:	48 8d 90 e8 00 00 00 	lea    0xe8(%rax),%rdx
 188:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 18c:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 193 <SlushDmx::callbackFunction(char const*)+0x193>
 193:	48 89 ce             	mov    %rcx,%rsi
 196:	48 89 c7             	mov    %rax,%rdi
 199:	e8 00 00 00 00       	call   19e <SlushDmx::callbackFunction(char const*)+0x19e>
 19e:	85 c0                	test   %eax,%eax
 1a0:	0f 94 c0             	sete   %al
 1a3:	84 c0                	test   %al,%al
 1a5:	0f 85 11 01 00 00    	jne    2bc <SlushDmx::callbackFunction(char const*)+0x2bc>
 1ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1af:	48 8d 90 ea 00 00 00 	lea    0xea(%rax),%rdx
 1b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 1ba:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 1c1 <SlushDmx::callbackFunction(char const*)+0x1c1>
 1c1:	48 89 ce             	mov    %rcx,%rsi
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	call   1cc <SlushDmx::callbackFunction(char const*)+0x1cc>
 1cc:	85 c0                	test   %eax,%eax
 1ce:	0f 94 c0             	sete   %al
 1d1:	84 c0                	test   %al,%al
 1d3:	0f 85 e6 00 00 00    	jne    2bf <SlushDmx::callbackFunction(char const*)+0x2bf>
 1d9:	c7 45 f4 80 00 00 00 	movl   $0x80,-0xc(%rbp)
 1e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1e4:	48 8b 50 10          	mov    0x10(%rax),%rdx
 1e8:	48 8d 4d f4          	lea    -0xc(%rbp),%rcx
 1ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 1f0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1f7 <SlushDmx::callbackFunction(char const*)+0x1f7>
 1f7:	48 89 c7             	mov    %rax,%rdi
 1fa:	e8 00 00 00 00       	call   1ff <SlushDmx::callbackFunction(char const*)+0x1ff>
 1ff:	85 c0                	test   %eax,%eax
 201:	0f 94 c0             	sete   %al
 204:	84 c0                	test   %al,%al
 206:	74 1c                	je     224 <SlushDmx::callbackFunction(char const*)+0x224>
 208:	8b 45 f4             	mov    -0xc(%rbp),%eax
 20b:	83 f8 06             	cmp    $0x6,%eax
 20e:	0f 87 ae 00 00 00    	ja     2c2 <SlushDmx::callbackFunction(char const*)+0x2c2>
 214:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 218:	48 8b 40 10          	mov    0x10(%rax),%rax
 21c:	c6 00 00             	movb   $0x0,(%rax)
 21f:	e9 9e 00 00 00       	jmp    2c2 <SlushDmx::callbackFunction(char const*)+0x2c2>
 224:	c7 45 f4 80 00 00 00 	movl   $0x80,-0xc(%rbp)
 22b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 22f:	48 8b 50 28          	mov    0x28(%rax),%rdx
 233:	48 8d 4d f4          	lea    -0xc(%rbp),%rcx
 237:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 23b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 242 <SlushDmx::callbackFunction(char const*)+0x242>
 242:	48 89 c7             	mov    %rax,%rdi
 245:	e8 00 00 00 00       	call   24a <SlushDmx::callbackFunction(char const*)+0x24a>
 24a:	85 c0                	test   %eax,%eax
 24c:	0f 94 c0             	sete   %al
 24f:	84 c0                	test   %al,%al
 251:	74 13                	je     266 <SlushDmx::callbackFunction(char const*)+0x266>
 253:	8b 45 f4             	mov    -0xc(%rbp),%eax
 256:	83 f8 06             	cmp    $0x6,%eax
 259:	77 0b                	ja     266 <SlushDmx::callbackFunction(char const*)+0x266>
 25b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 25f:	48 8b 40 28          	mov    0x28(%rax),%rax
 263:	c6 00 00             	movb   $0x0,(%rax)
 266:	c7 45 f4 80 00 00 00 	movl   $0x80,-0xc(%rbp)
 26d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 271:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
 278:	48 8d 4d f4          	lea    -0xc(%rbp),%rcx
 27c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 280:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 287 <SlushDmx::callbackFunction(char const*)+0x287>
 287:	48 89 c7             	mov    %rax,%rdi
 28a:	e8 00 00 00 00       	call   28f <SlushDmx::callbackFunction(char const*)+0x28f>
 28f:	85 c0                	test   %eax,%eax
 291:	0f 94 c0             	sete   %al
 294:	84 c0                	test   %al,%al
 296:	74 2b                	je     2c3 <SlushDmx::callbackFunction(char const*)+0x2c3>
 298:	8b 45 f4             	mov    -0xc(%rbp),%eax
 29b:	83 f8 06             	cmp    $0x6,%eax
 29e:	77 23                	ja     2c3 <SlushDmx::callbackFunction(char const*)+0x2c3>
 2a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 2a4:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
 2ab:	c6 00 00             	movb   $0x0,(%rax)
 2ae:	eb 13                	jmp    2c3 <SlushDmx::callbackFunction(char const*)+0x2c3>
 2b0:	90                   	nop
 2b1:	eb 10                	jmp    2c3 <SlushDmx::callbackFunction(char const*)+0x2c3>
 2b3:	90                   	nop
 2b4:	eb 0d                	jmp    2c3 <SlushDmx::callbackFunction(char const*)+0x2c3>
 2b6:	90                   	nop
 2b7:	eb 0a                	jmp    2c3 <SlushDmx::callbackFunction(char const*)+0x2c3>
 2b9:	90                   	nop
 2ba:	eb 07                	jmp    2c3 <SlushDmx::callbackFunction(char const*)+0x2c3>
 2bc:	90                   	nop
 2bd:	eb 04                	jmp    2c3 <SlushDmx::callbackFunction(char const*)+0x2c3>
 2bf:	90                   	nop
 2c0:	eb 01                	jmp    2c3 <SlushDmx::callbackFunction(char const*)+0x2c3>
 2c2:	90                   	nop
 2c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 2c7:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 2ce:	00 00 
 2d0:	74 05                	je     2d7 <SlushDmx::callbackFunction(char const*)+0x2d7>
 2d2:	e8 00 00 00 00       	call   2d7 <SlushDmx::callbackFunction(char const*)+0x2d7>
 2d7:	c9                   	leave  
 2d8:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmxC2Eb:

0000000000000000 <SlushDmx::SlushDmx(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	89 f0                	mov    %esi,%eax
  13:	88 45 d4             	mov    %al,-0x2c(%rbp)
  16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	call   22 <SlushDmx::SlushDmx(bool)+0x22>
  22:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 29 <SlushDmx::SlushDmx(bool)+0x29>
  29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2d:	48 89 10             	mov    %rdx,(%rax)
  30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  34:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3c:	c6 40 09 00          	movb   $0x0,0x9(%rax)
  40:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  44:	0f b6 55 d4          	movzbl -0x2c(%rbp),%edx
  48:	88 50 40             	mov    %dl,0x40(%rax)
  4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4f:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%rax)
  56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5a:	66 c7 80 ec 00 00 00 	movw   $0xffff,0xec(%rax)
  61:	ff ff 
  63:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  67:	66 c7 80 ee 00 00 00 	movw   $0x0,0xee(%rax)
  6e:	00 00 
  70:	bf 01 00 00 00       	mov    $0x1,%edi
  75:	e8 00 00 00 00       	call   7a <SlushDmx::SlushDmx(bool)+0x7a>
  7a:	48 89 c3             	mov    %rax,%rbx
  7d:	48 89 df             	mov    %rbx,%rdi
  80:	e8 00 00 00 00       	call   85 <SlushDmx::SlushDmx(bool)+0x85>
  85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  89:	48 89 58 38          	mov    %rbx,0x38(%rax)
  8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  91:	c6 80 e8 00 00 00 07 	movb   $0x7,0xe8(%rax)
  98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9c:	66 c7 80 ea 00 00 00 	movw   $0x0,0xea(%rax)
  a3:	00 00 
  a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a9:	66 c7 40 0c 00 00    	movw   $0x0,0xc(%rax)
  af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b3:	66 c7 40 0e 08 00    	movw   $0x8,0xe(%rax)
  b9:	bf 80 00 00 00       	mov    $0x80,%edi
  be:	e8 00 00 00 00       	call   c3 <SlushDmx::SlushDmx(bool)+0xc3>
  c3:	48 89 c2             	mov    %rax,%rdx
  c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ca:	48 89 50 10          	mov    %rdx,0x10(%rax)
  ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d2:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  d9:	00 
  da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  de:	c6 40 0a 00          	movb   $0x0,0xa(%rax)
  e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  e6:	66 c7 40 20 00 00    	movw   $0x0,0x20(%rax)
  ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f0:	66 c7 40 22 08 00    	movw   $0x8,0x22(%rax)
  f6:	bf 80 00 00 00       	mov    $0x80,%edi
  fb:	e8 00 00 00 00       	call   100 <SlushDmx::SlushDmx(bool)+0x100>
 100:	48 89 c2             	mov    %rax,%rdx
 103:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 107:	48 89 50 28          	mov    %rdx,0x28(%rax)
 10b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 10f:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
 116:	00 
 117:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 11b:	c6 40 0b 00          	movb   $0x0,0xb(%rax)
 11f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
 126:	eb 68                	jmp    190 <SlushDmx::SlushDmx(bool)+0x190>
 128:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12c:	8b 55 e8             	mov    -0x18(%rbp),%edx
 12f:	48 83 c2 08          	add    $0x8,%rdx
 133:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 13a:	00 00 
 13c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 140:	8b 55 e8             	mov    -0x18(%rbp),%edx
 143:	48 83 c2 0c          	add    $0xc,%rdx
 147:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 14e:	00 00 
 150:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 154:	8b 55 e8             	mov    -0x18(%rbp),%edx
 157:	48 83 c2 10          	add    $0x10,%rdx
 15b:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 162:	00 00 
 164:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 168:	8b 55 e8             	mov    -0x18(%rbp),%edx
 16b:	48 83 c2 14          	add    $0x14,%rdx
 16f:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 176:	00 00 
 178:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 17c:	8b 55 e8             	mov    -0x18(%rbp),%edx
 17f:	48 83 c2 18          	add    $0x18,%rdx
 183:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 18a:	00 00 
 18c:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
 190:	83 7d e8 03          	cmpl   $0x3,-0x18(%rbp)
 194:	76 92                	jbe    128 <SlushDmx::SlushDmx(bool)+0x128>
 196:	bf 80 00 00 00       	mov    $0x80,%edi
 19b:	e8 00 00 00 00       	call   1a0 <SlushDmx::SlushDmx(bool)+0x1a0>
 1a0:	48 89 c2             	mov    %rax,%rdx
 1a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a7:	48 89 90 f0 00 00 00 	mov    %rdx,0xf0(%rax)
 1ae:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
 1b5:	eb 3a                	jmp    1f1 <SlushDmx::SlushDmx(bool)+0x1f1>
 1b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1bb:	48 8b 50 10          	mov    0x10(%rax),%rdx
 1bf:	8b 45 ec             	mov    -0x14(%rbp),%eax
 1c2:	48 01 d0             	add    %rdx,%rax
 1c5:	c6 00 00             	movb   $0x0,(%rax)
 1c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1cc:	48 8b 50 28          	mov    0x28(%rax),%rdx
 1d0:	8b 45 ec             	mov    -0x14(%rbp),%eax
 1d3:	48 01 d0             	add    %rdx,%rax
 1d6:	c6 00 00             	movb   $0x0,(%rax)
 1d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1dd:	48 8b 90 f0 00 00 00 	mov    0xf0(%rax),%rdx
 1e4:	8b 45 ec             	mov    -0x14(%rbp),%eax
 1e7:	48 01 d0             	add    %rdx,%rax
 1ea:	c6 00 00             	movb   $0x0,(%rax)
 1ed:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
 1f1:	83 7d ec 7f          	cmpl   $0x7f,-0x14(%rbp)
 1f5:	76 c0                	jbe    1b7 <SlushDmx::SlushDmx(bool)+0x1b7>
 1f7:	90                   	nop
 1f8:	90                   	nop
 1f9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 1fd:	c9                   	leave  
 1fe:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmxD2Ev:

0000000000000000 <SlushDmx::~SlushDmx()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 18 <SlushDmx::~SlushDmx()+0x18>
  18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1c:	48 89 10             	mov    %rdx,(%rax)
  1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  23:	48 8b 40 10          	mov    0x10(%rax),%rax
  27:	48 85 c0             	test   %rax,%rax
  2a:	74 29                	je     55 <SlushDmx::~SlushDmx()+0x55>
  2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  30:	48 8b 40 10          	mov    0x10(%rax),%rax
  34:	48 85 c0             	test   %rax,%rax
  37:	74 10                	je     49 <SlushDmx::~SlushDmx()+0x49>
  39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3d:	48 8b 40 10          	mov    0x10(%rax),%rax
  41:	48 89 c7             	mov    %rax,%rdi
  44:	e8 00 00 00 00       	call   49 <SlushDmx::~SlushDmx()+0x49>
  49:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4d:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  54:	00 
  55:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  59:	48 8b 40 18          	mov    0x18(%rax),%rax
  5d:	48 85 c0             	test   %rax,%rax
  60:	74 29                	je     8b <SlushDmx::~SlushDmx()+0x8b>
  62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  66:	48 8b 40 18          	mov    0x18(%rax),%rax
  6a:	48 85 c0             	test   %rax,%rax
  6d:	74 10                	je     7f <SlushDmx::~SlushDmx()+0x7f>
  6f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  73:	48 8b 40 18          	mov    0x18(%rax),%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	call   7f <SlushDmx::~SlushDmx()+0x7f>
  7f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  83:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  8a:	00 
  8b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8f:	48 8b 40 28          	mov    0x28(%rax),%rax
  93:	48 85 c0             	test   %rax,%rax
  96:	74 29                	je     c1 <SlushDmx::~SlushDmx()+0xc1>
  98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9c:	48 8b 40 28          	mov    0x28(%rax),%rax
  a0:	48 85 c0             	test   %rax,%rax
  a3:	74 10                	je     b5 <SlushDmx::~SlushDmx()+0xb5>
  a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a9:	48 8b 40 28          	mov    0x28(%rax),%rax
  ad:	48 89 c7             	mov    %rax,%rdi
  b0:	e8 00 00 00 00       	call   b5 <SlushDmx::~SlushDmx()+0xb5>
  b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b9:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  c0:	00 
  c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c5:	48 8b 40 30          	mov    0x30(%rax),%rax
  c9:	48 85 c0             	test   %rax,%rax
  cc:	74 29                	je     f7 <SlushDmx::~SlushDmx()+0xf7>
  ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d2:	48 8b 40 30          	mov    0x30(%rax),%rax
  d6:	48 85 c0             	test   %rax,%rax
  d9:	74 10                	je     eb <SlushDmx::~SlushDmx()+0xeb>
  db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  df:	48 8b 40 30          	mov    0x30(%rax),%rax
  e3:	48 89 c7             	mov    %rax,%rdi
  e6:	e8 00 00 00 00       	call   eb <SlushDmx::~SlushDmx()+0xeb>
  eb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ef:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  f6:	00 
  f7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  fe:	e9 b9 01 00 00       	jmp    2bc <SlushDmx::~SlushDmx()+0x2bc>
 103:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 107:	8b 55 ec             	mov    -0x14(%rbp),%edx
 10a:	48 63 d2             	movslq %edx,%rdx
 10d:	48 83 c2 08          	add    $0x8,%rdx
 111:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 116:	48 85 c0             	test   %rax,%rax
 119:	74 3e                	je     159 <SlushDmx::~SlushDmx()+0x159>
 11b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 11f:	8b 55 ec             	mov    -0x14(%rbp),%edx
 122:	48 63 d2             	movslq %edx,%rdx
 125:	48 83 c2 08          	add    $0x8,%rdx
 129:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 12e:	48 85 c0             	test   %rax,%rax
 131:	74 0f                	je     142 <SlushDmx::~SlushDmx()+0x142>
 133:	48 8b 10             	mov    (%rax),%rdx
 136:	48 83 c2 08          	add    $0x8,%rdx
 13a:	48 8b 12             	mov    (%rdx),%rdx
 13d:	48 89 c7             	mov    %rax,%rdi
 140:	ff d2                	call   *%rdx
 142:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 146:	8b 55 ec             	mov    -0x14(%rbp),%edx
 149:	48 63 d2             	movslq %edx,%rdx
 14c:	48 83 c2 08          	add    $0x8,%rdx
 150:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 157:	00 00 
 159:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 15d:	8b 55 ec             	mov    -0x14(%rbp),%edx
 160:	48 63 d2             	movslq %edx,%rdx
 163:	48 83 c2 0c          	add    $0xc,%rdx
 167:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 16c:	48 85 c0             	test   %rax,%rax
 16f:	74 37                	je     1a8 <SlushDmx::~SlushDmx()+0x1a8>
 171:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 175:	8b 55 ec             	mov    -0x14(%rbp),%edx
 178:	48 63 d2             	movslq %edx,%rdx
 17b:	48 83 c2 0c          	add    $0xc,%rdx
 17f:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 184:	48 85 c0             	test   %rax,%rax
 187:	74 08                	je     191 <SlushDmx::~SlushDmx()+0x191>
 189:	48 89 c7             	mov    %rax,%rdi
 18c:	e8 00 00 00 00       	call   191 <SlushDmx::~SlushDmx()+0x191>
 191:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 195:	8b 55 ec             	mov    -0x14(%rbp),%edx
 198:	48 63 d2             	movslq %edx,%rdx
 19b:	48 83 c2 0c          	add    $0xc,%rdx
 19f:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 1a6:	00 00 
 1a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ac:	8b 55 ec             	mov    -0x14(%rbp),%edx
 1af:	48 63 d2             	movslq %edx,%rdx
 1b2:	48 83 c2 10          	add    $0x10,%rdx
 1b6:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 1bb:	48 85 c0             	test   %rax,%rax
 1be:	74 3f                	je     1ff <SlushDmx::~SlushDmx()+0x1ff>
 1c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1c4:	8b 55 ec             	mov    -0x14(%rbp),%edx
 1c7:	48 63 d2             	movslq %edx,%rdx
 1ca:	48 83 c2 10          	add    $0x10,%rdx
 1ce:	48 8b 5c d0 08       	mov    0x8(%rax,%rdx,8),%rbx
 1d3:	48 85 db             	test   %rbx,%rbx
 1d6:	74 10                	je     1e8 <SlushDmx::~SlushDmx()+0x1e8>
 1d8:	48 89 df             	mov    %rbx,%rdi
 1db:	e8 00 00 00 00       	call   1e0 <SlushDmx::~SlushDmx()+0x1e0>
 1e0:	48 89 df             	mov    %rbx,%rdi
 1e3:	e8 00 00 00 00       	call   1e8 <SlushDmx::~SlushDmx()+0x1e8>
 1e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ec:	8b 55 ec             	mov    -0x14(%rbp),%edx
 1ef:	48 63 d2             	movslq %edx,%rdx
 1f2:	48 83 c2 10          	add    $0x10,%rdx
 1f6:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 1fd:	00 00 
 1ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 203:	8b 55 ec             	mov    -0x14(%rbp),%edx
 206:	48 63 d2             	movslq %edx,%rdx
 209:	48 83 c2 14          	add    $0x14,%rdx
 20d:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 212:	48 85 c0             	test   %rax,%rax
 215:	74 3f                	je     256 <SlushDmx::~SlushDmx()+0x256>
 217:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 21b:	8b 55 ec             	mov    -0x14(%rbp),%edx
 21e:	48 63 d2             	movslq %edx,%rdx
 221:	48 83 c2 14          	add    $0x14,%rdx
 225:	48 8b 5c d0 08       	mov    0x8(%rax,%rdx,8),%rbx
 22a:	48 85 db             	test   %rbx,%rbx
 22d:	74 10                	je     23f <SlushDmx::~SlushDmx()+0x23f>
 22f:	48 89 df             	mov    %rbx,%rdi
 232:	e8 00 00 00 00       	call   237 <SlushDmx::~SlushDmx()+0x237>
 237:	48 89 df             	mov    %rbx,%rdi
 23a:	e8 00 00 00 00       	call   23f <SlushDmx::~SlushDmx()+0x23f>
 23f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 243:	8b 55 ec             	mov    -0x14(%rbp),%edx
 246:	48 63 d2             	movslq %edx,%rdx
 249:	48 83 c2 14          	add    $0x14,%rdx
 24d:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 254:	00 00 
 256:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 25a:	8b 55 ec             	mov    -0x14(%rbp),%edx
 25d:	48 63 d2             	movslq %edx,%rdx
 260:	48 83 c2 18          	add    $0x18,%rdx
 264:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 269:	48 85 c0             	test   %rax,%rax
 26c:	74 4a                	je     2b8 <SlushDmx::~SlushDmx()+0x2b8>
 26e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 272:	8b 55 ec             	mov    -0x14(%rbp),%edx
 275:	48 63 d2             	movslq %edx,%rdx
 278:	48 83 c2 18          	add    $0x18,%rdx
 27c:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 281:	48 85 c0             	test   %rax,%rax
 284:	74 1b                	je     2a1 <SlushDmx::~SlushDmx()+0x2a1>
 286:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 28a:	8b 55 ec             	mov    -0x14(%rbp),%edx
 28d:	48 63 d2             	movslq %edx,%rdx
 290:	48 83 c2 18          	add    $0x18,%rdx
 294:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 299:	48 89 c7             	mov    %rax,%rdi
 29c:	e8 00 00 00 00       	call   2a1 <SlushDmx::~SlushDmx()+0x2a1>
 2a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 2a5:	8b 55 ec             	mov    -0x14(%rbp),%edx
 2a8:	48 63 d2             	movslq %edx,%rdx
 2ab:	48 83 c2 18          	add    $0x18,%rdx
 2af:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 2b6:	00 00 
 2b8:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
 2bc:	83 7d ec 03          	cmpl   $0x3,-0x14(%rbp)
 2c0:	0f 8e 3d fe ff ff    	jle    103 <SlushDmx::~SlushDmx()+0x103>
 2c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 2ca:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
 2d1:	48 85 c0             	test   %rax,%rax
 2d4:	74 32                	je     308 <SlushDmx::~SlushDmx()+0x308>
 2d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 2da:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
 2e1:	48 85 c0             	test   %rax,%rax
 2e4:	74 13                	je     2f9 <SlushDmx::~SlushDmx()+0x2f9>
 2e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 2ea:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
 2f1:	48 89 c7             	mov    %rax,%rdi
 2f4:	e8 00 00 00 00       	call   2f9 <SlushDmx::~SlushDmx()+0x2f9>
 2f9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 2fd:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
 304:	00 00 00 00 
 308:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 30c:	48 8b 58 38          	mov    0x38(%rax),%rbx
 310:	48 85 db             	test   %rbx,%rbx
 313:	74 10                	je     325 <SlushDmx::~SlushDmx()+0x325>
 315:	48 89 df             	mov    %rbx,%rdi
 318:	e8 00 00 00 00       	call   31d <SlushDmx::~SlushDmx()+0x31d>
 31d:	48 89 df             	mov    %rbx,%rdi
 320:	e8 00 00 00 00       	call   325 <SlushDmx::~SlushDmx()+0x325>
 325:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 329:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
 330:	00 
 331:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 335:	48 89 c7             	mov    %rax,%rdi
 338:	e8 00 00 00 00       	call   33d <SlushDmx::~SlushDmx()+0x33d>
 33d:	90                   	nop
 33e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 342:	c9                   	leave  
 343:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmxD0Ev:

0000000000000000 <SlushDmx::~SlushDmx()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <SlushDmx::~SlushDmx()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <SlushDmx::~SlushDmx()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmx5StartEj:

0000000000000000 <SlushDmx::Start(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  1a:	eb 31                	jmp    4d <SlushDmx::Start(unsigned int)+0x4d>
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	8b 55 fc             	mov    -0x4(%rbp),%edx
  23:	48 83 c2 14          	add    $0x14,%rdx
  27:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  2c:	48 85 c0             	test   %rax,%rax
  2f:	74 18                	je     49 <SlushDmx::Start(unsigned int)+0x49>
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	8b 55 fc             	mov    -0x4(%rbp),%edx
  38:	48 83 c2 14          	add    $0x14,%rdx
  3c:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  41:	48 89 c7             	mov    %rax,%rdi
  44:	e8 00 00 00 00       	call   49 <SlushDmx::Start(unsigned int)+0x49>
  49:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  4d:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  51:	76 c9                	jbe    1c <SlushDmx::Start(unsigned int)+0x1c>
  53:	90                   	nop
  54:	90                   	nop
  55:	c9                   	leave  
  56:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmx4StopEj:

0000000000000000 <SlushDmx::Stop(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  1a:	eb 31                	jmp    4d <SlushDmx::Stop(unsigned int)+0x4d>
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	8b 55 fc             	mov    -0x4(%rbp),%edx
  23:	48 83 c2 14          	add    $0x14,%rdx
  27:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  2c:	48 85 c0             	test   %rax,%rax
  2f:	74 18                	je     49 <SlushDmx::Stop(unsigned int)+0x49>
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	8b 55 fc             	mov    -0x4(%rbp),%edx
  38:	48 83 c2 14          	add    $0x14,%rdx
  3c:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  41:	48 89 c7             	mov    %rax,%rdi
  44:	e8 00 00 00 00       	call   49 <SlushDmx::Stop(unsigned int)+0x49>
  49:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  4d:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  51:	76 c9                	jbe    1c <SlushDmx::Stop(unsigned int)+0x1c>
  53:	90                   	nop
  54:	90                   	nop
  55:	c9                   	leave  
  56:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmx15ReadConfigFilesEv:

0000000000000000 <SlushDmx::ReadConfigFiles()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
  10:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
  2d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  31:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 38 <SlushDmx::ReadConfigFiles()+0x38>
  38:	48 89 ce             	mov    %rcx,%rsi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	call   43 <SlushDmx::ReadConfigFiles()+0x43>
  43:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  4a:	66 c7 40 0c 00 00    	movw   $0x0,0xc(%rax)
  50:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  57:	66 c7 40 20 00 00    	movw   $0x0,0x20(%rax)
  5d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  61:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 68 <SlushDmx::ReadConfigFiles()+0x68>
  68:	48 89 d6             	mov    %rdx,%rsi
  6b:	48 89 c7             	mov    %rax,%rdi
  6e:	e8 00 00 00 00       	call   73 <SlushDmx::ReadConfigFiles()+0x73>
  73:	84 c0                	test   %al,%al
  75:	0f 84 55 04 00 00    	je     4d0 <SlushDmx::ReadConfigFiles()+0x4d0>
  7b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  82:	0f b7 40 0c          	movzwl 0xc(%rax),%eax
  86:	66 85 c0             	test   %ax,%ax
  89:	0f 84 b7 01 00 00    	je     246 <SlushDmx::ReadConfigFiles()+0x246>
  8f:	c7 85 54 ff ff ff 00 	movl   $0x0,-0xac(%rbp)
  96:	00 00 00 
  99:	eb 2a                	jmp    c5 <SlushDmx::ReadConfigFiles()+0xc5>
  9b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  a2:	48 8b 40 38          	mov    0x38(%rax),%rax
  a6:	8b 95 54 ff ff ff    	mov    -0xac(%rbp),%edx
  ac:	b9 00 00 00 00       	mov    $0x0,%ecx
  b1:	be 00 00 00 00       	mov    $0x0,%esi
  b6:	48 89 c7             	mov    %rax,%rdi
  b9:	e8 00 00 00 00       	call   be <SlushDmx::ReadConfigFiles()+0xbe>
  be:	83 85 54 ff ff ff 01 	addl   $0x1,-0xac(%rbp)
  c5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  cc:	0f b7 40 0e          	movzwl 0xe(%rax),%eax
  d0:	0f b7 c0             	movzwl %ax,%eax
  d3:	39 85 54 ff ff ff    	cmp    %eax,-0xac(%rbp)
  d9:	72 c0                	jb     9b <SlushDmx::ReadConfigFiles()+0x9b>
  db:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  e2:	c6 40 08 01          	movb   $0x1,0x8(%rax)
  e6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  ed:	0f b7 50 0c          	movzwl 0xc(%rax),%edx
  f1:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  f8:	66 89 90 ec 00 00 00 	mov    %dx,0xec(%rax)
  ff:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 106:	0f b7 50 0e          	movzwl 0xe(%rax),%edx
 10a:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 111:	66 89 90 ee 00 00 00 	mov    %dx,0xee(%rax)
 118:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 11f:	0f b7 40 0e          	movzwl 0xe(%rax),%eax
 123:	0f b7 c0             	movzwl %ax,%eax
 126:	48 ba fe ff ff ff ff 	movabs $0x1ffffffffffffffe,%rdx
 12d:	ff ff 1f 
 130:	48 39 d0             	cmp    %rdx,%rax
 133:	77 06                	ja     13b <SlushDmx::ReadConfigFiles()+0x13b>
 135:	48 c1 e0 02          	shl    $0x2,%rax
 139:	eb 07                	jmp    142 <SlushDmx::ReadConfigFiles()+0x142>
 13b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
 142:	48 89 c7             	mov    %rax,%rdi
 145:	e8 00 00 00 00       	call   14a <SlushDmx::ReadConfigFiles()+0x14a>
 14a:	48 89 c2             	mov    %rax,%rdx
 14d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 154:	48 89 50 18          	mov    %rdx,0x18(%rax)
 158:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 15f:	48 8b 40 10          	mov    0x10(%rax),%rax
 163:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
 16a:	c7 85 58 ff ff ff 00 	movl   $0x0,-0xa8(%rbp)
 171:	00 00 00 
 174:	e9 b3 00 00 00       	jmp    22c <SlushDmx::ReadConfigFiles()+0x22c>
 179:	c6 85 52 ff ff ff 00 	movb   $0x0,-0xae(%rbp)
 180:	48 83 bd 78 ff ff ff 	cmpq   $0x0,-0x88(%rbp)
 187:	00 
 188:	74 54                	je     1de <SlushDmx::ReadConfigFiles()+0x1de>
 18a:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 191:	48 8b 50 18          	mov    0x18(%rax),%rdx
 195:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
 19b:	48 c1 e0 02          	shl    $0x2,%rax
 19f:	48 01 d0             	add    %rdx,%rax
 1a2:	48 89 c1             	mov    %rax,%rcx
 1a5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 1ac:	48 8b 50 18          	mov    0x18(%rax),%rdx
 1b0:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
 1b6:	48 c1 e0 02          	shl    $0x2,%rax
 1ba:	48 01 d0             	add    %rdx,%rax
 1bd:	48 8d 50 02          	lea    0x2(%rax),%rdx
 1c1:	48 8d b5 52 ff ff ff 	lea    -0xae(%rbp),%rsi
 1c8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 1cf:	48 89 c7             	mov    %rax,%rdi
 1d2:	e8 00 00 00 00       	call   1d7 <SlushDmx::ReadConfigFiles()+0x1d7>
 1d7:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
 1de:	0f b6 85 52 ff ff ff 	movzbl -0xae(%rbp),%eax
 1e5:	83 f0 01             	xor    $0x1,%eax
 1e8:	84 c0                	test   %al,%al
 1ea:	74 39                	je     225 <SlushDmx::ReadConfigFiles()+0x225>
 1ec:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 1f3:	48 8b 50 18          	mov    0x18(%rax),%rdx
 1f7:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
 1fd:	48 c1 e0 02          	shl    $0x2,%rax
 201:	48 01 d0             	add    %rdx,%rax
 204:	c6 40 02 00          	movb   $0x0,0x2(%rax)
 208:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 20f:	48 8b 50 18          	mov    0x18(%rax),%rdx
 213:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
 219:	48 c1 e0 02          	shl    $0x2,%rax
 21d:	48 01 d0             	add    %rdx,%rax
 220:	66 c7 00 ff ff       	movw   $0xffff,(%rax)
 225:	83 85 58 ff ff ff 01 	addl   $0x1,-0xa8(%rbp)
 22c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 233:	0f b7 40 0e          	movzwl 0xe(%rax),%eax
 237:	0f b7 c0             	movzwl %ax,%eax
 23a:	39 85 58 ff ff ff    	cmp    %eax,-0xa8(%rbp)
 240:	0f 82 33 ff ff ff    	jb     179 <SlushDmx::ReadConfigFiles()+0x179>
 246:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 24d:	0f b7 40 20          	movzwl 0x20(%rax),%eax
 251:	66 85 c0             	test   %ax,%ax
 254:	0f 84 76 02 00 00    	je     4d0 <SlushDmx::ReadConfigFiles()+0x4d0>
 25a:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
 261:	00 00 00 
 264:	eb 2a                	jmp    290 <SlushDmx::ReadConfigFiles()+0x290>
 266:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 26d:	48 8b 40 38          	mov    0x38(%rax),%rax
 271:	8b 95 5c ff ff ff    	mov    -0xa4(%rbp),%edx
 277:	b9 00 00 00 00       	mov    $0x0,%ecx
 27c:	be 01 00 00 00       	mov    $0x1,%esi
 281:	48 89 c7             	mov    %rax,%rdi
 284:	e8 00 00 00 00       	call   289 <SlushDmx::ReadConfigFiles()+0x289>
 289:	83 85 5c ff ff ff 01 	addl   $0x1,-0xa4(%rbp)
 290:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 297:	0f b7 40 22          	movzwl 0x22(%rax),%eax
 29b:	0f b7 c0             	movzwl %ax,%eax
 29e:	39 85 5c ff ff ff    	cmp    %eax,-0xa4(%rbp)
 2a4:	72 c0                	jb     266 <SlushDmx::ReadConfigFiles()+0x266>
 2a6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 2ad:	c6 40 09 01          	movb   $0x1,0x9(%rax)
 2b1:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 2b8:	0f b7 80 ec 00 00 00 	movzwl 0xec(%rax),%eax
 2bf:	66 83 f8 ff          	cmp    $0xffff,%ax
 2c3:	75 37                	jne    2fc <SlushDmx::ReadConfigFiles()+0x2fc>
 2c5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 2cc:	0f b7 50 20          	movzwl 0x20(%rax),%edx
 2d0:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 2d7:	66 89 90 ec 00 00 00 	mov    %dx,0xec(%rax)
 2de:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 2e5:	0f b7 50 22          	movzwl 0x22(%rax),%edx
 2e9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 2f0:	66 89 90 ee 00 00 00 	mov    %dx,0xee(%rax)
 2f7:	e9 b2 00 00 00       	jmp    3ae <SlushDmx::ReadConfigFiles()+0x3ae>
 2fc:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 303:	0f b7 90 ec 00 00 00 	movzwl 0xec(%rax),%edx
 30a:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 311:	0f b7 80 ee 00 00 00 	movzwl 0xee(%rax),%eax
 318:	01 d0                	add    %edx,%eax
 31a:	66 89 85 50 ff ff ff 	mov    %ax,-0xb0(%rbp)
 321:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 328:	48 8d 50 20          	lea    0x20(%rax),%rdx
 32c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 333:	48 05 ec 00 00 00    	add    $0xec,%rax
 339:	48 89 d6             	mov    %rdx,%rsi
 33c:	48 89 c7             	mov    %rax,%rdi
 33f:	e8 00 00 00 00       	call   344 <SlushDmx::ReadConfigFiles()+0x344>
 344:	0f b7 10             	movzwl (%rax),%edx
 347:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 34e:	66 89 90 ec 00 00 00 	mov    %dx,0xec(%rax)
 355:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 35c:	0f b7 50 20          	movzwl 0x20(%rax),%edx
 360:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 367:	0f b7 40 22          	movzwl 0x22(%rax),%eax
 36b:	01 d0                	add    %edx,%eax
 36d:	66 89 85 52 ff ff ff 	mov    %ax,-0xae(%rbp)
 374:	48 8d 95 52 ff ff ff 	lea    -0xae(%rbp),%rdx
 37b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
 382:	48 89 d6             	mov    %rdx,%rsi
 385:	48 89 c7             	mov    %rax,%rdi
 388:	e8 00 00 00 00       	call   38d <SlushDmx::ReadConfigFiles()+0x38d>
 38d:	0f b7 10             	movzwl (%rax),%edx
 390:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 397:	0f b7 80 ec 00 00 00 	movzwl 0xec(%rax),%eax
 39e:	29 c2                	sub    %eax,%edx
 3a0:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 3a7:	66 89 90 ee 00 00 00 	mov    %dx,0xee(%rax)
 3ae:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 3b5:	0f b7 40 22          	movzwl 0x22(%rax),%eax
 3b9:	0f b7 c0             	movzwl %ax,%eax
 3bc:	48 ba fe ff ff ff ff 	movabs $0x1ffffffffffffffe,%rdx
 3c3:	ff ff 1f 
 3c6:	48 39 d0             	cmp    %rdx,%rax
 3c9:	77 06                	ja     3d1 <SlushDmx::ReadConfigFiles()+0x3d1>
 3cb:	48 c1 e0 02          	shl    $0x2,%rax
 3cf:	eb 07                	jmp    3d8 <SlushDmx::ReadConfigFiles()+0x3d8>
 3d1:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
 3d8:	48 89 c7             	mov    %rax,%rdi
 3db:	e8 00 00 00 00       	call   3e0 <SlushDmx::ReadConfigFiles()+0x3e0>
 3e0:	48 89 c2             	mov    %rax,%rdx
 3e3:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 3ea:	48 89 50 30          	mov    %rdx,0x30(%rax)
 3ee:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 3f5:	48 8b 40 28          	mov    0x28(%rax),%rax
 3f9:	48 89 45 80          	mov    %rax,-0x80(%rbp)
 3fd:	c7 85 60 ff ff ff 00 	movl   $0x0,-0xa0(%rbp)
 404:	00 00 00 
 407:	e9 aa 00 00 00       	jmp    4b6 <SlushDmx::ReadConfigFiles()+0x4b6>
 40c:	c6 85 52 ff ff ff 00 	movb   $0x0,-0xae(%rbp)
 413:	48 83 7d 80 00       	cmpq   $0x0,-0x80(%rbp)
 418:	74 4e                	je     468 <SlushDmx::ReadConfigFiles()+0x468>
 41a:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 421:	48 8b 50 30          	mov    0x30(%rax),%rdx
 425:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
 42b:	48 c1 e0 02          	shl    $0x2,%rax
 42f:	48 01 d0             	add    %rdx,%rax
 432:	48 89 c1             	mov    %rax,%rcx
 435:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 43c:	48 8b 50 30          	mov    0x30(%rax),%rdx
 440:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
 446:	48 c1 e0 02          	shl    $0x2,%rax
 44a:	48 01 d0             	add    %rdx,%rax
 44d:	48 8d 50 02          	lea    0x2(%rax),%rdx
 451:	48 8d b5 52 ff ff ff 	lea    -0xae(%rbp),%rsi
 458:	48 8b 45 80          	mov    -0x80(%rbp),%rax
 45c:	48 89 c7             	mov    %rax,%rdi
 45f:	e8 00 00 00 00       	call   464 <SlushDmx::ReadConfigFiles()+0x464>
 464:	48 89 45 80          	mov    %rax,-0x80(%rbp)
 468:	0f b6 85 52 ff ff ff 	movzbl -0xae(%rbp),%eax
 46f:	83 f0 01             	xor    $0x1,%eax
 472:	84 c0                	test   %al,%al
 474:	74 39                	je     4af <SlushDmx::ReadConfigFiles()+0x4af>
 476:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 47d:	48 8b 50 30          	mov    0x30(%rax),%rdx
 481:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
 487:	48 c1 e0 02          	shl    $0x2,%rax
 48b:	48 01 d0             	add    %rdx,%rax
 48e:	c6 40 02 00          	movb   $0x0,0x2(%rax)
 492:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 499:	48 8b 50 30          	mov    0x30(%rax),%rdx
 49d:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
 4a3:	48 c1 e0 02          	shl    $0x2,%rax
 4a7:	48 01 d0             	add    %rdx,%rax
 4aa:	66 c7 00 ff ff       	movw   $0xffff,(%rax)
 4af:	83 85 60 ff ff ff 01 	addl   $0x1,-0xa0(%rbp)
 4b6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 4bd:	0f b7 40 22          	movzwl 0x22(%rax),%eax
 4c1:	0f b7 c0             	movzwl %ax,%eax
 4c4:	39 85 60 ff ff ff    	cmp    %eax,-0xa0(%rbp)
 4ca:	0f 82 3c ff ff ff    	jb     40c <SlushDmx::ReadConfigFiles()+0x40c>
 4d0:	48 b8 6d 6f 74 6f 72 	movabs $0x742e25726f746f6d,%rax
 4d7:	25 2e 74 
 4da:	48 89 45 dd          	mov    %rax,-0x23(%rbp)
 4de:	66 c7 45 e5 78 74    	movw   $0x7478,-0x1b(%rbp)
 4e4:	c6 45 e7 00          	movb   $0x0,-0x19(%rbp)
 4e8:	c7 85 64 ff ff ff 00 	movl   $0x0,-0x9c(%rbp)
 4ef:	00 00 00 
 4f2:	e9 c1 06 00 00       	jmp    bb8 <SlushDmx::ReadConfigFiles()+0xbb8>
 4f7:	8b 85 64 ff ff ff    	mov    -0x9c(%rbp),%eax
 4fd:	83 c0 30             	add    $0x30,%eax
 500:	88 45 e2             	mov    %al,-0x1e(%rbp)
 503:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 50a:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
 511:	c6 00 00             	movb   $0x0,(%rax)
 514:	48 8d 55 dd          	lea    -0x23(%rbp),%rdx
 518:	48 8d 45 90          	lea    -0x70(%rbp),%rax
 51c:	48 89 d6             	mov    %rdx,%rsi
 51f:	48 89 c7             	mov    %rax,%rdi
 522:	e8 00 00 00 00       	call   527 <SlushDmx::ReadConfigFiles()+0x527>
 527:	84 c0                	test   %al,%al
 529:	0f 84 82 06 00 00    	je     bb1 <SlushDmx::ReadConfigFiles()+0xbb1>
 52f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 536:	0f b7 80 ea 00 00 00 	movzwl 0xea(%rax),%eax
 53d:	66 3d 00 02          	cmp    $0x200,%ax
 541:	77 24                	ja     567 <SlushDmx::ReadConfigFiles()+0x567>
 543:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 54a:	0f b6 80 e8 00 00 00 	movzbl 0xe8(%rax),%eax
 551:	0f b6 c0             	movzbl %al,%eax
 554:	89 c7                	mov    %eax,%edi
 556:	e8 00 00 00 00       	call   55b <SlushDmx::ReadConfigFiles()+0x55b>
 55b:	66 85 c0             	test   %ax,%ax
 55e:	74 07                	je     567 <SlushDmx::ReadConfigFiles()+0x567>
 560:	b8 01 00 00 00       	mov    $0x1,%eax
 565:	eb 05                	jmp    56c <SlushDmx::ReadConfigFiles()+0x56c>
 567:	b8 00 00 00 00       	mov    $0x0,%eax
 56c:	84 c0                	test   %al,%al
 56e:	0f 84 3d 06 00 00    	je     bb1 <SlushDmx::ReadConfigFiles()+0xbb1>
 574:	bf 18 00 00 00       	mov    $0x18,%edi
 579:	e8 00 00 00 00       	call   57e <SlushDmx::ReadConfigFiles()+0x57e>
 57e:	48 89 c3             	mov    %rax,%rbx
 581:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 588:	0f b6 40 40          	movzbl 0x40(%rax),%eax
 58c:	0f b6 d0             	movzbl %al,%edx
 58f:	8b 85 64 ff ff ff    	mov    -0x9c(%rbp),%eax
 595:	89 c6                	mov    %eax,%esi
 597:	48 89 df             	mov    %rbx,%rdi
 59a:	e8 00 00 00 00       	call   59f <SlushDmx::ReadConfigFiles()+0x59f>
 59f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 5a6:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 5ac:	48 83 c2 08          	add    $0x8,%rdx
 5b0:	48 89 5c d0 08       	mov    %rbx,0x8(%rax,%rdx,8)
 5b5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 5bc:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 5c2:	48 83 c2 08          	add    $0x8,%rdx
 5c6:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 5cb:	48 85 c0             	test   %rax,%rax
 5ce:	0f 84 ce 05 00 00    	je     ba2 <SlushDmx::ReadConfigFiles()+0xba2>
 5d4:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 5db:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 5e1:	48 83 c2 08          	add    $0x8,%rdx
 5e5:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 5ea:	48 89 c7             	mov    %rax,%rdi
 5ed:	e8 00 00 00 00       	call   5f2 <SlushDmx::ReadConfigFiles()+0x5f2>
 5f2:	84 c0                	test   %al,%al
 5f4:	0f 84 62 05 00 00    	je     b5c <SlushDmx::ReadConfigFiles()+0xb5c>
 5fa:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 601:	8b 40 44             	mov    0x44(%rax),%eax
 604:	8d 50 01             	lea    0x1(%rax),%edx
 607:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 60e:	89 50 44             	mov    %edx,0x44(%rax)
 611:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 618:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 61e:	48 83 c2 08          	add    $0x8,%rdx
 622:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 627:	48 89 c7             	mov    %rax,%rdi
 62a:	e8 00 00 00 00       	call   62f <SlushDmx::ReadConfigFiles()+0x62f>
 62f:	bf 30 00 00 00       	mov    $0x30,%edi
 634:	e8 00 00 00 00       	call   639 <SlushDmx::ReadConfigFiles()+0x639>
 639:	48 89 c3             	mov    %rax,%rbx
 63c:	be 00 00 00 00       	mov    $0x0,%esi
 641:	48 89 df             	mov    %rbx,%rdi
 644:	e8 00 00 00 00       	call   649 <SlushDmx::ReadConfigFiles()+0x649>
 649:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 650:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 656:	48 83 c2 0c          	add    $0xc,%rdx
 65a:	48 89 5c d0 08       	mov    %rbx,0x8(%rax,%rdx,8)
 65f:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 666:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 66c:	48 83 c2 0c          	add    $0xc,%rdx
 670:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 675:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 67b:	89 d6                	mov    %edx,%esi
 67d:	48 89 c7             	mov    %rax,%rdi
 680:	e8 00 00 00 00       	call   685 <SlushDmx::ReadConfigFiles()+0x685>
 685:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 68c:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 692:	48 83 c2 0c          	add    $0xc,%rdx
 696:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 69b:	48 89 c7             	mov    %rax,%rdi
 69e:	e8 00 00 00 00       	call   6a3 <SlushDmx::ReadConfigFiles()+0x6a3>
 6a3:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 6aa:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 6b0:	48 83 c2 0c          	add    $0xc,%rdx
 6b4:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 6b9:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
 6c0:	8b 8d 64 ff ff ff    	mov    -0x9c(%rbp),%ecx
 6c6:	48 83 c1 08          	add    $0x8,%rcx
 6ca:	48 8b 54 ca 08       	mov    0x8(%rdx,%rcx,8),%rdx
 6cf:	48 89 d6             	mov    %rdx,%rsi
 6d2:	48 89 c7             	mov    %rax,%rdi
 6d5:	e8 00 00 00 00       	call   6da <SlushDmx::ReadConfigFiles()+0x6da>
 6da:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
 6de:	be 00 00 00 00       	mov    $0x0,%esi
 6e3:	48 89 c7             	mov    %rax,%rdi
 6e6:	e8 00 00 00 00       	call   6eb <SlushDmx::ReadConfigFiles()+0x6eb>
 6eb:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 6f1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
 6f5:	89 d6                	mov    %edx,%esi
 6f7:	48 89 c7             	mov    %rax,%rdi
 6fa:	e8 00 00 00 00       	call   6ff <SlushDmx::ReadConfigFiles()+0x6ff>
 6ff:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
 703:	48 89 c7             	mov    %rax,%rdi
 706:	e8 00 00 00 00       	call   70b <SlushDmx::ReadConfigFiles()+0x70b>
 70b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 712:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 718:	48 83 c2 08          	add    $0x8,%rdx
 71c:	48 8b 54 d0 08       	mov    0x8(%rax,%rdx,8),%rdx
 721:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
 725:	48 89 d6             	mov    %rdx,%rsi
 728:	48 89 c7             	mov    %rax,%rdi
 72b:	e8 00 00 00 00       	call   730 <SlushDmx::ReadConfigFiles()+0x730>
 730:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 737:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 73d:	48 83 c2 08          	add    $0x8,%rdx
 741:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 746:	48 89 c7             	mov    %rax,%rdi
 749:	e8 00 00 00 00       	call   74e <SlushDmx::ReadConfigFiles()+0x74e>
 74e:	bf 48 00 00 00       	mov    $0x48,%edi
 753:	e8 00 00 00 00       	call   758 <SlushDmx::ReadConfigFiles()+0x758>
 758:	48 89 c3             	mov    %rax,%rbx
 75b:	be 00 00 00 00       	mov    $0x0,%esi
 760:	48 89 df             	mov    %rbx,%rdi
 763:	e8 00 00 00 00       	call   768 <SlushDmx::ReadConfigFiles()+0x768>
 768:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 76f:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 775:	48 83 c2 10          	add    $0x10,%rdx
 779:	48 89 5c d0 08       	mov    %rbx,0x8(%rax,%rdx,8)
 77e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 785:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 78b:	48 83 c2 10          	add    $0x10,%rdx
 78f:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 794:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 79a:	89 d6                	mov    %edx,%esi
 79c:	48 89 c7             	mov    %rax,%rdi
 79f:	e8 00 00 00 00       	call   7a4 <SlushDmx::ReadConfigFiles()+0x7a4>
 7a4:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 7ab:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 7b1:	48 83 c2 10          	add    $0x10,%rdx
 7b5:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 7ba:	48 89 c7             	mov    %rax,%rdi
 7bd:	e8 00 00 00 00       	call   7c2 <SlushDmx::ReadConfigFiles()+0x7c2>
 7c2:	bf 28 00 00 00       	mov    $0x28,%edi
 7c7:	e8 00 00 00 00       	call   7cc <SlushDmx::ReadConfigFiles()+0x7cc>
 7cc:	48 89 c3             	mov    %rax,%rbx
 7cf:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 7d6:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 7dc:	48 83 c2 10          	add    $0x10,%rdx
 7e0:	48 8b 7c d0 08       	mov    0x8(%rax,%rdx,8),%rdi
 7e5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 7ec:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 7f2:	48 83 c2 0c          	add    $0xc,%rdx
 7f6:	48 8b 74 d0 08       	mov    0x8(%rax,%rdx,8),%rsi
 7fb:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 802:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 808:	48 83 c2 08          	add    $0x8,%rdx
 80c:	48 8b 4c d0 08       	mov    0x8(%rax,%rdx,8),%rcx
 811:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 818:	0f b7 80 ea 00 00 00 	movzwl 0xea(%rax),%eax
 81f:	0f b7 d0             	movzwl %ax,%edx
 822:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 829:	0f b6 80 e8 00 00 00 	movzbl 0xe8(%rax),%eax
 830:	0f b6 c0             	movzbl %al,%eax
 833:	49 89 f9             	mov    %rdi,%r9
 836:	49 89 f0             	mov    %rsi,%r8
 839:	89 c6                	mov    %eax,%esi
 83b:	48 89 df             	mov    %rbx,%rdi
 83e:	e8 00 00 00 00       	call   843 <SlushDmx::ReadConfigFiles()+0x843>
 843:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 84a:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 850:	48 83 c2 14          	add    $0x14,%rdx
 854:	48 89 5c d0 08       	mov    %rbx,0x8(%rax,%rdx,8)
 859:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 860:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 866:	48 83 c2 14          	add    $0x14,%rdx
 86a:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 86f:	48 85 c0             	test   %rax,%rax
 872:	0f 84 39 03 00 00    	je     bb1 <SlushDmx::ReadConfigFiles()+0xbb1>
 878:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 87f:	0f b7 80 ec 00 00 00 	movzwl 0xec(%rax),%eax
 886:	66 83 f8 ff          	cmp    $0xffff,%ax
 88a:	75 5d                	jne    8e9 <SlushDmx::ReadConfigFiles()+0x8e9>
 88c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 893:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 899:	48 83 c2 14          	add    $0x14,%rdx
 89d:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 8a2:	48 89 c7             	mov    %rax,%rdi
 8a5:	e8 00 00 00 00       	call   8aa <SlushDmx::ReadConfigFiles()+0x8aa>
 8aa:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
 8b1:	66 89 82 ec 00 00 00 	mov    %ax,0xec(%rdx)
 8b8:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 8bf:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 8c5:	48 83 c2 14          	add    $0x14,%rdx
 8c9:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 8ce:	48 89 c7             	mov    %rax,%rdi
 8d1:	e8 00 00 00 00       	call   8d6 <SlushDmx::ReadConfigFiles()+0x8d6>
 8d6:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
 8dd:	66 89 82 ee 00 00 00 	mov    %ax,0xee(%rdx)
 8e4:	e9 ea 00 00 00       	jmp    9d3 <SlushDmx::ReadConfigFiles()+0x9d3>
 8e9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 8f0:	0f b7 90 ec 00 00 00 	movzwl 0xec(%rax),%edx
 8f7:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 8fe:	0f b7 80 ee 00 00 00 	movzwl 0xee(%rax),%eax
 905:	01 d0                	add    %edx,%eax
 907:	66 89 85 50 ff ff ff 	mov    %ax,-0xb0(%rbp)
 90e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 915:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 91b:	48 83 c2 14          	add    $0x14,%rdx
 91f:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 924:	48 89 c7             	mov    %rax,%rdi
 927:	e8 00 00 00 00       	call   92c <SlushDmx::ReadConfigFiles()+0x92c>
 92c:	66 89 85 52 ff ff ff 	mov    %ax,-0xae(%rbp)
 933:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 93a:	48 8d 90 ec 00 00 00 	lea    0xec(%rax),%rdx
 941:	48 8d 85 52 ff ff ff 	lea    -0xae(%rbp),%rax
 948:	48 89 c6             	mov    %rax,%rsi
 94b:	48 89 d7             	mov    %rdx,%rdi
 94e:	e8 00 00 00 00       	call   953 <SlushDmx::ReadConfigFiles()+0x953>
 953:	0f b7 10             	movzwl (%rax),%edx
 956:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 95d:	66 89 90 ec 00 00 00 	mov    %dx,0xec(%rax)
 964:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 96b:	0f b7 98 ea 00 00 00 	movzwl 0xea(%rax),%ebx
 972:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 979:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 97f:	48 83 c2 14          	add    $0x14,%rdx
 983:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 988:	48 89 c7             	mov    %rax,%rdi
 98b:	e8 00 00 00 00       	call   990 <SlushDmx::ReadConfigFiles()+0x990>
 990:	01 d8                	add    %ebx,%eax
 992:	66 89 85 52 ff ff ff 	mov    %ax,-0xae(%rbp)
 999:	48 8d 95 52 ff ff ff 	lea    -0xae(%rbp),%rdx
 9a0:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
 9a7:	48 89 d6             	mov    %rdx,%rsi
 9aa:	48 89 c7             	mov    %rax,%rdi
 9ad:	e8 00 00 00 00       	call   9b2 <SlushDmx::ReadConfigFiles()+0x9b2>
 9b2:	0f b7 10             	movzwl (%rax),%edx
 9b5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 9bc:	0f b7 80 ec 00 00 00 	movzwl 0xec(%rax),%eax
 9c3:	29 c2                	sub    %eax,%edx
 9c5:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 9cc:	66 89 90 ee 00 00 00 	mov    %dx,0xee(%rax)
 9d3:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 9da:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 9e0:	48 83 c2 14          	add    $0x14,%rdx
 9e4:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 9e9:	48 89 c7             	mov    %rax,%rdi
 9ec:	e8 00 00 00 00       	call   9f1 <SlushDmx::ReadConfigFiles()+0x9f1>
 9f1:	0f b7 c0             	movzwl %ax,%eax
 9f4:	48 ba fe ff ff ff ff 	movabs $0x1ffffffffffffffe,%rdx
 9fb:	ff ff 1f 
 9fe:	48 39 d0             	cmp    %rdx,%rax
 a01:	77 06                	ja     a09 <SlushDmx::ReadConfigFiles()+0xa09>
 a03:	48 c1 e0 02          	shl    $0x2,%rax
 a07:	eb 07                	jmp    a10 <SlushDmx::ReadConfigFiles()+0xa10>
 a09:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
 a10:	48 89 c7             	mov    %rax,%rdi
 a13:	e8 00 00 00 00       	call   a18 <SlushDmx::ReadConfigFiles()+0xa18>
 a18:	48 89 c1             	mov    %rax,%rcx
 a1b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 a22:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 a28:	48 83 c2 18          	add    $0x18,%rdx
 a2c:	48 89 4c d0 08       	mov    %rcx,0x8(%rax,%rdx,8)
 a31:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 a38:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
 a3f:	48 89 45 88          	mov    %rax,-0x78(%rbp)
 a43:	c7 85 68 ff ff ff 00 	movl   $0x0,-0x98(%rbp)
 a4a:	00 00 00 
 a4d:	e9 d6 00 00 00       	jmp    b28 <SlushDmx::ReadConfigFiles()+0xb28>
 a52:	c6 85 52 ff ff ff 00 	movb   $0x0,-0xae(%rbp)
 a59:	48 83 7d 88 00       	cmpq   $0x0,-0x78(%rbp)
 a5e:	74 64                	je     ac4 <SlushDmx::ReadConfigFiles()+0xac4>
 a60:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 a67:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 a6d:	48 83 c2 18          	add    $0x18,%rdx
 a71:	48 8b 54 d0 08       	mov    0x8(%rax,%rdx,8),%rdx
 a76:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
 a7c:	48 c1 e0 02          	shl    $0x2,%rax
 a80:	48 01 d0             	add    %rdx,%rax
 a83:	48 89 c1             	mov    %rax,%rcx
 a86:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 a8d:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 a93:	48 83 c2 18          	add    $0x18,%rdx
 a97:	48 8b 54 d0 08       	mov    0x8(%rax,%rdx,8),%rdx
 a9c:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
 aa2:	48 c1 e0 02          	shl    $0x2,%rax
 aa6:	48 01 d0             	add    %rdx,%rax
 aa9:	48 8d 50 02          	lea    0x2(%rax),%rdx
 aad:	48 8d b5 52 ff ff ff 	lea    -0xae(%rbp),%rsi
 ab4:	48 8b 45 88          	mov    -0x78(%rbp),%rax
 ab8:	48 89 c7             	mov    %rax,%rdi
 abb:	e8 00 00 00 00       	call   ac0 <SlushDmx::ReadConfigFiles()+0xac0>
 ac0:	48 89 45 88          	mov    %rax,-0x78(%rbp)
 ac4:	0f b6 85 52 ff ff ff 	movzbl -0xae(%rbp),%eax
 acb:	83 f0 01             	xor    $0x1,%eax
 ace:	84 c0                	test   %al,%al
 ad0:	74 4f                	je     b21 <SlushDmx::ReadConfigFiles()+0xb21>
 ad2:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 ad9:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 adf:	48 83 c2 18          	add    $0x18,%rdx
 ae3:	48 8b 54 d0 08       	mov    0x8(%rax,%rdx,8),%rdx
 ae8:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
 aee:	48 c1 e0 02          	shl    $0x2,%rax
 af2:	48 01 d0             	add    %rdx,%rax
 af5:	c6 40 02 00          	movb   $0x0,0x2(%rax)
 af9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 b00:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 b06:	48 83 c2 18          	add    $0x18,%rdx
 b0a:	48 8b 54 d0 08       	mov    0x8(%rax,%rdx,8),%rdx
 b0f:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
 b15:	48 c1 e0 02          	shl    $0x2,%rax
 b19:	48 01 d0             	add    %rdx,%rax
 b1c:	66 c7 00 ff ff       	movw   $0xffff,(%rax)
 b21:	83 85 68 ff ff ff 01 	addl   $0x1,-0x98(%rbp)
 b28:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 b2f:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 b35:	48 83 c2 14          	add    $0x14,%rdx
 b39:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 b3e:	48 89 c7             	mov    %rax,%rdi
 b41:	e8 00 00 00 00       	call   b46 <SlushDmx::ReadConfigFiles()+0xb46>
 b46:	0f b7 c0             	movzwl %ax,%eax
 b49:	39 85 68 ff ff ff    	cmp    %eax,-0x98(%rbp)
 b4f:	0f 92 c0             	setb   %al
 b52:	84 c0                	test   %al,%al
 b54:	0f 85 f8 fe ff ff    	jne    a52 <SlushDmx::ReadConfigFiles()+0xa52>
 b5a:	eb 55                	jmp    bb1 <SlushDmx::ReadConfigFiles()+0xbb1>
 b5c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 b63:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 b69:	48 83 c2 08          	add    $0x8,%rdx
 b6d:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 b72:	48 85 c0             	test   %rax,%rax
 b75:	74 0f                	je     b86 <SlushDmx::ReadConfigFiles()+0xb86>
 b77:	48 8b 10             	mov    (%rax),%rdx
 b7a:	48 83 c2 08          	add    $0x8,%rdx
 b7e:	48 8b 12             	mov    (%rdx),%rdx
 b81:	48 89 c7             	mov    %rax,%rdi
 b84:	ff d2                	call   *%rdx
 b86:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 b8d:	8b 95 64 ff ff ff    	mov    -0x9c(%rbp),%edx
 b93:	48 83 c2 08          	add    $0x8,%rdx
 b97:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 b9e:	00 00 
 ba0:	eb 0f                	jmp    bb1 <SlushDmx::ReadConfigFiles()+0xbb1>
 ba2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ba9 <SlushDmx::ReadConfigFiles()+0xba9>
 ba9:	48 89 c7             	mov    %rax,%rdi
 bac:	e8 00 00 00 00       	call   bb1 <SlushDmx::ReadConfigFiles()+0xbb1>
 bb1:	83 85 64 ff ff ff 01 	addl   $0x1,-0x9c(%rbp)
 bb8:	83 bd 64 ff ff ff 03 	cmpl   $0x3,-0x9c(%rbp)
 bbf:	0f 86 32 f9 ff ff    	jbe    4f7 <SlushDmx::ReadConfigFiles()+0x4f7>
 bc5:	c7 85 6c ff ff ff 00 	movl   $0x0,-0x94(%rbp)
 bcc:	00 00 00 
 bcf:	eb 40                	jmp    c11 <SlushDmx::ReadConfigFiles()+0xc11>
 bd1:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 bd8:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
 bde:	48 83 c2 14          	add    $0x14,%rdx
 be2:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 be7:	48 85 c0             	test   %rax,%rax
 bea:	74 1e                	je     c0a <SlushDmx::ReadConfigFiles()+0xc0a>
 bec:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 bf3:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
 bf9:	48 83 c2 14          	add    $0x14,%rdx
 bfd:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 c02:	48 89 c7             	mov    %rax,%rdi
 c05:	e8 00 00 00 00       	call   c0a <SlushDmx::ReadConfigFiles()+0xc0a>
 c0a:	83 85 6c ff ff ff 01 	addl   $0x1,-0x94(%rbp)
 c11:	83 bd 6c ff ff ff 03 	cmpl   $0x3,-0x94(%rbp)
 c18:	76 b7                	jbe    bd1 <SlushDmx::ReadConfigFiles()+0xbd1>
 c1a:	c7 85 70 ff ff ff 00 	movl   $0x0,-0x90(%rbp)
 c21:	00 00 00 
 c24:	eb 45                	jmp    c6b <SlushDmx::ReadConfigFiles()+0xc6b>
 c26:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 c2d:	8b 95 70 ff ff ff    	mov    -0x90(%rbp),%edx
 c33:	48 83 c2 08          	add    $0x8,%rdx
 c37:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 c3c:	48 85 c0             	test   %rax,%rax
 c3f:	74 23                	je     c64 <SlushDmx::ReadConfigFiles()+0xc64>
 c41:	90                   	nop
 c42:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 c49:	8b 95 70 ff ff ff    	mov    -0x90(%rbp),%edx
 c4f:	48 83 c2 14          	add    $0x14,%rdx
 c53:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 c58:	48 89 c7             	mov    %rax,%rdi
 c5b:	e8 00 00 00 00       	call   c60 <SlushDmx::ReadConfigFiles()+0xc60>
 c60:	84 c0                	test   %al,%al
 c62:	75 de                	jne    c42 <SlushDmx::ReadConfigFiles()+0xc42>
 c64:	83 85 70 ff ff ff 01 	addl   $0x1,-0x90(%rbp)
 c6b:	83 bd 70 ff ff ff 03 	cmpl   $0x3,-0x90(%rbp)
 c72:	76 b2                	jbe    c26 <SlushDmx::ReadConfigFiles()+0xc26>
 c74:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%rbp)
 c7b:	00 00 00 
 c7e:	eb 40                	jmp    cc0 <SlushDmx::ReadConfigFiles()+0xcc0>
 c80:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 c87:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
 c8d:	48 83 c2 14          	add    $0x14,%rdx
 c91:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 c96:	48 85 c0             	test   %rax,%rax
 c99:	74 1e                	je     cb9 <SlushDmx::ReadConfigFiles()+0xcb9>
 c9b:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 ca2:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
 ca8:	48 83 c2 14          	add    $0x14,%rdx
 cac:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 cb1:	48 89 c7             	mov    %rax,%rdi
 cb4:	e8 00 00 00 00       	call   cb9 <SlushDmx::ReadConfigFiles()+0xcb9>
 cb9:	83 85 74 ff ff ff 01 	addl   $0x1,-0x8c(%rbp)
 cc0:	83 bd 74 ff ff ff 03 	cmpl   $0x3,-0x8c(%rbp)
 cc7:	76 b7                	jbe    c80 <SlushDmx::ReadConfigFiles()+0xc80>
 cc9:	48 8d 45 90          	lea    -0x70(%rbp),%rax
 ccd:	48 89 c7             	mov    %rax,%rdi
 cd0:	e8 00 00 00 00       	call   cd5 <SlushDmx::ReadConfigFiles()+0xcd5>
 cd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 cd9:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 ce0:	00 00 
 ce2:	74 05                	je     ce9 <SlushDmx::ReadConfigFiles()+0xce9>
 ce4:	e8 00 00 00 00       	call   ce9 <SlushDmx::ReadConfigFiles()+0xce9>
 ce9:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 ced:	c9                   	leave  
 cee:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmx7SetDataEjPKhj:

0000000000000000 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  13:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  17:	89 4d d0             	mov    %ecx,-0x30(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  30:	eb 70                	jmp    a2 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xa2>
  32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  36:	8b 55 e8             	mov    -0x18(%rbp),%edx
  39:	48 83 c2 14          	add    $0x14,%rdx
  3d:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  42:	48 85 c0             	test   %rax,%rax
  45:	74 4f                	je     96 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x96>
  47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4b:	8b 55 e8             	mov    -0x18(%rbp),%edx
  4e:	48 83 c2 14          	add    $0x14,%rdx
  52:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  57:	8b 55 d0             	mov    -0x30(%rbp),%edx
  5a:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  5e:	48 89 ce             	mov    %rcx,%rsi
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	call   69 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x69>
  69:	8b 55 e8             	mov    -0x18(%rbp),%edx
  6c:	88 44 15 f4          	mov    %al,-0xc(%rbp,%rdx,1)
  70:	8b 45 e8             	mov    -0x18(%rbp),%eax
  73:	0f b6 44 05 f4       	movzbl -0xc(%rbp,%rax,1),%eax
  78:	84 c0                	test   %al,%al
  7a:	74 22                	je     9e <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x9e>
  7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80:	8b 55 e8             	mov    -0x18(%rbp),%edx
  83:	48 83 c2 14          	add    $0x14,%rdx
  87:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	call   94 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x94>
  94:	eb 08                	jmp    9e <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x9e>
  96:	8b 45 e8             	mov    -0x18(%rbp),%eax
  99:	c6 44 05 f4 00       	movb   $0x0,-0xc(%rbp,%rax,1)
  9e:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  a2:	83 7d e8 03          	cmpl   $0x3,-0x18(%rbp)
  a6:	76 8a                	jbe    32 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x32>
  a8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  af:	eb 2d                	jmp    de <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
  b1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  b4:	0f b6 44 05 f4       	movzbl -0xc(%rbp,%rax,1),%eax
  b9:	84 c0                	test   %al,%al
  bb:	74 1d                	je     da <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xda>
  bd:	90                   	nop
  be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c2:	8b 55 ec             	mov    -0x14(%rbp),%edx
  c5:	48 83 c2 14          	add    $0x14,%rdx
  c9:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  ce:	48 89 c7             	mov    %rax,%rdi
  d1:	e8 00 00 00 00       	call   d6 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xd6>
  d6:	84 c0                	test   %al,%al
  d8:	75 e4                	jne    be <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xbe>
  da:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  de:	83 7d ec 03          	cmpl   $0x3,-0x14(%rbp)
  e2:	76 cd                	jbe    b1 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xb1>
  e4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  eb:	eb 32                	jmp    11f <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x11f>
  ed:	8b 45 f0             	mov    -0x10(%rbp),%eax
  f0:	0f b6 44 05 f4       	movzbl -0xc(%rbp,%rax,1),%eax
  f5:	84 c0                	test   %al,%al
  f7:	74 22                	je     11b <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x11b>
  f9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  fd:	8b 55 f0             	mov    -0x10(%rbp),%edx
 100:	48 83 c2 14          	add    $0x14,%rdx
 104:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 109:	8b 55 d0             	mov    -0x30(%rbp),%edx
 10c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
 110:	48 89 ce             	mov    %rcx,%rsi
 113:	48 89 c7             	mov    %rax,%rdi
 116:	e8 00 00 00 00       	call   11b <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x11b>
 11b:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
 11f:	83 7d f0 03          	cmpl   $0x3,-0x10(%rbp)
 123:	76 c8                	jbe    ed <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xed>
 125:	8b 55 d0             	mov    -0x30(%rbp),%edx
 128:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
 12c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 130:	48 89 ce             	mov    %rcx,%rsi
 133:	48 89 c7             	mov    %rax,%rdi
 136:	e8 00 00 00 00       	call   13b <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x13b>
 13b:	90                   	nop
 13c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 140:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 147:	00 00 
 149:	74 05                	je     150 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x150>
 14b:	e8 00 00 00 00       	call   150 <SlushDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x150>
 150:	c9                   	leave  
 151:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmx13UpdateIOPortsEPKhj:

0000000000000000 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	89 55 cc             	mov    %edx,-0x34(%rbp)
  17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1b:	0f b7 40 0c          	movzwl 0xc(%rax),%eax
  1f:	66 89 45 ee          	mov    %ax,-0x12(%rbp)
  23:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  27:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  2b:	84 c0                	test   %al,%al
  2d:	0f 84 b6 00 00 00    	je     e9 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0xe9>
  33:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  37:	39 45 cc             	cmp    %eax,-0x34(%rbp)
  3a:	0f 82 a9 00 00 00    	jb     e9 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0xe9>
  40:	c6 45 ed 00          	movb   $0x0,-0x13(%rbp)
  44:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  48:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  4c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  50:	48 01 d0             	add    %rdx,%rax
  53:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  57:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  5e:	eb 45                	jmp    a5 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0xa5>
  60:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  64:	8d 50 01             	lea    0x1(%rax),%edx
  67:	66 89 55 ee          	mov    %dx,-0x12(%rbp)
  6b:	0f b7 c0             	movzwl %ax,%eax
  6e:	39 45 cc             	cmp    %eax,-0x34(%rbp)
  71:	0f 92 c0             	setb   %al
  74:	84 c0                	test   %al,%al
  76:	75 3f                	jne    b7 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0xb7>
  78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7c:	0f b6 00             	movzbl (%rax),%eax
  7f:	84 c0                	test   %al,%al
  81:	79 19                	jns    9c <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x9c>
  83:	8b 45 f0             	mov    -0x10(%rbp),%eax
  86:	ba 01 00 00 00       	mov    $0x1,%edx
  8b:	89 c1                	mov    %eax,%ecx
  8d:	d3 e2                	shl    %cl,%edx
  8f:	89 d0                	mov    %edx,%eax
  91:	89 c2                	mov    %eax,%edx
  93:	0f b6 45 ed          	movzbl -0x13(%rbp),%eax
  97:	09 d0                	or     %edx,%eax
  99:	88 45 ed             	mov    %al,-0x13(%rbp)
  9c:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  a1:	83 45 f0 01          	addl   $0x1,-0x10(%rbp)
  a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a9:	0f b7 40 0e          	movzwl 0xe(%rax),%eax
  ad:	0f b7 c0             	movzwl %ax,%eax
  b0:	39 45 f0             	cmp    %eax,-0x10(%rbp)
  b3:	72 ab                	jb     60 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x60>
  b5:	eb 01                	jmp    b8 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0xb8>
  b7:	90                   	nop
  b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  bc:	0f b6 40 0a          	movzbl 0xa(%rax),%eax
  c0:	38 45 ed             	cmp    %al,-0x13(%rbp)
  c3:	74 24                	je     e9 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0xe9>
  c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c9:	0f b6 55 ed          	movzbl -0x13(%rbp),%edx
  cd:	88 50 0a             	mov    %dl,0xa(%rax)
  d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d4:	48 8b 40 38          	mov    0x38(%rax),%rax
  d8:	0f b6 55 ed          	movzbl -0x13(%rbp),%edx
  dc:	be 00 00 00 00       	mov    $0x0,%esi
  e1:	48 89 c7             	mov    %rax,%rdi
  e4:	e8 00 00 00 00       	call   e9 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0xe9>
  e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ed:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  f1:	66 89 45 ee          	mov    %ax,-0x12(%rbp)
  f5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f9:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  fd:	84 c0                	test   %al,%al
  ff:	0f 84 b6 00 00 00    	je     1bb <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x1bb>
 105:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
 109:	39 45 cc             	cmp    %eax,-0x34(%rbp)
 10c:	0f 82 a9 00 00 00    	jb     1bb <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x1bb>
 112:	c6 45 ed 00          	movb   $0x0,-0x13(%rbp)
 116:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
 11a:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
 11e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 122:	48 01 d0             	add    %rdx,%rax
 125:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 129:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
 130:	eb 45                	jmp    177 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x177>
 132:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
 136:	8d 50 01             	lea    0x1(%rax),%edx
 139:	66 89 55 ee          	mov    %dx,-0x12(%rbp)
 13d:	0f b7 c0             	movzwl %ax,%eax
 140:	39 45 cc             	cmp    %eax,-0x34(%rbp)
 143:	0f 92 c0             	setb   %al
 146:	84 c0                	test   %al,%al
 148:	75 3f                	jne    189 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x189>
 14a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 14e:	0f b6 00             	movzbl (%rax),%eax
 151:	84 c0                	test   %al,%al
 153:	79 19                	jns    16e <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x16e>
 155:	8b 45 f4             	mov    -0xc(%rbp),%eax
 158:	ba 01 00 00 00       	mov    $0x1,%edx
 15d:	89 c1                	mov    %eax,%ecx
 15f:	d3 e2                	shl    %cl,%edx
 161:	89 d0                	mov    %edx,%eax
 163:	89 c2                	mov    %eax,%edx
 165:	0f b6 45 ed          	movzbl -0x13(%rbp),%eax
 169:	09 d0                	or     %edx,%eax
 16b:	88 45 ed             	mov    %al,-0x13(%rbp)
 16e:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
 173:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
 177:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 17b:	0f b7 40 22          	movzwl 0x22(%rax),%eax
 17f:	0f b7 c0             	movzwl %ax,%eax
 182:	39 45 f4             	cmp    %eax,-0xc(%rbp)
 185:	72 ab                	jb     132 <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x132>
 187:	eb 01                	jmp    18a <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x18a>
 189:	90                   	nop
 18a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18e:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
 192:	38 45 ed             	cmp    %al,-0x13(%rbp)
 195:	74 24                	je     1bb <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x1bb>
 197:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 19b:	0f b6 55 ed          	movzbl -0x13(%rbp),%edx
 19f:	88 50 0b             	mov    %dl,0xb(%rax)
 1a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a6:	48 8b 40 38          	mov    0x38(%rax),%rax
 1aa:	0f b6 55 ed          	movzbl -0x13(%rbp),%edx
 1ae:	be 01 00 00 00       	mov    $0x1,%esi
 1b3:	48 89 c7             	mov    %rax,%rdi
 1b6:	e8 00 00 00 00       	call   1bb <SlushDmx::UpdateIOPorts(unsigned char const*, unsigned int)+0x1bb>
 1bb:	90                   	nop
 1bc:	c9                   	leave  
 1bd:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmx18SetDmxStartAddressEt:

0000000000000000 <SlushDmx::SetDmxStartAddress(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1a:	0f b7 80 ec 00 00 00 	movzwl 0xec(%rax),%eax
  21:	66 39 45 e4          	cmp    %ax,-0x1c(%rbp)
  25:	75 0a                	jne    31 <SlushDmx::SetDmxStartAddress(unsigned short)+0x31>
  27:	b8 01 00 00 00       	mov    $0x1,%eax
  2c:	e9 d9 00 00 00       	jmp    10a <SlushDmx::SetDmxStartAddress(unsigned short)+0x10a>
  31:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  38:	eb 70                	jmp    aa <SlushDmx::SetDmxStartAddress(unsigned short)+0xaa>
  3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  41:	48 83 c2 14          	add    $0x14,%rdx
  45:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  4a:	48 85 c0             	test   %rax,%rax
  4d:	74 57                	je     a6 <SlushDmx::SetDmxStartAddress(unsigned short)+0xa6>
  4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  53:	8b 55 fc             	mov    -0x4(%rbp),%edx
  56:	48 83 c2 14          	add    $0x14,%rdx
  5a:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	call   67 <SlushDmx::SetDmxStartAddress(unsigned short)+0x67>
  67:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
  6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6f:	0f b7 90 ec 00 00 00 	movzwl 0xec(%rax),%edx
  76:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  7a:	29 d0                	sub    %edx,%eax
  7c:	89 c1                	mov    %eax,%ecx
  7e:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  82:	01 c8                	add    %ecx,%eax
  84:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8f:	48 83 c2 14          	add    $0x14,%rdx
  93:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  98:	0f b7 55 fa          	movzwl -0x6(%rbp),%edx
  9c:	89 d6                	mov    %edx,%esi
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	call   a6 <SlushDmx::SetDmxStartAddress(unsigned short)+0xa6>
  a6:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  aa:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  ae:	76 8a                	jbe    3a <SlushDmx::SetDmxStartAddress(unsigned short)+0x3a>
  b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b4:	0f b7 50 0c          	movzwl 0xc(%rax),%edx
  b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bc:	0f b7 80 ec 00 00 00 	movzwl 0xec(%rax),%eax
  c3:	29 c2                	sub    %eax,%edx
  c5:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  c9:	01 c2                	add    %eax,%edx
  cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  cf:	66 89 50 0c          	mov    %dx,0xc(%rax)
  d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d7:	0f b7 50 20          	movzwl 0x20(%rax),%edx
  db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  df:	0f b7 80 ec 00 00 00 	movzwl 0xec(%rax),%eax
  e6:	29 c2                	sub    %eax,%edx
  e8:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  ec:	01 c2                	add    %eax,%edx
  ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f2:	66 89 50 20          	mov    %dx,0x20(%rax)
  f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fa:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  fe:	66 89 90 ec 00 00 00 	mov    %dx,0xec(%rax)
 105:	b8 01 00 00 00       	mov    $0x1,%eax
 10a:	c9                   	leave  
 10b:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmx11GetSlotInfoEtRN8lightset8SlotInfoE:

0000000000000000 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	89 f0                	mov    %esi,%eax
  13:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  17:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1f:	0f b7 80 ee 00 00 00 	movzwl 0xee(%rax),%eax
  26:	66 39 45 d4          	cmp    %ax,-0x2c(%rbp)
  2a:	76 0a                	jbe    36 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x36>
  2c:	b8 00 00 00 00       	mov    $0x0,%eax
  31:	e9 3b 02 00 00       	jmp    271 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x271>
  36:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3a:	0f b7 90 ec 00 00 00 	movzwl 0xec(%rax),%edx
  41:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
  45:	01 d0                	add    %edx,%eax
  47:	66 89 45 e6          	mov    %ax,-0x1a(%rbp)
  4b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  52:	e9 02 01 00 00       	jmp    159 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x159>
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	8b 55 ec             	mov    -0x14(%rbp),%edx
  5e:	48 83 c2 14          	add    $0x14,%rdx
  62:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  67:	48 85 c0             	test   %rax,%rax
  6a:	0f 84 e5 00 00 00    	je     155 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x155>
  70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  74:	8b 55 ec             	mov    -0x14(%rbp),%edx
  77:	48 83 c2 18          	add    $0x18,%rdx
  7b:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  80:	48 85 c0             	test   %rax,%rax
  83:	0f 84 cc 00 00 00    	je     155 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x155>
  89:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8d:	8b 55 ec             	mov    -0x14(%rbp),%edx
  90:	48 83 c2 14          	add    $0x14,%rdx
  94:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  99:	48 89 c7             	mov    %rax,%rdi
  9c:	e8 00 00 00 00       	call   a1 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0xa1>
  a1:	89 c2                	mov    %eax,%edx
  a3:	0f b7 45 e6          	movzwl -0x1a(%rbp),%eax
  a7:	29 d0                	sub    %edx,%eax
  a9:	66 89 45 ea          	mov    %ax,-0x16(%rbp)
  ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b1:	8b 55 ec             	mov    -0x14(%rbp),%edx
  b4:	48 83 c2 14          	add    $0x14,%rdx
  b8:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  bd:	48 89 c7             	mov    %rax,%rdi
  c0:	e8 00 00 00 00       	call   c5 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0xc5>
  c5:	66 39 45 e6          	cmp    %ax,-0x1a(%rbp)
  c9:	72 2a                	jb     f5 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0xf5>
  cb:	0f bf 5d ea          	movswl -0x16(%rbp),%ebx
  cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d3:	8b 55 ec             	mov    -0x14(%rbp),%edx
  d6:	48 83 c2 14          	add    $0x14,%rdx
  da:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	e8 00 00 00 00       	call   e7 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0xe7>
  e7:	0f b7 c0             	movzwl %ax,%eax
  ea:	39 c3                	cmp    %eax,%ebx
  ec:	7d 07                	jge    f5 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0xf5>
  ee:	b8 01 00 00 00       	mov    $0x1,%eax
  f3:	eb 05                	jmp    fa <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0xfa>
  f5:	b8 00 00 00 00       	mov    $0x0,%eax
  fa:	84 c0                	test   %al,%al
  fc:	74 57                	je     155 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x155>
  fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 102:	8b 55 ec             	mov    -0x14(%rbp),%edx
 105:	48 83 c2 18          	add    $0x18,%rdx
 109:	48 8b 54 d0 08       	mov    0x8(%rax,%rdx,8),%rdx
 10e:	48 0f bf 45 ea       	movswq -0x16(%rbp),%rax
 113:	48 c1 e0 02          	shl    $0x2,%rax
 117:	48 01 d0             	add    %rdx,%rax
 11a:	0f b6 50 02          	movzbl 0x2(%rax),%edx
 11e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 122:	88 50 02             	mov    %dl,0x2(%rax)
 125:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 129:	8b 55 ec             	mov    -0x14(%rbp),%edx
 12c:	48 83 c2 18          	add    $0x18,%rdx
 130:	48 8b 54 d0 08       	mov    0x8(%rax,%rdx,8),%rdx
 135:	48 0f bf 45 ea       	movswq -0x16(%rbp),%rax
 13a:	48 c1 e0 02          	shl    $0x2,%rax
 13e:	48 01 d0             	add    %rdx,%rax
 141:	0f b7 10             	movzwl (%rax),%edx
 144:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 148:	66 89 10             	mov    %dx,(%rax)
 14b:	b8 01 00 00 00       	mov    $0x1,%eax
 150:	e9 1c 01 00 00       	jmp    271 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x271>
 155:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
 159:	83 7d ec 03          	cmpl   $0x3,-0x14(%rbp)
 15d:	0f 86 f4 fe ff ff    	jbe    57 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x57>
 163:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 167:	0f b7 50 0c          	movzwl 0xc(%rax),%edx
 16b:	0f b7 45 e6          	movzwl -0x1a(%rbp),%eax
 16f:	29 d0                	sub    %edx,%eax
 171:	66 89 45 e8          	mov    %ax,-0x18(%rbp)
 175:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 179:	0f b6 40 08          	movzbl 0x8(%rax),%eax
 17d:	84 c0                	test   %al,%al
 17f:	74 68                	je     1e9 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x1e9>
 181:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 185:	0f b7 40 0c          	movzwl 0xc(%rax),%eax
 189:	66 39 45 e6          	cmp    %ax,-0x1a(%rbp)
 18d:	72 5a                	jb     1e9 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x1e9>
 18f:	0f bf 55 e8          	movswl -0x18(%rbp),%edx
 193:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 197:	0f b7 40 0e          	movzwl 0xe(%rax),%eax
 19b:	0f b7 c0             	movzwl %ax,%eax
 19e:	39 c2                	cmp    %eax,%edx
 1a0:	7d 47                	jge    1e9 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x1e9>
 1a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a6:	48 8b 50 18          	mov    0x18(%rax),%rdx
 1aa:	48 0f bf 45 e8       	movswq -0x18(%rbp),%rax
 1af:	48 c1 e0 02          	shl    $0x2,%rax
 1b3:	48 01 d0             	add    %rdx,%rax
 1b6:	0f b6 50 02          	movzbl 0x2(%rax),%edx
 1ba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1be:	88 50 02             	mov    %dl,0x2(%rax)
 1c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1c5:	48 8b 50 18          	mov    0x18(%rax),%rdx
 1c9:	48 0f bf 45 e8       	movswq -0x18(%rbp),%rax
 1ce:	48 c1 e0 02          	shl    $0x2,%rax
 1d2:	48 01 d0             	add    %rdx,%rax
 1d5:	0f b7 10             	movzwl (%rax),%edx
 1d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1dc:	66 89 10             	mov    %dx,(%rax)
 1df:	b8 01 00 00 00       	mov    $0x1,%eax
 1e4:	e9 88 00 00 00       	jmp    271 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x271>
 1e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ed:	0f b7 50 20          	movzwl 0x20(%rax),%edx
 1f1:	0f b7 45 e6          	movzwl -0x1a(%rbp),%eax
 1f5:	29 d0                	sub    %edx,%eax
 1f7:	66 89 45 e8          	mov    %ax,-0x18(%rbp)
 1fb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ff:	0f b6 40 09          	movzbl 0x9(%rax),%eax
 203:	84 c0                	test   %al,%al
 205:	74 65                	je     26c <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x26c>
 207:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 20b:	0f b7 40 20          	movzwl 0x20(%rax),%eax
 20f:	66 39 45 e6          	cmp    %ax,-0x1a(%rbp)
 213:	72 57                	jb     26c <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x26c>
 215:	0f bf 55 e8          	movswl -0x18(%rbp),%edx
 219:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 21d:	0f b7 40 22          	movzwl 0x22(%rax),%eax
 221:	0f b7 c0             	movzwl %ax,%eax
 224:	39 c2                	cmp    %eax,%edx
 226:	7d 44                	jge    26c <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x26c>
 228:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 22c:	48 8b 50 30          	mov    0x30(%rax),%rdx
 230:	48 0f bf 45 e8       	movswq -0x18(%rbp),%rax
 235:	48 c1 e0 02          	shl    $0x2,%rax
 239:	48 01 d0             	add    %rdx,%rax
 23c:	0f b6 50 02          	movzbl 0x2(%rax),%edx
 240:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 244:	88 50 02             	mov    %dl,0x2(%rax)
 247:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 24b:	48 8b 50 30          	mov    0x30(%rax),%rdx
 24f:	48 0f bf 45 e8       	movswq -0x18(%rbp),%rax
 254:	48 c1 e0 02          	shl    $0x2,%rax
 258:	48 01 d0             	add    %rdx,%rax
 25b:	0f b7 10             	movzwl (%rax),%edx
 25e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 262:	66 89 10             	mov    %dx,(%rax)
 265:	b8 01 00 00 00       	mov    $0x1,%eax
 26a:	eb 05                	jmp    271 <SlushDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x271>
 26c:	b8 00 00 00 00       	mov    $0x0,%eax
 271:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 275:	c9                   	leave  
 276:	c3                   	ret    

Disassembly of section .text._ZSt3minItERKT_S2_S2_:

0000000000000000 <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	0f b7 10             	movzwl (%rax),%edx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	0f b7 00             	movzwl (%rax),%eax
  1e:	66 39 c2             	cmp    %ax,%dx
  21:	73 06                	jae    29 <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)+0x29>
  23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  27:	eb 04                	jmp    2d <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)+0x2d>
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	5d                   	pop    %rbp
  2e:	c3                   	ret    

Disassembly of section .text._ZSt3maxItERKT_S2_S2_:

0000000000000000 <unsigned short const& std::max<unsigned short>(unsigned short const&, unsigned short const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b7 10             	movzwl (%rax),%edx
  17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1b:	0f b7 00             	movzwl (%rax),%eax
  1e:	66 39 c2             	cmp    %ax,%dx
  21:	73 06                	jae    29 <unsigned short const& std::max<unsigned short>(unsigned short const&, unsigned short const&)+0x29>
  23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  27:	eb 04                	jmp    2d <unsigned short const& std::max<unsigned short>(unsigned short const&, unsigned short const&)+0x2d>
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	5d                   	pop    %rbp
  2e:	c3                   	ret    

slushdmxparamsconst.o:     file format elf64-x86-64


slushdmxparams.o:     file format elf64-x86-64


Disassembly of section .text._ZN8SlushDmx13SetUseSpiBusyEb:

0000000000000000 <SlushDmx::SetUseSpiBusy(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	40 88 77 40          	mov    %sil,0x40(%rdi)
   8:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmx23SetDmxStartAddressPortAEt:

0000000000000000 <SlushDmx::SetDmxStartAddressPortA(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	66 89 77 0c          	mov    %si,0xc(%rdi)
   8:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmx20SetDmxFootprintPortAEt:

0000000000000000 <SlushDmx::SetDmxFootprintPortA(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	66 89 77 0e          	mov    %si,0xe(%rdi)
   8:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmx23SetDmxStartAddressPortBEt:

0000000000000000 <SlushDmx::SetDmxStartAddressPortB(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	66 89 77 20          	mov    %si,0x20(%rdi)
   8:	c3                   	ret    

Disassembly of section .text._ZN8SlushDmx20SetDmxFootprintPortBEt:

0000000000000000 <SlushDmx::SetDmxFootprintPortB(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	66 89 77 22          	mov    %si,0x22(%rdi)
   8:	c3                   	ret    

Disassembly of section .text._ZNK14SlushDmxParams9isMaskSetEj:

0000000000000000 <SlushDmxParams::isMaskSet(unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	8b 47 08             	mov    0x8(%rdi),%eax
   7:	21 f0                	and    %esi,%eax
   9:	39 f0                	cmp    %esi,%eax
   b:	0f 94 c0             	sete   %al
   e:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder7GetSizeEv:

0000000000000000 <PropertiesBuilder::GetSize()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	80 7f 0c 00          	cmpb   $0x0,0xc(%rdi)
   8:	74 1b                	je     25 <PropertiesBuilder::GetSize()+0x25>
   a:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
   e:	48 8b 17             	mov    (%rdi),%rdx
  11:	c6 44 02 ff 7d       	movb   $0x7d,-0x1(%rdx,%rax,1)
  16:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  1a:	48 8b 17             	mov    (%rdi),%rdx
  1d:	c6 04 02 7d          	movb   $0x7d,(%rdx,%rax,1)
  21:	66 ff 47 0a          	incw   0xa(%rdi)
  25:	66 8b 47 0a          	mov    0xa(%rdi),%ax
  29:	c3                   	ret    

Disassembly of section .text._ZN14SlushDmxParamsC2EP19SlushDmxParamsStore:

0000000000000000 <SlushDmxParams::SlushDmxParams(SlushDmxParamsStore*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 89 37             	mov    %rsi,(%rdi)
   7:	ba 10 00 00 00       	mov    $0x10,%edx
   c:	48 83 c7 13          	add    $0x13,%rdi
  10:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 17 <SlushDmxParams::SlushDmxParams(SlushDmxParamsStore*)+0x17>
  17:	e9 00 00 00 00       	jmp    1c <.LC2+0xc>

Disassembly of section .text._ZN14SlushDmxParams4LoadEv:

0000000000000000 <SlushDmxParams::Load()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	48 89 fa             	mov    %rdi,%rdx
   9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10 <SlushDmxParams::Load()+0x10>
  10:	55                   	push   %rbp
  11:	53                   	push   %rbx
  12:	48 89 fb             	mov    %rdi,%rbx
  15:	48 83 ec 20          	sub    $0x20,%rsp
  19:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  20:	00 00 
  22:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  27:	31 c0                	xor    %eax,%eax
  29:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  30:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  35:	48 89 ef             	mov    %rbp,%rdi
  38:	e8 00 00 00 00       	call   3d <SlushDmxParams::Load()+0x3d>
  3d:	48 89 ef             	mov    %rbp,%rdi
  40:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 47 <SlushDmxParams::Load()+0x47>
  47:	e8 00 00 00 00       	call   4c <SlushDmxParams::Load()+0x4c>
  4c:	48 8b 3b             	mov    (%rbx),%rdi
  4f:	84 c0                	test   %al,%al
  51:	41 89 c4             	mov    %eax,%r12d
  54:	74 11                	je     67 <SlushDmxParams::Load()+0x67>
  56:	48 85 ff             	test   %rdi,%rdi
  59:	74 1e                	je     79 <SlushDmxParams::Load()+0x79>
  5b:	48 8b 07             	mov    (%rdi),%rax
  5e:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  62:	ff 50 10             	call   *0x10(%rax)
  65:	eb 12                	jmp    79 <SlushDmxParams::Load()+0x79>
  67:	48 85 ff             	test   %rdi,%rdi
  6a:	74 0d                	je     79 <SlushDmxParams::Load()+0x79>
  6c:	48 8b 07             	mov    (%rdi),%rax
  6f:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  73:	41 b4 01             	mov    $0x1,%r12b
  76:	ff 50 18             	call   *0x18(%rax)
  79:	48 89 ef             	mov    %rbp,%rdi
  7c:	e8 00 00 00 00       	call   81 <SlushDmxParams::Load()+0x81>
  81:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  86:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8d:	00 00 
  8f:	74 05                	je     96 <SlushDmxParams::Load()+0x96>
  91:	e8 00 00 00 00       	call   96 <SlushDmxParams::Load()+0x96>
  96:	48 83 c4 20          	add    $0x20,%rsp
  9a:	44 89 e0             	mov    %r12d,%eax
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	41 5c                	pop    %r12
  a1:	c3                   	ret    

Disassembly of section .text._ZN14SlushDmxParams4LoadEPKcj:

0000000000000000 <SlushDmxParams::Load(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	55                   	push   %rbp
   9:	53                   	push   %rbx
   a:	48 83 ec 28          	sub    $0x28,%rsp
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  22:	74 4a                	je     6e <SlushDmxParams::Load(char const*, unsigned int)+0x6e>
  24:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  2b:	48 89 fb             	mov    %rdi,%rbx
  2e:	49 89 f4             	mov    %rsi,%r12
  31:	41 89 d5             	mov    %edx,%r13d
  34:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  39:	48 89 fa             	mov    %rdi,%rdx
  3c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 43 <SlushDmxParams::Load(char const*, unsigned int)+0x43>
  43:	48 89 ef             	mov    %rbp,%rdi
  46:	e8 00 00 00 00       	call   4b <SlushDmxParams::Load(char const*, unsigned int)+0x4b>
  4b:	44 89 ea             	mov    %r13d,%edx
  4e:	4c 89 e6             	mov    %r12,%rsi
  51:	48 89 ef             	mov    %rbp,%rdi
  54:	e8 00 00 00 00       	call   59 <SlushDmxParams::Load(char const*, unsigned int)+0x59>
  59:	48 8b 3b             	mov    (%rbx),%rdi
  5c:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  60:	48 8b 07             	mov    (%rdi),%rax
  63:	ff 50 10             	call   *0x10(%rax)
  66:	48 89 ef             	mov    %rbp,%rdi
  69:	e8 00 00 00 00       	call   6e <SlushDmxParams::Load(char const*, unsigned int)+0x6e>
  6e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  73:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  7a:	00 00 
  7c:	74 05                	je     83 <SlushDmxParams::Load(char const*, unsigned int)+0x83>
  7e:	e8 00 00 00 00       	call   83 <SlushDmxParams::Load(char const*, unsigned int)+0x83>
  83:	48 83 c4 28          	add    $0x28,%rsp
  87:	5b                   	pop    %rbx
  88:	5d                   	pop    %rbp
  89:	41 5c                	pop    %r12
  8b:	41 5d                	pop    %r13
  8d:	c3                   	ret    

Disassembly of section .text._ZN14SlushDmxParams16callbackFunctionEPKc:

0000000000000000 <SlushDmxParams::callbackFunction(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	55                   	push   %rbp
   7:	48 89 f5             	mov    %rsi,%rbp
   a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 11 <SlushDmxParams::callbackFunction(char const*)+0x11>
  11:	53                   	push   %rbx
  12:	48 89 fb             	mov    %rdi,%rbx
  15:	48 89 ef             	mov    %rbp,%rdi
  18:	48 83 ec 10          	sub    $0x10,%rsp
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8d 54 24 05       	lea    0x5(%rsp),%rdx
  31:	e8 00 00 00 00       	call   36 <SlushDmxParams::callbackFunction(char const*)+0x36>
  36:	85 c0                	test   %eax,%eax
  38:	75 14                	jne    4e <SlushDmxParams::callbackFunction(char const*)+0x4e>
  3a:	80 7c 24 05 00       	cmpb   $0x0,0x5(%rsp)
  3f:	74 0d                	je     4e <SlushDmxParams::callbackFunction(char const*)+0x4e>
  41:	83 4b 08 01          	orl    $0x1,0x8(%rbx)
  45:	c6 43 0c 01          	movb   $0x1,0xc(%rbx)
  49:	e9 ba 00 00 00       	jmp    108 <SlushDmxParams::callbackFunction(char const*)+0x108>
  4e:	4c 8d 64 24 06       	lea    0x6(%rsp),%r12
  53:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5a <SlushDmxParams::callbackFunction(char const*)+0x5a>
  5a:	48 89 ef             	mov    %rbp,%rdi
  5d:	4c 89 e2             	mov    %r12,%rdx
  60:	e8 00 00 00 00       	call   65 <SlushDmxParams::callbackFunction(char const*)+0x65>
  65:	85 c0                	test   %eax,%eax
  67:	75 1c                	jne    85 <SlushDmxParams::callbackFunction(char const*)+0x85>
  69:	66 8b 44 24 06       	mov    0x6(%rsp),%ax
  6e:	66 3d 00 02          	cmp    $0x200,%ax
  72:	0f 87 90 00 00 00    	ja     108 <SlushDmxParams::callbackFunction(char const*)+0x108>
  78:	83 4b 08 02          	orl    $0x2,0x8(%rbx)
  7c:	66 89 43 0d          	mov    %ax,0xd(%rbx)
  80:	e9 83 00 00 00       	jmp    108 <SlushDmxParams::callbackFunction(char const*)+0x108>
  85:	4c 89 e2             	mov    %r12,%rdx
  88:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 8f <SlushDmxParams::callbackFunction(char const*)+0x8f>
  8f:	48 89 ef             	mov    %rbp,%rdi
  92:	e8 00 00 00 00       	call   97 <SlushDmxParams::callbackFunction(char const*)+0x97>
  97:	85 c0                	test   %eax,%eax
  99:	75 15                	jne    b0 <SlushDmxParams::callbackFunction(char const*)+0xb0>
  9b:	66 8b 44 24 06       	mov    0x6(%rsp),%ax
  a0:	66 3d 00 02          	cmp    $0x200,%ax
  a4:	77 62                	ja     108 <SlushDmxParams::callbackFunction(char const*)+0x108>
  a6:	83 4b 08 08          	orl    $0x8,0x8(%rbx)
  aa:	66 89 43 10          	mov    %ax,0x10(%rbx)
  ae:	eb 58                	jmp    108 <SlushDmxParams::callbackFunction(char const*)+0x108>
  b0:	4c 89 e2             	mov    %r12,%rdx
  b3:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # ba <SlushDmxParams::callbackFunction(char const*)+0xba>
  ba:	48 89 ef             	mov    %rbp,%rdi
  bd:	e8 00 00 00 00       	call   c2 <SlushDmxParams::callbackFunction(char const*)+0xc2>
  c2:	85 c0                	test   %eax,%eax
  c4:	75 17                	jne    dd <SlushDmxParams::callbackFunction(char const*)+0xdd>
  c6:	66 8b 44 24 06       	mov    0x6(%rsp),%ax
  cb:	8d 50 ff             	lea    -0x1(%rax),%edx
  ce:	66 83 fa 07          	cmp    $0x7,%dx
  d2:	77 34                	ja     108 <SlushDmxParams::callbackFunction(char const*)+0x108>
  d4:	83 4b 08 04          	orl    $0x4,0x8(%rbx)
  d8:	88 43 0f             	mov    %al,0xf(%rbx)
  db:	eb 2b                	jmp    108 <SlushDmxParams::callbackFunction(char const*)+0x108>
  dd:	4c 89 e2             	mov    %r12,%rdx
  e0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # e7 <SlushDmxParams::callbackFunction(char const*)+0xe7>
  e7:	48 89 ef             	mov    %rbp,%rdi
  ea:	e8 00 00 00 00       	call   ef <SlushDmxParams::callbackFunction(char const*)+0xef>
  ef:	85 c0                	test   %eax,%eax
  f1:	75 15                	jne    108 <SlushDmxParams::callbackFunction(char const*)+0x108>
  f3:	66 8b 44 24 06       	mov    0x6(%rsp),%ax
  f8:	8d 50 ff             	lea    -0x1(%rax),%edx
  fb:	66 83 fa 07          	cmp    $0x7,%dx
  ff:	77 07                	ja     108 <SlushDmxParams::callbackFunction(char const*)+0x108>
 101:	83 4b 08 10          	orl    $0x10,0x8(%rbx)
 105:	88 43 12             	mov    %al,0x12(%rbx)
 108:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
 10d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 114:	00 00 
 116:	74 05                	je     11d <SlushDmxParams::callbackFunction(char const*)+0x11d>
 118:	e8 00 00 00 00       	call   11d <SlushDmxParams::callbackFunction(char const*)+0x11d>
 11d:	48 83 c4 10          	add    $0x10,%rsp
 121:	5b                   	pop    %rbx
 122:	5d                   	pop    %rbp
 123:	41 5c                	pop    %r12
 125:	c3                   	ret    

Disassembly of section .text._ZN14SlushDmxParams3SetEP8SlushDmx:

0000000000000000 <SlushDmxParams::Set(SlushDmx*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 f5             	mov    %rsi,%rbp
   8:	be 01 00 00 00       	mov    $0x1,%esi
   d:	53                   	push   %rbx
   e:	48 89 fb             	mov    %rdi,%rbx
  11:	51                   	push   %rcx
  12:	e8 00 00 00 00       	call   17 <SlushDmxParams::Set(SlushDmx*)+0x17>
  17:	84 c0                	test   %al,%al
  19:	74 12                	je     2d <SlushDmxParams::Set(SlushDmx*)+0x2d>
  1b:	31 f6                	xor    %esi,%esi
  1d:	80 7b 0c 01          	cmpb   $0x1,0xc(%rbx)
  21:	48 89 ef             	mov    %rbp,%rdi
  24:	40 0f 94 c6          	sete   %sil
  28:	e8 00 00 00 00       	call   2d <SlushDmxParams::Set(SlushDmx*)+0x2d>
  2d:	be 02 00 00 00       	mov    $0x2,%esi
  32:	48 89 df             	mov    %rbx,%rdi
  35:	e8 00 00 00 00       	call   3a <SlushDmxParams::Set(SlushDmx*)+0x3a>
  3a:	84 c0                	test   %al,%al
  3c:	74 0c                	je     4a <SlushDmxParams::Set(SlushDmx*)+0x4a>
  3e:	0f b7 73 0d          	movzwl 0xd(%rbx),%esi
  42:	48 89 ef             	mov    %rbp,%rdi
  45:	e8 00 00 00 00       	call   4a <SlushDmxParams::Set(SlushDmx*)+0x4a>
  4a:	be 04 00 00 00       	mov    $0x4,%esi
  4f:	48 89 df             	mov    %rbx,%rdi
  52:	e8 00 00 00 00       	call   57 <SlushDmxParams::Set(SlushDmx*)+0x57>
  57:	84 c0                	test   %al,%al
  59:	74 0c                	je     67 <SlushDmxParams::Set(SlushDmx*)+0x67>
  5b:	0f b6 73 0f          	movzbl 0xf(%rbx),%esi
  5f:	48 89 ef             	mov    %rbp,%rdi
  62:	e8 00 00 00 00       	call   67 <SlushDmxParams::Set(SlushDmx*)+0x67>
  67:	be 08 00 00 00       	mov    $0x8,%esi
  6c:	48 89 df             	mov    %rbx,%rdi
  6f:	e8 00 00 00 00       	call   74 <SlushDmxParams::Set(SlushDmx*)+0x74>
  74:	84 c0                	test   %al,%al
  76:	74 0c                	je     84 <SlushDmxParams::Set(SlushDmx*)+0x84>
  78:	0f b7 73 10          	movzwl 0x10(%rbx),%esi
  7c:	48 89 ef             	mov    %rbp,%rdi
  7f:	e8 00 00 00 00       	call   84 <SlushDmxParams::Set(SlushDmx*)+0x84>
  84:	be 10 00 00 00       	mov    $0x10,%esi
  89:	48 89 df             	mov    %rbx,%rdi
  8c:	e8 00 00 00 00       	call   91 <SlushDmxParams::Set(SlushDmx*)+0x91>
  91:	84 c0                	test   %al,%al
  93:	74 0f                	je     a4 <SlushDmxParams::Set(SlushDmx*)+0xa4>
  95:	0f b6 73 12          	movzbl 0x12(%rbx),%esi
  99:	48 89 ef             	mov    %rbp,%rdi
  9c:	5a                   	pop    %rdx
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	e9 00 00 00 00       	jmp    a4 <SlushDmxParams::Set(SlushDmx*)+0xa4>
  a4:	58                   	pop    %rax
  a5:	5b                   	pop    %rbx
  a6:	5d                   	pop    %rbp
  a7:	c3                   	ret    

Disassembly of section .text._ZN14SlushDmxParams7BuilderEPK15TSlushDmxParamsPcjRj:

0000000000000000 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 89 ce             	mov    %ecx,%r14d
   9:	41 55                	push   %r13
   b:	49 89 d5             	mov    %rdx,%r13
   e:	41 54                	push   %r12
  10:	4d 89 c4             	mov    %r8,%r12
  13:	4c 8d 47 08          	lea    0x8(%rdi),%r8
  17:	55                   	push   %rbp
  18:	53                   	push   %rbx
  19:	48 89 fb             	mov    %rdi,%rbx
  1c:	48 83 ec 20          	sub    $0x20,%rsp
  20:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  27:	00 00 
  29:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2e:	31 c0                	xor    %eax,%eax
  30:	48 85 f6             	test   %rsi,%rsi
  33:	74 0c                	je     41 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x41>
  35:	b9 0b 00 00 00       	mov    $0xb,%ecx
  3a:	4c 89 c7             	mov    %r8,%rdi
  3d:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  3f:	eb 0c                	jmp    4d <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x4d>
  41:	48 8b 3f             	mov    (%rdi),%rdi
  44:	4c 89 c6             	mov    %r8,%rsi
  47:	48 8b 07             	mov    (%rdi),%rax
  4a:	ff 50 18             	call   *0x18(%rax)
  4d:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  52:	44 89 f1             	mov    %r14d,%ecx
  55:	4c 89 ea             	mov    %r13,%rdx
  58:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5f <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x5f>
  5f:	48 89 ef             	mov    %rbp,%rdi
  62:	e8 00 00 00 00       	call   67 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x67>
  67:	be 01 00 00 00       	mov    $0x1,%esi
  6c:	48 89 df             	mov    %rbx,%rdi
  6f:	e8 00 00 00 00       	call   74 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x74>
  74:	0f b6 53 0c          	movzbl 0xc(%rbx),%edx
  78:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  7e:	48 89 ef             	mov    %rbp,%rdi
  81:	0f b6 c8             	movzbl %al,%ecx
  84:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 8b <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x8b>
  8b:	e8 00 00 00 00       	call   90 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x90>
  90:	be 02 00 00 00       	mov    $0x2,%esi
  95:	48 89 df             	mov    %rbx,%rdi
  98:	e8 00 00 00 00       	call   9d <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x9d>
  9d:	0f b7 53 0d          	movzwl 0xd(%rbx),%edx
  a1:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  a7:	48 89 ef             	mov    %rbp,%rdi
  aa:	0f b6 c8             	movzbl %al,%ecx
  ad:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # b4 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0xb4>
  b4:	e8 00 00 00 00       	call   b9 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0xb9>
  b9:	be 04 00 00 00       	mov    $0x4,%esi
  be:	48 89 df             	mov    %rbx,%rdi
  c1:	e8 00 00 00 00       	call   c6 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0xc6>
  c6:	0f b6 53 0f          	movzbl 0xf(%rbx),%edx
  ca:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  d0:	48 89 ef             	mov    %rbp,%rdi
  d3:	0f b6 c8             	movzbl %al,%ecx
  d6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # dd <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0xdd>
  dd:	e8 00 00 00 00       	call   e2 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0xe2>
  e2:	be 08 00 00 00       	mov    $0x8,%esi
  e7:	48 89 df             	mov    %rbx,%rdi
  ea:	e8 00 00 00 00       	call   ef <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0xef>
  ef:	0f b7 53 10          	movzwl 0x10(%rbx),%edx
  f3:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  f9:	48 89 ef             	mov    %rbp,%rdi
  fc:	0f b6 c8             	movzbl %al,%ecx
  ff:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 106 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x106>
 106:	e8 00 00 00 00       	call   10b <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x10b>
 10b:	be 10 00 00 00       	mov    $0x10,%esi
 110:	48 89 df             	mov    %rbx,%rdi
 113:	e8 00 00 00 00       	call   118 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x118>
 118:	0f b6 53 12          	movzbl 0x12(%rbx),%edx
 11c:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 122:	48 89 ef             	mov    %rbp,%rdi
 125:	0f b6 c8             	movzbl %al,%ecx
 128:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 12f <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x12f>
 12f:	e8 00 00 00 00       	call   134 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x134>
 134:	48 89 ef             	mov    %rbp,%rdi
 137:	e8 00 00 00 00       	call   13c <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x13c>
 13c:	0f b7 c0             	movzwl %ax,%eax
 13f:	41 89 04 24          	mov    %eax,(%r12)
 143:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
 148:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 14f:	00 00 
 151:	74 05                	je     158 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x158>
 153:	e8 00 00 00 00       	call   158 <SlushDmxParams::Builder(TSlushDmxParams const*, char*, unsigned int, unsigned int&)+0x158>
 158:	48 83 c4 20          	add    $0x20,%rsp
 15c:	5b                   	pop    %rbx
 15d:	5d                   	pop    %rbp
 15e:	41 5c                	pop    %r12
 160:	41 5d                	pop    %r13
 162:	41 5e                	pop    %r14
 164:	c3                   	ret    

Disassembly of section .text._ZN14SlushDmxParams4SaveEPcjRj:

0000000000000000 <SlushDmxParams::Save(char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 3f 00          	cmpq   $0x0,(%rdi)
   8:	49 89 c8             	mov    %rcx,%r8
   b:	75 07                	jne    14 <SlushDmxParams::Save(char*, unsigned int, unsigned int&)+0x14>
   d:	c7 01 00 00 00 00    	movl   $0x0,(%rcx)
  13:	c3                   	ret    
  14:	89 d1                	mov    %edx,%ecx
  16:	48 89 f2             	mov    %rsi,%rdx
  19:	31 f6                	xor    %esi,%esi
  1b:	e9 00 00 00 00       	jmp    20 <.LC2+0x10>

Disassembly of section .text._ZN14SlushDmxParams4DumpEv:

0000000000000000 <SlushDmxParams::Dump()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	c3                   	ret    

Disassembly of section .text._ZN14SlushDmxParams22staticCallbackFunctionEPvPKc:

0000000000000000 <SlushDmxParams::staticCallbackFunction(void*, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	e9 00 00 00 00       	jmp    9 <.LC1>

Disassembly of section .text._ZN17PropertiesBuilder3AddIhEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 52                	push   %r10
   8:	49 89 f2             	mov    %rsi,%r10
   b:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 33                	jmp    4f <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x4f>
  1c:	89 d0                	mov    %edx,%eax
  1e:	48 89 fb             	mov    %rdi,%rbx
  21:	0f b7 d6             	movzwl %si,%edx
  24:	48 03 37             	add    (%rdi),%rsi
  27:	57                   	push   %rdi
  28:	29 d5                	sub    %edx,%ebp
  2a:	44 0f b6 c9          	movzbl %cl,%r9d
  2e:	48 89 df             	mov    %rbx,%rdi
  31:	41 50                	push   %r8
  33:	4c 89 d1             	mov    %r10,%rcx
  36:	44 0f b6 c0          	movzbl %al,%r8d
  3a:	89 ea                	mov    %ebp,%edx
  3c:	e8 00 00 00 00       	call   41 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x41>
  41:	41 58                	pop    %r8
  43:	41 59                	pop    %r9
  45:	39 c5                	cmp    %eax,%ebp
  47:	7c cf                	jl     18 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x18>
  49:	66 01 43 0a          	add    %ax,0xa(%rbx)
  4d:	b0 01                	mov    $0x1,%al
  4f:	5a                   	pop    %rdx
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddItEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 52                	push   %r10
   8:	49 89 f2             	mov    %rsi,%r10
   b:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 33                	jmp    4f <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x4f>
  1c:	89 d0                	mov    %edx,%eax
  1e:	48 89 fb             	mov    %rdi,%rbx
  21:	0f b7 d6             	movzwl %si,%edx
  24:	48 03 37             	add    (%rdi),%rsi
  27:	57                   	push   %rdi
  28:	29 d5                	sub    %edx,%ebp
  2a:	44 0f b6 c9          	movzbl %cl,%r9d
  2e:	48 89 df             	mov    %rbx,%rdi
  31:	41 50                	push   %r8
  33:	4c 89 d1             	mov    %r10,%rcx
  36:	44 0f b7 c0          	movzwl %ax,%r8d
  3a:	89 ea                	mov    %ebp,%edx
  3c:	e8 00 00 00 00       	call   41 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x41>
  41:	41 58                	pop    %r8
  43:	41 59                	pop    %r9
  45:	39 c5                	cmp    %eax,%ebp
  47:	7c cf                	jl     18 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x18>
  49:	66 01 43 0a          	add    %ax,0xa(%rbx)
  4d:	b0 01                	mov    $0x1,%al
  4f:	5a                   	pop    %rdx
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIhEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fa             	mov    %rdi,%r10
   7:	45 0f b6 c0          	movzbl %r8b,%r8d
   b:	48 89 f7             	mov    %rsi,%rdi
   e:	89 d6                	mov    %edx,%esi
  10:	41 8a 42 0c          	mov    0xc(%r10),%al
  14:	45 84 c9             	test   %r9b,%r9b
  17:	75 06                	jne    1f <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x1f>
  19:	84 c0                	test   %al,%al
  1b:	75 0d                	jne    2a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x2a>
  1d:	eb 14                	jmp    33 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x33>
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x26>
  26:	84 c0                	test   %al,%al
  28:	74 10                	je     3a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x3a>
  2a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 31 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x31>
  31:	eb 07                	jmp    3a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x3a>
  33:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x3a>
  3a:	31 c0                	xor    %eax,%eax
  3c:	e9 00 00 00 00       	jmp    41 <.LC2+0x31>

Disassembly of section .text._ZN17PropertiesBuilder8add_partItEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fa             	mov    %rdi,%r10
   7:	45 0f b7 c0          	movzwl %r8w,%r8d
   b:	48 89 f7             	mov    %rsi,%rdi
   e:	89 d6                	mov    %edx,%esi
  10:	41 8a 42 0c          	mov    0xc(%r10),%al
  14:	45 84 c9             	test   %r9b,%r9b
  17:	75 06                	jne    1f <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x1f>
  19:	84 c0                	test   %al,%al
  1b:	75 0d                	jne    2a <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x2a>
  1d:	eb 14                	jmp    33 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x33>
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x26>
  26:	84 c0                	test   %al,%al
  28:	74 10                	je     3a <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x3a>
  2a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 31 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x31>
  31:	eb 07                	jmp    3a <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x3a>
  33:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x3a>
  3a:	31 c0                	xor    %eax,%eax
  3c:	e9 00 00 00 00       	jmp    41 <.LC2+0x31>

sparkfundmxconst.o:     file format elf64-x86-64


sparkfundmx.o:     file format elf64-x86-64


Disassembly of section .text._ZN8LightSetC2Ev:

0000000000000000 <LightSet::LightSet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13 <LightSet::LightSet()+0x13>
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	ret    

Disassembly of section .text._ZN8LightSetD2Ev:

0000000000000000 <LightSet::~LightSet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13 <LightSet::~LightSet()+0x13>
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	ret    

Disassembly of section .text._ZN8LightSetD0Ev:

0000000000000000 <LightSet::~LightSet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <LightSet::~LightSet()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <LightSet::~LightSet()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN8LightSet8BlackoutEb:

0000000000000000 <LightSet::Blackout(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	90                   	nop
  12:	5d                   	pop    %rbp
  13:	c3                   	ret    

Disassembly of section .text._ZN8LightSet6FullOnEv:

0000000000000000 <LightSet::FullOn()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZNK10ModeParams10GetDmxModeEv:

0000000000000000 <ModeParams::GetDmxMode() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  14:	0f b6 c0             	movzbl %al,%eax
  17:	5d                   	pop    %rbp
  18:	c3                   	ret    

Disassembly of section .text._ZNK10ModeParams18GetDmxStartAddressEv:

0000000000000000 <ModeParams::GetDmxStartAddress() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b7 40 0d          	movzwl 0xd(%rax),%eax
  14:	5d                   	pop    %rbp
  15:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModes7GetModeEv:

0000000000000000 <L6470DmxModes::GetMode()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 40 04             	mov    0x4(%rax),%eax
  13:	5d                   	pop    %rbp
  14:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModes18GetDmxStartAddressEv:

0000000000000000 <L6470DmxModes::GetDmxStartAddress()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  14:	5d                   	pop    %rbp
  15:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModes18SetDmxStartAddressEt:

0000000000000000 <L6470DmxModes::SetDmxStartAddress(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
  12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  16:	0f b7 55 f4          	movzwl -0xc(%rbp),%edx
  1a:	66 89 50 08          	mov    %dx,0x8(%rax)
  1e:	90                   	nop
  1f:	5d                   	pop    %rbp
  20:	c3                   	ret    

Disassembly of section .text._ZN13L6470DmxModes15GetDmxFootPrintEv:

0000000000000000 <L6470DmxModes::GetDmxFootPrint()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  14:	5d                   	pop    %rbp
  15:	c3                   	ret    

Disassembly of section .text._ZN10AutoDriver14setMotorNumberEj:

0000000000000000 <AutoDriver::setMotorNumber(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	8b 55 f4             	mov    -0xc(%rbp),%edx
  16:	89 50 08             	mov    %edx,0x8(%rax)
  19:	90                   	nop
  1a:	5d                   	pop    %rbp
  1b:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmx18GetDmxStartAddressEv:

0000000000000000 <SparkFunDmx::GetDmxStartAddress()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b7 80 5a 01 00 00 	movzwl 0x15a(%rax),%eax
  17:	5d                   	pop    %rbp
  18:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmx15GetDmxFootprintEv:

0000000000000000 <SparkFunDmx::GetDmxFootprint()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b7 80 5c 01 00 00 	movzwl 0x15c(%rax),%eax
  17:	5d                   	pop    %rbp
  18:	c3                   	ret    

Disassembly of section .text.udelay:

0000000000000000 <udelay>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	89 7d fc             	mov    %edi,-0x4(%rbp)
   b:	90                   	nop
   c:	5d                   	pop    %rbp
   d:	c3                   	ret    

Disassembly of section .text.spi_begin:

0000000000000000 <spi_begin>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	90                   	nop
   5:	5d                   	pop    %rbp
   6:	c3                   	ret    

Disassembly of section .text.gpio_fsel:

0000000000000000 <gpio_fsel>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 fa                	mov    %edi,%edx
   6:	89 f0                	mov    %esi,%eax
   8:	88 55 fc             	mov    %dl,-0x4(%rbp)
   b:	88 45 f8             	mov    %al,-0x8(%rbp)
   e:	90                   	nop
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text.gpio_set:

0000000000000000 <gpio_set>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.gpio_clr:

0000000000000000 <gpio_clr>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # f <Hardware::Get()+0xf>
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmxC2Ev:

0000000000000000 <SparkFunDmx::SparkFunDmx()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <SparkFunDmx::SparkFunDmx()+0x1c>
  1c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 23 <SparkFunDmx::SparkFunDmx()+0x23>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 10             	mov    %rdx,(%rax)
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	66 c7 80 5a 01 00 00 	movw   $0xffff,0x15a(%rax)
  35:	ff ff 
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	66 c7 80 5c 01 00 00 	movw   $0x0,0x15c(%rax)
  42:	00 00 
  44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  48:	48 c7 80 60 01 00 00 	movq   $0x0,0x160(%rax)
  4f:	00 00 00 00 
  53:	b9 3e 00 00 00       	mov    $0x3e,%ecx
  58:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 5f <SparkFunDmx::SparkFunDmx()+0x5f>
  5f:	48 89 c2             	mov    %rax,%rdx
  62:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 69 <SparkFunDmx::SparkFunDmx()+0x69>
  69:	48 89 c6             	mov    %rax,%rsi
  6c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 73 <SparkFunDmx::SparkFunDmx()+0x73>
  73:	48 89 c7             	mov    %rax,%rdi
  76:	b8 00 00 00 00       	mov    $0x0,%eax
  7b:	e8 00 00 00 00       	call   80 <SparkFunDmx::SparkFunDmx()+0x80>
  80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  84:	c6 80 48 01 00 00 00 	movb   $0x0,0x148(%rax)
  8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8f:	c6 80 49 01 00 00 02 	movb   $0x2,0x149(%rax)
  96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9a:	c6 80 4a 01 00 00 00 	movb   $0x0,0x14a(%rax)
  a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a5:	c6 80 4b 01 00 00 00 	movb   $0x0,0x14b(%rax)
  ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b0:	c6 80 4c 01 00 00 00 	movb   $0x0,0x14c(%rax)
  b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bb:	c6 80 4d 01 00 00 00 	movb   $0x0,0x14d(%rax)
  c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c6:	c6 80 4e 01 00 00 00 	movb   $0x0,0x14e(%rax)
  cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d1:	c6 80 4f 01 00 00 00 	movb   $0x0,0x14f(%rax)
  d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  dc:	c6 80 50 01 00 00 02 	movb   $0x2,0x150(%rax)
  e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e7:	c6 80 51 01 00 00 00 	movb   $0x0,0x151(%rax)
  ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f2:	c6 80 52 01 00 00 00 	movb   $0x0,0x152(%rax)
  f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fd:	c6 80 53 01 00 00 00 	movb   $0x0,0x153(%rax)
 104:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 108:	c6 80 54 01 00 00 00 	movb   $0x0,0x154(%rax)
 10f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 113:	c6 80 55 01 00 00 00 	movb   $0x0,0x155(%rax)
 11a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 11e:	66 c7 80 56 01 00 00 	movw   $0x7,0x156(%rax)
 125:	07 00 
 127:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 12b:	66 c7 80 58 01 00 00 	movw   $0x0,0x158(%rax)
 132:	00 00 
 134:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
 13b:	eb 73                	jmp    1b0 <SparkFunDmx::SparkFunDmx()+0x1b0>
 13d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 141:	8b 55 fc             	mov    -0x4(%rbp),%edx
 144:	48 63 d2             	movslq %edx,%rdx
 147:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 14e:	00 00 
 150:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 154:	8b 55 fc             	mov    -0x4(%rbp),%edx
 157:	48 63 d2             	movslq %edx,%rdx
 15a:	48 83 c2 08          	add    $0x8,%rdx
 15e:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 165:	00 00 
 167:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 16b:	8b 55 fc             	mov    -0x4(%rbp),%edx
 16e:	48 63 d2             	movslq %edx,%rdx
 171:	48 83 c2 10          	add    $0x10,%rdx
 175:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 17c:	00 00 
 17e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 182:	8b 55 fc             	mov    -0x4(%rbp),%edx
 185:	48 63 d2             	movslq %edx,%rdx
 188:	48 83 c2 18          	add    $0x18,%rdx
 18c:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 193:	00 00 
 195:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 199:	8b 55 fc             	mov    -0x4(%rbp),%edx
 19c:	48 63 d2             	movslq %edx,%rdx
 19f:	48 83 c2 20          	add    $0x20,%rdx
 1a3:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 1aa:	00 00 
 1ac:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
 1b0:	83 7d fc 07          	cmpl   $0x7,-0x4(%rbp)
 1b4:	7e 87                	jle    13d <SparkFunDmx::SparkFunDmx()+0x13d>
 1b6:	b9 5d 00 00 00       	mov    $0x5d,%ecx
 1bb:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c2 <SparkFunDmx::SparkFunDmx()+0x1c2>
 1c2:	48 89 c2             	mov    %rax,%rdx
 1c5:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1cc <SparkFunDmx::SparkFunDmx()+0x1cc>
 1cc:	48 89 c6             	mov    %rax,%rsi
 1cf:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1d6 <SparkFunDmx::SparkFunDmx()+0x1d6>
 1d6:	48 89 c7             	mov    %rax,%rdi
 1d9:	b8 00 00 00 00       	mov    $0x0,%eax
 1de:	e8 00 00 00 00       	call   1e3 <SparkFunDmx::SparkFunDmx()+0x1e3>
 1e3:	90                   	nop
 1e4:	c9                   	leave  
 1e5:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmxD2Ev:

0000000000000000 <SparkFunDmx::~SparkFunDmx()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 18 <SparkFunDmx::~SparkFunDmx()+0x18>
  18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1c:	48 89 10             	mov    %rdx,(%rax)
  1f:	b9 61 00 00 00       	mov    $0x61,%ecx
  24:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2b <SparkFunDmx::~SparkFunDmx()+0x2b>
  2b:	48 89 c2             	mov    %rax,%rdx
  2e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 35 <SparkFunDmx::~SparkFunDmx()+0x35>
  35:	48 89 c6             	mov    %rax,%rsi
  38:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3f <SparkFunDmx::~SparkFunDmx()+0x3f>
  3f:	48 89 c7             	mov    %rax,%rdi
  42:	b8 00 00 00 00       	mov    $0x0,%eax
  47:	e8 00 00 00 00       	call   4c <SparkFunDmx::~SparkFunDmx()+0x4c>
  4c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  53:	e9 9a 01 00 00       	jmp    1f2 <SparkFunDmx::~SparkFunDmx()+0x1f2>
  58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  5f:	48 63 d2             	movslq %edx,%rdx
  62:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  67:	48 85 c0             	test   %rax,%rax
  6a:	74 36                	je     a2 <SparkFunDmx::~SparkFunDmx()+0xa2>
  6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  70:	8b 55 ec             	mov    -0x14(%rbp),%edx
  73:	48 63 d2             	movslq %edx,%rdx
  76:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  7b:	48 85 c0             	test   %rax,%rax
  7e:	74 0f                	je     8f <SparkFunDmx::~SparkFunDmx()+0x8f>
  80:	48 8b 10             	mov    (%rax),%rdx
  83:	48 83 c2 08          	add    $0x8,%rdx
  87:	48 8b 12             	mov    (%rdx),%rdx
  8a:	48 89 c7             	mov    %rax,%rdi
  8d:	ff d2                	call   *%rdx
  8f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  93:	8b 55 ec             	mov    -0x14(%rbp),%edx
  96:	48 63 d2             	movslq %edx,%rdx
  99:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
  a0:	00 00 
  a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a6:	8b 55 ec             	mov    -0x14(%rbp),%edx
  a9:	48 63 d2             	movslq %edx,%rdx
  ac:	48 83 c2 08          	add    $0x8,%rdx
  b0:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  b5:	48 85 c0             	test   %rax,%rax
  b8:	74 37                	je     f1 <SparkFunDmx::~SparkFunDmx()+0xf1>
  ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  be:	8b 55 ec             	mov    -0x14(%rbp),%edx
  c1:	48 63 d2             	movslq %edx,%rdx
  c4:	48 83 c2 08          	add    $0x8,%rdx
  c8:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  cd:	48 85 c0             	test   %rax,%rax
  d0:	74 08                	je     da <SparkFunDmx::~SparkFunDmx()+0xda>
  d2:	48 89 c7             	mov    %rax,%rdi
  d5:	e8 00 00 00 00       	call   da <SparkFunDmx::~SparkFunDmx()+0xda>
  da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  de:	8b 55 ec             	mov    -0x14(%rbp),%edx
  e1:	48 63 d2             	movslq %edx,%rdx
  e4:	48 83 c2 08          	add    $0x8,%rdx
  e8:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
  ef:	00 00 
  f1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f5:	8b 55 ec             	mov    -0x14(%rbp),%edx
  f8:	48 63 d2             	movslq %edx,%rdx
  fb:	48 83 c2 10          	add    $0x10,%rdx
  ff:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 104:	48 85 c0             	test   %rax,%rax
 107:	74 3f                	je     148 <SparkFunDmx::~SparkFunDmx()+0x148>
 109:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 10d:	8b 55 ec             	mov    -0x14(%rbp),%edx
 110:	48 63 d2             	movslq %edx,%rdx
 113:	48 83 c2 10          	add    $0x10,%rdx
 117:	48 8b 5c d0 08       	mov    0x8(%rax,%rdx,8),%rbx
 11c:	48 85 db             	test   %rbx,%rbx
 11f:	74 10                	je     131 <SparkFunDmx::~SparkFunDmx()+0x131>
 121:	48 89 df             	mov    %rbx,%rdi
 124:	e8 00 00 00 00       	call   129 <SparkFunDmx::~SparkFunDmx()+0x129>
 129:	48 89 df             	mov    %rbx,%rdi
 12c:	e8 00 00 00 00       	call   131 <SparkFunDmx::~SparkFunDmx()+0x131>
 131:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 135:	8b 55 ec             	mov    -0x14(%rbp),%edx
 138:	48 63 d2             	movslq %edx,%rdx
 13b:	48 83 c2 10          	add    $0x10,%rdx
 13f:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 146:	00 00 
 148:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 14c:	8b 55 ec             	mov    -0x14(%rbp),%edx
 14f:	48 63 d2             	movslq %edx,%rdx
 152:	48 83 c2 18          	add    $0x18,%rdx
 156:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 15b:	48 85 c0             	test   %rax,%rax
 15e:	74 3f                	je     19f <SparkFunDmx::~SparkFunDmx()+0x19f>
 160:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 164:	8b 55 ec             	mov    -0x14(%rbp),%edx
 167:	48 63 d2             	movslq %edx,%rdx
 16a:	48 83 c2 18          	add    $0x18,%rdx
 16e:	48 8b 5c d0 08       	mov    0x8(%rax,%rdx,8),%rbx
 173:	48 85 db             	test   %rbx,%rbx
 176:	74 10                	je     188 <SparkFunDmx::~SparkFunDmx()+0x188>
 178:	48 89 df             	mov    %rbx,%rdi
 17b:	e8 00 00 00 00       	call   180 <SparkFunDmx::~SparkFunDmx()+0x180>
 180:	48 89 df             	mov    %rbx,%rdi
 183:	e8 00 00 00 00       	call   188 <SparkFunDmx::~SparkFunDmx()+0x188>
 188:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18c:	8b 55 ec             	mov    -0x14(%rbp),%edx
 18f:	48 63 d2             	movslq %edx,%rdx
 192:	48 83 c2 18          	add    $0x18,%rdx
 196:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 19d:	00 00 
 19f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a3:	8b 55 ec             	mov    -0x14(%rbp),%edx
 1a6:	48 63 d2             	movslq %edx,%rdx
 1a9:	48 83 c2 20          	add    $0x20,%rdx
 1ad:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 1b2:	48 85 c0             	test   %rax,%rax
 1b5:	74 37                	je     1ee <SparkFunDmx::~SparkFunDmx()+0x1ee>
 1b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1bb:	8b 55 ec             	mov    -0x14(%rbp),%edx
 1be:	48 63 d2             	movslq %edx,%rdx
 1c1:	48 83 c2 20          	add    $0x20,%rdx
 1c5:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 1ca:	48 85 c0             	test   %rax,%rax
 1cd:	74 08                	je     1d7 <SparkFunDmx::~SparkFunDmx()+0x1d7>
 1cf:	48 89 c7             	mov    %rax,%rdi
 1d2:	e8 00 00 00 00       	call   1d7 <SparkFunDmx::~SparkFunDmx()+0x1d7>
 1d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1db:	8b 55 ec             	mov    -0x14(%rbp),%edx
 1de:	48 63 d2             	movslq %edx,%rdx
 1e1:	48 83 c2 20          	add    $0x20,%rdx
 1e5:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
 1ec:	00 00 
 1ee:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
 1f2:	83 7d ec 07          	cmpl   $0x7,-0x14(%rbp)
 1f6:	0f 8e 5c fe ff ff    	jle    58 <SparkFunDmx::~SparkFunDmx()+0x58>
 1fc:	b9 7e 00 00 00       	mov    $0x7e,%ecx
 201:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 208 <SparkFunDmx::~SparkFunDmx()+0x208>
 208:	48 89 c2             	mov    %rax,%rdx
 20b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 212 <SparkFunDmx::~SparkFunDmx()+0x212>
 212:	48 89 c6             	mov    %rax,%rsi
 215:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 21c <SparkFunDmx::~SparkFunDmx()+0x21c>
 21c:	48 89 c7             	mov    %rax,%rdi
 21f:	b8 00 00 00 00       	mov    $0x0,%eax
 224:	e8 00 00 00 00       	call   229 <SparkFunDmx::~SparkFunDmx()+0x229>
 229:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 22d:	48 89 c7             	mov    %rax,%rdi
 230:	e8 00 00 00 00       	call   235 <SparkFunDmx::~SparkFunDmx()+0x235>
 235:	90                   	nop
 236:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 23a:	c9                   	leave  
 23b:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmxD0Ev:

0000000000000000 <SparkFunDmx::~SparkFunDmx()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <SparkFunDmx::~SparkFunDmx()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <SparkFunDmx::~SparkFunDmx()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmx5StartEj:

0000000000000000 <SparkFunDmx::Start(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	b9 82 00 00 00       	mov    $0x82,%ecx
  18:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1f <SparkFunDmx::Start(unsigned int)+0x1f>
  1f:	48 89 c2             	mov    %rax,%rdx
  22:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 29 <SparkFunDmx::Start(unsigned int)+0x29>
  29:	48 89 c6             	mov    %rax,%rsi
  2c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 33 <SparkFunDmx::Start(unsigned int)+0x33>
  33:	48 89 c7             	mov    %rax,%rdi
  36:	b8 00 00 00 00       	mov    $0x0,%eax
  3b:	e8 00 00 00 00       	call   40 <SparkFunDmx::Start(unsigned int)+0x40>
  40:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  47:	eb 37                	jmp    80 <SparkFunDmx::Start(unsigned int)+0x80>
  49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  50:	48 63 d2             	movslq %edx,%rdx
  53:	48 83 c2 18          	add    $0x18,%rdx
  57:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  5c:	48 85 c0             	test   %rax,%rax
  5f:	74 1b                	je     7c <SparkFunDmx::Start(unsigned int)+0x7c>
  61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  65:	8b 55 fc             	mov    -0x4(%rbp),%edx
  68:	48 63 d2             	movslq %edx,%rdx
  6b:	48 83 c2 18          	add    $0x18,%rdx
  6f:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  74:	48 89 c7             	mov    %rax,%rdi
  77:	e8 00 00 00 00       	call   7c <SparkFunDmx::Start(unsigned int)+0x7c>
  7c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80:	83 7d fc 07          	cmpl   $0x7,-0x4(%rbp)
  84:	7e c3                	jle    49 <SparkFunDmx::Start(unsigned int)+0x49>
  86:	b9 8a 00 00 00       	mov    $0x8a,%ecx
  8b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 92 <SparkFunDmx::Start(unsigned int)+0x92>
  92:	48 89 c2             	mov    %rax,%rdx
  95:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 9c <SparkFunDmx::Start(unsigned int)+0x9c>
  9c:	48 89 c6             	mov    %rax,%rsi
  9f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # a6 <SparkFunDmx::Start(unsigned int)+0xa6>
  a6:	48 89 c7             	mov    %rax,%rdi
  a9:	b8 00 00 00 00       	mov    $0x0,%eax
  ae:	e8 00 00 00 00       	call   b3 <SparkFunDmx::Start(unsigned int)+0xb3>
  b3:	90                   	nop
  b4:	c9                   	leave  
  b5:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmx4StopEj:

0000000000000000 <SparkFunDmx::Stop(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	b9 8e 00 00 00       	mov    $0x8e,%ecx
  18:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1f <SparkFunDmx::Stop(unsigned int)+0x1f>
  1f:	48 89 c2             	mov    %rax,%rdx
  22:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 29 <SparkFunDmx::Stop(unsigned int)+0x29>
  29:	48 89 c6             	mov    %rax,%rsi
  2c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 33 <SparkFunDmx::Stop(unsigned int)+0x33>
  33:	48 89 c7             	mov    %rax,%rdi
  36:	b8 00 00 00 00       	mov    $0x0,%eax
  3b:	e8 00 00 00 00       	call   40 <SparkFunDmx::Stop(unsigned int)+0x40>
  40:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  47:	eb 37                	jmp    80 <SparkFunDmx::Stop(unsigned int)+0x80>
  49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  50:	48 63 d2             	movslq %edx,%rdx
  53:	48 83 c2 18          	add    $0x18,%rdx
  57:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  5c:	48 85 c0             	test   %rax,%rax
  5f:	74 1b                	je     7c <SparkFunDmx::Stop(unsigned int)+0x7c>
  61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  65:	8b 55 fc             	mov    -0x4(%rbp),%edx
  68:	48 63 d2             	movslq %edx,%rdx
  6b:	48 83 c2 18          	add    $0x18,%rdx
  6f:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  74:	48 89 c7             	mov    %rax,%rdi
  77:	e8 00 00 00 00       	call   7c <SparkFunDmx::Stop(unsigned int)+0x7c>
  7c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80:	83 7d fc 07          	cmpl   $0x7,-0x4(%rbp)
  84:	7e c3                	jle    49 <SparkFunDmx::Stop(unsigned int)+0x49>
  86:	b9 96 00 00 00       	mov    $0x96,%ecx
  8b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 92 <SparkFunDmx::Stop(unsigned int)+0x92>
  92:	48 89 c2             	mov    %rax,%rdx
  95:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 9c <SparkFunDmx::Stop(unsigned int)+0x9c>
  9c:	48 89 c6             	mov    %rax,%rsi
  9f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # a6 <SparkFunDmx::Stop(unsigned int)+0xa6>
  a6:	48 89 c7             	mov    %rax,%rdi
  a9:	b8 00 00 00 00       	mov    $0x0,%eax
  ae:	e8 00 00 00 00       	call   b3 <SparkFunDmx::Stop(unsigned int)+0xb3>
  b3:	90                   	nop
  b4:	c9                   	leave  
  b5:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmx15ReadConfigFilesEP15TSparkFunStores:

0000000000000000 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)>:
       0:	f3 0f 1e fa          	endbr64 
       4:	55                   	push   %rbp
       5:	48 89 e5             	mov    %rsp,%rbp
       8:	53                   	push   %rbx
       9:	48 81 ec a8 00 00 00 	sub    $0xa8,%rsp
      10:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
      17:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
      1e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
      25:	00 00 
      27:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
      2b:	31 c0                	xor    %eax,%eax
      2d:	b9 9a 00 00 00       	mov    $0x9a,%ecx
      32:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 39 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x39>
      39:	48 89 c2             	mov    %rax,%rdx
      3c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 43 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x43>
      43:	48 89 c6             	mov    %rax,%rsi
      46:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 4d <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x4d>
      4d:	48 89 c7             	mov    %rax,%rdi
      50:	b8 00 00 00 00       	mov    $0x0,%eax
      55:	e8 00 00 00 00       	call   5a <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x5a>
      5a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
      61:	c6 80 4b 01 00 00 00 	movb   $0x0,0x14b(%rax)
      68:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
      6f:	c6 80 4c 01 00 00 00 	movb   $0x0,0x14c(%rax)
      76:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
      7d:	c6 80 4d 01 00 00 00 	movb   $0x0,0x14d(%rax)
      84:	48 83 bd 50 ff ff ff 	cmpq   $0x0,-0xb0(%rbp)
      8b:	00 
      8c:	74 0c                	je     9a <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x9a>
      8e:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
      95:	48 8b 00             	mov    (%rax),%rax
      98:	eb 05                	jmp    9f <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x9f>
      9a:	b8 00 00 00 00       	mov    $0x0,%eax
      9f:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
      a3:	48 89 c6             	mov    %rax,%rsi
      a6:	48 89 d7             	mov    %rdx,%rdi
      a9:	e8 00 00 00 00       	call   ae <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xae>
      ae:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      b2:	48 89 c7             	mov    %rax,%rdi
      b5:	e8 00 00 00 00       	call   ba <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xba>
      ba:	84 c0                	test   %al,%al
      bc:	74 27                	je     e5 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe5>
      be:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      c2:	be ff 00 00 00       	mov    $0xff,%esi
      c7:	48 89 c7             	mov    %rax,%rdi
      ca:	e8 00 00 00 00       	call   cf <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xcf>
      cf:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
      d6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
      da:	48 89 d6             	mov    %rdx,%rsi
      dd:	48 89 c7             	mov    %rax,%rdi
      e0:	e8 00 00 00 00       	call   e5 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe5>
      e5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
      ec:	0f b6 80 4d 01 00 00 	movzbl 0x14d(%rax),%eax
      f3:	84 c0                	test   %al,%al
      f5:	74 1d                	je     114 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x114>
      f7:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
      fe:	0f b6 80 4a 01 00 00 	movzbl 0x14a(%rax),%eax
     105:	0f b6 c0             	movzbl %al,%eax
     108:	be 01 00 00 00       	mov    $0x1,%esi
     10d:	89 c7                	mov    %eax,%edi
     10f:	e8 00 00 00 00       	call   114 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x114>
     114:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     11b:	0f b6 80 49 01 00 00 	movzbl 0x149(%rax),%eax
     122:	0f b6 c0             	movzbl %al,%eax
     125:	be 00 00 00 00       	mov    $0x0,%esi
     12a:	89 c7                	mov    %eax,%edi
     12c:	e8 00 00 00 00       	call   131 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x131>
     131:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     138:	0f b6 80 49 01 00 00 	movzbl 0x149(%rax),%eax
     13f:	0f b6 c0             	movzbl %al,%eax
     142:	89 c7                	mov    %eax,%edi
     144:	e8 00 00 00 00       	call   149 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x149>
     149:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     150:	0f b6 80 49 01 00 00 	movzbl 0x149(%rax),%eax
     157:	0f b6 c0             	movzbl %al,%eax
     15a:	89 c7                	mov    %eax,%edi
     15c:	e8 00 00 00 00       	call   161 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x161>
     161:	bf 10 27 00 00       	mov    $0x2710,%edi
     166:	e8 00 00 00 00       	call   16b <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x16b>
     16b:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     172:	0f b6 80 49 01 00 00 	movzbl 0x149(%rax),%eax
     179:	0f b6 c0             	movzbl %al,%eax
     17c:	89 c7                	mov    %eax,%edi
     17e:	e8 00 00 00 00       	call   183 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x183>
     183:	bf 10 27 00 00       	mov    $0x2710,%edi
     188:	e8 00 00 00 00       	call   18d <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x18d>
     18d:	e8 00 00 00 00       	call   192 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x192>
     192:	c7 85 70 ff ff ff 00 	movl   $0x0,-0x90(%rbp)
     199:	00 00 00 
     19c:	e9 c7 02 00 00       	jmp    468 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x468>
     1a1:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
     1a7:	89 c6                	mov    %eax,%esi
     1a9:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1b0 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x1b0>
     1b0:	48 89 c7             	mov    %rax,%rdi
     1b3:	b8 00 00 00 00       	mov    $0x0,%eax
     1b8:	e8 00 00 00 00       	call   1bd <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x1bd>
     1bd:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     1c4:	c6 80 52 01 00 00 00 	movb   $0x0,0x152(%rax)
     1cb:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     1d2:	c6 80 53 01 00 00 00 	movb   $0x0,0x153(%rax)
     1d9:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     1e0:	c6 80 54 01 00 00 00 	movb   $0x0,0x154(%rax)
     1e7:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     1ee:	c6 80 55 01 00 00 00 	movb   $0x0,0x155(%rax)
     1f5:	8b 95 70 ff ff ff    	mov    -0x90(%rbp),%edx
     1fb:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     1ff:	89 d6                	mov    %edx,%esi
     201:	48 89 c7             	mov    %rax,%rdi
     204:	e8 00 00 00 00       	call   209 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x209>
     209:	84 c0                	test   %al,%al
     20b:	0f 84 31 02 00 00    	je     442 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x442>
     211:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
     218:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     21c:	48 89 d6             	mov    %rdx,%rsi
     21f:	48 89 c7             	mov    %rax,%rdi
     222:	e8 00 00 00 00       	call   227 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x227>
     227:	8b 95 70 ff ff ff    	mov    -0x90(%rbp),%edx
     22d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
     231:	89 d6                	mov    %edx,%esi
     233:	48 89 c7             	mov    %rax,%rdi
     236:	e8 00 00 00 00       	call   23b <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x23b>
     23b:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     242:	0f b6 80 52 01 00 00 	movzbl 0x152(%rax),%eax
     249:	84 c0                	test   %al,%al
     24b:	0f 84 10 02 00 00    	je     461 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x461>
     251:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     258:	0f b6 80 4e 01 00 00 	movzbl 0x14e(%rax),%eax
     25f:	3c 07                	cmp    $0x7,%al
     261:	0f 87 fa 01 00 00    	ja     461 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x461>
     267:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     26e:	0f b6 80 53 01 00 00 	movzbl 0x153(%rax),%eax
     275:	84 c0                	test   %al,%al
     277:	74 10                	je     289 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x289>
     279:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     280:	0f b6 80 4f 01 00 00 	movzbl 0x14f(%rax),%eax
     287:	eb 0e                	jmp    297 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x297>
     289:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     290:	0f b6 80 48 01 00 00 	movzbl 0x148(%rax),%eax
     297:	88 85 69 ff ff ff    	mov    %al,-0x97(%rbp)
     29d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     2a4:	0f b6 80 54 01 00 00 	movzbl 0x154(%rax),%eax
     2ab:	84 c0                	test   %al,%al
     2ad:	74 10                	je     2bf <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x2bf>
     2af:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     2b6:	0f b6 80 50 01 00 00 	movzbl 0x150(%rax),%eax
     2bd:	eb 0e                	jmp    2cd <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x2cd>
     2bf:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     2c6:	0f b6 80 49 01 00 00 	movzbl 0x149(%rax),%eax
     2cd:	88 85 6a ff ff ff    	mov    %al,-0x96(%rbp)
     2d3:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     2da:	0f b6 80 55 01 00 00 	movzbl 0x155(%rax),%eax
     2e1:	84 c0                	test   %al,%al
     2e3:	74 10                	je     2f5 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x2f5>
     2e5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     2ec:	0f b6 80 51 01 00 00 	movzbl 0x151(%rax),%eax
     2f3:	eb 0e                	jmp    303 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x303>
     2f5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     2fc:	0f b6 80 4a 01 00 00 	movzbl 0x14a(%rax),%eax
     303:	88 85 6b ff ff ff    	mov    %al,-0x95(%rbp)
     309:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     310:	0f b6 80 4d 01 00 00 	movzbl 0x14d(%rax),%eax
     317:	0f b6 f8             	movzbl %al,%edi
     31a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     321:	0f b6 80 55 01 00 00 	movzbl 0x155(%rax),%eax
     328:	0f b6 f0             	movzbl %al,%esi
     32b:	44 0f b6 8d 6b ff ff 	movzbl -0x95(%rbp),%r9d
     332:	ff 
     333:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     33a:	0f b6 80 54 01 00 00 	movzbl 0x154(%rax),%eax
     341:	44 0f b6 c0          	movzbl %al,%r8d
     345:	0f b6 8d 6a ff ff ff 	movzbl -0x96(%rbp),%ecx
     34c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     353:	0f b6 80 53 01 00 00 	movzbl 0x153(%rax),%eax
     35a:	0f b6 d0             	movzbl %al,%edx
     35d:	0f b6 85 69 ff ff ff 	movzbl -0x97(%rbp),%eax
     364:	57                   	push   %rdi
     365:	56                   	push   %rsi
     366:	89 c6                	mov    %eax,%esi
     368:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 36f <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x36f>
     36f:	48 89 c7             	mov    %rax,%rdi
     372:	b8 00 00 00 00       	mov    $0x0,%eax
     377:	e8 00 00 00 00       	call   37c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x37c>
     37c:	48 83 c4 10          	add    $0x10,%rsp
     380:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     387:	0f b6 80 4d 01 00 00 	movzbl 0x14d(%rax),%eax
     38e:	84 c0                	test   %al,%al
     390:	75 12                	jne    3a4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x3a4>
     392:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     399:	0f b6 80 55 01 00 00 	movzbl 0x155(%rax),%eax
     3a0:	84 c0                	test   %al,%al
     3a2:	74 54                	je     3f8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x3f8>
     3a4:	bf 18 00 00 00       	mov    $0x18,%edi
     3a9:	e8 00 00 00 00       	call   3ae <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x3ae>
     3ae:	48 89 c3             	mov    %rax,%rbx
     3b1:	0f b6 b5 6b ff ff ff 	movzbl -0x95(%rbp),%esi
     3b8:	0f b6 8d 6a ff ff ff 	movzbl -0x96(%rbp),%ecx
     3bf:	0f b6 95 69 ff ff ff 	movzbl -0x97(%rbp),%edx
     3c6:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     3cd:	0f b6 80 4e 01 00 00 	movzbl 0x14e(%rax),%eax
     3d4:	0f b6 c0             	movzbl %al,%eax
     3d7:	41 89 f0             	mov    %esi,%r8d
     3da:	89 c6                	mov    %eax,%esi
     3dc:	48 89 df             	mov    %rbx,%rdi
     3df:	e8 00 00 00 00       	call   3e4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x3e4>
     3e4:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     3eb:	8b 95 70 ff ff ff    	mov    -0x90(%rbp),%edx
     3f1:	48 89 5c d0 08       	mov    %rbx,0x8(%rax,%rdx,8)
     3f6:	eb 69                	jmp    461 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x461>
     3f8:	bf 18 00 00 00       	mov    $0x18,%edi
     3fd:	e8 00 00 00 00       	call   402 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x402>
     402:	48 89 c3             	mov    %rax,%rbx
     405:	0f b6 8d 6a ff ff ff 	movzbl -0x96(%rbp),%ecx
     40c:	0f b6 95 69 ff ff ff 	movzbl -0x97(%rbp),%edx
     413:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     41a:	0f b6 80 4e 01 00 00 	movzbl 0x14e(%rax),%eax
     421:	0f b6 c0             	movzbl %al,%eax
     424:	89 c6                	mov    %eax,%esi
     426:	48 89 df             	mov    %rbx,%rdi
     429:	e8 00 00 00 00       	call   42e <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x42e>
     42e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     435:	8b 95 70 ff ff ff    	mov    -0x90(%rbp),%edx
     43b:	48 89 5c d0 08       	mov    %rbx,0x8(%rax,%rdx,8)
     440:	eb 1f                	jmp    461 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x461>
     442:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
     448:	83 c0 30             	add    $0x30,%eax
     44b:	89 c6                	mov    %eax,%esi
     44d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 454 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x454>
     454:	48 89 c7             	mov    %rax,%rdi
     457:	b8 00 00 00 00       	mov    $0x0,%eax
     45c:	e8 00 00 00 00       	call   461 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x461>
     461:	83 85 70 ff ff ff 01 	addl   $0x1,-0x90(%rbp)
     468:	83 bd 70 ff ff ff 07 	cmpl   $0x7,-0x90(%rbp)
     46f:	0f 86 2c fd ff ff    	jbe    1a1 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x1a1>
     475:	e8 00 00 00 00       	call   47a <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x47a>
     47a:	0f b7 c0             	movzwl %ax,%eax
     47d:	89 c6                	mov    %eax,%esi
     47f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 486 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x486>
     486:	48 89 c7             	mov    %rax,%rdi
     489:	b8 00 00 00 00       	mov    $0x0,%eax
     48e:	e8 00 00 00 00       	call   493 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x493>
     493:	c7 85 74 ff ff ff 00 	movl   $0x0,-0x8c(%rbp)
     49a:	00 00 00 
     49d:	e9 90 09 00 00       	jmp    e32 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe32>
     4a2:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
     4a8:	89 c6                	mov    %eax,%esi
     4aa:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 4b1 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x4b1>
     4b1:	48 89 c7             	mov    %rax,%rdi
     4b4:	b8 00 00 00 00       	mov    $0x0,%eax
     4b9:	e8 00 00 00 00       	call   4be <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x4be>
     4be:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     4c5:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     4cb:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     4d0:	48 85 c0             	test   %rax,%rax
     4d3:	0f 84 36 09 00 00    	je     e0f <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe0f>
     4d9:	bf 48 00 00 00       	mov    $0x48,%edi
     4de:	e8 00 00 00 00       	call   4e3 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x4e3>
     4e3:	48 89 c3             	mov    %rax,%rbx
     4e6:	48 83 bd 50 ff ff ff 	cmpq   $0x0,-0xb0(%rbp)
     4ed:	00 
     4ee:	74 0d                	je     4fd <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x4fd>
     4f0:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
     4f7:	48 8b 40 08          	mov    0x8(%rax),%rax
     4fb:	eb 05                	jmp    502 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x502>
     4fd:	b8 00 00 00 00       	mov    $0x0,%eax
     502:	48 89 c6             	mov    %rax,%rsi
     505:	48 89 df             	mov    %rbx,%rdi
     508:	e8 00 00 00 00       	call   50d <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x50d>
     50d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     514:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     51a:	48 83 c2 10          	add    $0x10,%rdx
     51e:	48 89 5c d0 08       	mov    %rbx,0x8(%rax,%rdx,8)
     523:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     52a:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     530:	48 83 c2 10          	add    $0x10,%rdx
     534:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     539:	48 85 c0             	test   %rax,%rax
     53c:	75 28                	jne    566 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x566>
     53e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 545 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x545>
     545:	48 89 c1             	mov    %rax,%rcx
     548:	ba ec 00 00 00       	mov    $0xec,%edx
     54d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 554 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x554>
     554:	48 89 c6             	mov    %rax,%rsi
     557:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 55e <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x55e>
     55e:	48 89 c7             	mov    %rax,%rdi
     561:	e8 00 00 00 00       	call   566 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x566>
     566:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     56d:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     573:	48 83 c2 10          	add    $0x10,%rdx
     577:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     57c:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     582:	89 d6                	mov    %edx,%esi
     584:	48 89 c7             	mov    %rax,%rdi
     587:	e8 00 00 00 00       	call   58c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x58c>
     58c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     593:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     599:	48 83 c2 10          	add    $0x10,%rdx
     59d:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     5a2:	48 89 c7             	mov    %rax,%rdi
     5a5:	e8 00 00 00 00       	call   5aa <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x5aa>
     5aa:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     5b1:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     5b7:	48 83 c2 10          	add    $0x10,%rdx
     5bb:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     5c0:	48 89 c7             	mov    %rax,%rdi
     5c3:	e8 00 00 00 00       	call   5c8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x5c8>
     5c8:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
     5cf:	66 89 82 56 01 00 00 	mov    %ax,0x156(%rdx)
     5d6:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     5dd:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     5e3:	48 83 c2 10          	add    $0x10,%rdx
     5e7:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     5ec:	48 89 c7             	mov    %rax,%rdi
     5ef:	e8 00 00 00 00       	call   5f4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x5f4>
     5f4:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
     5fb:	66 89 82 58 01 00 00 	mov    %ax,0x158(%rdx)
     602:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 609 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x609>
     609:	48 89 c7             	mov    %rax,%rdi
     60c:	e8 00 00 00 00       	call   611 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x611>
     611:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     618:	0f b7 80 56 01 00 00 	movzwl 0x156(%rax),%eax
     61f:	0f b7 c0             	movzwl %ax,%eax
     622:	89 c7                	mov    %eax,%edi
     624:	e8 00 00 00 00       	call   629 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x629>
     629:	0f b7 d0             	movzwl %ax,%edx
     62c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     633:	0f b7 80 56 01 00 00 	movzwl 0x156(%rax),%eax
     63a:	0f b7 c0             	movzwl %ax,%eax
     63d:	89 c6                	mov    %eax,%esi
     63f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 646 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x646>
     646:	48 89 c7             	mov    %rax,%rdi
     649:	b8 00 00 00 00       	mov    $0x0,%eax
     64e:	e8 00 00 00 00       	call   653 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x653>
     653:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     65a:	0f b7 80 58 01 00 00 	movzwl 0x158(%rax),%eax
     661:	0f b7 c0             	movzwl %ax,%eax
     664:	89 c6                	mov    %eax,%esi
     666:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 66d <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x66d>
     66d:	48 89 c7             	mov    %rax,%rdi
     670:	b8 00 00 00 00       	mov    $0x0,%eax
     675:	e8 00 00 00 00       	call   67a <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x67a>
     67a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 681 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x681>
     681:	48 89 c7             	mov    %rax,%rdi
     684:	e8 00 00 00 00       	call   689 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x689>
     689:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     690:	0f b7 80 58 01 00 00 	movzwl 0x158(%rax),%eax
     697:	66 3d 00 02          	cmp    $0x200,%ax
     69b:	77 24                	ja     6c1 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x6c1>
     69d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     6a4:	0f b7 80 56 01 00 00 	movzwl 0x156(%rax),%eax
     6ab:	0f b7 c0             	movzwl %ax,%eax
     6ae:	89 c7                	mov    %eax,%edi
     6b0:	e8 00 00 00 00       	call   6b5 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x6b5>
     6b5:	66 85 c0             	test   %ax,%ax
     6b8:	74 07                	je     6c1 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x6c1>
     6ba:	b8 01 00 00 00       	mov    $0x1,%eax
     6bf:	eb 05                	jmp    6c6 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x6c6>
     6c1:	b8 00 00 00 00       	mov    $0x0,%eax
     6c6:	84 c0                	test   %al,%al
     6c8:	0f 84 cb 06 00 00    	je     d99 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xd99>
     6ce:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     6d5:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     6db:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     6e0:	48 89 c7             	mov    %rax,%rdi
     6e3:	e8 00 00 00 00       	call   6e8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x6e8>
     6e8:	84 c0                	test   %al,%al
     6ea:	0f 84 4f 06 00 00    	je     d3f <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xd3f>
     6f0:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
     6f6:	89 c6                	mov    %eax,%esi
     6f8:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 6ff <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x6ff>
     6ff:	48 89 c7             	mov    %rax,%rdi
     702:	b8 00 00 00 00       	mov    $0x0,%eax
     707:	e8 00 00 00 00       	call   70c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x70c>
     70c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     713:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     719:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     71e:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     724:	89 d6                	mov    %edx,%esi
     726:	48 89 c7             	mov    %rax,%rdi
     729:	e8 00 00 00 00       	call   72e <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x72e>
     72e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     735:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     73b:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     740:	48 89 c7             	mov    %rax,%rdi
     743:	e8 00 00 00 00       	call   748 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x748>
     748:	bf 30 00 00 00       	mov    $0x30,%edi
     74d:	e8 00 00 00 00       	call   752 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x752>
     752:	48 89 c3             	mov    %rax,%rbx
     755:	48 83 bd 50 ff ff ff 	cmpq   $0x0,-0xb0(%rbp)
     75c:	00 
     75d:	74 0d                	je     76c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x76c>
     75f:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
     766:	48 8b 40 10          	mov    0x10(%rax),%rax
     76a:	eb 05                	jmp    771 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x771>
     76c:	b8 00 00 00 00       	mov    $0x0,%eax
     771:	48 89 c6             	mov    %rax,%rsi
     774:	48 89 df             	mov    %rbx,%rdi
     777:	e8 00 00 00 00       	call   77c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x77c>
     77c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     783:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     789:	48 83 c2 08          	add    $0x8,%rdx
     78d:	48 89 5c d0 08       	mov    %rbx,0x8(%rax,%rdx,8)
     792:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     799:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     79f:	48 83 c2 08          	add    $0x8,%rdx
     7a3:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     7a8:	48 85 c0             	test   %rax,%rax
     7ab:	75 28                	jne    7d5 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x7d5>
     7ad:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7b4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x7b4>
     7b4:	48 89 c1             	mov    %rax,%rcx
     7b7:	ba 01 01 00 00       	mov    $0x101,%edx
     7bc:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7c3 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x7c3>
     7c3:	48 89 c6             	mov    %rax,%rsi
     7c6:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7cd <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x7cd>
     7cd:	48 89 c7             	mov    %rax,%rdi
     7d0:	e8 00 00 00 00       	call   7d5 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x7d5>
     7d5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     7dc:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     7e2:	48 83 c2 08          	add    $0x8,%rdx
     7e6:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     7eb:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     7f1:	89 d6                	mov    %edx,%esi
     7f3:	48 89 c7             	mov    %rax,%rdi
     7f6:	e8 00 00 00 00       	call   7fb <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x7fb>
     7fb:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     802:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     808:	48 83 c2 08          	add    $0x8,%rdx
     80c:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     811:	48 89 c7             	mov    %rax,%rdi
     814:	e8 00 00 00 00       	call   819 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x819>
     819:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     820:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     826:	48 83 c2 08          	add    $0x8,%rdx
     82a:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     82f:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
     836:	8b 8d 74 ff ff ff    	mov    -0x8c(%rbp),%ecx
     83c:	48 8b 54 ca 08       	mov    0x8(%rdx,%rcx,8),%rdx
     841:	48 89 d6             	mov    %rdx,%rsi
     844:	48 89 c7             	mov    %rax,%rdi
     847:	e8 00 00 00 00       	call   84c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x84c>
     84c:	48 83 bd 50 ff ff ff 	cmpq   $0x0,-0xb0(%rbp)
     853:	00 
     854:	74 0d                	je     863 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x863>
     856:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
     85d:	48 8b 40 18          	mov    0x18(%rax),%rax
     861:	eb 05                	jmp    868 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x868>
     863:	b8 00 00 00 00       	mov    $0x0,%eax
     868:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
     86c:	48 89 c6             	mov    %rax,%rsi
     86f:	48 89 d7             	mov    %rdx,%rdi
     872:	e8 00 00 00 00       	call   877 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x877>
     877:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     87d:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     881:	89 d6                	mov    %edx,%esi
     883:	48 89 c7             	mov    %rax,%rdi
     886:	e8 00 00 00 00       	call   88b <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x88b>
     88b:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     88f:	48 89 c7             	mov    %rax,%rdi
     892:	e8 00 00 00 00       	call   897 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x897>
     897:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     89e:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     8a4:	48 8b 54 d0 08       	mov    0x8(%rax,%rdx,8),%rdx
     8a9:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     8ad:	48 89 d6             	mov    %rdx,%rsi
     8b0:	48 89 c7             	mov    %rax,%rdi
     8b3:	e8 00 00 00 00       	call   8b8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x8b8>
     8b8:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     8bf:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     8c5:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     8ca:	48 89 c7             	mov    %rax,%rdi
     8cd:	e8 00 00 00 00       	call   8d2 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x8d2>
     8d2:	bf 28 00 00 00       	mov    $0x28,%edi
     8d7:	e8 00 00 00 00       	call   8dc <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x8dc>
     8dc:	48 89 c3             	mov    %rax,%rbx
     8df:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     8e6:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     8ec:	48 83 c2 10          	add    $0x10,%rdx
     8f0:	48 8b 7c d0 08       	mov    0x8(%rax,%rdx,8),%rdi
     8f5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     8fc:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     902:	48 83 c2 08          	add    $0x8,%rdx
     906:	48 8b 74 d0 08       	mov    0x8(%rax,%rdx,8),%rsi
     90b:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     912:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     918:	48 8b 4c d0 08       	mov    0x8(%rax,%rdx,8),%rcx
     91d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     924:	0f b7 80 58 01 00 00 	movzwl 0x158(%rax),%eax
     92b:	0f b7 d0             	movzwl %ax,%edx
     92e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     935:	0f b7 80 56 01 00 00 	movzwl 0x156(%rax),%eax
     93c:	0f b7 c0             	movzwl %ax,%eax
     93f:	49 89 f9             	mov    %rdi,%r9
     942:	49 89 f0             	mov    %rsi,%r8
     945:	89 c6                	mov    %eax,%esi
     947:	48 89 df             	mov    %rbx,%rdi
     94a:	e8 00 00 00 00       	call   94f <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x94f>
     94f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     956:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     95c:	48 83 c2 18          	add    $0x18,%rdx
     960:	48 89 5c d0 08       	mov    %rbx,0x8(%rax,%rdx,8)
     965:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     96c:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     972:	48 83 c2 18          	add    $0x18,%rdx
     976:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     97b:	48 85 c0             	test   %rax,%rax
     97e:	75 28                	jne    9a8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x9a8>
     980:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 987 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x987>
     987:	48 89 c1             	mov    %rax,%rcx
     98a:	ba 0e 01 00 00       	mov    $0x10e,%edx
     98f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 996 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x996>
     996:	48 89 c6             	mov    %rax,%rsi
     999:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 9a0 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x9a0>
     9a0:	48 89 c7             	mov    %rax,%rdi
     9a3:	e8 00 00 00 00       	call   9a8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x9a8>
     9a8:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     9af:	0f b7 80 5a 01 00 00 	movzwl 0x15a(%rax),%eax
     9b6:	66 83 f8 ff          	cmp    $0xffff,%ax
     9ba:	75 5d                	jne    a19 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xa19>
     9bc:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     9c3:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     9c9:	48 83 c2 18          	add    $0x18,%rdx
     9cd:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     9d2:	48 89 c7             	mov    %rax,%rdi
     9d5:	e8 00 00 00 00       	call   9da <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x9da>
     9da:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
     9e1:	66 89 82 5a 01 00 00 	mov    %ax,0x15a(%rdx)
     9e8:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     9ef:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     9f5:	48 83 c2 18          	add    $0x18,%rdx
     9f9:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     9fe:	48 89 c7             	mov    %rax,%rdi
     a01:	e8 00 00 00 00       	call   a06 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xa06>
     a06:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
     a0d:	66 89 82 5c 01 00 00 	mov    %ax,0x15c(%rdx)
     a14:	e9 ea 00 00 00       	jmp    b03 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xb03>
     a19:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     a20:	0f b7 90 5a 01 00 00 	movzwl 0x15a(%rax),%edx
     a27:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     a2e:	0f b7 80 5c 01 00 00 	movzwl 0x15c(%rax),%eax
     a35:	01 d0                	add    %edx,%eax
     a37:	66 89 85 6c ff ff ff 	mov    %ax,-0x94(%rbp)
     a3e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     a45:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     a4b:	48 83 c2 18          	add    $0x18,%rdx
     a4f:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     a54:	48 89 c7             	mov    %rax,%rdi
     a57:	e8 00 00 00 00       	call   a5c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xa5c>
     a5c:	66 89 85 6e ff ff ff 	mov    %ax,-0x92(%rbp)
     a63:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     a6a:	48 8d 90 5a 01 00 00 	lea    0x15a(%rax),%rdx
     a71:	48 8d 85 6e ff ff ff 	lea    -0x92(%rbp),%rax
     a78:	48 89 c6             	mov    %rax,%rsi
     a7b:	48 89 d7             	mov    %rdx,%rdi
     a7e:	e8 00 00 00 00       	call   a83 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xa83>
     a83:	0f b7 10             	movzwl (%rax),%edx
     a86:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     a8d:	66 89 90 5a 01 00 00 	mov    %dx,0x15a(%rax)
     a94:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     a9b:	0f b7 98 58 01 00 00 	movzwl 0x158(%rax),%ebx
     aa2:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     aa9:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     aaf:	48 83 c2 18          	add    $0x18,%rdx
     ab3:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     ab8:	48 89 c7             	mov    %rax,%rdi
     abb:	e8 00 00 00 00       	call   ac0 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xac0>
     ac0:	01 d8                	add    %ebx,%eax
     ac2:	66 89 85 6e ff ff ff 	mov    %ax,-0x92(%rbp)
     ac9:	48 8d 95 6e ff ff ff 	lea    -0x92(%rbp),%rdx
     ad0:	48 8d 85 6c ff ff ff 	lea    -0x94(%rbp),%rax
     ad7:	48 89 d6             	mov    %rdx,%rsi
     ada:	48 89 c7             	mov    %rax,%rdi
     add:	e8 00 00 00 00       	call   ae2 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xae2>
     ae2:	0f b7 10             	movzwl (%rax),%edx
     ae5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     aec:	0f b7 80 5a 01 00 00 	movzwl 0x15a(%rax),%eax
     af3:	29 c2                	sub    %eax,%edx
     af5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     afc:	66 89 90 5c 01 00 00 	mov    %dx,0x15c(%rax)
     b03:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     b0a:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     b10:	48 83 c2 18          	add    $0x18,%rdx
     b14:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     b19:	48 89 c7             	mov    %rax,%rdi
     b1c:	e8 00 00 00 00       	call   b21 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xb21>
     b21:	0f b7 d8             	movzwl %ax,%ebx
     b24:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     b2b:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     b31:	48 83 c2 18          	add    $0x18,%rdx
     b35:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     b3a:	48 89 c7             	mov    %rax,%rdi
     b3d:	e8 00 00 00 00       	call   b42 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xb42>
     b42:	89 da                	mov    %ebx,%edx
     b44:	89 c6                	mov    %eax,%esi
     b46:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # b4d <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xb4d>
     b4d:	48 89 c7             	mov    %rax,%rdi
     b50:	b8 00 00 00 00       	mov    $0x0,%eax
     b55:	e8 00 00 00 00       	call   b5a <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xb5a>
     b5a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     b61:	0f b7 80 5c 01 00 00 	movzwl 0x15c(%rax),%eax
     b68:	0f b7 d0             	movzwl %ax,%edx
     b6b:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     b72:	0f b7 80 5a 01 00 00 	movzwl 0x15a(%rax),%eax
     b79:	0f b7 c0             	movzwl %ax,%eax
     b7c:	89 c6                	mov    %eax,%esi
     b7e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # b85 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xb85>
     b85:	48 89 c7             	mov    %rax,%rdi
     b88:	b8 00 00 00 00       	mov    $0x0,%eax
     b8d:	e8 00 00 00 00       	call   b92 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xb92>
     b92:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     b99:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     b9f:	48 83 c2 18          	add    $0x18,%rdx
     ba3:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     ba8:	48 89 c7             	mov    %rax,%rdi
     bab:	e8 00 00 00 00       	call   bb0 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xbb0>
     bb0:	66 89 85 6e ff ff ff 	mov    %ax,-0x92(%rbp)
     bb7:	48 8d 85 6e ff ff ff 	lea    -0x92(%rbp),%rax
     bbe:	48 89 c6             	mov    %rax,%rsi
     bc1:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # bc8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xbc8>
     bc8:	48 89 c7             	mov    %rax,%rdi
     bcb:	e8 00 00 00 00       	call   bd0 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xbd0>
     bd0:	0f b7 00             	movzwl (%rax),%eax
     bd3:	0f b7 c0             	movzwl %ax,%eax
     bd6:	89 45 8c             	mov    %eax,-0x74(%rbp)
     bd9:	8b 45 8c             	mov    -0x74(%rbp),%eax
     bdc:	89 c6                	mov    %eax,%esi
     bde:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # be5 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xbe5>
     be5:	48 89 c7             	mov    %rax,%rdi
     be8:	b8 00 00 00 00       	mov    $0x0,%eax
     bed:	e8 00 00 00 00       	call   bf2 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xbf2>
     bf2:	8b 45 8c             	mov    -0x74(%rbp),%eax
     bf5:	48 c1 e0 02          	shl    $0x2,%rax
     bf9:	48 89 c7             	mov    %rax,%rdi
     bfc:	e8 00 00 00 00       	call   c01 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xc01>
     c01:	48 89 c1             	mov    %rax,%rcx
     c04:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     c0b:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     c11:	48 83 c2 20          	add    $0x20,%rdx
     c15:	48 89 4c d0 08       	mov    %rcx,0x8(%rax,%rdx,8)
     c1a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     c21:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     c27:	48 83 c2 20          	add    $0x20,%rdx
     c2b:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     c30:	48 85 c0             	test   %rax,%rax
     c33:	75 28                	jne    c5d <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xc5d>
     c35:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c3c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xc3c>
     c3c:	48 89 c1             	mov    %rax,%rcx
     c3f:	ba 23 01 00 00       	mov    $0x123,%edx
     c44:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c4b <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xc4b>
     c4b:	48 89 c6             	mov    %rax,%rsi
     c4e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c55 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xc55>
     c55:	48 89 c7             	mov    %rax,%rdi
     c58:	e8 00 00 00 00       	call   c5d <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xc5d>
     c5d:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%rbp)
     c64:	00 00 00 
     c67:	e9 bf 00 00 00       	jmp    d2b <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xd2b>
     c6c:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     c73:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     c79:	48 83 c2 10          	add    $0x10,%rdx
     c7d:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     c82:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
     c89:	8b 8d 74 ff ff ff    	mov    -0x8c(%rbp),%ecx
     c8f:	48 83 c1 20          	add    $0x20,%rcx
     c93:	48 8b 4c ca 08       	mov    0x8(%rdx,%rcx,8),%rcx
     c98:	8b 95 78 ff ff ff    	mov    -0x88(%rbp),%edx
     c9e:	48 c1 e2 02          	shl    $0x2,%rdx
     ca2:	48 01 ca             	add    %rcx,%rdx
     ca5:	8b 8d 78 ff ff ff    	mov    -0x88(%rbp),%ecx
     cab:	89 ce                	mov    %ecx,%esi
     cad:	48 89 c7             	mov    %rax,%rdi
     cb0:	e8 00 00 00 00       	call   cb5 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xcb5>
     cb5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     cbc:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     cc2:	48 83 c2 20          	add    $0x20,%rdx
     cc6:	48 8b 54 d0 08       	mov    0x8(%rax,%rdx,8),%rdx
     ccb:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
     cd1:	48 c1 e0 02          	shl    $0x2,%rax
     cd5:	48 01 d0             	add    %rdx,%rax
     cd8:	0f b7 00             	movzwl (%rax),%eax
     cdb:	0f b7 c8             	movzwl %ax,%ecx
     cde:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     ce5:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     ceb:	48 83 c2 20          	add    $0x20,%rdx
     cef:	48 8b 54 d0 08       	mov    0x8(%rax,%rdx,8),%rdx
     cf4:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
     cfa:	48 c1 e0 02          	shl    $0x2,%rax
     cfe:	48 01 d0             	add    %rdx,%rax
     d01:	0f b6 40 02          	movzbl 0x2(%rax),%eax
     d05:	0f b6 d0             	movzbl %al,%edx
     d08:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
     d0e:	89 c6                	mov    %eax,%esi
     d10:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d17 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xd17>
     d17:	48 89 c7             	mov    %rax,%rdi
     d1a:	b8 00 00 00 00       	mov    $0x0,%eax
     d1f:	e8 00 00 00 00       	call   d24 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xd24>
     d24:	83 85 78 ff ff ff 01 	addl   $0x1,-0x88(%rbp)
     d2b:	8b 85 78 ff ff ff    	mov    -0x88(%rbp),%eax
     d31:	3b 45 8c             	cmp    -0x74(%rbp),%eax
     d34:	0f 82 32 ff ff ff    	jb     c6c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xc6c>
     d3a:	e9 b2 00 00 00       	jmp    df1 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xdf1>
     d3f:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     d46:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     d4c:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     d51:	48 85 c0             	test   %rax,%rax
     d54:	74 0f                	je     d65 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xd65>
     d56:	48 8b 10             	mov    (%rax),%rdx
     d59:	48 83 c2 08          	add    $0x8,%rdx
     d5d:	48 8b 12             	mov    (%rdx),%rdx
     d60:	48 89 c7             	mov    %rax,%rdi
     d63:	ff d2                	call   *%rdx
     d65:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     d6c:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     d72:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
     d79:	00 00 
     d7b:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
     d81:	89 c6                	mov    %eax,%esi
     d83:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d8a <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xd8a>
     d8a:	48 89 c7             	mov    %rax,%rdi
     d8d:	b8 00 00 00 00       	mov    $0x0,%eax
     d92:	e8 00 00 00 00       	call   d97 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xd97>
     d97:	eb 58                	jmp    df1 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xdf1>
     d99:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     da0:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     da6:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     dab:	48 85 c0             	test   %rax,%rax
     dae:	74 0f                	je     dbf <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xdbf>
     db0:	48 8b 10             	mov    (%rax),%rdx
     db3:	48 83 c2 08          	add    $0x8,%rdx
     db7:	48 8b 12             	mov    (%rdx),%rdx
     dba:	48 89 c7             	mov    %rax,%rdi
     dbd:	ff d2                	call   *%rdx
     dbf:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     dc6:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
     dcc:	48 c7 44 d0 08 00 00 	movq   $0x0,0x8(%rax,%rdx,8)
     dd3:	00 00 
     dd5:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
     ddb:	89 c6                	mov    %eax,%esi
     ddd:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # de4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xde4>
     de4:	48 89 c7             	mov    %rax,%rdi
     de7:	b8 00 00 00 00       	mov    $0x0,%eax
     dec:	e8 00 00 00 00       	call   df1 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xdf1>
     df1:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
     df7:	89 c6                	mov    %eax,%esi
     df9:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # e00 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe00>
     e00:	48 89 c7             	mov    %rax,%rdi
     e03:	b8 00 00 00 00       	mov    $0x0,%eax
     e08:	e8 00 00 00 00       	call   e0d <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe0d>
     e0d:	eb 1c                	jmp    e2b <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe2b>
     e0f:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
     e15:	89 c6                	mov    %eax,%esi
     e17:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # e1e <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe1e>
     e1e:	48 89 c7             	mov    %rax,%rdi
     e21:	b8 00 00 00 00       	mov    $0x0,%eax
     e26:	e8 00 00 00 00       	call   e2b <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe2b>
     e2b:	83 85 74 ff ff ff 01 	addl   $0x1,-0x8c(%rbp)
     e32:	83 bd 74 ff ff ff 07 	cmpl   $0x7,-0x8c(%rbp)
     e39:	0f 86 63 f6 ff ff    	jbe    4a2 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x4a2>
     e3f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # e46 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe46>
     e46:	48 89 c7             	mov    %rax,%rdi
     e49:	e8 00 00 00 00       	call   e4e <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe4e>
     e4e:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%rbp)
     e55:	00 00 00 
     e58:	eb 5c                	jmp    eb6 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xeb6>
     e5a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     e61:	8b 95 7c ff ff ff    	mov    -0x84(%rbp),%edx
     e67:	48 83 c2 18          	add    $0x18,%rdx
     e6b:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     e70:	48 85 c0             	test   %rax,%rax
     e73:	74 3a                	je     eaf <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xeaf>
     e75:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
     e7b:	89 c6                	mov    %eax,%esi
     e7d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # e84 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe84>
     e84:	48 89 c7             	mov    %rax,%rdi
     e87:	b8 00 00 00 00       	mov    $0x0,%eax
     e8c:	e8 00 00 00 00       	call   e91 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe91>
     e91:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     e98:	8b 95 7c ff ff ff    	mov    -0x84(%rbp),%edx
     e9e:	48 83 c2 18          	add    $0x18,%rdx
     ea2:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     ea7:	48 89 c7             	mov    %rax,%rdi
     eaa:	e8 00 00 00 00       	call   eaf <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xeaf>
     eaf:	83 85 7c ff ff ff 01 	addl   $0x1,-0x84(%rbp)
     eb6:	83 bd 7c ff ff ff 07 	cmpl   $0x7,-0x84(%rbp)
     ebd:	76 9b                	jbe    e5a <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe5a>
     ebf:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ec6 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xec6>
     ec6:	48 89 c7             	mov    %rax,%rdi
     ec9:	e8 00 00 00 00       	call   ece <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xece>
     ece:	c7 45 80 00 00 00 00 	movl   $0x0,-0x80(%rbp)
     ed5:	e9 aa 00 00 00       	jmp    f84 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf84>
     eda:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     ee1:	8b 55 80             	mov    -0x80(%rbp),%edx
     ee4:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     ee9:	48 85 c0             	test   %rax,%rax
     eec:	0f 84 8e 00 00 00    	je     f80 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf80>
     ef2:	8b 45 80             	mov    -0x80(%rbp),%eax
     ef5:	89 c6                	mov    %eax,%esi
     ef7:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # efe <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xefe>
     efe:	48 89 c7             	mov    %rax,%rdi
     f01:	b8 00 00 00 00       	mov    $0x0,%eax
     f06:	e8 00 00 00 00       	call   f0b <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf0b>
     f0b:	e8 00 00 00 00       	call   f10 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf10>
     f10:	48 89 c7             	mov    %rax,%rdi
     f13:	e8 00 00 00 00       	call   f18 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf18>
     f18:	89 45 88             	mov    %eax,-0x78(%rbp)
     f1b:	eb 2d                	jmp    f4a <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf4a>
     f1d:	e8 00 00 00 00       	call   f22 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf22>
     f22:	48 89 c7             	mov    %rax,%rdi
     f25:	e8 00 00 00 00       	call   f2a <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf2a>
     f2a:	2b 45 88             	sub    -0x78(%rbp),%eax
     f2d:	3d e8 03 00 00       	cmp    $0x3e8,%eax
     f32:	0f 97 c0             	seta   %al
     f35:	84 c0                	test   %al,%al
     f37:	74 11                	je     f4a <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf4a>
     f39:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # f40 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf40>
     f40:	48 89 c7             	mov    %rax,%rdi
     f43:	e8 00 00 00 00       	call   f48 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf48>
     f48:	eb 36                	jmp    f80 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf80>
     f4a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     f51:	8b 55 80             	mov    -0x80(%rbp),%edx
     f54:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     f59:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
     f60:	8b 4d 80             	mov    -0x80(%rbp),%ecx
     f63:	48 8b 54 ca 08       	mov    0x8(%rdx,%rcx,8),%rdx
     f68:	48 8b 12             	mov    (%rdx),%rdx
     f6b:	48 83 c2 10          	add    $0x10,%rdx
     f6f:	48 8b 12             	mov    (%rdx),%rdx
     f72:	48 89 c7             	mov    %rax,%rdi
     f75:	ff d2                	call   *%rdx
     f77:	85 c0                	test   %eax,%eax
     f79:	0f 95 c0             	setne  %al
     f7c:	84 c0                	test   %al,%al
     f7e:	75 9d                	jne    f1d <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf1d>
     f80:	83 45 80 01          	addl   $0x1,-0x80(%rbp)
     f84:	83 7d 80 07          	cmpl   $0x7,-0x80(%rbp)
     f88:	0f 86 4c ff ff ff    	jbe    eda <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xeda>
     f8e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # f95 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf95>
     f95:	48 89 c7             	mov    %rax,%rdi
     f98:	e8 00 00 00 00       	call   f9d <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf9d>
     f9d:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
     fa4:	eb 50                	jmp    ff6 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xff6>
     fa6:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     fad:	8b 55 84             	mov    -0x7c(%rbp),%edx
     fb0:	48 83 c2 18          	add    $0x18,%rdx
     fb4:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     fb9:	48 85 c0             	test   %rax,%rax
     fbc:	74 34                	je     ff2 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xff2>
     fbe:	8b 45 84             	mov    -0x7c(%rbp),%eax
     fc1:	89 c6                	mov    %eax,%esi
     fc3:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # fca <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xfca>
     fca:	48 89 c7             	mov    %rax,%rdi
     fcd:	b8 00 00 00 00       	mov    $0x0,%eax
     fd2:	e8 00 00 00 00       	call   fd7 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xfd7>
     fd7:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
     fde:	8b 55 84             	mov    -0x7c(%rbp),%edx
     fe1:	48 83 c2 18          	add    $0x18,%rdx
     fe5:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
     fea:	48 89 c7             	mov    %rax,%rdi
     fed:	e8 00 00 00 00       	call   ff2 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xff2>
     ff2:	83 45 84 01          	addl   $0x1,-0x7c(%rbp)
     ff6:	83 7d 84 07          	cmpl   $0x7,-0x7c(%rbp)
     ffa:	76 aa                	jbe    fa6 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xfa6>
     ffc:	b9 5b 01 00 00       	mov    $0x15b,%ecx
    1001:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1008 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x1008>
    1008:	48 89 c2             	mov    %rax,%rdx
    100b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1012 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x1012>
    1012:	48 89 c6             	mov    %rax,%rsi
    1015:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 101c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x101c>
    101c:	48 89 c7             	mov    %rax,%rdi
    101f:	b8 00 00 00 00       	mov    $0x0,%eax
    1024:	e8 00 00 00 00       	call   1029 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x1029>
    1029:	90                   	nop
    102a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    102e:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    1035:	00 00 
    1037:	74 05                	je     103e <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x103e>
    1039:	e8 00 00 00 00       	call   103e <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x103e>
    103e:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    1042:	c9                   	leave  
    1043:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmx7SetDataEjPKhj:

0000000000000000 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  13:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  17:	89 4d d0             	mov    %ecx,-0x30(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	b9 5f 01 00 00       	mov    $0x15f,%ecx
  2e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 35 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x35>
  35:	48 89 c2             	mov    %rax,%rdx
  38:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3f <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x3f>
  3f:	48 89 c6             	mov    %rax,%rsi
  42:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 49 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x49>
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	b8 00 00 00 00       	mov    $0x0,%eax
  51:	e8 00 00 00 00       	call   56 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x56>
  56:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  5b:	75 28                	jne    85 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x85>
  5d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 64 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x64>
  64:	48 89 c1             	mov    %rax,%rcx
  67:	ba 60 01 00 00       	mov    $0x160,%edx
  6c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 73 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x73>
  73:	48 89 c6             	mov    %rax,%rsi
  76:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7d <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7d>
  7d:	48 89 c7             	mov    %rax,%rdi
  80:	e8 00 00 00 00       	call   85 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x85>
  85:	81 7d d0 00 02 00 00 	cmpl   $0x200,-0x30(%rbp)
  8c:	76 28                	jbe    b6 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xb6>
  8e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 95 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x95>
  95:	48 89 c1             	mov    %rax,%rcx
  98:	ba 61 01 00 00       	mov    $0x161,%edx
  9d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # a4 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xa4>
  a4:	48 89 c6             	mov    %rax,%rsi
  a7:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ae <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xae>
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	call   b6 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xb6>
  b6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  bd:	e9 94 00 00 00       	jmp    156 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x156>
  c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c6:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  c9:	48 83 c2 18          	add    $0x18,%rdx
  cd:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  d2:	48 85 c0             	test   %rax,%rax
  d5:	74 4f                	je     126 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x126>
  d7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  db:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  de:	48 83 c2 18          	add    $0x18,%rdx
  e2:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  e7:	8b 55 d0             	mov    -0x30(%rbp),%edx
  ea:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  ee:	48 89 ce             	mov    %rcx,%rsi
  f1:	48 89 c7             	mov    %rax,%rdi
  f4:	e8 00 00 00 00       	call   f9 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf9>
  f9:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  fc:	88 44 15 f0          	mov    %al,-0x10(%rbp,%rdx,1)
 100:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 103:	0f b6 44 05 f0       	movzbl -0x10(%rbp,%rax,1),%eax
 108:	84 c0                	test   %al,%al
 10a:	74 22                	je     12e <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x12e>
 10c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 110:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 113:	48 83 c2 18          	add    $0x18,%rdx
 117:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 11c:	48 89 c7             	mov    %rax,%rdi
 11f:	e8 00 00 00 00       	call   124 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x124>
 124:	eb 08                	jmp    12e <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x12e>
 126:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 129:	c6 44 05 f0 00       	movb   $0x0,-0x10(%rbp,%rax,1)
 12e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 131:	0f b6 44 05 f0       	movzbl -0x10(%rbp,%rax,1),%eax
 136:	0f b6 d0             	movzbl %al,%edx
 139:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 13c:	89 c6                	mov    %eax,%esi
 13e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 145 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x145>
 145:	48 89 c7             	mov    %rax,%rdi
 148:	b8 00 00 00 00       	mov    $0x0,%eax
 14d:	e8 00 00 00 00       	call   152 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x152>
 152:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
 156:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
 15a:	0f 86 62 ff ff ff    	jbe    c2 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc2>
 160:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
 167:	eb 2d                	jmp    196 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x196>
 169:	8b 45 e8             	mov    -0x18(%rbp),%eax
 16c:	0f b6 44 05 f0       	movzbl -0x10(%rbp,%rax,1),%eax
 171:	84 c0                	test   %al,%al
 173:	74 1d                	je     192 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x192>
 175:	90                   	nop
 176:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 17a:	8b 55 e8             	mov    -0x18(%rbp),%edx
 17d:	48 83 c2 18          	add    $0x18,%rdx
 181:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 186:	48 89 c7             	mov    %rax,%rdi
 189:	e8 00 00 00 00       	call   18e <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x18e>
 18e:	84 c0                	test   %al,%al
 190:	75 e4                	jne    176 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x176>
 192:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
 196:	83 7d e8 07          	cmpl   $0x7,-0x18(%rbp)
 19a:	76 cd                	jbe    169 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x169>
 19c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
 1a3:	eb 37                	jmp    1dc <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x1dc>
 1a5:	8b 45 ec             	mov    -0x14(%rbp),%eax
 1a8:	48 98                	cltq   
 1aa:	0f b6 44 05 f0       	movzbl -0x10(%rbp,%rax,1),%eax
 1af:	84 c0                	test   %al,%al
 1b1:	74 25                	je     1d8 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x1d8>
 1b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1b7:	8b 55 ec             	mov    -0x14(%rbp),%edx
 1ba:	48 63 d2             	movslq %edx,%rdx
 1bd:	48 83 c2 18          	add    $0x18,%rdx
 1c1:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 1c6:	8b 55 d0             	mov    -0x30(%rbp),%edx
 1c9:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
 1cd:	48 89 ce             	mov    %rcx,%rsi
 1d0:	48 89 c7             	mov    %rax,%rdi
 1d3:	e8 00 00 00 00       	call   1d8 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x1d8>
 1d8:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
 1dc:	83 7d ec 07          	cmpl   $0x7,-0x14(%rbp)
 1e0:	7e c3                	jle    1a5 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x1a5>
 1e2:	b9 81 01 00 00       	mov    $0x181,%ecx
 1e7:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1ee <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x1ee>
 1ee:	48 89 c2             	mov    %rax,%rdx
 1f1:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1f8 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x1f8>
 1f8:	48 89 c6             	mov    %rax,%rsi
 1fb:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 202 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x202>
 202:	48 89 c7             	mov    %rax,%rdi
 205:	b8 00 00 00 00       	mov    $0x0,%eax
 20a:	e8 00 00 00 00       	call   20f <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x20f>
 20f:	90                   	nop
 210:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 214:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 21b:	00 00 
 21d:	74 05                	je     224 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x224>
 21f:	e8 00 00 00 00       	call   224 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x224>
 224:	c9                   	leave  
 225:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmx18SetDmxStartAddressEt:

0000000000000000 <SparkFunDmx::SetDmxStartAddress(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	b9 85 01 00 00       	mov    $0x185,%ecx
  1b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 22 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x22>
  22:	48 89 c2             	mov    %rax,%rdx
  25:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2c <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x2c>
  2c:	48 89 c6             	mov    %rax,%rsi
  2f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 36 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x36>
  36:	48 89 c7             	mov    %rax,%rdi
  39:	b8 00 00 00 00       	mov    $0x0,%eax
  3e:	e8 00 00 00 00       	call   43 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x43>
  43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  47:	0f b7 80 5a 01 00 00 	movzwl 0x15a(%rax),%eax
  4e:	66 39 45 e4          	cmp    %ax,-0x1c(%rbp)
  52:	75 0a                	jne    5e <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x5e>
  54:	b8 01 00 00 00       	mov    $0x1,%eax
  59:	e9 2b 01 00 00       	jmp    189 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x189>
  5e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  65:	e9 d4 00 00 00       	jmp    13e <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x13e>
  6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  71:	48 83 c2 18          	add    $0x18,%rdx
  75:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  7a:	48 85 c0             	test   %rax,%rax
  7d:	0f 84 b7 00 00 00    	je     13a <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x13a>
  83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  87:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8a:	48 83 c2 18          	add    $0x18,%rdx
  8e:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	call   9b <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x9b>
  9b:	66 89 45 f8          	mov    %ax,-0x8(%rbp)
  9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a3:	0f b7 90 5a 01 00 00 	movzwl 0x15a(%rax),%edx
  aa:	0f b7 45 f8          	movzwl -0x8(%rbp),%eax
  ae:	29 d0                	sub    %edx,%eax
  b0:	89 c1                	mov    %eax,%ecx
  b2:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  b6:	01 c8                	add    %ecx,%eax
  b8:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
  bc:	0f b7 4d fa          	movzwl -0x6(%rbp),%ecx
  c0:	0f b7 55 f8          	movzwl -0x8(%rbp),%edx
  c4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  c7:	89 c6                	mov    %eax,%esi
  c9:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d0 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0xd0>
  d0:	48 89 c7             	mov    %rax,%rdi
  d3:	b8 00 00 00 00       	mov    $0x0,%eax
  d8:	e8 00 00 00 00       	call   dd <SparkFunDmx::SetDmxStartAddress(unsigned short)+0xdd>
  dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e1:	8b 55 fc             	mov    -0x4(%rbp),%edx
  e4:	48 83 c2 18          	add    $0x18,%rdx
  e8:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  ed:	0f b7 55 fa          	movzwl -0x6(%rbp),%edx
  f1:	89 d6                	mov    %edx,%esi
  f3:	48 89 c7             	mov    %rax,%rdi
  f6:	e8 00 00 00 00       	call   fb <SparkFunDmx::SetDmxStartAddress(unsigned short)+0xfb>
  fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ff:	48 8b 80 60 01 00 00 	mov    0x160(%rax),%rax
 106:	48 85 c0             	test   %rax,%rax
 109:	74 2f                	je     13a <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x13a>
 10b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 10f:	48 8b 80 60 01 00 00 	mov    0x160(%rax),%rax
 116:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 11a:	48 8b 92 60 01 00 00 	mov    0x160(%rdx),%rdx
 121:	48 8b 12             	mov    (%rdx),%rdx
 124:	48 83 c2 10          	add    $0x10,%rdx
 128:	4c 8b 02             	mov    (%rdx),%r8
 12b:	0f b7 55 fa          	movzwl -0x6(%rbp),%edx
 12f:	8b 4d fc             	mov    -0x4(%rbp),%ecx
 132:	89 ce                	mov    %ecx,%esi
 134:	48 89 c7             	mov    %rax,%rdi
 137:	41 ff d0             	call   *%r8
 13a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
 13e:	83 7d fc 07          	cmpl   $0x7,-0x4(%rbp)
 142:	0f 86 22 ff ff ff    	jbe    6a <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x6a>
 148:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 14c:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
 150:	66 89 90 5a 01 00 00 	mov    %dx,0x15a(%rax)
 157:	b9 9c 01 00 00       	mov    $0x19c,%ecx
 15c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 163 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x163>
 163:	48 89 c2             	mov    %rax,%rdx
 166:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 16d <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x16d>
 16d:	48 89 c6             	mov    %rax,%rsi
 170:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 177 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x177>
 177:	48 89 c7             	mov    %rax,%rdi
 17a:	b8 00 00 00 00       	mov    $0x0,%eax
 17f:	e8 00 00 00 00       	call   184 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x184>
 184:	b8 01 00 00 00       	mov    $0x1,%eax
 189:	c9                   	leave  
 18a:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmx11GetSlotInfoEtRN8lightset8SlotInfoE:

0000000000000000 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	89 f0                	mov    %esi,%eax
  13:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  17:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  1b:	b9 a1 01 00 00       	mov    $0x1a1,%ecx
  20:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 27 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x27>
  27:	48 89 c2             	mov    %rax,%rdx
  2a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 31 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x31>
  31:	48 89 c6             	mov    %rax,%rsi
  34:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3b <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3b>
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	b8 00 00 00 00       	mov    $0x0,%eax
  43:	e8 00 00 00 00       	call   48 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x48>
  48:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4c:	0f b7 80 5c 01 00 00 	movzwl 0x15c(%rax),%eax
  53:	66 39 45 d4          	cmp    %ax,-0x2c(%rbp)
  57:	76 37                	jbe    90 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x90>
  59:	b9 a4 01 00 00       	mov    $0x1a4,%ecx
  5e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 65 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x65>
  65:	48 89 c2             	mov    %rax,%rdx
  68:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 6f <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x6f>
  6f:	48 89 c6             	mov    %rax,%rsi
  72:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 79 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x79>
  79:	48 89 c7             	mov    %rax,%rdi
  7c:	b8 00 00 00 00       	mov    $0x0,%eax
  81:	e8 00 00 00 00       	call   86 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x86>
  86:	b8 00 00 00 00       	mov    $0x0,%eax
  8b:	e9 60 01 00 00       	jmp    1f0 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x1f0>
  90:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  94:	0f b7 90 5a 01 00 00 	movzwl 0x15a(%rax),%edx
  9b:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
  9f:	01 d0                	add    %edx,%eax
  a1:	66 89 45 e8          	mov    %ax,-0x18(%rbp)
  a5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  ac:	e9 30 01 00 00       	jmp    1e1 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x1e1>
  b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b5:	8b 55 ec             	mov    -0x14(%rbp),%edx
  b8:	48 83 c2 18          	add    $0x18,%rdx
  bc:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  c1:	48 85 c0             	test   %rax,%rax
  c4:	0f 84 13 01 00 00    	je     1dd <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x1dd>
  ca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ce:	8b 55 ec             	mov    -0x14(%rbp),%edx
  d1:	48 83 c2 20          	add    $0x20,%rdx
  d5:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  da:	48 85 c0             	test   %rax,%rax
  dd:	0f 84 fa 00 00 00    	je     1dd <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x1dd>
  e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  e7:	8b 55 ec             	mov    -0x14(%rbp),%edx
  ea:	48 83 c2 18          	add    $0x18,%rdx
  ee:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  f3:	48 89 c7             	mov    %rax,%rdi
  f6:	e8 00 00 00 00       	call   fb <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0xfb>
  fb:	89 c2                	mov    %eax,%edx
  fd:	0f b7 45 e8          	movzwl -0x18(%rbp),%eax
 101:	29 d0                	sub    %edx,%eax
 103:	66 89 45 ea          	mov    %ax,-0x16(%rbp)
 107:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 10b:	8b 55 ec             	mov    -0x14(%rbp),%edx
 10e:	48 83 c2 18          	add    $0x18,%rdx
 112:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 117:	48 89 c7             	mov    %rax,%rdi
 11a:	e8 00 00 00 00       	call   11f <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x11f>
 11f:	66 39 45 e8          	cmp    %ax,-0x18(%rbp)
 123:	72 2a                	jb     14f <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x14f>
 125:	0f bf 5d ea          	movswl -0x16(%rbp),%ebx
 129:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12d:	8b 55 ec             	mov    -0x14(%rbp),%edx
 130:	48 83 c2 18          	add    $0x18,%rdx
 134:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
 139:	48 89 c7             	mov    %rax,%rdi
 13c:	e8 00 00 00 00       	call   141 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x141>
 141:	0f b7 c0             	movzwl %ax,%eax
 144:	39 c3                	cmp    %eax,%ebx
 146:	7d 07                	jge    14f <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x14f>
 148:	b8 01 00 00 00       	mov    $0x1,%eax
 14d:	eb 05                	jmp    154 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x154>
 14f:	b8 00 00 00 00       	mov    $0x0,%eax
 154:	84 c0                	test   %al,%al
 156:	0f 84 81 00 00 00    	je     1dd <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x1dd>
 15c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 160:	8b 55 ec             	mov    -0x14(%rbp),%edx
 163:	48 83 c2 20          	add    $0x20,%rdx
 167:	48 8b 54 d0 08       	mov    0x8(%rax,%rdx,8),%rdx
 16c:	48 0f bf 45 ea       	movswq -0x16(%rbp),%rax
 171:	48 c1 e0 02          	shl    $0x2,%rax
 175:	48 01 d0             	add    %rdx,%rax
 178:	0f b6 50 02          	movzbl 0x2(%rax),%edx
 17c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 180:	88 50 02             	mov    %dl,0x2(%rax)
 183:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 187:	8b 55 ec             	mov    -0x14(%rbp),%edx
 18a:	48 83 c2 20          	add    $0x20,%rdx
 18e:	48 8b 54 d0 08       	mov    0x8(%rax,%rdx,8),%rdx
 193:	48 0f bf 45 ea       	movswq -0x16(%rbp),%rax
 198:	48 c1 e0 02          	shl    $0x2,%rax
 19c:	48 01 d0             	add    %rdx,%rax
 19f:	0f b7 10             	movzwl (%rax),%edx
 1a2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1a6:	66 89 10             	mov    %dx,(%rax)
 1a9:	b9 b3 01 00 00       	mov    $0x1b3,%ecx
 1ae:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1b5 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x1b5>
 1b5:	48 89 c2             	mov    %rax,%rdx
 1b8:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1bf <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x1bf>
 1bf:	48 89 c6             	mov    %rax,%rsi
 1c2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c9 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x1c9>
 1c9:	48 89 c7             	mov    %rax,%rdi
 1cc:	b8 00 00 00 00       	mov    $0x0,%eax
 1d1:	e8 00 00 00 00       	call   1d6 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x1d6>
 1d6:	b8 01 00 00 00       	mov    $0x1,%eax
 1db:	eb 13                	jmp    1f0 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x1f0>
 1dd:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
 1e1:	83 7d ec 07          	cmpl   $0x7,-0x14(%rbp)
 1e5:	0f 86 c6 fe ff ff    	jbe    b1 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0xb1>
 1eb:	b8 00 00 00 00       	mov    $0x0,%eax
 1f0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 1f4:	c9                   	leave  
 1f5:	c3                   	ret    

Disassembly of section .text._ZSt3minItERKT_S2_S2_:

0000000000000000 <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	0f b7 10             	movzwl (%rax),%edx
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	0f b7 00             	movzwl (%rax),%eax
  1e:	66 39 c2             	cmp    %ax,%dx
  21:	73 06                	jae    29 <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)+0x29>
  23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  27:	eb 04                	jmp    2d <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)+0x2d>
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	5d                   	pop    %rbp
  2e:	c3                   	ret    

Disassembly of section .text._ZSt3maxItERKT_S2_S2_:

0000000000000000 <unsigned short const& std::max<unsigned short>(unsigned short const&, unsigned short const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b7 10             	movzwl (%rax),%edx
  17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1b:	0f b7 00             	movzwl (%rax),%eax
  1e:	66 39 c2             	cmp    %ax,%dx
  21:	73 06                	jae    29 <unsigned short const& std::max<unsigned short>(unsigned short const&, unsigned short const&)+0x29>
  23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  27:	eb 04                	jmp    2d <unsigned short const& std::max<unsigned short>(unsigned short const&, unsigned short const&)+0x2d>
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	5d                   	pop    %rbp
  2e:	c3                   	ret    

sparkfundmxparamsconst.o:     file format elf64-x86-64


sparkfundmxparams.o:     file format elf64-x86-64


Disassembly of section .text._ZN11SparkFunDmx14SetGlobalSpiCsEh:

0000000000000000 <SparkFunDmx::SetGlobalSpiCs(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	40 88 b7 48 01 00 00 	mov    %sil,0x148(%rdi)
   b:	c6 87 4b 01 00 00 01 	movb   $0x1,0x14b(%rdi)
  12:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmx17SetGlobalResetPinEh:

0000000000000000 <SparkFunDmx::SetGlobalResetPin(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	40 88 b7 49 01 00 00 	mov    %sil,0x149(%rdi)
   b:	c6 87 4c 01 00 00 01 	movb   $0x1,0x14c(%rdi)
  12:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmx16SetGlobalBusyPinEh:

0000000000000000 <SparkFunDmx::SetGlobalBusyPin(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	40 88 b7 4a 01 00 00 	mov    %sil,0x14a(%rdi)
   b:	c6 87 4d 01 00 00 01 	movb   $0x1,0x14d(%rdi)
  12:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmx16SetLocalPositionEh:

0000000000000000 <SparkFunDmx::SetLocalPosition(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	40 88 b7 4e 01 00 00 	mov    %sil,0x14e(%rdi)
   b:	c6 87 52 01 00 00 01 	movb   $0x1,0x152(%rdi)
  12:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmx13SetLocalSpiCsEh:

0000000000000000 <SparkFunDmx::SetLocalSpiCs(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	40 88 b7 4f 01 00 00 	mov    %sil,0x14f(%rdi)
   b:	c6 87 53 01 00 00 01 	movb   $0x1,0x153(%rdi)
  12:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmx16SetLocalResetPinEh:

0000000000000000 <SparkFunDmx::SetLocalResetPin(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	40 88 b7 50 01 00 00 	mov    %sil,0x150(%rdi)
   b:	c6 87 54 01 00 00 01 	movb   $0x1,0x154(%rdi)
  12:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmx15SetLocalBusyPinEh:

0000000000000000 <SparkFunDmx::SetLocalBusyPin(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	40 88 b7 51 01 00 00 	mov    %sil,0x151(%rdi)
   b:	c6 87 55 01 00 00 01 	movb   $0x1,0x155(%rdi)
  12:	c3                   	ret    

Disassembly of section .text._ZNK17SparkFunDmxParams9isMaskSetEj:

0000000000000000 <SparkFunDmxParams::isMaskSet(unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	8b 47 08             	mov    0x8(%rdi),%eax
   7:	21 f0                	and    %esi,%eax
   9:	39 f0                	cmp    %esi,%eax
   b:	0f 94 c0             	sete   %al
   e:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder7GetSizeEv:

0000000000000000 <PropertiesBuilder::GetSize()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	80 7f 0c 00          	cmpb   $0x0,0xc(%rdi)
   8:	74 1b                	je     25 <PropertiesBuilder::GetSize()+0x25>
   a:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
   e:	48 8b 17             	mov    (%rdi),%rdx
  11:	c6 44 02 ff 7d       	movb   $0x7d,-0x1(%rdx,%rax,1)
  16:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  1a:	48 8b 17             	mov    (%rdi),%rdx
  1d:	c6 04 02 7d          	movb   $0x7d,(%rdx,%rax,1)
  21:	66 ff 47 0a          	incw   0xa(%rdi)
  25:	66 8b 47 0a          	mov    0xa(%rdi),%ax
  29:	c3                   	ret    

Disassembly of section .text._ZN17SparkFunDmxParamsC2EP22SparkFunDmxParamsStore:

0000000000000000 <SparkFunDmxParams::SparkFunDmxParams(SparkFunDmxParamsStore*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 89 37             	mov    %rsi,(%rdi)
   7:	ba 10 00 00 00       	mov    $0x10,%edx
   c:	48 83 c7 10          	add    $0x10,%rdi
  10:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 17 <SparkFunDmxParams::SparkFunDmxParams(SparkFunDmxParamsStore*)+0x17>
  17:	c7 47 f8 00 00 00 00 	movl   $0x0,-0x8(%rdi)
  1e:	c6 47 fd 00          	movb   $0x0,-0x3(%rdi)
  22:	66 c7 47 fe 02 00    	movw   $0x2,-0x2(%rdi)
  28:	e9 00 00 00 00       	jmp    2d <.LC2+0x1d>

Disassembly of section .text._ZN17SparkFunDmxParams4LoadEv:

0000000000000000 <SparkFunDmxParams::Load()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	48 89 fa             	mov    %rdi,%rdx
   9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10 <SparkFunDmxParams::Load()+0x10>
  10:	55                   	push   %rbp
  11:	53                   	push   %rbx
  12:	48 89 fb             	mov    %rdi,%rbx
  15:	48 83 ec 20          	sub    $0x20,%rsp
  19:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  20:	00 00 
  22:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  27:	31 c0                	xor    %eax,%eax
  29:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  30:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  35:	48 89 ef             	mov    %rbp,%rdi
  38:	e8 00 00 00 00       	call   3d <SparkFunDmxParams::Load()+0x3d>
  3d:	48 89 ef             	mov    %rbp,%rdi
  40:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 47 <SparkFunDmxParams::Load()+0x47>
  47:	e8 00 00 00 00       	call   4c <SparkFunDmxParams::Load()+0x4c>
  4c:	48 8b 3b             	mov    (%rbx),%rdi
  4f:	84 c0                	test   %al,%al
  51:	41 89 c4             	mov    %eax,%r12d
  54:	74 11                	je     67 <SparkFunDmxParams::Load()+0x67>
  56:	48 85 ff             	test   %rdi,%rdi
  59:	74 1e                	je     79 <SparkFunDmxParams::Load()+0x79>
  5b:	48 8b 07             	mov    (%rdi),%rax
  5e:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  62:	ff 50 10             	call   *0x10(%rax)
  65:	eb 12                	jmp    79 <SparkFunDmxParams::Load()+0x79>
  67:	48 85 ff             	test   %rdi,%rdi
  6a:	74 0d                	je     79 <SparkFunDmxParams::Load()+0x79>
  6c:	48 8b 07             	mov    (%rdi),%rax
  6f:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  73:	41 b4 01             	mov    $0x1,%r12b
  76:	ff 50 18             	call   *0x18(%rax)
  79:	48 89 ef             	mov    %rbp,%rdi
  7c:	e8 00 00 00 00       	call   81 <SparkFunDmxParams::Load()+0x81>
  81:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  86:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8d:	00 00 
  8f:	74 05                	je     96 <SparkFunDmxParams::Load()+0x96>
  91:	e8 00 00 00 00       	call   96 <SparkFunDmxParams::Load()+0x96>
  96:	48 83 c4 20          	add    $0x20,%rsp
  9a:	44 89 e0             	mov    %r12d,%eax
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	41 5c                	pop    %r12
  a1:	c3                   	ret    

Disassembly of section .text._ZN17SparkFunDmxParams4LoadEPKcj:

0000000000000000 <SparkFunDmxParams::Load(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	55                   	push   %rbp
   9:	53                   	push   %rbx
   a:	48 83 ec 28          	sub    $0x28,%rsp
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  22:	74 4a                	je     6e <SparkFunDmxParams::Load(char const*, unsigned int)+0x6e>
  24:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  2b:	48 89 fb             	mov    %rdi,%rbx
  2e:	49 89 f4             	mov    %rsi,%r12
  31:	41 89 d5             	mov    %edx,%r13d
  34:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  39:	48 89 fa             	mov    %rdi,%rdx
  3c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 43 <SparkFunDmxParams::Load(char const*, unsigned int)+0x43>
  43:	48 89 ef             	mov    %rbp,%rdi
  46:	e8 00 00 00 00       	call   4b <SparkFunDmxParams::Load(char const*, unsigned int)+0x4b>
  4b:	44 89 ea             	mov    %r13d,%edx
  4e:	4c 89 e6             	mov    %r12,%rsi
  51:	48 89 ef             	mov    %rbp,%rdi
  54:	e8 00 00 00 00       	call   59 <SparkFunDmxParams::Load(char const*, unsigned int)+0x59>
  59:	48 8b 3b             	mov    (%rbx),%rdi
  5c:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  60:	48 8b 07             	mov    (%rdi),%rax
  63:	ff 50 10             	call   *0x10(%rax)
  66:	48 89 ef             	mov    %rbp,%rdi
  69:	e8 00 00 00 00       	call   6e <SparkFunDmxParams::Load(char const*, unsigned int)+0x6e>
  6e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  73:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  7a:	00 00 
  7c:	74 05                	je     83 <SparkFunDmxParams::Load(char const*, unsigned int)+0x83>
  7e:	e8 00 00 00 00       	call   83 <SparkFunDmxParams::Load(char const*, unsigned int)+0x83>
  83:	48 83 c4 28          	add    $0x28,%rsp
  87:	5b                   	pop    %rbx
  88:	5d                   	pop    %rbp
  89:	41 5c                	pop    %r12
  8b:	41 5d                	pop    %r13
  8d:	c3                   	ret    

Disassembly of section .text._ZN17SparkFunDmxParams4LoadEj:

0000000000000000 <SparkFunDmxParams::Load(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	48 89 fa             	mov    %rdi,%rdx
   9:	41 89 f5             	mov    %esi,%r13d
   c:	41 54                	push   %r12
   e:	55                   	push   %rbp
   f:	53                   	push   %rbx
  10:	48 89 fb             	mov    %rdi,%rbx
  13:	48 83 ec 28          	sub    $0x28,%rsp
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  25:	31 c0                	xor    %eax,%eax
  27:	8d 46 30             	lea    0x30(%rsi),%eax
  2a:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  31:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  36:	88 47 15             	mov    %al,0x15(%rdi)
  39:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 40 <SparkFunDmxParams::Load(unsigned int)+0x40>
  40:	48 89 ef             	mov    %rbp,%rdi
  43:	e8 00 00 00 00       	call   48 <SparkFunDmxParams::Load(unsigned int)+0x48>
  48:	48 89 ef             	mov    %rbp,%rdi
  4b:	48 8d 73 10          	lea    0x10(%rbx),%rsi
  4f:	e8 00 00 00 00       	call   54 <SparkFunDmxParams::Load(unsigned int)+0x54>
  54:	48 8b 3b             	mov    (%rbx),%rdi
  57:	84 c0                	test   %al,%al
  59:	41 89 c4             	mov    %eax,%r12d
  5c:	74 14                	je     72 <SparkFunDmxParams::Load(unsigned int)+0x72>
  5e:	48 85 ff             	test   %rdi,%rdi
  61:	74 24                	je     87 <SparkFunDmxParams::Load(unsigned int)+0x87>
  63:	48 8b 07             	mov    (%rdi),%rax
  66:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  6a:	44 89 ee             	mov    %r13d,%esi
  6d:	ff 50 20             	call   *0x20(%rax)
  70:	eb 15                	jmp    87 <SparkFunDmxParams::Load(unsigned int)+0x87>
  72:	48 85 ff             	test   %rdi,%rdi
  75:	74 10                	je     87 <SparkFunDmxParams::Load(unsigned int)+0x87>
  77:	48 8b 07             	mov    (%rdi),%rax
  7a:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  7e:	44 89 ee             	mov    %r13d,%esi
  81:	41 b4 01             	mov    $0x1,%r12b
  84:	ff 50 28             	call   *0x28(%rax)
  87:	48 89 ef             	mov    %rbp,%rdi
  8a:	e8 00 00 00 00       	call   8f <SparkFunDmxParams::Load(unsigned int)+0x8f>
  8f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  94:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  9b:	00 00 
  9d:	74 05                	je     a4 <SparkFunDmxParams::Load(unsigned int)+0xa4>
  9f:	e8 00 00 00 00       	call   a4 <SparkFunDmxParams::Load(unsigned int)+0xa4>
  a4:	48 83 c4 28          	add    $0x28,%rsp
  a8:	44 89 e0             	mov    %r12d,%eax
  ab:	5b                   	pop    %rbx
  ac:	5d                   	pop    %rbp
  ad:	41 5c                	pop    %r12
  af:	41 5d                	pop    %r13
  b1:	c3                   	ret    

Disassembly of section .text._ZN17SparkFunDmxParams4LoadEjPKcj:

0000000000000000 <SparkFunDmxParams::Load(unsigned int, char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 55                	push   %r13
   8:	41 54                	push   %r12
   a:	55                   	push   %rbp
   b:	53                   	push   %rbx
   c:	48 83 ec 20          	sub    $0x20,%rsp
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  24:	74 50                	je     76 <SparkFunDmxParams::Load(unsigned int, char const*, unsigned int)+0x76>
  26:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  2d:	41 89 ce             	mov    %ecx,%r14d
  30:	48 89 fb             	mov    %rdi,%rbx
  33:	41 89 f4             	mov    %esi,%r12d
  36:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  3b:	49 89 d5             	mov    %rdx,%r13
  3e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 45 <SparkFunDmxParams::Load(unsigned int, char const*, unsigned int)+0x45>
  45:	48 89 fa             	mov    %rdi,%rdx
  48:	48 89 ef             	mov    %rbp,%rdi
  4b:	e8 00 00 00 00       	call   50 <SparkFunDmxParams::Load(unsigned int, char const*, unsigned int)+0x50>
  50:	44 89 f2             	mov    %r14d,%edx
  53:	4c 89 ee             	mov    %r13,%rsi
  56:	48 89 ef             	mov    %rbp,%rdi
  59:	e8 00 00 00 00       	call   5e <SparkFunDmxParams::Load(unsigned int, char const*, unsigned int)+0x5e>
  5e:	48 8b 3b             	mov    (%rbx),%rdi
  61:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  65:	44 89 e6             	mov    %r12d,%esi
  68:	48 8b 07             	mov    (%rdi),%rax
  6b:	ff 50 20             	call   *0x20(%rax)
  6e:	48 89 ef             	mov    %rbp,%rdi
  71:	e8 00 00 00 00       	call   76 <SparkFunDmxParams::Load(unsigned int, char const*, unsigned int)+0x76>
  76:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  7b:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  82:	00 00 
  84:	74 05                	je     8b <SparkFunDmxParams::Load(unsigned int, char const*, unsigned int)+0x8b>
  86:	e8 00 00 00 00       	call   8b <SparkFunDmxParams::Load(unsigned int, char const*, unsigned int)+0x8b>
  8b:	48 83 c4 20          	add    $0x20,%rsp
  8f:	5b                   	pop    %rbx
  90:	5d                   	pop    %rbp
  91:	41 5c                	pop    %r12
  93:	41 5d                	pop    %r13
  95:	41 5e                	pop    %r14
  97:	c3                   	ret    

Disassembly of section .text._ZN17SparkFunDmxParams16callbackFunctionEPKc:

0000000000000000 <SparkFunDmxParams::callbackFunction(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	55                   	push   %rbp
   7:	48 89 f5             	mov    %rsi,%rbp
   a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 11 <SparkFunDmxParams::callbackFunction(char const*)+0x11>
  11:	53                   	push   %rbx
  12:	48 89 fb             	mov    %rdi,%rbx
  15:	48 89 ef             	mov    %rbp,%rdi
  18:	48 83 ec 10          	sub    $0x10,%rsp
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	4c 8d 64 24 07       	lea    0x7(%rsp),%r12
  31:	4c 89 e2             	mov    %r12,%rdx
  34:	e8 00 00 00 00       	call   39 <SparkFunDmxParams::callbackFunction(char const*)+0x39>
  39:	85 c0                	test   %eax,%eax
  3b:	75 11                	jne    4e <SparkFunDmxParams::callbackFunction(char const*)+0x4e>
  3d:	8a 44 24 07          	mov    0x7(%rsp),%al
  41:	3c 07                	cmp    $0x7,%al
  43:	77 70                	ja     b5 <SparkFunDmxParams::callbackFunction(char const*)+0xb5>
  45:	83 4b 08 01          	orl    $0x1,0x8(%rbx)
  49:	88 43 0c             	mov    %al,0xc(%rbx)
  4c:	eb 67                	jmp    b5 <SparkFunDmxParams::callbackFunction(char const*)+0xb5>
  4e:	4c 89 e2             	mov    %r12,%rdx
  51:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 58 <SparkFunDmxParams::callbackFunction(char const*)+0x58>
  58:	48 89 ef             	mov    %rbp,%rdi
  5b:	e8 00 00 00 00       	call   60 <SparkFunDmxParams::callbackFunction(char const*)+0x60>
  60:	85 c0                	test   %eax,%eax
  62:	75 0d                	jne    71 <SparkFunDmxParams::callbackFunction(char const*)+0x71>
  64:	8a 44 24 07          	mov    0x7(%rsp),%al
  68:	83 4b 08 02          	orl    $0x2,0x8(%rbx)
  6c:	88 43 0d             	mov    %al,0xd(%rbx)
  6f:	eb 44                	jmp    b5 <SparkFunDmxParams::callbackFunction(char const*)+0xb5>
  71:	4c 89 e2             	mov    %r12,%rdx
  74:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 7b <SparkFunDmxParams::callbackFunction(char const*)+0x7b>
  7b:	48 89 ef             	mov    %rbp,%rdi
  7e:	e8 00 00 00 00       	call   83 <SparkFunDmxParams::callbackFunction(char const*)+0x83>
  83:	85 c0                	test   %eax,%eax
  85:	75 0d                	jne    94 <SparkFunDmxParams::callbackFunction(char const*)+0x94>
  87:	8a 44 24 07          	mov    0x7(%rsp),%al
  8b:	83 4b 08 04          	orl    $0x4,0x8(%rbx)
  8f:	88 43 0e             	mov    %al,0xe(%rbx)
  92:	eb 21                	jmp    b5 <SparkFunDmxParams::callbackFunction(char const*)+0xb5>
  94:	4c 89 e2             	mov    %r12,%rdx
  97:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 9e <SparkFunDmxParams::callbackFunction(char const*)+0x9e>
  9e:	48 89 ef             	mov    %rbp,%rdi
  a1:	e8 00 00 00 00       	call   a6 <SparkFunDmxParams::callbackFunction(char const*)+0xa6>
  a6:	85 c0                	test   %eax,%eax
  a8:	75 0b                	jne    b5 <SparkFunDmxParams::callbackFunction(char const*)+0xb5>
  aa:	8a 44 24 07          	mov    0x7(%rsp),%al
  ae:	83 4b 08 08          	orl    $0x8,0x8(%rbx)
  b2:	88 43 0f             	mov    %al,0xf(%rbx)
  b5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  ba:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  c1:	00 00 
  c3:	74 05                	je     ca <SparkFunDmxParams::callbackFunction(char const*)+0xca>
  c5:	e8 00 00 00 00       	call   ca <SparkFunDmxParams::callbackFunction(char const*)+0xca>
  ca:	48 83 c4 10          	add    $0x10,%rsp
  ce:	5b                   	pop    %rbx
  cf:	5d                   	pop    %rbp
  d0:	41 5c                	pop    %r12
  d2:	c3                   	ret    

Disassembly of section .text._ZN17SparkFunDmxParams7BuilderEPK18TSparkFunDmxParamsPcjRjj:

0000000000000000 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 57                	push   %r15
   6:	41 89 cf             	mov    %ecx,%r15d
   9:	41 56                	push   %r14
   b:	49 89 d6             	mov    %rdx,%r14
   e:	41 55                	push   %r13
  10:	4d 89 c5             	mov    %r8,%r13
  13:	41 54                	push   %r12
  15:	55                   	push   %rbp
  16:	44 89 cd             	mov    %r9d,%ebp
  19:	53                   	push   %rbx
  1a:	48 89 fb             	mov    %rdi,%rbx
  1d:	48 83 ec 28          	sub    $0x28,%rsp
  21:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  28:	00 00 
  2a:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  2f:	31 c0                	xor    %eax,%eax
  31:	48 85 f6             	test   %rsi,%rsi
  34:	74 0f                	je     45 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x45>
  36:	48 8b 06             	mov    (%rsi),%rax
  39:	48 89 47 08          	mov    %rax,0x8(%rdi)
  3d:	41 83 f9 07          	cmp    $0x7,%r9d
  41:	76 2f                	jbe    72 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x72>
  43:	eb 24                	jmp    69 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x69>
  45:	48 8b 3f             	mov    (%rdi),%rdi
  48:	48 8d 53 08          	lea    0x8(%rbx),%rdx
  4c:	48 8b 07             	mov    (%rdi),%rax
  4f:	41 83 f9 07          	cmp    $0x7,%r9d
  53:	77 0e                	ja     63 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x63>
  55:	44 89 ce             	mov    %r9d,%esi
  58:	ff 50 28             	call   *0x28(%rax)
  5b:	8d 45 30             	lea    0x30(%rbp),%eax
  5e:	88 43 15             	mov    %al,0x15(%rbx)
  61:	eb 0f                	jmp    72 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x72>
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	ff 50 18             	call   *0x18(%rax)
  69:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 70 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x70>
  70:	eb 04                	jmp    76 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x76>
  72:	48 8d 73 10          	lea    0x10(%rbx),%rsi
  76:	4c 8d 64 24 08       	lea    0x8(%rsp),%r12
  7b:	44 89 f9             	mov    %r15d,%ecx
  7e:	4c 89 f2             	mov    %r14,%rdx
  81:	4c 89 e7             	mov    %r12,%rdi
  84:	e8 00 00 00 00       	call   89 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x89>
  89:	83 fd 07             	cmp    $0x7,%ebp
  8c:	77 29                	ja     b7 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0xb7>
  8e:	be 01 00 00 00       	mov    $0x1,%esi
  93:	48 89 df             	mov    %rbx,%rdi
  96:	e8 00 00 00 00       	call   9b <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x9b>
  9b:	0f b6 53 0c          	movzbl 0xc(%rbx),%edx
  9f:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  a5:	4c 89 e7             	mov    %r12,%rdi
  a8:	0f b6 c8             	movzbl %al,%ecx
  ab:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # b2 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0xb2>
  b2:	e8 00 00 00 00       	call   b7 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0xb7>
  b7:	be 04 00 00 00       	mov    $0x4,%esi
  bc:	48 89 df             	mov    %rbx,%rdi
  bf:	e8 00 00 00 00       	call   c4 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0xc4>
  c4:	0f b6 53 0e          	movzbl 0xe(%rbx),%edx
  c8:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  ce:	4c 89 e7             	mov    %r12,%rdi
  d1:	0f b6 c8             	movzbl %al,%ecx
  d4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # db <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0xdb>
  db:	e8 00 00 00 00       	call   e0 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0xe0>
  e0:	be 08 00 00 00       	mov    $0x8,%esi
  e5:	48 89 df             	mov    %rbx,%rdi
  e8:	e8 00 00 00 00       	call   ed <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0xed>
  ed:	0f b6 53 0f          	movzbl 0xf(%rbx),%edx
  f1:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  f7:	4c 89 e7             	mov    %r12,%rdi
  fa:	0f b6 c8             	movzbl %al,%ecx
  fd:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 104 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x104>
 104:	e8 00 00 00 00       	call   109 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x109>
 109:	be 02 00 00 00       	mov    $0x2,%esi
 10e:	48 89 df             	mov    %rbx,%rdi
 111:	e8 00 00 00 00       	call   116 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x116>
 116:	0f b6 53 0d          	movzbl 0xd(%rbx),%edx
 11a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 120:	4c 89 e7             	mov    %r12,%rdi
 123:	0f b6 c8             	movzbl %al,%ecx
 126:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 12d <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x12d>
 12d:	e8 00 00 00 00       	call   132 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x132>
 132:	4c 89 e7             	mov    %r12,%rdi
 135:	e8 00 00 00 00       	call   13a <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x13a>
 13a:	0f b7 c0             	movzwl %ax,%eax
 13d:	41 89 45 00          	mov    %eax,0x0(%r13)
 141:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
 146:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 14d:	00 00 
 14f:	74 05                	je     156 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x156>
 151:	e8 00 00 00 00       	call   156 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x156>
 156:	48 83 c4 28          	add    $0x28,%rsp
 15a:	5b                   	pop    %rbx
 15b:	5d                   	pop    %rbp
 15c:	41 5c                	pop    %r12
 15e:	41 5d                	pop    %r13
 160:	41 5e                	pop    %r14
 162:	41 5f                	pop    %r15
 164:	c3                   	ret    

Disassembly of section .text._ZN17SparkFunDmxParams4SaveEPcjRjj:

0000000000000000 <SparkFunDmxParams::Save(char*, unsigned int, unsigned int&, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 3f 00          	cmpq   $0x0,(%rdi)
   8:	45 89 c1             	mov    %r8d,%r9d
   b:	75 07                	jne    14 <SparkFunDmxParams::Save(char*, unsigned int, unsigned int&, unsigned int)+0x14>
   d:	c7 01 00 00 00 00    	movl   $0x0,(%rcx)
  13:	c3                   	ret    
  14:	49 89 c8             	mov    %rcx,%r8
  17:	89 d1                	mov    %edx,%ecx
  19:	48 89 f2             	mov    %rsi,%rdx
  1c:	31 f6                	xor    %esi,%esi
  1e:	e9 00 00 00 00       	jmp    23 <.LC2+0x13>

Disassembly of section .text._ZN17SparkFunDmxParams9SetGlobalEP11SparkFunDmx:

0000000000000000 <SparkFunDmxParams::SetGlobal(SparkFunDmx*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 f5             	mov    %rsi,%rbp
   8:	be 02 00 00 00       	mov    $0x2,%esi
   d:	53                   	push   %rbx
   e:	48 89 fb             	mov    %rdi,%rbx
  11:	51                   	push   %rcx
  12:	e8 00 00 00 00       	call   17 <SparkFunDmxParams::SetGlobal(SparkFunDmx*)+0x17>
  17:	84 c0                	test   %al,%al
  19:	74 0c                	je     27 <SparkFunDmxParams::SetGlobal(SparkFunDmx*)+0x27>
  1b:	0f b6 73 0d          	movzbl 0xd(%rbx),%esi
  1f:	48 89 ef             	mov    %rbp,%rdi
  22:	e8 00 00 00 00       	call   27 <SparkFunDmxParams::SetGlobal(SparkFunDmx*)+0x27>
  27:	be 04 00 00 00       	mov    $0x4,%esi
  2c:	48 89 df             	mov    %rbx,%rdi
  2f:	e8 00 00 00 00       	call   34 <SparkFunDmxParams::SetGlobal(SparkFunDmx*)+0x34>
  34:	84 c0                	test   %al,%al
  36:	74 0c                	je     44 <SparkFunDmxParams::SetGlobal(SparkFunDmx*)+0x44>
  38:	0f b6 73 0e          	movzbl 0xe(%rbx),%esi
  3c:	48 89 ef             	mov    %rbp,%rdi
  3f:	e8 00 00 00 00       	call   44 <SparkFunDmxParams::SetGlobal(SparkFunDmx*)+0x44>
  44:	be 08 00 00 00       	mov    $0x8,%esi
  49:	48 89 df             	mov    %rbx,%rdi
  4c:	e8 00 00 00 00       	call   51 <SparkFunDmxParams::SetGlobal(SparkFunDmx*)+0x51>
  51:	84 c0                	test   %al,%al
  53:	74 0f                	je     64 <SparkFunDmxParams::SetGlobal(SparkFunDmx*)+0x64>
  55:	0f b6 73 0f          	movzbl 0xf(%rbx),%esi
  59:	48 89 ef             	mov    %rbp,%rdi
  5c:	5a                   	pop    %rdx
  5d:	5b                   	pop    %rbx
  5e:	5d                   	pop    %rbp
  5f:	e9 00 00 00 00       	jmp    64 <SparkFunDmxParams::SetGlobal(SparkFunDmx*)+0x64>
  64:	58                   	pop    %rax
  65:	5b                   	pop    %rbx
  66:	5d                   	pop    %rbp
  67:	c3                   	ret    

Disassembly of section .text._ZN17SparkFunDmxParams8SetLocalEP11SparkFunDmx:

0000000000000000 <SparkFunDmxParams::SetLocal(SparkFunDmx*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 f5             	mov    %rsi,%rbp
   8:	be 01 00 00 00       	mov    $0x1,%esi
   d:	53                   	push   %rbx
   e:	48 89 fb             	mov    %rdi,%rbx
  11:	51                   	push   %rcx
  12:	e8 00 00 00 00       	call   17 <SparkFunDmxParams::SetLocal(SparkFunDmx*)+0x17>
  17:	84 c0                	test   %al,%al
  19:	74 0c                	je     27 <SparkFunDmxParams::SetLocal(SparkFunDmx*)+0x27>
  1b:	0f b6 73 0c          	movzbl 0xc(%rbx),%esi
  1f:	48 89 ef             	mov    %rbp,%rdi
  22:	e8 00 00 00 00       	call   27 <SparkFunDmxParams::SetLocal(SparkFunDmx*)+0x27>
  27:	be 02 00 00 00       	mov    $0x2,%esi
  2c:	48 89 df             	mov    %rbx,%rdi
  2f:	e8 00 00 00 00       	call   34 <SparkFunDmxParams::SetLocal(SparkFunDmx*)+0x34>
  34:	84 c0                	test   %al,%al
  36:	74 0c                	je     44 <SparkFunDmxParams::SetLocal(SparkFunDmx*)+0x44>
  38:	0f b6 73 0d          	movzbl 0xd(%rbx),%esi
  3c:	48 89 ef             	mov    %rbp,%rdi
  3f:	e8 00 00 00 00       	call   44 <SparkFunDmxParams::SetLocal(SparkFunDmx*)+0x44>
  44:	be 04 00 00 00       	mov    $0x4,%esi
  49:	48 89 df             	mov    %rbx,%rdi
  4c:	e8 00 00 00 00       	call   51 <SparkFunDmxParams::SetLocal(SparkFunDmx*)+0x51>
  51:	84 c0                	test   %al,%al
  53:	74 0c                	je     61 <SparkFunDmxParams::SetLocal(SparkFunDmx*)+0x61>
  55:	0f b6 73 0e          	movzbl 0xe(%rbx),%esi
  59:	48 89 ef             	mov    %rbp,%rdi
  5c:	e8 00 00 00 00       	call   61 <SparkFunDmxParams::SetLocal(SparkFunDmx*)+0x61>
  61:	be 08 00 00 00       	mov    $0x8,%esi
  66:	48 89 df             	mov    %rbx,%rdi
  69:	e8 00 00 00 00       	call   6e <SparkFunDmxParams::SetLocal(SparkFunDmx*)+0x6e>
  6e:	84 c0                	test   %al,%al
  70:	74 0f                	je     81 <SparkFunDmxParams::SetLocal(SparkFunDmx*)+0x81>
  72:	0f b6 73 0f          	movzbl 0xf(%rbx),%esi
  76:	48 89 ef             	mov    %rbp,%rdi
  79:	5a                   	pop    %rdx
  7a:	5b                   	pop    %rbx
  7b:	5d                   	pop    %rbp
  7c:	e9 00 00 00 00       	jmp    81 <SparkFunDmxParams::SetLocal(SparkFunDmx*)+0x81>
  81:	58                   	pop    %rax
  82:	5b                   	pop    %rbx
  83:	5d                   	pop    %rbp
  84:	c3                   	ret    

Disassembly of section .text._ZN17SparkFunDmxParams4DumpEj:

0000000000000000 <SparkFunDmxParams::Dump(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	c3                   	ret    

Disassembly of section .text._ZN17SparkFunDmxParams22staticCallbackFunctionEPvPKc:

0000000000000000 <SparkFunDmxParams::staticCallbackFunction(void*, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	e9 00 00 00 00       	jmp    9 <.LC1>

Disassembly of section .text._ZN17PropertiesBuilder3AddIhEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 52                	push   %r10
   8:	49 89 f2             	mov    %rsi,%r10
   b:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 33                	jmp    4f <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x4f>
  1c:	89 d0                	mov    %edx,%eax
  1e:	48 89 fb             	mov    %rdi,%rbx
  21:	0f b7 d6             	movzwl %si,%edx
  24:	48 03 37             	add    (%rdi),%rsi
  27:	57                   	push   %rdi
  28:	29 d5                	sub    %edx,%ebp
  2a:	44 0f b6 c9          	movzbl %cl,%r9d
  2e:	48 89 df             	mov    %rbx,%rdi
  31:	41 50                	push   %r8
  33:	4c 89 d1             	mov    %r10,%rcx
  36:	44 0f b6 c0          	movzbl %al,%r8d
  3a:	89 ea                	mov    %ebp,%edx
  3c:	e8 00 00 00 00       	call   41 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x41>
  41:	41 58                	pop    %r8
  43:	41 59                	pop    %r9
  45:	39 c5                	cmp    %eax,%ebp
  47:	7c cf                	jl     18 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x18>
  49:	66 01 43 0a          	add    %ax,0xa(%rbx)
  4d:	b0 01                	mov    $0x1,%al
  4f:	5a                   	pop    %rdx
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIhEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fa             	mov    %rdi,%r10
   7:	45 0f b6 c0          	movzbl %r8b,%r8d
   b:	48 89 f7             	mov    %rsi,%rdi
   e:	89 d6                	mov    %edx,%esi
  10:	41 8a 42 0c          	mov    0xc(%r10),%al
  14:	45 84 c9             	test   %r9b,%r9b
  17:	75 06                	jne    1f <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x1f>
  19:	84 c0                	test   %al,%al
  1b:	75 0d                	jne    2a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x2a>
  1d:	eb 14                	jmp    33 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x33>
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x26>
  26:	84 c0                	test   %al,%al
  28:	74 10                	je     3a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x3a>
  2a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 31 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x31>
  31:	eb 07                	jmp    3a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x3a>
  33:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x3a>
  3a:	31 c0                	xor    %eax,%eax
  3c:	e9 00 00 00 00       	jmp    41 <.LC2+0x31>

sparkfundmxprint.o:     file format elf64-x86-64


Disassembly of section .text._ZN13L6470DmxModes15GetDmxFootPrintEv:

0000000000000000 <L6470DmxModes::GetDmxFootPrint()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  14:	5d                   	pop    %rbp
  15:	c3                   	ret    

Disassembly of section .text._ZN11SparkFunDmx5PrintEv:

0000000000000000 <SparkFunDmx::Print()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  17:	e9 0a 01 00 00       	jmp    126 <SparkFunDmx::Print()+0x126>
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	8b 55 f8             	mov    -0x8(%rbp),%edx
  23:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  28:	48 85 c0             	test   %rax,%rax
  2b:	0f 84 f1 00 00 00    	je     122 <SparkFunDmx::Print()+0x122>
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	8b 55 f8             	mov    -0x8(%rbp),%edx
  38:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	call   45 <SparkFunDmx::Print()+0x45>
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	8b 55 f8             	mov    -0x8(%rbp),%edx
  4c:	48 83 c2 18          	add    $0x18,%rdx
  50:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  55:	48 85 c0             	test   %rax,%rax
  58:	0f 84 c4 00 00 00    	je     122 <SparkFunDmx::Print()+0x122>
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	8b 55 f8             	mov    -0x8(%rbp),%edx
  65:	48 83 c2 18          	add    $0x18,%rdx
  69:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  6e:	48 89 c7             	mov    %rax,%rdi
  71:	e8 00 00 00 00       	call   76 <SparkFunDmx::Print()+0x76>
  76:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7d <SparkFunDmx::Print()+0x7d>
  7d:	48 89 c7             	mov    %rax,%rdi
  80:	b8 00 00 00 00       	mov    $0x0,%eax
  85:	e8 00 00 00 00       	call   8a <SparkFunDmx::Print()+0x8a>
  8a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  91:	eb 5b                	jmp    ee <SparkFunDmx::Print()+0xee>
  93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  97:	8b 55 f8             	mov    -0x8(%rbp),%edx
  9a:	48 83 c2 20          	add    $0x20,%rdx
  9e:	48 8b 54 d0 08       	mov    0x8(%rax,%rdx,8),%rdx
  a3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  a6:	48 c1 e0 02          	shl    $0x2,%rax
  aa:	48 01 d0             	add    %rdx,%rax
  ad:	0f b7 00             	movzwl (%rax),%eax
  b0:	0f b7 d0             	movzwl %ax,%edx
  b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b7:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  ba:	48 83 c1 20          	add    $0x20,%rcx
  be:	48 8b 4c c8 08       	mov    0x8(%rax,%rcx,8),%rcx
  c3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  c6:	48 c1 e0 02          	shl    $0x2,%rax
  ca:	48 01 c8             	add    %rcx,%rax
  cd:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  d1:	0f b6 c0             	movzbl %al,%eax
  d4:	89 c6                	mov    %eax,%esi
  d6:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # dd <SparkFunDmx::Print()+0xdd>
  dd:	48 89 c7             	mov    %rax,%rdi
  e0:	b8 00 00 00 00       	mov    $0x0,%eax
  e5:	e8 00 00 00 00       	call   ea <SparkFunDmx::Print()+0xea>
  ea:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f2:	8b 55 f8             	mov    -0x8(%rbp),%edx
  f5:	48 83 c2 18          	add    $0x18,%rdx
  f9:	48 8b 44 d0 08       	mov    0x8(%rax,%rdx,8),%rax
  fe:	48 89 c7             	mov    %rax,%rdi
 101:	e8 00 00 00 00       	call   106 <SparkFunDmx::Print()+0x106>
 106:	0f b7 c0             	movzwl %ax,%eax
 109:	39 45 fc             	cmp    %eax,-0x4(%rbp)
 10c:	0f 92 c0             	setb   %al
 10f:	84 c0                	test   %al,%al
 111:	75 80                	jne    93 <SparkFunDmx::Print()+0x93>
 113:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 11a <SparkFunDmx::Print()+0x11a>
 11a:	48 89 c7             	mov    %rax,%rdi
 11d:	e8 00 00 00 00       	call   122 <SparkFunDmx::Print()+0x122>
 122:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
 126:	83 7d f8 07          	cmpl   $0x7,-0x8(%rbp)
 12a:	0f 86 ec fe ff ff    	jbe    1c <SparkFunDmx::Print()+0x1c>
 130:	90                   	nop
 131:	90                   	nop
 132:	c9                   	leave  
 133:	c3                   	ret    
