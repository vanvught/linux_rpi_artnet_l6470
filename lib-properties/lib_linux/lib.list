In archive lib_linux/libproperties.a:

devicesparamsconst.o:     file format elf64-x86-64


parse.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Parse11DmxSlotInfoEPcRbRhRt:

0000000000000000 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  18:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	c6 45 f3 00          	movb   $0x0,-0xd(%rbp)
  28:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%rbp)
  2e:	eb 6f                	jmp    9f <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x9f>
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	0f b6 00             	movzbl (%rax),%eax
  37:	0f be c0             	movsbl %al,%eax
  3a:	89 c7                	mov    %eax,%edi
  3c:	e8 00 00 00 00       	call   41 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x41>
  41:	85 c0                	test   %eax,%eax
  43:	75 11                	jne    56 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x56>
  45:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  49:	c6 00 00             	movb   $0x0,(%rax)
  4c:	b8 00 00 00 00       	mov    $0x0,%eax
  51:	e9 98 01 00 00       	jmp    1ee <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1ee>
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	0f b6 00             	movzbl (%rax),%eax
  5d:	3c 39                	cmp    $0x39,%al
  5f:	7e 0f                	jle    70 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x70>
  61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  65:	0f b6 00             	movzbl (%rax),%eax
  68:	83 c8 20             	or     $0x20,%eax
  6b:	83 e8 57             	sub    $0x57,%eax
  6e:	eb 0a                	jmp    7a <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x7a>
  70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  74:	0f b6 00             	movzbl (%rax),%eax
  77:	83 e8 30             	sub    $0x30,%eax
  7a:	88 45 f4             	mov    %al,-0xc(%rbp)
  7d:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  81:	c1 e0 04             	shl    $0x4,%eax
  84:	89 c2                	mov    %eax,%edx
  86:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  8a:	09 d0                	or     %edx,%eax
  8c:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  90:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  95:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  99:	83 c0 01             	add    $0x1,%eax
  9c:	88 45 f3             	mov    %al,-0xd(%rbp)
  9f:	80 7d f3 01          	cmpb   $0x1,-0xd(%rbp)
  a3:	77 0b                	ja     b0 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0xb0>
  a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a9:	0f b6 00             	movzbl (%rax),%eax
  ac:	3c 3a                	cmp    $0x3a,%al
  ae:	75 80                	jne    30 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x30>
  b0:	80 7d f3 02          	cmpb   $0x2,-0xd(%rbp)
  b4:	74 1c                	je     d2 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0xd2>
  b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ba:	0f b6 00             	movzbl (%rax),%eax
  bd:	3c 3a                	cmp    $0x3a,%al
  bf:	74 11                	je     d2 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0xd2>
  c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  c5:	c6 00 00             	movb   $0x0,(%rax)
  c8:	b8 00 00 00 00       	mov    $0x0,%eax
  cd:	e9 1c 01 00 00       	jmp    1ee <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1ee>
  d2:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  d6:	89 c2                	mov    %eax,%edx
  d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  dc:	88 10                	mov    %dl,(%rax)
  de:	c6 45 f3 00          	movb   $0x0,-0xd(%rbp)
  e2:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%rbp)
  e8:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  ed:	eb 6f                	jmp    15e <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x15e>
  ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f3:	0f b6 00             	movzbl (%rax),%eax
  f6:	0f be c0             	movsbl %al,%eax
  f9:	89 c7                	mov    %eax,%edi
  fb:	e8 00 00 00 00       	call   100 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x100>
 100:	85 c0                	test   %eax,%eax
 102:	75 11                	jne    115 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x115>
 104:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 108:	c6 00 00             	movb   $0x0,(%rax)
 10b:	b8 00 00 00 00       	mov    $0x0,%eax
 110:	e9 d9 00 00 00       	jmp    1ee <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1ee>
 115:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 119:	0f b6 00             	movzbl (%rax),%eax
 11c:	3c 39                	cmp    $0x39,%al
 11e:	7e 0f                	jle    12f <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x12f>
 120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 124:	0f b6 00             	movzbl (%rax),%eax
 127:	83 c8 20             	or     $0x20,%eax
 12a:	83 e8 57             	sub    $0x57,%eax
 12d:	eb 0a                	jmp    139 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x139>
 12f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 133:	0f b6 00             	movzbl (%rax),%eax
 136:	83 e8 30             	sub    $0x30,%eax
 139:	88 45 f5             	mov    %al,-0xb(%rbp)
 13c:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
 140:	c1 e0 04             	shl    $0x4,%eax
 143:	89 c2                	mov    %eax,%edx
 145:	0f b6 45 f5          	movzbl -0xb(%rbp),%eax
 149:	09 d0                	or     %edx,%eax
 14b:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
 14f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
 154:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
 158:	83 c0 01             	add    $0x1,%eax
 15b:	88 45 f3             	mov    %al,-0xd(%rbp)
 15e:	80 7d f3 03          	cmpb   $0x3,-0xd(%rbp)
 162:	77 1a                	ja     17e <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x17e>
 164:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 168:	0f b6 00             	movzbl (%rax),%eax
 16b:	3c 2c                	cmp    $0x2c,%al
 16d:	74 0f                	je     17e <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x17e>
 16f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 173:	0f b6 00             	movzbl (%rax),%eax
 176:	84 c0                	test   %al,%al
 178:	0f 85 71 ff ff ff    	jne    ef <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0xef>
 17e:	80 7d f3 04          	cmpb   $0x4,-0xd(%rbp)
 182:	74 0e                	je     192 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x192>
 184:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 188:	c6 00 00             	movb   $0x0,(%rax)
 18b:	b8 00 00 00 00       	mov    $0x0,%eax
 190:	eb 5c                	jmp    1ee <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1ee>
 192:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 196:	0f b6 00             	movzbl (%rax),%eax
 199:	3c 2c                	cmp    $0x2c,%al
 19b:	74 24                	je     1c1 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1c1>
 19d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 1a1:	0f b6 00             	movzbl (%rax),%eax
 1a4:	3c 20                	cmp    $0x20,%al
 1a6:	74 19                	je     1c1 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1c1>
 1a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 1ac:	0f b6 00             	movzbl (%rax),%eax
 1af:	84 c0                	test   %al,%al
 1b1:	74 0e                	je     1c1 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1c1>
 1b3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 1b7:	c6 00 00             	movb   $0x0,(%rax)
 1ba:	b8 00 00 00 00       	mov    $0x0,%eax
 1bf:	eb 2d                	jmp    1ee <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1ee>
 1c1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 1c5:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
 1c9:	66 89 10             	mov    %dx,(%rax)
 1cc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 1d0:	c6 00 01             	movb   $0x1,(%rax)
 1d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 1d7:	0f b6 00             	movzbl (%rax),%eax
 1da:	84 c0                	test   %al,%al
 1dc:	75 07                	jne    1e5 <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1e5>
 1de:	b8 00 00 00 00       	mov    $0x0,%eax
 1e3:	eb 09                	jmp    1ee <Parse::DmxSlotInfo(char*, bool&, unsigned char&, unsigned short&)+0x1ee>
 1e5:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
 1ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 1ee:	c9                   	leave  
 1ef:	c3                   	ret    

propertiesbuilderaddhex.o:     file format elf64-x86-64


Disassembly of section .text._ZN17PropertiesBuilder6AddHexEPKcjbj:

0000000000000000 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 51                	push   %r9
   8:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
   c:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
  10:	66 39 e8             	cmp    %bp,%ax
  13:	72 04                	jb     19 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x19>
  15:	31 c0                	xor    %eax,%eax
  17:	eb 56                	jmp    6f <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x6f>
  19:	48 89 fb             	mov    %rdi,%rbx
  1c:	29 c5                	sub    %eax,%ebp
  1e:	0f b7 f8             	movzwl %ax,%edi
  21:	49 89 f2             	mov    %rsi,%r10
  24:	8a 43 0c             	mov    0xc(%rbx),%al
  27:	41 89 d1             	mov    %edx,%r9d
  2a:	48 03 3b             	add    (%rbx),%rdi
  2d:	48 63 f5             	movslq %ebp,%rsi
  30:	84 c9                	test   %cl,%cl
  32:	75 06                	jne    3a <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x3a>
  34:	84 c0                	test   %al,%al
  36:	75 10                	jne    48 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x48>
  38:	eb 1a                	jmp    54 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x54>
  3a:	4c 89 d1             	mov    %r10,%rcx
  3d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 44 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x44>
  44:	84 c0                	test   %al,%al
  46:	74 16                	je     5e <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x5e>
  48:	4c 89 d1             	mov    %r10,%rcx
  4b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 52 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x52>
  52:	eb 0a                	jmp    5e <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x5e>
  54:	4c 89 d1             	mov    %r10,%rcx
  57:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5e <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x5e>
  5e:	31 c0                	xor    %eax,%eax
  60:	e8 00 00 00 00       	call   65 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x65>
  65:	39 c5                	cmp    %eax,%ebp
  67:	7c ac                	jl     15 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x15>
  69:	66 01 43 0a          	add    %ax,0xa(%rbx)
  6d:	b0 01                	mov    $0x1,%al
  6f:	5a                   	pop    %rdx
  70:	5b                   	pop    %rbx
  71:	5d                   	pop    %rbp
  72:	c3                   	ret    

propertiesbuilder.o:     file format elf64-x86-64


Disassembly of section .text._ZN16PropertiesConfig6IsJSONEv:

0000000000000000 <PropertiesConfig::IsJSON()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	bf 01 00 00 00       	mov    $0x1,%edi
   9:	e9 00 00 00 00       	jmp    e <PropertiesConfig::IsJSON()+0xe>

Disassembly of section .text._ZN16PropertiesConfig9isMaskSetEh:

0000000000000000 <PropertiesConfig::isMaskSet(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	8a 05 00 00 00 00    	mov    0x0(%rip),%al        # a <PropertiesConfig::isMaskSet(unsigned char)+0xa>
   a:	21 f8                	and    %edi,%eax
   c:	40 38 f8             	cmp    %dil,%al
   f:	0f 94 c0             	sete   %al
  12:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilderC2EPKcPcj:

0000000000000000 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 55                	push   %r13
   8:	49 89 fd             	mov    %rdi,%r13
   b:	41 54                	push   %r12
   d:	41 89 cc             	mov    %ecx,%r12d
  10:	55                   	push   %rbp
  11:	48 89 f5             	mov    %rsi,%rbp
  14:	45 0f b7 e4          	movzwl %r12w,%r12d
  18:	53                   	push   %rbx
  19:	48 89 d3             	mov    %rdx,%rbx
  1c:	48 89 17             	mov    %rdx,(%rdi)
  1f:	66 89 4f 08          	mov    %cx,0x8(%rdi)
  23:	66 c7 47 0a 00 00    	movw   $0x0,0xa(%rdi)
  29:	e8 00 00 00 00       	call   2e <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x2e>
  2e:	48 89 ef             	mov    %rbp,%rdi
  31:	41 88 45 0c          	mov    %al,0xc(%r13)
  35:	41 89 c6             	mov    %eax,%r14d
  38:	e8 00 00 00 00       	call   3d <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x3d>
  3d:	48 89 c2             	mov    %rax,%rdx
  40:	45 84 f6             	test   %r14b,%r14b
  43:	74 31                	je     76 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x76>
  45:	48 8d 40 04          	lea    0x4(%rax),%rax
  49:	4c 39 e0             	cmp    %r12,%rax
  4c:	77 50                	ja     9e <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x9e>
  4e:	48 8d 43 02          	lea    0x2(%rbx),%rax
  52:	66 c7 03 7b 22       	movw   $0x227b,(%rbx)
  57:	48 89 d1             	mov    %rdx,%rcx
  5a:	48 89 ee             	mov    %rbp,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  62:	c6 44 13 02 22       	movb   $0x22,0x2(%rbx,%rdx,1)
  67:	c6 44 13 03 3a       	movb   $0x3a,0x3(%rbx,%rdx,1)
  6c:	c6 44 13 04 7b       	movb   $0x7b,0x4(%rbx,%rdx,1)
  71:	83 c2 05             	add    $0x5,%edx
  74:	eb 23                	jmp    99 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x99>
  76:	48 8d 40 02          	lea    0x2(%rax),%rax
  7a:	4c 39 e0             	cmp    %r12,%rax
  7d:	77 1f                	ja     9e <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x9e>
  7f:	48 8d 43 01          	lea    0x1(%rbx),%rax
  83:	c6 03 23             	movb   $0x23,(%rbx)
  86:	48 89 d1             	mov    %rdx,%rcx
  89:	48 89 ee             	mov    %rbp,%rsi
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  91:	c6 44 13 01 0a       	movb   $0xa,0x1(%rbx,%rdx,1)
  96:	83 c2 02             	add    $0x2,%edx
  99:	66 41 89 55 0a       	mov    %dx,0xa(%r13)
  9e:	5b                   	pop    %rbx
  9f:	5d                   	pop    %rbp
  a0:	41 5c                	pop    %r12
  a2:	41 5d                	pop    %r13
  a4:	41 5e                	pop    %r14
  a6:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder12AddIpAddressEPKcjb:

0000000000000000 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	89 d0                	mov    %edx,%eax
   8:	41 54                	push   %r12
   a:	55                   	push   %rbp
   b:	53                   	push   %rbx
   c:	41 50                	push   %r8
   e:	0f b7 57 0a          	movzwl 0xa(%rdi),%edx
  12:	0f b7 5f 08          	movzwl 0x8(%rdi),%ebx
  16:	66 39 da             	cmp    %bx,%dx
  19:	72 07                	jb     22 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x22>
  1b:	31 c0                	xor    %eax,%eax
  1d:	e9 85 00 00 00       	jmp    a7 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xa7>
  22:	48 89 fd             	mov    %rdi,%rbp
  25:	29 d3                	sub    %edx,%ebx
  27:	0f b7 fa             	movzwl %dx,%edi
  2a:	89 c2                	mov    %eax,%edx
  2c:	41 89 ce             	mov    %ecx,%r14d
  2f:	41 89 c3             	mov    %eax,%r11d
  32:	c1 ea 10             	shr    $0x10,%edx
  35:	0f b6 cc             	movzbl %ah,%ecx
  38:	49 89 f2             	mov    %rsi,%r10
  3b:	44 8a 65 0c          	mov    0xc(%rbp),%r12b
  3f:	48 03 7d 00          	add    0x0(%rbp),%rdi
  43:	48 63 f3             	movslq %ebx,%rsi
  46:	41 c1 eb 18          	shr    $0x18,%r11d
  4a:	0f b6 d2             	movzbl %dl,%edx
  4d:	41 89 c9             	mov    %ecx,%r9d
  50:	44 0f b6 c0          	movzbl %al,%r8d
  54:	45 84 f6             	test   %r14b,%r14b
  57:	75 07                	jne    60 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x60>
  59:	45 84 e4             	test   %r12b,%r12b
  5c:	75 07                	jne    65 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x65>
  5e:	eb 23                	jmp    83 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x83>
  60:	45 84 e4             	test   %r12b,%r12b
  63:	74 0f                	je     74 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x74>
  65:	41 53                	push   %r11
  67:	4c 89 d1             	mov    %r10,%rcx
  6a:	52                   	push   %rdx
  6b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 72 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x72>
  72:	eb 1c                	jmp    90 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x90>
  74:	41 53                	push   %r11
  76:	4c 89 d1             	mov    %r10,%rcx
  79:	52                   	push   %rdx
  7a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 81 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x81>
  81:	eb 0d                	jmp    90 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x90>
  83:	41 53                	push   %r11
  85:	4c 89 d1             	mov    %r10,%rcx
  88:	52                   	push   %rdx
  89:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 90 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x90>
  90:	31 c0                	xor    %eax,%eax
  92:	e8 00 00 00 00       	call   97 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x97>
  97:	59                   	pop    %rcx
  98:	5e                   	pop    %rsi
  99:	39 c3                	cmp    %eax,%ebx
  9b:	0f 8c 7a ff ff ff    	jl     1b <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x1b>
  a1:	66 01 45 0a          	add    %ax,0xa(%rbp)
  a5:	b0 01                	mov    $0x1,%al
  a7:	5a                   	pop    %rdx
  a8:	5b                   	pop    %rbx
  a9:	5d                   	pop    %rbp
  aa:	41 5c                	pop    %r12
  ac:	41 5e                	pop    %r14
  ae:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder10AddCommentEPKc:

0000000000000000 <PropertiesBuilder::AddComment(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	55                   	push   %rbp
   7:	53                   	push   %rbx
   8:	44 8a 67 0c          	mov    0xc(%rdi),%r12b
   c:	45 84 e4             	test   %r12b,%r12b
   f:	75 37                	jne    48 <PropertiesBuilder::AddComment(char const*)+0x48>
  11:	48 89 fb             	mov    %rdi,%rbx
  14:	0f b7 7f 0a          	movzwl 0xa(%rdi),%edi
  18:	0f b7 6b 08          	movzwl 0x8(%rbx),%ebp
  1c:	66 39 ef             	cmp    %bp,%di
  1f:	73 27                	jae    48 <PropertiesBuilder::AddComment(char const*)+0x48>
  21:	0f b7 c7             	movzwl %di,%eax
  24:	48 89 f1             	mov    %rsi,%rcx
  27:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2e <PropertiesBuilder::AddComment(char const*)+0x2e>
  2e:	48 03 3b             	add    (%rbx),%rdi
  31:	29 c5                	sub    %eax,%ebp
  33:	31 c0                	xor    %eax,%eax
  35:	48 63 f5             	movslq %ebp,%rsi
  38:	e8 00 00 00 00       	call   3d <PropertiesBuilder::AddComment(char const*)+0x3d>
  3d:	39 c5                	cmp    %eax,%ebp
  3f:	7c 07                	jl     48 <PropertiesBuilder::AddComment(char const*)+0x48>
  41:	66 01 43 0a          	add    %ax,0xa(%rbx)
  45:	41 b4 01             	mov    $0x1,%r12b
  48:	44 89 e0             	mov    %r12d,%eax
  4b:	5b                   	pop    %rbx
  4c:	5d                   	pop    %rbp
  4d:	41 5c                	pop    %r12
  4f:	c3                   	ret    

propertiesconfig.o:     file format elf64-x86-64


properties.o:     file format elf64-x86-64


Disassembly of section .text._ZN10properties17convert_json_fileEPctb:

0000000000000000 <properties::convert_json_file(char*, unsigned short, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  12:	89 d0                	mov    %edx,%eax
  14:	88 45 d0             	mov    %al,-0x30(%rbp)
  17:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2b:	0f b6 00             	movzbl (%rax),%eax
  2e:	3c 7b                	cmp    $0x7b,%al
  30:	74 0a                	je     3c <properties::convert_json_file(char*, unsigned short, bool)+0x3c>
  32:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  37:	e9 0f 03 00 00       	jmp    34b <properties::convert_json_file(char*, unsigned short, bool)+0x34b>
  3c:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
  43:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
  4a:	0f b6 45 d0          	movzbl -0x30(%rbp),%eax
  4e:	83 f0 01             	xor    $0x1,%eax
  51:	84 c0                	test   %al,%al
  53:	0f 84 c6 00 00 00    	je     11f <properties::convert_json_file(char*, unsigned short, bool)+0x11f>
  59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5d:	c6 00 23             	movb   $0x23,(%rax)
  60:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  65:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  6a:	eb 1c                	jmp    88 <properties::convert_json_file(char*, unsigned short, bool)+0x88>
  6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  70:	48 8d 50 01          	lea    0x1(%rax),%rdx
  74:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  78:	0f b6 00             	movzbl (%rax),%eax
  7b:	3c 22                	cmp    $0x22,%al
  7d:	0f 94 c0             	sete   %al
  80:	84 c0                	test   %al,%al
  82:	75 0f                	jne    93 <properties::convert_json_file(char*, unsigned short, bool)+0x93>
  84:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  88:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
  8c:	39 45 e8             	cmp    %eax,-0x18(%rbp)
  8f:	72 db                	jb     6c <properties::convert_json_file(char*, unsigned short, bool)+0x6c>
  91:	eb 28                	jmp    bb <properties::convert_json_file(char*, unsigned short, bool)+0xbb>
  93:	90                   	nop
  94:	eb 25                	jmp    bb <properties::convert_json_file(char*, unsigned short, bool)+0xbb>
  96:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  9a:	48 8d 42 01          	lea    0x1(%rdx),%rax
  9e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a6:	48 8d 48 01          	lea    0x1(%rax),%rcx
  aa:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
  ae:	0f b6 12             	movzbl (%rdx),%edx
  b1:	88 10                	mov    %dl,(%rax)
  b3:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  b7:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  bb:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
  bf:	39 45 e8             	cmp    %eax,-0x18(%rbp)
  c2:	73 0b                	jae    cf <properties::convert_json_file(char*, unsigned short, bool)+0xcf>
  c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c8:	0f b6 00             	movzbl (%rax),%eax
  cb:	3c 22                	cmp    $0x22,%al
  cd:	75 c7                	jne    96 <properties::convert_json_file(char*, unsigned short, bool)+0x96>
  cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d3:	48 8d 50 01          	lea    0x1(%rax),%rdx
  d7:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  db:	c6 00 0a             	movb   $0xa,(%rax)
  de:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  e2:	eb 05                	jmp    e9 <properties::convert_json_file(char*, unsigned short, bool)+0xe9>
  e4:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  ed:	0f b6 00             	movzbl (%rax),%eax
  f0:	3c 7b                	cmp    $0x7b,%al
  f2:	74 18                	je     10c <properties::convert_json_file(char*, unsigned short, bool)+0x10c>
  f4:	8b 45 e8             	mov    -0x18(%rbp),%eax
  f7:	8d 50 01             	lea    0x1(%rax),%edx
  fa:	89 55 e8             	mov    %edx,-0x18(%rbp)
  fd:	0f b7 55 d4          	movzwl -0x2c(%rbp),%edx
 101:	39 d0                	cmp    %edx,%eax
 103:	73 07                	jae    10c <properties::convert_json_file(char*, unsigned short, bool)+0x10c>
 105:	b8 01 00 00 00       	mov    $0x1,%eax
 10a:	eb 05                	jmp    111 <properties::convert_json_file(char*, unsigned short, bool)+0x111>
 10c:	b8 00 00 00 00       	mov    $0x0,%eax
 111:	84 c0                	test   %al,%al
 113:	75 cf                	jne    e4 <properties::convert_json_file(char*, unsigned short, bool)+0xe4>
 115:	e9 21 02 00 00       	jmp    33b <properties::convert_json_file(char*, unsigned short, bool)+0x33b>
 11a:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
 11f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 123:	0f b6 00             	movzbl (%rax),%eax
 126:	3c 7b                	cmp    $0x7b,%al
 128:	74 18                	je     142 <properties::convert_json_file(char*, unsigned short, bool)+0x142>
 12a:	8b 45 e8             	mov    -0x18(%rbp),%eax
 12d:	8d 50 01             	lea    0x1(%rax),%edx
 130:	89 55 e8             	mov    %edx,-0x18(%rbp)
 133:	0f b7 55 d4          	movzwl -0x2c(%rbp),%edx
 137:	39 d0                	cmp    %edx,%eax
 139:	73 07                	jae    142 <properties::convert_json_file(char*, unsigned short, bool)+0x142>
 13b:	b8 01 00 00 00       	mov    $0x1,%eax
 140:	eb 05                	jmp    147 <properties::convert_json_file(char*, unsigned short, bool)+0x147>
 142:	b8 00 00 00 00       	mov    $0x0,%eax
 147:	84 c0                	test   %al,%al
 149:	75 cf                	jne    11a <properties::convert_json_file(char*, unsigned short, bool)+0x11a>
 14b:	e9 eb 01 00 00       	jmp    33b <properties::convert_json_file(char*, unsigned short, bool)+0x33b>
 150:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 154:	48 8d 50 01          	lea    0x1(%rax),%rdx
 158:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
 15c:	0f b6 00             	movzbl (%rax),%eax
 15f:	3c 22                	cmp    $0x22,%al
 161:	0f 94 c0             	sete   %al
 164:	84 c0                	test   %al,%al
 166:	75 18                	jne    180 <properties::convert_json_file(char*, unsigned short, bool)+0x180>
 168:	8b 45 e8             	mov    -0x18(%rbp),%eax
 16b:	8d 50 01             	lea    0x1(%rax),%edx
 16e:	89 55 e8             	mov    %edx,-0x18(%rbp)
 171:	0f b7 55 d4          	movzwl -0x2c(%rbp),%edx
 175:	39 d0                	cmp    %edx,%eax
 177:	0f 92 c0             	setb   %al
 17a:	84 c0                	test   %al,%al
 17c:	75 d2                	jne    150 <properties::convert_json_file(char*, unsigned short, bool)+0x150>
 17e:	eb 24                	jmp    1a4 <properties::convert_json_file(char*, unsigned short, bool)+0x1a4>
 180:	90                   	nop
 181:	eb 21                	jmp    1a4 <properties::convert_json_file(char*, unsigned short, bool)+0x1a4>
 183:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 187:	48 8d 42 01          	lea    0x1(%rdx),%rax
 18b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 18f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 193:	48 8d 48 01          	lea    0x1(%rax),%rcx
 197:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
 19b:	0f b6 12             	movzbl (%rdx),%edx
 19e:	88 10                	mov    %dl,(%rax)
 1a0:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
 1a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1a8:	0f b6 00             	movzbl (%rax),%eax
 1ab:	3c 22                	cmp    $0x22,%al
 1ad:	74 18                	je     1c7 <properties::convert_json_file(char*, unsigned short, bool)+0x1c7>
 1af:	8b 45 e8             	mov    -0x18(%rbp),%eax
 1b2:	8d 50 01             	lea    0x1(%rax),%edx
 1b5:	89 55 e8             	mov    %edx,-0x18(%rbp)
 1b8:	0f b7 55 d4          	movzwl -0x2c(%rbp),%edx
 1bc:	39 d0                	cmp    %edx,%eax
 1be:	73 07                	jae    1c7 <properties::convert_json_file(char*, unsigned short, bool)+0x1c7>
 1c0:	b8 01 00 00 00       	mov    $0x1,%eax
 1c5:	eb 05                	jmp    1cc <properties::convert_json_file(char*, unsigned short, bool)+0x1cc>
 1c7:	b8 00 00 00 00       	mov    $0x0,%eax
 1cc:	84 c0                	test   %al,%al
 1ce:	75 b3                	jne    183 <properties::convert_json_file(char*, unsigned short, bool)+0x183>
 1d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1d4:	0f b6 00             	movzbl (%rax),%eax
 1d7:	3c 22                	cmp    $0x22,%al
 1d9:	75 2d                	jne    208 <properties::convert_json_file(char*, unsigned short, bool)+0x208>
 1db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 1df:	48 8d 50 01          	lea    0x1(%rax),%rdx
 1e3:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
 1e7:	c6 00 3d             	movb   $0x3d,(%rax)
 1ea:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
 1ee:	eb 18                	jmp    208 <properties::convert_json_file(char*, unsigned short, bool)+0x208>
 1f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 1f4:	48 8d 50 01          	lea    0x1(%rax),%rdx
 1f8:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
 1fc:	0f b6 00             	movzbl (%rax),%eax
 1ff:	3c 3a                	cmp    $0x3a,%al
 201:	0f 94 c0             	sete   %al
 204:	84 c0                	test   %al,%al
 206:	75 18                	jne    220 <properties::convert_json_file(char*, unsigned short, bool)+0x220>
 208:	8b 45 e8             	mov    -0x18(%rbp),%eax
 20b:	8d 50 01             	lea    0x1(%rax),%edx
 20e:	89 55 e8             	mov    %edx,-0x18(%rbp)
 211:	0f b7 55 d4          	movzwl -0x2c(%rbp),%edx
 215:	39 d0                	cmp    %edx,%eax
 217:	0f 92 c0             	setb   %al
 21a:	84 c0                	test   %al,%al
 21c:	75 d2                	jne    1f0 <properties::convert_json_file(char*, unsigned short, bool)+0x1f0>
 21e:	eb 08                	jmp    228 <properties::convert_json_file(char*, unsigned short, bool)+0x228>
 220:	90                   	nop
 221:	eb 05                	jmp    228 <properties::convert_json_file(char*, unsigned short, bool)+0x228>
 223:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
 228:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 22c:	0f b6 00             	movzbl (%rax),%eax
 22f:	3c 2f                	cmp    $0x2f,%al
 231:	7f 18                	jg     24b <properties::convert_json_file(char*, unsigned short, bool)+0x24b>
 233:	8b 45 e8             	mov    -0x18(%rbp),%eax
 236:	8d 50 01             	lea    0x1(%rax),%edx
 239:	89 55 e8             	mov    %edx,-0x18(%rbp)
 23c:	0f b7 55 d4          	movzwl -0x2c(%rbp),%edx
 240:	39 d0                	cmp    %edx,%eax
 242:	73 07                	jae    24b <properties::convert_json_file(char*, unsigned short, bool)+0x24b>
 244:	b8 01 00 00 00       	mov    $0x1,%eax
 249:	eb 05                	jmp    250 <properties::convert_json_file(char*, unsigned short, bool)+0x250>
 24b:	b8 00 00 00 00       	mov    $0x0,%eax
 250:	84 c0                	test   %al,%al
 252:	75 cf                	jne    223 <properties::convert_json_file(char*, unsigned short, bool)+0x223>
 254:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 258:	0f b6 00             	movzbl (%rax),%eax
 25b:	3c 22                	cmp    $0x22,%al
 25d:	75 41                	jne    2a0 <properties::convert_json_file(char*, unsigned short, bool)+0x2a0>
 25f:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
 264:	eb 3a                	jmp    2a0 <properties::convert_json_file(char*, unsigned short, bool)+0x2a0>
 266:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 26a:	0f b6 00             	movzbl (%rax),%eax
 26d:	0f be c0             	movsbl %al,%eax
 270:	89 45 ec             	mov    %eax,-0x14(%rbp)
 273:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%rbp)
 277:	7e 27                	jle    2a0 <properties::convert_json_file(char*, unsigned short, bool)+0x2a0>
 279:	83 7d ec 7a          	cmpl   $0x7a,-0x14(%rbp)
 27d:	7f 21                	jg     2a0 <properties::convert_json_file(char*, unsigned short, bool)+0x2a0>
 27f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 283:	48 8d 42 01          	lea    0x1(%rdx),%rax
 287:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 28b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 28f:	48 8d 48 01          	lea    0x1(%rax),%rcx
 293:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
 297:	0f b6 12             	movzbl (%rdx),%edx
 29a:	88 10                	mov    %dl,(%rax)
 29c:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
 2a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 2a4:	0f b6 00             	movzbl (%rax),%eax
 2a7:	3c 22                	cmp    $0x22,%al
 2a9:	74 2e                	je     2d9 <properties::convert_json_file(char*, unsigned short, bool)+0x2d9>
 2ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 2af:	0f b6 00             	movzbl (%rax),%eax
 2b2:	3c 2c                	cmp    $0x2c,%al
 2b4:	74 23                	je     2d9 <properties::convert_json_file(char*, unsigned short, bool)+0x2d9>
 2b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 2ba:	0f b6 00             	movzbl (%rax),%eax
 2bd:	3c 7d                	cmp    $0x7d,%al
 2bf:	74 18                	je     2d9 <properties::convert_json_file(char*, unsigned short, bool)+0x2d9>
 2c1:	8b 45 e8             	mov    -0x18(%rbp),%eax
 2c4:	8d 50 01             	lea    0x1(%rax),%edx
 2c7:	89 55 e8             	mov    %edx,-0x18(%rbp)
 2ca:	0f b7 55 d4          	movzwl -0x2c(%rbp),%edx
 2ce:	39 d0                	cmp    %edx,%eax
 2d0:	73 07                	jae    2d9 <properties::convert_json_file(char*, unsigned short, bool)+0x2d9>
 2d2:	b8 01 00 00 00       	mov    $0x1,%eax
 2d7:	eb 05                	jmp    2de <properties::convert_json_file(char*, unsigned short, bool)+0x2de>
 2d9:	b8 00 00 00 00       	mov    $0x0,%eax
 2de:	84 c0                	test   %al,%al
 2e0:	75 84                	jne    266 <properties::convert_json_file(char*, unsigned short, bool)+0x266>
 2e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 2e6:	0f b6 00             	movzbl (%rax),%eax
 2e9:	3c 22                	cmp    $0x22,%al
 2eb:	74 16                	je     303 <properties::convert_json_file(char*, unsigned short, bool)+0x303>
 2ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 2f1:	0f b6 00             	movzbl (%rax),%eax
 2f4:	3c 2c                	cmp    $0x2c,%al
 2f6:	74 0b                	je     303 <properties::convert_json_file(char*, unsigned short, bool)+0x303>
 2f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 2fc:	0f b6 00             	movzbl (%rax),%eax
 2ff:	3c 7d                	cmp    $0x7d,%al
 301:	75 2f                	jne    332 <properties::convert_json_file(char*, unsigned short, bool)+0x332>
 303:	0f b6 45 d0          	movzbl -0x30(%rbp),%eax
 307:	83 f0 01             	xor    $0x1,%eax
 30a:	84 c0                	test   %al,%al
 30c:	74 11                	je     31f <properties::convert_json_file(char*, unsigned short, bool)+0x31f>
 30e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 312:	48 8d 50 01          	lea    0x1(%rax),%rdx
 316:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
 31a:	c6 00 0a             	movb   $0xa,(%rax)
 31d:	eb 0f                	jmp    32e <properties::convert_json_file(char*, unsigned short, bool)+0x32e>
 31f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 323:	48 8d 50 01          	lea    0x1(%rax),%rdx
 327:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
 32b:	c6 00 00             	movb   $0x0,(%rax)
 32e:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
 332:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
 337:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
 33b:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
 33f:	39 45 e8             	cmp    %eax,-0x18(%rbp)
 342:	0f 82 20 fe ff ff    	jb     168 <properties::convert_json_file(char*, unsigned short, bool)+0x168>
 348:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 34b:	5d                   	pop    %rbp
 34c:	c3                   	ret    

readconfigfile.o:     file format elf64-x86-64


Disassembly of section .text._ZN14ReadConfigFileC2EPFvPvPKcES0_:

0000000000000000 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1c:	48 89 10             	mov    %rdx,(%rax)
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  27:	48 89 50 08          	mov    %rdx,0x8(%rax)
  2b:	90                   	nop
  2c:	5d                   	pop    %rbp
  2d:	c3                   	ret    

Disassembly of section .text._ZN14ReadConfigFileD2Ev:

0000000000000000 <ReadConfigFile::~ReadConfigFile()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  22:	00 
  23:	90                   	nop
  24:	5d                   	pop    %rbp
  25:	c3                   	ret    

Disassembly of section .text._ZN14ReadConfigFile4ReadEPKc:

0000000000000000 <ReadConfigFile::Read(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
   f:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
  16:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
  1d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  24:	00 00 
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	31 c0                	xor    %eax,%eax
  2c:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  33:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a <ReadConfigFile::Read(char const*)+0x3a>
  3a:	48 89 d6             	mov    %rdx,%rsi
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	call   45 <ReadConfigFile::Read(char const*)+0x45>
  45:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  4c:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
  53:	00 
  54:	0f 84 e1 00 00 00    	je     13b <ReadConfigFile::Read(char const*)+0x13b>
  5a:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  61:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  68:	be 7f 00 00 00       	mov    $0x7f,%esi
  6d:	48 89 c7             	mov    %rax,%rdi
  70:	e8 00 00 00 00       	call   75 <ReadConfigFile::Read(char const*)+0x75>
  75:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  7c:	48 39 d0             	cmp    %rdx,%rax
  7f:	0f 95 c0             	setne  %al
  82:	84 c0                	test   %al,%al
  84:	0f 85 9a 00 00 00    	jne    124 <ReadConfigFile::Read(char const*)+0x124>
  8a:	0f b6 85 70 ff ff ff 	movzbl -0x90(%rbp),%eax
  91:	3c 60                	cmp    $0x60,%al
  93:	7e c5                	jle    5a <ReadConfigFile::Read(char const*)+0x5a>
  95:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  9c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  a3:	c7 85 5c ff ff ff 00 	movl   $0x0,-0xa4(%rbp)
  aa:	00 00 00 
  ad:	eb 35                	jmp    e4 <ReadConfigFile::Read(char const*)+0xe4>
  af:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  b6:	0f b6 00             	movzbl (%rax),%eax
  b9:	3c 0d                	cmp    $0xd,%al
  bb:	74 0e                	je     cb <ReadConfigFile::Read(char const*)+0xcb>
  bd:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  c4:	0f b6 00             	movzbl (%rax),%eax
  c7:	3c 0a                	cmp    $0xa,%al
  c9:	75 0a                	jne    d5 <ReadConfigFile::Read(char const*)+0xd5>
  cb:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  d2:	c6 00 00             	movb   $0x0,(%rax)
  d5:	48 83 85 60 ff ff ff 	addq   $0x1,-0xa0(%rbp)
  dc:	01 
  dd:	83 85 5c ff ff ff 01 	addl   $0x1,-0xa4(%rbp)
  e4:	83 bd 5c ff ff ff 7e 	cmpl   $0x7e,-0xa4(%rbp)
  eb:	77 0e                	ja     fb <ReadConfigFile::Read(char const*)+0xfb>
  ed:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  f4:	0f b6 00             	movzbl (%rax),%eax
  f7:	84 c0                	test   %al,%al
  f9:	75 b4                	jne    af <ReadConfigFile::Read(char const*)+0xaf>
  fb:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 102:	48 8b 08             	mov    (%rax),%rcx
 105:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
 10c:	48 8b 40 08          	mov    0x8(%rax),%rax
 110:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
 117:	48 89 d6             	mov    %rdx,%rsi
 11a:	48 89 c7             	mov    %rax,%rdi
 11d:	ff d1                	call   *%rcx
 11f:	e9 36 ff ff ff       	jmp    5a <ReadConfigFile::Read(char const*)+0x5a>
 124:	90                   	nop
 125:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
 12c:	48 89 c7             	mov    %rax,%rdi
 12f:	e8 00 00 00 00       	call   134 <ReadConfigFile::Read(char const*)+0x134>
 134:	b8 01 00 00 00       	mov    $0x1,%eax
 139:	eb 05                	jmp    140 <ReadConfigFile::Read(char const*)+0x140>
 13b:	b8 00 00 00 00       	mov    $0x0,%eax
 140:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 144:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 14b:	00 00 
 14d:	74 05                	je     154 <ReadConfigFile::Read(char const*)+0x154>
 14f:	e8 00 00 00 00       	call   154 <ReadConfigFile::Read(char const*)+0x154>
 154:	c9                   	leave  
 155:	c3                   	ret    

Disassembly of section .text._ZN14ReadConfigFile4ReadEPKcj:

0000000000000000 <ReadConfigFile::Read(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
   f:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
  16:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  1d:	89 95 4c ff ff ff    	mov    %edx,-0xb4(%rbp)
  23:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2a:	00 00 
  2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  30:	31 c0                	xor    %eax,%eax
  32:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  39:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  40:	e9 ef 00 00 00       	jmp    134 <ReadConfigFile::Read(char const*, unsigned int)+0x134>
  45:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  4c:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  53:	eb 4b                	jmp    a0 <ReadConfigFile::Read(char const*, unsigned int)+0xa0>
  55:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  5c:	48 8d 42 01          	lea    0x1(%rdx),%rax
  60:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  67:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  6e:	48 8d 48 01          	lea    0x1(%rax),%rcx
  72:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  79:	0f b6 12             	movzbl (%rdx),%edx
  7c:	88 10                	mov    %dl,(%rax)
  7e:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  85:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8c:	48 29 d0             	sub    %rdx,%rax
  8f:	48 83 f8 7f          	cmp    $0x7f,%rax
  93:	0f 8f aa 00 00 00    	jg     143 <ReadConfigFile::Read(char const*, unsigned int)+0x143>
  99:	83 ad 4c ff ff ff 01 	subl   $0x1,-0xb4(%rbp)
  a0:	83 bd 4c ff ff ff 00 	cmpl   $0x0,-0xb4(%rbp)
  a7:	74 2d                	je     d6 <ReadConfigFile::Read(char const*, unsigned int)+0xd6>
  a9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  b0:	0f b6 00             	movzbl (%rax),%eax
  b3:	3c 0d                	cmp    $0xd,%al
  b5:	74 1f                	je     d6 <ReadConfigFile::Read(char const*, unsigned int)+0xd6>
  b7:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  be:	0f b6 00             	movzbl (%rax),%eax
  c1:	3c 0a                	cmp    $0xa,%al
  c3:	75 90                	jne    55 <ReadConfigFile::Read(char const*, unsigned int)+0x55>
  c5:	eb 0f                	jmp    d6 <ReadConfigFile::Read(char const*, unsigned int)+0xd6>
  c7:	48 83 85 60 ff ff ff 	addq   $0x1,-0xa0(%rbp)
  ce:	01 
  cf:	83 ad 4c ff ff ff 01 	subl   $0x1,-0xb4(%rbp)
  d6:	83 bd 4c ff ff ff 00 	cmpl   $0x0,-0xb4(%rbp)
  dd:	74 1c                	je     fb <ReadConfigFile::Read(char const*, unsigned int)+0xfb>
  df:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  e6:	0f b6 00             	movzbl (%rax),%eax
  e9:	3c 0d                	cmp    $0xd,%al
  eb:	74 da                	je     c7 <ReadConfigFile::Read(char const*, unsigned int)+0xc7>
  ed:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  f4:	0f b6 00             	movzbl (%rax),%eax
  f7:	3c 0a                	cmp    $0xa,%al
  f9:	74 cc                	je     c7 <ReadConfigFile::Read(char const*, unsigned int)+0xc7>
  fb:	0f b6 85 70 ff ff ff 	movzbl -0x90(%rbp),%eax
 102:	3c 60                	cmp    $0x60,%al
 104:	7e 2e                	jle    134 <ReadConfigFile::Read(char const*, unsigned int)+0x134>
 106:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
 10d:	c6 00 00             	movb   $0x0,(%rax)
 110:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
 117:	48 8b 08             	mov    (%rax),%rcx
 11a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
 121:	48 8b 40 08          	mov    0x8(%rax),%rax
 125:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
 12c:	48 89 d6             	mov    %rdx,%rsi
 12f:	48 89 c7             	mov    %rax,%rdi
 132:	ff d1                	call   *%rcx
 134:	83 bd 4c ff ff ff 00 	cmpl   $0x0,-0xb4(%rbp)
 13b:	0f 85 04 ff ff ff    	jne    45 <ReadConfigFile::Read(char const*, unsigned int)+0x45>
 141:	eb 01                	jmp    144 <ReadConfigFile::Read(char const*, unsigned int)+0x144>
 143:	90                   	nop
 144:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 148:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 14f:	00 00 
 151:	74 05                	je     158 <ReadConfigFile::Read(char const*, unsigned int)+0x158>
 153:	e8 00 00 00 00       	call   158 <ReadConfigFile::Read(char const*, unsigned int)+0x158>
 158:	c9                   	leave  
 159:	c3                   	ret    

sscanchar.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan4CharEPKcS1_PcRj:

0000000000000000 <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 d5             	mov    %rdx,%rbp
   8:	53                   	push   %rbx
   9:	48 89 cb             	mov    %rcx,%rbx
   c:	41 50                	push   %r8
   e:	e8 00 00 00 00       	call   13 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x13>
  13:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  19:	31 d2                	xor    %edx,%edx
  1b:	48 85 c0             	test   %rax,%rax
  1e:	74 29                	je     49 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x49>
  20:	8a 0c 10             	mov    (%rax,%rdx,1),%cl
  23:	8b 3b                	mov    (%rbx),%edi
  25:	0f b7 f2             	movzwl %dx,%esi
  28:	84 c9                	test   %cl,%cl
  2a:	74 18                	je     44 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x44>
  2c:	39 fe                	cmp    %edi,%esi
  2e:	73 09                	jae    39 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x39>
  30:	88 4c 15 00          	mov    %cl,0x0(%rbp,%rdx,1)
  34:	48 ff c2             	inc    %rdx
  37:	eb e7                	jmp    20 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x20>
  39:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  3f:	80 f9 0a             	cmp    $0xa,%cl
  42:	75 05                	jne    49 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x49>
  44:	89 33                	mov    %esi,(%rbx)
  46:	45 31 c0             	xor    %r8d,%r8d
  49:	5a                   	pop    %rdx
  4a:	44 89 c0             	mov    %r8d,%eax
  4d:	5b                   	pop    %rbx
  4e:	5d                   	pop    %rbp
  4f:	c3                   	ret    

sscan.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan7fromHexEPKc:

0000000000000000 <Sscan::fromHex(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  10:	48 83 c0 01          	add    $0x1,%rax
  14:	0f b6 00             	movzbl (%rax),%eax
  17:	84 c0                	test   %al,%al
  19:	74 75                	je     90 <Sscan::fromHex(char const*)+0x90>
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	48 83 c0 01          	add    $0x1,%rax
  23:	0f b6 00             	movzbl (%rax),%eax
  26:	3c 39                	cmp    $0x39,%al
  28:	7e 16                	jle    40 <Sscan::fromHex(char const*)+0x40>
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 83 c0 01          	add    $0x1,%rax
  32:	0f b6 00             	movzbl (%rax),%eax
  35:	83 c8 20             	or     $0x20,%eax
  38:	0f be c0             	movsbl %al,%eax
  3b:	83 e8 57             	sub    $0x57,%eax
  3e:	eb 11                	jmp    51 <Sscan::fromHex(char const*)+0x51>
  40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44:	48 83 c0 01          	add    $0x1,%rax
  48:	0f b6 00             	movzbl (%rax),%eax
  4b:	0f be c0             	movsbl %al,%eax
  4e:	83 e8 30             	sub    $0x30,%eax
  51:	89 45 f8             	mov    %eax,-0x8(%rbp)
  54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  58:	0f b6 00             	movzbl (%rax),%eax
  5b:	3c 39                	cmp    $0x39,%al
  5d:	7e 12                	jle    71 <Sscan::fromHex(char const*)+0x71>
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	0f b6 00             	movzbl (%rax),%eax
  66:	83 c8 20             	or     $0x20,%eax
  69:	0f be c0             	movsbl %al,%eax
  6c:	83 e8 57             	sub    $0x57,%eax
  6f:	eb 0d                	jmp    7e <Sscan::fromHex(char const*)+0x7e>
  71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  75:	0f b6 00             	movzbl (%rax),%eax
  78:	0f be c0             	movsbl %al,%eax
  7b:	83 e8 30             	sub    $0x30,%eax
  7e:	89 45 fc             	mov    %eax,-0x4(%rbp)
  81:	8b 45 fc             	mov    -0x4(%rbp),%eax
  84:	c1 e0 04             	shl    $0x4,%eax
  87:	89 c2                	mov    %eax,%edx
  89:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8c:	09 d0                	or     %edx,%eax
  8e:	eb 24                	jmp    b4 <Sscan::fromHex(char const*)+0xb4>
  90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  94:	0f b6 00             	movzbl (%rax),%eax
  97:	3c 39                	cmp    $0x39,%al
  99:	7e 0f                	jle    aa <Sscan::fromHex(char const*)+0xaa>
  9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9f:	0f b6 00             	movzbl (%rax),%eax
  a2:	83 c8 20             	or     $0x20,%eax
  a5:	83 e8 57             	sub    $0x57,%eax
  a8:	eb 0a                	jmp    b4 <Sscan::fromHex(char const*)+0xb4>
  aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ae:	0f b6 00             	movzbl (%rax),%eax
  b1:	83 e8 30             	sub    $0x30,%eax
  b4:	5d                   	pop    %rbp
  b5:	c3                   	ret    

Disassembly of section .text._ZN5Sscan9checkNameEPKcS1_:

0000000000000000 <Sscan::checkName(char const*, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	eb 2e                	jmp    40 <Sscan::checkName(char const*, char const*)+0x40>
  12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  16:	48 8d 50 01          	lea    0x1(%rax),%rdx
  1a:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  1e:	0f b6 08             	movzbl (%rax),%ecx
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	48 8d 50 01          	lea    0x1(%rax),%rdx
  29:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  2d:	0f b6 00             	movzbl (%rax),%eax
  30:	38 c1                	cmp    %al,%cl
  32:	0f 95 c0             	setne  %al
  35:	84 c0                	test   %al,%al
  37:	74 07                	je     40 <Sscan::checkName(char const*, char const*)+0x40>
  39:	b8 00 00 00 00       	mov    $0x0,%eax
  3e:	eb 68                	jmp    a8 <Sscan::checkName(char const*, char const*)+0xa8>
  40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  44:	0f b6 00             	movzbl (%rax),%eax
  47:	84 c0                	test   %al,%al
  49:	74 0b                	je     56 <Sscan::checkName(char const*, char const*)+0x56>
  4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4f:	0f b6 00             	movzbl (%rax),%eax
  52:	84 c0                	test   %al,%al
  54:	75 bc                	jne    12 <Sscan::checkName(char const*, char const*)+0x12>
  56:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  5a:	0f b6 00             	movzbl (%rax),%eax
  5d:	84 c0                	test   %al,%al
  5f:	74 07                	je     68 <Sscan::checkName(char const*, char const*)+0x68>
  61:	b8 00 00 00 00       	mov    $0x0,%eax
  66:	eb 40                	jmp    a8 <Sscan::checkName(char const*, char const*)+0xa8>
  68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6c:	48 8d 50 01          	lea    0x1(%rax),%rdx
  70:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
  74:	0f b6 00             	movzbl (%rax),%eax
  77:	3c 3d                	cmp    $0x3d,%al
  79:	0f 95 c0             	setne  %al
  7c:	84 c0                	test   %al,%al
  7e:	74 07                	je     87 <Sscan::checkName(char const*, char const*)+0x87>
  80:	b8 00 00 00 00       	mov    $0x0,%eax
  85:	eb 21                	jmp    a8 <Sscan::checkName(char const*, char const*)+0xa8>
  87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8b:	0f b6 00             	movzbl (%rax),%eax
  8e:	3c 20                	cmp    $0x20,%al
  90:	74 0b                	je     9d <Sscan::checkName(char const*, char const*)+0x9d>
  92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  96:	0f b6 00             	movzbl (%rax),%eax
  99:	84 c0                	test   %al,%al
  9b:	75 07                	jne    a4 <Sscan::checkName(char const*, char const*)+0xa4>
  9d:	b8 00 00 00 00       	mov    $0x0,%eax
  a2:	eb 04                	jmp    a8 <Sscan::checkName(char const*, char const*)+0xa8>
  a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a8:	5d                   	pop    %rbp
  a9:	c3                   	ret    

sscanfloat.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan5FloatEPKcS1_Rf:

0000000000000000 <Sscan::Float(char const*, char const*, float&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	53                   	push   %rbx
   5:	48 89 d3             	mov    %rdx,%rbx
   8:	e8 00 00 00 00       	call   d <Sscan::Float(char const*, char const*, float&)+0xd>
   d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  13:	48 85 c0             	test   %rax,%rax
  16:	0f 84 bc 00 00 00    	je     d8 <Sscan::Float(char const*, char const*, float&)+0xd8>
  1c:	31 ff                	xor    %edi,%edi
  1e:	80 38 2d             	cmpb   $0x2d,(%rax)
  21:	75 06                	jne    29 <Sscan::Float(char const*, char const*, float&)+0x29>
  23:	48 ff c0             	inc    %rax
  26:	40 b7 01             	mov    $0x1,%dil
  29:	31 d2                	xor    %edx,%edx
  2b:	f6 00 df             	testb  $0xdf,(%rax)
  2e:	75 29                	jne    59 <Sscan::Float(char const*, char const*, float&)+0x59>
  30:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  36:	e9 9d 00 00 00       	jmp    d8 <Sscan::Float(char const*, char const*, float&)+0xd8>
  3b:	6b d2 0a             	imul   $0xa,%edx,%edx
  3e:	40 8a 70 01          	mov    0x1(%rax),%sil
  42:	8d 54 11 d0          	lea    -0x30(%rcx,%rdx,1),%edx
  46:	48 8d 48 01          	lea    0x1(%rax),%rcx
  4a:	40 f6 c6 df          	test   $0xdf,%sil
  4e:	74 16                	je     66 <Sscan::Float(char const*, char const*, float&)+0x66>
  50:	40 80 fe 2e          	cmp    $0x2e,%sil
  54:	74 10                	je     66 <Sscan::Float(char const*, char const*, float&)+0x66>
  56:	48 89 c8             	mov    %rcx,%rax
  59:	0f be 08             	movsbl (%rax),%ecx
  5c:	8d 71 d0             	lea    -0x30(%rcx),%esi
  5f:	83 fe 09             	cmp    $0x9,%esi
  62:	76 d7                	jbe    3b <Sscan::Float(char const*, char const*, float&)+0x3b>
  64:	eb ca                	jmp    30 <Sscan::Float(char const*, char const*, float&)+0x30>
  66:	f3 48 0f 2a ca       	cvtsi2ss %rdx,%xmm1
  6b:	f3 0f 11 0b          	movss  %xmm1,(%rbx)
  6f:	80 39 2e             	cmpb   $0x2e,(%rcx)
  72:	74 12                	je     86 <Sscan::Float(char const*, char const*, float&)+0x86>
  74:	40 84 ff             	test   %dil,%dil
  77:	74 5c                	je     d5 <Sscan::Float(char const*, char const*, float&)+0xd5>
  79:	0f 57 0d 00 00 00 00 	xorps  0x0(%rip),%xmm1        # 80 <Sscan::Float(char const*, char const*, float&)+0x80>
  80:	f3 0f 11 0b          	movss  %xmm1,(%rbx)
  84:	eb 4f                	jmp    d5 <Sscan::Float(char const*, char const*, float&)+0xd5>
  86:	48 83 c0 02          	add    $0x2,%rax
  8a:	b9 01 00 00 00       	mov    $0x1,%ecx
  8f:	31 d2                	xor    %edx,%edx
  91:	0f be 30             	movsbl (%rax),%esi
  94:	40 f6 c6 df          	test   $0xdf,%sil
  98:	74 19                	je     b3 <Sscan::Float(char const*, char const*, float&)+0xb3>
  9a:	44 8d 46 d0          	lea    -0x30(%rsi),%r8d
  9e:	41 83 f8 09          	cmp    $0x9,%r8d
  a2:	77 8c                	ja     30 <Sscan::Float(char const*, char const*, float&)+0x30>
  a4:	6b d2 0a             	imul   $0xa,%edx,%edx
  a7:	48 ff c0             	inc    %rax
  aa:	6b c9 0a             	imul   $0xa,%ecx,%ecx
  ad:	8d 54 16 d0          	lea    -0x30(%rsi,%rdx,1),%edx
  b1:	eb de                	jmp    91 <Sscan::Float(char const*, char const*, float&)+0x91>
  b3:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  b8:	f3 48 0f 2a d1       	cvtsi2ss %rcx,%xmm2
  bd:	f3 0f 5e c2          	divss  %xmm2,%xmm0
  c1:	f3 0f 58 c1          	addss  %xmm1,%xmm0
  c5:	40 84 ff             	test   %dil,%dil
  c8:	74 07                	je     d1 <Sscan::Float(char const*, char const*, float&)+0xd1>
  ca:	0f 57 05 00 00 00 00 	xorps  0x0(%rip),%xmm0        # d1 <Sscan::Float(char const*, char const*, float&)+0xd1>
  d1:	f3 0f 11 03          	movss  %xmm0,(%rbx)
  d5:	45 31 c0             	xor    %r8d,%r8d
  d8:	44 89 c0             	mov    %r8d,%eax
  db:	5b                   	pop    %rbx
  dc:	c3                   	ret    

sscanhex24uint32.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan11Hex24Uint32EPKcS1_Rj:

0000000000000000 <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 55                	push   %r13
   8:	49 89 d5             	mov    %rdx,%r13
   b:	41 54                	push   %r12
   d:	55                   	push   %rbp
   e:	53                   	push   %rbx
   f:	e8 00 00 00 00       	call   14 <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x14>
  14:	48 85 c0             	test   %rax,%rax
  17:	75 07                	jne    20 <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x20>
  19:	b8 01 00 00 00       	mov    $0x1,%eax
  1e:	eb 5a                	jmp    7a <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x7a>
  20:	49 89 c6             	mov    %rax,%r14
  23:	31 ed                	xor    %ebp,%ebp
  25:	45 31 e4             	xor    %r12d,%r12d
  28:	45 89 65 00          	mov    %r12d,0x0(%r13)
  2c:	41 8a 1c 2e          	mov    (%r14,%rbp,1),%bl
  30:	89 e8                	mov    %ebp,%eax
  32:	84 db                	test   %bl,%bl
  34:	74 39                	je     6f <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x6f>
  36:	48 83 fd 06          	cmp    $0x6,%rbp
  3a:	74 29                	je     65 <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x65>
  3c:	0f be fb             	movsbl %bl,%edi
  3f:	e8 00 00 00 00       	call   44 <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x44>
  44:	85 c0                	test   %eax,%eax
  46:	74 d1                	je     19 <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x19>
  48:	8d 43 d0             	lea    -0x30(%rbx),%eax
  4b:	80 fb 39             	cmp    $0x39,%bl
  4e:	7e 06                	jle    56 <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x56>
  50:	83 cb 20             	or     $0x20,%ebx
  53:	8d 43 a9             	lea    -0x57(%rbx),%eax
  56:	41 c1 e4 04          	shl    $0x4,%r12d
  5a:	0f b6 c0             	movzbl %al,%eax
  5d:	48 ff c5             	inc    %rbp
  60:	41 09 c4             	or     %eax,%r12d
  63:	eb c3                	jmp    28 <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x28>
  65:	80 fb 20             	cmp    $0x20,%bl
  68:	75 af                	jne    19 <Sscan::Hex24Uint32(char const*, char const*, unsigned int&)+0x19>
  6a:	b8 06 00 00 00       	mov    $0x6,%eax
  6f:	83 f8 06             	cmp    $0x6,%eax
  72:	0f 95 c0             	setne  %al
  75:	0f b6 c0             	movzbl %al,%eax
  78:	01 c0                	add    %eax,%eax
  7a:	5b                   	pop    %rbx
  7b:	5d                   	pop    %rbp
  7c:	41 5c                	pop    %r12
  7e:	41 5d                	pop    %r13
  80:	41 5e                	pop    %r14
  82:	c3                   	ret    

sscanhexuint16.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan9HexUint16EPKcS1_Rt:

0000000000000000 <Sscan::HexUint16(char const*, char const*, unsigned short&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 55                	push   %r13
   8:	49 89 d5             	mov    %rdx,%r13
   b:	41 54                	push   %r12
   d:	55                   	push   %rbp
   e:	53                   	push   %rbx
   f:	e8 00 00 00 00       	call   14 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x14>
  14:	48 85 c0             	test   %rax,%rax
  17:	75 07                	jne    20 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x20>
  19:	b8 01 00 00 00       	mov    $0x1,%eax
  1e:	eb 5b                	jmp    7b <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x7b>
  20:	49 89 c6             	mov    %rax,%r14
  23:	31 ed                	xor    %ebp,%ebp
  25:	45 31 e4             	xor    %r12d,%r12d
  28:	66 45 89 65 00       	mov    %r12w,0x0(%r13)
  2d:	41 8a 1c 2e          	mov    (%r14,%rbp,1),%bl
  31:	89 e8                	mov    %ebp,%eax
  33:	84 db                	test   %bl,%bl
  35:	74 39                	je     70 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x70>
  37:	48 83 fd 04          	cmp    $0x4,%rbp
  3b:	74 29                	je     66 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x66>
  3d:	0f be fb             	movsbl %bl,%edi
  40:	e8 00 00 00 00       	call   45 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x45>
  45:	85 c0                	test   %eax,%eax
  47:	74 d0                	je     19 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x19>
  49:	8d 43 d0             	lea    -0x30(%rbx),%eax
  4c:	80 fb 39             	cmp    $0x39,%bl
  4f:	7e 06                	jle    57 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x57>
  51:	83 cb 20             	or     $0x20,%ebx
  54:	8d 43 a9             	lea    -0x57(%rbx),%eax
  57:	41 c1 e4 04          	shl    $0x4,%r12d
  5b:	0f b6 c0             	movzbl %al,%eax
  5e:	48 ff c5             	inc    %rbp
  61:	41 09 c4             	or     %eax,%r12d
  64:	eb c2                	jmp    28 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x28>
  66:	80 fb 20             	cmp    $0x20,%bl
  69:	75 ae                	jne    19 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x19>
  6b:	b8 04 00 00 00       	mov    $0x4,%eax
  70:	83 f8 04             	cmp    $0x4,%eax
  73:	0f 95 c0             	setne  %al
  76:	0f b6 c0             	movzbl %al,%eax
  79:	01 c0                	add    %eax,%eax
  7b:	5b                   	pop    %rbx
  7c:	5d                   	pop    %rbp
  7d:	41 5c                	pop    %r12
  7f:	41 5d                	pop    %r13
  81:	41 5e                	pop    %r14
  83:	c3                   	ret    

sscani2caddress.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan10I2cAddressEPKcS1_Rh:

0000000000000000 <Sscan::I2cAddress(char const*, char const*, unsigned char&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	49 89 d5             	mov    %rdx,%r13
   9:	41 54                	push   %r12
   b:	55                   	push   %rbp
   c:	53                   	push   %rbx
   d:	48 83 ec 18          	sub    $0x18,%rsp
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1f:	31 c0                	xor    %eax,%eax
  21:	e8 00 00 00 00       	call   26 <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x26>
  26:	48 85 c0             	test   %rax,%rax
  29:	75 07                	jne    32 <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x32>
  2b:	b8 01 00 00 00       	mov    $0x1,%eax
  30:	eb 50                	jmp    82 <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x82>
  32:	66 c7 44 24 06 00 00 	movw   $0x0,0x6(%rsp)
  39:	49 89 c4             	mov    %rax,%r12
  3c:	31 db                	xor    %ebx,%ebx
  3e:	41 8a 2c 1c          	mov    (%r12,%rbx,1),%bpl
  42:	40 84 ed             	test   %bpl,%bpl
  45:	74 23                	je     6a <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x6a>
  47:	48 83 fb 02          	cmp    $0x2,%rbx
  4b:	74 17                	je     64 <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x64>
  4d:	40 0f be fd          	movsbl %bpl,%edi
  51:	e8 00 00 00 00       	call   56 <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x56>
  56:	85 c0                	test   %eax,%eax
  58:	74 d1                	je     2b <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x2b>
  5a:	40 88 6c 1c 06       	mov    %bpl,0x6(%rsp,%rbx,1)
  5f:	48 ff c3             	inc    %rbx
  62:	eb da                	jmp    3e <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x3e>
  64:	40 80 fd 20          	cmp    $0x20,%bpl
  68:	75 c1                	jne    2b <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x2b>
  6a:	48 8d 7c 24 06       	lea    0x6(%rsp),%rdi
  6f:	e8 00 00 00 00       	call   74 <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x74>
  74:	3c 7e                	cmp    $0x7e,%al
  76:	41 88 45 00          	mov    %al,0x0(%r13)
  7a:	0f 97 c0             	seta   %al
  7d:	0f b6 c0             	movzbl %al,%eax
  80:	01 c0                	add    %eax,%eax
  82:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  87:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  8e:	00 00 
  90:	74 05                	je     97 <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x97>
  92:	e8 00 00 00 00       	call   97 <Sscan::I2cAddress(char const*, char const*, unsigned char&)+0x97>
  97:	48 83 c4 18          	add    $0x18,%rsp
  9b:	5b                   	pop    %rbx
  9c:	5d                   	pop    %rbp
  9d:	41 5c                	pop    %r12
  9f:	41 5d                	pop    %r13
  a1:	c3                   	ret    

sscani2c.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan3I2cEPKcPcRhS3_S3_:

0000000000000000 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 55                	push   %r13
   8:	49 89 cd             	mov    %rcx,%r13
   b:	41 54                	push   %r12
   d:	55                   	push   %rbp
   e:	4c 89 c5             	mov    %r8,%rbp
  11:	53                   	push   %rbx
  12:	48 83 ec 10          	sub    $0x10,%rsp
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  24:	31 c0                	xor    %eax,%eax
  26:	8a 0c 07             	mov    (%rdi,%rax,1),%cl
  29:	48 8d 1c 07          	lea    (%rdi,%rax,1),%rbx
  2d:	84 c9                	test   %cl,%cl
  2f:	74 05                	je     36 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x36>
  31:	80 f9 2c             	cmp    $0x2c,%cl
  34:	75 18                	jne    4e <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x4e>
  36:	88 02                	mov    %al,(%rdx)
  38:	8a 13                	mov    (%rbx),%dl
  3a:	84 d2                	test   %dl,%dl
  3c:	74 21                	je     5f <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x5f>
  3e:	b8 01 00 00 00       	mov    $0x1,%eax
  43:	80 fa 2c             	cmp    $0x2c,%dl
  46:	0f 85 94 00 00 00    	jne    e0 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xe0>
  4c:	eb 11                	jmp    5f <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x5f>
  4e:	44 0f b6 0a          	movzbl (%rdx),%r9d
  52:	41 39 c1             	cmp    %eax,%r9d
  55:	76 df                	jbe    36 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x36>
  57:	88 0c 06             	mov    %cl,(%rsi,%rax,1)
  5a:	48 ff c0             	inc    %rax
  5d:	eb c7                	jmp    26 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x26>
  5f:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
  64:	48 ff c3             	inc    %rbx
  67:	45 31 e4             	xor    %r12d,%r12d
  6a:	44 8a 33             	mov    (%rbx),%r14b
  6d:	44 89 e0             	mov    %r12d,%eax
  70:	45 84 f6             	test   %r14b,%r14b
  73:	74 2d                	je     a2 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xa2>
  75:	41 80 fe 3a          	cmp    $0x3a,%r14b
  79:	74 27                	je     a2 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xa2>
  7b:	49 83 fc 02          	cmp    $0x2,%r12
  7f:	74 25                	je     a6 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xa6>
  81:	41 0f be fe          	movsbl %r14b,%edi
  85:	e8 00 00 00 00       	call   8a <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x8a>
  8a:	85 c0                	test   %eax,%eax
  8c:	75 07                	jne    95 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x95>
  8e:	b8 02 00 00 00       	mov    $0x2,%eax
  93:	eb 4b                	jmp    e0 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xe0>
  95:	46 88 74 24 06       	mov    %r14b,0x6(%rsp,%r12,1)
  9a:	48 ff c3             	inc    %rbx
  9d:	49 ff c4             	inc    %r12
  a0:	eb c8                	jmp    6a <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x6a>
  a2:	85 c0                	test   %eax,%eax
  a4:	74 e8                	je     8e <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x8e>
  a6:	48 8d 7c 24 06       	lea    0x6(%rsp),%rdi
  ab:	e8 00 00 00 00       	call   b0 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xb0>
  b0:	41 88 45 00          	mov    %al,0x0(%r13)
  b4:	31 c0                	xor    %eax,%eax
  b6:	c6 45 00 ff          	movb   $0xff,0x0(%rbp)
  ba:	8a 13                	mov    (%rbx),%dl
  bc:	f6 c2 df             	test   $0xdf,%dl
  bf:	74 1f                	je     e0 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xe0>
  c1:	80 fa 3a             	cmp    $0x3a,%dl
  c4:	75 c8                	jne    8e <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x8e>
  c6:	0f be 53 01          	movsbl 0x1(%rbx),%edx
  ca:	89 d0                	mov    %edx,%eax
  cc:	83 ea 30             	sub    $0x30,%edx
  cf:	83 fa 09             	cmp    $0x9,%edx
  d2:	77 ba                	ja     8e <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x8e>
  d4:	83 e8 30             	sub    $0x30,%eax
  d7:	3c 07                	cmp    $0x7,%al
  d9:	77 b3                	ja     8e <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x8e>
  db:	88 45 00             	mov    %al,0x0(%rbp)
  de:	31 c0                	xor    %eax,%eax
  e0:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  e5:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  ec:	00 00 
  ee:	74 05                	je     f5 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xf5>
  f0:	e8 00 00 00 00       	call   f5 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xf5>
  f5:	48 83 c4 10          	add    $0x10,%rsp
  f9:	5b                   	pop    %rbx
  fa:	5d                   	pop    %rbp
  fb:	41 5c                	pop    %r12
  fd:	41 5d                	pop    %r13
  ff:	41 5e                	pop    %r14
 101:	c3                   	ret    

sscanipaddress.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan9IpAddressEPKcS1_Rj:

0000000000000000 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	53                   	push   %rbx
   5:	48 89 d3             	mov    %rdx,%rbx
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  13:	00 00 
  15:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  1a:	31 c0                	xor    %eax,%eax
  1c:	e8 00 00 00 00       	call   21 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x21>
  21:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  27:	31 f6                	xor    %esi,%esi
  29:	48 85 c0             	test   %rax,%rax
  2c:	0f 84 89 00 00 00    	je     bb <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xbb>
  32:	48 8d 78 03          	lea    0x3(%rax),%rdi
  36:	31 d2                	xor    %edx,%edx
  38:	0f be 08             	movsbl (%rax),%ecx
  3b:	80 f9 2e             	cmp    $0x2e,%cl
  3e:	74 27                	je     67 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x67>
  40:	84 c9                	test   %cl,%cl
  42:	74 23                	je     67 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x67>
  44:	48 39 c7             	cmp    %rax,%rdi
  47:	75 08                	jne    51 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x51>
  49:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  4f:	eb 6a                	jmp    bb <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xbb>
  51:	44 8d 41 d0          	lea    -0x30(%rcx),%r8d
  55:	41 83 f8 09          	cmp    $0x9,%r8d
  59:	77 ee                	ja     49 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x49>
  5b:	6b d2 0a             	imul   $0xa,%edx,%edx
  5e:	48 ff c0             	inc    %rax
  61:	8d 54 11 d0          	lea    -0x30(%rcx,%rdx,1),%edx
  65:	eb d1                	jmp    38 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x38>
  67:	81 fa ff 00 00 00    	cmp    $0xff,%edx
  6d:	77 da                	ja     49 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x49>
  6f:	88 54 34 04          	mov    %dl,0x4(%rsp,%rsi,1)
  73:	48 ff c6             	inc    %rsi
  76:	48 ff c0             	inc    %rax
  79:	48 83 fe 03          	cmp    $0x3,%rsi
  7d:	75 b3                	jne    32 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x32>
  7f:	31 f6                	xor    %esi,%esi
  81:	31 d2                	xor    %edx,%edx
  83:	0f be 0c 30          	movsbl (%rax,%rsi,1),%ecx
  87:	f6 c1 df             	test   $0xdf,%cl
  8a:	74 1a                	je     a6 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xa6>
  8c:	48 83 fe 03          	cmp    $0x3,%rsi
  90:	74 b7                	je     49 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x49>
  92:	8d 79 d0             	lea    -0x30(%rcx),%edi
  95:	48 ff c6             	inc    %rsi
  98:	83 ff 09             	cmp    $0x9,%edi
  9b:	77 ac                	ja     49 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x49>
  9d:	6b d2 0a             	imul   $0xa,%edx,%edx
  a0:	8d 54 11 d0          	lea    -0x30(%rcx,%rdx,1),%edx
  a4:	eb dd                	jmp    83 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x83>
  a6:	81 fa ff 00 00 00    	cmp    $0xff,%edx
  ac:	77 9b                	ja     49 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x49>
  ae:	88 54 24 07          	mov    %dl,0x7(%rsp)
  b2:	8b 44 24 04          	mov    0x4(%rsp),%eax
  b6:	45 31 c0             	xor    %r8d,%r8d
  b9:	89 03                	mov    %eax,(%rbx)
  bb:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  c0:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  c7:	00 00 
  c9:	74 05                	je     d0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xd0>
  cb:	e8 00 00 00 00       	call   d0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xd0>
  d0:	48 83 c4 10          	add    $0x10,%rsp
  d4:	44 89 c0             	mov    %r8d,%eax
  d7:	5b                   	pop    %rbx
  d8:	c3                   	ret    

sscanspi.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan3SpiEPKcRcPcRhS4_RtRj:

0000000000000000 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 57                	push   %r15
   6:	48 89 f8             	mov    %rdi,%rax
   9:	48 89 f7             	mov    %rsi,%rdi
   c:	48 89 d6             	mov    %rdx,%rsi
   f:	41 56                	push   %r14
  11:	41 55                	push   %r13
  13:	4d 89 c5             	mov    %r8,%r13
  16:	41 54                	push   %r12
  18:	4d 89 cc             	mov    %r9,%r12
  1b:	55                   	push   %rbp
  1c:	53                   	push   %rbx
  1d:	48 83 ec 18          	sub    $0x18,%rsp
  21:	44 0f be 00          	movsbl (%rax),%r8d
  25:	64 48 8b 14 25 28 00 	mov    %fs:0x28,%rdx
  2c:	00 00 
  2e:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  33:	31 d2                	xor    %edx,%edx
  35:	48 8b 6c 24 50       	mov    0x50(%rsp),%rbp
  3a:	44 89 c2             	mov    %r8d,%edx
  3d:	41 83 e8 30          	sub    $0x30,%r8d
  41:	41 83 f8 09          	cmp    $0x9,%r8d
  45:	76 11                	jbe    58 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x58>
  47:	80 78 01 2c          	cmpb   $0x2c,0x1(%rax)
  4b:	74 0b                	je     58 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x58>
  4d:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  53:	e9 51 01 00 00       	jmp    1a9 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x1a9>
  58:	83 ea 30             	sub    $0x30,%edx
  5b:	48 83 c0 02          	add    $0x2,%rax
  5f:	88 17                	mov    %dl,(%rdi)
  61:	31 d2                	xor    %edx,%edx
  63:	40 8a 38             	mov    (%rax),%dil
  66:	4c 8d 04 16          	lea    (%rsi,%rdx,1),%r8
  6a:	40 84 ff             	test   %dil,%dil
  6d:	74 1b                	je     8a <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x8a>
  6f:	44 0f b6 09          	movzbl (%rcx),%r9d
  73:	41 39 d1             	cmp    %edx,%r9d
  76:	76 12                	jbe    8a <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x8a>
  78:	40 80 ff 2c          	cmp    $0x2c,%dil
  7c:	74 0c                	je     8a <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x8a>
  7e:	40 88 3c 16          	mov    %dil,(%rsi,%rdx,1)
  82:	48 ff c0             	inc    %rax
  85:	48 ff c2             	inc    %rdx
  88:	eb d9                	jmp    63 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x63>
  8a:	88 11                	mov    %dl,(%rcx)
  8c:	41 c6 00 00          	movb   $0x0,(%r8)
  90:	80 38 2c             	cmpb   $0x2c,(%rax)
  93:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  99:	0f 85 0a 01 00 00    	jne    1a9 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x1a9>
  9f:	c6 44 24 07 00       	movb   $0x0,0x7(%rsp)
  a4:	48 8d 58 01          	lea    0x1(%rax),%rbx
  a8:	45 31 ff             	xor    %r15d,%r15d
  ab:	44 8a 33             	mov    (%rbx),%r14b
  ae:	44 89 f8             	mov    %r15d,%eax
  b1:	45 84 f6             	test   %r14b,%r14b
  b4:	74 2a                	je     e0 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0xe0>
  b6:	41 80 fe 2c          	cmp    $0x2c,%r14b
  ba:	74 24                	je     e0 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0xe0>
  bc:	49 83 ff 02          	cmp    $0x2,%r15
  c0:	74 8b                	je     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
  c2:	41 0f be fe          	movsbl %r14b,%edi
  c6:	e8 00 00 00 00       	call   cb <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0xcb>
  cb:	85 c0                	test   %eax,%eax
  cd:	0f 84 7a ff ff ff    	je     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
  d3:	46 88 74 3c 06       	mov    %r14b,0x6(%rsp,%r15,1)
  d8:	48 ff c3             	inc    %rbx
  db:	49 ff c7             	inc    %r15
  de:	eb cb                	jmp    ab <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0xab>
  e0:	85 c0                	test   %eax,%eax
  e2:	0f 84 65 ff ff ff    	je     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
  e8:	41 80 fe 2c          	cmp    $0x2c,%r14b
  ec:	0f 85 5b ff ff ff    	jne    4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
  f2:	48 8d 7c 24 06       	lea    0x6(%rsp),%rdi
  f7:	e8 00 00 00 00       	call   fc <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0xfc>
  fc:	31 c9                	xor    %ecx,%ecx
  fe:	31 f6                	xor    %esi,%esi
 100:	41 88 45 00          	mov    %al,0x0(%r13)
 104:	48 8d 43 01          	lea    0x1(%rbx),%rax
 108:	66 0f be 10          	movsbw (%rax),%dx
 10c:	84 d2                	test   %dl,%dl
 10e:	74 2b                	je     13b <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x13b>
 110:	80 fa 2c             	cmp    $0x2c,%dl
 113:	74 26                	je     13b <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x13b>
 115:	83 fe 03             	cmp    $0x3,%esi
 118:	0f 84 2f ff ff ff    	je     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
 11e:	0f be fa             	movsbl %dl,%edi
 121:	83 ef 30             	sub    $0x30,%edi
 124:	83 ff 09             	cmp    $0x9,%edi
 127:	0f 87 20 ff ff ff    	ja     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
 12d:	6b c9 0a             	imul   $0xa,%ecx,%ecx
 130:	ff c6                	inc    %esi
 132:	48 ff c0             	inc    %rax
 135:	8d 4c 11 d0          	lea    -0x30(%rcx,%rdx,1),%ecx
 139:	eb cd                	jmp    108 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x108>
 13b:	85 f6                	test   %esi,%esi
 13d:	0f 84 0a ff ff ff    	je     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
 143:	80 fa 2c             	cmp    $0x2c,%dl
 146:	0f 85 01 ff ff ff    	jne    4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
 14c:	66 41 89 0c 24       	mov    %cx,(%r12)
 151:	66 81 f9 00 02       	cmp    $0x200,%cx
 156:	0f 87 f1 fe ff ff    	ja     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
 15c:	31 f6                	xor    %esi,%esi
 15e:	31 c9                	xor    %ecx,%ecx
 160:	0f be 54 30 01       	movsbl 0x1(%rax,%rsi,1),%edx
 165:	89 f7                	mov    %esi,%edi
 167:	84 d2                	test   %dl,%dl
 169:	74 34                	je     19f <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x19f>
 16b:	48 83 fe 09          	cmp    $0x9,%rsi
 16f:	74 1d                	je     18e <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x18e>
 171:	80 fa 20             	cmp    $0x20,%dl
 174:	74 29                	je     19f <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x19f>
 176:	8d 7a d0             	lea    -0x30(%rdx),%edi
 179:	48 ff c6             	inc    %rsi
 17c:	83 ff 09             	cmp    $0x9,%edi
 17f:	0f 87 c8 fe ff ff    	ja     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
 185:	6b c9 0a             	imul   $0xa,%ecx,%ecx
 188:	8d 4c 0a d0          	lea    -0x30(%rdx,%rcx,1),%ecx
 18c:	eb d2                	jmp    160 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x160>
 18e:	80 fa 20             	cmp    $0x20,%dl
 191:	0f 85 b6 fe ff ff    	jne    4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
 197:	89 4d 00             	mov    %ecx,0x0(%rbp)
 19a:	45 31 c0             	xor    %r8d,%r8d
 19d:	eb 0a                	jmp    1a9 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x1a9>
 19f:	85 ff                	test   %edi,%edi
 1a1:	0f 84 a6 fe ff ff    	je     4d <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x4d>
 1a7:	eb ee                	jmp    197 <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x197>
 1a9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
 1ae:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 1b5:	00 00 
 1b7:	74 05                	je     1be <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x1be>
 1b9:	e8 00 00 00 00       	call   1be <Sscan::Spi(char const*, char&, char*, unsigned char&, unsigned char&, unsigned short&, unsigned int&)+0x1be>
 1be:	48 83 c4 18          	add    $0x18,%rsp
 1c2:	44 89 c0             	mov    %r8d,%eax
 1c5:	5b                   	pop    %rbx
 1c6:	5d                   	pop    %rbp
 1c7:	41 5c                	pop    %r12
 1c9:	41 5d                	pop    %r13
 1cb:	41 5e                	pop    %r14
 1cd:	41 5f                	pop    %r15
 1cf:	c3                   	ret    

sscanuint16.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan6Uint16EPKcS1_Rt:

0000000000000000 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	53                   	push   %rbx
   5:	48 89 d3             	mov    %rdx,%rbx
   8:	e8 00 00 00 00       	call   d <Sscan::Uint16(char const*, char const*, unsigned short&)+0xd>
   d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  13:	48 85 c0             	test   %rax,%rax
  16:	74 38                	je     50 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x50>
  18:	31 c9                	xor    %ecx,%ecx
  1a:	0f be 10             	movsbl (%rax),%edx
  1d:	8d 72 d0             	lea    -0x30(%rdx),%esi
  20:	83 fe 09             	cmp    $0x9,%esi
  23:	77 25                	ja     4a <Sscan::Uint16(char const*, char const*, unsigned short&)+0x4a>
  25:	6b c9 0a             	imul   $0xa,%ecx,%ecx
  28:	48 ff c0             	inc    %rax
  2b:	8d 4c 0a d0          	lea    -0x30(%rdx,%rcx,1),%ecx
  2f:	f6 00 df             	testb  $0xdf,(%rax)
  32:	75 e6                	jne    1a <Sscan::Uint16(char const*, char const*, unsigned short&)+0x1a>
  34:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  3a:	81 f9 ff ff 00 00    	cmp    $0xffff,%ecx
  40:	77 0e                	ja     50 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x50>
  42:	66 89 0b             	mov    %cx,(%rbx)
  45:	45 31 c0             	xor    %r8d,%r8d
  48:	eb 06                	jmp    50 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x50>
  4a:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  50:	44 89 c0             	mov    %r8d,%eax
  53:	5b                   	pop    %rbx
  54:	c3                   	ret    

sscanuint32.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan6Uint32EPKcS1_Rj:

0000000000000000 <Sscan::Uint32(char const*, char const*, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	53                   	push   %rbx
   5:	48 89 d3             	mov    %rdx,%rbx
   8:	e8 00 00 00 00       	call   d <Sscan::Uint32(char const*, char const*, unsigned int&)+0xd>
   d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  13:	48 85 c0             	test   %rax,%rax
  16:	74 3f                	je     57 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x57>
  18:	31 d2                	xor    %edx,%edx
  1a:	48 0f be 30          	movsbq (%rax),%rsi
  1e:	48 89 f1             	mov    %rsi,%rcx
  21:	83 ee 30             	sub    $0x30,%esi
  24:	83 fe 09             	cmp    $0x9,%esi
  27:	77 28                	ja     51 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x51>
  29:	48 6b d2 0a          	imul   $0xa,%rdx,%rdx
  2d:	48 ff c0             	inc    %rax
  30:	48 8d 54 0a d0       	lea    -0x30(%rdx,%rcx,1),%rdx
  35:	f6 00 df             	testb  $0xdf,(%rax)
  38:	75 e0                	jne    1a <Sscan::Uint32(char const*, char const*, unsigned int&)+0x1a>
  3a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  3f:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  45:	48 39 c2             	cmp    %rax,%rdx
  48:	77 0d                	ja     57 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x57>
  4a:	89 13                	mov    %edx,(%rbx)
  4c:	45 31 c0             	xor    %r8d,%r8d
  4f:	eb 06                	jmp    57 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x57>
  51:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  57:	44 89 c0             	mov    %r8d,%eax
  5a:	5b                   	pop    %rbx
  5b:	c3                   	ret    

sscanuint8.o:     file format elf64-x86-64


Disassembly of section .text._ZN5Sscan5Uint8EPKcS1_Rh:

0000000000000000 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	53                   	push   %rbx
   5:	48 89 d3             	mov    %rdx,%rbx
   8:	e8 00 00 00 00       	call   d <Sscan::Uint8(char const*, char const*, unsigned char&)+0xd>
   d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  13:	48 85 c0             	test   %rax,%rax
  16:	74 37                	je     4f <Sscan::Uint8(char const*, char const*, unsigned char&)+0x4f>
  18:	31 c9                	xor    %ecx,%ecx
  1a:	0f be 10             	movsbl (%rax),%edx
  1d:	8d 72 d0             	lea    -0x30(%rdx),%esi
  20:	83 fe 09             	cmp    $0x9,%esi
  23:	77 24                	ja     49 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x49>
  25:	6b c9 0a             	imul   $0xa,%ecx,%ecx
  28:	48 ff c0             	inc    %rax
  2b:	8d 4c 0a d0          	lea    -0x30(%rdx,%rcx,1),%ecx
  2f:	f6 00 df             	testb  $0xdf,(%rax)
  32:	75 e6                	jne    1a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x1a>
  34:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  3a:	81 f9 ff 00 00 00    	cmp    $0xff,%ecx
  40:	77 0d                	ja     4f <Sscan::Uint8(char const*, char const*, unsigned char&)+0x4f>
  42:	88 0b                	mov    %cl,(%rbx)
  44:	45 31 c0             	xor    %r8d,%r8d
  47:	eb 06                	jmp    4f <Sscan::Uint8(char const*, char const*, unsigned char&)+0x4f>
  49:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  4f:	44 89 c0             	mov    %r8d,%eax
  52:	5b                   	pop    %rbx
  53:	c3                   	ret    
