In archive lib_linux/libdmxserial.a:

dmxserialchanneldata.o:     file format elf64-x86-64


Disassembly of section .text._ZN20DmxSerialChannelDataC2Ev:

0000000000000000 <DmxSerialChannelData::DmxSerialChannelData()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1f:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  23:	b9 26 00 00 00       	mov    $0x26,%ecx
  28:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2f <DmxSerialChannelData::DmxSerialChannelData()+0x2f>
  2f:	48 89 c2             	mov    %rax,%rdx
  32:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 39 <DmxSerialChannelData::DmxSerialChannelData()+0x39>
  39:	48 89 c6             	mov    %rax,%rsi
  3c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 43 <DmxSerialChannelData::DmxSerialChannelData()+0x43>
  43:	48 89 c7             	mov    %rax,%rdi
  46:	b8 00 00 00 00       	mov    $0x0,%eax
  4b:	e8 00 00 00 00       	call   50 <DmxSerialChannelData::DmxSerialChannelData()+0x50>
  50:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  57:	eb 23                	jmp    7c <DmxSerialChannelData::DmxSerialChannelData()+0x7c>
  59:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  60:	c6 44 02 09 00       	movb   $0x0,0x9(%rdx,%rax,1)
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	8b 55 fc             	mov    -0x4(%rbp),%edx
  6c:	48 83 c2 42          	add    $0x42,%rdx
  70:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  77:	00 
  78:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  7c:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%rbp)
  83:	76 d4                	jbe    59 <DmxSerialChannelData::DmxSerialChannelData()+0x59>
  85:	b9 2d 00 00 00       	mov    $0x2d,%ecx
  8a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 91 <DmxSerialChannelData::DmxSerialChannelData()+0x91>
  91:	48 89 c2             	mov    %rax,%rdx
  94:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 9b <DmxSerialChannelData::DmxSerialChannelData()+0x9b>
  9b:	48 89 c6             	mov    %rax,%rsi
  9e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # a5 <DmxSerialChannelData::DmxSerialChannelData()+0xa5>
  a5:	48 89 c7             	mov    %rax,%rdi
  a8:	b8 00 00 00 00       	mov    $0x0,%eax
  ad:	e8 00 00 00 00       	call   b2 <DmxSerialChannelData::DmxSerialChannelData()+0xb2>
  b2:	90                   	nop
  b3:	c9                   	leave  
  b4:	c3                   	ret    

Disassembly of section .text._ZN20DmxSerialChannelDataD2Ev:

0000000000000000 <DmxSerialChannelData::~DmxSerialChannelData()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  17:	eb 7b                	jmp    94 <DmxSerialChannelData::~DmxSerialChannelData()+0x94>
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  20:	48 83 c2 42          	add    $0x42,%rdx
  24:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  28:	48 85 c0             	test   %rax,%rax
  2b:	74 63                	je     90 <DmxSerialChannelData::~DmxSerialChannelData()+0x90>
  2d:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 34 <DmxSerialChannelData::~DmxSerialChannelData()+0x34>
  34:	8b 55 fc             	mov    -0x4(%rbp),%edx
  37:	41 89 d1             	mov    %edx,%r9d
  3a:	41 b8 33 00 00 00    	mov    $0x33,%r8d
  40:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 47 <DmxSerialChannelData::~DmxSerialChannelData()+0x47>
  47:	48 89 d1             	mov    %rdx,%rcx
  4a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 51 <DmxSerialChannelData::~DmxSerialChannelData()+0x51>
  51:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 58 <DmxSerialChannelData::~DmxSerialChannelData()+0x58>
  58:	48 89 c7             	mov    %rax,%rdi
  5b:	b8 00 00 00 00       	mov    $0x0,%eax
  60:	e8 00 00 00 00       	call   65 <DmxSerialChannelData::~DmxSerialChannelData()+0x65>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	8b 55 fc             	mov    -0x4(%rbp),%edx
  6c:	48 83 c2 42          	add    $0x42,%rdx
  70:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  74:	48 85 c0             	test   %rax,%rax
  77:	74 17                	je     90 <DmxSerialChannelData::~DmxSerialChannelData()+0x90>
  79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80:	48 83 c2 42          	add    $0x42,%rdx
  84:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  88:	48 89 c7             	mov    %rax,%rdi
  8b:	e8 00 00 00 00       	call   90 <DmxSerialChannelData::~DmxSerialChannelData()+0x90>
  90:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  94:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%rbp)
  9b:	0f 86 78 ff ff ff    	jbe    19 <DmxSerialChannelData::~DmxSerialChannelData()+0x19>
  a1:	90                   	nop
  a2:	90                   	nop
  a3:	c9                   	leave  
  a4:	c3                   	ret    

Disassembly of section .text._ZN20DmxSerialChannelData5ClearEv:

0000000000000000 <DmxSerialChannelData::Clear()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN20DmxSerialChannelData5ParseEPKc:

0000000000000000 <DmxSerialChannelData::Parse(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	b9 3d 00 00 00       	mov    $0x3d,%ecx
  19:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 20 <DmxSerialChannelData::Parse(char const*)+0x20>
  20:	48 89 c2             	mov    %rax,%rdx
  23:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2a <DmxSerialChannelData::Parse(char const*)+0x2a>
  2a:	48 89 c6             	mov    %rax,%rsi
  2d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 34 <DmxSerialChannelData::Parse(char const*)+0x34>
  34:	48 89 c7             	mov    %rax,%rdi
  37:	b8 00 00 00 00       	mov    $0x0,%eax
  3c:	e8 00 00 00 00       	call   41 <DmxSerialChannelData::Parse(char const*)+0x41>
  41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  45:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4c <DmxSerialChannelData::Parse(char const*)+0x4c>
  4c:	48 89 d6             	mov    %rdx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <DmxSerialChannelData::Parse(char const*)+0x57>
  57:	48 89 c2             	mov    %rax,%rdx
  5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5e:	48 89 10             	mov    %rdx,(%rax)
  61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  65:	48 8b 00             	mov    (%rax),%rax
  68:	48 85 c0             	test   %rax,%rax
  6b:	75 43                	jne    b0 <DmxSerialChannelData::Parse(char const*)+0xb0>
  6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  71:	48 89 c7             	mov    %rax,%rdi
  74:	e8 00 00 00 00       	call   79 <DmxSerialChannelData::Parse(char const*)+0x79>
  79:	b9 43 00 00 00       	mov    $0x43,%ecx
  7e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 85 <DmxSerialChannelData::Parse(char const*)+0x85>
  85:	48 89 c2             	mov    %rax,%rdx
  88:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 8f <DmxSerialChannelData::Parse(char const*)+0x8f>
  8f:	48 89 c6             	mov    %rax,%rsi
  92:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 99 <DmxSerialChannelData::Parse(char const*)+0x99>
  99:	48 89 c7             	mov    %rax,%rdi
  9c:	b8 00 00 00 00       	mov    $0x0,%eax
  a1:	e8 00 00 00 00       	call   a6 <DmxSerialChannelData::Parse(char const*)+0xa6>
  a6:	b8 00 00 00 00       	mov    $0x0,%eax
  ab:	e9 80 00 00 00       	jmp    130 <DmxSerialChannelData::Parse(char const*)+0x130>
  b0:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%rbp)
  b7:	eb 15                	jmp    ce <DmxSerialChannelData::Parse(char const*)+0xce>
  b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  bd:	48 89 c7             	mov    %rax,%rdi
  c0:	e8 00 00 00 00       	call   c5 <DmxSerialChannelData::Parse(char const*)+0xc5>
  c5:	89 45 fc             	mov    %eax,-0x4(%rbp)
  c8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  cc:	74 08                	je     d6 <DmxSerialChannelData::Parse(char const*)+0xd6>
  ce:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  d2:	75 e5                	jne    b9 <DmxSerialChannelData::Parse(char const*)+0xb9>
  d4:	eb 01                	jmp    d7 <DmxSerialChannelData::Parse(char const*)+0xd7>
  d6:	90                   	nop
  d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  db:	48 8b 00             	mov    (%rax),%rax
  de:	48 89 c7             	mov    %rax,%rdi
  e1:	e8 00 00 00 00       	call   e6 <DmxSerialChannelData::Parse(char const*)+0xe6>
  e6:	85 c0                	test   %eax,%eax
  e8:	0f 95 c0             	setne  %al
  eb:	84 c0                	test   %al,%al
  ed:	74 0f                	je     fe <DmxSerialChannelData::Parse(char const*)+0xfe>
  ef:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # f6 <DmxSerialChannelData::Parse(char const*)+0xf6>
  f6:	48 89 c7             	mov    %rax,%rdi
  f9:	e8 00 00 00 00       	call   fe <DmxSerialChannelData::Parse(char const*)+0xfe>
  fe:	b9 55 00 00 00       	mov    $0x55,%ecx
 103:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 10a <DmxSerialChannelData::Parse(char const*)+0x10a>
 10a:	48 89 c2             	mov    %rax,%rdx
 10d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 114 <DmxSerialChannelData::Parse(char const*)+0x114>
 114:	48 89 c6             	mov    %rax,%rsi
 117:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 11e <DmxSerialChannelData::Parse(char const*)+0x11e>
 11e:	48 89 c7             	mov    %rax,%rdi
 121:	b8 00 00 00 00       	mov    $0x0,%eax
 126:	e8 00 00 00 00       	call   12b <DmxSerialChannelData::Parse(char const*)+0x12b>
 12b:	b8 01 00 00 00       	mov    $0x1,%eax
 130:	c9                   	leave  
 131:	c3                   	ret    

Disassembly of section .text._ZN20DmxSerialChannelData7GetDataEhRj:

0000000000000000 <DmxSerialChannelData::GetData(unsigned char, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 63 d2             	movslq %edx,%rdx
  20:	48 83 c2 42          	add    $0x42,%rdx
  24:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  28:	48 85 c0             	test   %rax,%rax
  2b:	74 2d                	je     5a <DmxSerialChannelData::GetData(unsigned char, unsigned int&)+0x5a>
  2d:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  31:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  35:	48 98                	cltq   
  37:	0f b6 44 02 09       	movzbl 0x9(%rdx,%rax,1),%eax
  3c:	0f b6 d0             	movzbl %al,%edx
  3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43:	89 10                	mov    %edx,(%rax)
  45:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	48 63 d2             	movslq %edx,%rdx
  50:	48 83 c2 42          	add    $0x42,%rdx
  54:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  58:	eb 0f                	jmp    69 <DmxSerialChannelData::GetData(unsigned char, unsigned int&)+0x69>
  5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5e:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  64:	b8 00 00 00 00       	mov    $0x0,%eax
  69:	5d                   	pop    %rbp
  6a:	c3                   	ret    

Disassembly of section .text._ZN20DmxSerialChannelData4DumpEv:

0000000000000000 <DmxSerialChannelData::Dump()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  17:	e9 a0 00 00 00       	jmp    bc <DmxSerialChannelData::Dump()+0xbc>
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	8b 55 f8             	mov    -0x8(%rbp),%edx
  23:	48 83 c2 42          	add    $0x42,%rdx
  27:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  2b:	48 85 c0             	test   %rax,%rax
  2e:	0f 84 84 00 00 00    	je     b8 <DmxSerialChannelData::Dump()+0xb8>
  34:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  38:	8b 45 f8             	mov    -0x8(%rbp),%eax
  3b:	0f b6 44 02 09       	movzbl 0x9(%rdx,%rax,1),%eax
  40:	0f b6 d0             	movzbl %al,%edx
  43:	8b 45 f8             	mov    -0x8(%rbp),%eax
  46:	89 c6                	mov    %eax,%esi
  48:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 4f <DmxSerialChannelData::Dump()+0x4f>
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	b8 00 00 00 00       	mov    $0x0,%eax
  57:	e8 00 00 00 00       	call   5c <DmxSerialChannelData::Dump()+0x5c>
  5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  63:	eb 35                	jmp    9a <DmxSerialChannelData::Dump()+0x9a>
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	8b 55 f8             	mov    -0x8(%rbp),%edx
  6c:	48 83 c2 42          	add    $0x42,%rdx
  70:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx
  74:	8b 45 fc             	mov    -0x4(%rbp),%eax
  77:	48 01 d0             	add    %rdx,%rax
  7a:	0f b6 00             	movzbl (%rax),%eax
  7d:	0f b6 c0             	movzbl %al,%eax
  80:	89 c6                	mov    %eax,%esi
  82:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 89 <DmxSerialChannelData::Dump()+0x89>
  89:	48 89 c7             	mov    %rax,%rdi
  8c:	b8 00 00 00 00       	mov    $0x0,%eax
  91:	e8 00 00 00 00       	call   96 <DmxSerialChannelData::Dump()+0x96>
  96:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  9a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  9e:	8b 45 f8             	mov    -0x8(%rbp),%eax
  a1:	0f b6 44 02 09       	movzbl 0x9(%rdx,%rax,1),%eax
  a6:	0f b6 c0             	movzbl %al,%eax
  a9:	39 45 fc             	cmp    %eax,-0x4(%rbp)
  ac:	72 b7                	jb     65 <DmxSerialChannelData::Dump()+0x65>
  ae:	bf 0a 00 00 00       	mov    $0xa,%edi
  b3:	e8 00 00 00 00       	call   b8 <DmxSerialChannelData::Dump()+0xb8>
  b8:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  bc:	81 7d f8 ff 01 00 00 	cmpl   $0x1ff,-0x8(%rbp)
  c3:	0f 86 53 ff ff ff    	jbe    1c <DmxSerialChannelData::Dump()+0x1c>
  c9:	90                   	nop
  ca:	90                   	nop
  cb:	c9                   	leave  
  cc:	c3                   	ret    

Disassembly of section .text._ZN20DmxSerialChannelData11GetNextLineEv:

0000000000000000 <DmxSerialChannelData::GetNextLine()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 89 c2             	mov    %rax,%rdx
  1a:	be ff 07 00 00       	mov    $0x7ff,%esi
  1f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26 <DmxSerialChannelData::GetNextLine()+0x26>
  26:	48 89 c7             	mov    %rax,%rdi
  29:	e8 00 00 00 00       	call   2e <DmxSerialChannelData::GetNextLine()+0x2e>
  2e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 35 <DmxSerialChannelData::GetNextLine()+0x35>
  35:	48 39 d0             	cmp    %rdx,%rax
  38:	0f 95 c0             	setne  %al
  3b:	84 c0                	test   %al,%al
  3d:	74 07                	je     46 <DmxSerialChannelData::GetNextLine()+0x46>
  3f:	b8 03 00 00 00       	mov    $0x3,%eax
  44:	eb 37                	jmp    7d <DmxSerialChannelData::GetNextLine()+0x7d>
  46:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 4d <DmxSerialChannelData::GetNextLine()+0x4d>
  4d:	0f be c0             	movsbl %al,%eax
  50:	83 e8 30             	sub    $0x30,%eax
  53:	83 f8 09             	cmp    $0x9,%eax
  56:	0f 96 c0             	setbe  %al
  59:	0f b6 c0             	movzbl %al,%eax
  5c:	85 c0                	test   %eax,%eax
  5e:	74 18                	je     78 <DmxSerialChannelData::GetNextLine()+0x78>
  60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  64:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 6b <DmxSerialChannelData::GetNextLine()+0x6b>
  6b:	48 89 d6             	mov    %rdx,%rsi
  6e:	48 89 c7             	mov    %rax,%rdi
  71:	e8 00 00 00 00       	call   76 <DmxSerialChannelData::GetNextLine()+0x76>
  76:	eb 05                	jmp    7d <DmxSerialChannelData::GetNextLine()+0x7d>
  78:	b8 02 00 00 00       	mov    $0x2,%eax
  7d:	c9                   	leave  
  7e:	c3                   	ret    

Disassembly of section .text._ZN20DmxSerialChannelData9ParseLineEPKc:

0000000000000000 <DmxSerialChannelData::ParseLine(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  19:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  24:	eb 25                	jmp    4b <DmxSerialChannelData::ParseLine(char const*)+0x4b>
  26:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  29:	89 d0                	mov    %edx,%eax
  2b:	c1 e0 02             	shl    $0x2,%eax
  2e:	01 d0                	add    %edx,%eax
  30:	01 c0                	add    %eax,%eax
  32:	89 c2                	mov    %eax,%edx
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	0f b6 00             	movzbl (%rax),%eax
  3b:	0f be c0             	movsbl %al,%eax
  3e:	01 d0                	add    %edx,%eax
  40:	83 e8 30             	sub    $0x30,%eax
  43:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  46:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4f:	0f b6 00             	movzbl (%rax),%eax
  52:	0f be c0             	movsbl %al,%eax
  55:	83 e8 30             	sub    $0x30,%eax
  58:	83 f8 09             	cmp    $0x9,%eax
  5b:	0f 96 c0             	setbe  %al
  5e:	0f b6 c0             	movzbl %al,%eax
  61:	83 f8 01             	cmp    $0x1,%eax
  64:	74 c0                	je     26 <DmxSerialChannelData::ParseLine(char const*)+0x26>
  66:	81 7d e4 ff 00 00 00 	cmpl   $0xff,-0x1c(%rbp)
  6d:	7e 07                	jle    76 <DmxSerialChannelData::ParseLine(char const*)+0x76>
  6f:	b8 00 00 00 00       	mov    $0x0,%eax
  74:	eb 65                	jmp    db <DmxSerialChannelData::ParseLine(char const*)+0xdb>
  76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7a:	48 8d 50 01          	lea    0x1(%rax),%rdx
  7e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  82:	0f b6 00             	movzbl (%rax),%eax
  85:	3c 20                	cmp    $0x20,%al
  87:	0f 94 c0             	sete   %al
  8a:	84 c0                	test   %al,%al
  8c:	74 48                	je     d6 <DmxSerialChannelData::ParseLine(char const*)+0xd6>
  8e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  91:	89 c2                	mov    %eax,%edx
  93:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  97:	88 50 08             	mov    %dl,0x8(%rax)
  9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9e:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  a2:	0f b6 d8             	movzbl %al,%ebx
  a5:	bf 40 00 00 00       	mov    $0x40,%edi
  aa:	e8 00 00 00 00       	call   af <DmxSerialChannelData::ParseLine(char const*)+0xaf>
  af:	48 89 c1             	mov    %rax,%rcx
  b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b6:	48 63 d3             	movslq %ebx,%rdx
  b9:	48 83 c2 42          	add    $0x42,%rdx
  bd:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  c1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c9:	48 89 d6             	mov    %rdx,%rsi
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	call   d4 <DmxSerialChannelData::ParseLine(char const*)+0xd4>
  d4:	eb 05                	jmp    db <DmxSerialChannelData::ParseLine(char const*)+0xdb>
  d6:	b8 00 00 00 00       	mov    $0x0,%eax
  db:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  df:	c9                   	leave  
  e0:	c3                   	ret    

Disassembly of section .text._ZN20DmxSerialChannelData15ParseSerialDataEPKc:

0000000000000000 <DmxSerialChannelData::ParseSerialData(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  14:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  1c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  23:	00 
  24:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  2b:	e9 07 01 00 00       	jmp    137 <DmxSerialChannelData::ParseSerialData(char const*)+0x137>
  30:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  34:	48 89 d0             	mov    %rdx,%rax
  37:	48 c1 e0 02          	shl    $0x2,%rax
  3b:	48 01 d0             	add    %rdx,%rax
  3e:	48 01 c0             	add    %rax,%rax
  41:	48 89 c2             	mov    %rax,%rdx
  44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  48:	0f b6 00             	movzbl (%rax),%eax
  4b:	48 0f be c0          	movsbq %al,%rax
  4f:	48 01 d0             	add    %rdx,%rax
  52:	48 83 e8 30          	sub    $0x30,%rax
  56:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  5a:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
  61:	00 
  62:	7e 37                	jle    9b <DmxSerialChannelData::ParseSerialData(char const*)+0x9b>
  64:	b9 9c 00 00 00       	mov    $0x9c,%ecx
  69:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 70 <DmxSerialChannelData::ParseSerialData(char const*)+0x70>
  70:	48 89 c2             	mov    %rax,%rdx
  73:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7a <DmxSerialChannelData::ParseSerialData(char const*)+0x7a>
  7a:	48 89 c6             	mov    %rax,%rsi
  7d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 84 <DmxSerialChannelData::ParseSerialData(char const*)+0x84>
  84:	48 89 c7             	mov    %rax,%rdi
  87:	b8 00 00 00 00       	mov    $0x0,%eax
  8c:	e8 00 00 00 00       	call   91 <DmxSerialChannelData::ParseSerialData(char const*)+0x91>
  91:	b8 00 00 00 00       	mov    $0x0,%eax
  96:	e9 dd 00 00 00       	jmp    178 <DmxSerialChannelData::ParseSerialData(char const*)+0x178>
  9b:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  a4:	0f b6 00             	movzbl (%rax),%eax
  a7:	3c 2c                	cmp    $0x2c,%al
  a9:	74 12                	je     bd <DmxSerialChannelData::ParseSerialData(char const*)+0xbd>
  ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  af:	0f b6 00             	movzbl (%rax),%eax
  b2:	0f be c0             	movsbl %al,%eax
  b5:	83 e8 30             	sub    $0x30,%eax
  b8:	83 f8 09             	cmp    $0x9,%eax
  bb:	76 7a                	jbe    137 <DmxSerialChannelData::ParseSerialData(char const*)+0x137>
  bd:	81 7d ec 00 02 00 00 	cmpl   $0x200,-0x14(%rbp)
  c4:	76 34                	jbe    fa <DmxSerialChannelData::ParseSerialData(char const*)+0xfa>
  c6:	b9 a5 00 00 00       	mov    $0xa5,%ecx
  cb:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d2 <DmxSerialChannelData::ParseSerialData(char const*)+0xd2>
  d2:	48 89 c2             	mov    %rax,%rdx
  d5:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # dc <DmxSerialChannelData::ParseSerialData(char const*)+0xdc>
  dc:	48 89 c6             	mov    %rax,%rsi
  df:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # e6 <DmxSerialChannelData::ParseSerialData(char const*)+0xe6>
  e6:	48 89 c7             	mov    %rax,%rdi
  e9:	b8 00 00 00 00       	mov    $0x0,%eax
  ee:	e8 00 00 00 00       	call   f3 <DmxSerialChannelData::ParseSerialData(char const*)+0xf3>
  f3:	b8 00 00 00 00       	mov    $0x0,%eax
  f8:	eb 7e                	jmp    178 <DmxSerialChannelData::ParseSerialData(char const*)+0x178>
  fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  fe:	0f b6 40 08          	movzbl 0x8(%rax),%eax
 102:	0f b6 d0             	movzbl %al,%edx
 105:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 109:	48 63 d2             	movslq %edx,%rdx
 10c:	48 83 c2 42          	add    $0x42,%rdx
 110:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx
 114:	8b 45 ec             	mov    -0x14(%rbp),%eax
 117:	48 01 d0             	add    %rdx,%rax
 11a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 11e:	88 10                	mov    %dl,(%rax)
 120:	83 7d ec 3f          	cmpl   $0x3f,-0x14(%rbp)
 124:	74 32                	je     158 <DmxSerialChannelData::ParseSerialData(char const*)+0x158>
 126:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
 12d:	00 
 12e:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
 132:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
 137:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 13b:	0f b6 00             	movzbl (%rax),%eax
 13e:	0f be c0             	movsbl %al,%eax
 141:	83 e8 30             	sub    $0x30,%eax
 144:	83 f8 09             	cmp    $0x9,%eax
 147:	0f 96 c0             	setbe  %al
 14a:	0f b6 c0             	movzbl %al,%eax
 14d:	83 f8 01             	cmp    $0x1,%eax
 150:	0f 84 da fe ff ff    	je     30 <DmxSerialChannelData::ParseSerialData(char const*)+0x30>
 156:	eb 01                	jmp    159 <DmxSerialChannelData::ParseSerialData(char const*)+0x159>
 158:	90                   	nop
 159:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 15d:	0f b6 40 08          	movzbl 0x8(%rax),%eax
 161:	0f b6 c0             	movzbl %al,%eax
 164:	8b 55 ec             	mov    -0x14(%rbp),%edx
 167:	89 d1                	mov    %edx,%ecx
 169:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 16d:	48 98                	cltq   
 16f:	88 4c 02 09          	mov    %cl,0x9(%rdx,%rax,1)
 173:	b8 01 00 00 00       	mov    $0x1,%eax
 178:	c9                   	leave  
 179:	c3                   	ret    

dmxserial.o:     file format elf64-x86-64


Disassembly of section .text._ZN8LightSetC2Ev:

0000000000000000 <LightSet::LightSet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13 <LightSet::LightSet()+0x13>
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	ret    

Disassembly of section .text._ZN8LightSetD2Ev:

0000000000000000 <LightSet::~LightSet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13 <LightSet::~LightSet()+0x13>
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	ret    

Disassembly of section .text._ZN8LightSetD0Ev:

0000000000000000 <LightSet::~LightSet()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <LightSet::~LightSet()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <LightSet::~LightSet()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN8LightSet8BlackoutEb:

0000000000000000 <LightSet::Blackout(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	90                   	nop
  12:	5d                   	pop    %rbp
  13:	c3                   	ret    

Disassembly of section .text._ZN8LightSet6FullOnEv:

0000000000000000 <LightSet::FullOn()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN13DmxSerialTFTPC2Ev:

0000000000000000 <DmxSerialTFTP::DmxSerialTFTP()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <DmxSerialTFTP::DmxSerialTFTP()+0x1c>
  1c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 23 <DmxSerialTFTP::DmxSerialTFTP()+0x23>
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 89 10             	mov    %rdx,(%rax)
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	48 c7 80 48 02 00 00 	movq   $0x0,0x248(%rax)
  35:	00 00 00 00 
  39:	90                   	nop
  3a:	c9                   	leave  
  3b:	c3                   	ret    

Disassembly of section .text._ZN13DmxSerialTFTPD2Ev:

0000000000000000 <DmxSerialTFTP::~DmxSerialTFTP()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 17 <DmxSerialTFTP::~DmxSerialTFTP()+0x17>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <DmxSerialTFTP::~DmxSerialTFTP()+0x2a>
  2a:	90                   	nop
  2b:	c9                   	leave  
  2c:	c3                   	ret    

Disassembly of section .text._ZN13DmxSerialTFTPD0Ev:

0000000000000000 <DmxSerialTFTP::~DmxSerialTFTP()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <DmxSerialTFTP::~DmxSerialTFTP()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <DmxSerialTFTP::~DmxSerialTFTP()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # f <Network::Get()+0xf>
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text._ZN9DmxSerialC2Ev:

0000000000000000 <DmxSerial::DmxSerial()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <DmxSerial::DmxSerial()+0x1c>
  1c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 23 <DmxSerial::DmxSerial()+0x23>
  23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  27:	48 89 10             	mov    %rdx,(%rax)
  2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2e:	48 83 c0 08          	add    $0x8,%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	call   3a <DmxSerial::DmxSerial()+0x3a>
  3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3e:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%rax)
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	c7 80 28 08 00 00 ff 	movl   $0xffffffff,0x828(%rax)
  50:	ff ff ff 
  53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  57:	66 c7 80 30 18 00 00 	movw   $0x200,0x1830(%rax)
  5e:	00 02 
  60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  64:	c6 80 32 1a 00 00 00 	movb   $0x0,0x1a32(%rax)
  6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6f:	48 c7 80 38 1a 00 00 	movq   $0x0,0x1a38(%rax)
  76:	00 00 00 00 
  7a:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 81 <DmxSerial::DmxSerial()+0x81>
  81:	48 85 c0             	test   %rax,%rax
  84:	74 28                	je     ae <DmxSerial::DmxSerial()+0xae>
  86:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 8d <DmxSerial::DmxSerial()+0x8d>
  8d:	48 89 c1             	mov    %rax,%rcx
  90:	ba 2e 00 00 00       	mov    $0x2e,%edx
  95:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 9c <DmxSerial::DmxSerial()+0x9c>
  9c:	48 89 c6             	mov    %rax,%rsi
  9f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # a6 <DmxSerial::DmxSerial()+0xa6>
  a6:	48 89 c7             	mov    %rax,%rdi
  a9:	e8 00 00 00 00       	call   ae <DmxSerial::DmxSerial()+0xae>
  ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b2:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # b9 <DmxSerial::DmxSerial()+0xb9>
  b9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  c0:	eb 2d                	jmp    ef <DmxSerial::DmxSerial()+0xef>
  c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c6:	8b 55 fc             	mov    -0x4(%rbp),%edx
  c9:	48 83 c2 08          	add    $0x8,%rdx
  cd:	c7 44 90 08 ff ff ff 	movl   $0xffffffff,0x8(%rax,%rdx,4)
  d4:	ff 
  d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  dc:	48 81 c2 06 01 00 00 	add    $0x106,%rdx
  e3:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  ea:	00 
  eb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  ef:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%rbp)
  f6:	76 ca                	jbe    c2 <DmxSerial::DmxSerial()+0xc2>
  f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fc:	48 05 32 18 00 00    	add    $0x1832,%rax
 102:	ba 00 02 00 00       	mov    $0x200,%edx
 107:	be 00 00 00 00       	mov    $0x0,%esi
 10c:	48 89 c7             	mov    %rax,%rdi
 10f:	e8 00 00 00 00       	call   114 <DmxSerial::DmxSerial()+0x114>
 114:	90                   	nop
 115:	c9                   	leave  
 116:	c3                   	ret    

Disassembly of section .text._ZN9DmxSerialD2Ev:

0000000000000000 <DmxSerial::~DmxSerial()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 18 <DmxSerial::~DmxSerial()+0x18>
  18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1c:	48 89 10             	mov    %rdx,(%rax)
  1f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  26:	eb 42                	jmp    6a <DmxSerial::~DmxSerial()+0x6a>
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  2f:	48 81 c2 06 01 00 00 	add    $0x106,%rdx
  36:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  3a:	48 85 c0             	test   %rax,%rax
  3d:	74 27                	je     66 <DmxSerial::~DmxSerial()+0x66>
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43:	8b 55 ec             	mov    -0x14(%rbp),%edx
  46:	48 81 c2 06 01 00 00 	add    $0x106,%rdx
  4d:	48 8b 1c d0          	mov    (%rax,%rdx,8),%rbx
  51:	48 85 db             	test   %rbx,%rbx
  54:	74 10                	je     66 <DmxSerial::~DmxSerial()+0x66>
  56:	48 89 df             	mov    %rbx,%rdi
  59:	e8 00 00 00 00       	call   5e <DmxSerial::~DmxSerial()+0x5e>
  5e:	48 89 df             	mov    %rbx,%rdi
  61:	e8 00 00 00 00       	call   66 <DmxSerial::~DmxSerial()+0x66>
  66:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6e:	8b 40 24             	mov    0x24(%rax),%eax
  71:	39 45 ec             	cmp    %eax,-0x14(%rbp)
  74:	72 b2                	jb     28 <DmxSerial::~DmxSerial()+0x28>
  76:	e8 00 00 00 00       	call   7b <DmxSerial::~DmxSerial()+0x7b>
  7b:	be 56 41 00 00       	mov    $0x4156,%esi
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	call   88 <DmxSerial::~DmxSerial()+0x88>
  88:	48 c7 05 00 00 00 00 	movq   $0x0,0x0(%rip)        # 93 <DmxSerial::~DmxSerial()+0x93>
  8f:	00 00 00 00 
  93:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  97:	48 83 c0 08          	add    $0x8,%rax
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	call   a3 <DmxSerial::~DmxSerial()+0xa3>
  a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a7:	48 89 c7             	mov    %rax,%rdi
  aa:	e8 00 00 00 00       	call   af <DmxSerial::~DmxSerial()+0xaf>
  af:	90                   	nop
  b0:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  b4:	c9                   	leave  
  b5:	c3                   	ret    

Disassembly of section .text._ZN9DmxSerialD0Ev:

0000000000000000 <DmxSerial::~DmxSerial()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <DmxSerial::~DmxSerial()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <DmxSerial::~DmxSerial()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN9DmxSerial4InitEv:

0000000000000000 <DmxSerial::Init()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	e8 00 00 00 00       	call   15 <DmxSerial::Init()+0x15>
  15:	be 56 41 00 00       	mov    $0x4156,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	call   22 <DmxSerial::Init()+0x22>
  22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  26:	89 82 28 08 00 00    	mov    %eax,0x828(%rdx)
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	8b 80 28 08 00 00    	mov    0x828(%rax),%eax
  36:	83 f8 ff             	cmp    $0xffffffff,%eax
  39:	75 28                	jne    63 <DmxSerial::Init()+0x63>
  3b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 42 <DmxSerial::Init()+0x42>
  42:	48 89 c1             	mov    %rax,%rcx
  45:	ba 48 00 00 00       	mov    $0x48,%edx
  4a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 51 <DmxSerial::Init()+0x51>
  51:	48 89 c6             	mov    %rax,%rsi
  54:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 5b <DmxSerial::Init()+0x5b>
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	call   63 <DmxSerial::Init()+0x63>
  63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	call   6f <DmxSerial::Init()+0x6f>
  6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  73:	48 83 c0 08          	add    $0x8,%rax
  77:	48 89 c7             	mov    %rax,%rdi
  7a:	e8 00 00 00 00       	call   7f <DmxSerial::Init()+0x7f>
  7f:	90                   	nop
  80:	c9                   	leave  
  81:	c3                   	ret    

Disassembly of section .text._ZN9DmxSerial5StartEj:

0000000000000000 <DmxSerial::Start(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	90                   	nop
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text._ZN9DmxSerial4StopEj:

0000000000000000 <DmxSerial::Stop(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	90                   	nop
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text._ZN9DmxSerial7SetDataEjPKhj:

0000000000000000 <DmxSerial::SetData(unsigned int, unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  13:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  17:	89 4d d0             	mov    %ecx,-0x30(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  30:	e9 d6 00 00 00       	jmp    10b <DmxSerial::SetData(unsigned int, unsigned char const*, unsigned int)+0x10b>
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	8b 55 e8             	mov    -0x18(%rbp),%edx
  3c:	48 83 c2 08          	add    $0x8,%rdx
  40:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
  44:	83 e8 01             	sub    $0x1,%eax
  47:	89 45 ec             	mov    %eax,-0x14(%rbp)
  4a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  51:	48 98                	cltq   
  53:	0f b6 94 02 32 18 00 	movzbl 0x1832(%rdx,%rax,1),%edx
  5a:	00 
  5b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  5e:	48 63 c8             	movslq %eax,%rcx
  61:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  65:	48 01 c8             	add    %rcx,%rax
  68:	0f b6 00             	movzbl (%rax),%eax
  6b:	38 c2                	cmp    %al,%dl
  6d:	0f 84 94 00 00 00    	je     107 <DmxSerial::SetData(unsigned int, unsigned char const*, unsigned int)+0x107>
  73:	8b 45 ec             	mov    -0x14(%rbp),%eax
  76:	48 63 d0             	movslq %eax,%rdx
  79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7d:	48 01 d0             	add    %rdx,%rax
  80:	0f b6 08             	movzbl (%rax),%ecx
  83:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  87:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8a:	48 98                	cltq   
  8c:	88 8c 02 32 18 00 00 	mov    %cl,0x1832(%rdx,%rax,1)
  93:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  97:	8b 55 e8             	mov    -0x18(%rbp),%edx
  9a:	48 81 c2 06 01 00 00 	add    $0x106,%rdx
  a1:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  a5:	48 85 c0             	test   %rax,%rax
  a8:	74 5d                	je     107 <DmxSerial::SetData(unsigned int, unsigned char const*, unsigned int)+0x107>
  aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ae:	8b 55 e8             	mov    -0x18(%rbp),%edx
  b1:	48 81 c2 06 01 00 00 	add    $0x106,%rdx
  b8:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  bc:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  c0:	8b 55 ec             	mov    -0x14(%rbp),%edx
  c3:	48 63 d2             	movslq %edx,%rdx
  c6:	0f b6 94 11 32 18 00 	movzbl 0x1832(%rcx,%rdx,1),%edx
  cd:	00 
  ce:	0f b6 ca             	movzbl %dl,%ecx
  d1:	48 8d 55 e4          	lea    -0x1c(%rbp),%rdx
  d5:	89 ce                	mov    %ecx,%esi
  d7:	48 89 c7             	mov    %rax,%rdi
  da:	e8 00 00 00 00       	call   df <DmxSerial::SetData(unsigned int, unsigned char const*, unsigned int)+0xdf>
  df:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  e3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  e6:	85 c0                	test   %eax,%eax
  e8:	74 1c                	je     106 <DmxSerial::SetData(unsigned int, unsigned char const*, unsigned int)+0x106>
  ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ee:	48 8d 48 08          	lea    0x8(%rax),%rcx
  f2:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  f9:	48 89 c6             	mov    %rax,%rsi
  fc:	48 89 cf             	mov    %rcx,%rdi
  ff:	e8 00 00 00 00       	call   104 <DmxSerial::SetData(unsigned int, unsigned char const*, unsigned int)+0x104>
 104:	eb 01                	jmp    107 <DmxSerial::SetData(unsigned int, unsigned char const*, unsigned int)+0x107>
 106:	90                   	nop
 107:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
 10b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 10f:	8b 40 24             	mov    0x24(%rax),%eax
 112:	39 45 e8             	cmp    %eax,-0x18(%rbp)
 115:	0f 82 1a ff ff ff    	jb     35 <DmxSerial::SetData(unsigned int, unsigned char const*, unsigned int)+0x35>
 11b:	90                   	nop
 11c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 120:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 127:	00 00 
 129:	74 05                	je     130 <DmxSerial::SetData(unsigned int, unsigned char const*, unsigned int)+0x130>
 12b:	e8 00 00 00 00       	call   130 <DmxSerial::SetData(unsigned int, unsigned char const*, unsigned int)+0x130>
 130:	c9                   	leave  
 131:	c3                   	ret    

Disassembly of section .text._ZN9DmxSerial5PrintEv:

0000000000000000 <DmxSerial::Print()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 83 c0 08          	add    $0x8,%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	call   20 <DmxSerial::Print()+0x20>
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	8b 40 24             	mov    0x24(%rax),%eax
  27:	89 c6                	mov    %eax,%esi
  29:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 30 <DmxSerial::Print()+0x30>
  30:	48 89 c7             	mov    %rax,%rdi
  33:	b8 00 00 00 00       	mov    $0x0,%eax
  38:	e8 00 00 00 00       	call   3d <DmxSerial::Print()+0x3d>
  3d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 44 <DmxSerial::Print()+0x44>
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	call   4c <DmxSerial::Print()+0x4c>
  4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  50:	8b 40 28             	mov    0x28(%rax),%eax
  53:	89 c6                	mov    %eax,%esi
  55:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 5c <DmxSerial::Print()+0x5c>
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	b8 00 00 00 00       	mov    $0x0,%eax
  64:	e8 00 00 00 00       	call   69 <DmxSerial::Print()+0x69>
  69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6d:	0f b7 80 30 18 00 00 	movzwl 0x1830(%rax),%eax
  74:	0f b7 c0             	movzwl %ax,%eax
  77:	89 c6                	mov    %eax,%esi
  79:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 80 <DmxSerial::Print()+0x80>
  80:	48 89 c7             	mov    %rax,%rdi
  83:	b8 00 00 00 00       	mov    $0x0,%eax
  88:	e8 00 00 00 00       	call   8d <DmxSerial::Print()+0x8d>
  8d:	90                   	nop
  8e:	c9                   	leave  
  8f:	c3                   	ret    

Disassembly of section .text._ZN9DmxSerial13ScanDirectoryEv:

0000000000000000 <DmxSerial::ScanDirectory()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 68          	sub    $0x68,%rsp
   d:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  24:	48 8b 80 30 08 00 00 	mov    0x830(%rax),%rax
  2b:	48 85 c0             	test   %rax,%rax
  2e:	74 28                	je     58 <DmxSerial::ScanDirectory()+0x58>
  30:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 37 <DmxSerial::ScanDirectory()+0x37>
  37:	48 89 c1             	mov    %rax,%rcx
  3a:	ba 79 00 00 00       	mov    $0x79,%edx
  3f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 46 <DmxSerial::ScanDirectory()+0x46>
  46:	48 89 c6             	mov    %rax,%rsi
  49:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 50 <DmxSerial::ScanDirectory()+0x50>
  50:	48 89 c7             	mov    %rax,%rdi
  53:	e8 00 00 00 00       	call   58 <DmxSerial::ScanDirectory()+0x58>
  58:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  5c:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%rax)
  63:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 6a <DmxSerial::ScanDirectory()+0x6a>
  6a:	48 89 c7             	mov    %rax,%rdi
  6d:	e8 00 00 00 00       	call   72 <DmxSerial::ScanDirectory()+0x72>
  72:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  76:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  7b:	0f 94 c0             	sete   %al
  7e:	84 c0                	test   %al,%al
  80:	74 3d                	je     bf <DmxSerial::ScanDirectory()+0xbf>
  82:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 89 <DmxSerial::ScanDirectory()+0x89>
  89:	48 89 c7             	mov    %rax,%rdi
  8c:	e8 00 00 00 00       	call   91 <DmxSerial::ScanDirectory()+0x91>
  91:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%rbp)
  98:	eb 17                	jmp    b1 <DmxSerial::ScanDirectory()+0xb1>
  9a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  9e:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  a1:	48 83 c2 08          	add    $0x8,%rdx
  a5:	c7 44 90 08 ff ff ff 	movl   $0xffffffff,0x8(%rax,%rdx,4)
  ac:	ff 
  ad:	83 45 a4 01          	addl   $0x1,-0x5c(%rbp)
  b1:	81 7d a4 ff 01 00 00 	cmpl   $0x1ff,-0x5c(%rbp)
  b8:	76 e0                	jbe    9a <DmxSerial::ScanDirectory()+0x9a>
  ba:	e9 92 03 00 00       	jmp    451 <DmxSerial::ScanDirectory()+0x451>
  bf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	call   cb <DmxSerial::ScanDirectory()+0xcb>
  cb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  cf:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  d4:	0f 95 c0             	setne  %al
  d7:	84 c0                	test   %al,%al
  d9:	0f 84 bc 00 00 00    	je     19b <DmxSerial::ScanDirectory()+0x19b>
  df:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  e3:	0f b6 40 12          	movzbl 0x12(%rax),%eax
  e7:	3c 04                	cmp    $0x4,%al
  e9:	0f 84 a8 00 00 00    	je     197 <DmxSerial::ScanDirectory()+0x197>
  ef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  f3:	48 8d 50 13          	lea    0x13(%rax),%rdx
  f7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  fb:	48 89 c6             	mov    %rax,%rsi
  fe:	48 89 d7             	mov    %rdx,%rdi
 101:	e8 00 00 00 00       	call   106 <DmxSerial::ScanDirectory()+0x106>
 106:	83 f0 01             	xor    $0x1,%eax
 109:	84 c0                	test   %al,%al
 10b:	0f 85 89 00 00 00    	jne    19a <DmxSerial::ScanDirectory()+0x19a>
 111:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 115:	8b 48 24             	mov    0x24(%rax),%ecx
 118:	8b 55 a0             	mov    -0x60(%rbp),%edx
 11b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 11f:	89 c9                	mov    %ecx,%ecx
 121:	48 83 c1 08          	add    $0x8,%rcx
 125:	89 54 88 08          	mov    %edx,0x8(%rax,%rcx,4)
 129:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 12d:	48 8d 50 13          	lea    0x13(%rax),%rdx
 131:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 135:	8b 48 24             	mov    0x24(%rax),%ecx
 138:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 13f <DmxSerial::ScanDirectory()+0x13f>
 13f:	48 83 ec 08          	sub    $0x8,%rsp
 143:	52                   	push   %rdx
 144:	41 89 c9             	mov    %ecx,%r9d
 147:	41 b8 96 00 00 00    	mov    $0x96,%r8d
 14d:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 154 <DmxSerial::ScanDirectory()+0x154>
 154:	48 89 d1             	mov    %rdx,%rcx
 157:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 15e <DmxSerial::ScanDirectory()+0x15e>
 15e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 165 <DmxSerial::ScanDirectory()+0x165>
 165:	48 89 c7             	mov    %rax,%rdi
 168:	b8 00 00 00 00       	mov    $0x0,%eax
 16d:	e8 00 00 00 00       	call   172 <DmxSerial::ScanDirectory()+0x172>
 172:	48 83 c4 10          	add    $0x10,%rsp
 176:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 17a:	8b 40 24             	mov    0x24(%rax),%eax
 17d:	8d 50 01             	lea    0x1(%rax),%edx
 180:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 184:	89 50 24             	mov    %edx,0x24(%rax)
 187:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 18b:	8b 40 24             	mov    0x24(%rax),%eax
 18e:	3d 00 02 00 00       	cmp    $0x200,%eax
 193:	74 13                	je     1a8 <DmxSerial::ScanDirectory()+0x1a8>
 195:	eb 04                	jmp    19b <DmxSerial::ScanDirectory()+0x19b>
 197:	90                   	nop
 198:	eb 01                	jmp    19b <DmxSerial::ScanDirectory()+0x19b>
 19a:	90                   	nop
 19b:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
 1a0:	0f 85 19 ff ff ff    	jne    bf <DmxSerial::ScanDirectory()+0xbf>
 1a6:	eb 01                	jmp    1a9 <DmxSerial::ScanDirectory()+0x1a9>
 1a8:	90                   	nop
 1a9:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
 1b0:	e9 81 00 00 00       	jmp    236 <DmxSerial::ScanDirectory()+0x236>
 1b5:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%rbp)
 1bc:	eb 68                	jmp    226 <DmxSerial::ScanDirectory()+0x226>
 1be:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 1c2:	8b 55 ac             	mov    -0x54(%rbp),%edx
 1c5:	48 83 c2 08          	add    $0x8,%rdx
 1c9:	8b 54 90 08          	mov    0x8(%rax,%rdx,4),%edx
 1cd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 1d1:	8b 4d a8             	mov    -0x58(%rbp),%ecx
 1d4:	48 83 c1 08          	add    $0x8,%rcx
 1d8:	8b 44 88 08          	mov    0x8(%rax,%rcx,4),%eax
 1dc:	39 c2                	cmp    %eax,%edx
 1de:	7e 42                	jle    222 <DmxSerial::ScanDirectory()+0x222>
 1e0:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 1e4:	8b 55 a8             	mov    -0x58(%rbp),%edx
 1e7:	48 83 c2 08          	add    $0x8,%rdx
 1eb:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
 1ef:	89 45 bc             	mov    %eax,-0x44(%rbp)
 1f2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 1f6:	8b 55 ac             	mov    -0x54(%rbp),%edx
 1f9:	48 83 c2 08          	add    $0x8,%rdx
 1fd:	8b 54 90 08          	mov    0x8(%rax,%rdx,4),%edx
 201:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 205:	8b 4d a8             	mov    -0x58(%rbp),%ecx
 208:	48 83 c1 08          	add    $0x8,%rcx
 20c:	89 54 88 08          	mov    %edx,0x8(%rax,%rcx,4)
 210:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 214:	8b 55 ac             	mov    -0x54(%rbp),%edx
 217:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
 21b:	8b 55 bc             	mov    -0x44(%rbp),%edx
 21e:	89 54 88 08          	mov    %edx,0x8(%rax,%rcx,4)
 222:	83 45 ac 01          	addl   $0x1,-0x54(%rbp)
 226:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 22a:	8b 40 24             	mov    0x24(%rax),%eax
 22d:	39 45 ac             	cmp    %eax,-0x54(%rbp)
 230:	72 8c                	jb     1be <DmxSerial::ScanDirectory()+0x1be>
 232:	83 45 a8 01          	addl   $0x1,-0x58(%rbp)
 236:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 23a:	8b 40 24             	mov    0x24(%rax),%eax
 23d:	39 45 a8             	cmp    %eax,-0x58(%rbp)
 240:	0f 82 6f ff ff ff    	jb     1b5 <DmxSerial::ScanDirectory()+0x1b5>
 246:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 24a:	8b 40 24             	mov    0x24(%rax),%eax
 24d:	8d 50 ff             	lea    -0x1(%rax),%edx
 250:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 254:	89 d2                	mov    %edx,%edx
 256:	48 83 c2 08          	add    $0x8,%rdx
 25a:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
 25e:	89 c2                	mov    %eax,%edx
 260:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 264:	66 89 90 30 18 00 00 	mov    %dx,0x1830(%rax)
 26b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 26f:	8b 40 24             	mov    0x24(%rax),%eax
 272:	89 45 b0             	mov    %eax,-0x50(%rbp)
 275:	eb 17                	jmp    28e <DmxSerial::ScanDirectory()+0x28e>
 277:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 27b:	8b 55 b0             	mov    -0x50(%rbp),%edx
 27e:	48 83 c2 08          	add    $0x8,%rdx
 282:	c7 44 90 08 ff ff ff 	movl   $0xffffffff,0x8(%rax,%rdx,4)
 289:	ff 
 28a:	83 45 b0 01          	addl   $0x1,-0x50(%rbp)
 28e:	81 7d b0 ff 01 00 00 	cmpl   $0x1ff,-0x50(%rbp)
 295:	76 e0                	jbe    277 <DmxSerial::ScanDirectory()+0x277>
 297:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
 29b:	48 89 c7             	mov    %rax,%rdi
 29e:	e8 00 00 00 00       	call   2a3 <DmxSerial::ScanDirectory()+0x2a3>
 2a3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 2a7:	8b 40 24             	mov    0x24(%rax),%eax
 2aa:	89 c6                	mov    %eax,%esi
 2ac:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2b3 <DmxSerial::ScanDirectory()+0x2b3>
 2b3:	48 89 c7             	mov    %rax,%rdi
 2b6:	b8 00 00 00 00       	mov    $0x0,%eax
 2bb:	e8 00 00 00 00       	call   2c0 <DmxSerial::ScanDirectory()+0x2c0>
 2c0:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
 2c7:	e9 1a 01 00 00       	jmp    3e6 <DmxSerial::ScanDirectory()+0x3e6>
 2cc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 2d0:	8b 55 b4             	mov    -0x4c(%rbp),%edx
 2d3:	48 83 c2 08          	add    $0x8,%rdx
 2d7:	8b 54 90 08          	mov    0x8(%rax,%rdx,4),%edx
 2db:	8b 45 b4             	mov    -0x4c(%rbp),%eax
 2de:	89 c6                	mov    %eax,%esi
 2e0:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2e7 <DmxSerial::ScanDirectory()+0x2e7>
 2e7:	48 89 c7             	mov    %rax,%rdi
 2ea:	b8 00 00 00 00       	mov    $0x0,%eax
 2ef:	e8 00 00 00 00       	call   2f4 <DmxSerial::ScanDirectory()+0x2f4>
 2f4:	bf 10 12 00 00       	mov    $0x1210,%edi
 2f9:	e8 00 00 00 00       	call   2fe <DmxSerial::ScanDirectory()+0x2fe>
 2fe:	48 89 c3             	mov    %rax,%rbx
 301:	48 89 df             	mov    %rbx,%rdi
 304:	e8 00 00 00 00       	call   309 <DmxSerial::ScanDirectory()+0x309>
 309:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 30d:	8b 55 b4             	mov    -0x4c(%rbp),%edx
 310:	48 81 c2 06 01 00 00 	add    $0x106,%rdx
 317:	48 89 1c d0          	mov    %rbx,(%rax,%rdx,8)
 31b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 31f:	8b 55 b4             	mov    -0x4c(%rbp),%edx
 322:	48 81 c2 06 01 00 00 	add    $0x106,%rdx
 329:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
 32d:	48 85 c0             	test   %rax,%rax
 330:	75 28                	jne    35a <DmxSerial::ScanDirectory()+0x35a>
 332:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 339 <DmxSerial::ScanDirectory()+0x339>
 339:	48 89 c1             	mov    %rax,%rcx
 33c:	ba bd 00 00 00       	mov    $0xbd,%edx
 341:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 348 <DmxSerial::ScanDirectory()+0x348>
 348:	48 89 c6             	mov    %rax,%rsi
 34b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 352 <DmxSerial::ScanDirectory()+0x352>
 352:	48 89 c7             	mov    %rax,%rdi
 355:	e8 00 00 00 00       	call   35a <DmxSerial::ScanDirectory()+0x35a>
 35a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 35e:	8b 55 b4             	mov    -0x4c(%rbp),%edx
 361:	48 83 c2 08          	add    $0x8,%rdx
 365:	8b 54 90 08          	mov    0x8(%rax,%rdx,4),%edx
 369:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 36d:	89 d1                	mov    %edx,%ecx
 36f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 376 <DmxSerial::ScanDirectory()+0x376>
 376:	be 0f 00 00 00       	mov    $0xf,%esi
 37b:	48 89 c7             	mov    %rax,%rdi
 37e:	b8 00 00 00 00       	mov    $0x0,%eax
 383:	e8 00 00 00 00       	call   388 <DmxSerial::ScanDirectory()+0x388>
 388:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 38f <DmxSerial::ScanDirectory()+0x38f>
 38f:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
 393:	49 89 d1             	mov    %rdx,%r9
 396:	41 b8 c1 00 00 00    	mov    $0xc1,%r8d
 39c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a3 <DmxSerial::ScanDirectory()+0x3a3>
 3a3:	48 89 d1             	mov    %rdx,%rcx
 3a6:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3ad <DmxSerial::ScanDirectory()+0x3ad>
 3ad:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3b4 <DmxSerial::ScanDirectory()+0x3b4>
 3b4:	48 89 c7             	mov    %rax,%rdi
 3b7:	b8 00 00 00 00       	mov    $0x0,%eax
 3bc:	e8 00 00 00 00       	call   3c1 <DmxSerial::ScanDirectory()+0x3c1>
 3c1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 3c5:	8b 55 b4             	mov    -0x4c(%rbp),%edx
 3c8:	48 81 c2 06 01 00 00 	add    $0x106,%rdx
 3cf:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
 3d3:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
 3d7:	48 89 d6             	mov    %rdx,%rsi
 3da:	48 89 c7             	mov    %rax,%rdi
 3dd:	e8 00 00 00 00       	call   3e2 <DmxSerial::ScanDirectory()+0x3e2>
 3e2:	83 45 b4 01          	addl   $0x1,-0x4c(%rbp)
 3e6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 3ea:	8b 40 24             	mov    0x24(%rax),%eax
 3ed:	39 45 b4             	cmp    %eax,-0x4c(%rbp)
 3f0:	0f 82 d6 fe ff ff    	jb     2cc <DmxSerial::ScanDirectory()+0x2cc>
 3f6:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%rbp)
 3fd:	eb 46                	jmp    445 <DmxSerial::ScanDirectory()+0x445>
 3ff:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 403:	8b 55 b8             	mov    -0x48(%rbp),%edx
 406:	48 83 c2 08          	add    $0x8,%rdx
 40a:	8b 54 90 08          	mov    0x8(%rax,%rdx,4),%edx
 40e:	8b 45 b8             	mov    -0x48(%rbp),%eax
 411:	89 c6                	mov    %eax,%esi
 413:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 41a <DmxSerial::ScanDirectory()+0x41a>
 41a:	48 89 c7             	mov    %rax,%rdi
 41d:	b8 00 00 00 00       	mov    $0x0,%eax
 422:	e8 00 00 00 00       	call   427 <DmxSerial::ScanDirectory()+0x427>
 427:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 42b:	8b 55 b8             	mov    -0x48(%rbp),%edx
 42e:	48 81 c2 06 01 00 00 	add    $0x106,%rdx
 435:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
 439:	48 89 c7             	mov    %rax,%rdi
 43c:	e8 00 00 00 00       	call   441 <DmxSerial::ScanDirectory()+0x441>
 441:	83 45 b8 01          	addl   $0x1,-0x48(%rbp)
 445:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 449:	8b 40 24             	mov    0x24(%rax),%eax
 44c:	39 45 b8             	cmp    %eax,-0x48(%rbp)
 44f:	72 ae                	jb     3ff <DmxSerial::ScanDirectory()+0x3ff>
 451:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 455:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 45c:	00 00 
 45e:	74 05                	je     465 <DmxSerial::ScanDirectory()+0x465>
 460:	e8 00 00 00 00       	call   465 <DmxSerial::ScanDirectory()+0x465>
 465:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 469:	c9                   	leave  
 46a:	c3                   	ret    

Disassembly of section .text._ZN9DmxSerial10EnableTFTPEb:

0000000000000000 <DmxSerial::EnableTFTP(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 18          	sub    $0x18,%rsp
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	89 f0                	mov    %esi,%eax
  13:	88 45 e4             	mov    %al,-0x1c(%rbp)
  16:	b9 ce 00 00 00       	mov    $0xce,%ecx
  1b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 22 <DmxSerial::EnableTFTP(bool)+0x22>
  22:	48 89 c2             	mov    %rax,%rdx
  25:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2c <DmxSerial::EnableTFTP(bool)+0x2c>
  2c:	48 89 c6             	mov    %rax,%rsi
  2f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 36 <DmxSerial::EnableTFTP(bool)+0x36>
  36:	48 89 c7             	mov    %rax,%rdi
  39:	b8 00 00 00 00       	mov    $0x0,%eax
  3e:	e8 00 00 00 00       	call   43 <DmxSerial::EnableTFTP(bool)+0x43>
  43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  47:	0f b6 80 32 1a 00 00 	movzbl 0x1a32(%rax),%eax
  4e:	38 45 e4             	cmp    %al,-0x1c(%rbp)
  51:	75 32                	jne    85 <DmxSerial::EnableTFTP(bool)+0x85>
  53:	b9 d1 00 00 00       	mov    $0xd1,%ecx
  58:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 5f <DmxSerial::EnableTFTP(bool)+0x5f>
  5f:	48 89 c2             	mov    %rax,%rdx
  62:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 69 <DmxSerial::EnableTFTP(bool)+0x69>
  69:	48 89 c6             	mov    %rax,%rsi
  6c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 73 <DmxSerial::EnableTFTP(bool)+0x73>
  73:	48 89 c7             	mov    %rax,%rdi
  76:	b8 00 00 00 00       	mov    $0x0,%eax
  7b:	e8 00 00 00 00       	call   80 <DmxSerial::EnableTFTP(bool)+0x80>
  80:	e9 7a 01 00 00       	jmp    1ff <DmxSerial::EnableTFTP(bool)+0x1ff>
  85:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  89:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 90 <DmxSerial::EnableTFTP(bool)+0x90>
  90:	41 89 d1             	mov    %edx,%r9d
  93:	41 b8 d5 00 00 00    	mov    $0xd5,%r8d
  99:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # a0 <DmxSerial::EnableTFTP(bool)+0xa0>
  a0:	48 89 d1             	mov    %rdx,%rcx
  a3:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # aa <DmxSerial::EnableTFTP(bool)+0xaa>
  aa:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # b1 <DmxSerial::EnableTFTP(bool)+0xb1>
  b1:	48 89 c7             	mov    %rax,%rdi
  b4:	b8 00 00 00 00       	mov    $0x0,%eax
  b9:	e8 00 00 00 00       	call   be <DmxSerial::EnableTFTP(bool)+0xbe>
  be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c2:	0f b6 55 e4          	movzbl -0x1c(%rbp),%edx
  c6:	88 90 32 1a 00 00    	mov    %dl,0x1a32(%rax)
  cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d0:	0f b6 80 32 1a 00 00 	movzbl 0x1a32(%rax),%eax
  d7:	84 c0                	test   %al,%al
  d9:	0f 84 94 00 00 00    	je     173 <DmxSerial::EnableTFTP(bool)+0x173>
  df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e3:	48 8b 80 38 1a 00 00 	mov    0x1a38(%rax),%rax
  ea:	48 85 c0             	test   %rax,%rax
  ed:	74 28                	je     117 <DmxSerial::EnableTFTP(bool)+0x117>
  ef:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # f6 <DmxSerial::EnableTFTP(bool)+0xf6>
  f6:	48 89 c1             	mov    %rax,%rcx
  f9:	ba da 00 00 00       	mov    $0xda,%edx
  fe:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 105 <DmxSerial::EnableTFTP(bool)+0x105>
 105:	48 89 c6             	mov    %rax,%rsi
 108:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 10f <DmxSerial::EnableTFTP(bool)+0x10f>
 10f:	48 89 c7             	mov    %rax,%rdi
 112:	e8 00 00 00 00       	call   117 <DmxSerial::EnableTFTP(bool)+0x117>
 117:	bf 50 02 00 00       	mov    $0x250,%edi
 11c:	e8 00 00 00 00       	call   121 <DmxSerial::EnableTFTP(bool)+0x121>
 121:	48 89 c3             	mov    %rax,%rbx
 124:	48 89 df             	mov    %rbx,%rdi
 127:	e8 00 00 00 00       	call   12c <DmxSerial::EnableTFTP(bool)+0x12c>
 12c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 130:	48 89 98 38 1a 00 00 	mov    %rbx,0x1a38(%rax)
 137:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 13b:	48 8b 80 38 1a 00 00 	mov    0x1a38(%rax),%rax
 142:	48 85 c0             	test   %rax,%rax
 145:	0f 85 87 00 00 00    	jne    1d2 <DmxSerial::EnableTFTP(bool)+0x1d2>
 14b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 152 <DmxSerial::EnableTFTP(bool)+0x152>
 152:	48 89 c1             	mov    %rax,%rcx
 155:	ba dc 00 00 00       	mov    $0xdc,%edx
 15a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 161 <DmxSerial::EnableTFTP(bool)+0x161>
 161:	48 89 c6             	mov    %rax,%rsi
 164:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 16b <DmxSerial::EnableTFTP(bool)+0x16b>
 16b:	48 89 c7             	mov    %rax,%rdi
 16e:	e8 00 00 00 00       	call   173 <DmxSerial::EnableTFTP(bool)+0x173>
 173:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 177:	48 8b 80 38 1a 00 00 	mov    0x1a38(%rax),%rax
 17e:	48 85 c0             	test   %rax,%rax
 181:	75 28                	jne    1ab <DmxSerial::EnableTFTP(bool)+0x1ab>
 183:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 18a <DmxSerial::EnableTFTP(bool)+0x18a>
 18a:	48 89 c1             	mov    %rax,%rcx
 18d:	ba de 00 00 00       	mov    $0xde,%edx
 192:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 199 <DmxSerial::EnableTFTP(bool)+0x199>
 199:	48 89 c6             	mov    %rax,%rsi
 19c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1a3 <DmxSerial::EnableTFTP(bool)+0x1a3>
 1a3:	48 89 c7             	mov    %rax,%rdi
 1a6:	e8 00 00 00 00       	call   1ab <DmxSerial::EnableTFTP(bool)+0x1ab>
 1ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1af:	48 8b 80 38 1a 00 00 	mov    0x1a38(%rax),%rax
 1b6:	48 85 c0             	test   %rax,%rax
 1b9:	74 08                	je     1c3 <DmxSerial::EnableTFTP(bool)+0x1c3>
 1bb:	48 89 c7             	mov    %rax,%rdi
 1be:	e8 00 00 00 00       	call   1c3 <DmxSerial::EnableTFTP(bool)+0x1c3>
 1c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1c7:	48 c7 80 38 1a 00 00 	movq   $0x0,0x1a38(%rax)
 1ce:	00 00 00 00 
 1d2:	b9 e3 00 00 00       	mov    $0xe3,%ecx
 1d7:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1de <DmxSerial::EnableTFTP(bool)+0x1de>
 1de:	48 89 c2             	mov    %rax,%rdx
 1e1:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1e8 <DmxSerial::EnableTFTP(bool)+0x1e8>
 1e8:	48 89 c6             	mov    %rax,%rsi
 1eb:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1f2 <DmxSerial::EnableTFTP(bool)+0x1f2>
 1f2:	48 89 c7             	mov    %rax,%rdi
 1f5:	b8 00 00 00 00       	mov    $0x0,%eax
 1fa:	e8 00 00 00 00       	call   1ff <DmxSerial::EnableTFTP(bool)+0x1ff>
 1ff:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 203:	c9                   	leave  
 204:	c3                   	ret    

Disassembly of section .text._ZN9DmxSerial3RunEv:

0000000000000000 <DmxSerial::Run()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <DmxSerial::Run()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 80 38 1a 00 00 	mov    0x1a38(%rax),%rax
  27:	48 85 c0             	test   %rax,%rax
  2a:	74 15                	je     41 <DmxSerial::Run()+0x41>
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 8b 80 38 1a 00 00 	mov    0x1a38(%rax),%rax
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	call   3f <DmxSerial::Run()+0x3f>
  3f:	eb 01                	jmp    42 <DmxSerial::Run()+0x42>
  41:	90                   	nop
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN9DmxSerial10DeleteFileEi:

0000000000000000 <DmxSerial::DeleteFile(int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  13:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1a:	00 00 
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 29 <DmxSerial::DeleteFile(int)+0x29>
  29:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  2c:	41 89 d1             	mov    %edx,%r9d
  2f:	41 b8 f1 00 00 00    	mov    $0xf1,%r8d
  35:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3c <DmxSerial::DeleteFile(int)+0x3c>
  3c:	48 89 d1             	mov    %rdx,%rcx
  3f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 46 <DmxSerial::DeleteFile(int)+0x46>
  46:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4d <DmxSerial::DeleteFile(int)+0x4d>
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	b8 00 00 00 00       	mov    $0x0,%eax
  55:	e8 00 00 00 00       	call   5a <DmxSerial::DeleteFile(int)+0x5a>
  5a:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  5d:	48 8d 45 ed          	lea    -0x13(%rbp),%rax
  61:	be 0b 00 00 00       	mov    $0xb,%esi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	call   6e <DmxSerial::DeleteFile(int)+0x6e>
  6e:	84 c0                	test   %al,%al
  70:	74 7d                	je     ef <DmxSerial::DeleteFile(int)+0xef>
  72:	48 8d 45 ed          	lea    -0x13(%rbp),%rax
  76:	48 89 c7             	mov    %rax,%rdi
  79:	e8 00 00 00 00       	call   7e <DmxSerial::DeleteFile(int)+0x7e>
  7e:	89 45 e8             	mov    %eax,-0x18(%rbp)
  81:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 88 <DmxSerial::DeleteFile(int)+0x88>
  88:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8b:	41 89 d1             	mov    %edx,%r9d
  8e:	41 b8 f7 00 00 00    	mov    $0xf7,%r8d
  94:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 9b <DmxSerial::DeleteFile(int)+0x9b>
  9b:	48 89 d1             	mov    %rdx,%rcx
  9e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # a5 <DmxSerial::DeleteFile(int)+0xa5>
  a5:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # ac <DmxSerial::DeleteFile(int)+0xac>
  ac:	48 89 c7             	mov    %rax,%rdi
  af:	b8 00 00 00 00       	mov    $0x0,%eax
  b4:	e8 00 00 00 00       	call   b9 <DmxSerial::DeleteFile(int)+0xb9>
  b9:	b9 f8 00 00 00       	mov    $0xf8,%ecx
  be:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c5 <DmxSerial::DeleteFile(int)+0xc5>
  c5:	48 89 c2             	mov    %rax,%rdx
  c8:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # cf <DmxSerial::DeleteFile(int)+0xcf>
  cf:	48 89 c6             	mov    %rax,%rsi
  d2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d9 <DmxSerial::DeleteFile(int)+0xd9>
  d9:	48 89 c7             	mov    %rax,%rdi
  dc:	b8 00 00 00 00       	mov    $0x0,%eax
  e1:	e8 00 00 00 00       	call   e6 <DmxSerial::DeleteFile(int)+0xe6>
  e6:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  ea:	0f 94 c0             	sete   %al
  ed:	eb 32                	jmp    121 <DmxSerial::DeleteFile(int)+0x121>
  ef:	b9 fc 00 00 00       	mov    $0xfc,%ecx
  f4:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # fb <DmxSerial::DeleteFile(int)+0xfb>
  fb:	48 89 c2             	mov    %rax,%rdx
  fe:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 105 <DmxSerial::DeleteFile(int)+0x105>
 105:	48 89 c6             	mov    %rax,%rsi
 108:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 10f <DmxSerial::DeleteFile(int)+0x10f>
 10f:	48 89 c7             	mov    %rax,%rdi
 112:	b8 00 00 00 00       	mov    $0x0,%eax
 117:	e8 00 00 00 00       	call   11c <DmxSerial::DeleteFile(int)+0x11c>
 11c:	b8 00 00 00 00       	mov    $0x0,%eax
 121:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 125:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 12c:	00 00 
 12e:	74 05                	je     135 <DmxSerial::DeleteFile(int)+0x135>
 130:	e8 00 00 00 00       	call   135 <DmxSerial::DeleteFile(int)+0x135>
 135:	c9                   	leave  
 136:	c3                   	ret    

Disassembly of section .text._ZN9DmxSerial10DeleteFileEPKc:

0000000000000000 <DmxSerial::DeleteFile(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  19:	75 28                	jne    43 <DmxSerial::DeleteFile(char const*)+0x43>
  1b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 22 <DmxSerial::DeleteFile(char const*)+0x22>
  22:	48 89 c1             	mov    %rax,%rcx
  25:	ba 01 01 00 00       	mov    $0x101,%edx
  2a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 31 <DmxSerial::DeleteFile(char const*)+0x31>
  31:	48 89 c6             	mov    %rax,%rsi
  34:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3b <DmxSerial::DeleteFile(char const*)+0x3b>
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	call   43 <DmxSerial::DeleteFile(char const*)+0x43>
  43:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 4a <DmxSerial::DeleteFile(char const*)+0x4a>
  4a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4e:	49 89 d1             	mov    %rdx,%r9
  51:	41 b8 03 01 00 00    	mov    $0x103,%r8d
  57:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 5e <DmxSerial::DeleteFile(char const*)+0x5e>
  5e:	48 89 d1             	mov    %rdx,%rcx
  61:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 68 <DmxSerial::DeleteFile(char const*)+0x68>
  68:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 6f <DmxSerial::DeleteFile(char const*)+0x6f>
  6f:	48 89 c7             	mov    %rax,%rdi
  72:	b8 00 00 00 00       	mov    $0x0,%eax
  77:	e8 00 00 00 00       	call   7c <DmxSerial::DeleteFile(char const*)+0x7c>
  7c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	call   88 <DmxSerial::DeleteFile(char const*)+0x88>
  88:	48 83 f8 03          	cmp    $0x3,%rax
  8c:	74 07                	je     95 <DmxSerial::DeleteFile(char const*)+0x95>
  8e:	b8 00 00 00 00       	mov    $0x0,%eax
  93:	eb 66                	jmp    fb <DmxSerial::DeleteFile(char const*)+0xfb>
  95:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  99:	0f b6 00             	movzbl (%rax),%eax
  9c:	0f be c0             	movsbl %al,%eax
  9f:	83 e8 30             	sub    $0x30,%eax
  a2:	6b c0 64             	imul   $0x64,%eax,%eax
  a5:	89 45 fc             	mov    %eax,-0x4(%rbp)
  a8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  ac:	48 83 c0 01          	add    $0x1,%rax
  b0:	0f b6 00             	movzbl (%rax),%eax
  b3:	0f be c0             	movsbl %al,%eax
  b6:	8d 50 d0             	lea    -0x30(%rax),%edx
  b9:	89 d0                	mov    %edx,%eax
  bb:	c1 e0 02             	shl    $0x2,%eax
  be:	01 d0                	add    %edx,%eax
  c0:	01 c0                	add    %eax,%eax
  c2:	01 45 fc             	add    %eax,-0x4(%rbp)
  c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  c9:	48 83 c0 02          	add    $0x2,%rax
  cd:	0f b6 00             	movzbl (%rax),%eax
  d0:	0f be c0             	movsbl %al,%eax
  d3:	83 e8 30             	sub    $0x30,%eax
  d6:	01 45 fc             	add    %eax,-0x4(%rbp)
  d9:	81 7d fc 00 02 00 00 	cmpl   $0x200,-0x4(%rbp)
  e0:	7e 07                	jle    e9 <DmxSerial::DeleteFile(char const*)+0xe9>
  e2:	b8 00 00 00 00       	mov    $0x0,%eax
  e7:	eb 12                	jmp    fb <DmxSerial::DeleteFile(char const*)+0xfb>
  e9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f0:	89 d6                	mov    %edx,%esi
  f2:	48 89 c7             	mov    %rax,%rdi
  f5:	e8 00 00 00 00       	call   fa <DmxSerial::DeleteFile(char const*)+0xfa>
  fa:	90                   	nop
  fb:	c9                   	leave  
  fc:	c3                   	ret    

dmxserialhandleudp.o:     file format elf64-x86-64


Disassembly of section .text._ZN9DmxSerial3GetEv:

0000000000000000 <DmxSerial::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # f <DmxSerial::Get()+0xf>
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # f <Hardware::Get()+0xf>
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # f <Network::Get()+0xf>
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text._ZN9DmxSerial9HandleUdpEv:

0000000000000000 <DmxSerial::HandleUdp()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	e8 00 00 00 00       	call   24 <DmxSerial::HandleUdp()+0x24>
  24:	48 89 c7             	mov    %rax,%rdi
  27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  2b:	8b 80 28 08 00 00    	mov    0x828(%rax),%eax
  31:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  35:	48 8d 55 dc          	lea    -0x24(%rbp),%rdx
  39:	49 89 c9             	mov    %rcx,%r9
  3c:	49 89 d0             	mov    %rdx,%r8
  3f:	b9 20 00 00 00       	mov    $0x20,%ecx
  44:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4b <DmxSerial::HandleUdp()+0x4b>
  4b:	89 c6                	mov    %eax,%esi
  4d:	e8 00 00 00 00       	call   52 <DmxSerial::HandleUdp()+0x52>
  52:	66 89 45 da          	mov    %ax,-0x26(%rbp)
  56:	66 83 7d da 05       	cmpw   $0x5,-0x26(%rbp)
  5b:	0f 96 c0             	setbe  %al
  5e:	0f b6 c0             	movzbl %al,%eax
  61:	48 85 c0             	test   %rax,%rax
  64:	0f 85 84 03 00 00    	jne    3ee <DmxSerial::HandleUdp()+0x3ee>
  6a:	0f b7 45 da          	movzwl -0x26(%rbp),%eax
  6e:	83 e8 01             	sub    $0x1,%eax
  71:	48 98                	cltq   
  73:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 7a <DmxSerial::HandleUdp()+0x7a>
  7a:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
  7e:	3c 0a                	cmp    $0xa,%al
  80:	75 0b                	jne    8d <DmxSerial::HandleUdp()+0x8d>
  82:	0f b7 45 da          	movzwl -0x26(%rbp),%eax
  86:	83 e8 01             	sub    $0x1,%eax
  89:	66 89 45 da          	mov    %ax,-0x26(%rbp)
  8d:	0f b7 45 da          	movzwl -0x26(%rbp),%eax
  91:	89 c6                	mov    %eax,%esi
  93:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 9a <DmxSerial::HandleUdp()+0x9a>
  9a:	48 89 c7             	mov    %rax,%rdi
  9d:	e8 00 00 00 00       	call   a2 <DmxSerial::HandleUdp()+0xa2>
  a2:	ba 07 00 00 00       	mov    $0x7,%edx
  a7:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ae <DmxSerial::HandleUdp()+0xae>
  ae:	48 89 c6             	mov    %rax,%rsi
  b1:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # b8 <DmxSerial::HandleUdp()+0xb8>
  b8:	48 89 c7             	mov    %rax,%rdi
  bb:	e8 00 00 00 00       	call   c0 <DmxSerial::HandleUdp()+0xc0>
  c0:	85 c0                	test   %eax,%eax
  c2:	0f 85 89 00 00 00    	jne    151 <DmxSerial::HandleUdp()+0x151>
  c8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  cf:	eb 6f                	jmp    140 <DmxSerial::HandleUdp()+0x140>
  d1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  d5:	8b 55 e0             	mov    -0x20(%rbp),%edx
  d8:	48 83 c2 08          	add    $0x8,%rdx
  dc:	8b 44 90 08          	mov    0x8(%rax,%rdx,4),%eax
  e0:	89 c1                	mov    %eax,%ecx
  e2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # e9 <DmxSerial::HandleUdp()+0xe9>
  e9:	48 89 c2             	mov    %rax,%rdx
  ec:	be 1f 00 00 00       	mov    $0x1f,%esi
  f1:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # f8 <DmxSerial::HandleUdp()+0xf8>
  f8:	48 89 c7             	mov    %rax,%rdi
  fb:	b8 00 00 00 00       	mov    $0x0,%eax
 100:	e8 00 00 00 00       	call   105 <DmxSerial::HandleUdp()+0x105>
 105:	89 45 ec             	mov    %eax,-0x14(%rbp)
 108:	e8 00 00 00 00       	call   10d <DmxSerial::HandleUdp()+0x10d>
 10d:	48 89 c7             	mov    %rax,%rdi
 110:	8b 4d dc             	mov    -0x24(%rbp),%ecx
 113:	8b 45 ec             	mov    -0x14(%rbp),%eax
 116:	0f b7 d0             	movzwl %ax,%edx
 119:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 11d:	8b 80 28 08 00 00    	mov    0x828(%rax),%eax
 123:	41 b9 56 41 00 00    	mov    $0x4156,%r9d
 129:	41 89 c8             	mov    %ecx,%r8d
 12c:	89 d1                	mov    %edx,%ecx
 12e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 135 <DmxSerial::HandleUdp()+0x135>
 135:	89 c6                	mov    %eax,%esi
 137:	e8 00 00 00 00       	call   13c <DmxSerial::HandleUdp()+0x13c>
 13c:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
 140:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 144:	8b 40 24             	mov    0x24(%rax),%eax
 147:	39 45 e0             	cmp    %eax,-0x20(%rbp)
 14a:	72 85                	jb     d1 <DmxSerial::HandleUdp()+0xd1>
 14c:	e9 9e 02 00 00       	jmp    3ef <DmxSerial::HandleUdp()+0x3ef>
 151:	66 83 7d da 05       	cmpw   $0x5,-0x26(%rbp)
 156:	0f 86 15 01 00 00    	jbe    271 <DmxSerial::HandleUdp()+0x271>
 15c:	ba 06 00 00 00       	mov    $0x6,%edx
 161:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 168 <DmxSerial::HandleUdp()+0x168>
 168:	48 89 c6             	mov    %rax,%rsi
 16b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 172 <DmxSerial::HandleUdp()+0x172>
 172:	48 89 c7             	mov    %rax,%rdi
 175:	e8 00 00 00 00       	call   17a <DmxSerial::HandleUdp()+0x17a>
 17a:	85 c0                	test   %eax,%eax
 17c:	0f 85 ef 00 00 00    	jne    271 <DmxSerial::HandleUdp()+0x271>
 182:	66 83 7d da 06       	cmpw   $0x6,-0x26(%rbp)
 187:	0f 85 81 00 00 00    	jne    20e <DmxSerial::HandleUdp()+0x20e>
 18d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 191:	0f b6 80 32 1a 00 00 	movzbl 0x1a32(%rax),%eax
 198:	84 c0                	test   %al,%al
 19a:	74 09                	je     1a5 <DmxSerial::HandleUdp()+0x1a5>
 19c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1a3 <DmxSerial::HandleUdp()+0x1a3>
 1a3:	eb 07                	jmp    1ac <DmxSerial::HandleUdp()+0x1ac>
 1a5:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1ac <DmxSerial::HandleUdp()+0x1ac>
 1ac:	48 89 c1             	mov    %rax,%rcx
 1af:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1b6 <DmxSerial::HandleUdp()+0x1b6>
 1b6:	48 89 c2             	mov    %rax,%rdx
 1b9:	be 1f 00 00 00       	mov    $0x1f,%esi
 1be:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c5 <DmxSerial::HandleUdp()+0x1c5>
 1c5:	48 89 c7             	mov    %rax,%rdi
 1c8:	b8 00 00 00 00       	mov    $0x0,%eax
 1cd:	e8 00 00 00 00       	call   1d2 <DmxSerial::HandleUdp()+0x1d2>
 1d2:	89 45 e4             	mov    %eax,-0x1c(%rbp)
 1d5:	e8 00 00 00 00       	call   1da <DmxSerial::HandleUdp()+0x1da>
 1da:	48 89 c7             	mov    %rax,%rdi
 1dd:	8b 4d dc             	mov    -0x24(%rbp),%ecx
 1e0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 1e3:	0f b7 d0             	movzwl %ax,%edx
 1e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1ea:	8b 80 28 08 00 00    	mov    0x828(%rax),%eax
 1f0:	41 b9 56 41 00 00    	mov    $0x4156,%r9d
 1f6:	41 89 c8             	mov    %ecx,%r8d
 1f9:	89 d1                	mov    %edx,%ecx
 1fb:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 202 <DmxSerial::HandleUdp()+0x202>
 202:	89 c6                	mov    %eax,%esi
 204:	e8 00 00 00 00       	call   209 <DmxSerial::HandleUdp()+0x209>
 209:	e9 e1 01 00 00       	jmp    3ef <DmxSerial::HandleUdp()+0x3ef>
 20e:	66 83 7d da 09       	cmpw   $0x9,-0x26(%rbp)
 213:	75 5c                	jne    271 <DmxSerial::HandleUdp()+0x271>
 215:	ba 03 00 00 00       	mov    $0x3,%edx
 21a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 221 <DmxSerial::HandleUdp()+0x221>
 221:	48 89 c6             	mov    %rax,%rsi
 224:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 22b <DmxSerial::HandleUdp()+0x22b>
 22b:	48 89 c7             	mov    %rax,%rdi
 22e:	e8 00 00 00 00       	call   233 <DmxSerial::HandleUdp()+0x233>
 233:	85 c0                	test   %eax,%eax
 235:	75 3a                	jne    271 <DmxSerial::HandleUdp()+0x271>
 237:	e8 00 00 00 00       	call   23c <DmxSerial::HandleUdp()+0x23c>
 23c:	48 89 c7             	mov    %rax,%rdi
 23f:	8b 4d dc             	mov    -0x24(%rbp),%ecx
 242:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 246:	48 8d 90 32 1a 00 00 	lea    0x1a32(%rax),%rdx
 24d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 251:	8b 80 28 08 00 00    	mov    0x828(%rax),%eax
 257:	41 b9 56 41 00 00    	mov    $0x4156,%r9d
 25d:	41 89 c8             	mov    %ecx,%r8d
 260:	b9 01 00 00 00       	mov    $0x1,%ecx
 265:	89 c6                	mov    %eax,%esi
 267:	e8 00 00 00 00       	call   26c <DmxSerial::HandleUdp()+0x26c>
 26c:	e9 7e 01 00 00       	jmp    3ef <DmxSerial::HandleUdp()+0x3ef>
 271:	66 83 7d da 07       	cmpw   $0x7,-0x26(%rbp)
 276:	75 44                	jne    2bc <DmxSerial::HandleUdp()+0x2bc>
 278:	ba 06 00 00 00       	mov    $0x6,%edx
 27d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 284 <DmxSerial::HandleUdp()+0x284>
 284:	48 89 c6             	mov    %rax,%rsi
 287:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 28e <DmxSerial::HandleUdp()+0x28e>
 28e:	48 89 c7             	mov    %rax,%rdi
 291:	e8 00 00 00 00       	call   296 <DmxSerial::HandleUdp()+0x296>
 296:	85 c0                	test   %eax,%eax
 298:	75 22                	jne    2bc <DmxSerial::HandleUdp()+0x2bc>
 29a:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 2a1 <DmxSerial::HandleUdp()+0x2a1>
 2a1:	3c 30                	cmp    $0x30,%al
 2a3:	0f 95 c0             	setne  %al
 2a6:	0f b6 d0             	movzbl %al,%edx
 2a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 2ad:	89 d6                	mov    %edx,%esi
 2af:	48 89 c7             	mov    %rax,%rdi
 2b2:	e8 00 00 00 00       	call   2b7 <DmxSerial::HandleUdp()+0x2b7>
 2b7:	e9 33 01 00 00       	jmp    3ef <DmxSerial::HandleUdp()+0x3ef>
 2bc:	ba 09 00 00 00       	mov    $0x9,%edx
 2c1:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2c8 <DmxSerial::HandleUdp()+0x2c8>
 2c8:	48 89 c6             	mov    %rax,%rsi
 2cb:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2d2 <DmxSerial::HandleUdp()+0x2d2>
 2d2:	48 89 c7             	mov    %rax,%rdi
 2d5:	e8 00 00 00 00       	call   2da <DmxSerial::HandleUdp()+0x2da>
 2da:	85 c0                	test   %eax,%eax
 2dc:	75 12                	jne    2f0 <DmxSerial::HandleUdp()+0x2f0>
 2de:	e8 00 00 00 00       	call   2e3 <DmxSerial::HandleUdp()+0x2e3>
 2e3:	48 89 c7             	mov    %rax,%rdi
 2e6:	e8 00 00 00 00       	call   2eb <DmxSerial::HandleUdp()+0x2eb>
 2eb:	e9 ff 00 00 00       	jmp    3ef <DmxSerial::HandleUdp()+0x3ef>
 2f0:	66 83 7d da 0b       	cmpw   $0xb,-0x26(%rbp)
 2f5:	0f 85 f4 00 00 00    	jne    3ef <DmxSerial::HandleUdp()+0x3ef>
 2fb:	ba 08 00 00 00       	mov    $0x8,%edx
 300:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 307 <DmxSerial::HandleUdp()+0x307>
 307:	48 89 c6             	mov    %rax,%rsi
 30a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 311 <DmxSerial::HandleUdp()+0x311>
 311:	48 89 c7             	mov    %rax,%rdi
 314:	e8 00 00 00 00       	call   319 <DmxSerial::HandleUdp()+0x319>
 319:	85 c0                	test   %eax,%eax
 31b:	0f 85 ce 00 00 00    	jne    3ef <DmxSerial::HandleUdp()+0x3ef>
 321:	c6 05 00 00 00 00 00 	movb   $0x0,0x0(%rip)        # 328 <DmxSerial::HandleUdp()+0x328>
 328:	e8 00 00 00 00       	call   32d <DmxSerial::HandleUdp()+0x32d>
 32d:	48 89 c2             	mov    %rax,%rdx
 330:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 337 <DmxSerial::HandleUdp()+0x337>
 337:	48 89 c6             	mov    %rax,%rsi
 33a:	48 89 d7             	mov    %rdx,%rdi
 33d:	e8 00 00 00 00       	call   342 <DmxSerial::HandleUdp()+0x342>
 342:	84 c0                	test   %al,%al
 344:	74 33                	je     379 <DmxSerial::HandleUdp()+0x379>
 346:	e8 00 00 00 00       	call   34b <DmxSerial::HandleUdp()+0x34b>
 34b:	48 89 c7             	mov    %rax,%rdi
 34e:	8b 55 dc             	mov    -0x24(%rbp),%edx
 351:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 355:	8b 80 28 08 00 00    	mov    0x828(%rax),%eax
 35b:	41 b9 56 41 00 00    	mov    $0x4156,%r9d
 361:	41 89 d0             	mov    %edx,%r8d
 364:	b9 08 00 00 00       	mov    $0x8,%ecx
 369:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 370 <DmxSerial::HandleUdp()+0x370>
 370:	89 c6                	mov    %eax,%esi
 372:	e8 00 00 00 00       	call   377 <DmxSerial::HandleUdp()+0x377>
 377:	eb 76                	jmp    3ef <DmxSerial::HandleUdp()+0x3ef>
 379:	e8 00 00 00 00       	call   37e <DmxSerial::HandleUdp()+0x37e>
 37e:	8b 00                	mov    (%rax),%eax
 380:	89 c7                	mov    %eax,%edi
 382:	e8 00 00 00 00       	call   387 <DmxSerial::HandleUdp()+0x387>
 387:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
 38b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 38f:	48 89 c1             	mov    %rax,%rcx
 392:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 399 <DmxSerial::HandleUdp()+0x399>
 399:	48 89 c2             	mov    %rax,%rdx
 39c:	be 1f 00 00 00       	mov    $0x1f,%esi
 3a1:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3a8 <DmxSerial::HandleUdp()+0x3a8>
 3a8:	48 89 c7             	mov    %rax,%rdi
 3ab:	b8 00 00 00 00       	mov    $0x0,%eax
 3b0:	e8 00 00 00 00       	call   3b5 <DmxSerial::HandleUdp()+0x3b5>
 3b5:	89 45 e8             	mov    %eax,-0x18(%rbp)
 3b8:	e8 00 00 00 00       	call   3bd <DmxSerial::HandleUdp()+0x3bd>
 3bd:	48 89 c7             	mov    %rax,%rdi
 3c0:	8b 4d dc             	mov    -0x24(%rbp),%ecx
 3c3:	8b 45 e8             	mov    -0x18(%rbp),%eax
 3c6:	0f b7 d0             	movzwl %ax,%edx
 3c9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 3cd:	8b 80 28 08 00 00    	mov    0x828(%rax),%eax
 3d3:	41 b9 56 41 00 00    	mov    $0x4156,%r9d
 3d9:	41 89 c8             	mov    %ecx,%r8d
 3dc:	89 d1                	mov    %edx,%ecx
 3de:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3e5 <DmxSerial::HandleUdp()+0x3e5>
 3e5:	89 c6                	mov    %eax,%esi
 3e7:	e8 00 00 00 00       	call   3ec <DmxSerial::HandleUdp()+0x3ec>
 3ec:	eb 01                	jmp    3ef <DmxSerial::HandleUdp()+0x3ef>
 3ee:	90                   	nop
 3ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 3f3:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 3fa:	00 00 
 3fc:	74 05                	je     403 <DmxSerial::HandleUdp()+0x403>
 3fe:	e8 00 00 00 00       	call   403 <DmxSerial::HandleUdp()+0x403>
 403:	c9                   	leave  
 404:	c3                   	ret    

dmxserialparamsconst.o:     file format elf64-x86-64


dmxserialparams.o:     file format elf64-x86-64


Disassembly of section .text._ZN6Serial7SetTypeEN6serial4typeE:

0000000000000000 <Serial::SetType(serial::type)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	40 80 fe 02          	cmp    $0x2,%sil
   8:	77 03                	ja     d <Serial::SetType(serial::type)+0xd>
   a:	c6 07 00             	movb   $0x0,(%rdi)
   d:	c3                   	ret    

Disassembly of section .text._ZN6Serial3GetEv:

0000000000000000 <Serial::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # b <Serial::Get()+0xb>
   b:	c3                   	ret    

Disassembly of section .text._ZNK15DmxSerialParams9isMaskSetEj:

0000000000000000 <DmxSerialParams::isMaskSet(unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	8b 47 08             	mov    0x8(%rdi),%eax
   7:	21 f0                	and    %esi,%eax
   9:	39 f0                	cmp    %esi,%eax
   b:	0f 94 c0             	sete   %al
   e:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder7AddHex8EPKchb:

0000000000000000 <PropertiesBuilder::AddHex8(char const*, unsigned char, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	0f b6 c9             	movzbl %cl,%ecx
   7:	0f b6 d2             	movzbl %dl,%edx
   a:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  10:	e9 00 00 00 00       	jmp    15 <.LC2+0x3>

Disassembly of section .text._ZN17PropertiesBuilder7GetSizeEv:

0000000000000000 <PropertiesBuilder::GetSize()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	80 7f 0c 00          	cmpb   $0x0,0xc(%rdi)
   8:	74 1b                	je     25 <PropertiesBuilder::GetSize()+0x25>
   a:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
   e:	48 8b 17             	mov    (%rdi),%rdx
  11:	c6 44 02 ff 7d       	movb   $0x7d,-0x1(%rdx,%rax,1)
  16:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  1a:	48 8b 17             	mov    (%rdi),%rdx
  1d:	c6 04 02 7d          	movb   $0x7d,(%rdx,%rax,1)
  21:	66 ff 47 0a          	incw   0xa(%rdi)
  25:	66 8b 47 0a          	mov    0xa(%rdi),%ax
  29:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIPcEEiS1_jPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fa             	mov    %rdi,%r10
   7:	48 89 f7             	mov    %rsi,%rdi
   a:	89 d6                	mov    %edx,%esi
   c:	41 8a 42 0c          	mov    0xc(%r10),%al
  10:	45 84 c9             	test   %r9b,%r9b
  13:	75 06                	jne    1b <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x1b>
  15:	84 c0                	test   %al,%al
  17:	75 0d                	jne    26 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x26>
  19:	eb 14                	jmp    2f <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x2f>
  1b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 22 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x22>
  22:	84 c0                	test   %al,%al
  24:	74 10                	je     36 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x36>
  26:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x2d>
  2d:	eb 07                	jmp    36 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x36>
  2f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 36 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x36>
  36:	31 c0                	xor    %eax,%eax
  38:	e9 00 00 00 00       	jmp    3d <.LC6+0x7>

Disassembly of section .text._ZN17PropertiesBuilder8add_partIPKcEEiPcjS2_T_bj:

0000000000000000 <int PropertiesBuilder::add_part<char const*>(char*, unsigned int, char const*, char const*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	45 0f b6 c9          	movzbl %r9b,%r9d
   8:	e9 00 00 00 00       	jmp    d <.LC1+0x2>

Disassembly of section .text._ZN15DmxSerialParamsC2EP20DmxSerialParamsStore:

0000000000000000 <DmxSerialParams::DmxSerialParams(DmxSerialParamsStore*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	4c 8d 25 00 00 00 00 	lea    0x0(%rip),%r12        # d <DmxSerialParams::DmxSerialParams(DmxSerialParamsStore*)+0xd>
   d:	b9 32 00 00 00       	mov    $0x32,%ecx
  12:	31 c0                	xor    %eax,%eax
  14:	55                   	push   %rbp
  15:	48 8d 2d 00 00 00 00 	lea    0x0(%rip),%rbp        # 1c <DmxSerialParams::DmxSerialParams(DmxSerialParamsStore*)+0x1c>
  1c:	4c 89 e2             	mov    %r12,%rdx
  1f:	53                   	push   %rbx
  20:	48 89 fb             	mov    %rdi,%rbx
  23:	48 89 37             	mov    %rsi,(%rdi)
  26:	48 89 ee             	mov    %rbp,%rsi
  29:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 30 <DmxSerialParams::DmxSerialParams(DmxSerialParamsStore*)+0x30>
  30:	e8 00 00 00 00       	call   35 <DmxSerialParams::DmxSerialParams(DmxSerialParamsStore*)+0x35>
  35:	48 89 e9             	mov    %rbp,%rcx
  38:	4c 89 e2             	mov    %r12,%rdx
  3b:	31 c0                	xor    %eax,%eax
  3d:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 44 <DmxSerialParams::DmxSerialParams(DmxSerialParamsStore*)+0x44>
  44:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 4b <DmxSerialParams::DmxSerialParams(DmxSerialParamsStore*)+0x4b>
  4b:	41 b9 13 00 00 00    	mov    $0x13,%r9d
  51:	41 b8 33 00 00 00    	mov    $0x33,%r8d
  57:	e8 00 00 00 00       	call   5c <DmxSerialParams::DmxSerialParams(DmxSerialParamsStore*)+0x5c>
  5c:	b8 e1 00 00 00       	mov    $0xe1,%eax
  61:	4c 89 e2             	mov    %r12,%rdx
  64:	48 89 ee             	mov    %rbp,%rsi
  67:	48 c1 e0 31          	shl    $0x31,%rax
  6b:	66 c7 43 18 00 30    	movw   $0x3000,0x18(%rbx)
  71:	b9 40 00 00 00       	mov    $0x40,%ecx
  76:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 7d <DmxSerialParams::DmxSerialParams(DmxSerialParamsStore*)+0x7d>
  7d:	48 89 43 08          	mov    %rax,0x8(%rbx)
  81:	48 b8 00 08 00 01 40 	movabs $0xf424001000800,%rax
  88:	42 0f 00 
  8b:	48 89 43 10          	mov    %rax,0x10(%rbx)
  8f:	31 c0                	xor    %eax,%eax
  91:	c6 43 1a 01          	movb   $0x1,0x1a(%rbx)
  95:	5b                   	pop    %rbx
  96:	5d                   	pop    %rbp
  97:	41 5c                	pop    %r12
  99:	e9 00 00 00 00       	jmp    9e <.LC7+0x30>

Disassembly of section .text._ZN15DmxSerialParams4LoadEv:

0000000000000000 <DmxSerialParams::Load()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	48 89 fa             	mov    %rdi,%rdx
   9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10 <DmxSerialParams::Load()+0x10>
  10:	55                   	push   %rbp
  11:	53                   	push   %rbx
  12:	48 89 fb             	mov    %rdi,%rbx
  15:	48 83 ec 20          	sub    $0x20,%rsp
  19:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  20:	00 00 
  22:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  27:	31 c0                	xor    %eax,%eax
  29:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  30:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  35:	48 89 ef             	mov    %rbp,%rdi
  38:	e8 00 00 00 00       	call   3d <DmxSerialParams::Load()+0x3d>
  3d:	48 89 ef             	mov    %rbp,%rdi
  40:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 47 <DmxSerialParams::Load()+0x47>
  47:	e8 00 00 00 00       	call   4c <DmxSerialParams::Load()+0x4c>
  4c:	48 8b 3b             	mov    (%rbx),%rdi
  4f:	84 c0                	test   %al,%al
  51:	41 89 c4             	mov    %eax,%r12d
  54:	74 11                	je     67 <DmxSerialParams::Load()+0x67>
  56:	48 85 ff             	test   %rdi,%rdi
  59:	74 1e                	je     79 <DmxSerialParams::Load()+0x79>
  5b:	48 8b 07             	mov    (%rdi),%rax
  5e:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  62:	ff 50 10             	call   *0x10(%rax)
  65:	eb 12                	jmp    79 <DmxSerialParams::Load()+0x79>
  67:	48 85 ff             	test   %rdi,%rdi
  6a:	74 0d                	je     79 <DmxSerialParams::Load()+0x79>
  6c:	48 8b 07             	mov    (%rdi),%rax
  6f:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  73:	41 b4 01             	mov    $0x1,%r12b
  76:	ff 50 18             	call   *0x18(%rax)
  79:	48 89 ef             	mov    %rbp,%rdi
  7c:	e8 00 00 00 00       	call   81 <DmxSerialParams::Load()+0x81>
  81:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  86:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8d:	00 00 
  8f:	74 05                	je     96 <DmxSerialParams::Load()+0x96>
  91:	e8 00 00 00 00       	call   96 <DmxSerialParams::Load()+0x96>
  96:	48 83 c4 20          	add    $0x20,%rsp
  9a:	44 89 e0             	mov    %r12d,%eax
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	41 5c                	pop    %r12
  a1:	c3                   	ret    

Disassembly of section .text._ZN15DmxSerialParams4LoadEPKcj:

0000000000000000 <DmxSerialParams::Load(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	55                   	push   %rbp
   9:	53                   	push   %rbx
   a:	48 83 ec 28          	sub    $0x28,%rsp
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 85 f6             	test   %rsi,%rsi
  21:	75 1c                	jne    3f <DmxSerialParams::Load(char const*, unsigned int)+0x3f>
  23:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 2a <DmxSerialParams::Load(char const*, unsigned int)+0x2a>
  2a:	ba 5a 00 00 00       	mov    $0x5a,%edx
  2f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 36 <DmxSerialParams::Load(char const*, unsigned int)+0x36>
  36:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 3d <DmxSerialParams::Load(char const*, unsigned int)+0x3d>
  3d:	eb 21                	jmp    60 <DmxSerialParams::Load(char const*, unsigned int)+0x60>
  3f:	41 89 d4             	mov    %edx,%r12d
  42:	85 d2                	test   %edx,%edx
  44:	75 1f                	jne    65 <DmxSerialParams::Load(char const*, unsigned int)+0x65>
  46:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 4d <DmxSerialParams::Load(char const*, unsigned int)+0x4d>
  4d:	ba 5b 00 00 00       	mov    $0x5b,%edx
  52:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 59 <DmxSerialParams::Load(char const*, unsigned int)+0x59>
  59:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 60 <DmxSerialParams::Load(char const*, unsigned int)+0x60>
  60:	e8 00 00 00 00       	call   65 <DmxSerialParams::Load(char const*, unsigned int)+0x65>
  65:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  69:	48 89 fb             	mov    %rdi,%rbx
  6c:	75 1c                	jne    8a <DmxSerialParams::Load(char const*, unsigned int)+0x8a>
  6e:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 75 <DmxSerialParams::Load(char const*, unsigned int)+0x75>
  75:	ba 5d 00 00 00       	mov    $0x5d,%edx
  7a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 81 <DmxSerialParams::Load(char const*, unsigned int)+0x81>
  81:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 88 <DmxSerialParams::Load(char const*, unsigned int)+0x88>
  88:	eb d6                	jmp    60 <DmxSerialParams::Load(char const*, unsigned int)+0x60>
  8a:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  91:	4c 8d 6c 24 08       	lea    0x8(%rsp),%r13
  96:	48 89 fa             	mov    %rdi,%rdx
  99:	48 89 f5             	mov    %rsi,%rbp
  9c:	4c 89 ef             	mov    %r13,%rdi
  9f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # a6 <DmxSerialParams::Load(char const*, unsigned int)+0xa6>
  a6:	e8 00 00 00 00       	call   ab <DmxSerialParams::Load(char const*, unsigned int)+0xab>
  ab:	44 89 e2             	mov    %r12d,%edx
  ae:	48 89 ee             	mov    %rbp,%rsi
  b1:	4c 89 ef             	mov    %r13,%rdi
  b4:	e8 00 00 00 00       	call   b9 <DmxSerialParams::Load(char const*, unsigned int)+0xb9>
  b9:	48 8b 3b             	mov    (%rbx),%rdi
  bc:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  c0:	48 8b 07             	mov    (%rdi),%rax
  c3:	ff 50 10             	call   *0x10(%rax)
  c6:	4c 89 ef             	mov    %r13,%rdi
  c9:	e8 00 00 00 00       	call   ce <DmxSerialParams::Load(char const*, unsigned int)+0xce>
  ce:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  d3:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  da:	00 00 
  dc:	74 05                	je     e3 <DmxSerialParams::Load(char const*, unsigned int)+0xe3>
  de:	e8 00 00 00 00       	call   e3 <DmxSerialParams::Load(char const*, unsigned int)+0xe3>
  e3:	48 83 c4 28          	add    $0x28,%rsp
  e7:	5b                   	pop    %rbx
  e8:	5d                   	pop    %rbp
  e9:	41 5c                	pop    %r12
  eb:	41 5d                	pop    %r13
  ed:	c3                   	ret    

Disassembly of section .text._ZN15DmxSerialParams16callbackFunctionEPKc:

0000000000000000 <DmxSerialParams::callbackFunction(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 57                	push   %r15
   6:	41 56                	push   %r14
   8:	41 55                	push   %r13
   a:	41 54                	push   %r12
   c:	55                   	push   %rbp
   d:	53                   	push   %rbx
   e:	48 83 ec 38          	sub    $0x38,%rsp
  12:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  19:	00 00 
  1b:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  20:	31 c0                	xor    %eax,%eax
  22:	48 85 f6             	test   %rsi,%rsi
  25:	75 1f                	jne    46 <DmxSerialParams::callbackFunction(char const*)+0x46>
  27:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 2e <DmxSerialParams::callbackFunction(char const*)+0x2e>
  2e:	ba 6d 00 00 00       	mov    $0x6d,%edx
  33:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3a <DmxSerialParams::callbackFunction(char const*)+0x3a>
  3a:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 41 <DmxSerialParams::callbackFunction(char const*)+0x41>
  41:	e8 00 00 00 00       	call   46 <DmxSerialParams::callbackFunction(char const*)+0x46>
  46:	48 89 f5             	mov    %rsi,%rbp
  49:	4c 8d 74 24 14       	lea    0x14(%rsp),%r14
  4e:	4c 8d 64 24 18       	lea    0x18(%rsp),%r12
  53:	48 89 fb             	mov    %rdi,%rbx
  56:	4c 89 f1             	mov    %r14,%rcx
  59:	4c 89 e2             	mov    %r12,%rdx
  5c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 63 <DmxSerialParams::callbackFunction(char const*)+0x63>
  63:	48 89 ef             	mov    %rbp,%rdi
  66:	c7 44 24 14 0f 00 00 	movl   $0xf,0x14(%rsp)
  6d:	00 
  6e:	e8 00 00 00 00       	call   73 <DmxSerialParams::callbackFunction(char const*)+0x73>
  73:	85 c0                	test   %eax,%eax
  75:	75 2a                	jne    a1 <DmxSerialParams::callbackFunction(char const*)+0xa1>
  77:	8b 44 24 14          	mov    0x14(%rsp),%eax
  7b:	4c 89 e7             	mov    %r12,%rdi
  7e:	c6 44 04 18 00       	movb   $0x0,0x18(%rsp,%rax,1)
  83:	e8 00 00 00 00       	call   88 <DmxSerialParams::callbackFunction(char const*)+0x88>
  88:	88 43 0c             	mov    %al,0xc(%rbx)
  8b:	84 c0                	test   %al,%al
  8d:	74 09                	je     98 <DmxSerialParams::callbackFunction(char const*)+0x98>
  8f:	83 4b 08 01          	orl    $0x1,0x8(%rbx)
  93:	e9 cd 01 00 00       	jmp    265 <DmxSerialParams::callbackFunction(char const*)+0x265>
  98:	83 63 08 fe          	andl   $0xfffffffe,0x8(%rbx)
  9c:	e9 c4 01 00 00       	jmp    265 <DmxSerialParams::callbackFunction(char const*)+0x265>
  a1:	4c 8d 7c 24 10       	lea    0x10(%rsp),%r15
  a6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # ad <DmxSerialParams::callbackFunction(char const*)+0xad>
  ad:	48 89 ef             	mov    %rbp,%rdi
  b0:	4c 89 fa             	mov    %r15,%rdx
  b3:	e8 00 00 00 00       	call   b8 <DmxSerialParams::callbackFunction(char const*)+0xb8>
  b8:	85 c0                	test   %eax,%eax
  ba:	75 1d                	jne    d9 <DmxSerialParams::callbackFunction(char const*)+0xd9>
  bc:	8b 43 08             	mov    0x8(%rbx),%eax
  bf:	8b 54 24 10          	mov    0x10(%rsp),%edx
  c3:	89 c1                	mov    %eax,%ecx
  c5:	89 53 0d             	mov    %edx,0xd(%rbx)
  c8:	83 c8 02             	or     $0x2,%eax
  cb:	83 e1 fd             	and    $0xfffffffd,%ecx
  ce:	81 fa 00 c2 01 00    	cmp    $0x1c200,%edx
  d4:	e9 3b 01 00 00       	jmp    214 <DmxSerialParams::callbackFunction(char const*)+0x214>
  d9:	4c 8d 6c 24 0f       	lea    0xf(%rsp),%r13
  de:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # e5 <DmxSerialParams::callbackFunction(char const*)+0xe5>
  e5:	48 89 ef             	mov    %rbp,%rdi
  e8:	4c 89 ea             	mov    %r13,%rdx
  eb:	e8 00 00 00 00       	call   f0 <DmxSerialParams::callbackFunction(char const*)+0xf0>
  f0:	85 c0                	test   %eax,%eax
  f2:	75 1a                	jne    10e <DmxSerialParams::callbackFunction(char const*)+0x10e>
  f4:	8b 43 08             	mov    0x8(%rbx),%eax
  f7:	8a 54 24 0f          	mov    0xf(%rsp),%dl
  fb:	89 c1                	mov    %eax,%ecx
  fd:	88 53 11             	mov    %dl,0x11(%rbx)
 100:	83 c8 04             	or     $0x4,%eax
 103:	83 e1 fb             	and    $0xfffffffb,%ecx
 106:	80 fa 08             	cmp    $0x8,%dl
 109:	e9 06 01 00 00       	jmp    214 <DmxSerialParams::callbackFunction(char const*)+0x214>
 10e:	4c 89 f1             	mov    %r14,%rcx
 111:	4c 89 e2             	mov    %r12,%rdx
 114:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 11b <DmxSerialParams::callbackFunction(char const*)+0x11b>
 11b:	48 89 ef             	mov    %rbp,%rdi
 11e:	c7 44 24 14 0f 00 00 	movl   $0xf,0x14(%rsp)
 125:	00 
 126:	e8 00 00 00 00       	call   12b <DmxSerialParams::callbackFunction(char const*)+0x12b>
 12b:	85 c0                	test   %eax,%eax
 12d:	75 2a                	jne    159 <DmxSerialParams::callbackFunction(char const*)+0x159>
 12f:	8b 44 24 14          	mov    0x14(%rsp),%eax
 133:	4c 89 e7             	mov    %r12,%rdi
 136:	c6 44 04 18 00       	movb   $0x0,0x18(%rsp,%rax,1)
 13b:	e8 00 00 00 00       	call   140 <DmxSerialParams::callbackFunction(char const*)+0x140>
 140:	88 43 12             	mov    %al,0x12(%rbx)
 143:	84 c0                	test   %al,%al
 145:	74 09                	je     150 <DmxSerialParams::callbackFunction(char const*)+0x150>
 147:	83 4b 08 08          	orl    $0x8,0x8(%rbx)
 14b:	e9 15 01 00 00       	jmp    265 <DmxSerialParams::callbackFunction(char const*)+0x265>
 150:	83 63 08 f7          	andl   $0xfffffff7,0x8(%rbx)
 154:	e9 0c 01 00 00       	jmp    265 <DmxSerialParams::callbackFunction(char const*)+0x265>
 159:	4c 89 ea             	mov    %r13,%rdx
 15c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 163 <DmxSerialParams::callbackFunction(char const*)+0x163>
 163:	48 89 ef             	mov    %rbp,%rdi
 166:	e8 00 00 00 00       	call   16b <DmxSerialParams::callbackFunction(char const*)+0x16b>
 16b:	85 c0                	test   %eax,%eax
 16d:	75 19                	jne    188 <DmxSerialParams::callbackFunction(char const*)+0x188>
 16f:	8b 43 08             	mov    0x8(%rbx),%eax
 172:	8a 54 24 0f          	mov    0xf(%rsp),%dl
 176:	89 c1                	mov    %eax,%ecx
 178:	88 53 13             	mov    %dl,0x13(%rbx)
 17b:	83 c8 10             	or     $0x10,%eax
 17e:	83 e1 ef             	and    $0xffffffef,%ecx
 181:	fe ca                	dec    %dl
 183:	e9 8c 00 00 00       	jmp    214 <DmxSerialParams::callbackFunction(char const*)+0x214>
 188:	4c 89 fa             	mov    %r15,%rdx
 18b:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 192 <DmxSerialParams::callbackFunction(char const*)+0x192>
 192:	48 89 ef             	mov    %rbp,%rdi
 195:	e8 00 00 00 00       	call   19a <DmxSerialParams::callbackFunction(char const*)+0x19a>
 19a:	85 c0                	test   %eax,%eax
 19c:	75 1a                	jne    1b8 <DmxSerialParams::callbackFunction(char const*)+0x1b8>
 19e:	8b 43 08             	mov    0x8(%rbx),%eax
 1a1:	8b 54 24 10          	mov    0x10(%rsp),%edx
 1a5:	89 c1                	mov    %eax,%ecx
 1a7:	89 53 14             	mov    %edx,0x14(%rbx)
 1aa:	83 c8 20             	or     $0x20,%eax
 1ad:	83 e1 df             	and    $0xffffffdf,%ecx
 1b0:	81 fa 40 42 0f 00    	cmp    $0xf4240,%edx
 1b6:	eb 5c                	jmp    214 <DmxSerialParams::callbackFunction(char const*)+0x214>
 1b8:	4c 89 ea             	mov    %r13,%rdx
 1bb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1c2 <DmxSerialParams::callbackFunction(char const*)+0x1c2>
 1c2:	48 89 ef             	mov    %rbp,%rdi
 1c5:	e8 00 00 00 00       	call   1ca <DmxSerialParams::callbackFunction(char const*)+0x1ca>
 1ca:	85 c0                	test   %eax,%eax
 1cc:	75 1c                	jne    1ea <DmxSerialParams::callbackFunction(char const*)+0x1ea>
 1ce:	8a 54 24 0f          	mov    0xf(%rsp),%dl
 1d2:	8b 43 08             	mov    0x8(%rbx),%eax
 1d5:	88 53 18             	mov    %dl,0x18(%rbx)
 1d8:	89 c1                	mov    %eax,%ecx
 1da:	ff ca                	dec    %edx
 1dc:	83 e0 bf             	and    $0xffffffbf,%eax
 1df:	83 c9 40             	or     $0x40,%ecx
 1e2:	80 fa 02             	cmp    $0x2,%dl
 1e5:	0f 46 c1             	cmovbe %ecx,%eax
 1e8:	eb 2d                	jmp    217 <DmxSerialParams::callbackFunction(char const*)+0x217>
 1ea:	4c 89 ea             	mov    %r13,%rdx
 1ed:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1f4 <DmxSerialParams::callbackFunction(char const*)+0x1f4>
 1f4:	48 89 ef             	mov    %rbp,%rdi
 1f7:	e8 00 00 00 00       	call   1fc <DmxSerialParams::callbackFunction(char const*)+0x1fc>
 1fc:	85 c0                	test   %eax,%eax
 1fe:	75 1c                	jne    21c <DmxSerialParams::callbackFunction(char const*)+0x21c>
 200:	8a 54 24 0f          	mov    0xf(%rsp),%dl
 204:	8b 43 08             	mov    0x8(%rbx),%eax
 207:	88 53 19             	mov    %dl,0x19(%rbx)
 20a:	89 c1                	mov    %eax,%ecx
 20c:	0c 80                	or     $0x80,%al
 20e:	80 e1 7f             	and    $0x7f,%cl
 211:	80 fa 30             	cmp    $0x30,%dl
 214:	0f 44 c1             	cmove  %ecx,%eax
 217:	89 43 08             	mov    %eax,0x8(%rbx)
 21a:	eb 49                	jmp    265 <DmxSerialParams::callbackFunction(char const*)+0x265>
 21c:	4c 89 f1             	mov    %r14,%rcx
 21f:	4c 89 e2             	mov    %r12,%rdx
 222:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 229 <DmxSerialParams::callbackFunction(char const*)+0x229>
 229:	48 89 ef             	mov    %rbp,%rdi
 22c:	c7 44 24 14 0f 00 00 	movl   $0xf,0x14(%rsp)
 233:	00 
 234:	e8 00 00 00 00       	call   239 <DmxSerialParams::callbackFunction(char const*)+0x239>
 239:	85 c0                	test   %eax,%eax
 23b:	75 28                	jne    265 <DmxSerialParams::callbackFunction(char const*)+0x265>
 23d:	8b 44 24 14          	mov    0x14(%rsp),%eax
 241:	4c 89 e7             	mov    %r12,%rdi
 244:	c6 44 04 18 00       	movb   $0x0,0x18(%rsp,%rax,1)
 249:	e8 00 00 00 00       	call   24e <DmxSerialParams::callbackFunction(char const*)+0x24e>
 24e:	88 43 1a             	mov    %al,0x1a(%rbx)
 251:	fe c8                	dec    %al
 253:	74 09                	je     25e <DmxSerialParams::callbackFunction(char const*)+0x25e>
 255:	81 4b 08 00 01 00 00 	orl    $0x100,0x8(%rbx)
 25c:	eb 07                	jmp    265 <DmxSerialParams::callbackFunction(char const*)+0x265>
 25e:	81 63 08 ff fe ff ff 	andl   $0xfffffeff,0x8(%rbx)
 265:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
 26a:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 271:	00 00 
 273:	74 05                	je     27a <DmxSerialParams::callbackFunction(char const*)+0x27a>
 275:	e8 00 00 00 00       	call   27a <DmxSerialParams::callbackFunction(char const*)+0x27a>
 27a:	48 83 c4 38          	add    $0x38,%rsp
 27e:	5b                   	pop    %rbx
 27f:	5d                   	pop    %rbp
 280:	41 5c                	pop    %r12
 282:	41 5d                	pop    %r13
 284:	41 5e                	pop    %r14
 286:	41 5f                	pop    %r15
 288:	c3                   	ret    

Disassembly of section .text._ZN15DmxSerialParams7BuilderEPK16TDmxSerialParamsPcjRj:

0000000000000000 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 56                	push   %r14
   6:	41 55                	push   %r13
   8:	41 54                	push   %r12
   a:	55                   	push   %rbp
   b:	53                   	push   %rbx
   c:	48 83 ec 20          	sub    $0x20,%rsp
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 85 d2             	test   %rdx,%rdx
  23:	75 1f                	jne    44 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x44>
  25:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 2c <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x2c>
  2c:	ba ec 00 00 00       	mov    $0xec,%edx
  31:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 38 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x38>
  38:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 3f <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x3f>
  3f:	e8 00 00 00 00       	call   44 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x44>
  44:	4d 89 c5             	mov    %r8,%r13
  47:	48 89 fb             	mov    %rdi,%rbx
  4a:	49 89 d4             	mov    %rdx,%r12
  4d:	41 89 ce             	mov    %ecx,%r14d
  50:	4c 8d 47 08          	lea    0x8(%rdi),%r8
  54:	48 85 f6             	test   %rsi,%rsi
  57:	74 0c                	je     65 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x65>
  59:	b9 13 00 00 00       	mov    $0x13,%ecx
  5e:	4c 89 c7             	mov    %r8,%rdi
  61:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  63:	eb 0c                	jmp    71 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x71>
  65:	48 8b 3f             	mov    (%rdi),%rdi
  68:	4c 89 c6             	mov    %r8,%rsi
  6b:	48 8b 07             	mov    (%rdi),%rax
  6e:	ff 50 18             	call   *0x18(%rax)
  71:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  76:	4c 89 e2             	mov    %r12,%rdx
  79:	44 89 f1             	mov    %r14d,%ecx
  7c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 83 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x83>
  83:	48 89 ef             	mov    %rbp,%rdi
  86:	e8 00 00 00 00       	call   8b <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x8b>
  8b:	be 01 00 00 00       	mov    $0x1,%esi
  90:	48 89 df             	mov    %rbx,%rdi
  93:	e8 00 00 00 00       	call   98 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x98>
  98:	0f b6 7b 0c          	movzbl 0xc(%rbx),%edi
  9c:	41 89 c4             	mov    %eax,%r12d
  9f:	e8 00 00 00 00       	call   a4 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0xa4>
  a4:	41 0f b6 cc          	movzbl %r12b,%ecx
  a8:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  ae:	48 89 ef             	mov    %rbp,%rdi
  b1:	48 89 c2             	mov    %rax,%rdx
  b4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # bb <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0xbb>
  bb:	e8 00 00 00 00       	call   c0 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0xc0>
  c0:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # c7 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0xc7>
  c7:	48 89 ef             	mov    %rbp,%rdi
  ca:	e8 00 00 00 00       	call   cf <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0xcf>
  cf:	be 02 00 00 00       	mov    $0x2,%esi
  d4:	48 89 df             	mov    %rbx,%rdi
  d7:	e8 00 00 00 00       	call   dc <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0xdc>
  dc:	8b 53 0d             	mov    0xd(%rbx),%edx
  df:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  e5:	48 89 ef             	mov    %rbp,%rdi
  e8:	0f b6 c8             	movzbl %al,%ecx
  eb:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # f2 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0xf2>
  f2:	e8 00 00 00 00       	call   f7 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0xf7>
  f7:	be 04 00 00 00       	mov    $0x4,%esi
  fc:	48 89 df             	mov    %rbx,%rdi
  ff:	e8 00 00 00 00       	call   104 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x104>
 104:	0f b6 53 11          	movzbl 0x11(%rbx),%edx
 108:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 10e:	48 89 ef             	mov    %rbp,%rdi
 111:	0f b6 c8             	movzbl %al,%ecx
 114:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 11b <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x11b>
 11b:	e8 00 00 00 00       	call   120 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x120>
 120:	be 08 00 00 00       	mov    $0x8,%esi
 125:	48 89 df             	mov    %rbx,%rdi
 128:	e8 00 00 00 00       	call   12d <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x12d>
 12d:	0f b6 7b 12          	movzbl 0x12(%rbx),%edi
 131:	41 89 c4             	mov    %eax,%r12d
 134:	e8 00 00 00 00       	call   139 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x139>
 139:	41 0f b6 cc          	movzbl %r12b,%ecx
 13d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 143:	48 89 ef             	mov    %rbp,%rdi
 146:	48 89 c2             	mov    %rax,%rdx
 149:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 150 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x150>
 150:	e8 00 00 00 00       	call   155 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x155>
 155:	be 10 00 00 00       	mov    $0x10,%esi
 15a:	48 89 df             	mov    %rbx,%rdi
 15d:	e8 00 00 00 00       	call   162 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x162>
 162:	0f b6 53 13          	movzbl 0x13(%rbx),%edx
 166:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 16c:	48 89 ef             	mov    %rbp,%rdi
 16f:	0f b6 c8             	movzbl %al,%ecx
 172:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 179 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x179>
 179:	e8 00 00 00 00       	call   17e <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x17e>
 17e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 185 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x185>
 185:	48 89 ef             	mov    %rbp,%rdi
 188:	e8 00 00 00 00       	call   18d <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x18d>
 18d:	be 20 00 00 00       	mov    $0x20,%esi
 192:	48 89 df             	mov    %rbx,%rdi
 195:	e8 00 00 00 00       	call   19a <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x19a>
 19a:	8b 53 14             	mov    0x14(%rbx),%edx
 19d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 1a3:	48 89 ef             	mov    %rbp,%rdi
 1a6:	0f b6 c8             	movzbl %al,%ecx
 1a9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1b0 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x1b0>
 1b0:	e8 00 00 00 00       	call   1b5 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x1b5>
 1b5:	be 40 00 00 00       	mov    $0x40,%esi
 1ba:	48 89 df             	mov    %rbx,%rdi
 1bd:	e8 00 00 00 00       	call   1c2 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x1c2>
 1c2:	0f b6 53 18          	movzbl 0x18(%rbx),%edx
 1c6:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 1cc:	48 89 ef             	mov    %rbp,%rdi
 1cf:	0f b6 c8             	movzbl %al,%ecx
 1d2:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1d9 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x1d9>
 1d9:	e8 00 00 00 00       	call   1de <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x1de>
 1de:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1e5 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x1e5>
 1e5:	48 89 ef             	mov    %rbp,%rdi
 1e8:	e8 00 00 00 00       	call   1ed <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x1ed>
 1ed:	be 80 00 00 00       	mov    $0x80,%esi
 1f2:	48 89 df             	mov    %rbx,%rdi
 1f5:	e8 00 00 00 00       	call   1fa <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x1fa>
 1fa:	0f b6 53 19          	movzbl 0x19(%rbx),%edx
 1fe:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 205 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x205>
 205:	48 89 ef             	mov    %rbp,%rdi
 208:	0f b6 c8             	movzbl %al,%ecx
 20b:	e8 00 00 00 00       	call   210 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x210>
 210:	be 00 01 00 00       	mov    $0x100,%esi
 215:	48 89 df             	mov    %rbx,%rdi
 218:	e8 00 00 00 00       	call   21d <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x21d>
 21d:	0f b6 7b 1a          	movzbl 0x1a(%rbx),%edi
 221:	41 89 c4             	mov    %eax,%r12d
 224:	e8 00 00 00 00       	call   229 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x229>
 229:	41 0f b6 cc          	movzbl %r12b,%ecx
 22d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 233:	48 89 ef             	mov    %rbp,%rdi
 236:	48 89 c2             	mov    %rax,%rdx
 239:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 240 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x240>
 240:	e8 00 00 00 00       	call   245 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x245>
 245:	48 89 ef             	mov    %rbp,%rdi
 248:	e8 00 00 00 00       	call   24d <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x24d>
 24d:	0f b7 c0             	movzwl %ax,%eax
 250:	41 89 45 00          	mov    %eax,0x0(%r13)
 254:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
 259:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 260:	00 00 
 262:	74 05                	je     269 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x269>
 264:	e8 00 00 00 00       	call   269 <DmxSerialParams::Builder(TDmxSerialParams const*, char*, unsigned int, unsigned int&)+0x269>
 269:	48 83 c4 20          	add    $0x20,%rsp
 26d:	5b                   	pop    %rbx
 26e:	5d                   	pop    %rbp
 26f:	41 5c                	pop    %r12
 271:	41 5d                	pop    %r13
 273:	41 5e                	pop    %r14
 275:	c3                   	ret    

Disassembly of section .text._ZN15DmxSerialParams4SaveEPcjRj:

0000000000000000 <DmxSerialParams::Save(char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 57                	push   %r15
   6:	31 c0                	xor    %eax,%eax
   8:	41 89 d7             	mov    %edx,%r15d
   b:	41 56                	push   %r14
   d:	49 89 f6             	mov    %rsi,%r14
  10:	41 55                	push   %r13
  12:	4c 8d 2d 00 00 00 00 	lea    0x0(%rip),%r13        # 19 <DmxSerialParams::Save(char*, unsigned int, unsigned int&)+0x19>
  19:	41 54                	push   %r12
  1b:	4c 8d 25 00 00 00 00 	lea    0x0(%rip),%r12        # 22 <DmxSerialParams::Save(char*, unsigned int, unsigned int&)+0x22>
  22:	4c 89 ea             	mov    %r13,%rdx
  25:	55                   	push   %rbp
  26:	4c 89 e6             	mov    %r12,%rsi
  29:	48 89 fd             	mov    %rdi,%rbp
  2c:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 33 <DmxSerialParams::Save(char*, unsigned int, unsigned int&)+0x33>
  33:	53                   	push   %rbx
  34:	48 89 cb             	mov    %rcx,%rbx
  37:	b9 0a 01 00 00       	mov    $0x10a,%ecx
  3c:	41 51                	push   %r9
  3e:	e8 00 00 00 00       	call   43 <DmxSerialParams::Save(char*, unsigned int, unsigned int&)+0x43>
  43:	48 83 7d 00 00       	cmpq   $0x0,0x0(%rbp)
  48:	75 1a                	jne    64 <DmxSerialParams::Save(char*, unsigned int, unsigned int&)+0x64>
  4a:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
  50:	4c 8d 0d 00 00 00 00 	lea    0x0(%rip),%r9        # 57 <DmxSerialParams::Save(char*, unsigned int, unsigned int&)+0x57>
  57:	4c 89 ea             	mov    %r13,%rdx
  5a:	4c 89 e6             	mov    %r12,%rsi
  5d:	b9 0e 01 00 00       	mov    $0x10e,%ecx
  62:	eb 25                	jmp    89 <DmxSerialParams::Save(char*, unsigned int, unsigned int&)+0x89>
  64:	44 89 f9             	mov    %r15d,%ecx
  67:	4c 89 f2             	mov    %r14,%rdx
  6a:	31 f6                	xor    %esi,%esi
  6c:	49 89 d8             	mov    %rbx,%r8
  6f:	48 89 ef             	mov    %rbp,%rdi
  72:	e8 00 00 00 00       	call   77 <DmxSerialParams::Save(char*, unsigned int, unsigned int&)+0x77>
  77:	b9 14 01 00 00       	mov    $0x114,%ecx
  7c:	4c 89 ea             	mov    %r13,%rdx
  7f:	4c 89 e6             	mov    %r12,%rsi
  82:	4c 8d 0d 00 00 00 00 	lea    0x0(%rip),%r9        # 89 <DmxSerialParams::Save(char*, unsigned int, unsigned int&)+0x89>
  89:	41 58                	pop    %r8
  8b:	4c 89 cf             	mov    %r9,%rdi
  8e:	5b                   	pop    %rbx
  8f:	31 c0                	xor    %eax,%eax
  91:	5d                   	pop    %rbp
  92:	41 5c                	pop    %r12
  94:	41 5d                	pop    %r13
  96:	41 5e                	pop    %r14
  98:	41 5f                	pop    %r15
  9a:	e9 00 00 00 00       	jmp    9f <.LC7+0x31>

Disassembly of section .text._ZN15DmxSerialParams3SetEv:

0000000000000000 <DmxSerialParams::Set()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	53                   	push   %rbx
   5:	be 01 00 00 00       	mov    $0x1,%esi
   a:	48 89 fb             	mov    %rdi,%rbx
   d:	e8 00 00 00 00       	call   12 <DmxSerialParams::Set()+0x12>
  12:	84 c0                	test   %al,%al
  14:	74 11                	je     27 <DmxSerialParams::Set()+0x27>
  16:	e8 00 00 00 00       	call   1b <DmxSerialParams::Set()+0x1b>
  1b:	0f b6 73 0c          	movzbl 0xc(%rbx),%esi
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	call   27 <DmxSerialParams::Set()+0x27>
  27:	be 02 00 00 00       	mov    $0x2,%esi
  2c:	48 89 df             	mov    %rbx,%rdi
  2f:	e8 00 00 00 00       	call   34 <DmxSerialParams::Set()+0x34>
  34:	84 c0                	test   %al,%al
  36:	74 10                	je     48 <DmxSerialParams::Set()+0x48>
  38:	e8 00 00 00 00       	call   3d <DmxSerialParams::Set()+0x3d>
  3d:	8b 73 0d             	mov    0xd(%rbx),%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <DmxSerialParams::Set()+0x48>
  48:	be 04 00 00 00       	mov    $0x4,%esi
  4d:	48 89 df             	mov    %rbx,%rdi
  50:	e8 00 00 00 00       	call   55 <DmxSerialParams::Set()+0x55>
  55:	84 c0                	test   %al,%al
  57:	74 11                	je     6a <DmxSerialParams::Set()+0x6a>
  59:	e8 00 00 00 00       	call   5e <DmxSerialParams::Set()+0x5e>
  5e:	0f b6 73 11          	movzbl 0x11(%rbx),%esi
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	call   6a <DmxSerialParams::Set()+0x6a>
  6a:	be 08 00 00 00       	mov    $0x8,%esi
  6f:	48 89 df             	mov    %rbx,%rdi
  72:	e8 00 00 00 00       	call   77 <DmxSerialParams::Set()+0x77>
  77:	84 c0                	test   %al,%al
  79:	74 11                	je     8c <DmxSerialParams::Set()+0x8c>
  7b:	e8 00 00 00 00       	call   80 <DmxSerialParams::Set()+0x80>
  80:	0f b6 73 12          	movzbl 0x12(%rbx),%esi
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	call   8c <DmxSerialParams::Set()+0x8c>
  8c:	be 10 00 00 00       	mov    $0x10,%esi
  91:	48 89 df             	mov    %rbx,%rdi
  94:	e8 00 00 00 00       	call   99 <DmxSerialParams::Set()+0x99>
  99:	84 c0                	test   %al,%al
  9b:	74 11                	je     ae <DmxSerialParams::Set()+0xae>
  9d:	e8 00 00 00 00       	call   a2 <DmxSerialParams::Set()+0xa2>
  a2:	0f b6 73 13          	movzbl 0x13(%rbx),%esi
  a6:	48 89 c7             	mov    %rax,%rdi
  a9:	e8 00 00 00 00       	call   ae <DmxSerialParams::Set()+0xae>
  ae:	be 20 00 00 00       	mov    $0x20,%esi
  b3:	48 89 df             	mov    %rbx,%rdi
  b6:	e8 00 00 00 00       	call   bb <DmxSerialParams::Set()+0xbb>
  bb:	84 c0                	test   %al,%al
  bd:	74 10                	je     cf <DmxSerialParams::Set()+0xcf>
  bf:	e8 00 00 00 00       	call   c4 <DmxSerialParams::Set()+0xc4>
  c4:	8b 73 14             	mov    0x14(%rbx),%esi
  c7:	48 89 c7             	mov    %rax,%rdi
  ca:	e8 00 00 00 00       	call   cf <DmxSerialParams::Set()+0xcf>
  cf:	be 40 00 00 00       	mov    $0x40,%esi
  d4:	48 89 df             	mov    %rbx,%rdi
  d7:	e8 00 00 00 00       	call   dc <DmxSerialParams::Set()+0xdc>
  dc:	84 c0                	test   %al,%al
  de:	74 11                	je     f1 <DmxSerialParams::Set()+0xf1>
  e0:	e8 00 00 00 00       	call   e5 <DmxSerialParams::Set()+0xe5>
  e5:	0f b6 73 18          	movzbl 0x18(%rbx),%esi
  e9:	48 89 c7             	mov    %rax,%rdi
  ec:	e8 00 00 00 00       	call   f1 <DmxSerialParams::Set()+0xf1>
  f1:	be 80 00 00 00       	mov    $0x80,%esi
  f6:	48 89 df             	mov    %rbx,%rdi
  f9:	e8 00 00 00 00       	call   fe <DmxSerialParams::Set()+0xfe>
  fe:	84 c0                	test   %al,%al
 100:	74 11                	je     113 <DmxSerialParams::Set()+0x113>
 102:	e8 00 00 00 00       	call   107 <DmxSerialParams::Set()+0x107>
 107:	0f b6 73 19          	movzbl 0x19(%rbx),%esi
 10b:	48 89 c7             	mov    %rax,%rdi
 10e:	e8 00 00 00 00       	call   113 <DmxSerialParams::Set()+0x113>
 113:	be 00 01 00 00       	mov    $0x100,%esi
 118:	48 89 df             	mov    %rbx,%rdi
 11b:	e8 00 00 00 00       	call   120 <DmxSerialParams::Set()+0x120>
 120:	84 c0                	test   %al,%al
 122:	74 12                	je     136 <DmxSerialParams::Set()+0x136>
 124:	e8 00 00 00 00       	call   129 <DmxSerialParams::Set()+0x129>
 129:	0f b6 73 1a          	movzbl 0x1a(%rbx),%esi
 12d:	5b                   	pop    %rbx
 12e:	48 89 c7             	mov    %rax,%rdi
 131:	e9 00 00 00 00       	jmp    136 <DmxSerialParams::Set()+0x136>
 136:	5b                   	pop    %rbx
 137:	c3                   	ret    

Disassembly of section .text._ZN15DmxSerialParams22staticCallbackFunctionEPvPKc:

0000000000000000 <DmxSerialParams::staticCallbackFunction(void*, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	52                   	push   %rdx
   5:	48 85 ff             	test   %rdi,%rdi
   8:	75 1c                	jne    26 <DmxSerialParams::staticCallbackFunction(void*, char const*)+0x26>
   a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 11 <DmxSerialParams::staticCallbackFunction(void*, char const*)+0x11>
  11:	ba 3e 01 00 00       	mov    $0x13e,%edx
  16:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1d <DmxSerialParams::staticCallbackFunction(void*, char const*)+0x1d>
  1d:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 24 <DmxSerialParams::staticCallbackFunction(void*, char const*)+0x24>
  24:	eb 1f                	jmp    45 <DmxSerialParams::staticCallbackFunction(void*, char const*)+0x45>
  26:	48 85 f6             	test   %rsi,%rsi
  29:	75 1f                	jne    4a <DmxSerialParams::staticCallbackFunction(void*, char const*)+0x4a>
  2b:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 32 <DmxSerialParams::staticCallbackFunction(void*, char const*)+0x32>
  32:	ba 3f 01 00 00       	mov    $0x13f,%edx
  37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e <DmxSerialParams::staticCallbackFunction(void*, char const*)+0x3e>
  3e:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 45 <DmxSerialParams::staticCallbackFunction(void*, char const*)+0x45>
  45:	e8 00 00 00 00       	call   4a <DmxSerialParams::staticCallbackFunction(void*, char const*)+0x4a>
  4a:	58                   	pop    %rax
  4b:	e9 00 00 00 00       	jmp    50 <.LC20+0x8>

Disassembly of section .text._ZN17PropertiesBuilder3AddIPKcEEbS2_T_bj:

0000000000000000 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 52                	push   %r10
   8:	49 89 f2             	mov    %rsi,%r10
   b:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 33                	jmp    4f <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x4f>
  1c:	48 89 d0             	mov    %rdx,%rax
  1f:	48 89 fb             	mov    %rdi,%rbx
  22:	0f b7 d6             	movzwl %si,%edx
  25:	48 03 37             	add    (%rdi),%rsi
  28:	57                   	push   %rdi
  29:	29 d5                	sub    %edx,%ebp
  2b:	44 0f b6 c9          	movzbl %cl,%r9d
  2f:	48 89 df             	mov    %rbx,%rdi
  32:	41 50                	push   %r8
  34:	4c 89 d1             	mov    %r10,%rcx
  37:	49 89 c0             	mov    %rax,%r8
  3a:	89 ea                	mov    %ebp,%edx
  3c:	e8 00 00 00 00       	call   41 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x41>
  41:	41 58                	pop    %r8
  43:	41 59                	pop    %r9
  45:	39 c5                	cmp    %eax,%ebp
  47:	7c cf                	jl     18 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x18>
  49:	66 01 43 0a          	add    %ax,0xa(%rbx)
  4d:	b0 01                	mov    $0x1,%al
  4f:	5a                   	pop    %rdx
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIjEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<unsigned int>(char const*, unsigned int, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 52                	push   %r10
   8:	49 89 f2             	mov    %rsi,%r10
   b:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<unsigned int>(char const*, unsigned int, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 32                	jmp    4e <bool PropertiesBuilder::Add<unsigned int>(char const*, unsigned int, bool, unsigned int)+0x4e>
  1c:	89 d0                	mov    %edx,%eax
  1e:	48 89 fb             	mov    %rdi,%rbx
  21:	0f b7 d6             	movzwl %si,%edx
  24:	48 03 37             	add    (%rdi),%rsi
  27:	57                   	push   %rdi
  28:	29 d5                	sub    %edx,%ebp
  2a:	44 0f b6 c9          	movzbl %cl,%r9d
  2e:	48 89 df             	mov    %rbx,%rdi
  31:	41 50                	push   %r8
  33:	4c 89 d1             	mov    %r10,%rcx
  36:	41 89 c0             	mov    %eax,%r8d
  39:	89 ea                	mov    %ebp,%edx
  3b:	e8 00 00 00 00       	call   40 <bool PropertiesBuilder::Add<unsigned int>(char const*, unsigned int, bool, unsigned int)+0x40>
  40:	41 58                	pop    %r8
  42:	41 59                	pop    %r9
  44:	39 c5                	cmp    %eax,%ebp
  46:	7c d0                	jl     18 <bool PropertiesBuilder::Add<unsigned int>(char const*, unsigned int, bool, unsigned int)+0x18>
  48:	66 01 43 0a          	add    %ax,0xa(%rbx)
  4c:	b0 01                	mov    $0x1,%al
  4e:	5a                   	pop    %rdx
  4f:	5b                   	pop    %rbx
  50:	5d                   	pop    %rbp
  51:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIhEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 52                	push   %r10
   8:	49 89 f2             	mov    %rsi,%r10
   b:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 33                	jmp    4f <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x4f>
  1c:	89 d0                	mov    %edx,%eax
  1e:	48 89 fb             	mov    %rdi,%rbx
  21:	0f b7 d6             	movzwl %si,%edx
  24:	48 03 37             	add    (%rdi),%rsi
  27:	57                   	push   %rdi
  28:	29 d5                	sub    %edx,%ebp
  2a:	44 0f b6 c9          	movzbl %cl,%r9d
  2e:	48 89 df             	mov    %rbx,%rdi
  31:	41 50                	push   %r8
  33:	4c 89 d1             	mov    %r10,%rcx
  36:	44 0f b6 c0          	movzbl %al,%r8d
  3a:	89 ea                	mov    %ebp,%edx
  3c:	e8 00 00 00 00       	call   41 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x41>
  41:	41 58                	pop    %r8
  43:	41 59                	pop    %r9
  45:	39 c5                	cmp    %eax,%ebp
  47:	7c cf                	jl     18 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x18>
  49:	66 01 43 0a          	add    %ax,0xa(%rbx)
  4d:	b0 01                	mov    $0x1,%al
  4f:	5a                   	pop    %rdx
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIjEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fa             	mov    %rdi,%r10
   7:	48 89 f7             	mov    %rsi,%rdi
   a:	89 d6                	mov    %edx,%esi
   c:	41 8a 42 0c          	mov    0xc(%r10),%al
  10:	45 84 c9             	test   %r9b,%r9b
  13:	75 06                	jne    1b <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x1b>
  15:	84 c0                	test   %al,%al
  17:	75 0d                	jne    26 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x26>
  19:	eb 14                	jmp    2f <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x2f>
  1b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 22 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x22>
  22:	84 c0                	test   %al,%al
  24:	74 10                	je     36 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x36>
  26:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x2d>
  2d:	eb 07                	jmp    36 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x36>
  2f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 36 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x36>
  36:	31 c0                	xor    %eax,%eax
  38:	e9 00 00 00 00       	jmp    3d <.LC6+0x7>

Disassembly of section .text._ZN17PropertiesBuilder8add_partIhEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fa             	mov    %rdi,%r10
   7:	45 0f b6 c0          	movzbl %r8b,%r8d
   b:	48 89 f7             	mov    %rsi,%rdi
   e:	89 d6                	mov    %edx,%esi
  10:	41 8a 42 0c          	mov    0xc(%r10),%al
  14:	45 84 c9             	test   %r9b,%r9b
  17:	75 06                	jne    1f <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x1f>
  19:	84 c0                	test   %al,%al
  1b:	75 0d                	jne    2a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x2a>
  1d:	eb 14                	jmp    33 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x33>
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x26>
  26:	84 c0                	test   %al,%al
  28:	74 10                	je     3a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x3a>
  2a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 31 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x31>
  31:	eb 07                	jmp    3a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x3a>
  33:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x3a>
  3a:	31 c0                	xor    %eax,%eax
  3c:	e9 00 00 00 00       	jmp    41 <.LC6+0xb>

dmxserialparamsdump.o:     file format elf64-x86-64


Disassembly of section .text._ZNK15DmxSerialParams9isMaskSetEj:

0000000000000000 <DmxSerialParams::isMaskSet(unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	8b 40 08             	mov    0x8(%rax),%eax
  16:	23 45 f4             	and    -0xc(%rbp),%eax
  19:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  1c:	0f 94 c0             	sete   %al
  1f:	5d                   	pop    %rbp
  20:	c3                   	ret    

Disassembly of section .text._ZN15DmxSerialParams4DumpEv:

0000000000000000 <DmxSerialParams::Dump()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 18          	sub    $0x18,%rsp
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 18 <DmxSerialParams::Dump()+0x18>
  18:	48 89 c1             	mov    %rax,%rcx
  1b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 22 <DmxSerialParams::Dump()+0x22>
  22:	48 89 c2             	mov    %rax,%rdx
  25:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2c <DmxSerialParams::Dump()+0x2c>
  2c:	48 89 c6             	mov    %rax,%rsi
  2f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 36 <DmxSerialParams::Dump()+0x36>
  36:	48 89 c7             	mov    %rax,%rdi
  39:	b8 00 00 00 00       	mov    $0x0,%eax
  3e:	e8 00 00 00 00       	call   43 <DmxSerialParams::Dump()+0x43>
  43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  47:	be 01 00 00 00       	mov    $0x1,%esi
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	call   54 <DmxSerialParams::Dump()+0x54>
  54:	84 c0                	test   %al,%al
  56:	74 43                	je     9b <DmxSerialParams::Dump()+0x9b>
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  60:	0f b6 c0             	movzbl %al,%eax
  63:	89 c7                	mov    %eax,%edi
  65:	e8 00 00 00 00       	call   6a <DmxSerialParams::Dump()+0x6a>
  6a:	48 89 c2             	mov    %rax,%rdx
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  75:	0f b6 c0             	movzbl %al,%eax
  78:	48 89 d1             	mov    %rdx,%rcx
  7b:	89 c2                	mov    %eax,%edx
  7d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 84 <DmxSerialParams::Dump()+0x84>
  84:	48 89 c6             	mov    %rax,%rsi
  87:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 8e <DmxSerialParams::Dump()+0x8e>
  8e:	48 89 c7             	mov    %rax,%rdi
  91:	b8 00 00 00 00       	mov    $0x0,%eax
  96:	e8 00 00 00 00       	call   9b <DmxSerialParams::Dump()+0x9b>
  9b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9f:	be 02 00 00 00       	mov    $0x2,%esi
  a4:	48 89 c7             	mov    %rax,%rdi
  a7:	e8 00 00 00 00       	call   ac <DmxSerialParams::Dump()+0xac>
  ac:	84 c0                	test   %al,%al
  ae:	74 27                	je     d7 <DmxSerialParams::Dump()+0xd7>
  b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b4:	8b 40 0d             	mov    0xd(%rax),%eax
  b7:	89 c2                	mov    %eax,%edx
  b9:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c0 <DmxSerialParams::Dump()+0xc0>
  c0:	48 89 c6             	mov    %rax,%rsi
  c3:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ca <DmxSerialParams::Dump()+0xca>
  ca:	48 89 c7             	mov    %rax,%rdi
  cd:	b8 00 00 00 00       	mov    $0x0,%eax
  d2:	e8 00 00 00 00       	call   d7 <DmxSerialParams::Dump()+0xd7>
  d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  db:	be 04 00 00 00       	mov    $0x4,%esi
  e0:	48 89 c7             	mov    %rax,%rdi
  e3:	e8 00 00 00 00       	call   e8 <DmxSerialParams::Dump()+0xe8>
  e8:	84 c0                	test   %al,%al
  ea:	74 2b                	je     117 <DmxSerialParams::Dump()+0x117>
  ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f0:	0f b6 40 11          	movzbl 0x11(%rax),%eax
  f4:	0f b6 c0             	movzbl %al,%eax
  f7:	89 c2                	mov    %eax,%edx
  f9:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 100 <DmxSerialParams::Dump()+0x100>
 100:	48 89 c6             	mov    %rax,%rsi
 103:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 10a <DmxSerialParams::Dump()+0x10a>
 10a:	48 89 c7             	mov    %rax,%rdi
 10d:	b8 00 00 00 00       	mov    $0x0,%eax
 112:	e8 00 00 00 00       	call   117 <DmxSerialParams::Dump()+0x117>
 117:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 11b:	be 08 00 00 00       	mov    $0x8,%esi
 120:	48 89 c7             	mov    %rax,%rdi
 123:	e8 00 00 00 00       	call   128 <DmxSerialParams::Dump()+0x128>
 128:	84 c0                	test   %al,%al
 12a:	74 40                	je     16c <DmxSerialParams::Dump()+0x16c>
 12c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 130:	0f b6 40 12          	movzbl 0x12(%rax),%eax
 134:	0f b6 d8             	movzbl %al,%ebx
 137:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 13b:	0f b6 40 12          	movzbl 0x12(%rax),%eax
 13f:	0f b6 c0             	movzbl %al,%eax
 142:	89 c7                	mov    %eax,%edi
 144:	e8 00 00 00 00       	call   149 <DmxSerialParams::Dump()+0x149>
 149:	89 d9                	mov    %ebx,%ecx
 14b:	48 89 c2             	mov    %rax,%rdx
 14e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 155 <DmxSerialParams::Dump()+0x155>
 155:	48 89 c6             	mov    %rax,%rsi
 158:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 15f <DmxSerialParams::Dump()+0x15f>
 15f:	48 89 c7             	mov    %rax,%rdi
 162:	b8 00 00 00 00       	mov    $0x0,%eax
 167:	e8 00 00 00 00       	call   16c <DmxSerialParams::Dump()+0x16c>
 16c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 170:	be 10 00 00 00       	mov    $0x10,%esi
 175:	48 89 c7             	mov    %rax,%rdi
 178:	e8 00 00 00 00       	call   17d <DmxSerialParams::Dump()+0x17d>
 17d:	84 c0                	test   %al,%al
 17f:	74 2b                	je     1ac <DmxSerialParams::Dump()+0x1ac>
 181:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 185:	0f b6 40 13          	movzbl 0x13(%rax),%eax
 189:	0f b6 c0             	movzbl %al,%eax
 18c:	89 c2                	mov    %eax,%edx
 18e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 195 <DmxSerialParams::Dump()+0x195>
 195:	48 89 c6             	mov    %rax,%rsi
 198:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 19f <DmxSerialParams::Dump()+0x19f>
 19f:	48 89 c7             	mov    %rax,%rdi
 1a2:	b8 00 00 00 00       	mov    $0x0,%eax
 1a7:	e8 00 00 00 00       	call   1ac <DmxSerialParams::Dump()+0x1ac>
 1ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1b0:	be 20 00 00 00       	mov    $0x20,%esi
 1b5:	48 89 c7             	mov    %rax,%rdi
 1b8:	e8 00 00 00 00       	call   1bd <DmxSerialParams::Dump()+0x1bd>
 1bd:	84 c0                	test   %al,%al
 1bf:	74 27                	je     1e8 <DmxSerialParams::Dump()+0x1e8>
 1c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1c5:	8b 40 14             	mov    0x14(%rax),%eax
 1c8:	89 c2                	mov    %eax,%edx
 1ca:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1d1 <DmxSerialParams::Dump()+0x1d1>
 1d1:	48 89 c6             	mov    %rax,%rsi
 1d4:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1db <DmxSerialParams::Dump()+0x1db>
 1db:	48 89 c7             	mov    %rax,%rdi
 1de:	b8 00 00 00 00       	mov    $0x0,%eax
 1e3:	e8 00 00 00 00       	call   1e8 <DmxSerialParams::Dump()+0x1e8>
 1e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1ec:	be 40 00 00 00       	mov    $0x40,%esi
 1f1:	48 89 c7             	mov    %rax,%rdi
 1f4:	e8 00 00 00 00       	call   1f9 <DmxSerialParams::Dump()+0x1f9>
 1f9:	84 c0                	test   %al,%al
 1fb:	74 2b                	je     228 <DmxSerialParams::Dump()+0x228>
 1fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 201:	0f b6 40 18          	movzbl 0x18(%rax),%eax
 205:	0f b6 c0             	movzbl %al,%eax
 208:	89 c2                	mov    %eax,%edx
 20a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 211 <DmxSerialParams::Dump()+0x211>
 211:	48 89 c6             	mov    %rax,%rsi
 214:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 21b <DmxSerialParams::Dump()+0x21b>
 21b:	48 89 c7             	mov    %rax,%rdi
 21e:	b8 00 00 00 00       	mov    $0x0,%eax
 223:	e8 00 00 00 00       	call   228 <DmxSerialParams::Dump()+0x228>
 228:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 22c:	be 80 00 00 00       	mov    $0x80,%esi
 231:	48 89 c7             	mov    %rax,%rdi
 234:	e8 00 00 00 00       	call   239 <DmxSerialParams::Dump()+0x239>
 239:	84 c0                	test   %al,%al
 23b:	74 2b                	je     268 <DmxSerialParams::Dump()+0x268>
 23d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 241:	0f b6 40 19          	movzbl 0x19(%rax),%eax
 245:	0f b6 c0             	movzbl %al,%eax
 248:	89 c2                	mov    %eax,%edx
 24a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 251 <DmxSerialParams::Dump()+0x251>
 251:	48 89 c6             	mov    %rax,%rsi
 254:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 25b <DmxSerialParams::Dump()+0x25b>
 25b:	48 89 c7             	mov    %rax,%rdi
 25e:	b8 00 00 00 00       	mov    $0x0,%eax
 263:	e8 00 00 00 00       	call   268 <DmxSerialParams::Dump()+0x268>
 268:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 26c:	be 00 01 00 00       	mov    $0x100,%esi
 271:	48 89 c7             	mov    %rax,%rdi
 274:	e8 00 00 00 00       	call   279 <DmxSerialParams::Dump()+0x279>
 279:	84 c0                	test   %al,%al
 27b:	74 40                	je     2bd <DmxSerialParams::Dump()+0x2bd>
 27d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 281:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
 285:	0f b6 d8             	movzbl %al,%ebx
 288:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 28c:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
 290:	0f b6 c0             	movzbl %al,%eax
 293:	89 c7                	mov    %eax,%edi
 295:	e8 00 00 00 00       	call   29a <DmxSerialParams::Dump()+0x29a>
 29a:	89 d9                	mov    %ebx,%ecx
 29c:	48 89 c2             	mov    %rax,%rdx
 29f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2a6 <DmxSerialParams::Dump()+0x2a6>
 2a6:	48 89 c6             	mov    %rax,%rsi
 2a9:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2b0 <DmxSerialParams::Dump()+0x2b0>
 2b0:	48 89 c7             	mov    %rax,%rdi
 2b3:	b8 00 00 00 00       	mov    $0x0,%eax
 2b8:	e8 00 00 00 00       	call   2bd <DmxSerialParams::Dump()+0x2bd>
 2bd:	90                   	nop
 2be:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 2c2:	c9                   	leave  
 2c3:	c3                   	ret    

dmxserialstatic.o:     file format elf64-x86-64


Disassembly of section .text._ZN9DmxSerial14FileNameCopyToEPcji:

0000000000000000 <DmxSerial::FileNameCopyTo(char*, unsigned int, int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	89 55 f0             	mov    %edx,-0x10(%rbp)
  16:	83 7d f4 0b          	cmpl   $0xb,-0xc(%rbp)
  1a:	74 28                	je     44 <DmxSerial::FileNameCopyTo(char*, unsigned int, int)+0x44>
  1c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 23 <DmxSerial::FileNameCopyTo(char*, unsigned int, int)+0x23>
  23:	48 89 c1             	mov    %rax,%rcx
  26:	ba 24 00 00 00       	mov    $0x24,%edx
  2b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 32 <DmxSerial::FileNameCopyTo(char*, unsigned int, int)+0x32>
  32:	48 89 c6             	mov    %rax,%rsi
  35:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3c <DmxSerial::FileNameCopyTo(char*, unsigned int, int)+0x3c>
  3c:	48 89 c7             	mov    %rax,%rdi
  3f:	e8 00 00 00 00       	call   44 <DmxSerial::FileNameCopyTo(char*, unsigned int, int)+0x44>
  44:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  48:	7e 30                	jle    7a <DmxSerial::FileNameCopyTo(char*, unsigned int, int)+0x7a>
  4a:	81 7d f0 00 02 00 00 	cmpl   $0x200,-0x10(%rbp)
  51:	7f 27                	jg     7a <DmxSerial::FileNameCopyTo(char*, unsigned int, int)+0x7a>
  53:	8b 75 f4             	mov    -0xc(%rbp),%esi
  56:	8b 55 f0             	mov    -0x10(%rbp),%edx
  59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5d:	89 d1                	mov    %edx,%ecx
  5f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 66 <DmxSerial::FileNameCopyTo(char*, unsigned int, int)+0x66>
  66:	48 89 c7             	mov    %rax,%rdi
  69:	b8 00 00 00 00       	mov    $0x0,%eax
  6e:	e8 00 00 00 00       	call   73 <DmxSerial::FileNameCopyTo(char*, unsigned int, int)+0x73>
  73:	b8 01 00 00 00       	mov    $0x1,%eax
  78:	eb 05                	jmp    7f <DmxSerial::FileNameCopyTo(char*, unsigned int, int)+0x7f>
  7a:	b8 00 00 00 00       	mov    $0x0,%eax
  7f:	c9                   	leave  
  80:	c3                   	ret    

Disassembly of section .text._ZN9DmxSerial13CheckFileNameEPKcRi:

0000000000000000 <DmxSerial::CheckFileName(char const*, int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1b <DmxSerial::CheckFileName(char const*, int&)+0x1b>
  1b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  1f:	49 89 d1             	mov    %rdx,%r9
  22:	41 b8 2f 00 00 00    	mov    $0x2f,%r8d
  28:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2f <DmxSerial::CheckFileName(char const*, int&)+0x2f>
  2f:	48 89 d1             	mov    %rdx,%rcx
  32:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 39 <DmxSerial::CheckFileName(char const*, int&)+0x39>
  39:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 40 <DmxSerial::CheckFileName(char const*, int&)+0x40>
  40:	48 89 c7             	mov    %rax,%rdi
  43:	b8 00 00 00 00       	mov    $0x0,%eax
  48:	e8 00 00 00 00       	call   4d <DmxSerial::CheckFileName(char const*, int&)+0x4d>
  4d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  52:	74 12                	je     66 <DmxSerial::CheckFileName(char const*, int&)+0x66>
  54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  58:	48 89 c7             	mov    %rax,%rdi
  5b:	e8 00 00 00 00       	call   60 <DmxSerial::CheckFileName(char const*, int&)+0x60>
  60:	48 83 f8 0a          	cmp    $0xa,%rax
  64:	74 37                	je     9d <DmxSerial::CheckFileName(char const*, int&)+0x9d>
  66:	b9 32 00 00 00       	mov    $0x32,%ecx
  6b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 72 <DmxSerial::CheckFileName(char const*, int&)+0x72>
  72:	48 89 c2             	mov    %rax,%rdx
  75:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7c <DmxSerial::CheckFileName(char const*, int&)+0x7c>
  7c:	48 89 c6             	mov    %rax,%rsi
  7f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 86 <DmxSerial::CheckFileName(char const*, int&)+0x86>
  86:	48 89 c7             	mov    %rax,%rdi
  89:	b8 00 00 00 00       	mov    $0x0,%eax
  8e:	e8 00 00 00 00       	call   93 <DmxSerial::CheckFileName(char const*, int&)+0x93>
  93:	b8 00 00 00 00       	mov    $0x0,%eax
  98:	e9 9e 02 00 00       	jmp    33b <DmxSerial::CheckFileName(char const*, int&)+0x33b>
  9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a1:	ba 03 00 00 00       	mov    $0x3,%edx
  a6:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # ad <DmxSerial::CheckFileName(char const*, int&)+0xad>
  ad:	48 89 ce             	mov    %rcx,%rsi
  b0:	48 89 c7             	mov    %rax,%rdi
  b3:	e8 00 00 00 00       	call   b8 <DmxSerial::CheckFileName(char const*, int&)+0xb8>
  b8:	85 c0                	test   %eax,%eax
  ba:	74 37                	je     f3 <DmxSerial::CheckFileName(char const*, int&)+0xf3>
  bc:	b9 37 00 00 00       	mov    $0x37,%ecx
  c1:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c8 <DmxSerial::CheckFileName(char const*, int&)+0xc8>
  c8:	48 89 c2             	mov    %rax,%rdx
  cb:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d2 <DmxSerial::CheckFileName(char const*, int&)+0xd2>
  d2:	48 89 c6             	mov    %rax,%rsi
  d5:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # dc <DmxSerial::CheckFileName(char const*, int&)+0xdc>
  dc:	48 89 c7             	mov    %rax,%rdi
  df:	b8 00 00 00 00       	mov    $0x0,%eax
  e4:	e8 00 00 00 00       	call   e9 <DmxSerial::CheckFileName(char const*, int&)+0xe9>
  e9:	b8 00 00 00 00       	mov    $0x0,%eax
  ee:	e9 48 02 00 00       	jmp    33b <DmxSerial::CheckFileName(char const*, int&)+0x33b>
  f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  f7:	48 83 c0 06          	add    $0x6,%rax
  fb:	ba 04 00 00 00       	mov    $0x4,%edx
 100:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 107 <DmxSerial::CheckFileName(char const*, int&)+0x107>
 107:	48 89 ce             	mov    %rcx,%rsi
 10a:	48 89 c7             	mov    %rax,%rdi
 10d:	e8 00 00 00 00       	call   112 <DmxSerial::CheckFileName(char const*, int&)+0x112>
 112:	85 c0                	test   %eax,%eax
 114:	74 37                	je     14d <DmxSerial::CheckFileName(char const*, int&)+0x14d>
 116:	b9 3c 00 00 00       	mov    $0x3c,%ecx
 11b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 122 <DmxSerial::CheckFileName(char const*, int&)+0x122>
 122:	48 89 c2             	mov    %rax,%rdx
 125:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 12c <DmxSerial::CheckFileName(char const*, int&)+0x12c>
 12c:	48 89 c6             	mov    %rax,%rsi
 12f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 136 <DmxSerial::CheckFileName(char const*, int&)+0x136>
 136:	48 89 c7             	mov    %rax,%rdi
 139:	b8 00 00 00 00       	mov    $0x0,%eax
 13e:	e8 00 00 00 00       	call   143 <DmxSerial::CheckFileName(char const*, int&)+0x143>
 143:	b8 00 00 00 00       	mov    $0x0,%eax
 148:	e9 ee 01 00 00       	jmp    33b <DmxSerial::CheckFileName(char const*, int&)+0x33b>
 14d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 151:	48 83 c0 03          	add    $0x3,%rax
 155:	0f b6 00             	movzbl (%rax),%eax
 158:	88 45 ff             	mov    %al,-0x1(%rbp)
 15b:	0f be 45 ff          	movsbl -0x1(%rbp),%eax
 15f:	83 e8 30             	sub    $0x30,%eax
 162:	83 f8 09             	cmp    $0x9,%eax
 165:	76 37                	jbe    19e <DmxSerial::CheckFileName(char const*, int&)+0x19e>
 167:	b9 43 00 00 00       	mov    $0x43,%ecx
 16c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 173 <DmxSerial::CheckFileName(char const*, int&)+0x173>
 173:	48 89 c2             	mov    %rax,%rdx
 176:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 17d <DmxSerial::CheckFileName(char const*, int&)+0x17d>
 17d:	48 89 c6             	mov    %rax,%rsi
 180:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 187 <DmxSerial::CheckFileName(char const*, int&)+0x187>
 187:	48 89 c7             	mov    %rax,%rdi
 18a:	b8 00 00 00 00       	mov    $0x0,%eax
 18f:	e8 00 00 00 00       	call   194 <DmxSerial::CheckFileName(char const*, int&)+0x194>
 194:	b8 00 00 00 00       	mov    $0x0,%eax
 199:	e9 9d 01 00 00       	jmp    33b <DmxSerial::CheckFileName(char const*, int&)+0x33b>
 19e:	0f be 45 ff          	movsbl -0x1(%rbp),%eax
 1a2:	83 e8 30             	sub    $0x30,%eax
 1a5:	6b d0 64             	imul   $0x64,%eax,%edx
 1a8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 1ac:	89 10                	mov    %edx,(%rax)
 1ae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 1b2:	8b 00                	mov    (%rax),%eax
 1b4:	3d 00 02 00 00       	cmp    $0x200,%eax
 1b9:	7e 37                	jle    1f2 <DmxSerial::CheckFileName(char const*, int&)+0x1f2>
 1bb:	b9 4a 00 00 00       	mov    $0x4a,%ecx
 1c0:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c7 <DmxSerial::CheckFileName(char const*, int&)+0x1c7>
 1c7:	48 89 c2             	mov    %rax,%rdx
 1ca:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1d1 <DmxSerial::CheckFileName(char const*, int&)+0x1d1>
 1d1:	48 89 c6             	mov    %rax,%rsi
 1d4:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1db <DmxSerial::CheckFileName(char const*, int&)+0x1db>
 1db:	48 89 c7             	mov    %rax,%rdi
 1de:	b8 00 00 00 00       	mov    $0x0,%eax
 1e3:	e8 00 00 00 00       	call   1e8 <DmxSerial::CheckFileName(char const*, int&)+0x1e8>
 1e8:	b8 00 00 00 00       	mov    $0x0,%eax
 1ed:	e9 49 01 00 00       	jmp    33b <DmxSerial::CheckFileName(char const*, int&)+0x33b>
 1f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1f6:	48 83 c0 04          	add    $0x4,%rax
 1fa:	0f b6 00             	movzbl (%rax),%eax
 1fd:	88 45 ff             	mov    %al,-0x1(%rbp)
 200:	0f be 45 ff          	movsbl -0x1(%rbp),%eax
 204:	83 e8 30             	sub    $0x30,%eax
 207:	83 f8 09             	cmp    $0x9,%eax
 20a:	76 37                	jbe    243 <DmxSerial::CheckFileName(char const*, int&)+0x243>
 20c:	b9 51 00 00 00       	mov    $0x51,%ecx
 211:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 218 <DmxSerial::CheckFileName(char const*, int&)+0x218>
 218:	48 89 c2             	mov    %rax,%rdx
 21b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 222 <DmxSerial::CheckFileName(char const*, int&)+0x222>
 222:	48 89 c6             	mov    %rax,%rsi
 225:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 22c <DmxSerial::CheckFileName(char const*, int&)+0x22c>
 22c:	48 89 c7             	mov    %rax,%rdi
 22f:	b8 00 00 00 00       	mov    $0x0,%eax
 234:	e8 00 00 00 00       	call   239 <DmxSerial::CheckFileName(char const*, int&)+0x239>
 239:	b8 00 00 00 00       	mov    $0x0,%eax
 23e:	e9 f8 00 00 00       	jmp    33b <DmxSerial::CheckFileName(char const*, int&)+0x33b>
 243:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 247:	8b 08                	mov    (%rax),%ecx
 249:	0f be 45 ff          	movsbl -0x1(%rbp),%eax
 24d:	8d 50 d0             	lea    -0x30(%rax),%edx
 250:	89 d0                	mov    %edx,%eax
 252:	c1 e0 02             	shl    $0x2,%eax
 255:	01 d0                	add    %edx,%eax
 257:	01 c0                	add    %eax,%eax
 259:	8d 14 01             	lea    (%rcx,%rax,1),%edx
 25c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 260:	89 10                	mov    %edx,(%rax)
 262:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 266:	48 83 c0 05          	add    $0x5,%rax
 26a:	0f b6 00             	movzbl (%rax),%eax
 26d:	88 45 ff             	mov    %al,-0x1(%rbp)
 270:	0f be 45 ff          	movsbl -0x1(%rbp),%eax
 274:	83 e8 30             	sub    $0x30,%eax
 277:	83 f8 09             	cmp    $0x9,%eax
 27a:	76 37                	jbe    2b3 <DmxSerial::CheckFileName(char const*, int&)+0x2b3>
 27c:	b9 5a 00 00 00       	mov    $0x5a,%ecx
 281:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 288 <DmxSerial::CheckFileName(char const*, int&)+0x288>
 288:	48 89 c2             	mov    %rax,%rdx
 28b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 292 <DmxSerial::CheckFileName(char const*, int&)+0x292>
 292:	48 89 c6             	mov    %rax,%rsi
 295:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 29c <DmxSerial::CheckFileName(char const*, int&)+0x29c>
 29c:	48 89 c7             	mov    %rax,%rdi
 29f:	b8 00 00 00 00       	mov    $0x0,%eax
 2a4:	e8 00 00 00 00       	call   2a9 <DmxSerial::CheckFileName(char const*, int&)+0x2a9>
 2a9:	b8 00 00 00 00       	mov    $0x0,%eax
 2ae:	e9 88 00 00 00       	jmp    33b <DmxSerial::CheckFileName(char const*, int&)+0x33b>
 2b3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 2b7:	8b 10                	mov    (%rax),%edx
 2b9:	0f be 45 ff          	movsbl -0x1(%rbp),%eax
 2bd:	83 e8 30             	sub    $0x30,%eax
 2c0:	01 c2                	add    %eax,%edx
 2c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 2c6:	89 10                	mov    %edx,(%rax)
 2c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 2cc:	8b 00                	mov    (%rax),%eax
 2ce:	3d 00 02 00 00       	cmp    $0x200,%eax
 2d3:	7e 34                	jle    309 <DmxSerial::CheckFileName(char const*, int&)+0x309>
 2d5:	b9 61 00 00 00       	mov    $0x61,%ecx
 2da:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2e1 <DmxSerial::CheckFileName(char const*, int&)+0x2e1>
 2e1:	48 89 c2             	mov    %rax,%rdx
 2e4:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2eb <DmxSerial::CheckFileName(char const*, int&)+0x2eb>
 2eb:	48 89 c6             	mov    %rax,%rsi
 2ee:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2f5 <DmxSerial::CheckFileName(char const*, int&)+0x2f5>
 2f5:	48 89 c7             	mov    %rax,%rdi
 2f8:	b8 00 00 00 00       	mov    $0x0,%eax
 2fd:	e8 00 00 00 00       	call   302 <DmxSerial::CheckFileName(char const*, int&)+0x302>
 302:	b8 00 00 00 00       	mov    $0x0,%eax
 307:	eb 32                	jmp    33b <DmxSerial::CheckFileName(char const*, int&)+0x33b>
 309:	b9 65 00 00 00       	mov    $0x65,%ecx
 30e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 315 <DmxSerial::CheckFileName(char const*, int&)+0x315>
 315:	48 89 c2             	mov    %rax,%rdx
 318:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 31f <DmxSerial::CheckFileName(char const*, int&)+0x31f>
 31f:	48 89 c6             	mov    %rax,%rsi
 322:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 329 <DmxSerial::CheckFileName(char const*, int&)+0x329>
 329:	48 89 c7             	mov    %rax,%rdi
 32c:	b8 00 00 00 00       	mov    $0x0,%eax
 331:	e8 00 00 00 00       	call   336 <DmxSerial::CheckFileName(char const*, int&)+0x336>
 336:	b8 01 00 00 00       	mov    $0x1,%eax
 33b:	c9                   	leave  
 33c:	c3                   	ret    

dmxserialtftp.o:     file format elf64-x86-64


Disassembly of section .text._ZN13DmxSerialTFTPD2Ev:

0000000000000000 <DmxSerialTFTP::~DmxSerialTFTP()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 17 <DmxSerialTFTP::~DmxSerialTFTP()+0x17>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <DmxSerialTFTP::~DmxSerialTFTP()+0x2a>
  2a:	90                   	nop
  2b:	c9                   	leave  
  2c:	c3                   	ret    

Disassembly of section .text._ZN13DmxSerialTFTPD0Ev:

0000000000000000 <DmxSerialTFTP::~DmxSerialTFTP()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <DmxSerialTFTP::~DmxSerialTFTP()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <DmxSerialTFTP::~DmxSerialTFTP()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN9DmxSerial3GetEv:

0000000000000000 <DmxSerial::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # f <DmxSerial::Get()+0xf>
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text._ZN13DmxSerialTFTP4ExitEv:

0000000000000000 <DmxSerialTFTP::Exit()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	b9 24 00 00 00       	mov    $0x24,%ecx
  15:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c <DmxSerialTFTP::Exit()+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26 <DmxSerialTFTP::Exit()+0x26>
  26:	48 89 c6             	mov    %rax,%rsi
  29:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 30 <DmxSerialTFTP::Exit()+0x30>
  30:	48 89 c7             	mov    %rax,%rdi
  33:	b8 00 00 00 00       	mov    $0x0,%eax
  38:	e8 00 00 00 00       	call   3d <DmxSerialTFTP::Exit()+0x3d>
  3d:	e8 00 00 00 00       	call   42 <DmxSerialTFTP::Exit()+0x42>
  42:	be 00 00 00 00       	mov    $0x0,%esi
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	call   4f <DmxSerialTFTP::Exit()+0x4f>
  4f:	b9 28 00 00 00       	mov    $0x28,%ecx
  54:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 5b <DmxSerialTFTP::Exit()+0x5b>
  5b:	48 89 c2             	mov    %rax,%rdx
  5e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 65 <DmxSerialTFTP::Exit()+0x65>
  65:	48 89 c6             	mov    %rax,%rsi
  68:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 6f <DmxSerialTFTP::Exit()+0x6f>
  6f:	48 89 c7             	mov    %rax,%rdi
  72:	b8 00 00 00 00       	mov    $0x0,%eax
  77:	e8 00 00 00 00       	call   7c <DmxSerialTFTP::Exit()+0x7c>
  7c:	90                   	nop
  7d:	c9                   	leave  
  7e:	c3                   	ret    

Disassembly of section .text._ZN13DmxSerialTFTP8FileOpenEPKc8TFTPMode:

0000000000000000 <DmxSerialTFTP::FileOpen(char const*, TFTPMode)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 2d <DmxSerialTFTP::FileOpen(char const*, TFTPMode)+0x2d>
  2d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  31:	48 83 ec 08          	sub    $0x8,%rsp
  35:	8b 55 dc             	mov    -0x24(%rbp),%edx
  38:	52                   	push   %rdx
  39:	49 89 c9             	mov    %rcx,%r9
  3c:	41 b8 2c 00 00 00    	mov    $0x2c,%r8d
  42:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 49 <DmxSerialTFTP::FileOpen(char const*, TFTPMode)+0x49>
  49:	48 89 d1             	mov    %rdx,%rcx
  4c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 53 <DmxSerialTFTP::FileOpen(char const*, TFTPMode)+0x53>
  53:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5a <DmxSerialTFTP::FileOpen(char const*, TFTPMode)+0x5a>
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	b8 00 00 00 00       	mov    $0x0,%eax
  62:	e8 00 00 00 00       	call   67 <DmxSerialTFTP::FileOpen(char const*, TFTPMode)+0x67>
  67:	48 83 c4 10          	add    $0x10,%rsp
  6b:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
  6f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  73:	48 89 d6             	mov    %rdx,%rsi
  76:	48 89 c7             	mov    %rax,%rdi
  79:	e8 00 00 00 00       	call   7e <DmxSerialTFTP::FileOpen(char const*, TFTPMode)+0x7e>
  7e:	83 f0 01             	xor    $0x1,%eax
  81:	84 c0                	test   %al,%al
  83:	74 34                	je     b9 <DmxSerialTFTP::FileOpen(char const*, TFTPMode)+0xb9>
  85:	b9 30 00 00 00       	mov    $0x30,%ecx
  8a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 91 <DmxSerialTFTP::FileOpen(char const*, TFTPMode)+0x91>
  91:	48 89 c2             	mov    %rax,%rdx
  94:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 9b <DmxSerialTFTP::FileOpen(char const*, TFTPMode)+0x9b>
  9b:	48 89 c6             	mov    %rax,%rsi
  9e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # a5 <DmxSerialTFTP::FileOpen(char const*, TFTPMode)+0xa5>
  a5:	48 89 c7             	mov    %rax,%rdi
  a8:	b8 00 00 00 00       	mov    $0x0,%eax
  ad:	e8 00 00 00 00       	call   b2 <DmxSerialTFTP::FileOpen(char const*, TFTPMode)+0xb2>
  b2:	b8 00 00 00 00       	mov    $0x0,%eax
  b7:	eb 35                	jmp    ee <DmxSerialTFTP::FileOpen(char const*, TFTPMode)+0xee>
  b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  bd:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # c4 <DmxSerialTFTP::FileOpen(char const*, TFTPMode)+0xc4>
  c4:	48 89 d6             	mov    %rdx,%rsi
  c7:	48 89 c7             	mov    %rax,%rdi
  ca:	e8 00 00 00 00       	call   cf <DmxSerialTFTP::FileOpen(char const*, TFTPMode)+0xcf>
  cf:	48 89 c2             	mov    %rax,%rdx
  d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d6:	48 89 90 48 02 00 00 	mov    %rdx,0x248(%rax)
  dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e1:	48 8b 80 48 02 00 00 	mov    0x248(%rax),%rax
  e8:	48 85 c0             	test   %rax,%rax
  eb:	0f 95 c0             	setne  %al
  ee:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f2:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  f9:	00 00 
  fb:	74 05                	je     102 <DmxSerialTFTP::FileOpen(char const*, TFTPMode)+0x102>
  fd:	e8 00 00 00 00       	call   102 <DmxSerialTFTP::FileOpen(char const*, TFTPMode)+0x102>
 102:	c9                   	leave  
 103:	c3                   	ret    

Disassembly of section .text._ZN13DmxSerialTFTP10FileCreateEPKc8TFTPMode:

0000000000000000 <DmxSerialTFTP::FileCreate(char const*, TFTPMode)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	89 55 dc             	mov    %edx,-0x24(%rbp)
  17:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1e:	00 00 
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  24:	31 c0                	xor    %eax,%eax
  26:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 2d <DmxSerialTFTP::FileCreate(char const*, TFTPMode)+0x2d>
  2d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  31:	48 83 ec 08          	sub    $0x8,%rsp
  35:	8b 55 dc             	mov    -0x24(%rbp),%edx
  38:	52                   	push   %rdx
  39:	49 89 c9             	mov    %rcx,%r9
  3c:	41 b8 39 00 00 00    	mov    $0x39,%r8d
  42:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 49 <DmxSerialTFTP::FileCreate(char const*, TFTPMode)+0x49>
  49:	48 89 d1             	mov    %rdx,%rcx
  4c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 53 <DmxSerialTFTP::FileCreate(char const*, TFTPMode)+0x53>
  53:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 5a <DmxSerialTFTP::FileCreate(char const*, TFTPMode)+0x5a>
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	b8 00 00 00 00       	mov    $0x0,%eax
  62:	e8 00 00 00 00       	call   67 <DmxSerialTFTP::FileCreate(char const*, TFTPMode)+0x67>
  67:	48 83 c4 10          	add    $0x10,%rsp
  6b:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
  6f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  73:	48 89 d6             	mov    %rdx,%rsi
  76:	48 89 c7             	mov    %rax,%rdi
  79:	e8 00 00 00 00       	call   7e <DmxSerialTFTP::FileCreate(char const*, TFTPMode)+0x7e>
  7e:	83 f0 01             	xor    $0x1,%eax
  81:	84 c0                	test   %al,%al
  83:	74 34                	je     b9 <DmxSerialTFTP::FileCreate(char const*, TFTPMode)+0xb9>
  85:	b9 3d 00 00 00       	mov    $0x3d,%ecx
  8a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 91 <DmxSerialTFTP::FileCreate(char const*, TFTPMode)+0x91>
  91:	48 89 c2             	mov    %rax,%rdx
  94:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 9b <DmxSerialTFTP::FileCreate(char const*, TFTPMode)+0x9b>
  9b:	48 89 c6             	mov    %rax,%rsi
  9e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # a5 <DmxSerialTFTP::FileCreate(char const*, TFTPMode)+0xa5>
  a5:	48 89 c7             	mov    %rax,%rdi
  a8:	b8 00 00 00 00       	mov    $0x0,%eax
  ad:	e8 00 00 00 00       	call   b2 <DmxSerialTFTP::FileCreate(char const*, TFTPMode)+0xb2>
  b2:	b8 00 00 00 00       	mov    $0x0,%eax
  b7:	eb 35                	jmp    ee <DmxSerialTFTP::FileCreate(char const*, TFTPMode)+0xee>
  b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  bd:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # c4 <DmxSerialTFTP::FileCreate(char const*, TFTPMode)+0xc4>
  c4:	48 89 d6             	mov    %rdx,%rsi
  c7:	48 89 c7             	mov    %rax,%rdi
  ca:	e8 00 00 00 00       	call   cf <DmxSerialTFTP::FileCreate(char const*, TFTPMode)+0xcf>
  cf:	48 89 c2             	mov    %rax,%rdx
  d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d6:	48 89 90 48 02 00 00 	mov    %rdx,0x248(%rax)
  dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e1:	48 8b 80 48 02 00 00 	mov    0x248(%rax),%rax
  e8:	48 85 c0             	test   %rax,%rax
  eb:	0f 95 c0             	setne  %al
  ee:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f2:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  f9:	00 00 
  fb:	74 05                	je     102 <DmxSerialTFTP::FileCreate(char const*, TFTPMode)+0x102>
  fd:	e8 00 00 00 00       	call   102 <DmxSerialTFTP::FileCreate(char const*, TFTPMode)+0x102>
 102:	c9                   	leave  
 103:	c3                   	ret    

Disassembly of section .text._ZN13DmxSerialTFTP9FileCloseEv:

0000000000000000 <DmxSerialTFTP::FileClose()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	b9 46 00 00 00       	mov    $0x46,%ecx
  15:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c <DmxSerialTFTP::FileClose()+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26 <DmxSerialTFTP::FileClose()+0x26>
  26:	48 89 c6             	mov    %rax,%rsi
  29:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 30 <DmxSerialTFTP::FileClose()+0x30>
  30:	48 89 c7             	mov    %rax,%rdi
  33:	b8 00 00 00 00       	mov    $0x0,%eax
  38:	e8 00 00 00 00       	call   3d <DmxSerialTFTP::FileClose()+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 80 48 02 00 00 	mov    0x248(%rax),%rax
  48:	48 85 c0             	test   %rax,%rax
  4b:	74 22                	je     6f <DmxSerialTFTP::FileClose()+0x6f>
  4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  51:	48 8b 80 48 02 00 00 	mov    0x248(%rax),%rax
  58:	48 89 c7             	mov    %rax,%rdi
  5b:	e8 00 00 00 00       	call   60 <DmxSerialTFTP::FileClose()+0x60>
  60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  64:	48 c7 80 48 02 00 00 	movq   $0x0,0x248(%rax)
  6b:	00 00 00 00 
  6f:	b9 4d 00 00 00       	mov    $0x4d,%ecx
  74:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7b <DmxSerialTFTP::FileClose()+0x7b>
  7b:	48 89 c2             	mov    %rax,%rdx
  7e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 85 <DmxSerialTFTP::FileClose()+0x85>
  85:	48 89 c6             	mov    %rax,%rsi
  88:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 8f <DmxSerialTFTP::FileClose()+0x8f>
  8f:	48 89 c7             	mov    %rax,%rdi
  92:	b8 00 00 00 00       	mov    $0x0,%eax
  97:	e8 00 00 00 00       	call   9c <DmxSerialTFTP::FileClose()+0x9c>
  9c:	b8 01 00 00 00       	mov    $0x1,%eax
  a1:	c9                   	leave  
  a2:	c3                   	ret    

Disassembly of section .text._ZN13DmxSerialTFTP8FileReadEPvmj:

0000000000000000 <DmxSerialTFTP::FileRead(void*, unsigned long, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  18:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	48 8b 88 48 02 00 00 	mov    0x248(%rax),%rcx
  26:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2e:	be 01 00 00 00       	mov    $0x1,%esi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	call   3b <DmxSerialTFTP::FileRead(void*, unsigned long, unsigned int)+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

Disassembly of section .text._ZN13DmxSerialTFTP9FileWriteEPKvmj:

0000000000000000 <DmxSerialTFTP::FileWrite(void const*, unsigned long, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  18:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	48 8b 88 48 02 00 00 	mov    0x248(%rax),%rcx
  26:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2e:	be 01 00 00 00       	mov    $0x1,%esi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	call   3b <DmxSerialTFTP::FileWrite(void const*, unsigned long, unsigned int)+0x3b>
  3b:	c9                   	leave  
  3c:	c3                   	ret    

serial.o:     file format elf64-x86-64


Disassembly of section .text._ZN6Serial13GetUartParityEh:

0000000000000000 <Serial::GetUartParity(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	89 f8                	mov    %edi,%eax
   e:	88 45 fc             	mov    %al,-0x4(%rbp)
  11:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  15:	89 c7                	mov    %eax,%edi
  17:	e8 00 00 00 00       	call   1c <Serial::GetUartParity(unsigned char)+0x1c>
  1c:	c9                   	leave  
  1d:	c3                   	ret    

Disassembly of section .text._ZN6SerialC2Ev:

0000000000000000 <Serial::Serial()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	c6 00 00             	movb   $0x0,(%rax)
  17:	b9 27 00 00 00       	mov    $0x27,%ecx
  1c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 23 <Serial::Serial()+0x23>
  23:	48 89 c2             	mov    %rax,%rdx
  26:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2d <Serial::Serial()+0x2d>
  2d:	48 89 c6             	mov    %rax,%rsi
  30:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 37 <Serial::Serial()+0x37>
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	b8 00 00 00 00       	mov    $0x0,%eax
  3f:	e8 00 00 00 00       	call   44 <Serial::Serial()+0x44>
  44:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 4b <Serial::Serial()+0x4b>
  4b:	48 85 c0             	test   %rax,%rax
  4e:	74 28                	je     78 <Serial::Serial()+0x78>
  50:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 57 <Serial::Serial()+0x57>
  57:	48 89 c1             	mov    %rax,%rcx
  5a:	ba 29 00 00 00       	mov    $0x29,%edx
  5f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 66 <Serial::Serial()+0x66>
  66:	48 89 c6             	mov    %rax,%rsi
  69:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 70 <Serial::Serial()+0x70>
  70:	48 89 c7             	mov    %rax,%rdi
  73:	e8 00 00 00 00       	call   78 <Serial::Serial()+0x78>
  78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7c:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 83 <Serial::Serial()+0x83>
  83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  87:	c7 40 04 00 c2 01 00 	movl   $0x1c200,0x4(%rax)
  8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  92:	c6 40 08 08          	movb   $0x8,0x8(%rax)
  96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  9a:	c6 40 09 00          	movb   $0x0,0x9(%rax)
  9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a2:	c6 40 0a 01          	movb   $0x1,0xa(%rax)
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	c7 40 0c 40 42 0f 00 	movl   $0xf4240,0xc(%rax)
  b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b5:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  bd:	c6 40 18 30          	movb   $0x30,0x18(%rax)
  c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c5:	c7 40 14 80 1a 06 00 	movl   $0x61a80,0x14(%rax)
  cc:	b9 37 00 00 00       	mov    $0x37,%ecx
  d1:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d8 <Serial::Serial()+0xd8>
  d8:	48 89 c2             	mov    %rax,%rdx
  db:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # e2 <Serial::Serial()+0xe2>
  e2:	48 89 c6             	mov    %rax,%rsi
  e5:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ec <Serial::Serial()+0xec>
  ec:	48 89 c7             	mov    %rax,%rdi
  ef:	b8 00 00 00 00       	mov    $0x0,%eax
  f4:	e8 00 00 00 00       	call   f9 <Serial::Serial()+0xf9>
  f9:	90                   	nop
  fa:	c9                   	leave  
  fb:	c3                   	ret    

Disassembly of section .text._ZN6SerialD2Ev:

0000000000000000 <Serial::~Serial()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	b9 3b 00 00 00       	mov    $0x3b,%ecx
  15:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c <Serial::~Serial()+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26 <Serial::~Serial()+0x26>
  26:	48 89 c6             	mov    %rax,%rsi
  29:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 30 <Serial::~Serial()+0x30>
  30:	48 89 c7             	mov    %rax,%rdi
  33:	b8 00 00 00 00       	mov    $0x0,%eax
  38:	e8 00 00 00 00       	call   3d <Serial::~Serial()+0x3d>
  3d:	48 c7 05 00 00 00 00 	movq   $0x0,0x0(%rip)        # 48 <Serial::~Serial()+0x48>
  44:	00 00 00 00 
  48:	b9 3f 00 00 00       	mov    $0x3f,%ecx
  4d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 54 <Serial::~Serial()+0x54>
  54:	48 89 c2             	mov    %rax,%rdx
  57:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 5e <Serial::~Serial()+0x5e>
  5e:	48 89 c6             	mov    %rax,%rsi
  61:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 68 <Serial::~Serial()+0x68>
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	b8 00 00 00 00       	mov    $0x0,%eax
  70:	e8 00 00 00 00       	call   75 <Serial::~Serial()+0x75>
  75:	90                   	nop
  76:	c9                   	leave  
  77:	c3                   	ret    

Disassembly of section .text._ZN6Serial4SendEPKhj:

0000000000000000 <Serial::Send(unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	89 55 ec             	mov    %edx,-0x14(%rbp)
  17:	b9 43 00 00 00       	mov    $0x43,%ecx
  1c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 23 <Serial::Send(unsigned char const*, unsigned int)+0x23>
  23:	48 89 c2             	mov    %rax,%rdx
  26:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2d <Serial::Send(unsigned char const*, unsigned int)+0x2d>
  2d:	48 89 c6             	mov    %rax,%rsi
  30:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 37 <Serial::Send(unsigned char const*, unsigned int)+0x37>
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	b8 00 00 00 00       	mov    $0x0,%eax
  3f:	e8 00 00 00 00       	call   44 <Serial::Send(unsigned char const*, unsigned int)+0x44>
  44:	8b 45 ec             	mov    -0x14(%rbp),%eax
  47:	0f b7 d0             	movzwl %ax,%edx
  4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4e:	89 d6                	mov    %edx,%esi
  50:	48 89 c7             	mov    %rax,%rdi
  53:	e8 00 00 00 00       	call   58 <Serial::Send(unsigned char const*, unsigned int)+0x58>
  58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5c:	0f b6 00             	movzbl (%rax),%eax
  5f:	84 c0                	test   %al,%al
  61:	75 18                	jne    7b <Serial::Send(unsigned char const*, unsigned int)+0x7b>
  63:	8b 55 ec             	mov    -0x14(%rbp),%edx
  66:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6e:	48 89 ce             	mov    %rcx,%rsi
  71:	48 89 c7             	mov    %rax,%rdi
  74:	e8 00 00 00 00       	call   79 <Serial::Send(unsigned char const*, unsigned int)+0x79>
  79:	eb 73                	jmp    ee <Serial::Send(unsigned char const*, unsigned int)+0xee>
  7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7f:	0f b6 00             	movzbl (%rax),%eax
  82:	3c 01                	cmp    $0x1,%al
  84:	75 18                	jne    9e <Serial::Send(unsigned char const*, unsigned int)+0x9e>
  86:	8b 55 ec             	mov    -0x14(%rbp),%edx
  89:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  8d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  91:	48 89 ce             	mov    %rcx,%rsi
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	call   9c <Serial::Send(unsigned char const*, unsigned int)+0x9c>
  9c:	eb 50                	jmp    ee <Serial::Send(unsigned char const*, unsigned int)+0xee>
  9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a2:	0f b6 00             	movzbl (%rax),%eax
  a5:	3c 02                	cmp    $0x2,%al
  a7:	75 18                	jne    c1 <Serial::Send(unsigned char const*, unsigned int)+0xc1>
  a9:	8b 55 ec             	mov    -0x14(%rbp),%edx
  ac:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b4:	48 89 ce             	mov    %rcx,%rsi
  b7:	48 89 c7             	mov    %rax,%rdi
  ba:	e8 00 00 00 00       	call   bf <Serial::Send(unsigned char const*, unsigned int)+0xbf>
  bf:	eb 2d                	jmp    ee <Serial::Send(unsigned char const*, unsigned int)+0xee>
  c1:	b9 55 00 00 00       	mov    $0x55,%ecx
  c6:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # cd <Serial::Send(unsigned char const*, unsigned int)+0xcd>
  cd:	48 89 c2             	mov    %rax,%rdx
  d0:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # d7 <Serial::Send(unsigned char const*, unsigned int)+0xd7>
  d7:	48 89 c6             	mov    %rax,%rsi
  da:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # e1 <Serial::Send(unsigned char const*, unsigned int)+0xe1>
  e1:	48 89 c7             	mov    %rax,%rdi
  e4:	b8 00 00 00 00       	mov    $0x0,%eax
  e9:	e8 00 00 00 00       	call   ee <Serial::Send(unsigned char const*, unsigned int)+0xee>
  ee:	c9                   	leave  
  ef:	c3                   	ret    

Disassembly of section .text._ZN6Serial5PrintEv:

0000000000000000 <Serial::Print()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b6 00             	movzbl (%rax),%eax
  17:	0f b6 c0             	movzbl %al,%eax
  1a:	89 c7                	mov    %eax,%edi
  1c:	e8 00 00 00 00       	call   21 <Serial::Print()+0x21>
  21:	48 89 c6             	mov    %rax,%rsi
  24:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2b <Serial::Print()+0x2b>
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	b8 00 00 00 00       	mov    $0x0,%eax
  33:	e8 00 00 00 00       	call   38 <Serial::Print()+0x38>
  38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3c:	0f b6 00             	movzbl (%rax),%eax
  3f:	84 c0                	test   %al,%al
  41:	0f 85 8d 00 00 00    	jne    d4 <Serial::Print()+0xd4>
  47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4b:	8b 40 04             	mov    0x4(%rax),%eax
  4e:	89 c6                	mov    %eax,%esi
  50:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 57 <Serial::Print()+0x57>
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	b8 00 00 00 00       	mov    $0x0,%eax
  5f:	e8 00 00 00 00       	call   64 <Serial::Print()+0x64>
  64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  68:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  6c:	0f b6 c0             	movzbl %al,%eax
  6f:	89 c6                	mov    %eax,%esi
  71:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 78 <Serial::Print()+0x78>
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	b8 00 00 00 00       	mov    $0x0,%eax
  80:	e8 00 00 00 00       	call   85 <Serial::Print()+0x85>
  85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  89:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  8d:	0f b6 c0             	movzbl %al,%eax
  90:	89 c7                	mov    %eax,%edi
  92:	e8 00 00 00 00       	call   97 <Serial::Print()+0x97>
  97:	48 89 c6             	mov    %rax,%rsi
  9a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # a1 <Serial::Print()+0xa1>
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	b8 00 00 00 00       	mov    $0x0,%eax
  a9:	e8 00 00 00 00       	call   ae <Serial::Print()+0xae>
  ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b2:	0f b6 40 0a          	movzbl 0xa(%rax),%eax
  b6:	0f b6 c0             	movzbl %al,%eax
  b9:	89 c6                	mov    %eax,%esi
  bb:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # c2 <Serial::Print()+0xc2>
  c2:	48 89 c7             	mov    %rax,%rdi
  c5:	b8 00 00 00 00       	mov    $0x0,%eax
  ca:	e8 00 00 00 00       	call   cf <Serial::Print()+0xcf>
  cf:	e9 9d 00 00 00       	jmp    171 <Serial::Print()+0x171>
  d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d8:	0f b6 00             	movzbl (%rax),%eax
  db:	3c 01                	cmp    $0x1,%al
  dd:	75 40                	jne    11f <Serial::Print()+0x11f>
  df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e3:	8b 40 0c             	mov    0xc(%rax),%eax
  e6:	89 c6                	mov    %eax,%esi
  e8:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ef <Serial::Print()+0xef>
  ef:	48 89 c7             	mov    %rax,%rdi
  f2:	b8 00 00 00 00       	mov    $0x0,%eax
  f7:	e8 00 00 00 00       	call   fc <Serial::Print()+0xfc>
  fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 100:	0f b6 40 10          	movzbl 0x10(%rax),%eax
 104:	0f b6 c0             	movzbl %al,%eax
 107:	89 c6                	mov    %eax,%esi
 109:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 110 <Serial::Print()+0x110>
 110:	48 89 c7             	mov    %rax,%rdi
 113:	b8 00 00 00 00       	mov    $0x0,%eax
 118:	e8 00 00 00 00       	call   11d <Serial::Print()+0x11d>
 11d:	eb 52                	jmp    171 <Serial::Print()+0x171>
 11f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 123:	0f b6 00             	movzbl (%rax),%eax
 126:	3c 02                	cmp    $0x2,%al
 128:	75 47                	jne    171 <Serial::Print()+0x171>
 12a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 12e:	0f b6 40 18          	movzbl 0x18(%rax),%eax
 132:	0f b6 c0             	movzbl %al,%eax
 135:	89 c6                	mov    %eax,%esi
 137:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 13e <Serial::Print()+0x13e>
 13e:	48 89 c7             	mov    %rax,%rdi
 141:	b8 00 00 00 00       	mov    $0x0,%eax
 146:	e8 00 00 00 00       	call   14b <Serial::Print()+0x14b>
 14b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 14f:	8b 40 14             	mov    0x14(%rax),%eax
 152:	89 c7                	mov    %eax,%edi
 154:	e8 00 00 00 00       	call   159 <Serial::Print()+0x159>
 159:	48 89 c6             	mov    %rax,%rsi
 15c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 163 <Serial::Print()+0x163>
 163:	48 89 c7             	mov    %rax,%rdi
 166:	b8 00 00 00 00       	mov    $0x0,%eax
 16b:	e8 00 00 00 00       	call   170 <Serial::Print()+0x170>
 170:	90                   	nop
 171:	c9                   	leave  
 172:	c3                   	ret    

seriali2c.o:     file format elf64-x86-64


Disassembly of section .text.i2c_begin:

0000000000000000 <i2c_begin>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	90                   	nop
   5:	5d                   	pop    %rbp
   6:	c3                   	ret    

Disassembly of section .text.i2c_set_baudrate:

0000000000000000 <i2c_set_baudrate>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text.i2c_set_address:

0000000000000000 <i2c_set_address>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.i2c_write:

0000000000000000 <i2c_write>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text._ZN6Serial13SetI2cAddressEh:

0000000000000000 <Serial::SetI2cAddress(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  19:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 20 <Serial::SetI2cAddress(unsigned char)+0x20>
  20:	41 89 d1             	mov    %edx,%r9d
  23:	41 b8 27 00 00 00    	mov    $0x27,%r8d
  29:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 30 <Serial::SetI2cAddress(unsigned char)+0x30>
  30:	48 89 d1             	mov    %rdx,%rcx
  33:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a <Serial::SetI2cAddress(unsigned char)+0x3a>
  3a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 41 <Serial::SetI2cAddress(unsigned char)+0x41>
  41:	48 89 c7             	mov    %rax,%rdi
  44:	b8 00 00 00 00       	mov    $0x0,%eax
  49:	e8 00 00 00 00       	call   4e <Serial::SetI2cAddress(unsigned char)+0x4e>
  4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  52:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  56:	88 50 18             	mov    %dl,0x18(%rax)
  59:	90                   	nop
  5a:	c9                   	leave  
  5b:	c3                   	ret    

Disassembly of section .text._ZN6Serial15SetI2cSpeedModeEN6serial3i2c5speedE:

0000000000000000 <Serial::SetI2cSpeedMode(serial::i2c::speed)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  19:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 20 <Serial::SetI2cSpeedMode(serial::i2c::speed)+0x20>
  20:	41 89 d1             	mov    %edx,%r9d
  23:	41 b8 2d 00 00 00    	mov    $0x2d,%r8d
  29:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 30 <Serial::SetI2cSpeedMode(serial::i2c::speed)+0x30>
  30:	48 89 d1             	mov    %rdx,%rcx
  33:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a <Serial::SetI2cSpeedMode(serial::i2c::speed)+0x3a>
  3a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 41 <Serial::SetI2cSpeedMode(serial::i2c::speed)+0x41>
  41:	48 89 c7             	mov    %rax,%rdi
  44:	b8 00 00 00 00       	mov    $0x0,%eax
  49:	e8 00 00 00 00       	call   4e <Serial::SetI2cSpeedMode(serial::i2c::speed)+0x4e>
  4e:	80 7d f4 00          	cmpb   $0x0,-0xc(%rbp)
  52:	75 0d                	jne    61 <Serial::SetI2cSpeedMode(serial::i2c::speed)+0x61>
  54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  58:	c7 40 14 a0 86 01 00 	movl   $0x186a0,0x14(%rax)
  5f:	eb 0b                	jmp    6c <Serial::SetI2cSpeedMode(serial::i2c::speed)+0x6c>
  61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  65:	c7 40 14 80 1a 06 00 	movl   $0x61a80,0x14(%rax)
  6c:	90                   	nop
  6d:	c9                   	leave  
  6e:	c3                   	ret    

Disassembly of section .text._ZN6Serial7InitI2cEv:

0000000000000000 <Serial::InitI2c()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	b9 37 00 00 00       	mov    $0x37,%ecx
  15:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c <Serial::InitI2c()+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26 <Serial::InitI2c()+0x26>
  26:	48 89 c6             	mov    %rax,%rsi
  29:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 30 <Serial::InitI2c()+0x30>
  30:	48 89 c7             	mov    %rax,%rdi
  33:	b8 00 00 00 00       	mov    $0x0,%eax
  38:	e8 00 00 00 00       	call   3d <Serial::InitI2c()+0x3d>
  3d:	e8 00 00 00 00       	call   42 <Serial::InitI2c()+0x42>
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	8b 40 14             	mov    0x14(%rax),%eax
  49:	89 c7                	mov    %eax,%edi
  4b:	e8 00 00 00 00       	call   50 <Serial::InitI2c()+0x50>
  50:	b9 3c 00 00 00       	mov    $0x3c,%ecx
  55:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 5c <Serial::InitI2c()+0x5c>
  5c:	48 89 c2             	mov    %rax,%rdx
  5f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 66 <Serial::InitI2c()+0x66>
  66:	48 89 c6             	mov    %rax,%rsi
  69:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 70 <Serial::InitI2c()+0x70>
  70:	48 89 c7             	mov    %rax,%rdi
  73:	b8 00 00 00 00       	mov    $0x0,%eax
  78:	e8 00 00 00 00       	call   7d <Serial::InitI2c()+0x7d>
  7d:	b8 01 00 00 00       	mov    $0x1,%eax
  82:	c9                   	leave  
  83:	c3                   	ret    

Disassembly of section .text._ZN6Serial7SendI2cEPKhj:

0000000000000000 <Serial::SendI2c(unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	89 55 ec             	mov    %edx,-0x14(%rbp)
  17:	b9 41 00 00 00       	mov    $0x41,%ecx
  1c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 23 <Serial::SendI2c(unsigned char const*, unsigned int)+0x23>
  23:	48 89 c2             	mov    %rax,%rdx
  26:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2d <Serial::SendI2c(unsigned char const*, unsigned int)+0x2d>
  2d:	48 89 c6             	mov    %rax,%rsi
  30:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 37 <Serial::SendI2c(unsigned char const*, unsigned int)+0x37>
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	b8 00 00 00 00       	mov    $0x0,%eax
  3f:	e8 00 00 00 00       	call   44 <Serial::SendI2c(unsigned char const*, unsigned int)+0x44>
  44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  48:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  4c:	0f b6 c0             	movzbl %al,%eax
  4f:	89 c7                	mov    %eax,%edi
  51:	e8 00 00 00 00       	call   56 <Serial::SendI2c(unsigned char const*, unsigned int)+0x56>
  56:	8b 55 ec             	mov    -0x14(%rbp),%edx
  59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  5d:	89 d6                	mov    %edx,%esi
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	call   67 <Serial::SendI2c(unsigned char const*, unsigned int)+0x67>
  67:	b9 46 00 00 00       	mov    $0x46,%ecx
  6c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 73 <Serial::SendI2c(unsigned char const*, unsigned int)+0x73>
  73:	48 89 c2             	mov    %rax,%rdx
  76:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7d <Serial::SendI2c(unsigned char const*, unsigned int)+0x7d>
  7d:	48 89 c6             	mov    %rax,%rsi
  80:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 87 <Serial::SendI2c(unsigned char const*, unsigned int)+0x87>
  87:	48 89 c7             	mov    %rax,%rdi
  8a:	b8 00 00 00 00       	mov    $0x0,%eax
  8f:	e8 00 00 00 00       	call   94 <Serial::SendI2c(unsigned char const*, unsigned int)+0x94>
  94:	90                   	nop
  95:	c9                   	leave  
  96:	c3                   	ret    

serialinit.o:     file format elf64-x86-64


Disassembly of section .text._ZN6Serial4InitEv:

0000000000000000 <Serial::Init()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	b9 21 00 00 00       	mov    $0x21,%ecx
  15:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c <Serial::Init()+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26 <Serial::Init()+0x26>
  26:	48 89 c6             	mov    %rax,%rsi
  29:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 30 <Serial::Init()+0x30>
  30:	48 89 c7             	mov    %rax,%rdi
  33:	b8 00 00 00 00       	mov    $0x0,%eax
  38:	e8 00 00 00 00       	call   3d <Serial::Init()+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	0f b6 00             	movzbl (%rax),%eax
  44:	84 c0                	test   %al,%al
  46:	75 0e                	jne    56 <Serial::Init()+0x56>
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	call   54 <Serial::Init()+0x54>
  54:	eb 37                	jmp    8d <Serial::Init()+0x8d>
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	0f b6 00             	movzbl (%rax),%eax
  5d:	3c 01                	cmp    $0x1,%al
  5f:	75 0e                	jne    6f <Serial::Init()+0x6f>
  61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  65:	48 89 c7             	mov    %rax,%rdi
  68:	e8 00 00 00 00       	call   6d <Serial::Init()+0x6d>
  6d:	eb 1e                	jmp    8d <Serial::Init()+0x8d>
  6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  73:	0f b6 00             	movzbl (%rax),%eax
  76:	3c 02                	cmp    $0x2,%al
  78:	75 0e                	jne    88 <Serial::Init()+0x88>
  7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7e:	48 89 c7             	mov    %rax,%rdi
  81:	e8 00 00 00 00       	call   86 <Serial::Init()+0x86>
  86:	eb 05                	jmp    8d <Serial::Init()+0x8d>
  88:	b8 00 00 00 00       	mov    $0x0,%eax
  8d:	c9                   	leave  
  8e:	c3                   	ret    

serialspi.o:     file format elf64-x86-64


Disassembly of section .text.spi_begin:

0000000000000000 <spi_begin>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	90                   	nop
   5:	5d                   	pop    %rbp
   6:	c3                   	ret    

Disassembly of section .text.spi_chipSelect:

0000000000000000 <spi_chipSelect>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.spi_setDataMode:

0000000000000000 <spi_setDataMode>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.spi_set_speed_hz:

0000000000000000 <spi_set_speed_hz>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text.spi_writenb:

0000000000000000 <spi_writenb>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	90                   	nop
   c:	5d                   	pop    %rbp
   d:	c3                   	ret    

Disassembly of section .text._ZN6Serial13SetSpiSpeedHzEj:

0000000000000000 <Serial::SetSpiSpeedHz(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1a <Serial::SetSpiSpeedHz(unsigned int)+0x1a>
  1a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  1d:	41 89 d1             	mov    %edx,%r9d
  20:	41 b8 27 00 00 00    	mov    $0x27,%r8d
  26:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d <Serial::SetSpiSpeedHz(unsigned int)+0x2d>
  2d:	48 89 d1             	mov    %rdx,%rcx
  30:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 37 <Serial::SetSpiSpeedHz(unsigned int)+0x37>
  37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e <Serial::SetSpiSpeedHz(unsigned int)+0x3e>
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	b8 00 00 00 00       	mov    $0x0,%eax
  46:	e8 00 00 00 00       	call   4b <Serial::SetSpiSpeedHz(unsigned int)+0x4b>
  4b:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  4f:	74 0c                	je     5d <Serial::SetSpiSpeedHz(unsigned int)+0x5d>
  51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  55:	8b 55 f4             	mov    -0xc(%rbp),%edx
  58:	89 50 0c             	mov    %edx,0xc(%rax)
  5b:	eb 01                	jmp    5e <Serial::SetSpiSpeedHz(unsigned int)+0x5e>
  5d:	90                   	nop
  5e:	c9                   	leave  
  5f:	c3                   	ret    

Disassembly of section .text._ZN6Serial10SetSpiModeEj:

0000000000000000 <Serial::SetSpiMode(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1a <Serial::SetSpiMode(unsigned int)+0x1a>
  1a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  1d:	41 89 d1             	mov    %edx,%r9d
  20:	41 b8 32 00 00 00    	mov    $0x32,%r8d
  26:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d <Serial::SetSpiMode(unsigned int)+0x2d>
  2d:	48 89 d1             	mov    %rdx,%rcx
  30:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 37 <Serial::SetSpiMode(unsigned int)+0x37>
  37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e <Serial::SetSpiMode(unsigned int)+0x3e>
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	b8 00 00 00 00       	mov    $0x0,%eax
  46:	e8 00 00 00 00       	call   4b <Serial::SetSpiMode(unsigned int)+0x4b>
  4b:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
  4f:	77 0e                	ja     5f <Serial::SetSpiMode(unsigned int)+0x5f>
  51:	8b 45 f4             	mov    -0xc(%rbp),%eax
  54:	89 c2                	mov    %eax,%edx
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	88 50 10             	mov    %dl,0x10(%rax)
  5d:	eb 01                	jmp    60 <Serial::SetSpiMode(unsigned int)+0x60>
  5f:	90                   	nop
  60:	c9                   	leave  
  61:	c3                   	ret    

Disassembly of section .text._ZN6Serial7InitSpiEv:

0000000000000000 <Serial::InitSpi()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	b9 3c 00 00 00       	mov    $0x3c,%ecx
  15:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c <Serial::InitSpi()+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26 <Serial::InitSpi()+0x26>
  26:	48 89 c6             	mov    %rax,%rsi
  29:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 30 <Serial::InitSpi()+0x30>
  30:	48 89 c7             	mov    %rax,%rdi
  33:	b8 00 00 00 00       	mov    $0x0,%eax
  38:	e8 00 00 00 00       	call   3d <Serial::InitSpi()+0x3d>
  3d:	e8 00 00 00 00       	call   42 <Serial::InitSpi()+0x42>
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	8b 40 0c             	mov    0xc(%rax),%eax
  49:	89 c7                	mov    %eax,%edi
  4b:	e8 00 00 00 00       	call   50 <Serial::InitSpi()+0x50>
  50:	bf 00 00 00 00       	mov    $0x0,%edi
  55:	e8 00 00 00 00       	call   5a <Serial::InitSpi()+0x5a>
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	0f b6 40 10          	movzbl 0x10(%rax),%eax
  62:	0f b6 c0             	movzbl %al,%eax
  65:	89 c7                	mov    %eax,%edi
  67:	e8 00 00 00 00       	call   6c <Serial::InitSpi()+0x6c>
  6c:	b9 43 00 00 00       	mov    $0x43,%ecx
  71:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 78 <Serial::InitSpi()+0x78>
  78:	48 89 c2             	mov    %rax,%rdx
  7b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 82 <Serial::InitSpi()+0x82>
  82:	48 89 c6             	mov    %rax,%rsi
  85:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 8c <Serial::InitSpi()+0x8c>
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	b8 00 00 00 00       	mov    $0x0,%eax
  94:	e8 00 00 00 00       	call   99 <Serial::InitSpi()+0x99>
  99:	b8 01 00 00 00       	mov    $0x1,%eax
  9e:	c9                   	leave  
  9f:	c3                   	ret    

Disassembly of section .text._ZN6Serial7SendSpiEPKhj:

0000000000000000 <Serial::SendSpi(unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	89 55 ec             	mov    %edx,-0x14(%rbp)
  17:	b9 48 00 00 00       	mov    $0x48,%ecx
  1c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 23 <Serial::SendSpi(unsigned char const*, unsigned int)+0x23>
  23:	48 89 c2             	mov    %rax,%rdx
  26:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2d <Serial::SendSpi(unsigned char const*, unsigned int)+0x2d>
  2d:	48 89 c6             	mov    %rax,%rsi
  30:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 37 <Serial::SendSpi(unsigned char const*, unsigned int)+0x37>
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	b8 00 00 00 00       	mov    $0x0,%eax
  3f:	e8 00 00 00 00       	call   44 <Serial::SendSpi(unsigned char const*, unsigned int)+0x44>
  44:	8b 55 ec             	mov    -0x14(%rbp),%edx
  47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4b:	89 d6                	mov    %edx,%esi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	call   55 <Serial::SendSpi(unsigned char const*, unsigned int)+0x55>
  55:	b9 4c 00 00 00       	mov    $0x4c,%ecx
  5a:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 61 <Serial::SendSpi(unsigned char const*, unsigned int)+0x61>
  61:	48 89 c2             	mov    %rax,%rdx
  64:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 6b <Serial::SendSpi(unsigned char const*, unsigned int)+0x6b>
  6b:	48 89 c6             	mov    %rax,%rsi
  6e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 75 <Serial::SendSpi(unsigned char const*, unsigned int)+0x75>
  75:	48 89 c7             	mov    %rax,%rdi
  78:	b8 00 00 00 00       	mov    $0x0,%eax
  7d:	e8 00 00 00 00       	call   82 <Serial::SendSpi(unsigned char const*, unsigned int)+0x82>
  82:	90                   	nop
  83:	c9                   	leave  
  84:	c3                   	ret    

serialstatic.o:     file format elf64-x86-64


Disassembly of section .text._ZN6Serial7GetTypeEN6serial4typeE:

0000000000000000 <Serial::GetType(serial::type)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 fc             	mov    %al,-0x4(%rbp)
   d:	80 7d fc 02          	cmpb   $0x2,-0x4(%rbp)
  11:	77 1d                	ja     30 <Serial::GetType(serial::type)+0x30>
  13:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  17:	48 63 d0             	movslq %eax,%rdx
  1a:	48 89 d0             	mov    %rdx,%rax
  1d:	48 c1 e0 02          	shl    $0x2,%rax
  21:	48 01 d0             	add    %rdx,%rax
  24:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2b <Serial::GetType(serial::type)+0x2b>
  2b:	48 01 d0             	add    %rdx,%rax
  2e:	eb 07                	jmp    37 <Serial::GetType(serial::type)+0x37>
  30:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 37 <Serial::GetType(serial::type)+0x37>
  37:	5d                   	pop    %rbp
  38:	c3                   	ret    

Disassembly of section .text._ZN6Serial7GetTypeEPKc:

0000000000000000 <Serial::GetType(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  17:	eb 33                	jmp    4c <Serial::GetType(char const*)+0x4c>
  19:	8b 55 fc             	mov    -0x4(%rbp),%edx
  1c:	48 89 d0             	mov    %rdx,%rax
  1f:	48 c1 e0 02          	shl    $0x2,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d <Serial::GetType(char const*)+0x2d>
  2d:	48 01 c2             	add    %rax,%rdx
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 89 c6             	mov    %rax,%rsi
  37:	48 89 d7             	mov    %rdx,%rdi
  3a:	e8 00 00 00 00       	call   3f <Serial::GetType(char const*)+0x3f>
  3f:	85 c0                	test   %eax,%eax
  41:	75 05                	jne    48 <Serial::GetType(char const*)+0x48>
  43:	8b 45 fc             	mov    -0x4(%rbp),%eax
  46:	eb 0f                	jmp    57 <Serial::GetType(char const*)+0x57>
  48:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  4c:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
  50:	76 c7                	jbe    19 <Serial::GetType(char const*)+0x19>
  52:	b8 00 00 00 00       	mov    $0x0,%eax
  57:	c9                   	leave  
  58:	c3                   	ret    

Disassembly of section .text._ZN6Serial13GetUartParityEN6serial4uart6parityE:

0000000000000000 <Serial::GetUartParity(serial::uart::parity)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 fc             	mov    %al,-0x4(%rbp)
   d:	80 7d fc 02          	cmpb   $0x2,-0x4(%rbp)
  11:	77 1d                	ja     30 <Serial::GetUartParity(serial::uart::parity)+0x30>
  13:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  17:	48 63 d0             	movslq %eax,%rdx
  1a:	48 89 d0             	mov    %rdx,%rax
  1d:	48 c1 e0 02          	shl    $0x2,%rax
  21:	48 01 d0             	add    %rdx,%rax
  24:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2b <Serial::GetUartParity(serial::uart::parity)+0x2b>
  2b:	48 01 d0             	add    %rdx,%rax
  2e:	eb 07                	jmp    37 <Serial::GetUartParity(serial::uart::parity)+0x37>
  30:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 37 <Serial::GetUartParity(serial::uart::parity)+0x37>
  37:	5d                   	pop    %rbp
  38:	c3                   	ret    

Disassembly of section .text._ZN6Serial13GetUartParityEPKc:

0000000000000000 <Serial::GetUartParity(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  17:	eb 33                	jmp    4c <Serial::GetUartParity(char const*)+0x4c>
  19:	8b 55 fc             	mov    -0x4(%rbp),%edx
  1c:	48 89 d0             	mov    %rdx,%rax
  1f:	48 c1 e0 02          	shl    $0x2,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d <Serial::GetUartParity(char const*)+0x2d>
  2d:	48 01 c2             	add    %rax,%rdx
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 89 c6             	mov    %rax,%rsi
  37:	48 89 d7             	mov    %rdx,%rdi
  3a:	e8 00 00 00 00       	call   3f <Serial::GetUartParity(char const*)+0x3f>
  3f:	85 c0                	test   %eax,%eax
  41:	75 05                	jne    48 <Serial::GetUartParity(char const*)+0x48>
  43:	8b 45 fc             	mov    -0x4(%rbp),%eax
  46:	eb 0f                	jmp    57 <Serial::GetUartParity(char const*)+0x57>
  48:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  4c:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
  50:	76 c7                	jbe    19 <Serial::GetUartParity(char const*)+0x19>
  52:	b8 00 00 00 00       	mov    $0x0,%eax
  57:	c9                   	leave  
  58:	c3                   	ret    

Disassembly of section .text._ZN6Serial15GetI2cSpeedModeEN6serial3i2c5speedE:

0000000000000000 <Serial::GetI2cSpeedMode(serial::i2c::speed)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 fc             	mov    %al,-0x4(%rbp)
   d:	80 7d fc 00          	cmpb   $0x0,-0x4(%rbp)
  11:	75 09                	jne    1c <Serial::GetI2cSpeedMode(serial::i2c::speed)+0x1c>
  13:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1a <Serial::GetI2cSpeedMode(serial::i2c::speed)+0x1a>
  1a:	eb 16                	jmp    32 <Serial::GetI2cSpeedMode(serial::i2c::speed)+0x32>
  1c:	80 7d fc 01          	cmpb   $0x1,-0x4(%rbp)
  20:	75 09                	jne    2b <Serial::GetI2cSpeedMode(serial::i2c::speed)+0x2b>
  22:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 29 <Serial::GetI2cSpeedMode(serial::i2c::speed)+0x29>
  29:	eb 07                	jmp    32 <Serial::GetI2cSpeedMode(serial::i2c::speed)+0x32>
  2b:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 32 <Serial::GetI2cSpeedMode(serial::i2c::speed)+0x32>
  32:	5d                   	pop    %rbp
  33:	c3                   	ret    

Disassembly of section .text._ZN6Serial15GetI2cSpeedModeEPKc:

0000000000000000 <Serial::GetI2cSpeedMode(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  17:	eb 33                	jmp    4c <Serial::GetI2cSpeedMode(char const*)+0x4c>
  19:	8b 55 fc             	mov    -0x4(%rbp),%edx
  1c:	48 89 d0             	mov    %rdx,%rax
  1f:	48 c1 e0 03          	shl    $0x3,%rax
  23:	48 01 d0             	add    %rdx,%rax
  26:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d <Serial::GetI2cSpeedMode(char const*)+0x2d>
  2d:	48 01 c2             	add    %rax,%rdx
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	48 89 c6             	mov    %rax,%rsi
  37:	48 89 d7             	mov    %rdx,%rdi
  3a:	e8 00 00 00 00       	call   3f <Serial::GetI2cSpeedMode(char const*)+0x3f>
  3f:	85 c0                	test   %eax,%eax
  41:	75 05                	jne    48 <Serial::GetI2cSpeedMode(char const*)+0x48>
  43:	8b 45 fc             	mov    -0x4(%rbp),%eax
  46:	eb 0f                	jmp    57 <Serial::GetI2cSpeedMode(char const*)+0x57>
  48:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  4c:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  50:	76 c7                	jbe    19 <Serial::GetI2cSpeedMode(char const*)+0x19>
  52:	b8 01 00 00 00       	mov    $0x1,%eax
  57:	c9                   	leave  
  58:	c3                   	ret    

Disassembly of section .text._ZN6Serial15GetI2cSpeedModeEj:

0000000000000000 <Serial::GetI2cSpeedMode(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	89 7d fc             	mov    %edi,-0x4(%rbp)
   b:	81 7d fc a0 86 01 00 	cmpl   $0x186a0,-0x4(%rbp)
  12:	75 09                	jne    1d <Serial::GetI2cSpeedMode(unsigned int)+0x1d>
  14:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1b <Serial::GetI2cSpeedMode(unsigned int)+0x1b>
  1b:	eb 19                	jmp    36 <Serial::GetI2cSpeedMode(unsigned int)+0x36>
  1d:	81 7d fc 80 1a 06 00 	cmpl   $0x61a80,-0x4(%rbp)
  24:	75 09                	jne    2f <Serial::GetI2cSpeedMode(unsigned int)+0x2f>
  26:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2d <Serial::GetI2cSpeedMode(unsigned int)+0x2d>
  2d:	eb 07                	jmp    36 <Serial::GetI2cSpeedMode(unsigned int)+0x36>
  2f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 36 <Serial::GetI2cSpeedMode(unsigned int)+0x36>
  36:	5d                   	pop    %rbp
  37:	c3                   	ret    

serialuart.o:     file format elf64-x86-64


Disassembly of section .text._ZN6Serial11SetUartBaudEj:

0000000000000000 <Serial::SetUartBaud(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1a <Serial::SetUartBaud(unsigned int)+0x1a>
  1a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  1d:	41 89 d1             	mov    %edx,%r9d
  20:	41 b8 27 00 00 00    	mov    $0x27,%r8d
  26:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d <Serial::SetUartBaud(unsigned int)+0x2d>
  2d:	48 89 d1             	mov    %rdx,%rcx
  30:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 37 <Serial::SetUartBaud(unsigned int)+0x37>
  37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e <Serial::SetUartBaud(unsigned int)+0x3e>
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	b8 00 00 00 00       	mov    $0x0,%eax
  46:	e8 00 00 00 00       	call   4b <Serial::SetUartBaud(unsigned int)+0x4b>
  4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4f:	8b 55 f4             	mov    -0xc(%rbp),%edx
  52:	89 50 04             	mov    %edx,0x4(%rax)
  55:	90                   	nop
  56:	c9                   	leave  
  57:	c3                   	ret    

Disassembly of section .text._ZN6Serial11SetUartBitsEj:

0000000000000000 <Serial::SetUartBits(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1a <Serial::SetUartBits(unsigned int)+0x1a>
  1a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  1d:	41 89 d1             	mov    %edx,%r9d
  20:	41 b8 2d 00 00 00    	mov    $0x2d,%r8d
  26:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d <Serial::SetUartBits(unsigned int)+0x2d>
  2d:	48 89 d1             	mov    %rdx,%rcx
  30:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 37 <Serial::SetUartBits(unsigned int)+0x37>
  37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e <Serial::SetUartBits(unsigned int)+0x3e>
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	b8 00 00 00 00       	mov    $0x0,%eax
  46:	e8 00 00 00 00       	call   4b <Serial::SetUartBits(unsigned int)+0x4b>
  4b:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  4f:	76 12                	jbe    63 <Serial::SetUartBits(unsigned int)+0x63>
  51:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  55:	77 0c                	ja     63 <Serial::SetUartBits(unsigned int)+0x63>
  57:	8b 45 f4             	mov    -0xc(%rbp),%eax
  5a:	89 c2                	mov    %eax,%edx
  5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  60:	88 50 08             	mov    %dl,0x8(%rax)
  63:	90                   	nop
  64:	c9                   	leave  
  65:	c3                   	ret    

Disassembly of section .text._ZN6Serial13SetUartParityEN6serial4uart6parityE:

0000000000000000 <Serial::SetUartParity(serial::uart::parity)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  19:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 20 <Serial::SetUartParity(serial::uart::parity)+0x20>
  20:	41 89 d1             	mov    %edx,%r9d
  23:	41 b8 35 00 00 00    	mov    $0x35,%r8d
  29:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 30 <Serial::SetUartParity(serial::uart::parity)+0x30>
  30:	48 89 d1             	mov    %rdx,%rcx
  33:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a <Serial::SetUartParity(serial::uart::parity)+0x3a>
  3a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 41 <Serial::SetUartParity(serial::uart::parity)+0x41>
  41:	48 89 c7             	mov    %rax,%rdi
  44:	b8 00 00 00 00       	mov    $0x0,%eax
  49:	e8 00 00 00 00       	call   4e <Serial::SetUartParity(serial::uart::parity)+0x4e>
  4e:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  52:	83 f8 01             	cmp    $0x1,%eax
  55:	74 07                	je     5e <Serial::SetUartParity(serial::uart::parity)+0x5e>
  57:	83 f8 02             	cmp    $0x2,%eax
  5a:	74 0c                	je     68 <Serial::SetUartParity(serial::uart::parity)+0x68>
  5c:	eb 14                	jmp    72 <Serial::SetUartParity(serial::uart::parity)+0x72>
  5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  62:	c6 40 09 01          	movb   $0x1,0x9(%rax)
  66:	eb 13                	jmp    7b <Serial::SetUartParity(serial::uart::parity)+0x7b>
  68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6c:	c6 40 09 02          	movb   $0x2,0x9(%rax)
  70:	eb 09                	jmp    7b <Serial::SetUartParity(serial::uart::parity)+0x7b>
  72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  76:	c6 40 09 00          	movb   $0x0,0x9(%rax)
  7a:	90                   	nop
  7b:	90                   	nop
  7c:	c9                   	leave  
  7d:	c3                   	ret    

Disassembly of section .text._ZN6Serial15SetUartStopBitsEj:

0000000000000000 <Serial::SetUartStopBits(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 1a <Serial::SetUartStopBits(unsigned int)+0x1a>
  1a:	8b 55 f4             	mov    -0xc(%rbp),%edx
  1d:	41 89 d1             	mov    %edx,%r9d
  20:	41 b8 45 00 00 00    	mov    $0x45,%r8d
  26:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d <Serial::SetUartStopBits(unsigned int)+0x2d>
  2d:	48 89 d1             	mov    %rdx,%rcx
  30:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 37 <Serial::SetUartStopBits(unsigned int)+0x37>
  37:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 3e <Serial::SetUartStopBits(unsigned int)+0x3e>
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	b8 00 00 00 00       	mov    $0x0,%eax
  46:	e8 00 00 00 00       	call   4b <Serial::SetUartStopBits(unsigned int)+0x4b>
  4b:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
  4f:	74 06                	je     57 <Serial::SetUartStopBits(unsigned int)+0x57>
  51:	83 7d f4 02          	cmpl   $0x2,-0xc(%rbp)
  55:	75 0c                	jne    63 <Serial::SetUartStopBits(unsigned int)+0x63>
  57:	8b 45 f4             	mov    -0xc(%rbp),%eax
  5a:	89 c2                	mov    %eax,%edx
  5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  60:	88 50 0a             	mov    %dl,0xa(%rax)
  63:	90                   	nop
  64:	c9                   	leave  
  65:	c3                   	ret    

Disassembly of section .text._ZN6Serial8InitUartEv:

0000000000000000 <Serial::InitUart()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	b9 4d 00 00 00       	mov    $0x4d,%ecx
  15:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1c <Serial::InitUart()+0x1c>
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 26 <Serial::InitUart()+0x26>
  26:	48 89 c6             	mov    %rax,%rsi
  29:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 30 <Serial::InitUart()+0x30>
  30:	48 89 c7             	mov    %rax,%rdi
  33:	b8 00 00 00 00       	mov    $0x0,%eax
  38:	e8 00 00 00 00       	call   3d <Serial::InitUart()+0x3d>
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	0f b6 40 0a          	movzbl 0xa(%rax),%eax
  45:	0f b6 f0             	movzbl %al,%esi
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	0f b6 40 09          	movzbl 0x9(%rax),%eax
  50:	0f b6 c8             	movzbl %al,%ecx
  53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  57:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  5b:	0f b6 d0             	movzbl %al,%edx
  5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  62:	8b 40 04             	mov    0x4(%rax),%eax
  65:	41 89 f0             	mov    %esi,%r8d
  68:	89 c6                	mov    %eax,%esi
  6a:	bf 00 00 00 00       	mov    $0x0,%edi
  6f:	e8 00 00 00 00       	call   74 <Serial::InitUart()+0x74>
  74:	b9 51 00 00 00       	mov    $0x51,%ecx
  79:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 80 <Serial::InitUart()+0x80>
  80:	48 89 c2             	mov    %rax,%rdx
  83:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 8a <Serial::InitUart()+0x8a>
  8a:	48 89 c6             	mov    %rax,%rsi
  8d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 94 <Serial::InitUart()+0x94>
  94:	48 89 c7             	mov    %rax,%rdi
  97:	b8 00 00 00 00       	mov    $0x0,%eax
  9c:	e8 00 00 00 00       	call   a1 <Serial::InitUart()+0xa1>
  a1:	b8 01 00 00 00       	mov    $0x1,%eax
  a6:	c9                   	leave  
  a7:	c3                   	ret    

Disassembly of section .text._ZN6Serial8SendUartEPKhj:

0000000000000000 <Serial::SendUart(unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	89 55 ec             	mov    %edx,-0x14(%rbp)
  17:	b9 56 00 00 00       	mov    $0x56,%ecx
  1c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 23 <Serial::SendUart(unsigned char const*, unsigned int)+0x23>
  23:	48 89 c2             	mov    %rax,%rdx
  26:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2d <Serial::SendUart(unsigned char const*, unsigned int)+0x2d>
  2d:	48 89 c6             	mov    %rax,%rsi
  30:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 37 <Serial::SendUart(unsigned char const*, unsigned int)+0x37>
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	b8 00 00 00 00       	mov    $0x0,%eax
  3f:	e8 00 00 00 00       	call   44 <Serial::SendUart(unsigned char const*, unsigned int)+0x44>
  44:	8b 55 ec             	mov    -0x14(%rbp),%edx
  47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4b:	48 89 c6             	mov    %rax,%rsi
  4e:	bf 00 00 00 00       	mov    $0x0,%edi
  53:	e8 00 00 00 00       	call   58 <Serial::SendUart(unsigned char const*, unsigned int)+0x58>
  58:	b9 5a 00 00 00       	mov    $0x5a,%ecx
  5d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 64 <Serial::SendUart(unsigned char const*, unsigned int)+0x64>
  64:	48 89 c2             	mov    %rax,%rdx
  67:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 6e <Serial::SendUart(unsigned char const*, unsigned int)+0x6e>
  6e:	48 89 c6             	mov    %rax,%rsi
  71:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 78 <Serial::SendUart(unsigned char const*, unsigned int)+0x78>
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	b8 00 00 00 00       	mov    $0x0,%eax
  80:	e8 00 00 00 00       	call   85 <Serial::SendUart(unsigned char const*, unsigned int)+0x85>
  85:	90                   	nop
  86:	c9                   	leave  
  87:	c3                   	ret    
