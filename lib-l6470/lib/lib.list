In archive lib/libl6470.a:

slushboard.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <SlushBoard::~SlushBoard()>:
   0:	e12fff1e 	bx	lr

00000004 <SlushBoard::InitSpi()>:
   4:	e92d4010 	push	{r4, lr}
   8:	ebfffffe 	bl	0 <bcm2835_spi_begin>
   c:	e3a0103e 	mov	r1, #62	; 0x3e
  10:	e59f301c 	ldr	r3, [pc, #28]	; 34 <SlushBoard::InitSpi()+0x30>
  14:	e5932000 	ldr	r2, [r3]
  18:	e3822003 	orr	r2, r2, #3
  1c:	e5832000 	str	r2, [r3]
  20:	e5831008 	str	r1, [r3, #8]
  24:	e5932000 	ldr	r2, [r3]
  28:	e382200c 	orr	r2, r2, #12
  2c:	e5832000 	str	r2, [r3]
  30:	e8bd8010 	pop	{r4, pc}
  34:	20204000 	eorcs	r4, r0, r0

00000038 <SlushBoard::InitI2c()>:
  38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  3c:	e3a06020 	mov	r6, #32
  40:	e59f40e4 	ldr	r4, [pc, #228]	; 12c <SlushBoard::InitI2c()+0xf4>
  44:	e59f50e4 	ldr	r5, [pc, #228]	; 130 <SlushBoard::InitI2c()+0xf8>
  48:	e24dd008 	sub	sp, sp, #8
  4c:	ebfffffe 	bl	0 <bcm2835_i2c_begin>
  50:	e1a00005 	mov	r0, r5
  54:	e584600c 	str	r6, [r4, #12]
  58:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
  5c:	e3e08000 	mvn	r8, #0
  60:	e3a03000 	mov	r3, #0
  64:	e3a07001 	mov	r7, #1
  68:	e5cd3004 	strb	r3, [sp, #4]
  6c:	e1a00005 	mov	r0, r5
  70:	e5cd8005 	strb	r8, [sp, #5]
  74:	e584600c 	str	r6, [r4, #12]
  78:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
  7c:	e3a01002 	mov	r1, #2
  80:	e28d0004 	add	r0, sp, #4
  84:	ebfffffe 	bl	0 <bcm2835_i2c_write>
  88:	e1a00005 	mov	r0, r5
  8c:	e5cd7004 	strb	r7, [sp, #4]
  90:	e5cd8005 	strb	r8, [sp, #5]
  94:	e584600c 	str	r6, [r4, #12]
  98:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
  9c:	e3a01002 	mov	r1, #2
  a0:	e28d0004 	add	r0, sp, #4
  a4:	ebfffffe 	bl	0 <bcm2835_i2c_write>
  a8:	e3a0300c 	mov	r3, #12
  ac:	e1a00005 	mov	r0, r5
  b0:	e5cd3004 	strb	r3, [sp, #4]
  b4:	e5cd8005 	strb	r8, [sp, #5]
  b8:	e584600c 	str	r6, [r4, #12]
  bc:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
  c0:	e3a01002 	mov	r1, #2
  c4:	e28d0004 	add	r0, sp, #4
  c8:	ebfffffe 	bl	0 <bcm2835_i2c_write>
  cc:	e3a0300d 	mov	r3, #13
  d0:	e1a00005 	mov	r0, r5
  d4:	e5cd3004 	strb	r3, [sp, #4]
  d8:	e5cd8005 	strb	r8, [sp, #5]
  dc:	e584600c 	str	r6, [r4, #12]
  e0:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
  e4:	e3a01002 	mov	r1, #2
  e8:	e28d0004 	add	r0, sp, #4
  ec:	ebfffffe 	bl	0 <bcm2835_i2c_write>
  f0:	e3a03036 	mov	r3, #54	; 0x36
  f4:	e1a00005 	mov	r0, r5
  f8:	e584300c 	str	r3, [r4, #12]
  fc:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 100:	e3e03075 	mvn	r3, #117	; 0x75
 104:	e1a01007 	mov	r1, r7
 108:	e28d0004 	add	r0, sp, #4
 10c:	e5cd3004 	strb	r3, [sp, #4]
 110:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 114:	e1a01007 	mov	r1, r7
 118:	e28d0004 	add	r0, sp, #4
 11c:	e5cd7004 	strb	r7, [sp, #4]
 120:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 124:	e28dd008 	add	sp, sp, #8
 128:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 12c:	20804000 	addcs	r4, r0, r0
 130:	00061a80 	andeq	r1, r6, r0, lsl #21

00000134 <SlushBoard::SlushBoard()>:
 134:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 138:	e3a06502 	mov	r6, #8388608	; 0x800000
 13c:	e59f40f8 	ldr	r4, [pc, #248]	; 23c <SlushBoard::SlushBoard()+0x108>
 140:	e1a05000 	mov	r5, r0
 144:	e3a01001 	mov	r1, #1
 148:	e3a00017 	mov	r0, #23
 14c:	ebfffffe 	bl	0 <bcm2835_gpio_fsel>
 150:	e3a01001 	mov	r1, #1
 154:	e3a00018 	mov	r0, #24
 158:	e584601c 	str	r6, [r4, #28]
 15c:	ebfffffe 	bl	0 <bcm2835_gpio_fsel>
 160:	e3a01001 	mov	r1, #1
 164:	e3a00019 	mov	r0, #25
 168:	ebfffffe 	bl	0 <bcm2835_gpio_fsel>
 16c:	e3a01001 	mov	r1, #1
 170:	e3a0001a 	mov	r0, #26
 174:	ebfffffe 	bl	0 <bcm2835_gpio_fsel>
 178:	e3a01001 	mov	r1, #1
 17c:	e3a0001b 	mov	r0, #27
 180:	ebfffffe 	bl	0 <bcm2835_gpio_fsel>
 184:	e3a0e401 	mov	lr, #16777216	; 0x1000000
 188:	e3a0c402 	mov	ip, #33554432	; 0x2000000
 18c:	e3a02301 	mov	r2, #67108864	; 0x4000000
 190:	e3a03302 	mov	r3, #134217728	; 0x8000000
 194:	e584e01c 	str	lr, [r4, #28]
 198:	e3a01000 	mov	r1, #0
 19c:	e584c01c 	str	ip, [r4, #28]
 1a0:	e3a00010 	mov	r0, #16
 1a4:	e584201c 	str	r2, [r4, #28]
 1a8:	e584301c 	str	r3, [r4, #28]
 1ac:	ebfffffe 	bl	0 <bcm2835_gpio_fsel>
 1b0:	e3a01000 	mov	r1, #0
 1b4:	e3a00011 	mov	r0, #17
 1b8:	ebfffffe 	bl	0 <bcm2835_gpio_fsel>
 1bc:	e59f707c 	ldr	r7, [pc, #124]	; 240 <SlushBoard::SlushBoard()+0x10c>
 1c0:	e3a01000 	mov	r1, #0
 1c4:	e3a00012 	mov	r0, #18
 1c8:	ebfffffe 	bl	0 <bcm2835_gpio_fsel>
 1cc:	e3a01000 	mov	r1, #0
 1d0:	e3a00013 	mov	r0, #19
 1d4:	ebfffffe 	bl	0 <bcm2835_gpio_fsel>
 1d8:	e1a00007 	mov	r0, r7
 1dc:	e5846028 	str	r6, [r4, #40]	; 0x28
 1e0:	ebfffffe 	bl	0 <udelay>
 1e4:	e1a00007 	mov	r0, r7
 1e8:	e584601c 	str	r6, [r4, #28]
 1ec:	ebfffffe 	bl	0 <udelay>
 1f0:	e3a01001 	mov	r1, #1
 1f4:	e3a00014 	mov	r0, #20
 1f8:	ebfffffe 	bl	0 <bcm2835_gpio_fsel>
 1fc:	e3a03601 	mov	r3, #1048576	; 0x100000
 200:	e584301c 	str	r3, [r4, #28]
 204:	ebfffffe 	bl	0 <bcm2835_spi_begin>
 208:	e3a0103e 	mov	r1, #62	; 0x3e
 20c:	e59f3030 	ldr	r3, [pc, #48]	; 244 <SlushBoard::SlushBoard()+0x110>
 210:	e1a00005 	mov	r0, r5
 214:	e5932000 	ldr	r2, [r3]
 218:	e3822003 	orr	r2, r2, #3
 21c:	e5832000 	str	r2, [r3]
 220:	e5831008 	str	r1, [r3, #8]
 224:	e5932000 	ldr	r2, [r3]
 228:	e382200c 	orr	r2, r2, #12
 22c:	e5832000 	str	r2, [r3]
 230:	ebfffffe 	bl	38 <SlushBoard::InitI2c()>
 234:	e1a00005 	mov	r0, r5
 238:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 23c:	20200000 	eorcs	r0, r0, r0
 240:	00002710 	andeq	r2, r0, r0, lsl r7
 244:	20204000 	eorcs	r4, r0, r0

00000248 <SlushBoard::I2cSetup(unsigned char)>:
 248:	e59f3008 	ldr	r3, [pc, #8]	; 258 <SlushBoard::I2cSetup(unsigned char)+0x10>
 24c:	e59f0008 	ldr	r0, [pc, #8]	; 25c <SlushBoard::I2cSetup(unsigned char)+0x14>
 250:	e583100c 	str	r1, [r3, #12]
 254:	eafffffe 	b	0 <bcm2835_i2c_set_baudrate>
 258:	20804000 	addcs	r4, r0, r0
 25c:	00061a80 	andeq	r1, r6, r0, lsl #21

00000260 <SlushBoard::Mcp23017ReadReg(unsigned char)>:
 260:	e3a02020 	mov	r2, #32
 264:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 268:	e59f3034 	ldr	r3, [pc, #52]	; 2a4 <SlushBoard::Mcp23017ReadReg(unsigned char)+0x44>
 26c:	e24dd00c 	sub	sp, sp, #12
 270:	e5cd1007 	strb	r1, [sp, #7]
 274:	e59f002c 	ldr	r0, [pc, #44]	; 2a8 <SlushBoard::Mcp23017ReadReg(unsigned char)+0x48>
 278:	e583200c 	str	r2, [r3, #12]
 27c:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 280:	e3a01001 	mov	r1, #1
 284:	e28d0007 	add	r0, sp, #7
 288:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 28c:	e3a01001 	mov	r1, #1
 290:	e28d0007 	add	r0, sp, #7
 294:	ebfffffe 	bl	0 <bcm2835_i2c_read>
 298:	e5dd0007 	ldrb	r0, [sp, #7]
 29c:	e28dd00c 	add	sp, sp, #12
 2a0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
 2a4:	20804000 	addcs	r4, r0, r0
 2a8:	00061a80 	andeq	r1, r6, r0, lsl #21

000002ac <SlushBoard::Mcp23017WriteReg(unsigned char, unsigned char)>:
 2ac:	e3a0c020 	mov	ip, #32
 2b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 2b4:	e59f3028 	ldr	r3, [pc, #40]	; 2e4 <SlushBoard::Mcp23017WriteReg(unsigned char, unsigned char)+0x38>
 2b8:	e24dd00c 	sub	sp, sp, #12
 2bc:	e5cd1004 	strb	r1, [sp, #4]
 2c0:	e5cd2005 	strb	r2, [sp, #5]
 2c4:	e59f001c 	ldr	r0, [pc, #28]	; 2e8 <SlushBoard::Mcp23017WriteReg(unsigned char, unsigned char)+0x3c>
 2c8:	e583c00c 	str	ip, [r3, #12]
 2cc:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 2d0:	e3a01002 	mov	r1, #2
 2d4:	e28d0004 	add	r0, sp, #4
 2d8:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 2dc:	e28dd00c 	add	sp, sp, #12
 2e0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
 2e4:	20804000 	addcs	r4, r0, r0
 2e8:	00061a80 	andeq	r1, r6, r0, lsl #21

000002ec <SlushBoard::setIOState(TSlushIOPorts, TSlushIOPins, unsigned char)>:
 2ec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 2f0:	e1a05002 	mov	r5, r2
 2f4:	e3a08001 	mov	r8, #1
 2f8:	e3a07020 	mov	r7, #32
 2fc:	e1a05518 	lsl	r5, r8, r5
 300:	e6ef5075 	uxtb	r5, r5
 304:	e1e09005 	mvn	r9, r5
 308:	e1a04001 	mov	r4, r1
 30c:	e1a0a003 	mov	sl, r3
 310:	e59f6104 	ldr	r6, [pc, #260]	; 41c <SlushBoard::setIOState(TSlushIOPorts, TSlushIOPins, unsigned char)+0x130>
 314:	e24dd008 	sub	sp, sp, #8
 318:	e5cd1004 	strb	r1, [sp, #4]
 31c:	e59f00fc 	ldr	r0, [pc, #252]	; 420 <SlushBoard::setIOState(TSlushIOPorts, TSlushIOPins, unsigned char)+0x134>
 320:	e586700c 	str	r7, [r6, #12]
 324:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 328:	e1a01008 	mov	r1, r8
 32c:	e28d0004 	add	r0, sp, #4
 330:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 334:	e1a01008 	mov	r1, r8
 338:	e28d0004 	add	r0, sp, #4
 33c:	ebfffffe 	bl	0 <bcm2835_i2c_read>
 340:	e5dd3004 	ldrb	r3, [sp, #4]
 344:	e59f00d4 	ldr	r0, [pc, #212]	; 420 <SlushBoard::setIOState(TSlushIOPorts, TSlushIOPins, unsigned char)+0x134>
 348:	e0033009 	and	r3, r3, r9
 34c:	e5cd3005 	strb	r3, [sp, #5]
 350:	e5cd4004 	strb	r4, [sp, #4]
 354:	e586700c 	str	r7, [r6, #12]
 358:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 35c:	e3a01002 	mov	r1, #2
 360:	e28d0004 	add	r0, sp, #4
 364:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 368:	e2843012 	add	r3, r4, #18
 36c:	e35a0000 	cmp	sl, #0
 370:	e2844014 	add	r4, r4, #20
 374:	e6ef3073 	uxtb	r3, r3
 378:	e6ef4074 	uxtb	r4, r4
 37c:	1a000016 	bne	3dc <SlushBoard::setIOState(TSlushIOPorts, TSlushIOPins, unsigned char)+0xf0>
 380:	e5cd3004 	strb	r3, [sp, #4]
 384:	e59f0094 	ldr	r0, [pc, #148]	; 420 <SlushBoard::setIOState(TSlushIOPorts, TSlushIOPins, unsigned char)+0x134>
 388:	e586700c 	str	r7, [r6, #12]
 38c:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 390:	e1a01008 	mov	r1, r8
 394:	e28d0004 	add	r0, sp, #4
 398:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 39c:	e1a01008 	mov	r1, r8
 3a0:	e28d0004 	add	r0, sp, #4
 3a4:	ebfffffe 	bl	0 <bcm2835_i2c_read>
 3a8:	e5dd3004 	ldrb	r3, [sp, #4]
 3ac:	e6ef9079 	uxtb	r9, r9
 3b0:	e0099003 	and	r9, r9, r3
 3b4:	e59f0064 	ldr	r0, [pc, #100]	; 420 <SlushBoard::setIOState(TSlushIOPorts, TSlushIOPins, unsigned char)+0x134>
 3b8:	e5cd4004 	strb	r4, [sp, #4]
 3bc:	e5cd9005 	strb	r9, [sp, #5]
 3c0:	e586700c 	str	r7, [r6, #12]
 3c4:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 3c8:	e3a01002 	mov	r1, #2
 3cc:	e28d0004 	add	r0, sp, #4
 3d0:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 3d4:	e28dd008 	add	sp, sp, #8
 3d8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 3dc:	e5cd3004 	strb	r3, [sp, #4]
 3e0:	e59f0038 	ldr	r0, [pc, #56]	; 420 <SlushBoard::setIOState(TSlushIOPorts, TSlushIOPins, unsigned char)+0x134>
 3e4:	e586700c 	str	r7, [r6, #12]
 3e8:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 3ec:	e1a01008 	mov	r1, r8
 3f0:	e28d0004 	add	r0, sp, #4
 3f4:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 3f8:	e1a01008 	mov	r1, r8
 3fc:	e28d0004 	add	r0, sp, #4
 400:	ebfffffe 	bl	0 <bcm2835_i2c_read>
 404:	e5dd3004 	ldrb	r3, [sp, #4]
 408:	e59f0010 	ldr	r0, [pc, #16]	; 420 <SlushBoard::setIOState(TSlushIOPorts, TSlushIOPins, unsigned char)+0x134>
 40c:	e1855003 	orr	r5, r5, r3
 410:	e5cd4004 	strb	r4, [sp, #4]
 414:	e5cd5005 	strb	r5, [sp, #5]
 418:	eaffffe8 	b	3c0 <SlushBoard::setIOState(TSlushIOPorts, TSlushIOPins, unsigned char)+0xd4>
 41c:	20804000 	addcs	r4, r0, r0
 420:	00061a80 	andeq	r1, r6, r0, lsl #21

00000424 <SlushBoard::setIOState(unsigned char, unsigned char, unsigned char)>:
 424:	eafffffe 	b	2ec <SlushBoard::setIOState(TSlushIOPorts, TSlushIOPins, unsigned char)>

00000428 <SlushBoard::getIOState(TSlushIOPorts, TSlushIOPins)>:
 428:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
 42c:	e3a09020 	mov	r9, #32
 430:	e3a06001 	mov	r6, #1
 434:	e1a04002 	mov	r4, r2
 438:	e1a05001 	mov	r5, r1
 43c:	e59f80a0 	ldr	r8, [pc, #160]	; 4e4 <SlushBoard::getIOState(TSlushIOPorts, TSlushIOPins)+0xbc>
 440:	e59f70a0 	ldr	r7, [pc, #160]	; 4e8 <SlushBoard::getIOState(TSlushIOPorts, TSlushIOPins)+0xc0>
 444:	e24dd00c 	sub	sp, sp, #12
 448:	e5cd1004 	strb	r1, [sp, #4]
 44c:	e1a00007 	mov	r0, r7
 450:	e588900c 	str	r9, [r8, #12]
 454:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 458:	e1a01006 	mov	r1, r6
 45c:	e28d0004 	add	r0, sp, #4
 460:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 464:	e1a01006 	mov	r1, r6
 468:	e28d0004 	add	r0, sp, #4
 46c:	ebfffffe 	bl	0 <bcm2835_i2c_read>
 470:	e1a04416 	lsl	r4, r6, r4
 474:	e5dd3004 	ldrb	r3, [sp, #4]
 478:	e6ef4074 	uxtb	r4, r4
 47c:	e1843003 	orr	r3, r4, r3
 480:	e5cd3005 	strb	r3, [sp, #5]
 484:	e5cd5004 	strb	r5, [sp, #4]
 488:	e1a00007 	mov	r0, r7
 48c:	e588900c 	str	r9, [r8, #12]
 490:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 494:	e2855012 	add	r5, r5, #18
 498:	e3a01002 	mov	r1, #2
 49c:	e28d0004 	add	r0, sp, #4
 4a0:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 4a4:	e1a00007 	mov	r0, r7
 4a8:	e5cd5004 	strb	r5, [sp, #4]
 4ac:	e588900c 	str	r9, [r8, #12]
 4b0:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 4b4:	e1a01006 	mov	r1, r6
 4b8:	e28d0004 	add	r0, sp, #4
 4bc:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 4c0:	e1a01006 	mov	r1, r6
 4c4:	e28d0004 	add	r0, sp, #4
 4c8:	ebfffffe 	bl	0 <bcm2835_i2c_read>
 4cc:	e5dd3004 	ldrb	r3, [sp, #4]
 4d0:	e1d43003 	bics	r3, r4, r3
 4d4:	01a00006 	moveq	r0, r6
 4d8:	13a00000 	movne	r0, #0
 4dc:	e28dd00c 	add	sp, sp, #12
 4e0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
 4e4:	20804000 	addcs	r4, r0, r0
 4e8:	00061a80 	andeq	r1, r6, r0, lsl #21

000004ec <SlushBoard::getIOState(unsigned char, unsigned char)>:
 4ec:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
 4f0:	e3a09020 	mov	r9, #32
 4f4:	e3a06001 	mov	r6, #1
 4f8:	e1a04002 	mov	r4, r2
 4fc:	e1a05001 	mov	r5, r1
 500:	e59f80a0 	ldr	r8, [pc, #160]	; 5a8 <SlushBoard::getIOState(unsigned char, unsigned char)+0xbc>
 504:	e59f70a0 	ldr	r7, [pc, #160]	; 5ac <SlushBoard::getIOState(unsigned char, unsigned char)+0xc0>
 508:	e24dd00c 	sub	sp, sp, #12
 50c:	e5cd1004 	strb	r1, [sp, #4]
 510:	e1a00007 	mov	r0, r7
 514:	e588900c 	str	r9, [r8, #12]
 518:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 51c:	e1a01006 	mov	r1, r6
 520:	e28d0004 	add	r0, sp, #4
 524:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 528:	e1a01006 	mov	r1, r6
 52c:	e28d0004 	add	r0, sp, #4
 530:	ebfffffe 	bl	0 <bcm2835_i2c_read>
 534:	e1a04416 	lsl	r4, r6, r4
 538:	e5dd3004 	ldrb	r3, [sp, #4]
 53c:	e6ef4074 	uxtb	r4, r4
 540:	e1843003 	orr	r3, r4, r3
 544:	e5cd3005 	strb	r3, [sp, #5]
 548:	e5cd5004 	strb	r5, [sp, #4]
 54c:	e1a00007 	mov	r0, r7
 550:	e588900c 	str	r9, [r8, #12]
 554:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 558:	e2855012 	add	r5, r5, #18
 55c:	e3a01002 	mov	r1, #2
 560:	e28d0004 	add	r0, sp, #4
 564:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 568:	e1a00007 	mov	r0, r7
 56c:	e5cd5004 	strb	r5, [sp, #4]
 570:	e588900c 	str	r9, [r8, #12]
 574:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 578:	e1a01006 	mov	r1, r6
 57c:	e28d0004 	add	r0, sp, #4
 580:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 584:	e1a01006 	mov	r1, r6
 588:	e28d0004 	add	r0, sp, #4
 58c:	ebfffffe 	bl	0 <bcm2835_i2c_read>
 590:	e5dd3004 	ldrb	r3, [sp, #4]
 594:	e1d43003 	bics	r3, r4, r3
 598:	01a00006 	moveq	r0, r6
 59c:	13a00000 	movne	r0, #0
 5a0:	e28dd00c 	add	sp, sp, #12
 5a4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
 5a8:	20804000 	addcs	r4, r0, r0
 5ac:	00061a80 	andeq	r1, r6, r0, lsl #21

000005b0 <SlushBoard::IOFSel(TSlushIOPorts, TSlushIOPins, TSlushIOFSel)>:
 5b0:	e92d4070 	push	{r4, r5, r6, lr}
 5b4:	e3a0e020 	mov	lr, #32
 5b8:	e59fc080 	ldr	ip, [pc, #128]	; 640 <SlushBoard::IOFSel(TSlushIOPorts, TSlushIOPins, TSlushIOFSel)+0x90>
 5bc:	e24dd008 	sub	sp, sp, #8
 5c0:	e5cd1004 	strb	r1, [sp, #4]
 5c4:	e59f0078 	ldr	r0, [pc, #120]	; 644 <SlushBoard::IOFSel(TSlushIOPorts, TSlushIOPins, TSlushIOFSel)+0x94>
 5c8:	e58ce00c 	str	lr, [ip, #12]
 5cc:	e1a05002 	mov	r5, r2
 5d0:	e1a06003 	mov	r6, r3
 5d4:	e1a04001 	mov	r4, r1
 5d8:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 5dc:	e3a01001 	mov	r1, #1
 5e0:	e28d0004 	add	r0, sp, #4
 5e4:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 5e8:	e3a01001 	mov	r1, #1
 5ec:	e28d0004 	add	r0, sp, #4
 5f0:	ebfffffe 	bl	0 <bcm2835_i2c_read>
 5f4:	e3a00001 	mov	r0, #1
 5f8:	e3a01020 	mov	r1, #32
 5fc:	e5dd2004 	ldrb	r2, [sp, #4]
 600:	e1a03510 	lsl	r3, r0, r5
 604:	e6ef3073 	uxtb	r3, r3
 608:	e3560000 	cmp	r6, #0
 60c:	01c23003 	biceq	r3, r2, r3
 610:	11833002 	orrne	r3, r3, r2
 614:	e59f2024 	ldr	r2, [pc, #36]	; 640 <SlushBoard::IOFSel(TSlushIOPorts, TSlushIOPins, TSlushIOFSel)+0x90>
 618:	e5cd3005 	strb	r3, [sp, #5]
 61c:	e5cd4004 	strb	r4, [sp, #4]
 620:	e59f001c 	ldr	r0, [pc, #28]	; 644 <SlushBoard::IOFSel(TSlushIOPorts, TSlushIOPins, TSlushIOFSel)+0x94>
 624:	e582100c 	str	r1, [r2, #12]
 628:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 62c:	e3a01002 	mov	r1, #2
 630:	e28d0004 	add	r0, sp, #4
 634:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 638:	e28dd008 	add	sp, sp, #8
 63c:	e8bd8070 	pop	{r4, r5, r6, pc}
 640:	20804000 	addcs	r4, r0, r0
 644:	00061a80 	andeq	r1, r6, r0, lsl #21

00000648 <SlushBoard::IOClr(TSlushIOPorts, TSlushIOPins)>:
 648:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 64c:	e3a07020 	mov	r7, #32
 650:	e59f6070 	ldr	r6, [pc, #112]	; 6c8 <SlushBoard::IOClr(TSlushIOPorts, TSlushIOPins)+0x80>
 654:	e59f8070 	ldr	r8, [pc, #112]	; 6cc <SlushBoard::IOClr(TSlushIOPorts, TSlushIOPins)+0x84>
 658:	e24dd008 	sub	sp, sp, #8
 65c:	e2813012 	add	r3, r1, #18
 660:	e5cd3004 	strb	r3, [sp, #4]
 664:	e1a00008 	mov	r0, r8
 668:	e586700c 	str	r7, [r6, #12]
 66c:	e1a05002 	mov	r5, r2
 670:	e1a04001 	mov	r4, r1
 674:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 678:	e3a01001 	mov	r1, #1
 67c:	e28d0004 	add	r0, sp, #4
 680:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 684:	e3a01001 	mov	r1, #1
 688:	e28d0004 	add	r0, sp, #4
 68c:	ebfffffe 	bl	0 <bcm2835_i2c_read>
 690:	e3a02001 	mov	r2, #1
 694:	e5dd3004 	ldrb	r3, [sp, #4]
 698:	e2844014 	add	r4, r4, #20
 69c:	e1c32512 	bic	r2, r3, r2, lsl r5
 6a0:	e5cd2005 	strb	r2, [sp, #5]
 6a4:	e1a00008 	mov	r0, r8
 6a8:	e5cd4004 	strb	r4, [sp, #4]
 6ac:	e586700c 	str	r7, [r6, #12]
 6b0:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 6b4:	e3a01002 	mov	r1, #2
 6b8:	e28d0004 	add	r0, sp, #4
 6bc:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 6c0:	e28dd008 	add	sp, sp, #8
 6c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 6c8:	20804000 	addcs	r4, r0, r0
 6cc:	00061a80 	andeq	r1, r6, r0, lsl #21

000006d0 <SlushBoard::IOSet(TSlushIOPorts, TSlushIOPins)>:
 6d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 6d4:	e3a07020 	mov	r7, #32
 6d8:	e59f6070 	ldr	r6, [pc, #112]	; 750 <SlushBoard::IOSet(TSlushIOPorts, TSlushIOPins)+0x80>
 6dc:	e59f8070 	ldr	r8, [pc, #112]	; 754 <SlushBoard::IOSet(TSlushIOPorts, TSlushIOPins)+0x84>
 6e0:	e24dd008 	sub	sp, sp, #8
 6e4:	e2813012 	add	r3, r1, #18
 6e8:	e5cd3004 	strb	r3, [sp, #4]
 6ec:	e1a00008 	mov	r0, r8
 6f0:	e586700c 	str	r7, [r6, #12]
 6f4:	e1a05002 	mov	r5, r2
 6f8:	e1a04001 	mov	r4, r1
 6fc:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 700:	e3a01001 	mov	r1, #1
 704:	e28d0004 	add	r0, sp, #4
 708:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 70c:	e3a01001 	mov	r1, #1
 710:	e28d0004 	add	r0, sp, #4
 714:	ebfffffe 	bl	0 <bcm2835_i2c_read>
 718:	e3a02001 	mov	r2, #1
 71c:	e5dd3004 	ldrb	r3, [sp, #4]
 720:	e2844014 	add	r4, r4, #20
 724:	e1832512 	orr	r2, r3, r2, lsl r5
 728:	e5cd2005 	strb	r2, [sp, #5]
 72c:	e1a00008 	mov	r0, r8
 730:	e5cd4004 	strb	r4, [sp, #4]
 734:	e586700c 	str	r7, [r6, #12]
 738:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 73c:	e3a01002 	mov	r1, #2
 740:	e28d0004 	add	r0, sp, #4
 744:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 748:	e28dd008 	add	sp, sp, #8
 74c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 750:	20804000 	addcs	r4, r0, r0
 754:	00061a80 	andeq	r1, r6, r0, lsl #21

00000758 <SlushBoard::IOLev(TSlushIOPorts, TSlushIOPins)>:
 758:	e3a0c020 	mov	ip, #32
 75c:	e92d4010 	push	{r4, lr}
 760:	e59f3058 	ldr	r3, [pc, #88]	; 7c0 <SlushBoard::IOLev(TSlushIOPorts, TSlushIOPins)+0x68>
 764:	e24dd008 	sub	sp, sp, #8
 768:	e2811012 	add	r1, r1, #18
 76c:	e5cd1007 	strb	r1, [sp, #7]
 770:	e59f004c 	ldr	r0, [pc, #76]	; 7c4 <SlushBoard::IOLev(TSlushIOPorts, TSlushIOPins)+0x6c>
 774:	e583c00c 	str	ip, [r3, #12]
 778:	e1a04002 	mov	r4, r2
 77c:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 780:	e3a01001 	mov	r1, #1
 784:	e28d0007 	add	r0, sp, #7
 788:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 78c:	e3a01001 	mov	r1, #1
 790:	e28d0007 	add	r0, sp, #7
 794:	ebfffffe 	bl	0 <bcm2835_i2c_read>
 798:	e3a00001 	mov	r0, #1
 79c:	e5dd3007 	ldrb	r3, [sp, #7]
 7a0:	e1a02410 	lsl	r2, r0, r4
 7a4:	e6ef0072 	uxtb	r0, r2
 7a8:	e0022003 	and	r2, r2, r3
 7ac:	e0420000 	sub	r0, r2, r0
 7b0:	e16f0f10 	clz	r0, r0
 7b4:	e1a002a0 	lsr	r0, r0, #5
 7b8:	e28dd008 	add	sp, sp, #8
 7bc:	e8bd8010 	pop	{r4, pc}
 7c0:	20804000 	addcs	r4, r0, r0
 7c4:	00061a80 	andeq	r1, r6, r0, lsl #21

000007c8 <SlushBoard::IORead(TSlushIOPorts)>:
 7c8:	e3a02020 	mov	r2, #32
 7cc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 7d0:	e59f3038 	ldr	r3, [pc, #56]	; 810 <SlushBoard::IORead(TSlushIOPorts)+0x48>
 7d4:	e24dd00c 	sub	sp, sp, #12
 7d8:	e2811012 	add	r1, r1, #18
 7dc:	e5cd1007 	strb	r1, [sp, #7]
 7e0:	e59f002c 	ldr	r0, [pc, #44]	; 814 <SlushBoard::IORead(TSlushIOPorts)+0x4c>
 7e4:	e583200c 	str	r2, [r3, #12]
 7e8:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 7ec:	e3a01001 	mov	r1, #1
 7f0:	e28d0007 	add	r0, sp, #7
 7f4:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 7f8:	e3a01001 	mov	r1, #1
 7fc:	e28d0007 	add	r0, sp, #7
 800:	ebfffffe 	bl	0 <bcm2835_i2c_read>
 804:	e5dd0007 	ldrb	r0, [sp, #7]
 808:	e28dd00c 	add	sp, sp, #12
 80c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
 810:	20804000 	addcs	r4, r0, r0
 814:	00061a80 	andeq	r1, r6, r0, lsl #21

00000818 <SlushBoard::IOWrite(TSlushIOPorts, unsigned char)>:
 818:	e3a0c020 	mov	ip, #32
 81c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 820:	e59f302c 	ldr	r3, [pc, #44]	; 854 <SlushBoard::IOWrite(TSlushIOPorts, unsigned char)+0x3c>
 824:	e24dd00c 	sub	sp, sp, #12
 828:	e2811014 	add	r1, r1, #20
 82c:	e5cd1004 	strb	r1, [sp, #4]
 830:	e5cd2005 	strb	r2, [sp, #5]
 834:	e59f001c 	ldr	r0, [pc, #28]	; 858 <SlushBoard::IOWrite(TSlushIOPorts, unsigned char)+0x40>
 838:	e583c00c 	str	ip, [r3, #12]
 83c:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
 840:	e3a01002 	mov	r1, #2
 844:	e28d0004 	add	r0, sp, #4
 848:	ebfffffe 	bl	0 <bcm2835_i2c_write>
 84c:	e28dd00c 	add	sp, sp, #12
 850:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
 854:	20804000 	addcs	r4, r0, r0
 858:	00061a80 	andeq	r1, r6, r0, lsl #21

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <SlushBoard::IOWrite(TSlushIOPorts, unsigned char)+0x168d014>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <SlushBoard::IOWrite(TSlushIOPorts, unsigned char)+0x41c0c>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


l6470support.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <L6470::accCalc(float)>:
   0:	eddf7a06 	vldr	s15, [pc, #24]	; 20 <L6470::accCalc(float)+0x20>
   4:	ee200a27 	vmul.f32	s0, s0, s15
   8:	eefd7ac0 	vcvt.s32.f32	s15, s0
   c:	ee170a90 	vmov	r0, s15
  10:	e59f300c 	ldr	r3, [pc, #12]	; 24 <L6470::accCalc(float)+0x24>
  14:	e1500003 	cmp	r0, r3
  18:	21a00003 	movcs	r0, r3
  1c:	e12fff1e 	bx	lr
  20:	3e0cbc8c 	cdpcc	12, 0, cr11, cr12, cr12, {4}
  24:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00000028 <L6470::accParse(unsigned long)>:
  28:	e1a01a01 	lsl	r1, r1, #20
  2c:	e1a01a21 	lsr	r1, r1, #20
  30:	ee071a90 	vmov	s15, r1
  34:	ed9f0a02 	vldr	s0, [pc, #8]	; 44 <L6470::accParse(unsigned long)+0x1c>
  38:	eef87ae7 	vcvt.f32.s32	s15, s15
  3c:	ee870a80 	vdiv.f32	s0, s15, s0
  40:	e12fff1e 	bx	lr
  44:	3e0cbc8c 	cdpcc	12, 0, cr11, cr12, cr12, {4}

00000048 <L6470::decCalc(float)>:
  48:	eddf7a06 	vldr	s15, [pc, #24]	; 68 <L6470::decCalc(float)+0x20>
  4c:	ee200a27 	vmul.f32	s0, s0, s15
  50:	eefd7ac0 	vcvt.s32.f32	s15, s0
  54:	ee170a90 	vmov	r0, s15
  58:	e59f300c 	ldr	r3, [pc, #12]	; 6c <L6470::decCalc(float)+0x24>
  5c:	e1500003 	cmp	r0, r3
  60:	21a00003 	movcs	r0, r3
  64:	e12fff1e 	bx	lr
  68:	3e0cbc8c 	cdpcc	12, 0, cr11, cr12, cr12, {4}
  6c:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00000070 <L6470::decParse(unsigned long)>:
  70:	e1a01a01 	lsl	r1, r1, #20
  74:	e1a01a21 	lsr	r1, r1, #20
  78:	ee071a90 	vmov	s15, r1
  7c:	ed9f0a02 	vldr	s0, [pc, #8]	; 8c <L6470::decParse(unsigned long)+0x1c>
  80:	eef87ae7 	vcvt.f32.s32	s15, s15
  84:	ee870a80 	vdiv.f32	s0, s15, s0
  88:	e12fff1e 	bx	lr
  8c:	3e0cbc8c 	cdpcc	12, 0, cr11, cr12, cr12, {4}

00000090 <L6470::maxSpdCalc(float)>:
  90:	eddf7a0a 	vldr	s15, [pc, #40]	; c0 <L6470::maxSpdCalc(float)+0x30>
  94:	ee200a27 	vmul.f32	s0, s0, s15
  98:	eefd7ac0 	vcvt.s32.f32	s15, s0
  9c:	eeb87ae7 	vcvt.f32.s32	s14, s15
  a0:	eeb40a47 	vcmp.f32	s0, s14
  a4:	ee173a90 	vmov	r3, s15
  a8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
  ac:	e59f0010 	ldr	r0, [pc, #16]	; c4 <L6470::maxSpdCalc(float)+0x34>
  b0:	12833001 	addne	r3, r3, #1
  b4:	e1530000 	cmp	r3, r0
  b8:	31a00003 	movcc	r0, r3
  bc:	e12fff1e 	bx	lr
  c0:	3d8637bd 	stccc	7, cr3, [r6, #756]	; 0x2f4
  c4:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

000000c8 <L6470::maxSpdParse(unsigned long)>:
  c8:	e1a01b01 	lsl	r1, r1, #22
  cc:	e1a01b21 	lsr	r1, r1, #22
  d0:	ee071a90 	vmov	s15, r1
  d4:	ed9f0a02 	vldr	s0, [pc, #8]	; e4 <L6470::maxSpdParse(unsigned long)+0x1c>
  d8:	eef87ae7 	vcvt.f32.s32	s15, s15
  dc:	ee870a80 	vdiv.f32	s0, s15, s0
  e0:	e12fff1e 	bx	lr
  e4:	3d8637bd 	stccc	7, cr3, [r6, #756]	; 0x2f4

000000e8 <L6470::minSpdCalc(float)>:
  e8:	ed9f7a06 	vldr	s14, [pc, #24]	; 108 <L6470::minSpdCalc(float)+0x20>
  ec:	eec07a07 	vdiv.f32	s15, s0, s14
  f0:	eefd7ae7 	vcvt.s32.f32	s15, s15
  f4:	ee170a90 	vmov	r0, s15
  f8:	e59f300c 	ldr	r3, [pc, #12]	; 10c <L6470::minSpdCalc(float)+0x24>
  fc:	e1500003 	cmp	r0, r3
 100:	21a00003 	movcs	r0, r3
 104:	e12fff1e 	bx	lr
 108:	3e73b646 	cdpcc	6, 7, cr11, cr3, cr6, {2}
 10c:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00000110 <L6470::minSpdParse(unsigned long)>:
 110:	e1a01a01 	lsl	r1, r1, #20
 114:	e1a01a21 	lsr	r1, r1, #20
 118:	ee071a90 	vmov	s15, r1
 11c:	ed9f0a02 	vldr	s0, [pc, #8]	; 12c <L6470::minSpdParse(unsigned long)+0x1c>
 120:	eef87ae7 	vcvt.f32.s32	s15, s15
 124:	ee270a80 	vmul.f32	s0, s15, s0
 128:	e12fff1e 	bx	lr
 12c:	3e73b646 	cdpcc	6, 7, cr11, cr3, cr6, {2}

00000130 <L6470::FSCalc(float)>:
 130:	ed9f7a07 	vldr	s14, [pc, #28]	; 154 <L6470::FSCalc(float)+0x24>
 134:	eddf7a07 	vldr	s15, [pc, #28]	; 158 <L6470::FSCalc(float)+0x28>
 138:	ee507a07 	vnmls.f32	s15, s0, s14
 13c:	eefd7ae7 	vcvt.s32.f32	s15, s15
 140:	ee170a90 	vmov	r0, s15
 144:	e59f3010 	ldr	r3, [pc, #16]	; 15c <L6470::FSCalc(float)+0x2c>
 148:	e1500003 	cmp	r0, r3
 14c:	21a00003 	movcs	r0, r3
 150:	e12fff1e 	bx	lr
 154:	3d8637bd 	stccc	7, cr3, [r6, #756]	; 0x2f4
 158:	3f000000 	svccc	0x00000000
 15c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

00000160 <L6470::FSParse(unsigned long)>:
 160:	e1a01b01 	lsl	r1, r1, #22
 164:	e1a01b21 	lsr	r1, r1, #22
 168:	ee071a90 	vmov	s15, r1
 16c:	ed9f7a04 	vldr	s14, [pc, #16]	; 184 <L6470::FSParse(unsigned long)+0x24>
 170:	eef87ae7 	vcvt.f32.s32	s15, s15
 174:	ed9f0a03 	vldr	s0, [pc, #12]	; 188 <L6470::FSParse(unsigned long)+0x28>
 178:	ee777a87 	vadd.f32	s15, s15, s14
 17c:	ee870a80 	vdiv.f32	s0, s15, s0
 180:	e12fff1e 	bx	lr
 184:	3f000000 	svccc	0x00000000
 188:	3d8637bd 	stccc	7, cr3, [r6, #756]	; 0x2f4

0000018c <L6470::intSpdCalc(float)>:
 18c:	eddf7a06 	vldr	s15, [pc, #24]	; 1ac <L6470::intSpdCalc(float)+0x20>
 190:	ee200a27 	vmul.f32	s0, s0, s15
 194:	eefd7ac0 	vcvt.s32.f32	s15, s0
 198:	ee170a90 	vmov	r0, s15
 19c:	e59f300c 	ldr	r3, [pc, #12]	; 1b0 <L6470::intSpdCalc(float)+0x24>
 1a0:	e1500003 	cmp	r0, r3
 1a4:	21a00003 	movcs	r0, r3
 1a8:	e12fff1e 	bx	lr
 1ac:	408637b5 			; <UNDEFINED> instruction: 0x408637b5
 1b0:	00003fff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>

000001b4 <L6470::intSpdParse(unsigned long)>:
 1b4:	e1a01901 	lsl	r1, r1, #18
 1b8:	e1a01921 	lsr	r1, r1, #18
 1bc:	ee071a90 	vmov	s15, r1
 1c0:	ed9f0a02 	vldr	s0, [pc, #8]	; 1d0 <L6470::intSpdParse(unsigned long)+0x1c>
 1c4:	eef87ae7 	vcvt.f32.s32	s15, s15
 1c8:	ee870a80 	vdiv.f32	s0, s15, s0
 1cc:	e12fff1e 	bx	lr
 1d0:	408637b5 			; <UNDEFINED> instruction: 0x408637b5

000001d4 <L6470::spdCalc(float)>:
 1d4:	eddf7a06 	vldr	s15, [pc, #24]	; 1f4 <L6470::spdCalc(float)+0x20>
 1d8:	ee200a27 	vmul.f32	s0, s0, s15
 1dc:	eefc7ac0 	vcvt.u32.f32	s15, s0
 1e0:	ee170a90 	vmov	r0, s15
 1e4:	e59f300c 	ldr	r3, [pc, #12]	; 1f8 <L6470::spdCalc(float)+0x24>
 1e8:	e1500003 	cmp	r0, r3
 1ec:	21a00003 	movcs	r0, r3
 1f0:	e12fff1e 	bx	lr
 1f4:	42863646 	addmi	r3, r6, #73400320	; 0x4600000
 1f8:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

000001fc <L6470::spdParse(unsigned long)>:
 1fc:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
 200:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
 204:	ee071a90 	vmov	s15, r1
 208:	ed9f0a02 	vldr	s0, [pc, #8]	; 218 <L6470::spdParse(unsigned long)+0x1c>
 20c:	eef87ae7 	vcvt.f32.s32	s15, s15
 210:	ee870a80 	vdiv.f32	s0, s15, s0
 214:	e12fff1e 	bx	lr
 218:	42863646 	addmi	r3, r6, #73400320	; 0x4600000

0000021c <L6470::paramHandler(unsigned char, unsigned long)>:
 21c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 220:	e5903000 	ldr	r3, [r0]
 224:	e2411001 	sub	r1, r1, #1
 228:	e1a04000 	mov	r4, r0
 22c:	e1a05002 	mov	r5, r2
 230:	e593300c 	ldr	r3, [r3, #12]
 234:	e24dd008 	sub	sp, sp, #8
 238:	e3510018 	cmp	r1, #24
 23c:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
 240:	ea000072 	b	410 <L6470::paramHandler(unsigned char, unsigned long)+0x1f4>
 244:	0000034c 	andeq	r0, r0, ip, asr #6
 248:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 24c:	00000390 	muleq	r0, r0, r3
 250:	00000308 	andeq	r0, r0, r8, lsl #6
 254:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 258:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 25c:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 260:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 264:	000002a8 	andeq	r0, r0, r8, lsr #5
 268:	000002a8 	andeq	r0, r0, r8, lsr #5
 26c:	000002a8 	andeq	r0, r0, r8, lsr #5
 270:	000002a8 	andeq	r0, r0, r8, lsr #5
 274:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 278:	000002a8 	andeq	r0, r0, r8, lsr #5
 27c:	000002a8 	andeq	r0, r0, r8, lsr #5
 280:	000002a8 	andeq	r0, r0, r8, lsr #5
 284:	000002f8 	strdeq	r0, [r0], -r8
 288:	000002a8 	andeq	r0, r0, r8, lsr #5
 28c:	000002f8 	strdeq	r0, [r0], -r8
 290:	000003d4 	ldrdeq	r0, [r0], -r4
 294:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 298:	000002a8 	andeq	r0, r0, r8, lsr #5
 29c:	000002a8 	andeq	r0, r0, r8, lsr #5
 2a0:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 2a4:	000003e4 	andeq	r0, r0, r4, ror #7
 2a8:	e6ef1072 	uxtb	r1, r2
 2ac:	e12fff33 	blx	r3
 2b0:	e6ef0070 	uxtb	r0, r0
 2b4:	e28dd008 	add	sp, sp, #8
 2b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 2bc:	e1a01422 	lsr	r1, r2, #8
 2c0:	e6ef1071 	uxtb	r1, r1
 2c4:	e12fff33 	blx	r3
 2c8:	e1a03000 	mov	r3, r0
 2cc:	e1a00004 	mov	r0, r4
 2d0:	e5942000 	ldr	r2, [r4]
 2d4:	e6ef1075 	uxtb	r1, r5
 2d8:	e592200c 	ldr	r2, [r2, #12]
 2dc:	e6ef4073 	uxtb	r4, r3
 2e0:	e12fff32 	blx	r2
 2e4:	e1a04404 	lsl	r4, r4, #8
 2e8:	e6ef0070 	uxtb	r0, r0
 2ec:	e1800004 	orr	r0, r0, r4
 2f0:	e28dd008 	add	sp, sp, #8
 2f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 2f8:	e202100f 	and	r1, r2, #15
 2fc:	e12fff33 	blx	r3
 300:	e6ef0070 	uxtb	r0, r0
 304:	eaffffea 	b	2b4 <L6470::paramHandler(unsigned char, unsigned long)+0x98>
 308:	e3a01000 	mov	r1, #0
 30c:	e28d7004 	add	r7, sp, #4
 310:	e28d5006 	add	r5, sp, #6
 314:	e28d6001 	add	r6, sp, #1
 318:	e58d1000 	str	r1, [sp]
 31c:	e58d1004 	str	r1, [sp, #4]
 320:	e1a00004 	mov	r0, r4
 324:	e12fff33 	blx	r3
 328:	e1a03005 	mov	r3, r5
 32c:	e1570005 	cmp	r7, r5
 330:	e4430001 	strb	r0, [r3], #-1
 334:	0a000032 	beq	404 <L6470::paramHandler(unsigned char, unsigned long)+0x1e8>
 338:	e5942000 	ldr	r2, [r4]
 33c:	e1a05003 	mov	r5, r3
 340:	e4561001 	ldrb	r1, [r6], #-1
 344:	e592300c 	ldr	r3, [r2, #12]
 348:	eafffff4 	b	320 <L6470::paramHandler(unsigned char, unsigned long)+0x104>
 34c:	e3a02000 	mov	r2, #0
 350:	e1a0800d 	mov	r8, sp
 354:	e58d5000 	str	r5, [sp]
 358:	e28d6002 	add	r6, sp, #2
 35c:	e28d7006 	add	r7, sp, #6
 360:	e58d2004 	str	r2, [sp, #4]
 364:	e1a05006 	mov	r5, r6
 368:	e1a00004 	mov	r0, r4
 36c:	e4551001 	ldrb	r1, [r5], #-1
 370:	e12fff33 	blx	r3
 374:	e1560008 	cmp	r6, r8
 378:	e4470001 	strb	r0, [r7], #-1
 37c:	0a000020 	beq	404 <L6470::paramHandler(unsigned char, unsigned long)+0x1e8>
 380:	e5943000 	ldr	r3, [r4]
 384:	e1a06005 	mov	r6, r5
 388:	e593300c 	ldr	r3, [r3, #12]
 38c:	eafffff4 	b	364 <L6470::paramHandler(unsigned char, unsigned long)+0x148>
 390:	e3a02000 	mov	r2, #0
 394:	e1a0800d 	mov	r8, sp
 398:	e58d5000 	str	r5, [sp]
 39c:	e28d6002 	add	r6, sp, #2
 3a0:	e28d7006 	add	r7, sp, #6
 3a4:	e58d2004 	str	r2, [sp, #4]
 3a8:	e1a05006 	mov	r5, r6
 3ac:	e1a00004 	mov	r0, r4
 3b0:	e4551001 	ldrb	r1, [r5], #-1
 3b4:	e12fff33 	blx	r3
 3b8:	e1580006 	cmp	r8, r6
 3bc:	e4470001 	strb	r0, [r7], #-1
 3c0:	0a00000f 	beq	404 <L6470::paramHandler(unsigned char, unsigned long)+0x1e8>
 3c4:	e5943000 	ldr	r3, [r4]
 3c8:	e1a06005 	mov	r6, r5
 3cc:	e593300c 	ldr	r3, [r3, #12]
 3d0:	eafffff4 	b	3a8 <L6470::paramHandler(unsigned char, unsigned long)+0x18c>
 3d4:	e202107f 	and	r1, r2, #127	; 0x7f
 3d8:	e12fff33 	blx	r3
 3dc:	e6ef0070 	uxtb	r0, r0
 3e0:	eaffffb3 	b	2b4 <L6470::paramHandler(unsigned char, unsigned long)+0x98>
 3e4:	e3a01000 	mov	r1, #0
 3e8:	e12fff33 	blx	r3
 3ec:	e5942000 	ldr	r2, [r4]
 3f0:	e1a03000 	mov	r3, r0
 3f4:	e3a01000 	mov	r1, #0
 3f8:	e1a00004 	mov	r0, r4
 3fc:	e592200c 	ldr	r2, [r2, #12]
 400:	eaffffb5 	b	2dc <L6470::paramHandler(unsigned char, unsigned long)+0xc0>
 404:	e59d0004 	ldr	r0, [sp, #4]
 408:	e28dd008 	add	sp, sp, #8
 40c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 410:	e6ef1072 	uxtb	r1, r2
 414:	e12fff33 	blx	r3
 418:	e3a00000 	mov	r0, #0
 41c:	eaffffa4 	b	2b4 <L6470::paramHandler(unsigned char, unsigned long)+0x98>

00000420 <L6470::xferParam(unsigned long, unsigned char)>:
 420:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 424:	e2123007 	ands	r3, r2, #7
 428:	e1a05000 	mov	r5, r0
 42c:	e24dd008 	sub	sp, sp, #8
 430:	e1a001a2 	lsr	r0, r2, #3
 434:	0a000014 	beq	48c <L6470::xferParam(unsigned long, unsigned char)+0x6c>
 438:	e3a03000 	mov	r3, #0
 43c:	e58d1000 	str	r1, [sp]
 440:	e2808001 	add	r8, r0, #1
 444:	e58d3004 	str	r3, [sp, #4]
 448:	e3a04000 	mov	r4, #0
 44c:	e2486001 	sub	r6, r8, #1
 450:	e28d3004 	add	r3, sp, #4
 454:	e08d7006 	add	r7, sp, r6
 458:	e0836006 	add	r6, r3, r6
 45c:	e5953000 	ldr	r3, [r5]
 460:	e1a00005 	mov	r0, r5
 464:	e593300c 	ldr	r3, [r3, #12]
 468:	e4571001 	ldrb	r1, [r7], #-1
 46c:	e12fff33 	blx	r3
 470:	e2844001 	add	r4, r4, #1
 474:	e1540008 	cmp	r4, r8
 478:	e4460001 	strb	r0, [r6], #-1
 47c:	bafffff6 	blt	45c <L6470::xferParam(unsigned long, unsigned char)+0x3c>
 480:	e59d0004 	ldr	r0, [sp, #4]
 484:	e28dd008 	add	sp, sp, #8
 488:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 48c:	e3500000 	cmp	r0, #0
 490:	e1a08000 	mov	r8, r0
 494:	e88d000a 	stm	sp, {r1, r3}
 498:	1affffea 	bne	448 <L6470::xferParam(unsigned long, unsigned char)+0x28>
 49c:	e28dd008 	add	sp, sp, #8
 4a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <L6470::xferParam(unsigned long, unsigned char)+0x168d40c>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <L6470::xferParam(unsigned long, unsigned char)+0x42004>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


l6470config.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <L6470::configSyncPin(unsigned char, unsigned char)>:
   0:	e92d4070 	push	{r4, r5, r6, lr}
   4:	e1a04001 	mov	r4, r1
   8:	e3a01016 	mov	r1, #22
   c:	e1a05002 	mov	r5, r2
  10:	e1a06000 	mov	r6, r0
  14:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
  18:	e1a02000 	mov	r2, r0
  1c:	e2055070 	and	r5, r5, #112	; 0x70
  20:	e3c4407f 	bic	r4, r4, #127	; 0x7f
  24:	e1844005 	orr	r4, r4, r5
  28:	e202200f 	and	r2, r2, #15
  2c:	e1a00006 	mov	r0, r6
  30:	e1842002 	orr	r2, r4, r2
  34:	e3a01016 	mov	r1, #22
  38:	e8bd4070 	pop	{r4, r5, r6, lr}
  3c:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

00000040 <L6470::configStepMode(unsigned char)>:
  40:	e92d4070 	push	{r4, r5, r6, lr}
  44:	e1a04001 	mov	r4, r1
  48:	e3a01016 	mov	r1, #22
  4c:	e1a05000 	mov	r5, r0
  50:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
  54:	e1a02000 	mov	r2, r0
  58:	e2044007 	and	r4, r4, #7
  5c:	e20220f8 	and	r2, r2, #248	; 0xf8
  60:	e1a00005 	mov	r0, r5
  64:	e1822004 	orr	r2, r2, r4
  68:	e3a01016 	mov	r1, #22
  6c:	e8bd4070 	pop	{r4, r5, r6, lr}
  70:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

00000074 <L6470::getStepMode()>:
  74:	e3a01016 	mov	r1, #22
  78:	e92d4010 	push	{r4, lr}
  7c:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
  80:	e2000007 	and	r0, r0, #7
  84:	e8bd8010 	pop	{r4, pc}

00000088 <L6470::setMaxSpeed(float)>:
  88:	e92d4010 	push	{r4, lr}
  8c:	e1a04000 	mov	r4, r0
  90:	ebfffffe 	bl	0 <L6470::maxSpdCalc(float)>
  94:	e3a01007 	mov	r1, #7
  98:	e1a02000 	mov	r2, r0
  9c:	e1a00004 	mov	r0, r4
  a0:	e8bd4010 	pop	{r4, lr}
  a4:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

000000a8 <L6470::getMaxSpeed()>:
  a8:	e92d4010 	push	{r4, lr}
  ac:	e3a01007 	mov	r1, #7
  b0:	e1a04000 	mov	r4, r0
  b4:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
  b8:	e1a01000 	mov	r1, r0
  bc:	e1a00004 	mov	r0, r4
  c0:	e8bd4010 	pop	{r4, lr}
  c4:	eafffffe 	b	0 <L6470::maxSpdParse(unsigned long)>

000000c8 <L6470::setMinSpeed(float)>:
  c8:	e92d4070 	push	{r4, r5, r6, lr}
  cc:	e1a04000 	mov	r4, r0
  d0:	ebfffffe 	bl	0 <L6470::minSpdCalc(float)>
  d4:	e3a01008 	mov	r1, #8
  d8:	e1a05000 	mov	r5, r0
  dc:	e1a00004 	mov	r0, r4
  e0:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
  e4:	e1a02000 	mov	r2, r0
  e8:	e2022a01 	and	r2, r2, #4096	; 0x1000
  ec:	e1a00004 	mov	r0, r4
  f0:	e1822005 	orr	r2, r2, r5
  f4:	e3a01008 	mov	r1, #8
  f8:	e8bd4070 	pop	{r4, r5, r6, lr}
  fc:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

00000100 <L6470::getMinSpeed()>:
 100:	e92d4010 	push	{r4, lr}
 104:	e3a01008 	mov	r1, #8
 108:	e1a04000 	mov	r4, r0
 10c:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 110:	e1a01000 	mov	r1, r0
 114:	e1a00004 	mov	r0, r4
 118:	e8bd4010 	pop	{r4, lr}
 11c:	eafffffe 	b	0 <L6470::minSpdParse(unsigned long)>

00000120 <L6470::setFullSpeed(float)>:
 120:	e92d4010 	push	{r4, lr}
 124:	e1a04000 	mov	r4, r0
 128:	ebfffffe 	bl	0 <L6470::FSCalc(float)>
 12c:	e3a01015 	mov	r1, #21
 130:	e1a02000 	mov	r2, r0
 134:	e1a00004 	mov	r0, r4
 138:	e8bd4010 	pop	{r4, lr}
 13c:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

00000140 <L6470::getFullSpeed()>:
 140:	e92d4010 	push	{r4, lr}
 144:	e3a01015 	mov	r1, #21
 148:	e1a04000 	mov	r4, r0
 14c:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 150:	e1a01000 	mov	r1, r0
 154:	e1a00004 	mov	r0, r4
 158:	e8bd4010 	pop	{r4, lr}
 15c:	eafffffe 	b	0 <L6470::FSParse(unsigned long)>

00000160 <L6470::setAcc(float)>:
 160:	e92d4010 	push	{r4, lr}
 164:	e1a04000 	mov	r4, r0
 168:	ebfffffe 	bl	0 <L6470::accCalc(float)>
 16c:	e3a01005 	mov	r1, #5
 170:	e1a02000 	mov	r2, r0
 174:	e1a00004 	mov	r0, r4
 178:	e8bd4010 	pop	{r4, lr}
 17c:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

00000180 <L6470::getAcc()>:
 180:	e92d4010 	push	{r4, lr}
 184:	e3a01005 	mov	r1, #5
 188:	e1a04000 	mov	r4, r0
 18c:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 190:	e1a01000 	mov	r1, r0
 194:	e1a00004 	mov	r0, r4
 198:	e8bd4010 	pop	{r4, lr}
 19c:	eafffffe 	b	0 <L6470::accParse(unsigned long)>

000001a0 <L6470::setDec(float)>:
 1a0:	e92d4010 	push	{r4, lr}
 1a4:	e1a04000 	mov	r4, r0
 1a8:	ebfffffe 	bl	0 <L6470::decCalc(float)>
 1ac:	e3a01006 	mov	r1, #6
 1b0:	e1a02000 	mov	r2, r0
 1b4:	e1a00004 	mov	r0, r4
 1b8:	e8bd4010 	pop	{r4, lr}
 1bc:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

000001c0 <L6470::getDec()>:
 1c0:	e92d4010 	push	{r4, lr}
 1c4:	e3a01006 	mov	r1, #6
 1c8:	e1a04000 	mov	r4, r0
 1cc:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 1d0:	e1a01000 	mov	r1, r0
 1d4:	e1a00004 	mov	r0, r4
 1d8:	e8bd4010 	pop	{r4, lr}
 1dc:	eafffffe 	b	0 <L6470::accParse(unsigned long)>

000001e0 <L6470::setOCThreshold(unsigned char)>:
 1e0:	e1a02001 	mov	r2, r1
 1e4:	e3a01013 	mov	r1, #19
 1e8:	e202200f 	and	r2, r2, #15
 1ec:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

000001f0 <L6470::getOCThreshold()>:
 1f0:	e3a01013 	mov	r1, #19
 1f4:	e92d4010 	push	{r4, lr}
 1f8:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 1fc:	e200000f 	and	r0, r0, #15
 200:	e8bd8010 	pop	{r4, pc}

00000204 <L6470::setPWMFreq(int, int)>:
 204:	e92d4070 	push	{r4, r5, r6, lr}
 208:	e1a04001 	mov	r4, r1
 20c:	e3a01018 	mov	r1, #24
 210:	e1a05002 	mov	r5, r2
 214:	e1a06000 	mov	r6, r0
 218:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 21c:	e1a02000 	mov	r2, r0
 220:	e2055b07 	and	r5, r5, #7168	; 0x1c00
 224:	e2044a0e 	and	r4, r4, #57344	; 0xe000
 228:	e1844005 	orr	r4, r4, r5
 22c:	e3c22b3f 	bic	r2, r2, #64512	; 0xfc00
 230:	e1a00006 	mov	r0, r6
 234:	e1842002 	orr	r2, r4, r2
 238:	e3a01018 	mov	r1, #24
 23c:	e8bd4070 	pop	{r4, r5, r6, lr}
 240:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

00000244 <L6470::getPWMFreqDivisor()>:
 244:	e3a01018 	mov	r1, #24
 248:	e92d4010 	push	{r4, lr}
 24c:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 250:	e2000a0e 	and	r0, r0, #57344	; 0xe000
 254:	e8bd8010 	pop	{r4, pc}

00000258 <L6470::getPWMFreqMultiplier()>:
 258:	e3a01018 	mov	r1, #24
 25c:	e92d4010 	push	{r4, lr}
 260:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 264:	e2000b07 	and	r0, r0, #7168	; 0x1c00
 268:	e8bd8010 	pop	{r4, pc}

0000026c <L6470::setSlewRate(int)>:
 26c:	e92d4070 	push	{r4, r5, r6, lr}
 270:	e1a04001 	mov	r4, r1
 274:	e3a01018 	mov	r1, #24
 278:	e1a05000 	mov	r5, r0
 27c:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 280:	e1a02000 	mov	r2, r0
 284:	e2044c03 	and	r4, r4, #768	; 0x300
 288:	e3c22c03 	bic	r2, r2, #768	; 0x300
 28c:	e1a00005 	mov	r0, r5
 290:	e1842002 	orr	r2, r4, r2
 294:	e3a01018 	mov	r1, #24
 298:	e8bd4070 	pop	{r4, r5, r6, lr}
 29c:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

000002a0 <L6470::getSlewRate()>:
 2a0:	e3a01018 	mov	r1, #24
 2a4:	e92d4010 	push	{r4, lr}
 2a8:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 2ac:	e2000c03 	and	r0, r0, #768	; 0x300
 2b0:	e8bd8010 	pop	{r4, pc}

000002b4 <L6470::setOCShutdown(int)>:
 2b4:	e92d4070 	push	{r4, r5, r6, lr}
 2b8:	e1a04001 	mov	r4, r1
 2bc:	e3a01018 	mov	r1, #24
 2c0:	e1a05000 	mov	r5, r0
 2c4:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 2c8:	e1a02000 	mov	r2, r0
 2cc:	e2044080 	and	r4, r4, #128	; 0x80
 2d0:	e3c22080 	bic	r2, r2, #128	; 0x80
 2d4:	e1a00005 	mov	r0, r5
 2d8:	e1842002 	orr	r2, r4, r2
 2dc:	e3a01018 	mov	r1, #24
 2e0:	e8bd4070 	pop	{r4, r5, r6, lr}
 2e4:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

000002e8 <L6470::getOCShutdown()>:
 2e8:	e3a01018 	mov	r1, #24
 2ec:	e92d4010 	push	{r4, lr}
 2f0:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 2f4:	e2000080 	and	r0, r0, #128	; 0x80
 2f8:	e8bd8010 	pop	{r4, pc}

000002fc <L6470::setVoltageComp(int)>:
 2fc:	e92d4070 	push	{r4, r5, r6, lr}
 300:	e1a04001 	mov	r4, r1
 304:	e3a01018 	mov	r1, #24
 308:	e1a05000 	mov	r5, r0
 30c:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 310:	e1a02000 	mov	r2, r0
 314:	e2044020 	and	r4, r4, #32
 318:	e3c22020 	bic	r2, r2, #32
 31c:	e1a00005 	mov	r0, r5
 320:	e1842002 	orr	r2, r4, r2
 324:	e3a01018 	mov	r1, #24
 328:	e8bd4070 	pop	{r4, r5, r6, lr}
 32c:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

00000330 <L6470::getVoltageComp()>:
 330:	e3a01018 	mov	r1, #24
 334:	e92d4010 	push	{r4, lr}
 338:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 33c:	e2000020 	and	r0, r0, #32
 340:	e8bd8010 	pop	{r4, pc}

00000344 <L6470::setSwitchMode(int)>:
 344:	e92d4070 	push	{r4, r5, r6, lr}
 348:	e1a04001 	mov	r4, r1
 34c:	e3a01018 	mov	r1, #24
 350:	e1a05000 	mov	r5, r0
 354:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 358:	e1a02000 	mov	r2, r0
 35c:	e2044010 	and	r4, r4, #16
 360:	e3c22010 	bic	r2, r2, #16
 364:	e1a00005 	mov	r0, r5
 368:	e1842002 	orr	r2, r4, r2
 36c:	e3a01018 	mov	r1, #24
 370:	e8bd4070 	pop	{r4, r5, r6, lr}
 374:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

00000378 <L6470::getSwitchMode()>:
 378:	e3a01018 	mov	r1, #24
 37c:	e92d4010 	push	{r4, lr}
 380:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 384:	e2000010 	and	r0, r0, #16
 388:	e8bd8010 	pop	{r4, pc}

0000038c <L6470::setOscMode(int)>:
 38c:	e92d4070 	push	{r4, r5, r6, lr}
 390:	e1a04001 	mov	r4, r1
 394:	e3a01018 	mov	r1, #24
 398:	e1a05000 	mov	r5, r0
 39c:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 3a0:	e1a02000 	mov	r2, r0
 3a4:	e204400f 	and	r4, r4, #15
 3a8:	e3c2200f 	bic	r2, r2, #15
 3ac:	e1a00005 	mov	r0, r5
 3b0:	e1842002 	orr	r2, r4, r2
 3b4:	e3a01018 	mov	r1, #24
 3b8:	e8bd4070 	pop	{r4, r5, r6, lr}
 3bc:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

000003c0 <L6470::getOscMode()>:
 3c0:	e3a01018 	mov	r1, #24
 3c4:	e92d4010 	push	{r4, lr}
 3c8:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 3cc:	e200000f 	and	r0, r0, #15
 3d0:	e8bd8010 	pop	{r4, pc}

000003d4 <L6470::setAccKVAL(unsigned char)>:
 3d4:	e1a02001 	mov	r2, r1
 3d8:	e3a0100b 	mov	r1, #11
 3dc:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

000003e0 <L6470::getAccKVAL()>:
 3e0:	e3a0100b 	mov	r1, #11
 3e4:	e92d4010 	push	{r4, lr}
 3e8:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 3ec:	e6ef0070 	uxtb	r0, r0
 3f0:	e8bd8010 	pop	{r4, pc}

000003f4 <L6470::setDecKVAL(unsigned char)>:
 3f4:	e1a02001 	mov	r2, r1
 3f8:	e3a0100c 	mov	r1, #12
 3fc:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

00000400 <L6470::getDecKVAL()>:
 400:	e3a0100c 	mov	r1, #12
 404:	e92d4010 	push	{r4, lr}
 408:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 40c:	e6ef0070 	uxtb	r0, r0
 410:	e8bd8010 	pop	{r4, pc}

00000414 <L6470::setRunKVAL(unsigned char)>:
 414:	e1a02001 	mov	r2, r1
 418:	e3a0100a 	mov	r1, #10
 41c:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

00000420 <L6470::getRunKVAL()>:
 420:	e3a0100a 	mov	r1, #10
 424:	e92d4010 	push	{r4, lr}
 428:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 42c:	e6ef0070 	uxtb	r0, r0
 430:	e8bd8010 	pop	{r4, pc}

00000434 <L6470::setHoldKVAL(unsigned char)>:
 434:	e1a02001 	mov	r2, r1
 438:	e3a01009 	mov	r1, #9
 43c:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

00000440 <L6470::getHoldKVAL()>:
 440:	e3a01009 	mov	r1, #9
 444:	e92d4010 	push	{r4, lr}
 448:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 44c:	e6ef0070 	uxtb	r0, r0
 450:	e8bd8010 	pop	{r4, pc}

00000454 <L6470::setLoSpdOpt(bool)>:
 454:	e92d4070 	push	{r4, r5, r6, lr}
 458:	e1a05001 	mov	r5, r1
 45c:	e3a01008 	mov	r1, #8
 460:	e1a04000 	mov	r4, r0
 464:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 468:	e3550000 	cmp	r5, #0
 46c:	13802a01 	orrne	r2, r0, #4096	; 0x1000
 470:	03c02a01 	biceq	r2, r0, #4096	; 0x1000
 474:	e3a01008 	mov	r1, #8
 478:	e1a00004 	mov	r0, r4
 47c:	e8bd4070 	pop	{r4, r5, r6, lr}
 480:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

00000484 <L6470::getLoSpdOpt()>:
 484:	e3a01008 	mov	r1, #8
 488:	e92d4010 	push	{r4, lr}
 48c:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 490:	e1a00620 	lsr	r0, r0, #12
 494:	e2000001 	and	r0, r0, #1
 498:	e8bd8010 	pop	{r4, pc}

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <L6470::getLoSpdOpt()+0x168d3a8>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <L6470::getLoSpdOpt()+0x41fa0>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


autodriver.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <AutoDriver::~AutoDriver()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e59f3030 	ldr	r3, [pc, #48]	; 40 <AutoDriver::~AutoDriver()+0x40>
   c:	e5803000 	str	r3, [r0]
  10:	ebfffffe 	bl	0 <L6470::hardHiZ()>
  14:	e3a0c000 	mov	ip, #0
  18:	e5d42008 	ldrb	r2, [r4, #8]
  1c:	e59f1020 	ldr	r1, [pc, #32]	; 44 <AutoDriver::~AutoDriver()+0x44>
  20:	e1a00004 	mov	r0, r4
  24:	e7d13002 	ldrb	r3, [r1, r2]
  28:	e5c4c00c 	strb	ip, [r4, #12]
  2c:	e2433001 	sub	r3, r3, #1
  30:	e7c13002 	strb	r3, [r1, r2]
  34:	ebfffffe 	bl	0 <L6470::~L6470()>
  38:	e1a00004 	mov	r0, r4
  3c:	e8bd8010 	pop	{r4, pc}
  40:	00000008 	andeq	r0, r0, r8
  44:	00000000 	andeq	r0, r0, r0

00000048 <AutoDriver::SPIXfer(unsigned char)>:
  48:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4c:	e59f615c 	ldr	r6, [pc, #348]	; 1b0 <AutoDriver::SPIXfer(unsigned char)+0x168>
  50:	e5d0e008 	ldrb	lr, [r0, #8]
  54:	e28db024 	add	fp, sp, #36	; 0x24
  58:	e7d6c00e 	ldrb	ip, [r6, lr]
  5c:	e1a05000 	mov	r5, r0
  60:	e28c3007 	add	r3, ip, #7
  64:	e2033f7e 	and	r3, r3, #504	; 0x1f8
  68:	e04dd003 	sub	sp, sp, r3
  6c:	e35c0000 	cmp	ip, #0
  70:	e1a0400d 	mov	r4, sp
  74:	0a000037 	beq	158 <AutoDriver::SPIXfer(unsigned char)+0x110>
  78:	e35c0020 	cmp	ip, #32
  7c:	e24c901f 	sub	r9, ip, #31
  80:	9a000048 	bls	1a8 <AutoDriver::SPIXfer(unsigned char)+0x160>
  84:	e3e08011 	mvn	r8, #17
  88:	e3e07030 	mvn	r7, #48	; 0x30
  8c:	e3a00000 	mov	r0, #0
  90:	e28d2032 	add	r2, sp, #50	; 0x32
  94:	e0488004 	sub	r8, r8, r4
  98:	e0477004 	sub	r7, r7, r4
  9c:	e5420032 	strb	r0, [r2, #-50]	; 0xffffffce
  a0:	e5420031 	strb	r0, [r2, #-49]	; 0xffffffcf
  a4:	e5420030 	strb	r0, [r2, #-48]	; 0xffffffd0
  a8:	e542002f 	strb	r0, [r2, #-47]	; 0xffffffd1
  ac:	e542002e 	strb	r0, [r2, #-46]	; 0xffffffd2
  b0:	e542002d 	strb	r0, [r2, #-45]	; 0xffffffd3
  b4:	e542002c 	strb	r0, [r2, #-44]	; 0xffffffd4
  b8:	e542002b 	strb	r0, [r2, #-43]	; 0xffffffd5
  bc:	e542002a 	strb	r0, [r2, #-42]	; 0xffffffd6
  c0:	e5420029 	strb	r0, [r2, #-41]	; 0xffffffd7
  c4:	e5420028 	strb	r0, [r2, #-40]	; 0xffffffd8
  c8:	e5420027 	strb	r0, [r2, #-39]	; 0xffffffd9
  cc:	e5420026 	strb	r0, [r2, #-38]	; 0xffffffda
  d0:	e5420025 	strb	r0, [r2, #-37]	; 0xffffffdb
  d4:	e5420024 	strb	r0, [r2, #-36]	; 0xffffffdc
  d8:	e5420023 	strb	r0, [r2, #-35]	; 0xffffffdd
  dc:	e5420022 	strb	r0, [r2, #-34]	; 0xffffffde
  e0:	e5420021 	strb	r0, [r2, #-33]	; 0xffffffdf
  e4:	e5420020 	strb	r0, [r2, #-32]	; 0xffffffe0
  e8:	e542001f 	strb	r0, [r2, #-31]	; 0xffffffe1
  ec:	e542001e 	strb	r0, [r2, #-30]	; 0xffffffe2
  f0:	e542001d 	strb	r0, [r2, #-29]	; 0xffffffe3
  f4:	e542001c 	strb	r0, [r2, #-28]	; 0xffffffe4
  f8:	e542001b 	strb	r0, [r2, #-27]	; 0xffffffe5
  fc:	e542001a 	strb	r0, [r2, #-26]	; 0xffffffe6
 100:	e5420019 	strb	r0, [r2, #-25]	; 0xffffffe7
 104:	e5420018 	strb	r0, [r2, #-24]	; 0xffffffe8
 108:	e5420017 	strb	r0, [r2, #-23]	; 0xffffffe9
 10c:	e5420016 	strb	r0, [r2, #-22]	; 0xffffffea
 110:	e5420015 	strb	r0, [r2, #-21]	; 0xffffffeb
 114:	e5420014 	strb	r0, [r2, #-20]	; 0xffffffec
 118:	f5d2f000 	pld	[r2]
 11c:	e0883002 	add	r3, r8, r2
 120:	e5420013 	strb	r0, [r2, #-19]	; 0xffffffed
 124:	e2822020 	add	r2, r2, #32
 128:	e087a002 	add	sl, r7, r2
 12c:	e159000a 	cmp	r9, sl
 130:	8affffd9 	bhi	9c <AutoDriver::SPIXfer(unsigned char)+0x54>
 134:	e3a00000 	mov	r0, #0
 138:	e2433001 	sub	r3, r3, #1
 13c:	e0842003 	add	r2, r4, r3
 140:	e1a03002 	mov	r3, r2
 144:	e2833002 	add	r3, r3, #2
 148:	e0433004 	sub	r3, r3, r4
 14c:	e15c0003 	cmp	ip, r3
 150:	e5e20001 	strb	r0, [r2, #1]!
 154:	8afffff9 	bhi	140 <AutoDriver::SPIXfer(unsigned char)+0xf8>
 158:	e5d5300b 	ldrb	r3, [r5, #11]
 15c:	e20e0003 	and	r0, lr, #3
 160:	e7c41003 	strb	r1, [r4, r3]
 164:	e3a0103e 	mov	r1, #62	; 0x3e
 168:	e59f3044 	ldr	r3, [pc, #68]	; 1b4 <AutoDriver::SPIXfer(unsigned char)+0x16c>
 16c:	e5932000 	ldr	r2, [r3]
 170:	e3c22003 	bic	r2, r2, #3
 174:	e1822000 	orr	r2, r2, r0
 178:	e5832000 	str	r2, [r3]
 17c:	e5831008 	str	r1, [r3, #8]
 180:	e5932000 	ldr	r2, [r3]
 184:	e1a00004 	mov	r0, r4
 188:	e382200c 	orr	r2, r2, #12
 18c:	e5832000 	str	r2, [r3]
 190:	e7d6100e 	ldrb	r1, [r6, lr]
 194:	ebfffffe 	bl	0 <bcm2835_spi_transfern>
 198:	e5d5300b 	ldrb	r3, [r5, #11]
 19c:	e7d40003 	ldrb	r0, [r4, r3]
 1a0:	e24bd024 	sub	sp, fp, #36	; 0x24
 1a4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1a8:	e3a03000 	mov	r3, #0
 1ac:	eaffffe0 	b	134 <AutoDriver::SPIXfer(unsigned char)+0xec>
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	20204000 	eorcs	r4, r0, r0

000001b8 <AutoDriver::busyCheck()>:
 1b8:	e92d4070 	push	{r4, r5, r6, lr}
 1bc:	e5d0300a 	ldrb	r3, [r0, #10]
 1c0:	e35300ff 	cmp	r3, #255	; 0xff
 1c4:	0a000011 	beq	210 <AutoDriver::busyCheck()+0x58>
 1c8:	e5d0500c 	ldrb	r5, [r0, #12]
 1cc:	e1a04000 	mov	r4, r0
 1d0:	e3550000 	cmp	r5, #0
 1d4:	0a000007 	beq	1f8 <AutoDriver::busyCheck()+0x40>
 1d8:	e3a00001 	mov	r0, #1
 1dc:	e59f2054 	ldr	r2, [pc, #84]	; 238 <AutoDriver::busyCheck()+0x80>
 1e0:	e5922034 	ldr	r2, [r2, #52]	; 0x34
 1e4:	e0123310 	ands	r3, r2, r0, lsl r3
 1e8:	13a03000 	movne	r3, #0
 1ec:	11a00003 	movne	r0, r3
 1f0:	15c4300c 	strbne	r3, [r4, #12]
 1f4:	e8bd8070 	pop	{r4, r5, r6, pc}
 1f8:	e3a01019 	mov	r1, #25
 1fc:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 200:	e3100002 	tst	r0, #2
 204:	0a000007 	beq	228 <AutoDriver::busyCheck()+0x70>
 208:	e1a00005 	mov	r0, r5
 20c:	e8bd8070 	pop	{r4, r5, r6, pc}
 210:	e3a01019 	mov	r1, #25
 214:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 218:	e3100002 	tst	r0, #2
 21c:	03a00001 	moveq	r0, #1
 220:	13a00000 	movne	r0, #0
 224:	e8bd8070 	pop	{r4, r5, r6, pc}
 228:	e3a03001 	mov	r3, #1
 22c:	e1a00003 	mov	r0, r3
 230:	e5c4300c 	strb	r3, [r4, #12]
 234:	e8bd8070 	pop	{r4, r5, r6, pc}
 238:	20200000 	eorcs	r0, r0, r0

0000023c <AutoDriver::~AutoDriver()>:
 23c:	e92d4010 	push	{r4, lr}
 240:	e1a04000 	mov	r4, r0
 244:	e59f3038 	ldr	r3, [pc, #56]	; 284 <AutoDriver::~AutoDriver()+0x48>
 248:	e5803000 	str	r3, [r0]
 24c:	ebfffffe 	bl	0 <L6470::hardHiZ()>
 250:	e3a0c000 	mov	ip, #0
 254:	e5d42008 	ldrb	r2, [r4, #8]
 258:	e59f1028 	ldr	r1, [pc, #40]	; 288 <AutoDriver::~AutoDriver()+0x4c>
 25c:	e5c4c00c 	strb	ip, [r4, #12]
 260:	e7d13002 	ldrb	r3, [r1, r2]
 264:	e1a00004 	mov	r0, r4
 268:	e2433001 	sub	r3, r3, #1
 26c:	e7c13002 	strb	r3, [r1, r2]
 270:	ebfffffe 	bl	0 <L6470::~L6470()>
 274:	e1a00004 	mov	r0, r4
 278:	ebfffffe 	bl	0 <operator delete(void*)>
 27c:	e1a00004 	mov	r0, r4
 280:	e8bd8010 	pop	{r4, pc}
 284:	00000008 	andeq	r0, r0, r8
 288:	00000000 	andeq	r0, r0, r0

0000028c <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char, unsigned char)>:
 28c:	e92d4070 	push	{r4, r5, r6, lr}
 290:	e3a04000 	mov	r4, #0
 294:	e59fe02c 	ldr	lr, [pc, #44]	; 2c8 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char, unsigned char)+0x3c>
 298:	e5c03009 	strb	r3, [r0, #9]
 29c:	e7de3002 	ldrb	r3, [lr, r2]
 2a0:	e5dd5010 	ldrb	r5, [sp, #16]
 2a4:	e59f6020 	ldr	r6, [pc, #32]	; 2cc <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char, unsigned char)+0x40>
 2a8:	e2833001 	add	r3, r3, #1
 2ac:	e5806000 	str	r6, [r0]
 2b0:	e5c0500a 	strb	r5, [r0, #10]
 2b4:	e5c0100b 	strb	r1, [r0, #11]
 2b8:	e5c02008 	strb	r2, [r0, #8]
 2bc:	e5c0400c 	strb	r4, [r0, #12]
 2c0:	e7ce3002 	strb	r3, [lr, r2]
 2c4:	e8bd8070 	pop	{r4, r5, r6, pc}
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	00000008 	andeq	r0, r0, r8

000002d0 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char)>:
 2d0:	e92d4070 	push	{r4, r5, r6, lr}
 2d4:	e3e05000 	mvn	r5, #0
 2d8:	e3a04000 	mov	r4, #0
 2dc:	e59fe028 	ldr	lr, [pc, #40]	; 30c <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char)+0x3c>
 2e0:	e5c03009 	strb	r3, [r0, #9]
 2e4:	e7de3002 	ldrb	r3, [lr, r2]
 2e8:	e59f6020 	ldr	r6, [pc, #32]	; 310 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char)+0x40>
 2ec:	e2833001 	add	r3, r3, #1
 2f0:	e5806000 	str	r6, [r0]
 2f4:	e5c0500a 	strb	r5, [r0, #10]
 2f8:	e5c0100b 	strb	r1, [r0, #11]
 2fc:	e5c02008 	strb	r2, [r0, #8]
 300:	e5c0400c 	strb	r4, [r0, #12]
 304:	e7ce3002 	strb	r3, [lr, r2]
 308:	e8bd8070 	pop	{r4, r5, r6, pc}
 30c:	00000000 	andeq	r0, r0, r0
 310:	00000008 	andeq	r0, r0, r8

00000314 <AutoDriver::getNumBoards()>:
 314:	e59f300c 	ldr	r3, [pc, #12]	; 328 <AutoDriver::getNumBoards()+0x14>
 318:	e5d30000 	ldrb	r0, [r3]
 31c:	e5d33001 	ldrb	r3, [r3, #1]
 320:	e0800003 	add	r0, r0, r3
 324:	e12fff1e 	bx	lr
 328:	00000000 	andeq	r0, r0, r0

0000032c <AutoDriver::getNumBoards(unsigned char)>:
 32c:	e3500001 	cmp	r0, #1
 330:	959f3008 	ldrls	r3, [pc, #8]	; 340 <AutoDriver::getNumBoards(unsigned char)+0x14>
 334:	97d30000 	ldrbls	r0, [r3, r0]
 338:	83a00000 	movhi	r0, #0
 33c:	e12fff1e 	bx	lr
 340:	00000000 	andeq	r0, r0, r0

00000344 <AutoDriver::IsConnected()>:
 344:	e3a01018 	mov	r1, #24
 348:	e92d4010 	push	{r4, lr}
 34c:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 350:	e59f300c 	ldr	r3, [pc, #12]	; 364 <AutoDriver::IsConnected()+0x20>
 354:	e0400003 	sub	r0, r0, r3
 358:	e16f0f10 	clz	r0, r0
 35c:	e1a002a0 	lsr	r0, r0, #5
 360:	e8bd8010 	pop	{r4, pc}
 364:	00002e88 	andeq	r2, r0, r8, lsl #29

Disassembly of section .bss:

00000000 <AutoDriver::m_nNumBoards>:
	...

Disassembly of section .rodata:

00000000 <vtable for AutoDriver>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <AutoDriver::IsConnected()+0x168d4e8>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <AutoDriver::IsConnected()+0x420e0>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


l6470.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <L6470::~L6470()>:
   0:	e12fff1e 	bx	lr

00000004 <L6470::~L6470()>:
   4:	e92d4010 	push	{r4, lr}
   8:	e1a04000 	mov	r4, r0
   c:	ebfffffe 	bl	0 <operator delete(void*)>
  10:	e1a00004 	mov	r0, r4
  14:	e8bd8010 	pop	{r4, pc}

00000018 <L6470::setMicroSteps(unsigned int)>:
  18:	e92d4070 	push	{r4, r5, r6, lr}
  1c:	e1a05000 	mov	r5, r0
  20:	e1a04001 	mov	r4, r1
  24:	ebfffffe 	bl	0 <L6470::hardHiZ()>
  28:	e3a02000 	mov	r2, #0
  2c:	e3540001 	cmp	r4, #1
  30:	0a000008 	beq	58 <L6470::setMicroSteps(unsigned int)+0x40>
  34:	e2822001 	add	r2, r2, #1
  38:	e3520008 	cmp	r2, #8
  3c:	e1a040a4 	lsr	r4, r4, #1
  40:	1afffff9 	bne	2c <L6470::setMicroSteps(unsigned int)+0x14>
  44:	e1a00005 	mov	r0, r5
  48:	e8bd4070 	pop	{r4, r5, r6, lr}
  4c:	e3a02018 	mov	r2, #24
  50:	e3a01016 	mov	r1, #22
  54:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>
  58:	e1a00005 	mov	r0, r5
  5c:	e8bd4070 	pop	{r4, r5, r6, lr}
  60:	e3a01016 	mov	r1, #22
  64:	e3822010 	orr	r2, r2, #16
  68:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>

Disassembly of section .rodata:

00000000 <vtable for L6470>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <L6470::setMicroSteps(unsigned int)+0x168d814>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <L6470::setMicroSteps(unsigned int)+0x4240c>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


autodriverprint.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <AutoDriver::Print()>:
   0:	e92d4010 	push	{r4, lr}
   4:	e1a04000 	mov	r4, r0
   8:	ed2d8b04 	vpush	{d8-d9}
   c:	e5941004 	ldr	r1, [r4, #4]
  10:	e24dd028 	sub	sp, sp, #40	; 0x28
  14:	e59f0110 	ldr	r0, [pc, #272]	; 12c <AutoDriver::Print()+0x12c>
  18:	ebfffffe 	bl	0 <printf>
  1c:	e5d4200a 	ldrb	r2, [r4, #10]
  20:	e59f3108 	ldr	r3, [pc, #264]	; 130 <AutoDriver::Print()+0x130>
  24:	e35200ff 	cmp	r2, #255	; 0xff
  28:	e59fc104 	ldr	ip, [pc, #260]	; 134 <AutoDriver::Print()+0x134>
  2c:	11a0c003 	movne	ip, r3
  30:	e5d4100b 	ldrb	r1, [r4, #11]
  34:	e5d43009 	ldrb	r3, [r4, #9]
  38:	e58d2000 	str	r2, [sp]
  3c:	e5d42008 	ldrb	r2, [r4, #8]
  40:	e59f00f0 	ldr	r0, [pc, #240]	; 138 <AutoDriver::Print()+0x138>
  44:	e58dc004 	str	ip, [sp, #4]
  48:	ebfffffe 	bl	0 <printf>
  4c:	e1a00004 	mov	r0, r4
  50:	ebfffffe 	bl	0 <L6470::getMinSpeed()>
  54:	e1a00004 	mov	r0, r4
  58:	eeb09a40 	vmov.f32	s18, s0
  5c:	ebfffffe 	bl	0 <L6470::getMaxSpeed()>
  60:	e1a00004 	mov	r0, r4
  64:	eef08a40 	vmov.f32	s17, s0
  68:	ebfffffe 	bl	0 <L6470::getAcc()>
  6c:	e1a00004 	mov	r0, r4
  70:	eeb08a40 	vmov.f32	s16, s0
  74:	ebfffffe 	bl	0 <L6470::getDec()>
  78:	eeb76ae8 	vcvt.f64.f32	d6, s17
  7c:	eeb77ac9 	vcvt.f64.f32	d7, s18
  80:	eeb70ac0 	vcvt.f64.f32	d0, s0
  84:	eeb78ac8 	vcvt.f64.f32	d8, s16
  88:	ec532b17 	vmov	r2, r3, d7
  8c:	ed8d6b00 	vstr	d6, [sp]
  90:	ed8d0b04 	vstr	d0, [sp, #16]
  94:	ed8d8b02 	vstr	d8, [sp, #8]
  98:	e59f009c 	ldr	r0, [pc, #156]	; 13c <AutoDriver::Print()+0x13c>
  9c:	ebfffffe 	bl	0 <printf>
  a0:	e1a00004 	mov	r0, r4
  a4:	ebfffffe 	bl	0 <L6470::getAccKVAL()>
  a8:	e1a01000 	mov	r1, r0
  ac:	e1a00004 	mov	r0, r4
  b0:	e58d1024 	str	r1, [sp, #36]	; 0x24
  b4:	ebfffffe 	bl	0 <L6470::getDecKVAL()>
  b8:	e1a02000 	mov	r2, r0
  bc:	e1a00004 	mov	r0, r4
  c0:	e58d2020 	str	r2, [sp, #32]
  c4:	ebfffffe 	bl	0 <L6470::getRunKVAL()>
  c8:	e1a03000 	mov	r3, r0
  cc:	e1a00004 	mov	r0, r4
  d0:	e58d301c 	str	r3, [sp, #28]
  d4:	ebfffffe 	bl	0 <L6470::getHoldKVAL()>
  d8:	e1a0c000 	mov	ip, r0
  dc:	e59d2020 	ldr	r2, [sp, #32]
  e0:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
  e4:	e59d301c 	ldr	r3, [sp, #28]
  e8:	e58dc000 	str	ip, [sp]
  ec:	e59f004c 	ldr	r0, [pc, #76]	; 140 <AutoDriver::Print()+0x140>
  f0:	ebfffffe 	bl	0 <printf>
  f4:	e1a00004 	mov	r0, r4
  f8:	ebfffffe 	bl	0 <L6470::getStepMode()>
  fc:	e1a01000 	mov	r1, r0
 100:	e1a00004 	mov	r0, r4
 104:	e1a04001 	mov	r4, r1
 108:	ebfffffe 	bl	0 <L6470::getSwitchMode()>
 10c:	e3a01001 	mov	r1, #1
 110:	e1a02000 	mov	r2, r0
 114:	e59f0028 	ldr	r0, [pc, #40]	; 144 <AutoDriver::Print()+0x144>
 118:	e1a01411 	lsl	r1, r1, r4
 11c:	e28dd028 	add	sp, sp, #40	; 0x28
 120:	ecbd8b04 	vpop	{d8-d9}
 124:	e8bd4010 	pop	{r4, lr}
 128:	eafffffe 	b	0 <printf>
 12c:	0000000c 	andeq	r0, r0, ip
 130:	00000004 	andeq	r0, r0, r4
 134:	00000000 	andeq	r0, r0, r0
 138:	00000028 	andeq	r0, r0, r8, lsr #32
 13c:	00000064 	andeq	r0, r0, r4, rrx
 140:	0000009c 	muleq	r0, ip, r0
 144:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>

Disassembly of section .rodata.str1.4:

00000000 <.rodata.str1.4>:
   0:	00495053 	subeq	r5, r9, r3, asr r0
   4:	4f495047 	svcmi	0x00495047
   8:	00000000 	andeq	r0, r0, r0
   c:	72617053 	rsbvc	r7, r1, #83	; 0x53
  10:	6e75466b 	cdpvs	6, 7, cr4, cr5, cr11, {3}
  14:	74754120 	ldrbtvc	r4, [r5], #-288	; 0xfffffee0
  18:	6972446f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r6, sl, lr}^
  1c:	20726576 	rsbscs	r6, r2, r6, ror r5
  20:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
  24:	0000000a 	andeq	r0, r0, sl
  28:	736f5020 	cmnvc	pc, #32
  2c:	6f697469 	svcvs	0x00697469
  30:	64253d6e 	strtvs	r3, [r5], #-3438	; 0xfffff292
  34:	6843202c 	stmdavs	r3, {r2, r3, r5, sp}^
  38:	65537069 	ldrbvs	r7, [r3, #-105]	; 0xffffff97
  3c:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
  40:	2c64253d 	cfstr64cs	mvdx2, [r4], #-244	; 0xffffff0c
  44:	73655220 	cmnvc	r5, #32, 4
  48:	69507465 	ldmdbvs	r0, {r0, r2, r5, r6, sl, ip, sp, lr}^
  4c:	64253d6e 	strtvs	r3, [r5], #-3438	; 0xfffff292
  50:	7542202c 	strbvc	r2, [r2, #-44]	; 0xffffffd4
  54:	69507973 	ldmdbvs	r0, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
  58:	64253d6e 	strtvs	r3, [r5], #-3438	; 0xfffff292
  5c:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
  60:	00000a5d 	andeq	r0, r0, sp, asr sl
  64:	6e694d20 	cdpvs	13, 6, cr4, cr9, cr0, {1}
  68:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
  6c:	33253d64 			; <UNDEFINED> instruction: 0x33253d64
  70:	2c66302e 	stclcs	0, cr3, [r6], #-184	; 0xffffff48
  74:	78614d20 	stmdavc	r1!, {r5, r8, sl, fp, lr}^
  78:	65657053 	strbvs	r7, [r5, #-83]!	; 0xffffffad
  7c:	33253d64 			; <UNDEFINED> instruction: 0x33253d64
  80:	2c66302e 	stclcs	0, cr3, [r6], #-184	; 0xffffff48
  84:	63634120 	cmnvs	r3, #32, 2
  88:	2e34253d 	mrccs	5, 1, r2, cr4, cr13, {1}
  8c:	202c6630 	eorcs	r6, ip, r0, lsr r6
  90:	3d636544 	cfstr64cc	mvdx6, [r3, #-272]!	; 0xfffffef0
  94:	302e3425 	eorcc	r3, lr, r5, lsr #8
  98:	00000a66 	andeq	r0, r0, r6, ror #20
  9c:	63634120 	cmnvs	r3, #32, 2
  a0:	4c41564b 	mcrrmi	6, 4, r5, r1, cr11
  a4:	2c64253d 	cfstr64cs	mvdx2, [r4], #-244	; 0xffffff0c
  a8:	63654420 	cmnvs	r5, #32, 8	; 0x20000000
  ac:	4c41564b 	mcrrmi	6, 4, r5, r1, cr11
  b0:	2c64253d 	cfstr64cs	mvdx2, [r4], #-244	; 0xffffff0c
  b4:	6e755220 	cdpvs	2, 7, cr5, cr5, cr0, {1}
  b8:	4c41564b 	mcrrmi	6, 4, r5, r1, cr11
  bc:	2c64253d 	cfstr64cs	mvdx2, [r4], #-244	; 0xffffff0c
  c0:	6c6f4820 	stclvs	8, cr4, [pc], #-128	; 48 <.rodata.str1.4+0x48>
  c4:	41564b64 	cmpmi	r6, r4, ror #22
  c8:	64253d4c 	strtvs	r3, [r5], #-3404	; 0xfffff2b4
  cc:	0000000a 	andeq	r0, r0, sl
  d0:	63694d20 	cmnvs	r9, #32, 26	; 0x800
  d4:	74536f72 	ldrbvc	r6, [r3], #-3954	; 0xfffff08e
  d8:	3d737065 	ldclcc	0, cr7, [r3, #-404]!	; 0xfffffe6c
  dc:	202c7525 	eorcs	r7, ip, r5, lsr #10
  e0:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
  e4:	6f4d6863 	svcvs	0x004d6863
  e8:	253d6564 	ldrcs	r6, [sp, #-1380]!	; 0xfffffa9c
  ec:	Address 0x00000000000000ec is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <AutoDriver::Print()+0x168d82c>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <AutoDriver::Print()+0x42424>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


slushtemp.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <SlushBoard::getTempRaw()>:
   0:	e3a02036 	mov	r2, #54	; 0x36
   4:	e3a01000 	mov	r1, #0
   8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   c:	e59f3030 	ldr	r3, [pc, #48]	; 44 <SlushBoard::getTempRaw()+0x44>
  10:	e24dd00c 	sub	sp, sp, #12
  14:	e1cd10b4 	strh	r1, [sp, #4]
  18:	e59f0028 	ldr	r0, [pc, #40]	; 48 <SlushBoard::getTempRaw()+0x48>
  1c:	e583200c 	str	r2, [r3, #12]
  20:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
  24:	e3a01002 	mov	r1, #2
  28:	e28d0004 	add	r0, sp, #4
  2c:	ebfffffe 	bl	0 <bcm2835_i2c_read>
  30:	e1dd00b4 	ldrh	r0, [sp, #4]
  34:	e6bf0fb0 	rev16	r0, r0
  38:	e6ff0070 	uxth	r0, r0
  3c:	e28dd00c 	add	sp, sp, #12
  40:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  44:	20804000 	addcs	r4, r0, r0
  48:	00061a80 	andeq	r1, r6, r0, lsl #21

0000004c <SlushBoard::getTemprature()>:
  4c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  50:	ed2d8b02 	vpush	{d8}
  54:	e3a02036 	mov	r2, #54	; 0x36
  58:	e3a01000 	mov	r1, #0
  5c:	e59f30a8 	ldr	r3, [pc, #168]	; 10c <SlushBoard::getTemprature()+0xc0>
  60:	e24dd00c 	sub	sp, sp, #12
  64:	e1cd10b4 	strh	r1, [sp, #4]
  68:	e59f00a0 	ldr	r0, [pc, #160]	; 110 <SlushBoard::getTemprature()+0xc4>
  6c:	e583200c 	str	r2, [r3, #12]
  70:	ebfffffe 	bl	0 <bcm2835_i2c_set_baudrate>
  74:	e3a01002 	mov	r1, #2
  78:	e28d0004 	add	r0, sp, #4
  7c:	ebfffffe 	bl	0 <bcm2835_i2c_read>
  80:	e1dd30b4 	ldrh	r3, [sp, #4]
  84:	ed9f7a18 	vldr	s14, [pc, #96]	; ec <SlushBoard::getTemprature()+0xa0>
  88:	e6bf3fb3 	rev16	r3, r3
  8c:	e6ff3073 	uxth	r3, r3
  90:	ee073a90 	vmov	s15, r3
  94:	eef87a67 	vcvt.f32.u32	s15, s15
  98:	eddf6a14 	vldr	s13, [pc, #80]	; f0 <SlushBoard::getTemprature()+0xa4>
  9c:	ee677a87 	vmul.f32	s15, s15, s14
  a0:	ee677aa6 	vmul.f32	s15, s15, s13
  a4:	ed9f8a12 	vldr	s16, [pc, #72]	; f4 <SlushBoard::getTemprature()+0xa8>
  a8:	ee867aa7 	vdiv.f32	s14, s13, s15
  ac:	eddf5a11 	vldr	s11, [pc, #68]	; f8 <SlushBoard::getTemprature()+0xac>
  b0:	ee777a48 	vsub.f32	s15, s14, s16
  b4:	ed9f6a10 	vldr	s12, [pc, #64]	; fc <SlushBoard::getTemprature()+0xb0>
  b8:	ee850aa7 	vdiv.f32	s0, s11, s15
  bc:	ee800a06 	vdiv.f32	s0, s0, s12
  c0:	ebfffffe 	bl	0 <logf>
  c4:	ed9f6a0d 	vldr	s12, [pc, #52]	; 100 <SlushBoard::getTemprature()+0xb4>
  c8:	eddf6a0d 	vldr	s13, [pc, #52]	; 104 <SlushBoard::getTemprature()+0xb8>
  cc:	eec07a06 	vdiv.f32	s15, s0, s12
  d0:	ee777aa6 	vadd.f32	s15, s15, s13
  d4:	ed9f7a0b 	vldr	s14, [pc, #44]	; 108 <SlushBoard::getTemprature()+0xbc>
  d8:	ee880a27 	vdiv.f32	s0, s16, s15
  dc:	ee300a47 	vsub.f32	s0, s0, s14
  e0:	e28dd00c 	add	sp, sp, #12
  e4:	ecbd8b02 	vpop	{d8}
  e8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  ec:	3a800000 	bcc	fe0000f4 <SlushBoard::calcTemp(unsigned short)+0xfdffffe0>
  f0:	40a00000 	adcmi	r0, r0, r0
  f4:	3f800000 	svccc	0x00800000
  f8:	47c35000 	strbmi	r5, [r3, r0]
  fc:	47435000 	strbmi	r5, [r3, -r0]
 100:	4576e000 	ldrbmi	lr, [r6, #-0]!
 104:	3b5bcf0f 	blcc	16f3d48 <SlushBoard::calcTemp(unsigned short)+0x16f3c34>
 108:	43889333 	orrmi	r9, r8, #-872415232	; 0xcc000000
 10c:	20804000 	addcs	r4, r0, r0
 110:	00061a80 	andeq	r1, r6, r0, lsl #21

00000114 <SlushBoard::calcTemp(unsigned short)>:
 114:	ee071a90 	vmov	s15, r1
 118:	ed9f7a16 	vldr	s14, [pc, #88]	; 178 <SlushBoard::calcTemp(unsigned short)+0x64>
 11c:	eef87a67 	vcvt.f32.u32	s15, s15
 120:	eddf6a15 	vldr	s13, [pc, #84]	; 17c <SlushBoard::calcTemp(unsigned short)+0x68>
 124:	ee677a87 	vmul.f32	s15, s15, s14
 128:	ee677aa6 	vmul.f32	s15, s15, s13
 12c:	e92d4010 	push	{r4, lr}
 130:	ee867aa7 	vdiv.f32	s14, s13, s15
 134:	ed2d8b02 	vpush	{d8}
 138:	ed9f8a10 	vldr	s16, [pc, #64]	; 180 <SlushBoard::calcTemp(unsigned short)+0x6c>
 13c:	eddf5a10 	vldr	s11, [pc, #64]	; 184 <SlushBoard::calcTemp(unsigned short)+0x70>
 140:	ee777a48 	vsub.f32	s15, s14, s16
 144:	ed9f6a0f 	vldr	s12, [pc, #60]	; 188 <SlushBoard::calcTemp(unsigned short)+0x74>
 148:	ee850aa7 	vdiv.f32	s0, s11, s15
 14c:	ee800a06 	vdiv.f32	s0, s0, s12
 150:	ebfffffe 	bl	0 <logf>
 154:	ed9f6a0c 	vldr	s12, [pc, #48]	; 18c <SlushBoard::calcTemp(unsigned short)+0x78>
 158:	eddf6a0c 	vldr	s13, [pc, #48]	; 190 <SlushBoard::calcTemp(unsigned short)+0x7c>
 15c:	eec07a06 	vdiv.f32	s15, s0, s12
 160:	ee777aa6 	vadd.f32	s15, s15, s13
 164:	ed9f7a0a 	vldr	s14, [pc, #40]	; 194 <SlushBoard::calcTemp(unsigned short)+0x80>
 168:	ee880a27 	vdiv.f32	s0, s16, s15
 16c:	ecbd8b02 	vpop	{d8}
 170:	ee300a47 	vsub.f32	s0, s0, s14
 174:	e8bd8010 	pop	{r4, pc}
 178:	3a800000 	bcc	fe000180 <SlushBoard::calcTemp(unsigned short)+0xfe00006c>
 17c:	40a00000 	adcmi	r0, r0, r0
 180:	3f800000 	svccc	0x00800000
 184:	47c35000 	strbmi	r5, [r3, r0]
 188:	47435000 	strbmi	r5, [r3, -r0]
 18c:	4576e000 	ldrbmi	lr, [r6, #-0]!
 190:	3b5bcf0f 	blcc	16f3dd4 <SlushBoard::calcTemp(unsigned short)+0x16f3cc0>
 194:	43889333 	orrmi	r9, r8, #-872415232	; 0xcc000000

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <SlushBoard::calcTemp(unsigned short)+0x168d718>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <SlushBoard::calcTemp(unsigned short)+0x42310>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


l6470dump.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <L6470::Dump()>:
   0:	e12fff1e 	bx	lr

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <L6470::Dump()+0x168d82c>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <L6470::Dump()+0x42424>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


l6470commands.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <L6470::setParam(TL6470ParamRegisters, unsigned long)>:
   0:	e92d4030 	push	{r4, r5, lr}
   4:	e1a04000 	mov	r4, r0
   8:	e1a05001 	mov	r5, r1
   c:	e5903000 	ldr	r3, [r0]
  10:	e24dd00c 	sub	sp, sp, #12
  14:	e58d2004 	str	r2, [sp, #4]
  18:	e593300c 	ldr	r3, [r3, #12]
  1c:	e12fff33 	blx	r3
  20:	e1a01005 	mov	r1, r5
  24:	e1a00004 	mov	r0, r4
  28:	e59d2004 	ldr	r2, [sp, #4]
  2c:	e28dd00c 	add	sp, sp, #12
  30:	e8bd4030 	pop	{r4, r5, lr}
  34:	eafffffe 	b	0 <L6470::paramHandler(unsigned char, unsigned long)>

00000038 <L6470::getParam(TL6470ParamRegisters)>:
  38:	e92d4070 	push	{r4, r5, r6, lr}
  3c:	e1a04000 	mov	r4, r0
  40:	e1a05001 	mov	r5, r1
  44:	e5903000 	ldr	r3, [r0]
  48:	e3811020 	orr	r1, r1, #32
  4c:	e593300c 	ldr	r3, [r3, #12]
  50:	e12fff33 	blx	r3
  54:	e1a01005 	mov	r1, r5
  58:	e1a00004 	mov	r0, r4
  5c:	e8bd4070 	pop	{r4, r5, r6, lr}
  60:	e3a02000 	mov	r2, #0
  64:	eafffffe 	b	0 <L6470::paramHandler(unsigned char, unsigned long)>

00000068 <L6470::getPos()>:
  68:	e92d4010 	push	{r4, lr}
  6c:	e1a04000 	mov	r4, r0
  70:	e5903000 	ldr	r3, [r0]
  74:	e3a01021 	mov	r1, #33	; 0x21
  78:	e593300c 	ldr	r3, [r3, #12]
  7c:	e12fff33 	blx	r3
  80:	e3a02000 	mov	r2, #0
  84:	e3a01001 	mov	r1, #1
  88:	e1a00004 	mov	r0, r4
  8c:	ebfffffe 	bl	0 <L6470::paramHandler(unsigned char, unsigned long)>
  90:	e3100602 	tst	r0, #2097152	; 0x200000
  94:	11e00500 	mvnne	r0, r0, lsl #10
  98:	11e00520 	mvnne	r0, r0, lsr #10
  9c:	e8bd8010 	pop	{r4, pc}

000000a0 <L6470::getMark()>:
  a0:	e92d4010 	push	{r4, lr}
  a4:	e1a04000 	mov	r4, r0
  a8:	e5903000 	ldr	r3, [r0]
  ac:	e3a01023 	mov	r1, #35	; 0x23
  b0:	e593300c 	ldr	r3, [r3, #12]
  b4:	e12fff33 	blx	r3
  b8:	e3a02000 	mov	r2, #0
  bc:	e3a01003 	mov	r1, #3
  c0:	e1a00004 	mov	r0, r4
  c4:	ebfffffe 	bl	0 <L6470::paramHandler(unsigned char, unsigned long)>
  c8:	e3100602 	tst	r0, #2097152	; 0x200000
  cc:	11e00500 	mvnne	r0, r0, lsl #10
  d0:	11e00520 	mvnne	r0, r0, lsr #10
  d4:	e8bd8010 	pop	{r4, pc}

000000d8 <L6470::run(TL6470Direction, float)>:
  d8:	e92d4070 	push	{r4, r5, r6, lr}
  dc:	e1a04000 	mov	r4, r0
  e0:	e5903000 	ldr	r3, [r0]
  e4:	e24dd010 	sub	sp, sp, #16
  e8:	e593300c 	ldr	r3, [r3, #12]
  ec:	ed8d0a01 	vstr	s0, [sp, #4]
  f0:	e3811050 	orr	r1, r1, #80	; 0x50
  f4:	e12fff33 	blx	r3
  f8:	ed9d0a01 	vldr	s0, [sp, #4]
  fc:	e1a00004 	mov	r0, r4
 100:	ebfffffe 	bl	0 <L6470::spdCalc(float)>
 104:	e3500601 	cmp	r0, #1048576	; 0x100000
 108:	259f3030 	ldrcs	r3, [pc, #48]	; 140 <L6470::run(TL6470Direction, float)+0x68>
 10c:	358d000c 	strcc	r0, [sp, #12]
 110:	258d300c 	strcs	r3, [sp, #12]
 114:	e28d600c 	add	r6, sp, #12
 118:	e28d500f 	add	r5, sp, #15
 11c:	e5943000 	ldr	r3, [r4]
 120:	e5751001 	ldrb	r1, [r5, #-1]!
 124:	e1a00004 	mov	r0, r4
 128:	e593300c 	ldr	r3, [r3, #12]
 12c:	e12fff33 	blx	r3
 130:	e1550006 	cmp	r5, r6
 134:	1afffff8 	bne	11c <L6470::run(TL6470Direction, float)+0x44>
 138:	e28dd010 	add	sp, sp, #16
 13c:	e8bd8070 	pop	{r4, r5, r6, pc}
 140:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

00000144 <L6470::stepClock(TL6470Direction)>:
 144:	e5903000 	ldr	r3, [r0]
 148:	e3811058 	orr	r1, r1, #88	; 0x58
 14c:	e593300c 	ldr	r3, [r3, #12]
 150:	e12fff13 	bx	r3

00000154 <L6470::move(TL6470Direction, unsigned long)>:
 154:	e92d4070 	push	{r4, r5, r6, lr}
 158:	e5903000 	ldr	r3, [r0]
 15c:	e24dd008 	sub	sp, sp, #8
 160:	e593300c 	ldr	r3, [r3, #12]
 164:	e58d2004 	str	r2, [sp, #4]
 168:	e3811040 	orr	r1, r1, #64	; 0x40
 16c:	e1a05000 	mov	r5, r0
 170:	e12fff33 	blx	r3
 174:	e59d3004 	ldr	r3, [sp, #4]
 178:	e28d6004 	add	r6, sp, #4
 17c:	e3530501 	cmp	r3, #4194304	; 0x400000
 180:	259f3028 	ldrcs	r3, [pc, #40]	; 1b0 <L6470::move(TL6470Direction, unsigned long)+0x5c>
 184:	e28d4007 	add	r4, sp, #7
 188:	258d3004 	strcs	r3, [sp, #4]
 18c:	e5953000 	ldr	r3, [r5]
 190:	e5741001 	ldrb	r1, [r4, #-1]!
 194:	e1a00005 	mov	r0, r5
 198:	e593300c 	ldr	r3, [r3, #12]
 19c:	e12fff33 	blx	r3
 1a0:	e1540006 	cmp	r4, r6
 1a4:	1afffff8 	bne	18c <L6470::move(TL6470Direction, unsigned long)+0x38>
 1a8:	e28dd008 	add	sp, sp, #8
 1ac:	e8bd8070 	pop	{r4, r5, r6, pc}
 1b0:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>

000001b4 <L6470::goTo(long)>:
 1b4:	e92d4070 	push	{r4, r5, r6, lr}
 1b8:	e5903000 	ldr	r3, [r0]
 1bc:	e24dd008 	sub	sp, sp, #8
 1c0:	e593300c 	ldr	r3, [r3, #12]
 1c4:	e58d1004 	str	r1, [sp, #4]
 1c8:	e3a01060 	mov	r1, #96	; 0x60
 1cc:	e1a05000 	mov	r5, r0
 1d0:	e12fff33 	blx	r3
 1d4:	e59d3004 	ldr	r3, [sp, #4]
 1d8:	e28d6004 	add	r6, sp, #4
 1dc:	e3530501 	cmp	r3, #4194304	; 0x400000
 1e0:	a59f3028 	ldrge	r3, [pc, #40]	; 210 <L6470::goTo(long)+0x5c>
 1e4:	e28d4007 	add	r4, sp, #7
 1e8:	a58d3004 	strge	r3, [sp, #4]
 1ec:	e5953000 	ldr	r3, [r5]
 1f0:	e5741001 	ldrb	r1, [r4, #-1]!
 1f4:	e1a00005 	mov	r0, r5
 1f8:	e593300c 	ldr	r3, [r3, #12]
 1fc:	e12fff33 	blx	r3
 200:	e1540006 	cmp	r4, r6
 204:	1afffff8 	bne	1ec <L6470::goTo(long)+0x38>
 208:	e28dd008 	add	sp, sp, #8
 20c:	e8bd8070 	pop	{r4, r5, r6, pc}
 210:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>

00000214 <L6470::goToDir(TL6470Direction, long)>:
 214:	e92d4070 	push	{r4, r5, r6, lr}
 218:	e5903000 	ldr	r3, [r0]
 21c:	e24dd008 	sub	sp, sp, #8
 220:	e593300c 	ldr	r3, [r3, #12]
 224:	e58d2004 	str	r2, [sp, #4]
 228:	e3811068 	orr	r1, r1, #104	; 0x68
 22c:	e1a05000 	mov	r5, r0
 230:	e12fff33 	blx	r3
 234:	e59d3004 	ldr	r3, [sp, #4]
 238:	e28d6004 	add	r6, sp, #4
 23c:	e3530501 	cmp	r3, #4194304	; 0x400000
 240:	a59f3028 	ldrge	r3, [pc, #40]	; 270 <L6470::goToDir(TL6470Direction, long)+0x5c>
 244:	e28d4007 	add	r4, sp, #7
 248:	a58d3004 	strge	r3, [sp, #4]
 24c:	e5953000 	ldr	r3, [r5]
 250:	e5741001 	ldrb	r1, [r4, #-1]!
 254:	e1a00005 	mov	r0, r5
 258:	e593300c 	ldr	r3, [r3, #12]
 25c:	e12fff33 	blx	r3
 260:	e1540006 	cmp	r4, r6
 264:	1afffff8 	bne	24c <L6470::goToDir(TL6470Direction, long)+0x38>
 268:	e28dd008 	add	sp, sp, #8
 26c:	e8bd8070 	pop	{r4, r5, r6, pc}
 270:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>

00000274 <L6470::goUntil(TL6470Action, TL6470Direction, float)>:
 274:	e92d4070 	push	{r4, r5, r6, lr}
 278:	e1a04000 	mov	r4, r0
 27c:	e5903000 	ldr	r3, [r0]
 280:	e24dd010 	sub	sp, sp, #16
 284:	e1811002 	orr	r1, r1, r2
 288:	e593300c 	ldr	r3, [r3, #12]
 28c:	ed8d0a01 	vstr	s0, [sp, #4]
 290:	e3811082 	orr	r1, r1, #130	; 0x82
 294:	e12fff33 	blx	r3
 298:	ed9d0a01 	vldr	s0, [sp, #4]
 29c:	e1a00004 	mov	r0, r4
 2a0:	ebfffffe 	bl	0 <L6470::spdCalc(float)>
 2a4:	e3500501 	cmp	r0, #4194304	; 0x400000
 2a8:	259f3030 	ldrcs	r3, [pc, #48]	; 2e0 <L6470::goUntil(TL6470Action, TL6470Direction, float)+0x6c>
 2ac:	358d000c 	strcc	r0, [sp, #12]
 2b0:	258d300c 	strcs	r3, [sp, #12]
 2b4:	e28d600c 	add	r6, sp, #12
 2b8:	e28d500f 	add	r5, sp, #15
 2bc:	e5943000 	ldr	r3, [r4]
 2c0:	e5751001 	ldrb	r1, [r5, #-1]!
 2c4:	e1a00004 	mov	r0, r4
 2c8:	e593300c 	ldr	r3, [r3, #12]
 2cc:	e12fff33 	blx	r3
 2d0:	e1550006 	cmp	r5, r6
 2d4:	1afffff8 	bne	2bc <L6470::goUntil(TL6470Action, TL6470Direction, float)+0x48>
 2d8:	e28dd010 	add	sp, sp, #16
 2dc:	e8bd8070 	pop	{r4, r5, r6, pc}
 2e0:	003fffff 	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>

000002e4 <L6470::releaseSw(TL6470Action, TL6470Direction)>:
 2e4:	e5903000 	ldr	r3, [r0]
 2e8:	e1811002 	orr	r1, r1, r2
 2ec:	e593300c 	ldr	r3, [r3, #12]
 2f0:	e3811092 	orr	r1, r1, #146	; 0x92
 2f4:	e12fff13 	bx	r3

000002f8 <L6470::goHome()>:
 2f8:	e5903000 	ldr	r3, [r0]
 2fc:	e3a01070 	mov	r1, #112	; 0x70
 300:	e593300c 	ldr	r3, [r3, #12]
 304:	e12fff13 	bx	r3

00000308 <L6470::goMark()>:
 308:	e5903000 	ldr	r3, [r0]
 30c:	e3a01078 	mov	r1, #120	; 0x78
 310:	e593300c 	ldr	r3, [r3, #12]
 314:	e12fff13 	bx	r3

00000318 <L6470::setMark(long)>:
 318:	e1a02001 	mov	r2, r1
 31c:	e92d4010 	push	{r4, lr}
 320:	e1a04000 	mov	r4, r0
 324:	e5903000 	ldr	r3, [r0]
 328:	e24dd008 	sub	sp, sp, #8
 32c:	e58d2004 	str	r2, [sp, #4]
 330:	e3a01003 	mov	r1, #3
 334:	e593300c 	ldr	r3, [r3, #12]
 338:	e12fff33 	blx	r3
 33c:	e3a01003 	mov	r1, #3
 340:	e1a00004 	mov	r0, r4
 344:	e59d2004 	ldr	r2, [sp, #4]
 348:	e28dd008 	add	sp, sp, #8
 34c:	e8bd4010 	pop	{r4, lr}
 350:	eafffffe 	b	0 <L6470::paramHandler(unsigned char, unsigned long)>

00000354 <L6470::setPos(long)>:
 354:	e1a02001 	mov	r2, r1
 358:	e92d4010 	push	{r4, lr}
 35c:	e1a04000 	mov	r4, r0
 360:	e5903000 	ldr	r3, [r0]
 364:	e24dd008 	sub	sp, sp, #8
 368:	e58d2004 	str	r2, [sp, #4]
 36c:	e3a01001 	mov	r1, #1
 370:	e593300c 	ldr	r3, [r3, #12]
 374:	e12fff33 	blx	r3
 378:	e3a01001 	mov	r1, #1
 37c:	e1a00004 	mov	r0, r4
 380:	e59d2004 	ldr	r2, [sp, #4]
 384:	e28dd008 	add	sp, sp, #8
 388:	e8bd4010 	pop	{r4, lr}
 38c:	eafffffe 	b	0 <L6470::paramHandler(unsigned char, unsigned long)>

00000390 <L6470::resetPos()>:
 390:	e5903000 	ldr	r3, [r0]
 394:	e3a010d8 	mov	r1, #216	; 0xd8
 398:	e593300c 	ldr	r3, [r3, #12]
 39c:	e12fff13 	bx	r3

000003a0 <L6470::resetDev()>:
 3a0:	e5903000 	ldr	r3, [r0]
 3a4:	e3a010c0 	mov	r1, #192	; 0xc0
 3a8:	e593300c 	ldr	r3, [r3, #12]
 3ac:	e12fff13 	bx	r3

000003b0 <L6470::softStop()>:
 3b0:	e5903000 	ldr	r3, [r0]
 3b4:	e3a010b0 	mov	r1, #176	; 0xb0
 3b8:	e593300c 	ldr	r3, [r3, #12]
 3bc:	e12fff13 	bx	r3

000003c0 <L6470::hardStop()>:
 3c0:	e5903000 	ldr	r3, [r0]
 3c4:	e3a010b8 	mov	r1, #184	; 0xb8
 3c8:	e593300c 	ldr	r3, [r3, #12]
 3cc:	e12fff13 	bx	r3

000003d0 <L6470::softHiZ()>:
 3d0:	e5903000 	ldr	r3, [r0]
 3d4:	e3a010a0 	mov	r1, #160	; 0xa0
 3d8:	e593300c 	ldr	r3, [r3, #12]
 3dc:	e12fff13 	bx	r3

000003e0 <L6470::hardHiZ()>:
 3e0:	e5903000 	ldr	r3, [r0]
 3e4:	e3a010a8 	mov	r1, #168	; 0xa8
 3e8:	e593300c 	ldr	r3, [r3, #12]
 3ec:	e12fff13 	bx	r3

000003f0 <L6470::getStatus()>:
 3f0:	e92d4030 	push	{r4, r5, lr}
 3f4:	e3a05000 	mov	r5, #0
 3f8:	e1a04000 	mov	r4, r0
 3fc:	e5903000 	ldr	r3, [r0]
 400:	e24dd00c 	sub	sp, sp, #12
 404:	e3a010d0 	mov	r1, #208	; 0xd0
 408:	e593300c 	ldr	r3, [r3, #12]
 40c:	e58d5004 	str	r5, [sp, #4]
 410:	e12fff33 	blx	r3
 414:	e5943000 	ldr	r3, [r4]
 418:	e1a01005 	mov	r1, r5
 41c:	e1a00004 	mov	r0, r4
 420:	e593300c 	ldr	r3, [r3, #12]
 424:	e12fff33 	blx	r3
 428:	e1a02000 	mov	r2, r0
 42c:	e5943000 	ldr	r3, [r4]
 430:	e1a01005 	mov	r1, r5
 434:	e1a00004 	mov	r0, r4
 438:	e593300c 	ldr	r3, [r3, #12]
 43c:	e5cd2005 	strb	r2, [sp, #5]
 440:	e12fff33 	blx	r3
 444:	e5cd0004 	strb	r0, [sp, #4]
 448:	e59d0004 	ldr	r0, [sp, #4]
 44c:	e28dd00c 	add	sp, sp, #12
 450:	e8bd8030 	pop	{r4, r5, pc}

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <L6470::getStatus()+0x168d43c>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <L6470::getStatus()+0x42034>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.


slushmotor.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <SlushMotor::SPIXfer(unsigned char)>:
   0:	e3a0c03e 	mov	ip, #62	; 0x3e
   4:	e92d4070 	push	{r4, r5, r6, lr}
   8:	e1a05000 	mov	r5, r0
   c:	e3a04001 	mov	r4, #1
  10:	e24dd008 	sub	sp, sp, #8
  14:	e59f3050 	ldr	r3, [pc, #80]	; 6c <SlushMotor::SPIXfer(unsigned char)+0x6c>
  18:	e5cd1004 	strb	r1, [sp, #4]
  1c:	e5932000 	ldr	r2, [r3]
  20:	e59f6048 	ldr	r6, [pc, #72]	; 70 <SlushMotor::SPIXfer(unsigned char)+0x70>
  24:	e3822003 	orr	r2, r2, #3
  28:	e5832000 	str	r2, [r3]
  2c:	e583c008 	str	ip, [r3, #8]
  30:	e5932000 	ldr	r2, [r3]
  34:	e1a01004 	mov	r1, r4
  38:	e382200c 	orr	r2, r2, #12
  3c:	e5832000 	str	r2, [r3]
  40:	e5d53008 	ldrb	r3, [r5, #8]
  44:	e28d0004 	add	r0, sp, #4
  48:	e1a03314 	lsl	r3, r4, r3
  4c:	e5863028 	str	r3, [r6, #40]	; 0x28
  50:	ebfffffe 	bl	0 <bcm2835_spi_transfern>
  54:	e5d51008 	ldrb	r1, [r5, #8]
  58:	e1a04114 	lsl	r4, r4, r1
  5c:	e586401c 	str	r4, [r6, #28]
  60:	e5dd0004 	ldrb	r0, [sp, #4]
  64:	e28dd008 	add	sp, sp, #8
  68:	e8bd8070 	pop	{r4, r5, r6, pc}
  6c:	20204000 	eorcs	r4, r0, r0
  70:	20200000 	eorcs	r0, r0, r0

00000074 <SlushMotor::~SlushMotor()>:
  74:	e59f3028 	ldr	r3, [pc, #40]	; a4 <SlushMotor::~SlushMotor()+0x30>
  78:	e92d4010 	push	{r4, lr}
  7c:	e5803000 	str	r3, [r0]
  80:	e1a04000 	mov	r4, r0
  84:	ebfffffe 	bl	0 <L6470::hardHiZ()>
  88:	e3a03000 	mov	r3, #0
  8c:	e1a00004 	mov	r0, r4
  90:	e5c43011 	strb	r3, [r4, #17]
  94:	e5c43012 	strb	r3, [r4, #18]
  98:	ebfffffe 	bl	0 <L6470::~L6470()>
  9c:	e1a00004 	mov	r0, r4
  a0:	e8bd8010 	pop	{r4, pc}
  a4:	00000008 	andeq	r0, r0, r8

000000a8 <SlushMotor::busyCheck()>:
  a8:	e5d03010 	ldrb	r3, [r0, #16]
  ac:	e92d4070 	push	{r4, r5, r6, lr}
  b0:	e3530000 	cmp	r3, #0
  b4:	1a000011 	bne	100 <SlushMotor::busyCheck()+0x58>
  b8:	e5d05011 	ldrb	r5, [r0, #17]
  bc:	e1a04000 	mov	r4, r0
  c0:	e3550000 	cmp	r5, #0
  c4:	0a000007 	beq	e8 <SlushMotor::busyCheck()+0x40>
  c8:	e3a00001 	mov	r0, #1
  cc:	e59f2054 	ldr	r2, [pc, #84]	; 128 <SlushMotor::busyCheck()+0x80>
  d0:	e5d4100c 	ldrb	r1, [r4, #12]
  d4:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  d8:	e0122110 	ands	r2, r2, r0, lsl r1
  dc:	11a00003 	movne	r0, r3
  e0:	15c43011 	strbne	r3, [r4, #17]
  e4:	e8bd8070 	pop	{r4, r5, r6, pc}
  e8:	e3a01019 	mov	r1, #25
  ec:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
  f0:	e3100002 	tst	r0, #2
  f4:	0a000007 	beq	118 <SlushMotor::busyCheck()+0x70>
  f8:	e1a00005 	mov	r0, r5
  fc:	e8bd8070 	pop	{r4, r5, r6, pc}
 100:	e3a01019 	mov	r1, #25
 104:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 108:	e3100002 	tst	r0, #2
 10c:	03a00001 	moveq	r0, #1
 110:	13a00000 	movne	r0, #0
 114:	e8bd8070 	pop	{r4, r5, r6, pc}
 118:	e3a03001 	mov	r3, #1
 11c:	e1a00003 	mov	r0, r3
 120:	e5c43011 	strb	r3, [r4, #17]
 124:	e8bd8070 	pop	{r4, r5, r6, pc}
 128:	20200000 	eorcs	r0, r0, r0

0000012c <SlushMotor::~SlushMotor()>:
 12c:	e59f3030 	ldr	r3, [pc, #48]	; 164 <SlushMotor::~SlushMotor()+0x38>
 130:	e92d4010 	push	{r4, lr}
 134:	e5803000 	str	r3, [r0]
 138:	e1a04000 	mov	r4, r0
 13c:	ebfffffe 	bl	0 <L6470::hardHiZ()>
 140:	e3a03000 	mov	r3, #0
 144:	e1a00004 	mov	r0, r4
 148:	e5c43011 	strb	r3, [r4, #17]
 14c:	e5c43012 	strb	r3, [r4, #18]
 150:	ebfffffe 	bl	0 <L6470::~L6470()>
 154:	e1a00004 	mov	r0, r4
 158:	ebfffffe 	bl	0 <operator delete(void*)>
 15c:	e1a00004 	mov	r0, r4
 160:	e8bd8010 	pop	{r4, pc}
 164:	00000008 	andeq	r0, r0, r8

00000168 <SlushMotor::SlushMotor(unsigned int, bool)>:
 168:	e3a03000 	mov	r3, #0
 16c:	e59fc0ec 	ldr	ip, [pc, #236]	; 260 <SlushMotor::SlushMotor(unsigned int, bool)+0xf8>
 170:	e3510002 	cmp	r1, #2
 174:	e92d4010 	push	{r4, lr}
 178:	e1a04000 	mov	r4, r0
 17c:	e580c000 	str	ip, [r0]
 180:	e5c03011 	strb	r3, [r0, #17]
 184:	e5c03012 	strb	r3, [r0, #18]
 188:	e5801004 	str	r1, [r0, #4]
 18c:	e5c02010 	strb	r2, [r0, #16]
 190:	0a00002e 	beq	250 <SlushMotor::SlushMotor(unsigned int, bool)+0xe8>
 194:	e3510003 	cmp	r1, #3
 198:	0a000028 	beq	240 <SlushMotor::SlushMotor(unsigned int, bool)+0xd8>
 19c:	e3510001 	cmp	r1, #1
 1a0:	13a02018 	movne	r2, #24
 1a4:	13a03010 	movne	r3, #16
 1a8:	03a02019 	moveq	r2, #25
 1ac:	03a03011 	moveq	r3, #17
 1b0:	e1c020f8 	strd	r2, [r0, #8]
 1b4:	e3a01018 	mov	r1, #24
 1b8:	e1a00004 	mov	r0, r4
 1bc:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 1c0:	e59f309c 	ldr	r3, [pc, #156]	; 264 <SlushMotor::SlushMotor(unsigned int, bool)+0xfc>
 1c4:	e1500003 	cmp	r0, r3
 1c8:	0a000001 	beq	1d4 <SlushMotor::SlushMotor(unsigned int, bool)+0x6c>
 1cc:	e1a00004 	mov	r0, r4
 1d0:	e8bd8010 	pop	{r4, pc}
 1d4:	e3a02005 	mov	r2, #5
 1d8:	e1a00004 	mov	r0, r4
 1dc:	e3a01013 	mov	r1, #19
 1e0:	ebfffffe 	bl	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>
 1e4:	e1a00004 	mov	r0, r4
 1e8:	e3a01010 	mov	r1, #16
 1ec:	ebfffffe 	bl	0 <L6470::setMicroSteps(unsigned int)>
 1f0:	e1a00004 	mov	r0, r4
 1f4:	e3a01046 	mov	r1, #70	; 0x46
 1f8:	ebfffffe 	bl	0 <L6470::setHoldKVAL(unsigned char)>
 1fc:	e1a00004 	mov	r0, r4
 200:	e3a0105a 	mov	r1, #90	; 0x5a
 204:	ebfffffe 	bl	0 <L6470::setRunKVAL(unsigned char)>
 208:	e1a00004 	mov	r0, r4
 20c:	e3a01064 	mov	r1, #100	; 0x64
 210:	ebfffffe 	bl	0 <L6470::setAccKVAL(unsigned char)>
 214:	e3a01064 	mov	r1, #100	; 0x64
 218:	e1a00004 	mov	r0, r4
 21c:	ebfffffe 	bl	0 <L6470::setDecKVAL(unsigned char)>
 220:	e1a00004 	mov	r0, r4
 224:	ebfffffe 	bl	0 <L6470::getStatus()>
 228:	e1a00004 	mov	r0, r4
 22c:	ebfffffe 	bl	0 <L6470::hardHiZ()>
 230:	e3a03001 	mov	r3, #1
 234:	e1a00004 	mov	r0, r4
 238:	e5c43012 	strb	r3, [r4, #18]
 23c:	e8bd8010 	pop	{r4, pc}
 240:	e3a0201b 	mov	r2, #27
 244:	e3a03013 	mov	r3, #19
 248:	e1c020f8 	strd	r2, [r0, #8]
 24c:	eaffffd8 	b	1b4 <SlushMotor::SlushMotor(unsigned int, bool)+0x4c>
 250:	e3a0201a 	mov	r2, #26
 254:	e3a03012 	mov	r3, #18
 258:	e1c020f8 	strd	r2, [r0, #8]
 25c:	eaffffd4 	b	1b4 <SlushMotor::SlushMotor(unsigned int, bool)+0x4c>
 260:	00000008 	andeq	r0, r0, r8
 264:	00002e88 	andeq	r2, r0, r8, lsl #29

00000268 <SlushMotor::isBusy()>:
 268:	e5903000 	ldr	r3, [r0]
 26c:	e59f2090 	ldr	r2, [pc, #144]	; 304 <SlushMotor::isBusy()+0x9c>
 270:	e5933008 	ldr	r3, [r3, #8]
 274:	e1530002 	cmp	r3, r2
 278:	1a000016 	bne	2d8 <SlushMotor::isBusy()+0x70>
 27c:	e5d03010 	ldrb	r3, [r0, #16]
 280:	e92d4070 	push	{r4, r5, r6, lr}
 284:	e3530000 	cmp	r3, #0
 288:	e1a04000 	mov	r4, r0
 28c:	1a00000b 	bne	2c0 <SlushMotor::isBusy()+0x58>
 290:	e5d05011 	ldrb	r5, [r0, #17]
 294:	e3550000 	cmp	r5, #0
 298:	0a00000f 	beq	2dc <SlushMotor::isBusy()+0x74>
 29c:	e3a00001 	mov	r0, #1
 2a0:	e59f2060 	ldr	r2, [pc, #96]	; 308 <SlushMotor::isBusy()+0xa0>
 2a4:	e5d4100c 	ldrb	r1, [r4, #12]
 2a8:	e5922034 	ldr	r2, [r2, #52]	; 0x34
 2ac:	e0122110 	ands	r2, r2, r0, lsl r1
 2b0:	08bd8070 	popeq	{r4, r5, r6, pc}
 2b4:	e1a00003 	mov	r0, r3
 2b8:	e5c43011 	strb	r3, [r4, #17]
 2bc:	e8bd8070 	pop	{r4, r5, r6, pc}
 2c0:	e3a01019 	mov	r1, #25
 2c4:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 2c8:	e3100002 	tst	r0, #2
 2cc:	03a00001 	moveq	r0, #1
 2d0:	13a00000 	movne	r0, #0
 2d4:	e8bd8070 	pop	{r4, r5, r6, pc}
 2d8:	e12fff13 	bx	r3
 2dc:	e3a01019 	mov	r1, #25
 2e0:	ebfffffe 	bl	0 <L6470::getParam(TL6470ParamRegisters)>
 2e4:	e3100002 	tst	r0, #2
 2e8:	1a000003 	bne	2fc <SlushMotor::isBusy()+0x94>
 2ec:	e3a03001 	mov	r3, #1
 2f0:	e1a00003 	mov	r0, r3
 2f4:	e5c43011 	strb	r3, [r4, #17]
 2f8:	e8bd8070 	pop	{r4, r5, r6, pc}
 2fc:	e1a00005 	mov	r0, r5
 300:	e8bd8070 	pop	{r4, r5, r6, pc}
 304:	00000000 	andeq	r0, r0, r0
 308:	20200000 	eorcs	r0, r0, r0

0000030c <SlushMotor::setAsHome()>:
 30c:	eafffffe 	b	0 <L6470::resetPos()>

00000310 <SlushMotor::setOverCurrent(unsigned int)>:
 310:	e1a02001 	mov	r2, r1
 314:	e59f3018 	ldr	r3, [pc, #24]	; 334 <SlushMotor::setOverCurrent(unsigned int)+0x24>
 318:	e3a01013 	mov	r1, #19
 31c:	e0823293 	umull	r3, r2, r3, r2
 320:	e1a021a2 	lsr	r2, r2, #3
 324:	e6ef2072 	uxtb	r2, r2
 328:	e352000f 	cmp	r2, #15
 32c:	23a0200f 	movcs	r2, #15
 330:	eafffffe 	b	0 <L6470::setParam(TL6470ParamRegisters, unsigned long)>
 334:	057619f1 	ldrbeq	r1, [r6, #-2545]!	; 0xfffff60f

00000338 <SlushMotor::softFree()>:
 338:	eafffffe 	b	0 <L6470::softHiZ()>

0000033c <SlushMotor::free()>:
 33c:	eafffffe 	b	0 <L6470::hardHiZ()>

00000340 <SlushMotor::IsConnected() const>:
 340:	e5d00012 	ldrb	r0, [r0, #18]
 344:	e12fff1e 	bx	lr

00000348 <SlushMotor::GetUseSpiBusy() const>:
 348:	e5d00010 	ldrb	r0, [r0, #16]
 34c:	e12fff1e 	bx	lr

00000350 <SlushMotor::SetUseSpiBusy(bool)>:
 350:	e5c01010 	strb	r1, [r0, #16]
 354:	e12fff1e 	bx	lr

Disassembly of section .rodata:

00000000 <vtable for SlushMotor>:
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	43434700 	movtmi	r4, #14080	; 0x3700
   4:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
   8:	2029554e 	eorcs	r5, r9, lr, asr #10
   c:	322e3031 	eorcc	r3, lr, #49	; 0x31
  10:	Address 0x0000000000000010 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00003241 	andeq	r3, r0, r1, asr #4
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000028 	andeq	r0, r0, r8, lsr #32
  10:	4b5a3605 	blmi	168d82c <SlushMotor::SetUseSpiBusy(bool)+0x168d4dc>
  14:	08070600 	stmdaeq	r7, {r9, sl}
  18:	0a010901 	beq	42424 <SlushMotor::SetUseSpiBusy(bool)+0x420d4>
  1c:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
  20:	17011501 	strne	r1, [r1, -r1, lsl #10]
  24:	19011803 	stmdbne	r1, {r0, r1, fp, ip}
  28:	1c011a01 			; <UNDEFINED> instruction: 0x1c011a01
  2c:	22021e01 	andcs	r1, r2, #1, 28
  30:	Address 0x0000000000000030 is out of bounds.

