In archive lib_linux/libl6470.a:

autodriver.o:     file format elf64-x86-64


Disassembly of section .text.spi_chipSelect:

0000000000000000 <spi_chipSelect>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.spi_setDataMode:

0000000000000000 <spi_setDataMode>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.spi_set_speed_hz:

0000000000000000 <spi_set_speed_hz>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text.spi_transfern:

0000000000000000 <spi_transfern>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	90                   	nop
   c:	5d                   	pop    %rbp
   d:	c3                   	ret    

Disassembly of section .text.gpio_lev:

0000000000000000 <gpio_lev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	b8 00 00 00 00       	mov    $0x0,%eax
   e:	5d                   	pop    %rbp
   f:	c3                   	ret    

Disassembly of section .text._ZN5L6470C2Ev:

0000000000000000 <L6470::L6470()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13 <L6470::L6470()+0x13>
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	ret    

Disassembly of section .text._ZN10AutoDriverC2Ehhhh:

0000000000000000 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 c8                	mov    %ecx,%eax
  12:	44 89 c7             	mov    %r8d,%edi
  15:	89 f1                	mov    %esi,%ecx
  17:	88 4d f4             	mov    %cl,-0xc(%rbp)
  1a:	88 55 f0             	mov    %dl,-0x10(%rbp)
  1d:	88 45 ec             	mov    %al,-0x14(%rbp)
  20:	89 f8                	mov    %edi,%eax
  22:	88 45 e8             	mov    %al,-0x18(%rbp)
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	call   31 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char, unsigned char)+0x31>
  31:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 38 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char, unsigned char)+0x38>
  38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3c:	48 89 10             	mov    %rdx,(%rax)
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	0f b6 55 f0          	movzbl -0x10(%rbp),%edx
  47:	88 50 0c             	mov    %dl,0xc(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	0f b6 55 ec          	movzbl -0x14(%rbp),%edx
  52:	88 50 0d             	mov    %dl,0xd(%rax)
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	0f b6 55 e8          	movzbl -0x18(%rbp),%edx
  5d:	88 50 0e             	mov    %dl,0xe(%rax)
  60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  64:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  68:	88 50 0f             	mov    %dl,0xf(%rax)
  6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6f:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  73:	0f b6 45 f0          	movzbl -0x10(%rbp),%eax
  77:	48 63 d0             	movslq %eax,%rdx
  7a:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 81 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char, unsigned char)+0x81>
  81:	0f b6 14 0a          	movzbl (%rdx,%rcx,1),%edx
  85:	8d 4a 01             	lea    0x1(%rdx),%ecx
  88:	48 98                	cltq   
  8a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 91 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
  91:	88 0c 10             	mov    %cl,(%rax,%rdx,1)
  94:	90                   	nop
  95:	c9                   	leave  
  96:	c3                   	ret    

Disassembly of section .text._ZN10AutoDriverC2Ehhh:

0000000000000000 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 c8                	mov    %ecx,%eax
  12:	89 f1                	mov    %esi,%ecx
  14:	88 4d f4             	mov    %cl,-0xc(%rbp)
  17:	88 55 f0             	mov    %dl,-0x10(%rbp)
  1a:	88 45 ec             	mov    %al,-0x14(%rbp)
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	call   29 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char)+0x29>
  29:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 30 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char)+0x30>
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 89 10             	mov    %rdx,(%rax)
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	0f b6 55 f0          	movzbl -0x10(%rbp),%edx
  3f:	88 50 0c             	mov    %dl,0xc(%rax)
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	0f b6 55 ec          	movzbl -0x14(%rbp),%edx
  4a:	88 50 0d             	mov    %dl,0xd(%rax)
  4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  51:	c6 40 0e ff          	movb   $0xff,0xe(%rax)
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  5d:	88 50 0f             	mov    %dl,0xf(%rax)
  60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  64:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  68:	0f b6 45 f0          	movzbl -0x10(%rbp),%eax
  6c:	48 63 d0             	movslq %eax,%rdx
  6f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 76 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char)+0x76>
  76:	0f b6 14 0a          	movzbl (%rdx,%rcx,1),%edx
  7a:	8d 4a 01             	lea    0x1(%rdx),%ecx
  7d:	48 98                	cltq   
  7f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 86 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char)+0x86>
  86:	88 0c 10             	mov    %cl,(%rax,%rdx,1)
  89:	90                   	nop
  8a:	c9                   	leave  
  8b:	c3                   	ret    

Disassembly of section .text._ZN10AutoDriverD2Ev:

0000000000000000 <AutoDriver::~AutoDriver()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 17 <AutoDriver::~AutoDriver()+0x17>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <AutoDriver::~AutoDriver()+0x2a>
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  36:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  3a:	0f b6 c0             	movzbl %al,%eax
  3d:	48 63 d0             	movslq %eax,%rdx
  40:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 47 <AutoDriver::~AutoDriver()+0x47>
  47:	0f b6 14 0a          	movzbl (%rdx,%rcx,1),%edx
  4b:	8d 4a ff             	lea    -0x1(%rdx),%ecx
  4e:	48 98                	cltq   
  50:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 57 <AutoDriver::~AutoDriver()+0x57>
  57:	88 0c 10             	mov    %cl,(%rax,%rdx,1)
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	call   66 <AutoDriver::~AutoDriver()+0x66>
  66:	90                   	nop
  67:	c9                   	leave  
  68:	c3                   	ret    

Disassembly of section .text._ZN10AutoDriverD0Ev:

0000000000000000 <AutoDriver::~AutoDriver()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <AutoDriver::~AutoDriver()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <AutoDriver::~AutoDriver()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN10AutoDriver9busyCheckEv:

0000000000000000 <AutoDriver::busyCheck()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b6 40 0e          	movzbl 0xe(%rax),%eax
  18:	3c ff                	cmp    $0xff,%al
  1a:	75 2c                	jne    48 <AutoDriver::busyCheck()+0x48>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	be 19 00 00 00       	mov    $0x19,%esi
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	call   2d <AutoDriver::busyCheck()+0x2d>
  2d:	83 e0 02             	and    $0x2,%eax
  30:	48 85 c0             	test   %rax,%rax
  33:	0f 95 c0             	setne  %al
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <AutoDriver::busyCheck()+0x41>
  3a:	b8 00 00 00 00       	mov    $0x0,%eax
  3f:	eb 79                	jmp    ba <AutoDriver::busyCheck()+0xba>
  41:	b8 01 00 00 00       	mov    $0x1,%eax
  46:	eb 72                	jmp    ba <AutoDriver::busyCheck()+0xba>
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	0f b6 40 10          	movzbl 0x10(%rax),%eax
  50:	83 f0 01             	xor    $0x1,%eax
  53:	84 c0                	test   %al,%al
  55:	74 34                	je     8b <AutoDriver::busyCheck()+0x8b>
  57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5b:	be 19 00 00 00       	mov    $0x19,%esi
  60:	48 89 c7             	mov    %rax,%rdi
  63:	e8 00 00 00 00       	call   68 <AutoDriver::busyCheck()+0x68>
  68:	83 e0 02             	and    $0x2,%eax
  6b:	48 85 c0             	test   %rax,%rax
  6e:	0f 95 c0             	setne  %al
  71:	84 c0                	test   %al,%al
  73:	74 07                	je     7c <AutoDriver::busyCheck()+0x7c>
  75:	b8 00 00 00 00       	mov    $0x0,%eax
  7a:	eb 3e                	jmp    ba <AutoDriver::busyCheck()+0xba>
  7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80:	c6 40 10 01          	movb   $0x1,0x10(%rax)
  84:	b8 01 00 00 00       	mov    $0x1,%eax
  89:	eb 2f                	jmp    ba <AutoDriver::busyCheck()+0xba>
  8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8f:	0f b6 40 0e          	movzbl 0xe(%rax),%eax
  93:	0f b6 c0             	movzbl %al,%eax
  96:	89 c7                	mov    %eax,%edi
  98:	e8 00 00 00 00       	call   9d <AutoDriver::busyCheck()+0x9d>
  9d:	3c 01                	cmp    $0x1,%al
  9f:	0f 94 c0             	sete   %al
  a2:	84 c0                	test   %al,%al
  a4:	74 0f                	je     b5 <AutoDriver::busyCheck()+0xb5>
  a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  aa:	c6 40 10 00          	movb   $0x0,0x10(%rax)
  ae:	b8 00 00 00 00       	mov    $0x0,%eax
  b3:	eb 05                	jmp    ba <AutoDriver::busyCheck()+0xba>
  b5:	b8 01 00 00 00       	mov    $0x1,%eax
  ba:	c9                   	leave  
  bb:	c3                   	ret    

Disassembly of section .text._ZN10AutoDriver7SPIXferEh:

0000000000000000 <AutoDriver::SPIXfer(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	89 f0                	mov    %esi,%eax
  13:	88 45 c4             	mov    %al,-0x3c(%rbp)
  16:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1d:	00 00 
  1f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 89 e0             	mov    %rsp,%rax
  28:	48 89 c3             	mov    %rax,%rbx
  2b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  2f:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  33:	0f b6 c0             	movzbl %al,%eax
  36:	48 98                	cltq   
  38:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3f <AutoDriver::SPIXfer(unsigned char)+0x3f>
  3f:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
  43:	0f b6 d0             	movzbl %al,%edx
  46:	48 83 ea 01          	sub    $0x1,%rdx
  4a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4e:	0f b6 d0             	movzbl %al,%edx
  51:	49 89 d2             	mov    %rdx,%r10
  54:	41 bb 00 00 00 00    	mov    $0x0,%r11d
  5a:	0f b6 d0             	movzbl %al,%edx
  5d:	49 89 d0             	mov    %rdx,%r8
  60:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  66:	0f b6 c0             	movzbl %al,%eax
  69:	ba 10 00 00 00       	mov    $0x10,%edx
  6e:	48 83 ea 01          	sub    $0x1,%rdx
  72:	48 01 d0             	add    %rdx,%rax
  75:	be 10 00 00 00       	mov    $0x10,%esi
  7a:	ba 00 00 00 00       	mov    $0x0,%edx
  7f:	48 f7 f6             	div    %rsi
  82:	48 6b c0 10          	imul   $0x10,%rax,%rax
  86:	48 89 c1             	mov    %rax,%rcx
  89:	48 81 e1 00 f0 ff ff 	and    $0xfffffffffffff000,%rcx
  90:	48 89 e2             	mov    %rsp,%rdx
  93:	48 29 ca             	sub    %rcx,%rdx
  96:	48 39 d4             	cmp    %rdx,%rsp
  99:	74 12                	je     ad <AutoDriver::SPIXfer(unsigned char)+0xad>
  9b:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
  a2:	48 83 8c 24 f8 0f 00 	orq    $0x0,0xff8(%rsp)
  a9:	00 00 
  ab:	eb e9                	jmp    96 <AutoDriver::SPIXfer(unsigned char)+0x96>
  ad:	48 89 c2             	mov    %rax,%rdx
  b0:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  b6:	48 29 d4             	sub    %rdx,%rsp
  b9:	48 89 c2             	mov    %rax,%rdx
  bc:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  c2:	48 85 d2             	test   %rdx,%rdx
  c5:	74 10                	je     d7 <AutoDriver::SPIXfer(unsigned char)+0xd7>
  c7:	25 ff 0f 00 00       	and    $0xfff,%eax
  cc:	48 83 e8 08          	sub    $0x8,%rax
  d0:	48 01 e0             	add    %rsp,%rax
  d3:	48 83 08 00          	orq    $0x0,(%rax)
  d7:	48 89 e0             	mov    %rsp,%rax
  da:	48 83 c0 00          	add    $0x0,%rax
  de:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  e2:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  e9:	eb 0f                	jmp    fa <AutoDriver::SPIXfer(unsigned char)+0xfa>
  eb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  ef:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  f2:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
  f6:	83 45 d4 01          	addl   $0x1,-0x2c(%rbp)
  fa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  fe:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
 102:	0f b6 c0             	movzbl %al,%eax
 105:	48 98                	cltq   
 107:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 10e <AutoDriver::SPIXfer(unsigned char)+0x10e>
 10e:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
 112:	0f b6 c0             	movzbl %al,%eax
 115:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
 118:	72 d1                	jb     eb <AutoDriver::SPIXfer(unsigned char)+0xeb>
 11a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 11e:	0f b6 40 0f          	movzbl 0xf(%rax),%eax
 122:	0f b6 c0             	movzbl %al,%eax
 125:	0f b6 4d c4          	movzbl -0x3c(%rbp),%ecx
 129:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
 12d:	48 98                	cltq   
 12f:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
 132:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 136:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
 13a:	0f b6 c0             	movzbl %al,%eax
 13d:	89 c7                	mov    %eax,%edi
 13f:	e8 00 00 00 00       	call   144 <AutoDriver::SPIXfer(unsigned char)+0x144>
 144:	bf 80 84 1e 00       	mov    $0x1e8480,%edi
 149:	e8 00 00 00 00       	call   14e <AutoDriver::SPIXfer(unsigned char)+0x14e>
 14e:	bf 00 00 00 00       	mov    $0x0,%edi
 153:	e8 00 00 00 00       	call   158 <AutoDriver::SPIXfer(unsigned char)+0x158>
 158:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 15c:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
 160:	0f b6 c0             	movzbl %al,%eax
 163:	48 98                	cltq   
 165:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 16c <AutoDriver::SPIXfer(unsigned char)+0x16c>
 16c:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
 170:	0f b6 d0             	movzbl %al,%edx
 173:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 177:	89 d6                	mov    %edx,%esi
 179:	48 89 c7             	mov    %rax,%rdi
 17c:	e8 00 00 00 00       	call   181 <AutoDriver::SPIXfer(unsigned char)+0x181>
 181:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 185:	0f b6 40 0f          	movzbl 0xf(%rax),%eax
 189:	0f b6 c0             	movzbl %al,%eax
 18c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
 190:	48 98                	cltq   
 192:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
 196:	48 89 dc             	mov    %rbx,%rsp
 199:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 19d:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
 1a4:	00 00 
 1a6:	74 05                	je     1ad <AutoDriver::SPIXfer(unsigned char)+0x1ad>
 1a8:	e8 00 00 00 00       	call   1ad <AutoDriver::SPIXfer(unsigned char)+0x1ad>
 1ad:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 1b1:	c9                   	leave  
 1b2:	c3                   	ret    

Disassembly of section .text._ZN10AutoDriver12getNumBoardsEv:

0000000000000000 <AutoDriver::getNumBoards()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	66 c7 45 fa 00 00    	movw   $0x0,-0x6(%rbp)
   e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  15:	eb 19                	jmp    30 <AutoDriver::getNumBoards()+0x30>
  17:	8b 45 fc             	mov    -0x4(%rbp),%eax
  1a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 21 <AutoDriver::getNumBoards()+0x21>
  21:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
  25:	0f b6 c0             	movzbl %al,%eax
  28:	66 01 45 fa          	add    %ax,-0x6(%rbp)
  2c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  30:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  34:	76 e1                	jbe    17 <AutoDriver::getNumBoards()+0x17>
  36:	0f b7 45 fa          	movzwl -0x6(%rbp),%eax
  3a:	5d                   	pop    %rbp
  3b:	c3                   	ret    

Disassembly of section .text._ZN10AutoDriver12getNumBoardsEh:

0000000000000000 <AutoDriver::getNumBoards(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	89 f8                	mov    %edi,%eax
   a:	88 45 fc             	mov    %al,-0x4(%rbp)
   d:	80 7d fc 01          	cmpb   $0x1,-0x4(%rbp)
  11:	77 13                	ja     26 <AutoDriver::getNumBoards(unsigned char)+0x26>
  13:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  17:	48 98                	cltq   
  19:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 20 <AutoDriver::getNumBoards(unsigned char)+0x20>
  20:	0f b6 04 10          	movzbl (%rax,%rdx,1),%eax
  24:	eb 05                	jmp    2b <AutoDriver::getNumBoards(unsigned char)+0x2b>
  26:	b8 00 00 00 00       	mov    $0x0,%eax
  2b:	5d                   	pop    %rbp
  2c:	c3                   	ret    

Disassembly of section .text._ZN10AutoDriver11IsConnectedEv:

0000000000000000 <AutoDriver::IsConnected()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 18 00 00 00       	mov    $0x18,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <AutoDriver::IsConnected()+0x21>
  21:	48 3d 88 2e 00 00    	cmp    $0x2e88,%rax
  27:	0f 94 c0             	sete   %al
  2a:	84 c0                	test   %al,%al
  2c:	74 07                	je     35 <AutoDriver::IsConnected()+0x35>
  2e:	b8 01 00 00 00       	mov    $0x1,%eax
  33:	eb 05                	jmp    3a <AutoDriver::IsConnected()+0x3a>
  35:	b8 00 00 00 00       	mov    $0x0,%eax
  3a:	c9                   	leave  
  3b:	c3                   	ret    

autodriverprint.o:     file format elf64-x86-64


Disassembly of section .text._ZN10AutoDriver5PrintEv:

0000000000000000 <AutoDriver::Print()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	41 55                	push   %r13
   a:	41 54                	push   %r12
   c:	53                   	push   %rbx
   d:	48 83 ec 28          	sub    $0x28,%rsp
  11:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  19:	8b 40 08             	mov    0x8(%rax),%eax
  1c:	89 c6                	mov    %eax,%esi
  1e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 25 <AutoDriver::Print()+0x25>
  25:	48 89 c7             	mov    %rax,%rdi
  28:	b8 00 00 00 00       	mov    $0x0,%eax
  2d:	e8 00 00 00 00       	call   32 <AutoDriver::Print()+0x32>
  32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  36:	0f b6 40 0e          	movzbl 0xe(%rax),%eax
  3a:	3c ff                	cmp    $0xff,%al
  3c:	75 09                	jne    47 <AutoDriver::Print()+0x47>
  3e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 45 <AutoDriver::Print()+0x45>
  45:	eb 07                	jmp    4e <AutoDriver::Print()+0x4e>
  47:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 4e <AutoDriver::Print()+0x4e>
  4e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  52:	0f b6 52 0e          	movzbl 0xe(%rdx),%edx
  56:	0f b6 fa             	movzbl %dl,%edi
  59:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  5d:	0f b6 52 0d          	movzbl 0xd(%rdx),%edx
  61:	0f b6 ca             	movzbl %dl,%ecx
  64:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  68:	0f b6 52 0c          	movzbl 0xc(%rdx),%edx
  6c:	0f b6 d2             	movzbl %dl,%edx
  6f:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  73:	0f b6 76 0f          	movzbl 0xf(%rsi),%esi
  77:	40 0f b6 f6          	movzbl %sil,%esi
  7b:	49 89 c1             	mov    %rax,%r9
  7e:	41 89 f8             	mov    %edi,%r8d
  81:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 88 <AutoDriver::Print()+0x88>
  88:	48 89 c7             	mov    %rax,%rdi
  8b:	b8 00 00 00 00       	mov    $0x0,%eax
  90:	e8 00 00 00 00       	call   95 <AutoDriver::Print()+0x95>
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 89 c7             	mov    %rax,%rdi
  9c:	e8 00 00 00 00       	call   a1 <AutoDriver::Print()+0xa1>
  a1:	66 0f ef e4          	pxor   %xmm4,%xmm4
  a5:	f3 0f 5a e0          	cvtss2sd %xmm0,%xmm4
  a9:	f2 0f 11 65 d0       	movsd  %xmm4,-0x30(%rbp)
  ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b2:	48 89 c7             	mov    %rax,%rdi
  b5:	e8 00 00 00 00       	call   ba <AutoDriver::Print()+0xba>
  ba:	66 0f ef ed          	pxor   %xmm5,%xmm5
  be:	f3 0f 5a e8          	cvtss2sd %xmm0,%xmm5
  c2:	f2 0f 11 6d c8       	movsd  %xmm5,-0x38(%rbp)
  c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  cb:	48 89 c7             	mov    %rax,%rdi
  ce:	e8 00 00 00 00       	call   d3 <AutoDriver::Print()+0xd3>
  d3:	66 0f ef f6          	pxor   %xmm6,%xmm6
  d7:	f3 0f 5a f0          	cvtss2sd %xmm0,%xmm6
  db:	f2 0f 11 75 c0       	movsd  %xmm6,-0x40(%rbp)
  e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  e4:	48 89 c7             	mov    %rax,%rdi
  e7:	e8 00 00 00 00       	call   ec <AutoDriver::Print()+0xec>
  ec:	66 0f ef ff          	pxor   %xmm7,%xmm7
  f0:	f3 0f 5a f8          	cvtss2sd %xmm0,%xmm7
  f4:	66 48 0f 7e f8       	movq   %xmm7,%rax
  f9:	f2 0f 10 5d d0       	movsd  -0x30(%rbp),%xmm3
  fe:	f2 0f 10 55 c8       	movsd  -0x38(%rbp),%xmm2
 103:	f2 0f 10 4d c0       	movsd  -0x40(%rbp),%xmm1
 108:	66 48 0f 6e c0       	movq   %rax,%xmm0
 10d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 114 <AutoDriver::Print()+0x114>
 114:	48 89 c7             	mov    %rax,%rdi
 117:	b8 04 00 00 00       	mov    $0x4,%eax
 11c:	e8 00 00 00 00       	call   121 <AutoDriver::Print()+0x121>
 121:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 125:	48 89 c7             	mov    %rax,%rdi
 128:	e8 00 00 00 00       	call   12d <AutoDriver::Print()+0x12d>
 12d:	44 0f b6 e8          	movzbl %al,%r13d
 131:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 135:	48 89 c7             	mov    %rax,%rdi
 138:	e8 00 00 00 00       	call   13d <AutoDriver::Print()+0x13d>
 13d:	44 0f b6 e0          	movzbl %al,%r12d
 141:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 145:	48 89 c7             	mov    %rax,%rdi
 148:	e8 00 00 00 00       	call   14d <AutoDriver::Print()+0x14d>
 14d:	0f b6 d8             	movzbl %al,%ebx
 150:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 154:	48 89 c7             	mov    %rax,%rdi
 157:	e8 00 00 00 00       	call   15c <AutoDriver::Print()+0x15c>
 15c:	0f b6 c0             	movzbl %al,%eax
 15f:	45 89 e8             	mov    %r13d,%r8d
 162:	44 89 e1             	mov    %r12d,%ecx
 165:	89 da                	mov    %ebx,%edx
 167:	89 c6                	mov    %eax,%esi
 169:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 170 <AutoDriver::Print()+0x170>
 170:	48 89 c7             	mov    %rax,%rdi
 173:	b8 00 00 00 00       	mov    $0x0,%eax
 178:	e8 00 00 00 00       	call   17d <AutoDriver::Print()+0x17d>
 17d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 181:	48 89 c7             	mov    %rax,%rdi
 184:	e8 00 00 00 00       	call   189 <AutoDriver::Print()+0x189>
 189:	89 c3                	mov    %eax,%ebx
 18b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18f:	48 89 c7             	mov    %rax,%rdi
 192:	e8 00 00 00 00       	call   197 <AutoDriver::Print()+0x197>
 197:	0f b6 c0             	movzbl %al,%eax
 19a:	ba 01 00 00 00       	mov    $0x1,%edx
 19f:	89 c1                	mov    %eax,%ecx
 1a1:	d3 e2                	shl    %cl,%edx
 1a3:	89 d0                	mov    %edx,%eax
 1a5:	89 da                	mov    %ebx,%edx
 1a7:	89 c6                	mov    %eax,%esi
 1a9:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1b0 <AutoDriver::Print()+0x1b0>
 1b0:	48 89 c7             	mov    %rax,%rdi
 1b3:	b8 00 00 00 00       	mov    $0x0,%eax
 1b8:	e8 00 00 00 00       	call   1bd <AutoDriver::Print()+0x1bd>
 1bd:	90                   	nop
 1be:	48 83 c4 28          	add    $0x28,%rsp
 1c2:	5b                   	pop    %rbx
 1c3:	41 5c                	pop    %r12
 1c5:	41 5d                	pop    %r13
 1c7:	5d                   	pop    %rbp
 1c8:	c3                   	ret    

l6470commands.o:     file format elf64-x86-64


Disassembly of section .text._ZN5L64708setParamE20TL6470ParamRegistersm:

0000000000000000 <L6470::setParam(TL6470ParamRegisters, unsigned long)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 8b 00             	mov    (%rax),%rax
  1e:	48 83 c0 18          	add    $0x18,%rax
  22:	48 8b 08             	mov    (%rax),%rcx
  25:	8b 45 f4             	mov    -0xc(%rbp),%eax
  28:	0f b6 d0             	movzbl %al,%edx
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	89 d6                	mov    %edx,%esi
  31:	48 89 c7             	mov    %rax,%rdi
  34:	ff d1                	call   *%rcx
  36:	8b 45 f4             	mov    -0xc(%rbp),%eax
  39:	0f b6 c8             	movzbl %al,%ecx
  3c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44:	89 ce                	mov    %ecx,%esi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	call   4e <L6470::setParam(TL6470ParamRegisters, unsigned long)+0x4e>
  4e:	90                   	nop
  4f:	c9                   	leave  
  50:	c3                   	ret    

Disassembly of section .text._ZN5L64708getParamE20TL6470ParamRegisters:

0000000000000000 <L6470::getParam(TL6470ParamRegisters)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 83 c0 18          	add    $0x18,%rax
  1e:	48 8b 08             	mov    (%rax),%rcx
  21:	8b 45 f4             	mov    -0xc(%rbp),%eax
  24:	83 c8 20             	or     $0x20,%eax
  27:	0f b6 d0             	movzbl %al,%edx
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	ff d1                	call   *%rcx
  35:	8b 45 f4             	mov    -0xc(%rbp),%eax
  38:	0f b6 c8             	movzbl %al,%ecx
  3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3f:	ba 00 00 00 00       	mov    $0x0,%edx
  44:	89 ce                	mov    %ecx,%esi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	call   4e <L6470::getParam(TL6470ParamRegisters)+0x4e>
  4e:	c9                   	leave  
  4f:	c3                   	ret    

Disassembly of section .text._ZN5L64706getPosEv:

0000000000000000 <L6470::getPos()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	be 01 00 00 00       	mov    $0x1,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getPos()+0x21>
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	25 00 00 20 00       	and    $0x200000,%eax
  2e:	48 85 c0             	test   %rax,%rax
  31:	74 09                	je     3c <L6470::getPos()+0x3c>
  33:	b8 00 00 c0 ff       	mov    $0xffc00000,%eax
  38:	48 09 45 f8          	or     %rax,-0x8(%rbp)
  3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40:	c9                   	leave  
  41:	c3                   	ret    

Disassembly of section .text._ZN5L64707getMarkEv:

0000000000000000 <L6470::getMark()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	be 03 00 00 00       	mov    $0x3,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getMark()+0x21>
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	25 00 00 20 00       	and    $0x200000,%eax
  2e:	48 85 c0             	test   %rax,%rax
  31:	74 09                	je     3c <L6470::getMark()+0x3c>
  33:	b8 00 00 c0 ff       	mov    $0xffc00000,%eax
  38:	48 09 45 f8          	or     %rax,-0x8(%rbp)
  3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40:	c9                   	leave  
  41:	c3                   	ret    

Disassembly of section .text._ZN5L64703runE15TL6470Directionf:

0000000000000000 <L6470::run(TL6470Direction, float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  13:	f3 0f 11 45 d0       	movss  %xmm0,-0x30(%rbp)
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  25:	31 c0                	xor    %eax,%eax
  27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2b:	48 8b 00             	mov    (%rax),%rax
  2e:	48 83 c0 18          	add    $0x18,%rax
  32:	48 8b 08             	mov    (%rax),%rcx
  35:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  38:	83 c8 50             	or     $0x50,%eax
  3b:	0f b6 d0             	movzbl %al,%edx
  3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  42:	89 d6                	mov    %edx,%esi
  44:	48 89 c7             	mov    %rax,%rdi
  47:	ff d1                	call   *%rcx
  49:	8b 55 d0             	mov    -0x30(%rbp),%edx
  4c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  50:	66 0f 6e c2          	movd   %edx,%xmm0
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	call   5c <L6470::run(TL6470Direction, float)+0x5c>
  5c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  64:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  6a:	76 08                	jbe    74 <L6470::run(TL6470Direction, float)+0x74>
  6c:	48 c7 45 e8 ff ff 0f 	movq   $0xfffff,-0x18(%rbp)
  73:	00 
  74:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  78:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  7c:	c6 45 e7 02          	movb   $0x2,-0x19(%rbp)
  80:	eb 35                	jmp    b7 <L6470::run(TL6470Direction, float)+0xb7>
  82:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  86:	48 8b 00             	mov    (%rax),%rax
  89:	48 83 c0 18          	add    $0x18,%rax
  8d:	48 8b 08             	mov    (%rax),%rcx
  90:	48 0f be 55 e7       	movsbq -0x19(%rbp),%rdx
  95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  99:	48 01 d0             	add    %rdx,%rax
  9c:	0f b6 00             	movzbl (%rax),%eax
  9f:	0f b6 d0             	movzbl %al,%edx
  a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a6:	89 d6                	mov    %edx,%esi
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	ff d1                	call   *%rcx
  ad:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  b1:	83 e8 01             	sub    $0x1,%eax
  b4:	88 45 e7             	mov    %al,-0x19(%rbp)
  b7:	80 7d e7 00          	cmpb   $0x0,-0x19(%rbp)
  bb:	79 c5                	jns    82 <L6470::run(TL6470Direction, float)+0x82>
  bd:	90                   	nop
  be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c2:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  c9:	00 00 
  cb:	74 05                	je     d2 <L6470::run(TL6470Direction, float)+0xd2>
  cd:	e8 00 00 00 00       	call   d2 <L6470::run(TL6470Direction, float)+0xd2>
  d2:	c9                   	leave  
  d3:	c3                   	ret    

Disassembly of section .text._ZN5L64709stepClockE15TL6470Direction:

0000000000000000 <L6470::stepClock(TL6470Direction)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 8b 00             	mov    (%rax),%rax
  1a:	48 83 c0 18          	add    $0x18,%rax
  1e:	48 8b 08             	mov    (%rax),%rcx
  21:	8b 45 f4             	mov    -0xc(%rbp),%eax
  24:	83 c8 58             	or     $0x58,%eax
  27:	0f b6 d0             	movzbl %al,%edx
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	89 d6                	mov    %edx,%esi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	ff d1                	call   *%rcx
  35:	90                   	nop
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN5L64704moveE15TL6470Directionm:

0000000000000000 <L6470::move(TL6470Direction, unsigned long)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1b:	48 8b 00             	mov    (%rax),%rax
  1e:	48 83 c0 18          	add    $0x18,%rax
  22:	48 8b 08             	mov    (%rax),%rcx
  25:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  28:	83 c8 40             	or     $0x40,%eax
  2b:	0f b6 d0             	movzbl %al,%edx
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	89 d6                	mov    %edx,%esi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	ff d1                	call   *%rcx
  39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3d:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
  43:	76 08                	jbe    4d <L6470::move(TL6470Direction, unsigned long)+0x4d>
  45:	48 c7 45 d8 ff ff 3f 	movq   $0x3fffff,-0x28(%rbp)
  4c:	00 
  4d:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  51:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  55:	c6 45 f7 02          	movb   $0x2,-0x9(%rbp)
  59:	eb 35                	jmp    90 <L6470::move(TL6470Direction, unsigned long)+0x90>
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	48 83 c0 18          	add    $0x18,%rax
  66:	48 8b 08             	mov    (%rax),%rcx
  69:	48 0f be 55 f7       	movsbq -0x9(%rbp),%rdx
  6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  72:	48 01 d0             	add    %rdx,%rax
  75:	0f b6 00             	movzbl (%rax),%eax
  78:	0f b6 d0             	movzbl %al,%edx
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	89 d6                	mov    %edx,%esi
  81:	48 89 c7             	mov    %rax,%rdi
  84:	ff d1                	call   *%rcx
  86:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8a:	83 e8 01             	sub    $0x1,%eax
  8d:	88 45 f7             	mov    %al,-0x9(%rbp)
  90:	80 7d f7 00          	cmpb   $0x0,-0x9(%rbp)
  94:	79 c5                	jns    5b <L6470::move(TL6470Direction, unsigned long)+0x5b>
  96:	90                   	nop
  97:	90                   	nop
  98:	c9                   	leave  
  99:	c3                   	ret    

Disassembly of section .text._ZN5L64704goToEl:

0000000000000000 <L6470::goTo(long)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	48 83 c0 18          	add    $0x18,%rax
  1f:	48 8b 10             	mov    (%rax),%rdx
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	be 60 00 00 00       	mov    $0x60,%esi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	ff d2                	call   *%rdx
  30:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  34:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
  3a:	7e 08                	jle    44 <L6470::goTo(long)+0x44>
  3c:	48 c7 45 e0 ff ff 3f 	movq   $0x3fffff,-0x20(%rbp)
  43:	00 
  44:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  48:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4c:	c6 45 f7 02          	movb   $0x2,-0x9(%rbp)
  50:	eb 35                	jmp    87 <L6470::goTo(long)+0x87>
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	48 8b 00             	mov    (%rax),%rax
  59:	48 83 c0 18          	add    $0x18,%rax
  5d:	48 8b 08             	mov    (%rax),%rcx
  60:	48 0f be 55 f7       	movsbq -0x9(%rbp),%rdx
  65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  69:	48 01 d0             	add    %rdx,%rax
  6c:	0f b6 00             	movzbl (%rax),%eax
  6f:	0f b6 d0             	movzbl %al,%edx
  72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  76:	89 d6                	mov    %edx,%esi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	ff d1                	call   *%rcx
  7d:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  81:	83 e8 01             	sub    $0x1,%eax
  84:	88 45 f7             	mov    %al,-0x9(%rbp)
  87:	80 7d f7 00          	cmpb   $0x0,-0x9(%rbp)
  8b:	79 c5                	jns    52 <L6470::goTo(long)+0x52>
  8d:	90                   	nop
  8e:	90                   	nop
  8f:	c9                   	leave  
  90:	c3                   	ret    

Disassembly of section .text._ZN5L64707goToDirE15TL6470Directionl:

0000000000000000 <L6470::goToDir(TL6470Direction, long)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1b:	48 8b 00             	mov    (%rax),%rax
  1e:	48 83 c0 18          	add    $0x18,%rax
  22:	48 8b 08             	mov    (%rax),%rcx
  25:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  28:	83 c8 68             	or     $0x68,%eax
  2b:	0f b6 d0             	movzbl %al,%edx
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	89 d6                	mov    %edx,%esi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	ff d1                	call   *%rcx
  39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3d:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
  43:	7e 08                	jle    4d <L6470::goToDir(TL6470Direction, long)+0x4d>
  45:	48 c7 45 d8 ff ff 3f 	movq   $0x3fffff,-0x28(%rbp)
  4c:	00 
  4d:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
  51:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  55:	c6 45 f7 02          	movb   $0x2,-0x9(%rbp)
  59:	eb 35                	jmp    90 <L6470::goToDir(TL6470Direction, long)+0x90>
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 00             	mov    (%rax),%rax
  62:	48 83 c0 18          	add    $0x18,%rax
  66:	48 8b 08             	mov    (%rax),%rcx
  69:	48 0f be 55 f7       	movsbq -0x9(%rbp),%rdx
  6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  72:	48 01 d0             	add    %rdx,%rax
  75:	0f b6 00             	movzbl (%rax),%eax
  78:	0f b6 d0             	movzbl %al,%edx
  7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7f:	89 d6                	mov    %edx,%esi
  81:	48 89 c7             	mov    %rax,%rdi
  84:	ff d1                	call   *%rcx
  86:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8a:	83 e8 01             	sub    $0x1,%eax
  8d:	88 45 f7             	mov    %al,-0x9(%rbp)
  90:	80 7d f7 00          	cmpb   $0x0,-0x9(%rbp)
  94:	79 c5                	jns    5b <L6470::goToDir(TL6470Direction, long)+0x5b>
  96:	90                   	nop
  97:	90                   	nop
  98:	c9                   	leave  
  99:	c3                   	ret    

Disassembly of section .text._ZN5L64707goUntilE12TL6470Action15TL6470Directionf:

0000000000000000 <L6470::goUntil(TL6470Action, TL6470Direction, float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  13:	89 55 d0             	mov    %edx,-0x30(%rbp)
  16:	f3 0f 11 45 cc       	movss  %xmm0,-0x34(%rbp)
  1b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  22:	00 00 
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  28:	31 c0                	xor    %eax,%eax
  2a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2e:	48 8b 00             	mov    (%rax),%rax
  31:	48 83 c0 18          	add    $0x18,%rax
  35:	48 8b 08             	mov    (%rax),%rcx
  38:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  3b:	89 c2                	mov    %eax,%edx
  3d:	8b 45 d0             	mov    -0x30(%rbp),%eax
  40:	09 d0                	or     %edx,%eax
  42:	83 c8 82             	or     $0xffffff82,%eax
  45:	0f b6 d0             	movzbl %al,%edx
  48:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4c:	89 d6                	mov    %edx,%esi
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	ff d1                	call   *%rcx
  53:	8b 55 cc             	mov    -0x34(%rbp),%edx
  56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5a:	66 0f 6e c2          	movd   %edx,%xmm0
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	call   66 <L6470::goUntil(TL6470Action, TL6470Direction, float)+0x66>
  66:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6e:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
  74:	76 08                	jbe    7e <L6470::goUntil(TL6470Action, TL6470Direction, float)+0x7e>
  76:	48 c7 45 e8 ff ff 3f 	movq   $0x3fffff,-0x18(%rbp)
  7d:	00 
  7e:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  82:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  86:	c6 45 e7 02          	movb   $0x2,-0x19(%rbp)
  8a:	eb 35                	jmp    c1 <L6470::goUntil(TL6470Action, TL6470Direction, float)+0xc1>
  8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  90:	48 8b 00             	mov    (%rax),%rax
  93:	48 83 c0 18          	add    $0x18,%rax
  97:	48 8b 08             	mov    (%rax),%rcx
  9a:	48 0f be 55 e7       	movsbq -0x19(%rbp),%rdx
  9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  a3:	48 01 d0             	add    %rdx,%rax
  a6:	0f b6 00             	movzbl (%rax),%eax
  a9:	0f b6 d0             	movzbl %al,%edx
  ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b0:	89 d6                	mov    %edx,%esi
  b2:	48 89 c7             	mov    %rax,%rdi
  b5:	ff d1                	call   *%rcx
  b7:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  bb:	83 e8 01             	sub    $0x1,%eax
  be:	88 45 e7             	mov    %al,-0x19(%rbp)
  c1:	80 7d e7 00          	cmpb   $0x0,-0x19(%rbp)
  c5:	79 c5                	jns    8c <L6470::goUntil(TL6470Action, TL6470Direction, float)+0x8c>
  c7:	90                   	nop
  c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  cc:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  d3:	00 00 
  d5:	74 05                	je     dc <L6470::goUntil(TL6470Action, TL6470Direction, float)+0xdc>
  d7:	e8 00 00 00 00       	call   dc <L6470::goUntil(TL6470Action, TL6470Direction, float)+0xdc>
  dc:	c9                   	leave  
  dd:	c3                   	ret    

Disassembly of section .text._ZN5L64709releaseSwE12TL6470Action15TL6470Direction:

0000000000000000 <L6470::releaseSw(TL6470Action, TL6470Direction)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	89 55 f0             	mov    %edx,-0x10(%rbp)
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	48 8b 00             	mov    (%rax),%rax
  1d:	48 83 c0 18          	add    $0x18,%rax
  21:	48 8b 08             	mov    (%rax),%rcx
  24:	8b 45 f4             	mov    -0xc(%rbp),%eax
  27:	89 c2                	mov    %eax,%edx
  29:	8b 45 f0             	mov    -0x10(%rbp),%eax
  2c:	09 d0                	or     %edx,%eax
  2e:	83 c8 92             	or     $0xffffff92,%eax
  31:	0f b6 d0             	movzbl %al,%edx
  34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  38:	89 d6                	mov    %edx,%esi
  3a:	48 89 c7             	mov    %rax,%rdi
  3d:	ff d1                	call   *%rcx
  3f:	90                   	nop
  40:	c9                   	leave  
  41:	c3                   	ret    

Disassembly of section .text._ZN5L64706goHomeEv:

0000000000000000 <L6470::goHome()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 83 c0 18          	add    $0x18,%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	be 70 00 00 00       	mov    $0x70,%esi
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	ff d2                	call   *%rdx
  2c:	90                   	nop
  2d:	c9                   	leave  
  2e:	c3                   	ret    

Disassembly of section .text._ZN5L64706goMarkEv:

0000000000000000 <L6470::goMark()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 83 c0 18          	add    $0x18,%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	be 78 00 00 00       	mov    $0x78,%esi
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	ff d2                	call   *%rdx
  2c:	90                   	nop
  2d:	c9                   	leave  
  2e:	c3                   	ret    

Disassembly of section .text._ZN5L64707setMarkEl:

0000000000000000 <L6470::setMark(long)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	be 03 00 00 00       	mov    $0x3,%esi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	call   29 <L6470::setMark(long)+0x29>
  29:	90                   	nop
  2a:	c9                   	leave  
  2b:	c3                   	ret    

Disassembly of section .text._ZN5L64706setPosEl:

0000000000000000 <L6470::setPos(long)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	be 01 00 00 00       	mov    $0x1,%esi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	call   29 <L6470::setPos(long)+0x29>
  29:	90                   	nop
  2a:	c9                   	leave  
  2b:	c3                   	ret    

Disassembly of section .text._ZN5L64708resetPosEv:

0000000000000000 <L6470::resetPos()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 83 c0 18          	add    $0x18,%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	be d8 00 00 00       	mov    $0xd8,%esi
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	ff d2                	call   *%rdx
  2c:	90                   	nop
  2d:	c9                   	leave  
  2e:	c3                   	ret    

Disassembly of section .text._ZN5L64708resetDevEv:

0000000000000000 <L6470::resetDev()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 83 c0 18          	add    $0x18,%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	be c0 00 00 00       	mov    $0xc0,%esi
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	ff d2                	call   *%rdx
  2c:	90                   	nop
  2d:	c9                   	leave  
  2e:	c3                   	ret    

Disassembly of section .text._ZN5L64708softStopEv:

0000000000000000 <L6470::softStop()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 83 c0 18          	add    $0x18,%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	be b0 00 00 00       	mov    $0xb0,%esi
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	ff d2                	call   *%rdx
  2c:	90                   	nop
  2d:	c9                   	leave  
  2e:	c3                   	ret    

Disassembly of section .text._ZN5L64708hardStopEv:

0000000000000000 <L6470::hardStop()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 83 c0 18          	add    $0x18,%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	be b8 00 00 00       	mov    $0xb8,%esi
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	ff d2                	call   *%rdx
  2c:	90                   	nop
  2d:	c9                   	leave  
  2e:	c3                   	ret    

Disassembly of section .text._ZN5L64707softHiZEv:

0000000000000000 <L6470::softHiZ()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 83 c0 18          	add    $0x18,%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	be a0 00 00 00       	mov    $0xa0,%esi
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	ff d2                	call   *%rdx
  2c:	90                   	nop
  2d:	c9                   	leave  
  2e:	c3                   	ret    

Disassembly of section .text._ZN5L64707hardHiZEv:

0000000000000000 <L6470::hardHiZ()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 83 c0 18          	add    $0x18,%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	be a8 00 00 00       	mov    $0xa8,%esi
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	ff d2                	call   *%rdx
  2c:	90                   	nop
  2d:	c9                   	leave  
  2e:	c3                   	ret    

Disassembly of section .text._ZN5L64709getStatusEv:

0000000000000000 <L6470::getStatus()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  27:	48 8d 45 dc          	lea    -0x24(%rbp),%rax
  2b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  2f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 83 c0 18          	add    $0x18,%rax
  3a:	48 8b 10             	mov    (%rax),%rdx
  3d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41:	be d0 00 00 00       	mov    $0xd0,%esi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	ff d2                	call   *%rdx
  4b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4f:	48 8b 00             	mov    (%rax),%rax
  52:	48 83 c0 18          	add    $0x18,%rax
  56:	48 8b 10             	mov    (%rax),%rdx
  59:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5d:	48 8d 58 01          	lea    0x1(%rax),%rbx
  61:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  65:	be 00 00 00 00       	mov    $0x0,%esi
  6a:	48 89 c7             	mov    %rax,%rdi
  6d:	ff d2                	call   *%rdx
  6f:	88 03                	mov    %al,(%rbx)
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	48 8b 00             	mov    (%rax),%rax
  78:	48 83 c0 18          	add    $0x18,%rax
  7c:	48 8b 10             	mov    (%rax),%rdx
  7f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  83:	be 00 00 00 00       	mov    $0x0,%esi
  88:	48 89 c7             	mov    %rax,%rdi
  8b:	ff d2                	call   *%rdx
  8d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  91:	88 02                	mov    %al,(%rdx)
  93:	8b 45 dc             	mov    -0x24(%rbp),%eax
  96:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  9a:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  a1:	00 00 
  a3:	74 05                	je     aa <L6470::getStatus()+0xaa>
  a5:	e8 00 00 00 00       	call   aa <L6470::getStatus()+0xaa>
  aa:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  ae:	c9                   	leave  
  af:	c3                   	ret    

l6470config.o:     file format elf64-x86-64


Disassembly of section .text._ZN5L647013configSyncPinEhh:

0000000000000000 <L6470::configSyncPin(unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	88 45 e0             	mov    %al,-0x20(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	be 16 00 00 00       	mov    $0x16,%esi
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	call   2d <L6470::configSyncPin(unsigned char, unsigned char)+0x2d>
  2d:	88 45 ff             	mov    %al,-0x1(%rbp)
  30:	80 65 ff 0f          	andb   $0xf,-0x1(%rbp)
  34:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  38:	83 e0 80             	and    $0xffffff80,%eax
  3b:	89 c2                	mov    %eax,%edx
  3d:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
  41:	83 e0 70             	and    $0x70,%eax
  44:	09 c2                	or     %eax,%edx
  46:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  4a:	09 d0                	or     %edx,%eax
  4c:	88 45 ff             	mov    %al,-0x1(%rbp)
  4f:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  57:	be 16 00 00 00       	mov    $0x16,%esi
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	call   64 <L6470::configSyncPin(unsigned char, unsigned char)+0x64>
  64:	90                   	nop
  65:	c9                   	leave  
  66:	c3                   	ret    

Disassembly of section .text._ZN5L647014configStepModeEh:

0000000000000000 <L6470::configStepMode(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	be 16 00 00 00       	mov    $0x16,%esi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	call   26 <L6470::configStepMode(unsigned char)+0x26>
  26:	88 45 ff             	mov    %al,-0x1(%rbp)
  29:	80 65 ff f8          	andb   $0xf8,-0x1(%rbp)
  2d:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  31:	83 e0 07             	and    $0x7,%eax
  34:	08 45 ff             	or     %al,-0x1(%rbp)
  37:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	be 16 00 00 00       	mov    $0x16,%esi
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	call   4c <L6470::configStepMode(unsigned char)+0x4c>
  4c:	90                   	nop
  4d:	c9                   	leave  
  4e:	c3                   	ret    

Disassembly of section .text._ZN5L647011getStepModeEv:

0000000000000000 <L6470::getStepMode()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 16 00 00 00       	mov    $0x16,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getStepMode()+0x21>
  21:	83 e0 07             	and    $0x7,%eax
  24:	c9                   	leave  
  25:	c3                   	ret    

Disassembly of section .text._ZN5L647011setMaxSpeedEf:

0000000000000000 <L6470::setMaxSpeed(float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	f3 0f 11 45 e4       	movss  %xmm0,-0x1c(%rbp)
  15:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	66 0f 6e c2          	movd   %edx,%xmm0
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <L6470::setMaxSpeed(float)+0x28>
  28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	be 07 00 00 00       	mov    $0x7,%esi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	call   41 <L6470::setMaxSpeed(float)+0x41>
  41:	90                   	nop
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN5L647011getMaxSpeedEv:

0000000000000000 <L6470::getMaxSpeed()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 07 00 00 00       	mov    $0x7,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getMaxSpeed()+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	call   33 <L6470::getMaxSpeed()+0x33>
  33:	c9                   	leave  
  34:	c3                   	ret    

Disassembly of section .text._ZN5L647011setMinSpeedEf:

0000000000000000 <L6470::setMinSpeed(float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	f3 0f 11 45 e4       	movss  %xmm0,-0x1c(%rbp)
  15:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	66 0f 6e c2          	movd   %edx,%xmm0
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <L6470::setMinSpeed(float)+0x28>
  28:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  30:	be 08 00 00 00       	mov    $0x8,%esi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	call   3d <L6470::setMinSpeed(float)+0x3d>
  3d:	25 00 10 00 00       	and    $0x1000,%eax
  42:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  46:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4a:	48 0b 45 f8          	or     -0x8(%rbp),%rax
  4e:	48 89 c2             	mov    %rax,%rdx
  51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  55:	be 08 00 00 00       	mov    $0x8,%esi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	call   62 <L6470::setMinSpeed(float)+0x62>
  62:	90                   	nop
  63:	c9                   	leave  
  64:	c3                   	ret    

Disassembly of section .text._ZN5L647011getMinSpeedEv:

0000000000000000 <L6470::getMinSpeed()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 08 00 00 00       	mov    $0x8,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getMinSpeed()+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	call   33 <L6470::getMinSpeed()+0x33>
  33:	c9                   	leave  
  34:	c3                   	ret    

Disassembly of section .text._ZN5L647012setFullSpeedEf:

0000000000000000 <L6470::setFullSpeed(float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	f3 0f 11 45 e4       	movss  %xmm0,-0x1c(%rbp)
  15:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	66 0f 6e c2          	movd   %edx,%xmm0
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <L6470::setFullSpeed(float)+0x28>
  28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	be 15 00 00 00       	mov    $0x15,%esi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	call   41 <L6470::setFullSpeed(float)+0x41>
  41:	90                   	nop
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN5L647012getFullSpeedEv:

0000000000000000 <L6470::getFullSpeed()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 15 00 00 00       	mov    $0x15,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getFullSpeed()+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	call   33 <L6470::getFullSpeed()+0x33>
  33:	c9                   	leave  
  34:	c3                   	ret    

Disassembly of section .text._ZN5L64706setAccEf:

0000000000000000 <L6470::setAcc(float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	f3 0f 11 45 e4       	movss  %xmm0,-0x1c(%rbp)
  15:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	66 0f 6e c2          	movd   %edx,%xmm0
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <L6470::setAcc(float)+0x28>
  28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	be 05 00 00 00       	mov    $0x5,%esi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	call   41 <L6470::setAcc(float)+0x41>
  41:	90                   	nop
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN5L64706getAccEv:

0000000000000000 <L6470::getAcc()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 05 00 00 00       	mov    $0x5,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getAcc()+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	call   33 <L6470::getAcc()+0x33>
  33:	c9                   	leave  
  34:	c3                   	ret    

Disassembly of section .text._ZN5L64706setDecEf:

0000000000000000 <L6470::setDec(float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	f3 0f 11 45 e4       	movss  %xmm0,-0x1c(%rbp)
  15:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	66 0f 6e c2          	movd   %edx,%xmm0
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <L6470::setDec(float)+0x28>
  28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  34:	be 06 00 00 00       	mov    $0x6,%esi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	call   41 <L6470::setDec(float)+0x41>
  41:	90                   	nop
  42:	c9                   	leave  
  43:	c3                   	ret    

Disassembly of section .text._ZN5L64706getDecEv:

0000000000000000 <L6470::getDec()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 06 00 00 00       	mov    $0x6,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getDec()+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	call   33 <L6470::getDec()+0x33>
  33:	c9                   	leave  
  34:	c3                   	ret    

Disassembly of section .text._ZN5L647014setOCThresholdEh:

0000000000000000 <L6470::setOCThreshold(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  19:	83 e0 0f             	and    $0xf,%eax
  1c:	48 89 c2             	mov    %rax,%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	be 13 00 00 00       	mov    $0x13,%esi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	call   30 <L6470::setOCThreshold(unsigned char)+0x30>
  30:	90                   	nop
  31:	c9                   	leave  
  32:	c3                   	ret    

Disassembly of section .text._ZN5L647014getOCThresholdEv:

0000000000000000 <L6470::getOCThreshold()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 13 00 00 00       	mov    $0x13,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getOCThreshold()+0x21>
  21:	83 e0 0f             	and    $0xf,%eax
  24:	c9                   	leave  
  25:	c3                   	ret    

Disassembly of section .text._ZN5L647010setPWMFreqEii:

0000000000000000 <L6470::setPWMFreq(int, int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1a:	be 18 00 00 00       	mov    $0x18,%esi
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	call   27 <L6470::setPWMFreq(int, int)+0x27>
  27:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2b:	48 81 65 f8 ff 1f ff 	andq   $0xffffffffffff1fff,-0x8(%rbp)
  32:	ff 
  33:	48 81 65 f8 ff e3 ff 	andq   $0xffffffffffffe3ff,-0x8(%rbp)
  3a:	ff 
  3b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  3e:	25 00 e0 00 00       	and    $0xe000,%eax
  43:	89 c2                	mov    %eax,%edx
  45:	8b 45 e0             	mov    -0x20(%rbp),%eax
  48:	25 00 1c 00 00       	and    $0x1c00,%eax
  4d:	09 d0                	or     %edx,%eax
  4f:	48 98                	cltq   
  51:	48 09 45 f8          	or     %rax,-0x8(%rbp)
  55:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5d:	be 18 00 00 00       	mov    $0x18,%esi
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	call   6a <L6470::setPWMFreq(int, int)+0x6a>
  6a:	90                   	nop
  6b:	c9                   	leave  
  6c:	c3                   	ret    

Disassembly of section .text._ZN5L647017getPWMFreqDivisorEv:

0000000000000000 <L6470::getPWMFreqDivisor()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 18 00 00 00       	mov    $0x18,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getPWMFreqDivisor()+0x21>
  21:	25 00 e0 00 00       	and    $0xe000,%eax
  26:	c9                   	leave  
  27:	c3                   	ret    

Disassembly of section .text._ZN5L647020getPWMFreqMultiplierEv:

0000000000000000 <L6470::getPWMFreqMultiplier()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 18 00 00 00       	mov    $0x18,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getPWMFreqMultiplier()+0x21>
  21:	25 00 1c 00 00       	and    $0x1c00,%eax
  26:	c9                   	leave  
  27:	c3                   	ret    

Disassembly of section .text._ZN5L647011setSlewRateEi:

0000000000000000 <L6470::setSlewRate(int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  17:	be 18 00 00 00       	mov    $0x18,%esi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	call   24 <L6470::setSlewRate(int)+0x24>
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  28:	48 81 65 f8 ff fc ff 	andq   $0xfffffffffffffcff,-0x8(%rbp)
  2f:	ff 
  30:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  33:	48 98                	cltq   
  35:	25 00 03 00 00       	and    $0x300,%eax
  3a:	48 09 45 f8          	or     %rax,-0x8(%rbp)
  3e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  46:	be 18 00 00 00       	mov    $0x18,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	call   53 <L6470::setSlewRate(int)+0x53>
  53:	90                   	nop
  54:	c9                   	leave  
  55:	c3                   	ret    

Disassembly of section .text._ZN5L647011getSlewRateEv:

0000000000000000 <L6470::getSlewRate()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 18 00 00 00       	mov    $0x18,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getSlewRate()+0x21>
  21:	25 00 03 00 00       	and    $0x300,%eax
  26:	c9                   	leave  
  27:	c3                   	ret    

Disassembly of section .text._ZN5L647013setOCShutdownEi:

0000000000000000 <L6470::setOCShutdown(int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  17:	be 18 00 00 00       	mov    $0x18,%esi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	call   24 <L6470::setOCShutdown(int)+0x24>
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  28:	48 81 65 f8 7f ff ff 	andq   $0xffffffffffffff7f,-0x8(%rbp)
  2f:	ff 
  30:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  33:	48 98                	cltq   
  35:	25 80 00 00 00       	and    $0x80,%eax
  3a:	48 09 45 f8          	or     %rax,-0x8(%rbp)
  3e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  46:	be 18 00 00 00       	mov    $0x18,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	call   53 <L6470::setOCShutdown(int)+0x53>
  53:	90                   	nop
  54:	c9                   	leave  
  55:	c3                   	ret    

Disassembly of section .text._ZN5L647013getOCShutdownEv:

0000000000000000 <L6470::getOCShutdown()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 18 00 00 00       	mov    $0x18,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getOCShutdown()+0x21>
  21:	25 80 00 00 00       	and    $0x80,%eax
  26:	c9                   	leave  
  27:	c3                   	ret    

Disassembly of section .text._ZN5L647014setVoltageCompEi:

0000000000000000 <L6470::setVoltageComp(int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  17:	be 18 00 00 00       	mov    $0x18,%esi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	call   24 <L6470::setVoltageComp(int)+0x24>
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  28:	48 83 65 f8 df       	andq   $0xffffffffffffffdf,-0x8(%rbp)
  2d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  30:	48 98                	cltq   
  32:	83 e0 20             	and    $0x20,%eax
  35:	48 09 45 f8          	or     %rax,-0x8(%rbp)
  39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	be 18 00 00 00       	mov    $0x18,%esi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	call   4e <L6470::setVoltageComp(int)+0x4e>
  4e:	90                   	nop
  4f:	c9                   	leave  
  50:	c3                   	ret    

Disassembly of section .text._ZN5L647014getVoltageCompEv:

0000000000000000 <L6470::getVoltageComp()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 18 00 00 00       	mov    $0x18,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getVoltageComp()+0x21>
  21:	83 e0 20             	and    $0x20,%eax
  24:	c9                   	leave  
  25:	c3                   	ret    

Disassembly of section .text._ZN5L647013setSwitchModeEi:

0000000000000000 <L6470::setSwitchMode(int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  17:	be 18 00 00 00       	mov    $0x18,%esi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	call   24 <L6470::setSwitchMode(int)+0x24>
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  28:	48 83 65 f8 ef       	andq   $0xffffffffffffffef,-0x8(%rbp)
  2d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  30:	48 98                	cltq   
  32:	83 e0 10             	and    $0x10,%eax
  35:	48 09 45 f8          	or     %rax,-0x8(%rbp)
  39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	be 18 00 00 00       	mov    $0x18,%esi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	call   4e <L6470::setSwitchMode(int)+0x4e>
  4e:	90                   	nop
  4f:	c9                   	leave  
  50:	c3                   	ret    

Disassembly of section .text._ZN5L647013getSwitchModeEv:

0000000000000000 <L6470::getSwitchMode()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 18 00 00 00       	mov    $0x18,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getSwitchMode()+0x21>
  21:	83 e0 10             	and    $0x10,%eax
  24:	c9                   	leave  
  25:	c3                   	ret    

Disassembly of section .text._ZN5L647010setOscModeEi:

0000000000000000 <L6470::setOscMode(int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  17:	be 18 00 00 00       	mov    $0x18,%esi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	call   24 <L6470::setOscMode(int)+0x24>
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  28:	48 83 65 f8 f0       	andq   $0xfffffffffffffff0,-0x8(%rbp)
  2d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  30:	48 98                	cltq   
  32:	83 e0 0f             	and    $0xf,%eax
  35:	48 09 45 f8          	or     %rax,-0x8(%rbp)
  39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	be 18 00 00 00       	mov    $0x18,%esi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	call   4e <L6470::setOscMode(int)+0x4e>
  4e:	90                   	nop
  4f:	c9                   	leave  
  50:	c3                   	ret    

Disassembly of section .text._ZN5L647010getOscModeEv:

0000000000000000 <L6470::getOscMode()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 18 00 00 00       	mov    $0x18,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getOscMode()+0x21>
  21:	83 e0 0f             	and    $0xf,%eax
  24:	c9                   	leave  
  25:	c3                   	ret    

Disassembly of section .text._ZN5L647010setAccKVALEh:

0000000000000000 <L6470::setAccKVAL(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	be 0b 00 00 00       	mov    $0xb,%esi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <L6470::setAccKVAL(unsigned char)+0x2a>
  2a:	90                   	nop
  2b:	c9                   	leave  
  2c:	c3                   	ret    

Disassembly of section .text._ZN5L647010getAccKVALEv:

0000000000000000 <L6470::getAccKVAL()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 0b 00 00 00       	mov    $0xb,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getAccKVAL()+0x21>
  21:	c9                   	leave  
  22:	c3                   	ret    

Disassembly of section .text._ZN5L647010setDecKVALEh:

0000000000000000 <L6470::setDecKVAL(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	be 0c 00 00 00       	mov    $0xc,%esi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <L6470::setDecKVAL(unsigned char)+0x2a>
  2a:	90                   	nop
  2b:	c9                   	leave  
  2c:	c3                   	ret    

Disassembly of section .text._ZN5L647010getDecKVALEv:

0000000000000000 <L6470::getDecKVAL()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 0c 00 00 00       	mov    $0xc,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getDecKVAL()+0x21>
  21:	c9                   	leave  
  22:	c3                   	ret    

Disassembly of section .text._ZN5L647010setRunKVALEh:

0000000000000000 <L6470::setRunKVAL(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	be 0a 00 00 00       	mov    $0xa,%esi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <L6470::setRunKVAL(unsigned char)+0x2a>
  2a:	90                   	nop
  2b:	c9                   	leave  
  2c:	c3                   	ret    

Disassembly of section .text._ZN5L647010getRunKVALEv:

0000000000000000 <L6470::getRunKVAL()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 0a 00 00 00       	mov    $0xa,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getRunKVAL()+0x21>
  21:	c9                   	leave  
  22:	c3                   	ret    

Disassembly of section .text._ZN5L647011setHoldKVALEh:

0000000000000000 <L6470::setHoldKVAL(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	be 09 00 00 00       	mov    $0x9,%esi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <L6470::setHoldKVAL(unsigned char)+0x2a>
  2a:	90                   	nop
  2b:	c9                   	leave  
  2c:	c3                   	ret    

Disassembly of section .text._ZN5L647011getHoldKVALEv:

0000000000000000 <L6470::getHoldKVAL()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 09 00 00 00       	mov    $0x9,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getHoldKVAL()+0x21>
  21:	c9                   	leave  
  22:	c3                   	ret    

Disassembly of section .text._ZN5L647011setLoSpdOptEb:

0000000000000000 <L6470::setLoSpdOpt(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	be 08 00 00 00       	mov    $0x8,%esi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	call   26 <L6470::setLoSpdOpt(bool)+0x26>
  26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  2a:	80 7d e4 00          	cmpb   $0x0,-0x1c(%rbp)
  2e:	74 0a                	je     3a <L6470::setLoSpdOpt(bool)+0x3a>
  30:	48 81 4d f8 00 10 00 	orq    $0x1000,-0x8(%rbp)
  37:	00 
  38:	eb 08                	jmp    42 <L6470::setLoSpdOpt(bool)+0x42>
  3a:	48 81 65 f8 ff ef ff 	andq   $0xffffffffffffefff,-0x8(%rbp)
  41:	ff 
  42:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4a:	be 08 00 00 00       	mov    $0x8,%esi
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	call   57 <L6470::setLoSpdOpt(bool)+0x57>
  57:	90                   	nop
  58:	c9                   	leave  
  59:	c3                   	ret    

Disassembly of section .text._ZN5L647011getLoSpdOptEv:

0000000000000000 <L6470::getLoSpdOpt()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	be 08 00 00 00       	mov    $0x8,%esi
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	call   21 <L6470::getLoSpdOpt()+0x21>
  21:	25 00 10 00 00       	and    $0x1000,%eax
  26:	48 85 c0             	test   %rax,%rax
  29:	0f 95 c0             	setne  %al
  2c:	c9                   	leave  
  2d:	c3                   	ret    

l6470.o:     file format elf64-x86-64


Disassembly of section .text._ZN5L6470D2Ev:

0000000000000000 <L6470::~L6470()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13 <L6470::~L6470()+0x13>
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	ret    

Disassembly of section .text._ZN5L6470D0Ev:

0000000000000000 <L6470::~L6470()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <L6470::~L6470()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <L6470::~L6470()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN5L647013setMicroStepsEj:

0000000000000000 <L6470::setMicroSteps(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	call   1f <L6470::setMicroSteps(unsigned int)+0x1f>
  1f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  26:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  2d:	eb 0d                	jmp    3c <L6470::setMicroSteps(unsigned int)+0x3c>
  2f:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  33:	74 0f                	je     44 <L6470::setMicroSteps(unsigned int)+0x44>
  35:	d1 6d e4             	shrl   -0x1c(%rbp)
  38:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  3c:	83 7d fc 07          	cmpl   $0x7,-0x4(%rbp)
  40:	76 ed                	jbe    2f <L6470::setMicroSteps(unsigned int)+0x2f>
  42:	eb 01                	jmp    45 <L6470::setMicroSteps(unsigned int)+0x45>
  44:	90                   	nop
  45:	8b 45 fc             	mov    -0x4(%rbp),%eax
  48:	83 c8 10             	or     $0x10,%eax
  4b:	89 c2                	mov    %eax,%edx
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  51:	be 16 00 00 00       	mov    $0x16,%esi
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	call   5e <L6470::setMicroSteps(unsigned int)+0x5e>
  5e:	90                   	nop
  5f:	c9                   	leave  
  60:	c3                   	ret    

l6470dump.o:     file format elf64-x86-64


Disassembly of section .text._ZN5L64704DumpEv:

0000000000000000 <L6470::Dump()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

l6470support.o:     file format elf64-x86-64


Disassembly of section .text._ZL4ceilf:

0000000000000000 <ceil(float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	f3 0f 11 45 ec       	movss  %xmm0,-0x14(%rbp)
   d:	f3 0f 10 45 ec       	movss  -0x14(%rbp),%xmm0
  12:	f3 0f 2c c0          	cvttss2si %xmm0,%eax
  16:	89 45 fc             	mov    %eax,-0x4(%rbp)
  19:	66 0f ef c0          	pxor   %xmm0,%xmm0
  1d:	f3 0f 2a 45 fc       	cvtsi2ssl -0x4(%rbp),%xmm0
  22:	0f 2e 45 ec          	ucomiss -0x14(%rbp),%xmm0
  26:	7a 0d                	jp     35 <ceil(float)+0x35>
  28:	0f 2e 45 ec          	ucomiss -0x14(%rbp),%xmm0
  2c:	75 07                	jne    35 <ceil(float)+0x35>
  2e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  31:	48 98                	cltq   
  33:	eb 08                	jmp    3d <ceil(float)+0x3d>
  35:	8b 45 fc             	mov    -0x4(%rbp),%eax
  38:	83 c0 01             	add    $0x1,%eax
  3b:	48 98                	cltq   
  3d:	5d                   	pop    %rbp
  3e:	c3                   	ret    

Disassembly of section .text._ZN5L64707accCalcEf:

0000000000000000 <L6470::accCalc(float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	f3 0f 11 45 e4       	movss  %xmm0,-0x1c(%rbp)
  11:	f3 0f 10 4d e4       	movss  -0x1c(%rbp),%xmm1
  16:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 1e <L6470::accCalc(float)+0x1e>
  1d:	00 
  1e:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  22:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  27:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  2c:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
  31:	48 3d ff 0f 00 00    	cmp    $0xfff,%rax
  37:	76 07                	jbe    40 <L6470::accCalc(float)+0x40>
  39:	b8 ff 0f 00 00       	mov    $0xfff,%eax
  3e:	eb 0a                	jmp    4a <L6470::accCalc(float)+0x4a>
  40:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  45:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
  4a:	5d                   	pop    %rbp
  4b:	c3                   	ret    

Disassembly of section .text._ZN5L64708accParseEm:

0000000000000000 <L6470::accParse(unsigned long)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	25 ff 0f 00 00       	and    $0xfff,%eax
  19:	48 85 c0             	test   %rax,%rax
  1c:	78 0b                	js     29 <L6470::accParse(unsigned long)+0x29>
  1e:	66 0f ef c0          	pxor   %xmm0,%xmm0
  22:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  27:	eb 19                	jmp    42 <L6470::accParse(unsigned long)+0x42>
  29:	48 89 c2             	mov    %rax,%rdx
  2c:	48 d1 ea             	shr    %rdx
  2f:	83 e0 01             	and    $0x1,%eax
  32:	48 09 c2             	or     %rax,%rdx
  35:	66 0f ef c0          	pxor   %xmm0,%xmm0
  39:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  3e:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  42:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 4a <L6470::accParse(unsigned long)+0x4a>
  49:	00 
  4a:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  4e:	5d                   	pop    %rbp
  4f:	c3                   	ret    

Disassembly of section .text._ZN5L64707decCalcEf:

0000000000000000 <L6470::decCalc(float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	f3 0f 11 45 e4       	movss  %xmm0,-0x1c(%rbp)
  11:	f3 0f 10 4d e4       	movss  -0x1c(%rbp),%xmm1
  16:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 1e <L6470::decCalc(float)+0x1e>
  1d:	00 
  1e:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  22:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  27:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  2c:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
  31:	48 3d ff 0f 00 00    	cmp    $0xfff,%rax
  37:	76 07                	jbe    40 <L6470::decCalc(float)+0x40>
  39:	b8 ff 0f 00 00       	mov    $0xfff,%eax
  3e:	eb 0a                	jmp    4a <L6470::decCalc(float)+0x4a>
  40:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  45:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
  4a:	5d                   	pop    %rbp
  4b:	c3                   	ret    

Disassembly of section .text._ZN5L64708decParseEm:

0000000000000000 <L6470::decParse(unsigned long)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	25 ff 0f 00 00       	and    $0xfff,%eax
  19:	48 85 c0             	test   %rax,%rax
  1c:	78 0b                	js     29 <L6470::decParse(unsigned long)+0x29>
  1e:	66 0f ef c0          	pxor   %xmm0,%xmm0
  22:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  27:	eb 19                	jmp    42 <L6470::decParse(unsigned long)+0x42>
  29:	48 89 c2             	mov    %rax,%rdx
  2c:	48 d1 ea             	shr    %rdx
  2f:	83 e0 01             	and    $0x1,%eax
  32:	48 09 c2             	or     %rax,%rdx
  35:	66 0f ef c0          	pxor   %xmm0,%xmm0
  39:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  3e:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  42:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 4a <L6470::decParse(unsigned long)+0x4a>
  49:	00 
  4a:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  4e:	5d                   	pop    %rbp
  4f:	c3                   	ret    

Disassembly of section .text._ZN5L647010maxSpdCalcEf:

0000000000000000 <L6470::maxSpdCalc(float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	f3 0f 11 45 e4       	movss  %xmm0,-0x1c(%rbp)
  15:	f3 0f 10 4d e4       	movss  -0x1c(%rbp),%xmm1
  1a:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 22 <L6470::maxSpdCalc(float)+0x22>
  21:	00 
  22:	f3 0f 59 c8          	mulss  %xmm0,%xmm1
  26:	66 0f 7e c8          	movd   %xmm1,%eax
  2a:	66 0f 6e c0          	movd   %eax,%xmm0
  2e:	e8 00 00 00 00       	call   33 <L6470::maxSpdCalc(float)+0x33>
  33:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  37:	48 81 7d f8 ff 03 00 	cmpq   $0x3ff,-0x8(%rbp)
  3e:	00 
  3f:	76 07                	jbe    48 <L6470::maxSpdCalc(float)+0x48>
  41:	b8 ff 03 00 00       	mov    $0x3ff,%eax
  46:	eb 04                	jmp    4c <L6470::maxSpdCalc(float)+0x4c>
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	c9                   	leave  
  4d:	c3                   	ret    

Disassembly of section .text._ZN5L647011maxSpdParseEm:

0000000000000000 <L6470::maxSpdParse(unsigned long)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	25 ff 03 00 00       	and    $0x3ff,%eax
  19:	48 85 c0             	test   %rax,%rax
  1c:	78 0b                	js     29 <L6470::maxSpdParse(unsigned long)+0x29>
  1e:	66 0f ef c0          	pxor   %xmm0,%xmm0
  22:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  27:	eb 19                	jmp    42 <L6470::maxSpdParse(unsigned long)+0x42>
  29:	48 89 c2             	mov    %rax,%rdx
  2c:	48 d1 ea             	shr    %rdx
  2f:	83 e0 01             	and    $0x1,%eax
  32:	48 09 c2             	or     %rax,%rdx
  35:	66 0f ef c0          	pxor   %xmm0,%xmm0
  39:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  3e:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  42:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 4a <L6470::maxSpdParse(unsigned long)+0x4a>
  49:	00 
  4a:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  4e:	5d                   	pop    %rbp
  4f:	c3                   	ret    

Disassembly of section .text._ZN5L647010minSpdCalcEf:

0000000000000000 <L6470::minSpdCalc(float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	f3 0f 11 45 e4       	movss  %xmm0,-0x1c(%rbp)
  11:	f3 0f 10 45 e4       	movss  -0x1c(%rbp),%xmm0
  16:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 1e <L6470::minSpdCalc(float)+0x1e>
  1d:	00 
  1e:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  22:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  27:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  2c:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
  31:	48 3d ff 0f 00 00    	cmp    $0xfff,%rax
  37:	76 07                	jbe    40 <L6470::minSpdCalc(float)+0x40>
  39:	b8 ff 0f 00 00       	mov    $0xfff,%eax
  3e:	eb 0a                	jmp    4a <L6470::minSpdCalc(float)+0x4a>
  40:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  45:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
  4a:	5d                   	pop    %rbp
  4b:	c3                   	ret    

Disassembly of section .text._ZN5L647011minSpdParseEm:

0000000000000000 <L6470::minSpdParse(unsigned long)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	25 ff 0f 00 00       	and    $0xfff,%eax
  19:	48 85 c0             	test   %rax,%rax
  1c:	78 0b                	js     29 <L6470::minSpdParse(unsigned long)+0x29>
  1e:	66 0f ef c0          	pxor   %xmm0,%xmm0
  22:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  27:	eb 19                	jmp    42 <L6470::minSpdParse(unsigned long)+0x42>
  29:	48 89 c2             	mov    %rax,%rdx
  2c:	48 d1 ea             	shr    %rdx
  2f:	83 e0 01             	and    $0x1,%eax
  32:	48 09 c2             	or     %rax,%rdx
  35:	66 0f ef c0          	pxor   %xmm0,%xmm0
  39:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  3e:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  42:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 4a <L6470::minSpdParse(unsigned long)+0x4a>
  49:	00 
  4a:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  4e:	5d                   	pop    %rbp
  4f:	c3                   	ret    

Disassembly of section .text._ZN5L64706FSCalcEf:

0000000000000000 <L6470::FSCalc(float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	f3 0f 11 45 e4       	movss  %xmm0,-0x1c(%rbp)
  11:	f3 0f 10 4d e4       	movss  -0x1c(%rbp),%xmm1
  16:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 1e <L6470::FSCalc(float)+0x1e>
  1d:	00 
  1e:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  22:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 2a <L6470::FSCalc(float)+0x2a>
  29:	00 
  2a:	f3 0f 5c c1          	subss  %xmm1,%xmm0
  2e:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  33:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  38:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
  3d:	48 3d ff 03 00 00    	cmp    $0x3ff,%rax
  43:	76 07                	jbe    4c <L6470::FSCalc(float)+0x4c>
  45:	b8 ff 03 00 00       	mov    $0x3ff,%eax
  4a:	eb 0a                	jmp    56 <L6470::FSCalc(float)+0x56>
  4c:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  51:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
  56:	5d                   	pop    %rbp
  57:	c3                   	ret    

Disassembly of section .text._ZN5L64707FSParseEm:

0000000000000000 <L6470::FSParse(unsigned long)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	25 ff 03 00 00       	and    $0x3ff,%eax
  19:	48 85 c0             	test   %rax,%rax
  1c:	78 0b                	js     29 <L6470::FSParse(unsigned long)+0x29>
  1e:	66 0f ef c0          	pxor   %xmm0,%xmm0
  22:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  27:	eb 19                	jmp    42 <L6470::FSParse(unsigned long)+0x42>
  29:	48 89 c2             	mov    %rax,%rdx
  2c:	48 d1 ea             	shr    %rdx
  2f:	83 e0 01             	and    $0x1,%eax
  32:	48 09 c2             	or     %rax,%rdx
  35:	66 0f ef c0          	pxor   %xmm0,%xmm0
  39:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  3e:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  42:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 4a <L6470::FSParse(unsigned long)+0x4a>
  49:	00 
  4a:	f3 0f 58 c1          	addss  %xmm1,%xmm0
  4e:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 56 <L6470::FSParse(unsigned long)+0x56>
  55:	00 
  56:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  5a:	5d                   	pop    %rbp
  5b:	c3                   	ret    

Disassembly of section .text._ZN5L647010intSpdCalcEf:

0000000000000000 <L6470::intSpdCalc(float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	f3 0f 11 45 e4       	movss  %xmm0,-0x1c(%rbp)
  11:	f3 0f 10 4d e4       	movss  -0x1c(%rbp),%xmm1
  16:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 1e <L6470::intSpdCalc(float)+0x1e>
  1d:	00 
  1e:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  22:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  27:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  2c:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
  31:	48 3d ff 3f 00 00    	cmp    $0x3fff,%rax
  37:	76 07                	jbe    40 <L6470::intSpdCalc(float)+0x40>
  39:	b8 ff 3f 00 00       	mov    $0x3fff,%eax
  3e:	eb 0a                	jmp    4a <L6470::intSpdCalc(float)+0x4a>
  40:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  45:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
  4a:	5d                   	pop    %rbp
  4b:	c3                   	ret    

Disassembly of section .text._ZN5L647011intSpdParseEm:

0000000000000000 <L6470::intSpdParse(unsigned long)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	25 ff 3f 00 00       	and    $0x3fff,%eax
  19:	48 85 c0             	test   %rax,%rax
  1c:	78 0b                	js     29 <L6470::intSpdParse(unsigned long)+0x29>
  1e:	66 0f ef c0          	pxor   %xmm0,%xmm0
  22:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  27:	eb 19                	jmp    42 <L6470::intSpdParse(unsigned long)+0x42>
  29:	48 89 c2             	mov    %rax,%rdx
  2c:	48 d1 ea             	shr    %rdx
  2f:	83 e0 01             	and    $0x1,%eax
  32:	48 09 c2             	or     %rax,%rdx
  35:	66 0f ef c0          	pxor   %xmm0,%xmm0
  39:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  3e:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  42:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 4a <L6470::intSpdParse(unsigned long)+0x4a>
  49:	00 
  4a:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  4e:	5d                   	pop    %rbp
  4f:	c3                   	ret    

Disassembly of section .text._ZN5L64707spdCalcEf:

0000000000000000 <L6470::spdCalc(float)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	f3 0f 11 45 e4       	movss  %xmm0,-0x1c(%rbp)
  11:	f3 0f 10 4d e4       	movss  -0x1c(%rbp),%xmm1
  16:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 1e <L6470::spdCalc(float)+0x1e>
  1d:	00 
  1e:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  22:	0f 2f 05 00 00 00 00 	comiss 0x0(%rip),%xmm0        # 29 <L6470::spdCalc(float)+0x29>
  29:	73 0b                	jae    36 <L6470::spdCalc(float)+0x36>
  2b:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
  30:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  34:	eb 23                	jmp    59 <L6470::spdCalc(float)+0x59>
  36:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 3e <L6470::spdCalc(float)+0x3e>
  3d:	00 
  3e:	f3 0f 5c c1          	subss  %xmm1,%xmm0
  42:	f3 48 0f 2c c0       	cvttss2si %xmm0,%rax
  47:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  4b:	48 b8 00 00 00 00 00 	movabs $0x8000000000000000,%rax
  52:	00 00 80 
  55:	48 31 45 f8          	xor    %rax,-0x8(%rbp)
  59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  61:	48 81 7d f8 ff ff 0f 	cmpq   $0xfffff,-0x8(%rbp)
  68:	00 
  69:	76 07                	jbe    72 <L6470::spdCalc(float)+0x72>
  6b:	b8 ff ff 0f 00       	mov    $0xfffff,%eax
  70:	eb 04                	jmp    76 <L6470::spdCalc(float)+0x76>
  72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  76:	5d                   	pop    %rbp
  77:	c3                   	ret    

Disassembly of section .text._ZN5L64708spdParseEm:

0000000000000000 <L6470::spdParse(unsigned long)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  14:	25 ff ff 0f 00       	and    $0xfffff,%eax
  19:	48 85 c0             	test   %rax,%rax
  1c:	78 0b                	js     29 <L6470::spdParse(unsigned long)+0x29>
  1e:	66 0f ef c0          	pxor   %xmm0,%xmm0
  22:	f3 48 0f 2a c0       	cvtsi2ss %rax,%xmm0
  27:	eb 19                	jmp    42 <L6470::spdParse(unsigned long)+0x42>
  29:	48 89 c2             	mov    %rax,%rdx
  2c:	48 d1 ea             	shr    %rdx
  2f:	83 e0 01             	and    $0x1,%eax
  32:	48 09 c2             	or     %rax,%rdx
  35:	66 0f ef c0          	pxor   %xmm0,%xmm0
  39:	f3 48 0f 2a c2       	cvtsi2ss %rdx,%xmm0
  3e:	f3 0f 58 c0          	addss  %xmm0,%xmm0
  42:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 4a <L6470::spdParse(unsigned long)+0x4a>
  49:	00 
  4a:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  4e:	5d                   	pop    %rbp
  4f:	c3                   	ret    

Disassembly of section .text._ZN5L647012paramHandlerEhm:

0000000000000000 <L6470::paramHandler(unsigned char, unsigned long)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  16:	88 45 e4             	mov    %al,-0x1c(%rbp)
  19:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  20:	00 
  21:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  25:	83 f8 19             	cmp    $0x19,%eax
  28:	0f 87 5b 03 00 00    	ja     389 <L6470::paramHandler(unsigned char, unsigned long)+0x389>
  2e:	89 c0                	mov    %eax,%eax
  30:	48 8d 14 85 00 00 00 	lea    0x0(,%rax,4),%rdx
  37:	00 
  38:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 3f <L6470::paramHandler(unsigned char, unsigned long)+0x3f>
  3f:	8b 04 02             	mov    (%rdx,%rax,1),%eax
  42:	48 98                	cltq   
  44:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 4b <L6470::paramHandler(unsigned char, unsigned long)+0x4b>
  4b:	48 01 d0             	add    %rdx,%rax
  4e:	3e ff e0             	notrack jmp *%rax
  51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  59:	ba 16 00 00 00       	mov    $0x16,%edx
  5e:	48 89 ce             	mov    %rcx,%rsi
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	call   69 <L6470::paramHandler(unsigned char, unsigned long)+0x69>
  69:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  6d:	e9 38 03 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
  72:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7a:	ba 09 00 00 00       	mov    $0x9,%edx
  7f:	48 89 ce             	mov    %rcx,%rsi
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	call   8a <L6470::paramHandler(unsigned char, unsigned long)+0x8a>
  8a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8e:	e9 17 03 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
  93:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  9b:	ba 16 00 00 00       	mov    $0x16,%edx
  a0:	48 89 ce             	mov    %rcx,%rsi
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	call   ab <L6470::paramHandler(unsigned char, unsigned long)+0xab>
  ab:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  af:	e9 f6 02 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
  b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  b8:	ba 14 00 00 00       	mov    $0x14,%edx
  bd:	be 00 00 00 00       	mov    $0x0,%esi
  c2:	48 89 c7             	mov    %rax,%rdi
  c5:	e8 00 00 00 00       	call   ca <L6470::paramHandler(unsigned char, unsigned long)+0xca>
  ca:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  ce:	e9 d7 02 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
  d3:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  db:	ba 0c 00 00 00       	mov    $0xc,%edx
  e0:	48 89 ce             	mov    %rcx,%rsi
  e3:	48 89 c7             	mov    %rax,%rdi
  e6:	e8 00 00 00 00       	call   eb <L6470::paramHandler(unsigned char, unsigned long)+0xeb>
  eb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  ef:	e9 b6 02 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
  f4:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fc:	ba 0c 00 00 00       	mov    $0xc,%edx
 101:	48 89 ce             	mov    %rcx,%rsi
 104:	48 89 c7             	mov    %rax,%rdi
 107:	e8 00 00 00 00       	call   10c <L6470::paramHandler(unsigned char, unsigned long)+0x10c>
 10c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 110:	e9 95 02 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 115:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 119:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 11d:	ba 0a 00 00 00       	mov    $0xa,%edx
 122:	48 89 ce             	mov    %rcx,%rsi
 125:	48 89 c7             	mov    %rax,%rdi
 128:	e8 00 00 00 00       	call   12d <L6470::paramHandler(unsigned char, unsigned long)+0x12d>
 12d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 131:	e9 74 02 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 136:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 13a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 13e:	ba 0d 00 00 00       	mov    $0xd,%edx
 143:	48 89 ce             	mov    %rcx,%rsi
 146:	48 89 c7             	mov    %rax,%rdi
 149:	e8 00 00 00 00       	call   14e <L6470::paramHandler(unsigned char, unsigned long)+0x14e>
 14e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 152:	e9 53 02 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 157:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 15b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 15f:	ba 0a 00 00 00       	mov    $0xa,%edx
 164:	48 89 ce             	mov    %rcx,%rsi
 167:	48 89 c7             	mov    %rax,%rdi
 16a:	e8 00 00 00 00       	call   16f <L6470::paramHandler(unsigned char, unsigned long)+0x16f>
 16f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 173:	e9 32 02 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 178:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 17c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 180:	ba 08 00 00 00       	mov    $0x8,%edx
 185:	48 89 ce             	mov    %rcx,%rsi
 188:	48 89 c7             	mov    %rax,%rdi
 18b:	e8 00 00 00 00       	call   190 <L6470::paramHandler(unsigned char, unsigned long)+0x190>
 190:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 194:	e9 11 02 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 199:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 19d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1a1:	ba 08 00 00 00       	mov    $0x8,%edx
 1a6:	48 89 ce             	mov    %rcx,%rsi
 1a9:	48 89 c7             	mov    %rax,%rdi
 1ac:	e8 00 00 00 00       	call   1b1 <L6470::paramHandler(unsigned char, unsigned long)+0x1b1>
 1b1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 1b5:	e9 f0 01 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 1ba:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 1be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1c2:	ba 08 00 00 00       	mov    $0x8,%edx
 1c7:	48 89 ce             	mov    %rcx,%rsi
 1ca:	48 89 c7             	mov    %rax,%rdi
 1cd:	e8 00 00 00 00       	call   1d2 <L6470::paramHandler(unsigned char, unsigned long)+0x1d2>
 1d2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 1d6:	e9 cf 01 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 1db:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 1df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1e3:	ba 08 00 00 00       	mov    $0x8,%edx
 1e8:	48 89 ce             	mov    %rcx,%rsi
 1eb:	48 89 c7             	mov    %rax,%rdi
 1ee:	e8 00 00 00 00       	call   1f3 <L6470::paramHandler(unsigned char, unsigned long)+0x1f3>
 1f3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 1f7:	e9 ae 01 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 1fc:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 200:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 204:	ba 0e 00 00 00       	mov    $0xe,%edx
 209:	48 89 ce             	mov    %rcx,%rsi
 20c:	48 89 c7             	mov    %rax,%rdi
 20f:	e8 00 00 00 00       	call   214 <L6470::paramHandler(unsigned char, unsigned long)+0x214>
 214:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 218:	e9 8d 01 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 21d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 221:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 225:	ba 08 00 00 00       	mov    $0x8,%edx
 22a:	48 89 ce             	mov    %rcx,%rsi
 22d:	48 89 c7             	mov    %rax,%rdi
 230:	e8 00 00 00 00       	call   235 <L6470::paramHandler(unsigned char, unsigned long)+0x235>
 235:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 239:	e9 6c 01 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 23e:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 242:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 246:	ba 08 00 00 00       	mov    $0x8,%edx
 24b:	48 89 ce             	mov    %rcx,%rsi
 24e:	48 89 c7             	mov    %rax,%rdi
 251:	e8 00 00 00 00       	call   256 <L6470::paramHandler(unsigned char, unsigned long)+0x256>
 256:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 25a:	e9 4b 01 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 25f:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 263:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 267:	ba 08 00 00 00       	mov    $0x8,%edx
 26c:	48 89 ce             	mov    %rcx,%rsi
 26f:	48 89 c7             	mov    %rax,%rdi
 272:	e8 00 00 00 00       	call   277 <L6470::paramHandler(unsigned char, unsigned long)+0x277>
 277:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 27b:	e9 2a 01 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 280:	48 83 65 d8 0f       	andq   $0xf,-0x28(%rbp)
 285:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 289:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 28d:	ba 08 00 00 00       	mov    $0x8,%edx
 292:	48 89 ce             	mov    %rcx,%rsi
 295:	48 89 c7             	mov    %rax,%rdi
 298:	e8 00 00 00 00       	call   29d <L6470::paramHandler(unsigned char, unsigned long)+0x29d>
 29d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 2a1:	e9 04 01 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 2a6:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 2aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 2ae:	ba 08 00 00 00       	mov    $0x8,%edx
 2b3:	48 89 ce             	mov    %rcx,%rsi
 2b6:	48 89 c7             	mov    %rax,%rdi
 2b9:	e8 00 00 00 00       	call   2be <L6470::paramHandler(unsigned char, unsigned long)+0x2be>
 2be:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 2c2:	e9 e3 00 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 2c7:	48 83 65 d8 0f       	andq   $0xf,-0x28(%rbp)
 2cc:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 2d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 2d4:	ba 08 00 00 00       	mov    $0x8,%edx
 2d9:	48 89 ce             	mov    %rcx,%rsi
 2dc:	48 89 c7             	mov    %rax,%rdi
 2df:	e8 00 00 00 00       	call   2e4 <L6470::paramHandler(unsigned char, unsigned long)+0x2e4>
 2e4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 2e8:	e9 bd 00 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 2ed:	48 83 65 d8 7f       	andq   $0x7f,-0x28(%rbp)
 2f2:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 2f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 2fa:	ba 08 00 00 00       	mov    $0x8,%edx
 2ff:	48 89 ce             	mov    %rcx,%rsi
 302:	48 89 c7             	mov    %rax,%rdi
 305:	e8 00 00 00 00       	call   30a <L6470::paramHandler(unsigned char, unsigned long)+0x30a>
 30a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 30e:	e9 97 00 00 00       	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 313:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 317:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 31b:	ba 08 00 00 00       	mov    $0x8,%edx
 320:	48 89 ce             	mov    %rcx,%rsi
 323:	48 89 c7             	mov    %rax,%rdi
 326:	e8 00 00 00 00       	call   32b <L6470::paramHandler(unsigned char, unsigned long)+0x32b>
 32b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 32f:	eb 79                	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 331:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 335:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 339:	ba 08 00 00 00       	mov    $0x8,%edx
 33e:	48 89 ce             	mov    %rcx,%rsi
 341:	48 89 c7             	mov    %rax,%rdi
 344:	e8 00 00 00 00       	call   349 <L6470::paramHandler(unsigned char, unsigned long)+0x349>
 349:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 34d:	eb 5b                	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 34f:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 353:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 357:	ba 10 00 00 00       	mov    $0x10,%edx
 35c:	48 89 ce             	mov    %rcx,%rsi
 35f:	48 89 c7             	mov    %rax,%rdi
 362:	e8 00 00 00 00       	call   367 <L6470::paramHandler(unsigned char, unsigned long)+0x367>
 367:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 36b:	eb 3d                	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 36d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 371:	ba 10 00 00 00       	mov    $0x10,%edx
 376:	be 00 00 00 00       	mov    $0x0,%esi
 37b:	48 89 c7             	mov    %rax,%rdi
 37e:	e8 00 00 00 00       	call   383 <L6470::paramHandler(unsigned char, unsigned long)+0x383>
 383:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 387:	eb 21                	jmp    3aa <L6470::paramHandler(unsigned char, unsigned long)+0x3aa>
 389:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 38d:	48 8b 00             	mov    (%rax),%rax
 390:	48 83 c0 18          	add    $0x18,%rax
 394:	48 8b 08             	mov    (%rax),%rcx
 397:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 39b:	0f b6 d0             	movzbl %al,%edx
 39e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 3a2:	89 d6                	mov    %edx,%esi
 3a4:	48 89 c7             	mov    %rax,%rdi
 3a7:	ff d1                	call   *%rcx
 3a9:	90                   	nop
 3aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 3ae:	c9                   	leave  
 3af:	c3                   	ret    

Disassembly of section .text._ZN5L64709xferParamEmh:

0000000000000000 <L6470::xferParam(unsigned long, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  15:	89 d0                	mov    %edx,%eax
  17:	88 45 bc             	mov    %al,-0x44(%rbp)
  1a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  21:	00 00 
  23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  27:	31 c0                	xor    %eax,%eax
  29:	0f b6 45 bc          	movzbl -0x44(%rbp),%eax
  2d:	c0 e8 03             	shr    $0x3,%al
  30:	88 45 d3             	mov    %al,-0x2d(%rbp)
  33:	0f b6 45 bc          	movzbl -0x44(%rbp),%eax
  37:	83 e0 07             	and    $0x7,%eax
  3a:	85 c0                	test   %eax,%eax
  3c:	7e 0a                	jle    48 <L6470::xferParam(unsigned long, unsigned char)+0x48>
  3e:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  42:	83 c0 01             	add    $0x1,%eax
  45:	88 45 d3             	mov    %al,-0x2d(%rbp)
  48:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  50:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  57:	00 
  58:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  5f:	eb 42                	jmp    a3 <L6470::xferParam(unsigned long, unsigned char)+0xa3>
  61:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  65:	48 8b 00             	mov    (%rax),%rax
  68:	48 83 c0 18          	add    $0x18,%rax
  6c:	48 8b 08             	mov    (%rax),%rcx
  6f:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  73:	2b 45 d4             	sub    -0x2c(%rbp),%eax
  76:	83 e8 01             	sub    $0x1,%eax
  79:	48 98                	cltq   
  7b:	0f b6 44 05 d8       	movzbl -0x28(%rbp,%rax,1),%eax
  80:	0f b6 d0             	movzbl %al,%edx
  83:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  87:	2b 45 d4             	sub    -0x2c(%rbp),%eax
  8a:	8d 58 ff             	lea    -0x1(%rax),%ebx
  8d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  91:	89 d6                	mov    %edx,%esi
  93:	48 89 c7             	mov    %rax,%rdi
  96:	ff d1                	call   *%rcx
  98:	48 63 d3             	movslq %ebx,%rdx
  9b:	88 44 15 e0          	mov    %al,-0x20(%rbp,%rdx,1)
  9f:	83 45 d4 01          	addl   $0x1,-0x2c(%rbp)
  a3:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  a7:	39 45 d4             	cmp    %eax,-0x2c(%rbp)
  aa:	7c b5                	jl     61 <L6470::xferParam(unsigned long, unsigned char)+0x61>
  ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  b0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  b4:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  bb:	00 00 
  bd:	74 05                	je     c4 <L6470::xferParam(unsigned long, unsigned char)+0xc4>
  bf:	e8 00 00 00 00       	call   c4 <L6470::xferParam(unsigned long, unsigned char)+0xc4>
  c4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  c8:	c9                   	leave  
  c9:	c3                   	ret    

slushboard.o:     file format elf64-x86-64


Disassembly of section .text.gpio_fsel:

0000000000000000 <gpio_fsel>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 fa                	mov    %edi,%edx
   6:	89 f0                	mov    %esi,%eax
   8:	88 55 fc             	mov    %dl,-0x4(%rbp)
   b:	88 45 f8             	mov    %al,-0x8(%rbp)
   e:	90                   	nop
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text.gpio_set:

0000000000000000 <gpio_set>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.gpio_clr:

0000000000000000 <gpio_clr>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.udelay:

0000000000000000 <udelay>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	89 7d fc             	mov    %edi,-0x4(%rbp)
   b:	90                   	nop
   c:	5d                   	pop    %rbp
   d:	c3                   	ret    

Disassembly of section .text.spi_begin:

0000000000000000 <spi_begin>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	90                   	nop
   5:	5d                   	pop    %rbp
   6:	c3                   	ret    

Disassembly of section .text.spi_chipSelect:

0000000000000000 <spi_chipSelect>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.spi_setDataMode:

0000000000000000 <spi_setDataMode>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.spi_set_speed_hz:

0000000000000000 <spi_set_speed_hz>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text.i2c_begin:

0000000000000000 <i2c_begin>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	90                   	nop
   5:	5d                   	pop    %rbp
   6:	c3                   	ret    

Disassembly of section .text.i2c_set_baudrate:

0000000000000000 <i2c_set_baudrate>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text.i2c_set_address:

0000000000000000 <i2c_set_address>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.i2c_write:

0000000000000000 <i2c_write>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text.i2c_read:

0000000000000000 <i2c_read>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoardC2Ev:

0000000000000000 <SlushBoard::SlushBoard()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	be 00 00 00 00       	mov    $0x0,%esi
  15:	bf 03 00 00 00       	mov    $0x3,%edi
  1a:	e8 00 00 00 00       	call   1f <SlushBoard::SlushBoard()+0x1f>
  1f:	bf 03 00 00 00       	mov    $0x3,%edi
  24:	e8 00 00 00 00       	call   29 <SlushBoard::SlushBoard()+0x29>
  29:	be 00 00 00 00       	mov    $0x0,%esi
  2e:	bf 04 00 00 00       	mov    $0x4,%edi
  33:	e8 00 00 00 00       	call   38 <SlushBoard::SlushBoard()+0x38>
  38:	be 00 00 00 00       	mov    $0x0,%esi
  3d:	bf 05 00 00 00       	mov    $0x5,%edi
  42:	e8 00 00 00 00       	call   47 <SlushBoard::SlushBoard()+0x47>
  47:	be 00 00 00 00       	mov    $0x0,%esi
  4c:	bf 09 00 00 00       	mov    $0x9,%edi
  51:	e8 00 00 00 00       	call   56 <SlushBoard::SlushBoard()+0x56>
  56:	be 00 00 00 00       	mov    $0x0,%esi
  5b:	bf 02 00 00 00       	mov    $0x2,%edi
  60:	e8 00 00 00 00       	call   65 <SlushBoard::SlushBoard()+0x65>
  65:	bf 04 00 00 00       	mov    $0x4,%edi
  6a:	e8 00 00 00 00       	call   6f <SlushBoard::SlushBoard()+0x6f>
  6f:	bf 05 00 00 00       	mov    $0x5,%edi
  74:	e8 00 00 00 00       	call   79 <SlushBoard::SlushBoard()+0x79>
  79:	bf 09 00 00 00       	mov    $0x9,%edi
  7e:	e8 00 00 00 00       	call   83 <SlushBoard::SlushBoard()+0x83>
  83:	bf 02 00 00 00       	mov    $0x2,%edi
  88:	e8 00 00 00 00       	call   8d <SlushBoard::SlushBoard()+0x8d>
  8d:	be 01 00 00 00       	mov    $0x1,%esi
  92:	bf 08 00 00 00       	mov    $0x8,%edi
  97:	e8 00 00 00 00       	call   9c <SlushBoard::SlushBoard()+0x9c>
  9c:	be 01 00 00 00       	mov    $0x1,%esi
  a1:	bf 00 00 00 00       	mov    $0x0,%edi
  a6:	e8 00 00 00 00       	call   ab <SlushBoard::SlushBoard()+0xab>
  ab:	be 01 00 00 00       	mov    $0x1,%esi
  b0:	bf 01 00 00 00       	mov    $0x1,%edi
  b5:	e8 00 00 00 00       	call   ba <SlushBoard::SlushBoard()+0xba>
  ba:	be 01 00 00 00       	mov    $0x1,%esi
  bf:	bf 06 00 00 00       	mov    $0x6,%edi
  c4:	e8 00 00 00 00       	call   c9 <SlushBoard::SlushBoard()+0xc9>
  c9:	bf 03 00 00 00       	mov    $0x3,%edi
  ce:	e8 00 00 00 00       	call   d3 <SlushBoard::SlushBoard()+0xd3>
  d3:	bf 10 27 00 00       	mov    $0x2710,%edi
  d8:	e8 00 00 00 00       	call   dd <SlushBoard::SlushBoard()+0xdd>
  dd:	bf 03 00 00 00       	mov    $0x3,%edi
  e2:	e8 00 00 00 00       	call   e7 <SlushBoard::SlushBoard()+0xe7>
  e7:	bf 10 27 00 00       	mov    $0x2710,%edi
  ec:	e8 00 00 00 00       	call   f1 <SlushBoard::SlushBoard()+0xf1>
  f1:	be 00 00 00 00       	mov    $0x0,%esi
  f6:	bf 0a 00 00 00       	mov    $0xa,%edi
  fb:	e8 00 00 00 00       	call   100 <SlushBoard::SlushBoard()+0x100>
 100:	bf 0a 00 00 00       	mov    $0xa,%edi
 105:	e8 00 00 00 00       	call   10a <SlushBoard::SlushBoard()+0x10a>
 10a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 10e:	48 89 c7             	mov    %rax,%rdi
 111:	e8 00 00 00 00       	call   116 <SlushBoard::SlushBoard()+0x116>
 116:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 11a:	48 89 c7             	mov    %rax,%rdi
 11d:	e8 00 00 00 00       	call   122 <SlushBoard::SlushBoard()+0x122>
 122:	90                   	nop
 123:	c9                   	leave  
 124:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoardD2Ev:

0000000000000000 <SlushBoard::~SlushBoard()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard7InitSpiEv:

0000000000000000 <SlushBoard::InitSpi()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 08          	sub    $0x8,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	e8 00 00 00 00       	call   15 <SlushBoard::InitSpi()+0x15>
  15:	bf 00 00 00 00       	mov    $0x0,%edi
  1a:	e8 00 00 00 00       	call   1f <SlushBoard::InitSpi()+0x1f>
  1f:	bf 00 09 3d 00       	mov    $0x3d0900,%edi
  24:	e8 00 00 00 00       	call   29 <SlushBoard::InitSpi()+0x29>
  29:	bf 00 00 00 00       	mov    $0x0,%edi
  2e:	e8 00 00 00 00       	call   33 <SlushBoard::InitSpi()+0x33>
  33:	90                   	nop
  34:	c9                   	leave  
  35:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard7InitI2cEv:

0000000000000000 <SlushBoard::InitI2c()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	e8 00 00 00 00       	call   24 <SlushBoard::InitI2c()+0x24>
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	be 20 00 00 00       	mov    $0x20,%esi
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	call   35 <SlushBoard::InitI2c()+0x35>
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	ba ff 00 00 00       	mov    $0xff,%edx
  3e:	be 00 00 00 00       	mov    $0x0,%esi
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	call   4b <SlushBoard::InitI2c()+0x4b>
  4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4f:	ba ff 00 00 00       	mov    $0xff,%edx
  54:	be 01 00 00 00       	mov    $0x1,%esi
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	call   61 <SlushBoard::InitI2c()+0x61>
  61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  65:	ba ff 00 00 00       	mov    $0xff,%edx
  6a:	be 0c 00 00 00       	mov    $0xc,%esi
  6f:	48 89 c7             	mov    %rax,%rdi
  72:	e8 00 00 00 00       	call   77 <SlushBoard::InitI2c()+0x77>
  77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7b:	ba ff 00 00 00       	mov    $0xff,%edx
  80:	be 0d 00 00 00       	mov    $0xd,%esi
  85:	48 89 c7             	mov    %rax,%rdi
  88:	e8 00 00 00 00       	call   8d <SlushBoard::InitI2c()+0x8d>
  8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  91:	be 36 00 00 00       	mov    $0x36,%esi
  96:	48 89 c7             	mov    %rax,%rdi
  99:	e8 00 00 00 00       	call   9e <SlushBoard::InitI2c()+0x9e>
  9e:	c6 45 f7 8a          	movb   $0x8a,-0x9(%rbp)
  a2:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  a6:	be 01 00 00 00       	mov    $0x1,%esi
  ab:	48 89 c7             	mov    %rax,%rdi
  ae:	e8 00 00 00 00       	call   b3 <SlushBoard::InitI2c()+0xb3>
  b3:	c6 45 f7 01          	movb   $0x1,-0x9(%rbp)
  b7:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  bb:	be 01 00 00 00       	mov    $0x1,%esi
  c0:	48 89 c7             	mov    %rax,%rdi
  c3:	e8 00 00 00 00       	call   c8 <SlushBoard::InitI2c()+0xc8>
  c8:	90                   	nop
  c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  cd:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  d4:	00 00 
  d6:	74 05                	je     dd <SlushBoard::InitI2c()+0xdd>
  d8:	e8 00 00 00 00       	call   dd <SlushBoard::InitI2c()+0xdd>
  dd:	c9                   	leave  
  de:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard8I2cSetupEh:

0000000000000000 <SlushBoard::I2cSetup(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 f4             	mov    %al,-0xc(%rbp)
  15:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  19:	89 c7                	mov    %eax,%edi
  1b:	e8 00 00 00 00       	call   20 <SlushBoard::I2cSetup(unsigned char)+0x20>
  20:	bf 80 1a 06 00       	mov    $0x61a80,%edi
  25:	e8 00 00 00 00       	call   2a <SlushBoard::I2cSetup(unsigned char)+0x2a>
  2a:	90                   	nop
  2b:	c9                   	leave  
  2c:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard15Mcp23017ReadRegEh:

0000000000000000 <SlushBoard::Mcp23017ReadReg(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  28:	88 45 f7             	mov    %al,-0x9(%rbp)
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	be 20 00 00 00       	mov    $0x20,%esi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	call   3c <SlushBoard::Mcp23017ReadReg(unsigned char)+0x3c>
  3c:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  40:	be 01 00 00 00       	mov    $0x1,%esi
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	call   4d <SlushBoard::Mcp23017ReadReg(unsigned char)+0x4d>
  4d:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  51:	be 01 00 00 00       	mov    $0x1,%esi
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	call   5e <SlushBoard::Mcp23017ReadReg(unsigned char)+0x5e>
  5e:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  62:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  66:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  6d:	00 00 
  6f:	74 05                	je     76 <SlushBoard::Mcp23017ReadReg(unsigned char)+0x76>
  71:	e8 00 00 00 00       	call   76 <SlushBoard::Mcp23017ReadReg(unsigned char)+0x76>
  76:	c9                   	leave  
  77:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard16Mcp23017WriteRegEhh:

0000000000000000 <SlushBoard::Mcp23017WriteReg(unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	88 45 e0             	mov    %al,-0x20(%rbp)
  1c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  23:	00 00 
  25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  29:	31 c0                	xor    %eax,%eax
  2b:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  2f:	88 45 f6             	mov    %al,-0xa(%rbp)
  32:	0f b6 45 e0          	movzbl -0x20(%rbp),%eax
  36:	88 45 f7             	mov    %al,-0x9(%rbp)
  39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3d:	be 20 00 00 00       	mov    $0x20,%esi
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	call   4a <SlushBoard::Mcp23017WriteReg(unsigned char, unsigned char)+0x4a>
  4a:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  4e:	be 02 00 00 00       	mov    $0x2,%esi
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	call   5b <SlushBoard::Mcp23017WriteReg(unsigned char, unsigned char)+0x5b>
  5b:	90                   	nop
  5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  60:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  67:	00 00 
  69:	74 05                	je     70 <SlushBoard::Mcp23017WriteReg(unsigned char, unsigned char)+0x70>
  6b:	e8 00 00 00 00       	call   70 <SlushBoard::Mcp23017WriteReg(unsigned char, unsigned char)+0x70>
  70:	c9                   	leave  
  71:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard10setIOStateE13TSlushIOPorts12TSlushIOPinsh:

0000000000000000 <SlushBoard::setIOState(TSlushIOPorts, TSlushIOPins, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	89 55 f0             	mov    %edx,-0x10(%rbp)
  16:	89 c8                	mov    %ecx,%eax
  18:	88 45 ec             	mov    %al,-0x14(%rbp)
  1b:	8b 55 f0             	mov    -0x10(%rbp),%edx
  1e:	8b 75 f4             	mov    -0xc(%rbp),%esi
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	b9 00 00 00 00       	mov    $0x0,%ecx
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <SlushBoard::setIOState(TSlushIOPorts, TSlushIOPins, unsigned char)+0x32>
  32:	80 7d ec 00          	cmpb   $0x0,-0x14(%rbp)
  36:	75 16                	jne    4e <SlushBoard::setIOState(TSlushIOPorts, TSlushIOPins, unsigned char)+0x4e>
  38:	8b 55 f0             	mov    -0x10(%rbp),%edx
  3b:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  42:	89 ce                	mov    %ecx,%esi
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	call   4c <SlushBoard::setIOState(TSlushIOPorts, TSlushIOPins, unsigned char)+0x4c>
  4c:	eb 14                	jmp    62 <SlushBoard::setIOState(TSlushIOPorts, TSlushIOPins, unsigned char)+0x62>
  4e:	8b 55 f0             	mov    -0x10(%rbp),%edx
  51:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  58:	89 ce                	mov    %ecx,%esi
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	call   62 <SlushBoard::setIOState(TSlushIOPorts, TSlushIOPins, unsigned char)+0x62>
  62:	90                   	nop
  63:	c9                   	leave  
  64:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard10setIOStateEhhh:

0000000000000000 <SlushBoard::setIOState(unsigned char, unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 c8                	mov    %ecx,%eax
  12:	89 f1                	mov    %esi,%ecx
  14:	88 4d f4             	mov    %cl,-0xc(%rbp)
  17:	88 55 f0             	mov    %dl,-0x10(%rbp)
  1a:	88 45 ec             	mov    %al,-0x14(%rbp)
  1d:	0f b6 4d ec          	movzbl -0x14(%rbp),%ecx
  21:	0f b6 55 f0          	movzbl -0x10(%rbp),%edx
  25:	0f b6 75 f4          	movzbl -0xc(%rbp),%esi
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	call   35 <SlushBoard::setIOState(unsigned char, unsigned char, unsigned char)+0x35>
  35:	90                   	nop
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard10getIOStateE13TSlushIOPorts12TSlushIOPins:

0000000000000000 <SlushBoard::getIOState(TSlushIOPorts, TSlushIOPins)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	89 55 f0             	mov    %edx,-0x10(%rbp)
  16:	8b 55 f0             	mov    -0x10(%rbp),%edx
  19:	8b 75 f4             	mov    -0xc(%rbp),%esi
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	b9 01 00 00 00       	mov    $0x1,%ecx
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	call   2d <SlushBoard::getIOState(TSlushIOPorts, TSlushIOPins)+0x2d>
  2d:	8b 55 f0             	mov    -0x10(%rbp),%edx
  30:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  37:	89 ce                	mov    %ecx,%esi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	call   41 <SlushBoard::getIOState(TSlushIOPorts, TSlushIOPins)+0x41>
  41:	c9                   	leave  
  42:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard10getIOStateEhh:

0000000000000000 <SlushBoard::getIOState(unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 f4             	mov    %dl,-0xc(%rbp)
  19:	88 45 f0             	mov    %al,-0x10(%rbp)
  1c:	0f b6 55 f0          	movzbl -0x10(%rbp),%edx
  20:	0f b6 4d f4          	movzbl -0xc(%rbp),%ecx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	89 ce                	mov    %ecx,%esi
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	call   32 <SlushBoard::getIOState(unsigned char, unsigned char)+0x32>
  32:	c9                   	leave  
  33:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard6IOFSelE13TSlushIOPorts12TSlushIOPins12TSlushIOFSel:

0000000000000000 <SlushBoard::IOFSel(TSlushIOPorts, TSlushIOPins, TSlushIOFSel)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	89 4d dc             	mov    %ecx,-0x24(%rbp)
  19:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  1c:	0f b6 d0             	movzbl %al,%edx
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	89 d6                	mov    %edx,%esi
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	call   2d <SlushBoard::IOFSel(TSlushIOPorts, TSlushIOPins, TSlushIOFSel)+0x2d>
  2d:	88 45 fe             	mov    %al,-0x2(%rbp)
  30:	8b 45 e0             	mov    -0x20(%rbp),%eax
  33:	ba 01 00 00 00       	mov    $0x1,%edx
  38:	89 c1                	mov    %eax,%ecx
  3a:	d3 e2                	shl    %cl,%edx
  3c:	89 d0                	mov    %edx,%eax
  3e:	88 45 ff             	mov    %al,-0x1(%rbp)
  41:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  45:	75 0b                	jne    52 <SlushBoard::IOFSel(TSlushIOPorts, TSlushIOPins, TSlushIOFSel)+0x52>
  47:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  4b:	f7 d0                	not    %eax
  4d:	20 45 fe             	and    %al,-0x2(%rbp)
  50:	eb 07                	jmp    59 <SlushBoard::IOFSel(TSlushIOPorts, TSlushIOPins, TSlushIOFSel)+0x59>
  52:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  56:	08 45 fe             	or     %al,-0x2(%rbp)
  59:	0f b6 55 fe          	movzbl -0x2(%rbp),%edx
  5d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  60:	0f b6 c8             	movzbl %al,%ecx
  63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  67:	89 ce                	mov    %ecx,%esi
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	e8 00 00 00 00       	call   71 <SlushBoard::IOFSel(TSlushIOPorts, TSlushIOPins, TSlushIOFSel)+0x71>
  71:	90                   	nop
  72:	c9                   	leave  
  73:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard5IOClrE13TSlushIOPorts12TSlushIOPins:

0000000000000000 <SlushBoard::IOClr(TSlushIOPorts, TSlushIOPins)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	89 d6                	mov    %edx,%esi
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	call   27 <SlushBoard::IOClr(TSlushIOPorts, TSlushIOPins)+0x27>
  27:	88 45 ff             	mov    %al,-0x1(%rbp)
  2a:	8b 45 e0             	mov    -0x20(%rbp),%eax
  2d:	ba 01 00 00 00       	mov    $0x1,%edx
  32:	89 c1                	mov    %eax,%ecx
  34:	d3 e2                	shl    %cl,%edx
  36:	89 d0                	mov    %edx,%eax
  38:	f7 d0                	not    %eax
  3a:	20 45 ff             	and    %al,-0x1(%rbp)
  3d:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  41:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  48:	89 ce                	mov    %ecx,%esi
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	call   52 <SlushBoard::IOClr(TSlushIOPorts, TSlushIOPins)+0x52>
  52:	90                   	nop
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard5IOSetE13TSlushIOPorts12TSlushIOPins:

0000000000000000 <SlushBoard::IOSet(TSlushIOPorts, TSlushIOPins)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	89 d6                	mov    %edx,%esi
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	call   27 <SlushBoard::IOSet(TSlushIOPorts, TSlushIOPins)+0x27>
  27:	88 45 ff             	mov    %al,-0x1(%rbp)
  2a:	8b 45 e0             	mov    -0x20(%rbp),%eax
  2d:	ba 01 00 00 00       	mov    $0x1,%edx
  32:	89 c1                	mov    %eax,%ecx
  34:	d3 e2                	shl    %cl,%edx
  36:	89 d0                	mov    %edx,%eax
  38:	08 45 ff             	or     %al,-0x1(%rbp)
  3b:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  3f:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  46:	89 ce                	mov    %ecx,%esi
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	call   50 <SlushBoard::IOSet(TSlushIOPorts, TSlushIOPins)+0x50>
  50:	90                   	nop
  51:	c9                   	leave  
  52:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard5IOLevE13TSlushIOPorts12TSlushIOPins:

0000000000000000 <SlushBoard::IOLev(TSlushIOPorts, TSlushIOPins)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	89 55 e0             	mov    %edx,-0x20(%rbp)
  16:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	89 d6                	mov    %edx,%esi
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	call   27 <SlushBoard::IOLev(TSlushIOPorts, TSlushIOPins)+0x27>
  27:	88 45 fe             	mov    %al,-0x2(%rbp)
  2a:	8b 45 e0             	mov    -0x20(%rbp),%eax
  2d:	ba 01 00 00 00       	mov    $0x1,%edx
  32:	89 c1                	mov    %eax,%ecx
  34:	d3 e2                	shl    %cl,%edx
  36:	89 d0                	mov    %edx,%eax
  38:	88 45 ff             	mov    %al,-0x1(%rbp)
  3b:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
  3f:	22 45 ff             	and    -0x1(%rbp),%al
  42:	38 45 ff             	cmp    %al,-0x1(%rbp)
  45:	75 07                	jne    4e <SlushBoard::IOLev(TSlushIOPorts, TSlushIOPins)+0x4e>
  47:	b8 01 00 00 00       	mov    $0x1,%eax
  4c:	eb 05                	jmp    53 <SlushBoard::IOLev(TSlushIOPorts, TSlushIOPins)+0x53>
  4e:	b8 00 00 00 00       	mov    $0x0,%eax
  53:	c9                   	leave  
  54:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard6IOReadE13TSlushIOPorts:

0000000000000000 <SlushBoard::IORead(TSlushIOPorts)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	8b 45 f4             	mov    -0xc(%rbp),%eax
  16:	83 c0 12             	add    $0x12,%eax
  19:	0f b6 d0             	movzbl %al,%edx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	89 d6                	mov    %edx,%esi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <SlushBoard::IORead(TSlushIOPorts)+0x2a>
  2a:	c9                   	leave  
  2b:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard7IOWriteE13TSlushIOPortsh:

0000000000000000 <SlushBoard::IOWrite(TSlushIOPorts, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	89 d0                	mov    %edx,%eax
  15:	88 45 f0             	mov    %al,-0x10(%rbp)
  18:	0f b6 55 f0          	movzbl -0x10(%rbp),%edx
  1c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  1f:	83 c0 14             	add    $0x14,%eax
  22:	0f b6 c8             	movzbl %al,%ecx
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	89 ce                	mov    %ecx,%esi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	call   33 <SlushBoard::IOWrite(TSlushIOPorts, unsigned char)+0x33>
  33:	90                   	nop
  34:	c9                   	leave  
  35:	c3                   	ret    

slushmotor.o:     file format elf64-x86-64


Disassembly of section .text.spi_chipSelect:

0000000000000000 <spi_chipSelect>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.spi_setDataMode:

0000000000000000 <spi_setDataMode>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.spi_set_speed_hz:

0000000000000000 <spi_set_speed_hz>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text.spi_transfern:

0000000000000000 <spi_transfern>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	90                   	nop
   c:	5d                   	pop    %rbp
   d:	c3                   	ret    

Disassembly of section .text.gpio_set:

0000000000000000 <gpio_set>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.gpio_clr:

0000000000000000 <gpio_clr>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.gpio_lev:

0000000000000000 <gpio_lev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	b8 00 00 00 00       	mov    $0x0,%eax
   e:	5d                   	pop    %rbp
   f:	c3                   	ret    

Disassembly of section .text._ZN5L647010setCurrentEhhhh:

0000000000000000 <L6470::setCurrent(unsigned char, unsigned char, unsigned char, unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 c8                	mov    %ecx,%eax
  12:	44 89 c7             	mov    %r8d,%edi
  15:	89 f1                	mov    %esi,%ecx
  17:	88 4d f4             	mov    %cl,-0xc(%rbp)
  1a:	88 55 f0             	mov    %dl,-0x10(%rbp)
  1d:	88 45 ec             	mov    %al,-0x14(%rbp)
  20:	89 f8                	mov    %edi,%eax
  22:	88 45 e8             	mov    %al,-0x18(%rbp)
  25:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2d:	89 d6                	mov    %edx,%esi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	call   37 <L6470::setCurrent(unsigned char, unsigned char, unsigned char, unsigned char)+0x37>
  37:	0f b6 55 f0          	movzbl -0x10(%rbp),%edx
  3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3f:	89 d6                	mov    %edx,%esi
  41:	48 89 c7             	mov    %rax,%rdi
  44:	e8 00 00 00 00       	call   49 <L6470::setCurrent(unsigned char, unsigned char, unsigned char, unsigned char)+0x49>
  49:	0f b6 55 ec          	movzbl -0x14(%rbp),%edx
  4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  51:	89 d6                	mov    %edx,%esi
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	call   5b <L6470::setCurrent(unsigned char, unsigned char, unsigned char, unsigned char)+0x5b>
  5b:	0f b6 55 e8          	movzbl -0x18(%rbp),%edx
  5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  63:	89 d6                	mov    %edx,%esi
  65:	48 89 c7             	mov    %rax,%rdi
  68:	e8 00 00 00 00       	call   6d <L6470::setCurrent(unsigned char, unsigned char, unsigned char, unsigned char)+0x6d>
  6d:	90                   	nop
  6e:	c9                   	leave  
  6f:	c3                   	ret    

Disassembly of section .text._ZN5L6470C2Ev:

0000000000000000 <L6470::L6470()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 13 <L6470::L6470()+0x13>
  13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  17:	48 89 10             	mov    %rdx,(%rax)
  1a:	90                   	nop
  1b:	5d                   	pop    %rbp
  1c:	c3                   	ret    

Disassembly of section .text._ZN10SlushMotorC2Ejb:

0000000000000000 <SlushMotor::SlushMotor(unsigned int, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	89 d0                	mov    %edx,%eax
  15:	88 45 f0             	mov    %al,-0x10(%rbp)
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	call   24 <SlushMotor::SlushMotor(unsigned int, bool)+0x24>
  24:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2b <SlushMotor::SlushMotor(unsigned int, bool)+0x2b>
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 10             	mov    %rdx,(%rax)
  32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  36:	c6 40 15 00          	movb   $0x0,0x15(%rax)
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	c6 40 16 00          	movb   $0x0,0x16(%rax)
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	8b 55 f4             	mov    -0xc(%rbp),%edx
  49:	89 50 08             	mov    %edx,0x8(%rax)
  4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  50:	0f b6 55 f0          	movzbl -0x10(%rbp),%edx
  54:	88 50 14             	mov    %dl,0x14(%rax)
  57:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
  5b:	74 68                	je     c5 <SlushMotor::SlushMotor(unsigned int, bool)+0xc5>
  5d:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
  61:	77 7a                	ja     dd <SlushMotor::SlushMotor(unsigned int, bool)+0xdd>
  63:	83 7d f4 02          	cmpl   $0x2,-0xc(%rbp)
  67:	74 44                	je     ad <SlushMotor::SlushMotor(unsigned int, bool)+0xad>
  69:	83 7d f4 02          	cmpl   $0x2,-0xc(%rbp)
  6d:	77 6e                	ja     dd <SlushMotor::SlushMotor(unsigned int, bool)+0xdd>
  6f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  73:	74 08                	je     7d <SlushMotor::SlushMotor(unsigned int, bool)+0x7d>
  75:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
  79:	74 1a                	je     95 <SlushMotor::SlushMotor(unsigned int, bool)+0x95>
  7b:	eb 60                	jmp    dd <SlushMotor::SlushMotor(unsigned int, bool)+0xdd>
  7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  81:	c7 40 0c 04 00 00 00 	movl   $0x4,0xc(%rax)
  88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8c:	c7 40 10 08 00 00 00 	movl   $0x8,0x10(%rax)
  93:	eb 5f                	jmp    f4 <SlushMotor::SlushMotor(unsigned int, bool)+0xf4>
  95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  99:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%rax)
  a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a4:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
  ab:	eb 47                	jmp    f4 <SlushMotor::SlushMotor(unsigned int, bool)+0xf4>
  ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b1:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%rax)
  b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  bc:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%rax)
  c3:	eb 2f                	jmp    f4 <SlushMotor::SlushMotor(unsigned int, bool)+0xf4>
  c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c9:	c7 40 0c 02 00 00 00 	movl   $0x2,0xc(%rax)
  d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d4:	c7 40 10 06 00 00 00 	movl   $0x6,0x10(%rax)
  db:	eb 17                	jmp    f4 <SlushMotor::SlushMotor(unsigned int, bool)+0xf4>
  dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e1:	c7 40 0c 04 00 00 00 	movl   $0x4,0xc(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	c7 40 10 08 00 00 00 	movl   $0x8,0x10(%rax)
  f3:	90                   	nop
  f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f8:	be 18 00 00 00       	mov    $0x18,%esi
  fd:	48 89 c7             	mov    %rax,%rdi
 100:	e8 00 00 00 00       	call   105 <SlushMotor::SlushMotor(unsigned int, bool)+0x105>
 105:	48 3d 88 2e 00 00    	cmp    $0x2e88,%rax
 10b:	0f 94 c0             	sete   %al
 10e:	84 c0                	test   %al,%al
 110:	0f 84 82 00 00 00    	je     198 <SlushMotor::SlushMotor(unsigned int, bool)+0x198>
 116:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 11a:	8b 40 0c             	mov    0xc(%rax),%eax
 11d:	89 c6                	mov    %eax,%esi
 11f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 126 <SlushMotor::SlushMotor(unsigned int, bool)+0x126>
 126:	48 89 c7             	mov    %rax,%rdi
 129:	b8 00 00 00 00       	mov    $0x0,%eax
 12e:	e8 00 00 00 00       	call   133 <SlushMotor::SlushMotor(unsigned int, bool)+0x133>
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	be d0 07 00 00       	mov    $0x7d0,%esi
 13c:	48 89 c7             	mov    %rax,%rdi
 13f:	e8 00 00 00 00       	call   144 <SlushMotor::SlushMotor(unsigned int, bool)+0x144>
 144:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 148:	be 10 00 00 00       	mov    $0x10,%esi
 14d:	48 89 c7             	mov    %rax,%rdi
 150:	e8 00 00 00 00       	call   155 <SlushMotor::SlushMotor(unsigned int, bool)+0x155>
 155:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 159:	41 b8 64 00 00 00    	mov    $0x64,%r8d
 15f:	b9 64 00 00 00       	mov    $0x64,%ecx
 164:	ba 5a 00 00 00       	mov    $0x5a,%edx
 169:	be 46 00 00 00       	mov    $0x46,%esi
 16e:	48 89 c7             	mov    %rax,%rdi
 171:	e8 00 00 00 00       	call   176 <SlushMotor::SlushMotor(unsigned int, bool)+0x176>
 176:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 17a:	48 89 c7             	mov    %rax,%rdi
 17d:	e8 00 00 00 00       	call   182 <SlushMotor::SlushMotor(unsigned int, bool)+0x182>
 182:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 186:	48 89 c7             	mov    %rax,%rdi
 189:	e8 00 00 00 00       	call   18e <SlushMotor::SlushMotor(unsigned int, bool)+0x18e>
 18e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 192:	c6 40 16 01          	movb   $0x1,0x16(%rax)
 196:	eb 23                	jmp    1bb <SlushMotor::SlushMotor(unsigned int, bool)+0x1bb>
 198:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 19f <SlushMotor::SlushMotor(unsigned int, bool)+0x19f>
 19f:	48 89 c1             	mov    %rax,%rcx
 1a2:	ba 39 00 00 00       	mov    $0x39,%edx
 1a7:	be 01 00 00 00       	mov    $0x1,%esi
 1ac:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1b3 <SlushMotor::SlushMotor(unsigned int, bool)+0x1b3>
 1b3:	48 89 c7             	mov    %rax,%rdi
 1b6:	e8 00 00 00 00       	call   1bb <SlushMotor::SlushMotor(unsigned int, bool)+0x1bb>
 1bb:	90                   	nop
 1bc:	c9                   	leave  
 1bd:	c3                   	ret    

Disassembly of section .text._ZN10SlushMotorD2Ev:

0000000000000000 <SlushMotor::~SlushMotor()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 17 <SlushMotor::~SlushMotor()+0x17>
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 10             	mov    %rdx,(%rax)
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <SlushMotor::~SlushMotor()+0x2a>
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	c6 40 15 00          	movb   $0x0,0x15(%rax)
  32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  36:	c6 40 16 00          	movb   $0x0,0x16(%rax)
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	call   46 <SlushMotor::~SlushMotor()+0x46>
  46:	90                   	nop
  47:	c9                   	leave  
  48:	c3                   	ret    

Disassembly of section .text._ZN10SlushMotorD0Ev:

0000000000000000 <SlushMotor::~SlushMotor()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <SlushMotor::~SlushMotor()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <SlushMotor::~SlushMotor()+0x28>
  28:	c9                   	leave  
  29:	c3                   	ret    

Disassembly of section .text._ZN10SlushMotor9busyCheckEv:

0000000000000000 <SlushMotor::busyCheck()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b6 40 14          	movzbl 0x14(%rax),%eax
  18:	84 c0                	test   %al,%al
  1a:	74 2c                	je     48 <SlushMotor::busyCheck()+0x48>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	be 19 00 00 00       	mov    $0x19,%esi
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	call   2d <SlushMotor::busyCheck()+0x2d>
  2d:	83 e0 02             	and    $0x2,%eax
  30:	48 85 c0             	test   %rax,%rax
  33:	0f 95 c0             	setne  %al
  36:	84 c0                	test   %al,%al
  38:	74 07                	je     41 <SlushMotor::busyCheck()+0x41>
  3a:	b8 00 00 00 00       	mov    $0x0,%eax
  3f:	eb 78                	jmp    b9 <SlushMotor::busyCheck()+0xb9>
  41:	b8 01 00 00 00       	mov    $0x1,%eax
  46:	eb 71                	jmp    b9 <SlushMotor::busyCheck()+0xb9>
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	0f b6 40 15          	movzbl 0x15(%rax),%eax
  50:	83 f0 01             	xor    $0x1,%eax
  53:	84 c0                	test   %al,%al
  55:	74 34                	je     8b <SlushMotor::busyCheck()+0x8b>
  57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5b:	be 19 00 00 00       	mov    $0x19,%esi
  60:	48 89 c7             	mov    %rax,%rdi
  63:	e8 00 00 00 00       	call   68 <SlushMotor::busyCheck()+0x68>
  68:	83 e0 02             	and    $0x2,%eax
  6b:	48 85 c0             	test   %rax,%rax
  6e:	0f 95 c0             	setne  %al
  71:	84 c0                	test   %al,%al
  73:	74 07                	je     7c <SlushMotor::busyCheck()+0x7c>
  75:	b8 00 00 00 00       	mov    $0x0,%eax
  7a:	eb 3d                	jmp    b9 <SlushMotor::busyCheck()+0xb9>
  7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80:	c6 40 15 01          	movb   $0x1,0x15(%rax)
  84:	b8 01 00 00 00       	mov    $0x1,%eax
  89:	eb 2e                	jmp    b9 <SlushMotor::busyCheck()+0xb9>
  8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8f:	8b 40 10             	mov    0x10(%rax),%eax
  92:	0f b6 c0             	movzbl %al,%eax
  95:	89 c7                	mov    %eax,%edi
  97:	e8 00 00 00 00       	call   9c <SlushMotor::busyCheck()+0x9c>
  9c:	3c 01                	cmp    $0x1,%al
  9e:	0f 94 c0             	sete   %al
  a1:	84 c0                	test   %al,%al
  a3:	74 0f                	je     b4 <SlushMotor::busyCheck()+0xb4>
  a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a9:	c6 40 15 00          	movb   $0x0,0x15(%rax)
  ad:	b8 00 00 00 00       	mov    $0x0,%eax
  b2:	eb 05                	jmp    b9 <SlushMotor::busyCheck()+0xb9>
  b4:	b8 01 00 00 00       	mov    $0x1,%eax
  b9:	c9                   	leave  
  ba:	c3                   	ret    

Disassembly of section .text._ZN10SlushMotor7SPIXferEh:

0000000000000000 <SlushMotor::SPIXfer(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	88 45 e4             	mov    %al,-0x1c(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
  24:	0f b6 45 e4          	movzbl -0x1c(%rbp),%eax
  28:	88 45 f7             	mov    %al,-0x9(%rbp)
  2b:	bf 00 00 00 00       	mov    $0x0,%edi
  30:	e8 00 00 00 00       	call   35 <SlushMotor::SPIXfer(unsigned char)+0x35>
  35:	bf 00 09 3d 00       	mov    $0x3d0900,%edi
  3a:	e8 00 00 00 00       	call   3f <SlushMotor::SPIXfer(unsigned char)+0x3f>
  3f:	bf 00 00 00 00       	mov    $0x0,%edi
  44:	e8 00 00 00 00       	call   49 <SlushMotor::SPIXfer(unsigned char)+0x49>
  49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4d:	8b 40 0c             	mov    0xc(%rax),%eax
  50:	0f b6 c0             	movzbl %al,%eax
  53:	89 c7                	mov    %eax,%edi
  55:	e8 00 00 00 00       	call   5a <SlushMotor::SPIXfer(unsigned char)+0x5a>
  5a:	48 8d 45 f7          	lea    -0x9(%rbp),%rax
  5e:	be 01 00 00 00       	mov    $0x1,%esi
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	call   6b <SlushMotor::SPIXfer(unsigned char)+0x6b>
  6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6f:	8b 40 0c             	mov    0xc(%rax),%eax
  72:	0f b6 c0             	movzbl %al,%eax
  75:	89 c7                	mov    %eax,%edi
  77:	e8 00 00 00 00       	call   7c <SlushMotor::SPIXfer(unsigned char)+0x7c>
  7c:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  80:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  84:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  8b:	00 00 
  8d:	74 05                	je     94 <SlushMotor::SPIXfer(unsigned char)+0x94>
  8f:	e8 00 00 00 00       	call   94 <SlushMotor::SPIXfer(unsigned char)+0x94>
  94:	c9                   	leave  
  95:	c3                   	ret    

Disassembly of section .text._ZN10SlushMotor6isBusyEv:

0000000000000000 <SlushMotor::isBusy()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 00             	mov    (%rax),%rax
  17:	48 83 c0 10          	add    $0x10,%rax
  1b:	48 8b 10             	mov    (%rax),%rdx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	ff d2                	call   *%rdx
  27:	c9                   	leave  
  28:	c3                   	ret    

Disassembly of section .text._ZN10SlushMotor9setAsHomeEv:

0000000000000000 <SlushMotor::setAsHome()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <SlushMotor::setAsHome()+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leave  
  1e:	c3                   	ret    

Disassembly of section .text._ZN10SlushMotor14setOverCurrentEj:

0000000000000000 <SlushMotor::setOverCurrent(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  16:	89 c0                	mov    %eax,%eax
  18:	48 69 c0 f1 19 76 05 	imul   $0x57619f1,%rax,%rax
  1f:	48 c1 e8 20          	shr    $0x20,%rax
  23:	c1 e8 03             	shr    $0x3,%eax
  26:	88 45 ff             	mov    %al,-0x1(%rbp)
  29:	80 7d ff 0f          	cmpb   $0xf,-0x1(%rbp)
  2d:	76 04                	jbe    33 <SlushMotor::setOverCurrent(unsigned int)+0x33>
  2f:	c6 45 ff 0f          	movb   $0xf,-0x1(%rbp)
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
  3b:	be 13 00 00 00       	mov    $0x13,%esi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	call   48 <SlushMotor::setOverCurrent(unsigned int)+0x48>
  48:	90                   	nop
  49:	c9                   	leave  
  4a:	c3                   	ret    

Disassembly of section .text._ZN10SlushMotor8softFreeEv:

0000000000000000 <SlushMotor::softFree()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <SlushMotor::softFree()+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leave  
  1e:	c3                   	ret    

Disassembly of section .text._ZN10SlushMotor4freeEv:

0000000000000000 <SlushMotor::free()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <SlushMotor::free()+0x1c>
  1c:	90                   	nop
  1d:	c9                   	leave  
  1e:	c3                   	ret    

Disassembly of section .text._ZNK10SlushMotor11IsConnectedEv:

0000000000000000 <SlushMotor::IsConnected() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 40 16          	movzbl 0x16(%rax),%eax
  14:	5d                   	pop    %rbp
  15:	c3                   	ret    

Disassembly of section .text._ZNK10SlushMotor13GetUseSpiBusyEv:

0000000000000000 <SlushMotor::GetUseSpiBusy() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 40 14          	movzbl 0x14(%rax),%eax
  14:	5d                   	pop    %rbp
  15:	c3                   	ret    

Disassembly of section .text._ZN10SlushMotor13SetUseSpiBusyEb:

0000000000000000 <SlushMotor::SetUseSpiBusy(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  19:	88 50 14             	mov    %dl,0x14(%rax)
  1c:	90                   	nop
  1d:	5d                   	pop    %rbp
  1e:	c3                   	ret    

slushtemp.o:     file format elf64-x86-64


Disassembly of section .text.i2c_set_baudrate:

0000000000000000 <i2c_set_baudrate>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text.i2c_set_address:

0000000000000000 <i2c_set_address>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 f8                	mov    %edi,%eax
   6:	88 45 fc             	mov    %al,-0x4(%rbp)
   9:	90                   	nop
   a:	5d                   	pop    %rbp
   b:	c3                   	ret    

Disassembly of section .text.i2c_read:

0000000000000000 <i2c_read>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   8:	89 75 f4             	mov    %esi,-0xc(%rbp)
   b:	b8 01 00 00 00       	mov    $0x1,%eax
  10:	5d                   	pop    %rbp
  11:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard10getTempRawEv:

0000000000000000 <SlushBoard::getTempRaw()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%rbp)
  25:	bf 36 00 00 00       	mov    $0x36,%edi
  2a:	e8 00 00 00 00       	call   2f <SlushBoard::getTempRaw()+0x2f>
  2f:	bf 80 1a 06 00       	mov    $0x61a80,%edi
  34:	e8 00 00 00 00       	call   39 <SlushBoard::getTempRaw()+0x39>
  39:	48 8d 45 f6          	lea    -0xa(%rbp),%rax
  3d:	be 02 00 00 00       	mov    $0x2,%esi
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	call   4a <SlushBoard::getTempRaw()+0x4a>
  4a:	0f b6 45 f6          	movzbl -0xa(%rbp),%eax
  4e:	0f be c0             	movsbl %al,%eax
  51:	c1 e0 08             	shl    $0x8,%eax
  54:	89 c2                	mov    %eax,%edx
  56:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  5a:	66 98                	cbtw   
  5c:	09 d0                	or     %edx,%eax
  5e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  62:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  69:	00 00 
  6b:	74 05                	je     72 <SlushBoard::getTempRaw()+0x72>
  6d:	e8 00 00 00 00       	call   72 <SlushBoard::getTempRaw()+0x72>
  72:	c9                   	leave  
  73:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard13getTempratureEv:

0000000000000000 <SlushBoard::getTemprature()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <SlushBoard::getTemprature()+0x1c>
  1c:	0f b7 d0             	movzwl %ax,%edx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	89 d6                	mov    %edx,%esi
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	call   2d <SlushBoard::getTemprature()+0x2d>
  2d:	c9                   	leave  
  2e:	c3                   	ret    

Disassembly of section .text._ZN10SlushBoard8calcTempEt:

0000000000000000 <SlushBoard::calcTemp(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
  16:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  1a:	66 0f ef c0          	pxor   %xmm0,%xmm0
  1e:	f3 0f 2a c0          	cvtsi2ss %eax,%xmm0
  22:	f3 0f 10 15 00 00 00 	movss  0x0(%rip),%xmm2        # 2a <SlushBoard::calcTemp(unsigned short)+0x2a>
  29:	00 
  2a:	0f 28 c8             	movaps %xmm0,%xmm1
  2d:	f3 0f 5e ca          	divss  %xmm2,%xmm1
  31:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 39 <SlushBoard::calcTemp(unsigned short)+0x39>
  38:	00 
  39:	f3 0f 59 c1          	mulss  %xmm1,%xmm0
  3d:	f3 0f 11 45 f4       	movss  %xmm0,-0xc(%rbp)
  42:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 4a <SlushBoard::calcTemp(unsigned short)+0x4a>
  49:	00 
  4a:	f3 0f 5e 45 f4       	divss  -0xc(%rbp),%xmm0
  4f:	f3 0f 10 15 00 00 00 	movss  0x0(%rip),%xmm2        # 57 <SlushBoard::calcTemp(unsigned short)+0x57>
  56:	00 
  57:	0f 28 c8             	movaps %xmm0,%xmm1
  5a:	f3 0f 5c ca          	subss  %xmm2,%xmm1
  5e:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 66 <SlushBoard::calcTemp(unsigned short)+0x66>
  65:	00 
  66:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  6a:	f3 0f 11 45 f8       	movss  %xmm0,-0x8(%rbp)
  6f:	f3 0f 10 45 f8       	movss  -0x8(%rbp),%xmm0
  74:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # 7c <SlushBoard::calcTemp(unsigned short)+0x7c>
  7b:	00 
  7c:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  80:	66 0f 7e c0          	movd   %xmm0,%eax
  84:	66 0f 6e c0          	movd   %eax,%xmm0
  88:	e8 00 00 00 00       	call   8d <SlushBoard::calcTemp(unsigned short)+0x8d>
  8d:	66 0f 7e c0          	movd   %xmm0,%eax
  91:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # 99 <SlushBoard::calcTemp(unsigned short)+0x99>
  98:	00 
  99:	66 0f 6e c8          	movd   %eax,%xmm1
  9d:	f3 0f 5e c8          	divss  %xmm0,%xmm1
  a1:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # a9 <SlushBoard::calcTemp(unsigned short)+0xa9>
  a8:	00 
  a9:	f3 0f 58 c8          	addss  %xmm0,%xmm1
  ad:	f3 0f 10 05 00 00 00 	movss  0x0(%rip),%xmm0        # b5 <SlushBoard::calcTemp(unsigned short)+0xb5>
  b4:	00 
  b5:	f3 0f 5e c1          	divss  %xmm1,%xmm0
  b9:	f3 0f 11 45 fc       	movss  %xmm0,-0x4(%rbp)
  be:	f3 0f 10 45 fc       	movss  -0x4(%rbp),%xmm0
  c3:	f3 0f 10 0d 00 00 00 	movss  0x0(%rip),%xmm1        # cb <SlushBoard::calcTemp(unsigned short)+0xcb>
  ca:	00 
  cb:	f3 0f 5c c1          	subss  %xmm1,%xmm0
  cf:	c9                   	leave  
  d0:	c3                   	ret    
