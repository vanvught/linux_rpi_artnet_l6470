
linux_rpi_artnet_l6470:     file format elf32-littlearm


Disassembly of section .init:

00011120 <_init>:
   11120:	e92d4008 	push	{r3, lr}
   11124:	eb000108 	bl	1154c <call_weak_fn>
   11128:	e8bd8008 	pop	{r3, pc}

Disassembly of section .plt:

0001112c <.plt>:
   1112c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11130:	e59fe004 	ldr	lr, [pc, #4]	; 1113c <.plt+0x10>
   11134:	e08fe00e 	add	lr, pc, lr
   11138:	e5bef008 	ldr	pc, [lr, #8]!
   1113c:	0004aec4 	.word	0x0004aec4

00011140 <operator new(unsigned int)@plt>:
   11140:	e28fc600 	add	ip, pc, #0, 12
   11144:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11148:	e5bcfec4 	ldr	pc, [ip, #3780]!	; 0xec4

0001114c <sync@plt>:
   1114c:	e28fc600 	add	ip, pc, #0, 12
   11150:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11154:	e5bcfebc 	ldr	pc, [ip, #3772]!	; 0xebc

00011158 <popen@plt>:
   11158:	e28fc600 	add	ip, pc, #0, 12
   1115c:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11160:	e5bcfeb4 	ldr	pc, [ip, #3764]!	; 0xeb4

00011164 <gettimeofday@plt>:
   11164:	e28fc600 	add	ip, pc, #0, 12
   11168:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   1116c:	e5bcfeac 	ldr	pc, [ip, #3756]!	; 0xeac

00011170 <recvfrom@plt>:
   11170:	e28fc600 	add	ip, pc, #0, 12
   11174:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11178:	e5bcfea4 	ldr	pc, [ip, #3748]!	; 0xea4

0001117c <strcasecmp@plt>:
   1117c:	e28fc600 	add	ip, pc, #0, 12
   11180:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11184:	e5bcfe9c 	ldr	pc, [ip, #3740]!	; 0xe9c

00011188 <strtol@plt>:
   11188:	e28fc600 	add	ip, pc, #0, 12
   1118c:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11190:	e5bcfe94 	ldr	pc, [ip, #3732]!	; 0xe94

00011194 <posix_memalign@plt>:
   11194:	e28fc600 	add	ip, pc, #0, 12
   11198:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   1119c:	e5bcfe8c 	ldr	pc, [ip, #3724]!	; 0xe8c

000111a0 <fseek@plt>:
   111a0:	e28fc600 	add	ip, pc, #0, 12
   111a4:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   111a8:	e5bcfe84 	ldr	pc, [ip, #3716]!	; 0xe84

000111ac <strncmp@plt>:
   111ac:	e28fc600 	add	ip, pc, #0, 12
   111b0:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   111b4:	e5bcfe7c 	ldr	pc, [ip, #3708]!	; 0xe7c

000111b8 <__aeabi_uidivmod@plt>:
   111b8:	e28fc600 	add	ip, pc, #0, 12
   111bc:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   111c0:	e5bcfe74 	ldr	pc, [ip, #3700]!	; 0xe74

000111c4 <asctime@plt>:
   111c4:	e28fc600 	add	ip, pc, #0, 12
   111c8:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   111cc:	e5bcfe6c 	ldr	pc, [ip, #3692]!	; 0xe6c

000111d0 <inet_ntop@plt>:
   111d0:	e28fc600 	add	ip, pc, #0, 12
   111d4:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   111d8:	e5bcfe64 	ldr	pc, [ip, #3684]!	; 0xe64

000111dc <inet_aton@plt>:
   111dc:	e28fc600 	add	ip, pc, #0, 12
   111e0:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   111e4:	e5bcfe5c 	ldr	pc, [ip, #3676]!	; 0xe5c

000111e8 <exit@plt>:
   111e8:	e28fc600 	add	ip, pc, #0, 12
   111ec:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   111f0:	e5bcfe54 	ldr	pc, [ip, #3668]!	; 0xe54

000111f4 <printf@plt>:
   111f4:	e28fc600 	add	ip, pc, #0, 12
   111f8:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   111fc:	e5bcfe4c 	ldr	pc, [ip, #3660]!	; 0xe4c

00011200 <strerror@plt>:
   11200:	e28fc600 	add	ip, pc, #0, 12
   11204:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11208:	e5bcfe44 	ldr	pc, [ip, #3652]!	; 0xe44

0001120c <reboot@plt>:
   1120c:	e28fc600 	add	ip, pc, #0, 12
   11210:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11214:	e5bcfe3c 	ldr	pc, [ip, #3644]!	; 0xe3c

00011218 <uname@plt>:
   11218:	e28fc600 	add	ip, pc, #0, 12
   1121c:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11220:	e5bcfe34 	ldr	pc, [ip, #3636]!	; 0xe34

00011224 <puts@plt>:
   11224:	e28fc600 	add	ip, pc, #0, 12
   11228:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   1122c:	e5bcfe2c 	ldr	pc, [ip, #3628]!	; 0xe2c

00011230 <perror@plt>:
   11230:	e28fc600 	add	ip, pc, #0, 12
   11234:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11238:	e5bcfe24 	ldr	pc, [ip, #3620]!	; 0xe24

0001123c <sendto@plt>:
   1123c:	e28fc600 	add	ip, pc, #0, 12
   11240:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11244:	e5bcfe1c 	ldr	pc, [ip, #3612]!	; 0xe1c

00011248 <__cxa_guard_release@plt>:
   11248:	e28fc600 	add	ip, pc, #0, 12
   1124c:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11250:	e5bcfe14 	ldr	pc, [ip, #3604]!	; 0xe14

00011254 <nanosleep@plt>:
   11254:	e28fc600 	add	ip, pc, #0, 12
   11258:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   1125c:	e5bcfe0c 	ldr	pc, [ip, #3596]!	; 0xe0c

00011260 <putchar@plt>:
   11260:	e28fc600 	add	ip, pc, #0, 12
   11264:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11268:	e5bcfe04 	ldr	pc, [ip, #3588]!	; 0xe04

0001126c <memset@plt>:
   1126c:	e28fc600 	add	ip, pc, #0, 12
   11270:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11274:	e5bcfdfc 	ldr	pc, [ip, #3580]!	; 0xdfc

00011278 <snprintf@plt>:
   11278:	e28fc600 	add	ip, pc, #0, 12
   1127c:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11280:	e5bcfdf4 	ldr	pc, [ip, #3572]!	; 0xdf4

00011284 <close@plt>:
   11284:	e28fc600 	add	ip, pc, #0, 12
   11288:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   1128c:	e5bcfdec 	ldr	pc, [ip, #3564]!	; 0xdec

00011290 <sethostname@plt>:
   11290:	e28fc600 	add	ip, pc, #0, 12
   11294:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11298:	e5bcfde4 	ldr	pc, [ip, #3556]!	; 0xde4

0001129c <fopen@plt>:
   1129c:	e28fc600 	add	ip, pc, #0, 12
   112a0:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   112a4:	e5bcfddc 	ldr	pc, [ip, #3548]!	; 0xddc

000112a8 <operator new[](unsigned int)@plt>:
   112a8:	e28fc600 	add	ip, pc, #0, 12
   112ac:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   112b0:	e5bcfdd4 	ldr	pc, [ip, #3540]!	; 0xdd4

000112b4 <abort@plt>:
   112b4:	e28fc600 	add	ip, pc, #0, 12
   112b8:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   112bc:	e5bcfdcc 	ldr	pc, [ip, #3532]!	; 0xdcc

000112c0 <ioctl@plt>:
   112c0:	e28fc600 	add	ip, pc, #0, 12
   112c4:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   112c8:	e5bcfdc4 	ldr	pc, [ip, #3524]!	; 0xdc4

000112cc <localtime@plt>:
   112cc:	e28fc600 	add	ip, pc, #0, 12
   112d0:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   112d4:	e5bcfdbc 	ldr	pc, [ip, #3516]!	; 0xdbc

000112d8 <htonl@plt>:
   112d8:	e28fc600 	add	ip, pc, #0, 12
   112dc:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   112e0:	e5bcfdb4 	ldr	pc, [ip, #3508]!	; 0xdb4

000112e4 <system@plt>:
   112e4:	e28fc600 	add	ip, pc, #0, 12
   112e8:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   112ec:	e5bcfdac 	ldr	pc, [ip, #3500]!	; 0xdac

000112f0 <mmap@plt>:
   112f0:	e28fc600 	add	ip, pc, #0, 12
   112f4:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   112f8:	e5bcfda4 	ldr	pc, [ip, #3492]!	; 0xda4

000112fc <uuid_unparse@plt>:
   112fc:	e28fc600 	add	ip, pc, #0, 12
   11300:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11304:	e5bcfd9c 	ldr	pc, [ip, #3484]!	; 0xd9c

00011308 <operator delete(void*)@plt>:
   11308:	e28fc600 	add	ip, pc, #0, 12
   1130c:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11310:	e5bcfd94 	ldr	pc, [ip, #3476]!	; 0xd94

00011314 <__assert_fail@plt>:
   11314:	e28fc600 	add	ip, pc, #0, 12
   11318:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   1131c:	e5bcfd8c 	ldr	pc, [ip, #3468]!	; 0xd8c

00011320 <open@plt>:
   11320:	e28fc600 	add	ip, pc, #0, 12
   11324:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11328:	e5bcfd84 	ldr	pc, [ip, #3460]!	; 0xd84

0001132c <freeifaddrs@plt>:
   1132c:	e28fc600 	add	ip, pc, #0, 12
   11330:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11334:	e5bcfd7c 	ldr	pc, [ip, #3452]!	; 0xd7c

00011338 <bind@plt>:
   11338:	e28fc600 	add	ip, pc, #0, 12
   1133c:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11340:	e5bcfd74 	ldr	pc, [ip, #3444]!	; 0xd74

00011344 <fread@plt>:
   11344:	e28fc600 	add	ip, pc, #0, 12
   11348:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   1134c:	e5bcfd6c 	ldr	pc, [ip, #3436]!	; 0xd6c

00011350 <sysinfo@plt>:
   11350:	e28fc600 	add	ip, pc, #0, 12
   11354:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11358:	e5bcfd64 	ldr	pc, [ip, #3428]!	; 0xd64

0001135c <socket@plt>:
   1135c:	e28fc600 	add	ip, pc, #0, 12
   11360:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11364:	e5bcfd5c 	ldr	pc, [ip, #3420]!	; 0xd5c

00011368 <getifaddrs@plt>:
   11368:	e28fc600 	add	ip, pc, #0, 12
   1136c:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11370:	e5bcfd54 	ldr	pc, [ip, #3412]!	; 0xd54

00011374 <ntohs@plt>:
   11374:	e28fc600 	add	ip, pc, #0, 12
   11378:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   1137c:	e5bcfd4c 	ldr	pc, [ip, #3404]!	; 0xd4c

00011380 <strstr@plt>:
   11380:	e28fc600 	add	ip, pc, #0, 12
   11384:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11388:	e5bcfd44 	ldr	pc, [ip, #3396]!	; 0xd44

0001138c <pclose@plt>:
   1138c:	e28fc600 	add	ip, pc, #0, 12
   11390:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11394:	e5bcfd3c 	ldr	pc, [ip, #3388]!	; 0xd3c

00011398 <operator delete[](void*)@plt>:
   11398:	e28fc600 	add	ip, pc, #0, 12
   1139c:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   113a0:	e5bcfd34 	ldr	pc, [ip, #3380]!	; 0xd34

000113a4 <setsockopt@plt>:
   113a4:	e28fc600 	add	ip, pc, #0, 12
   113a8:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   113ac:	e5bcfd2c 	ldr	pc, [ip, #3372]!	; 0xd2c

000113b0 <gethostname@plt>:
   113b0:	e28fc600 	add	ip, pc, #0, 12
   113b4:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   113b8:	e5bcfd24 	ldr	pc, [ip, #3364]!	; 0xd24

000113bc <getuid@plt>:
   113bc:	e28fc600 	add	ip, pc, #0, 12
   113c0:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   113c4:	e5bcfd1c 	ldr	pc, [ip, #3356]!	; 0xd1c

000113c8 <if_nametoindex@plt>:
   113c8:	e28fc600 	add	ip, pc, #0, 12
   113cc:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   113d0:	e5bcfd14 	ldr	pc, [ip, #3348]!	; 0xd14

000113d4 <__aeabi_uidiv@plt>:
   113d4:	e28fc600 	add	ip, pc, #0, 12
   113d8:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   113dc:	e5bcfd0c 	ldr	pc, [ip, #3340]!	; 0xd0c

000113e0 <fgets@plt>:
   113e0:	e28fc600 	add	ip, pc, #0, 12
   113e4:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   113e8:	e5bcfd04 	ldr	pc, [ip, #3332]!	; 0xd04

000113ec <fputc@plt>:
   113ec:	e28fc600 	add	ip, pc, #0, 12
   113f0:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   113f4:	e5bcfcfc 	ldr	pc, [ip, #3324]!	; 0xcfc

000113f8 <fwrite@plt>:
   113f8:	e28fc600 	add	ip, pc, #0, 12
   113fc:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11400:	e5bcfcf4 	ldr	pc, [ip, #3316]!	; 0xcf4

00011404 <memcpy@plt>:
   11404:	e28fc600 	add	ip, pc, #0, 12
   11408:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   1140c:	e5bcfcec 	ldr	pc, [ip, #3308]!	; 0xcec

00011410 <htons@plt>:
   11410:	e28fc600 	add	ip, pc, #0, 12
   11414:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11418:	e5bcfce4 	ldr	pc, [ip, #3300]!	; 0xce4

0001141c <geteuid@plt>:
   1141c:	e28fc600 	add	ip, pc, #0, 12
   11420:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11424:	e5bcfcdc 	ldr	pc, [ip, #3292]!	; 0xcdc

00011428 <strlen@plt>:
   11428:	e28fc600 	add	ip, pc, #0, 12
   1142c:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11430:	e5bcfcd4 	ldr	pc, [ip, #3284]!	; 0xcd4

00011434 <munmap@plt>:
   11434:	e28fc600 	add	ip, pc, #0, 12
   11438:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   1143c:	e5bcfccc 	ldr	pc, [ip, #3276]!	; 0xccc

00011440 <fprintf@plt>:
   11440:	e28fc600 	add	ip, pc, #0, 12
   11444:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11448:	e5bcfcc4 	ldr	pc, [ip, #3268]!	; 0xcc4

0001144c <fclose@plt>:
   1144c:	e28fc600 	add	ip, pc, #0, 12
   11450:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11454:	e5bcfcbc 	ldr	pc, [ip, #3260]!	; 0xcbc

00011458 <atof@plt>:
   11458:	e28fc600 	add	ip, pc, #0, 12
   1145c:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11460:	e5bcfcb4 	ldr	pc, [ip, #3252]!	; 0xcb4

00011464 <uuid_parse@plt>:
   11464:	e28fc600 	add	ip, pc, #0, 12
   11468:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   1146c:	e5bcfcac 	ldr	pc, [ip, #3244]!	; 0xcac

00011470 <__popcountsi2@plt>:
   11470:	e28fc600 	add	ip, pc, #0, 12
   11474:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11478:	e5bcfca4 	ldr	pc, [ip, #3236]!	; 0xca4

0001147c <strcmp@plt>:
   1147c:	e28fc600 	add	ip, pc, #0, 12
   11480:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11484:	e5bcfc9c 	ldr	pc, [ip, #3228]!	; 0xc9c

00011488 <time@plt>:
   11488:	e28fc600 	add	ip, pc, #0, 12
   1148c:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11490:	e5bcfc94 	ldr	pc, [ip, #3220]!	; 0xc94

00011494 <__errno_location@plt>:
   11494:	e28fc600 	add	ip, pc, #0, 12
   11498:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   1149c:	e5bcfc8c 	ldr	pc, [ip, #3212]!	; 0xc8c

000114a0 <strncpy@plt>:
   114a0:	e28fc600 	add	ip, pc, #0, 12
   114a4:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   114a8:	e5bcfc84 	ldr	pc, [ip, #3204]!	; 0xc84

000114ac <fflush@plt>:
   114ac:	e28fc600 	add	ip, pc, #0, 12
   114b0:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   114b4:	e5bcfc7c 	ldr	pc, [ip, #3196]!	; 0xc7c

000114b8 <memcmp@plt>:
   114b8:	e28fc600 	add	ip, pc, #0, 12
   114bc:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   114c0:	e5bcfc74 	ldr	pc, [ip, #3188]!	; 0xc74

000114c4 <__cxa_guard_acquire@plt>:
   114c4:	e28fc600 	add	ip, pc, #0, 12
   114c8:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   114cc:	e5bcfc6c 	ldr	pc, [ip, #3180]!	; 0xc6c

000114d0 <isxdigit@plt>:
   114d0:	e28fc600 	add	ip, pc, #0, 12
   114d4:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   114d8:	e5bcfc64 	ldr	pc, [ip, #3172]!	; 0xc64

000114dc <__libc_start_main@plt>:
   114dc:	e28fc600 	add	ip, pc, #0, 12
   114e0:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   114e4:	e5bcfc5c 	ldr	pc, [ip, #3164]!	; 0xc5c

000114e8 <__gmon_start__@plt>:
   114e8:	e28fc600 	add	ip, pc, #0, 12
   114ec:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   114f0:	e5bcfc54 	ldr	pc, [ip, #3156]!	; 0xc54

000114f4 <__cxa_pure_virtual@plt>:
   114f4:	e28fc600 	add	ip, pc, #0, 12
   114f8:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   114fc:	e5bcfc4c 	ldr	pc, [ip, #3148]!	; 0xc4c

00011500 <vsnprintf@plt>:
   11500:	e28fc600 	add	ip, pc, #0, 12
   11504:	e28cca4a 	add	ip, ip, #303104	; 0x4a000
   11508:	e5bcfc44 	ldr	pc, [ip, #3140]!	; 0xc44

Disassembly of section .text:

00011510 <_start>:
   11510:	e3a0b000 	mov	fp, #0
   11514:	e3a0e000 	mov	lr, #0
   11518:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
   1151c:	e1a0200d 	mov	r2, sp
   11520:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)
   11524:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   11528:	e59fc010 	ldr	ip, [pc, #16]	; 11540 <_start+0x30>
   1152c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
   11530:	e59f000c 	ldr	r0, [pc, #12]	; 11544 <_start+0x34>
   11534:	e59f300c 	ldr	r3, [pc, #12]	; 11548 <_start+0x38>
   11538:	ebffffe7 	bl	114dc <__libc_start_main@plt>
   1153c:	ebffff5c 	bl	112b4 <abort@plt>
   11540:	00044148 	.word	0x00044148
   11544:	00012890 	.word	0x00012890
   11548:	000440e8 	.word	0x000440e8

0001154c <call_weak_fn>:
   1154c:	e59f3014 	ldr	r3, [pc, #20]	; 11568 <call_weak_fn+0x1c>
   11550:	e59f2014 	ldr	r2, [pc, #20]	; 1156c <call_weak_fn+0x20>
   11554:	e08f3003 	add	r3, pc, r3
   11558:	e7932002 	ldr	r2, [r3, r2]
   1155c:	e3520000 	cmp	r2, #0
   11560:	012fff1e 	bxeq	lr
   11564:	eaffffdf 	b	114e8 <__gmon_start__@plt>
   11568:	0004aaa4 	.word	0x0004aaa4
   1156c:	00000150 	.word	0x00000150

00011570 <deregister_tm_clones>:
   11570:	e59f0018 	ldr	r0, [pc, #24]	; 11590 <deregister_tm_clones+0x20>
   11574:	e59f3018 	ldr	r3, [pc, #24]	; 11594 <deregister_tm_clones+0x24>
   11578:	e1530000 	cmp	r3, r0
   1157c:	012fff1e 	bxeq	lr
   11580:	e59f3010 	ldr	r3, [pc, #16]	; 11598 <deregister_tm_clones+0x28>
   11584:	e3530000 	cmp	r3, #0
   11588:	012fff1e 	bxeq	lr
   1158c:	e12fff13 	bx	r3
   11590:	0005c294 	.word	0x0005c294
   11594:	0005c294 	.word	0x0005c294
   11598:	00000000 	.word	0x00000000

0001159c <register_tm_clones>:
   1159c:	e59f0024 	ldr	r0, [pc, #36]	; 115c8 <register_tm_clones+0x2c>
   115a0:	e59f1024 	ldr	r1, [pc, #36]	; 115cc <register_tm_clones+0x30>
   115a4:	e0411000 	sub	r1, r1, r0
   115a8:	e1a01141 	asr	r1, r1, #2
   115ac:	e0811fa1 	add	r1, r1, r1, lsr #31
   115b0:	e1b010c1 	asrs	r1, r1, #1
   115b4:	012fff1e 	bxeq	lr
   115b8:	e59f3010 	ldr	r3, [pc, #16]	; 115d0 <register_tm_clones+0x34>
   115bc:	e3530000 	cmp	r3, #0
   115c0:	012fff1e 	bxeq	lr
   115c4:	e12fff13 	bx	r3
   115c8:	0005c294 	.word	0x0005c294
   115cc:	0005c294 	.word	0x0005c294
   115d0:	00000000 	.word	0x00000000

000115d4 <__do_global_dtors_aux>:
   115d4:	e92d4010 	push	{r4, lr}
   115d8:	e59f4018 	ldr	r4, [pc, #24]	; 115f8 <__do_global_dtors_aux+0x24>
   115dc:	e5d43000 	ldrb	r3, [r4]
   115e0:	e3530000 	cmp	r3, #0
   115e4:	18bd8010 	popne	{r4, pc}
   115e8:	ebffffe0 	bl	11570 <deregister_tm_clones>
   115ec:	e3a03001 	mov	r3, #1
   115f0:	e5c43000 	strb	r3, [r4]
   115f4:	e8bd8010 	pop	{r4, pc}
   115f8:	0005c29c 	.word	0x0005c29c

000115fc <frame_dummy>:
   115fc:	eaffffe6 	b	1159c <register_tm_clones>

00011600 <Hardware::Get()>:
   11600:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11604:	e28db000 	add	fp, sp, #0
   11608:	e59f3010 	ldr	r3, [pc, #16]	; 11620 <Hardware::Get()+0x20>
   1160c:	e5933000 	ldr	r3, [r3]
   11610:	e1a00003 	mov	r0, r3
   11614:	e28bd000 	add	sp, fp, #0
   11618:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1161c:	e12fff1e 	bx	lr
   11620:	0005f3dc 	.word	0x0005f3dc

00011624 <NetworkStore::~NetworkStore()>:
   11624:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11628:	e28db000 	add	fp, sp, #0
   1162c:	e24dd00c 	sub	sp, sp, #12
   11630:	e50b0008 	str	r0, [fp, #-8]
   11634:	e59f2018 	ldr	r2, [pc, #24]	; 11654 <NetworkStore::~NetworkStore()+0x30>
   11638:	e51b3008 	ldr	r3, [fp, #-8]
   1163c:	e5832000 	str	r2, [r3]
   11640:	e51b3008 	ldr	r3, [fp, #-8]
   11644:	e1a00003 	mov	r0, r3
   11648:	e28bd000 	add	sp, fp, #0
   1164c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11650:	e12fff1e 	bx	lr
   11654:	00044510 	.word	0x00044510

00011658 <NetworkStore::~NetworkStore()>:
   11658:	e92d4800 	push	{fp, lr}
   1165c:	e28db004 	add	fp, sp, #4
   11660:	e24dd008 	sub	sp, sp, #8
   11664:	e50b0008 	str	r0, [fp, #-8]
   11668:	e51b0008 	ldr	r0, [fp, #-8]
   1166c:	ebffffec 	bl	11624 <NetworkStore::~NetworkStore()>
   11670:	e51b0008 	ldr	r0, [fp, #-8]
   11674:	ebffff23 	bl	11308 <operator delete(void*)@plt>
   11678:	e51b3008 	ldr	r3, [fp, #-8]
   1167c:	e1a00003 	mov	r0, r3
   11680:	e24bd004 	sub	sp, fp, #4
   11684:	e8bd8800 	pop	{fp, pc}

00011688 <Network::SetNetworkStore(NetworkStore*)>:
   11688:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1168c:	e28db000 	add	fp, sp, #0
   11690:	e24dd00c 	sub	sp, sp, #12
   11694:	e50b0008 	str	r0, [fp, #-8]
   11698:	e50b100c 	str	r1, [fp, #-12]
   1169c:	e51b3008 	ldr	r3, [fp, #-8]
   116a0:	e51b200c 	ldr	r2, [fp, #-12]
   116a4:	e58320b4 	str	r2, [r3, #180]	; 0xb4
   116a8:	e1a00000 	nop			; (mov r0, r0)
   116ac:	e28bd000 	add	sp, fp, #0
   116b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   116b4:	e12fff1e 	bx	lr

000116b8 <NetworkParamsStore::~NetworkParamsStore()>:
   116b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   116bc:	e28db000 	add	fp, sp, #0
   116c0:	e24dd00c 	sub	sp, sp, #12
   116c4:	e50b0008 	str	r0, [fp, #-8]
   116c8:	e59f2018 	ldr	r2, [pc, #24]	; 116e8 <NetworkParamsStore::~NetworkParamsStore()+0x30>
   116cc:	e51b3008 	ldr	r3, [fp, #-8]
   116d0:	e5832000 	str	r2, [r3]
   116d4:	e51b3008 	ldr	r3, [fp, #-8]
   116d8:	e1a00003 	mov	r0, r3
   116dc:	e28bd000 	add	sp, fp, #0
   116e0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   116e4:	e12fff1e 	bx	lr
   116e8:	000444f8 	.word	0x000444f8

000116ec <NetworkParamsStore::~NetworkParamsStore()>:
   116ec:	e92d4800 	push	{fp, lr}
   116f0:	e28db004 	add	fp, sp, #4
   116f4:	e24dd008 	sub	sp, sp, #8
   116f8:	e50b0008 	str	r0, [fp, #-8]
   116fc:	e51b0008 	ldr	r0, [fp, #-8]
   11700:	ebffffec 	bl	116b8 <NetworkParamsStore::~NetworkParamsStore()>
   11704:	e51b0008 	ldr	r0, [fp, #-8]
   11708:	ebfffefe 	bl	11308 <operator delete(void*)@plt>
   1170c:	e51b3008 	ldr	r3, [fp, #-8]
   11710:	e1a00003 	mov	r0, r3
   11714:	e24bd004 	sub	sp, fp, #4
   11718:	e8bd8800 	pop	{fp, pc}

0001171c <ConfigStore::~ConfigStore()>:
   1171c:	e92d4800 	push	{fp, lr}
   11720:	e28db004 	add	fp, sp, #4
   11724:	e24dd008 	sub	sp, sp, #8
   11728:	e50b0008 	str	r0, [fp, #-8]
   1172c:	e51b0008 	ldr	r0, [fp, #-8]
   11730:	eb00875b 	bl	334a4 <ConfigStore::Flash()>
   11734:	e1a03000 	mov	r3, r0
   11738:	e3530000 	cmp	r3, #0
   1173c:	0a000000 	beq	11744 <ConfigStore::~ConfigStore()+0x28>
   11740:	eafffff9 	b	1172c <ConfigStore::~ConfigStore()+0x10>
   11744:	e51b3008 	ldr	r3, [fp, #-8]
   11748:	e1a00003 	mov	r0, r3
   1174c:	eb008830 	bl	33814 <StoreDevice::~StoreDevice()>
   11750:	e51b3008 	ldr	r3, [fp, #-8]
   11754:	e1a00003 	mov	r0, r3
   11758:	e24bd004 	sub	sp, fp, #4
   1175c:	e8bd8800 	pop	{fp, pc}

00011760 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>:
   11760:	e92d4800 	push	{fp, lr}
   11764:	e28db004 	add	fp, sp, #4
   11768:	e24dd020 	sub	sp, sp, #32
   1176c:	e50b0008 	str	r0, [fp, #-8]
   11770:	e50b100c 	str	r1, [fp, #-12]
   11774:	e50b2010 	str	r2, [fp, #-16]
   11778:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   1177c:	e3a03000 	mov	r3, #0
   11780:	e58d3008 	str	r3, [sp, #8]
   11784:	e3a03000 	mov	r3, #0
   11788:	e58d3004 	str	r3, [sp, #4]
   1178c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   11790:	e58d3000 	str	r3, [sp]
   11794:	e51b3010 	ldr	r3, [fp, #-16]
   11798:	e3a02000 	mov	r2, #0
   1179c:	e51b100c 	ldr	r1, [fp, #-12]
   117a0:	e51b0008 	ldr	r0, [fp, #-8]
   117a4:	eb008651 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   117a8:	e1a00000 	nop			; (mov r0, r0)
   117ac:	e24bd004 	sub	sp, fp, #4
   117b0:	e8bd8800 	pop	{fp, pc}

000117b4 <ConfigStore::Get()>:
   117b4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   117b8:	e28db000 	add	fp, sp, #0
   117bc:	e59f3010 	ldr	r3, [pc, #16]	; 117d4 <ConfigStore::Get()+0x20>
   117c0:	e5933000 	ldr	r3, [r3]
   117c4:	e1a00003 	mov	r0, r3
   117c8:	e28bd000 	add	sp, fp, #0
   117cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   117d0:	e12fff1e 	bx	lr
   117d4:	0005ec3c 	.word	0x0005ec3c

000117d8 <StoreNetwork::Update(networkparams::Params const*)>:
   117d8:	e92d4800 	push	{fp, lr}
   117dc:	e28db004 	add	fp, sp, #4
   117e0:	e24dd008 	sub	sp, sp, #8
   117e4:	e50b0008 	str	r0, [fp, #-8]
   117e8:	e50b100c 	str	r1, [fp, #-12]
   117ec:	ebfffff0 	bl	117b4 <ConfigStore::Get()>
   117f0:	e3a0305e 	mov	r3, #94	; 0x5e
   117f4:	e51b200c 	ldr	r2, [fp, #-12]
   117f8:	e3a01000 	mov	r1, #0
   117fc:	ebffffd7 	bl	11760 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>
   11800:	e1a00000 	nop			; (mov r0, r0)
   11804:	e24bd004 	sub	sp, fp, #4
   11808:	e8bd8800 	pop	{fp, pc}

0001180c <StoreNetwork::Copy(networkparams::Params*)>:
   1180c:	e92d4800 	push	{fp, lr}
   11810:	e28db004 	add	fp, sp, #4
   11814:	e24dd010 	sub	sp, sp, #16
   11818:	e50b0008 	str	r0, [fp, #-8]
   1181c:	e50b100c 	str	r1, [fp, #-12]
   11820:	ebffffe3 	bl	117b4 <ConfigStore::Get()>
   11824:	e3a03001 	mov	r3, #1
   11828:	e58d3004 	str	r3, [sp, #4]
   1182c:	e3a03000 	mov	r3, #0
   11830:	e58d3000 	str	r3, [sp]
   11834:	e3a0305e 	mov	r3, #94	; 0x5e
   11838:	e51b200c 	ldr	r2, [fp, #-12]
   1183c:	e3a01000 	mov	r1, #0
   11840:	eb008697 	bl	332a4 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
   11844:	e1a00000 	nop			; (mov r0, r0)
   11848:	e24bd004 	sub	sp, fp, #4
   1184c:	e8bd8800 	pop	{fp, pc}

00011850 <StoreNetwork::SaveIp(unsigned int)>:
   11850:	e92d4800 	push	{fp, lr}
   11854:	e28db004 	add	fp, sp, #4
   11858:	e24dd018 	sub	sp, sp, #24
   1185c:	e50b0008 	str	r0, [fp, #-8]
   11860:	e50b100c 	str	r1, [fp, #-12]
   11864:	ebffffd2 	bl	117b4 <ConfigStore::Get()>
   11868:	e24b200c 	sub	r2, fp, #12
   1186c:	e3a03000 	mov	r3, #0
   11870:	e58d3008 	str	r3, [sp, #8]
   11874:	e3a03002 	mov	r3, #2
   11878:	e58d3004 	str	r3, [sp, #4]
   1187c:	e3a03004 	mov	r3, #4
   11880:	e58d3000 	str	r3, [sp]
   11884:	e1a03002 	mov	r3, r2
   11888:	e3a02004 	mov	r2, #4
   1188c:	e3a01000 	mov	r1, #0
   11890:	eb008616 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   11894:	e1a00000 	nop			; (mov r0, r0)
   11898:	e24bd004 	sub	sp, fp, #4
   1189c:	e8bd8800 	pop	{fp, pc}

000118a0 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
   118a0:	e2400004 	sub	r0, r0, #4
   118a4:	eaffffe9 	b	11850 <StoreNetwork::SaveIp(unsigned int)>

000118a8 <StoreNetwork::SaveNetMask(unsigned int)>:
   118a8:	e92d4800 	push	{fp, lr}
   118ac:	e28db004 	add	fp, sp, #4
   118b0:	e24dd018 	sub	sp, sp, #24
   118b4:	e50b0008 	str	r0, [fp, #-8]
   118b8:	e50b100c 	str	r1, [fp, #-12]
   118bc:	ebffffbc 	bl	117b4 <ConfigStore::Get()>
   118c0:	e24b200c 	sub	r2, fp, #12
   118c4:	e3a03000 	mov	r3, #0
   118c8:	e58d3008 	str	r3, [sp, #8]
   118cc:	e3a03004 	mov	r3, #4
   118d0:	e58d3004 	str	r3, [sp, #4]
   118d4:	e3a03004 	mov	r3, #4
   118d8:	e58d3000 	str	r3, [sp]
   118dc:	e1a03002 	mov	r3, r2
   118e0:	e3a02008 	mov	r2, #8
   118e4:	e3a01000 	mov	r1, #0
   118e8:	eb008600 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   118ec:	e1a00000 	nop			; (mov r0, r0)
   118f0:	e24bd004 	sub	sp, fp, #4
   118f4:	e8bd8800 	pop	{fp, pc}

000118f8 <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
   118f8:	e2400004 	sub	r0, r0, #4
   118fc:	eaffffe9 	b	118a8 <StoreNetwork::SaveNetMask(unsigned int)>

00011900 <StoreNetwork::SaveGatewayIp(unsigned int)>:
   11900:	e92d4800 	push	{fp, lr}
   11904:	e28db004 	add	fp, sp, #4
   11908:	e24dd018 	sub	sp, sp, #24
   1190c:	e50b0008 	str	r0, [fp, #-8]
   11910:	e50b100c 	str	r1, [fp, #-12]
   11914:	ebffffa6 	bl	117b4 <ConfigStore::Get()>
   11918:	e24b200c 	sub	r2, fp, #12
   1191c:	e3a03000 	mov	r3, #0
   11920:	e58d3008 	str	r3, [sp, #8]
   11924:	e3a03008 	mov	r3, #8
   11928:	e58d3004 	str	r3, [sp, #4]
   1192c:	e3a03004 	mov	r3, #4
   11930:	e58d3000 	str	r3, [sp]
   11934:	e1a03002 	mov	r3, r2
   11938:	e3a0200c 	mov	r2, #12
   1193c:	e3a01000 	mov	r1, #0
   11940:	eb0085ea 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   11944:	e1a00000 	nop			; (mov r0, r0)
   11948:	e24bd004 	sub	sp, fp, #4
   1194c:	e8bd8800 	pop	{fp, pc}

00011950 <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
   11950:	e2400004 	sub	r0, r0, #4
   11954:	eaffffe9 	b	11900 <StoreNetwork::SaveGatewayIp(unsigned int)>

00011958 <StoreNetwork::SaveHostName(char const*, unsigned int)>:
   11958:	e92d4800 	push	{fp, lr}
   1195c:	e28db004 	add	fp, sp, #4
   11960:	e24dd028 	sub	sp, sp, #40	; 0x28
   11964:	e50b0010 	str	r0, [fp, #-16]
   11968:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1196c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   11970:	e3a03040 	mov	r3, #64	; 0x40
   11974:	e50b3008 	str	r3, [fp, #-8]
   11978:	e24b2008 	sub	r2, fp, #8
   1197c:	e24b3018 	sub	r3, fp, #24
   11980:	e1a01002 	mov	r1, r2
   11984:	e1a00003 	mov	r0, r3
   11988:	eb00068d 	bl	133c4 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>
   1198c:	e1a03000 	mov	r3, r0
   11990:	e5933000 	ldr	r3, [r3]
   11994:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   11998:	ebffff85 	bl	117b4 <ConfigStore::Get()>
   1199c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   119a0:	e3a02000 	mov	r2, #0
   119a4:	e58d2008 	str	r2, [sp, #8]
   119a8:	e3a02020 	mov	r2, #32
   119ac:	e58d2004 	str	r2, [sp, #4]
   119b0:	e58d3000 	str	r3, [sp]
   119b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   119b8:	e3a02015 	mov	r2, #21
   119bc:	e3a01000 	mov	r1, #0
   119c0:	eb0085ca 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   119c4:	e1a00000 	nop			; (mov r0, r0)
   119c8:	e24bd004 	sub	sp, fp, #4
   119cc:	e8bd8800 	pop	{fp, pc}

000119d0 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
   119d0:	e2400004 	sub	r0, r0, #4
   119d4:	eaffffdf 	b	11958 <StoreNetwork::SaveHostName(char const*, unsigned int)>

000119d8 <StoreNetwork::SaveDhcp(bool)>:
   119d8:	e92d4800 	push	{fp, lr}
   119dc:	e28db004 	add	fp, sp, #4
   119e0:	e24dd018 	sub	sp, sp, #24
   119e4:	e50b0008 	str	r0, [fp, #-8]
   119e8:	e1a03001 	mov	r3, r1
   119ec:	e54b3009 	strb	r3, [fp, #-9]
   119f0:	ebffff6f 	bl	117b4 <ConfigStore::Get()>
   119f4:	e24b2009 	sub	r2, fp, #9
   119f8:	e3a03000 	mov	r3, #0
   119fc:	e58d3008 	str	r3, [sp, #8]
   11a00:	e3a03001 	mov	r3, #1
   11a04:	e58d3004 	str	r3, [sp, #4]
   11a08:	e3a03001 	mov	r3, #1
   11a0c:	e58d3000 	str	r3, [sp]
   11a10:	e1a03002 	mov	r3, r2
   11a14:	e3a02014 	mov	r2, #20
   11a18:	e3a01000 	mov	r1, #0
   11a1c:	eb0085b3 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   11a20:	e1a00000 	nop			; (mov r0, r0)
   11a24:	e24bd004 	sub	sp, fp, #4
   11a28:	e8bd8800 	pop	{fp, pc}

00011a2c <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
   11a2c:	e2400004 	sub	r0, r0, #4
   11a30:	eaffffe8 	b	119d8 <StoreNetwork::SaveDhcp(bool)>

00011a34 <StoreNetwork::Get()>:
   11a34:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11a38:	e28db000 	add	fp, sp, #0
   11a3c:	e59f3010 	ldr	r3, [pc, #16]	; 11a54 <StoreNetwork::Get()+0x20>
   11a40:	e5933000 	ldr	r3, [r3]
   11a44:	e1a00003 	mov	r0, r3
   11a48:	e28bd000 	add	sp, fp, #0
   11a4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11a50:	e12fff1e 	bx	lr
   11a54:	0005dc24 	.word	0x0005dc24

00011a58 <DisplaySet::GetColumns() const>:
   11a58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11a5c:	e28db000 	add	fp, sp, #0
   11a60:	e24dd00c 	sub	sp, sp, #12
   11a64:	e50b0008 	str	r0, [fp, #-8]
   11a68:	e51b3008 	ldr	r3, [fp, #-8]
   11a6c:	e5933004 	ldr	r3, [r3, #4]
   11a70:	e1a00003 	mov	r0, r3
   11a74:	e28bd000 	add	sp, fp, #0
   11a78:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11a7c:	e12fff1e 	bx	lr

00011a80 <DisplaySet::GetRows() const>:
   11a80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11a84:	e28db000 	add	fp, sp, #0
   11a88:	e24dd00c 	sub	sp, sp, #12
   11a8c:	e50b0008 	str	r0, [fp, #-8]
   11a90:	e51b3008 	ldr	r3, [fp, #-8]
   11a94:	e5933008 	ldr	r3, [r3, #8]
   11a98:	e1a00003 	mov	r0, r3
   11a9c:	e28bd000 	add	sp, fp, #0
   11aa0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11aa4:	e12fff1e 	bx	lr

00011aa8 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
   11aa8:	e92d4800 	push	{fp, lr}
   11aac:	e28db004 	add	fp, sp, #4
   11ab0:	e24dd010 	sub	sp, sp, #16
   11ab4:	e50b0010 	str	r0, [fp, #-16]
   11ab8:	e1a03001 	mov	r3, r1
   11abc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   11ac0:	e1a03002 	mov	r3, r2
   11ac4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
   11ac8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   11acc:	e54b3008 	strb	r3, [fp, #-8]
   11ad0:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
   11ad4:	e1a03443 	asr	r3, r3, #8
   11ad8:	e6ef3073 	uxtb	r3, r3
   11adc:	e54b3007 	strb	r3, [fp, #-7]
   11ae0:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
   11ae4:	e6ef3073 	uxtb	r3, r3
   11ae8:	e54b3006 	strb	r3, [fp, #-6]
   11aec:	e51b0010 	ldr	r0, [fp, #-16]
   11af0:	eb000006 	bl	11b10 <HAL_I2C::Setup()>
   11af4:	e24b3008 	sub	r3, fp, #8
   11af8:	e3a01003 	mov	r1, #3
   11afc:	e1a00003 	mov	r0, r3
   11b00:	eb00c410 	bl	42b48 <bcm2835_i2c_write>
   11b04:	e1a00000 	nop			; (mov r0, r0)
   11b08:	e24bd004 	sub	sp, fp, #4
   11b0c:	e8bd8800 	pop	{fp, pc}

00011b10 <HAL_I2C::Setup()>:
   11b10:	e92d4800 	push	{fp, lr}
   11b14:	e28db004 	add	fp, sp, #4
   11b18:	e24dd008 	sub	sp, sp, #8
   11b1c:	e50b0008 	str	r0, [fp, #-8]
   11b20:	e51b3008 	ldr	r3, [fp, #-8]
   11b24:	e5d33000 	ldrb	r3, [r3]
   11b28:	e1a00003 	mov	r0, r3
   11b2c:	eb00c3bd 	bl	42a28 <bcm2835_i2c_setSlaveAddress>
   11b30:	e51b3008 	ldr	r3, [fp, #-8]
   11b34:	e5933004 	ldr	r3, [r3, #4]
   11b38:	e1a00003 	mov	r0, r3
   11b3c:	eb00c3ec 	bl	42af4 <bcm2835_i2c_set_baudrate>
   11b40:	e1a00000 	nop			; (mov r0, r0)
   11b44:	e24bd004 	sub	sp, fp, #4
   11b48:	e8bd8800 	pop	{fp, pc}

00011b4c <Display::~Display()>:
   11b4c:	e92d4800 	push	{fp, lr}
   11b50:	e28db004 	add	fp, sp, #4
   11b54:	e24dd008 	sub	sp, sp, #8
   11b58:	e50b0008 	str	r0, [fp, #-8]
   11b5c:	e59f3048 	ldr	r3, [pc, #72]	; 11bac <Display::~Display()+0x60>
   11b60:	e3a02000 	mov	r2, #0
   11b64:	e5832000 	str	r2, [r3]
   11b68:	e51b3008 	ldr	r3, [fp, #-8]
   11b6c:	e5933018 	ldr	r3, [r3, #24]
   11b70:	e3530000 	cmp	r3, #0
   11b74:	0a000008 	beq	11b9c <Display::~Display()+0x50>
   11b78:	e51b3008 	ldr	r3, [fp, #-8]
   11b7c:	e5932018 	ldr	r2, [r3, #24]
   11b80:	e51b3008 	ldr	r3, [fp, #-8]
   11b84:	e5933018 	ldr	r3, [r3, #24]
   11b88:	e5933000 	ldr	r3, [r3]
   11b8c:	e2833004 	add	r3, r3, #4
   11b90:	e5933000 	ldr	r3, [r3]
   11b94:	e1a00002 	mov	r0, r2
   11b98:	e12fff33 	blx	r3
   11b9c:	e51b3008 	ldr	r3, [fp, #-8]
   11ba0:	e1a00003 	mov	r0, r3
   11ba4:	e24bd004 	sub	sp, fp, #4
   11ba8:	e8bd8800 	pop	{fp, pc}
   11bac:	0005f2ec 	.word	0x0005f2ec

00011bb0 <Display::isDetected() const>:
   11bb0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   11bb4:	e28db000 	add	fp, sp, #0
   11bb8:	e24dd00c 	sub	sp, sp, #12
   11bbc:	e50b0008 	str	r0, [fp, #-8]
   11bc0:	e51b3008 	ldr	r3, [fp, #-8]
   11bc4:	e5933018 	ldr	r3, [r3, #24]
   11bc8:	e3530000 	cmp	r3, #0
   11bcc:	13a03001 	movne	r3, #1
   11bd0:	03a03000 	moveq	r3, #0
   11bd4:	e6ef3073 	uxtb	r3, r3
   11bd8:	e1a00003 	mov	r0, r3
   11bdc:	e28bd000 	add	sp, fp, #0
   11be0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   11be4:	e12fff1e 	bx	lr

00011be8 <Display::PutChar(int)>:
   11be8:	e92d4800 	push	{fp, lr}
   11bec:	e28db004 	add	fp, sp, #4
   11bf0:	e24dd008 	sub	sp, sp, #8
   11bf4:	e50b0008 	str	r0, [fp, #-8]
   11bf8:	e50b100c 	str	r1, [fp, #-12]
   11bfc:	e51b3008 	ldr	r3, [fp, #-8]
   11c00:	e5933018 	ldr	r3, [r3, #24]
   11c04:	e3530000 	cmp	r3, #0
   11c08:	0a00000a 	beq	11c38 <Display::PutChar(int)+0x50>
   11c0c:	e51b3008 	ldr	r3, [fp, #-8]
   11c10:	e5932018 	ldr	r2, [r3, #24]
   11c14:	e51b3008 	ldr	r3, [fp, #-8]
   11c18:	e5933018 	ldr	r3, [r3, #24]
   11c1c:	e5933000 	ldr	r3, [r3]
   11c20:	e2833014 	add	r3, r3, #20
   11c24:	e5933000 	ldr	r3, [r3]
   11c28:	e51b100c 	ldr	r1, [fp, #-12]
   11c2c:	e1a00002 	mov	r0, r2
   11c30:	e12fff33 	blx	r3
   11c34:	ea000000 	b	11c3c <Display::PutChar(int)+0x54>
   11c38:	e1a00000 	nop			; (mov r0, r0)
   11c3c:	e24bd004 	sub	sp, fp, #4
   11c40:	e8bd8800 	pop	{fp, pc}

00011c44 <Display::Write(unsigned int, char const*)>:
   11c44:	e92d4810 	push	{r4, fp, lr}
   11c48:	e28db008 	add	fp, sp, #8
   11c4c:	e24dd024 	sub	sp, sp, #36	; 0x24
   11c50:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   11c54:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   11c58:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   11c5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c60:	e5933018 	ldr	r3, [r3, #24]
   11c64:	e3530000 	cmp	r3, #0
   11c68:	1a000001 	bne	11c74 <Display::Write(unsigned int, char const*)+0x30>
   11c6c:	e3a03000 	mov	r3, #0
   11c70:	ea000027 	b	11d14 <Display::Write(unsigned int, char const*)+0xd0>
   11c74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   11c78:	e50b3010 	str	r3, [fp, #-16]
   11c7c:	e3a03000 	mov	r3, #0
   11c80:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   11c84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c88:	e5933018 	ldr	r3, [r3, #24]
   11c8c:	e1a00003 	mov	r0, r3
   11c90:	ebffff70 	bl	11a58 <DisplaySet::GetColumns() const>
   11c94:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11c98:	e51b3010 	ldr	r3, [fp, #-16]
   11c9c:	e5d33000 	ldrb	r3, [r3]
   11ca0:	e3530000 	cmp	r3, #0
   11ca4:	0a000007 	beq	11cc8 <Display::Write(unsigned int, char const*)+0x84>
   11ca8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   11cac:	e2832001 	add	r2, r3, #1
   11cb0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   11cb4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   11cb8:	e1520003 	cmp	r2, r3
   11cbc:	9a000001 	bls	11cc8 <Display::Write(unsigned int, char const*)+0x84>
   11cc0:	e3a03001 	mov	r3, #1
   11cc4:	ea000000 	b	11ccc <Display::Write(unsigned int, char const*)+0x88>
   11cc8:	e3a03000 	mov	r3, #0
   11ccc:	e3530000 	cmp	r3, #0
   11cd0:	0a000003 	beq	11ce4 <Display::Write(unsigned int, char const*)+0xa0>
   11cd4:	e51b3010 	ldr	r3, [fp, #-16]
   11cd8:	e2833001 	add	r3, r3, #1
   11cdc:	e50b3010 	str	r3, [fp, #-16]
   11ce0:	eaffffec 	b	11c98 <Display::Write(unsigned int, char const*)+0x54>
   11ce4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11ce8:	e5930018 	ldr	r0, [r3, #24]
   11cec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   11cf0:	e5933018 	ldr	r3, [r3, #24]
   11cf4:	e5933000 	ldr	r3, [r3]
   11cf8:	e283301c 	add	r3, r3, #28
   11cfc:	e5934000 	ldr	r4, [r3]
   11d00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   11d04:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   11d08:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   11d0c:	e12fff34 	blx	r4
   11d10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   11d14:	e1a00003 	mov	r0, r3
   11d18:	e24bd008 	sub	sp, fp, #8
   11d1c:	e8bd8810 	pop	{r4, fp, pc}

00011d20 <Display::Printf(unsigned int, char const*, ...)>:
   11d20:	e92d000c 	push	{r2, r3}
   11d24:	e92d4810 	push	{r4, fp, lr}
   11d28:	e28db008 	add	fp, sp, #8
   11d2c:	e24dd034 	sub	sp, sp, #52	; 0x34
   11d30:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
   11d34:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
   11d38:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   11d3c:	e5933018 	ldr	r3, [r3, #24]
   11d40:	e3530000 	cmp	r3, #0
   11d44:	1a000001 	bne	11d50 <Display::Printf(unsigned int, char const*, ...)+0x30>
   11d48:	e3a03000 	mov	r3, #0
   11d4c:	ea000013 	b	11da0 <Display::Printf(unsigned int, char const*, ...)+0x80>
   11d50:	e28b3008 	add	r3, fp, #8
   11d54:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   11d58:	e24b0030 	sub	r0, fp, #48	; 0x30
   11d5c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   11d60:	e59b2004 	ldr	r2, [fp, #4]
   11d64:	e3a01020 	mov	r1, #32
   11d68:	ebfffde4 	bl	11500 <vsnprintf@plt>
   11d6c:	e50b0010 	str	r0, [fp, #-16]
   11d70:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   11d74:	e5930018 	ldr	r0, [r3, #24]
   11d78:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   11d7c:	e5933018 	ldr	r3, [r3, #24]
   11d80:	e5933000 	ldr	r3, [r3]
   11d84:	e283301c 	add	r3, r3, #28
   11d88:	e5934000 	ldr	r4, [r3]
   11d8c:	e51b3010 	ldr	r3, [fp, #-16]
   11d90:	e24b2030 	sub	r2, fp, #48	; 0x30
   11d94:	e51b103c 	ldr	r1, [fp, #-60]	; 0xffffffc4
   11d98:	e12fff34 	blx	r4
   11d9c:	e51b3010 	ldr	r3, [fp, #-16]
   11da0:	e1a00003 	mov	r0, r3
   11da4:	e24bd008 	sub	sp, fp, #8
   11da8:	e8bd4810 	pop	{r4, fp, lr}
   11dac:	e28dd008 	add	sp, sp, #8
   11db0:	e12fff1e 	bx	lr

00011db4 <Display::TextStatus(char const*)>:
   11db4:	e92d4800 	push	{fp, lr}
   11db8:	e28db004 	add	fp, sp, #4
   11dbc:	e24dd018 	sub	sp, sp, #24
   11dc0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   11dc4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   11dc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11dcc:	e5933018 	ldr	r3, [r3, #24]
   11dd0:	e3530000 	cmp	r3, #0
   11dd4:	0a000038 	beq	11ebc <Display::TextStatus(char const*)+0x108>
   11dd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ddc:	e5933018 	ldr	r3, [r3, #24]
   11de0:	e1a00003 	mov	r0, r3
   11de4:	ebffff1b 	bl	11a58 <DisplaySet::GetColumns() const>
   11de8:	e50b000c 	str	r0, [fp, #-12]
   11dec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   11df0:	e5933018 	ldr	r3, [r3, #24]
   11df4:	e1a00003 	mov	r0, r3
   11df8:	ebffff20 	bl	11a80 <DisplaySet::GetRows() const>
   11dfc:	e50b0010 	str	r0, [fp, #-16]
   11e00:	e51b300c 	ldr	r3, [fp, #-12]
   11e04:	e3530000 	cmp	r3, #0
   11e08:	1a000004 	bne	11e20 <Display::TextStatus(char const*)+0x6c>
   11e0c:	e59f30b4 	ldr	r3, [pc, #180]	; 11ec8 <Display::TextStatus(char const*)+0x114>
   11e10:	e3a020aa 	mov	r2, #170	; 0xaa
   11e14:	e59f10b0 	ldr	r1, [pc, #176]	; 11ecc <Display::TextStatus(char const*)+0x118>
   11e18:	e59f00b0 	ldr	r0, [pc, #176]	; 11ed0 <Display::TextStatus(char const*)+0x11c>
   11e1c:	ebfffd3c 	bl	11314 <__assert_fail@plt>
   11e20:	e51b3010 	ldr	r3, [fp, #-16]
   11e24:	e3530000 	cmp	r3, #0
   11e28:	1a000004 	bne	11e40 <Display::TextStatus(char const*)+0x8c>
   11e2c:	e59f3094 	ldr	r3, [pc, #148]	; 11ec8 <Display::TextStatus(char const*)+0x114>
   11e30:	e3a020ab 	mov	r2, #171	; 0xab
   11e34:	e59f1090 	ldr	r1, [pc, #144]	; 11ecc <Display::TextStatus(char const*)+0x118>
   11e38:	e59f0094 	ldr	r0, [pc, #148]	; 11ed4 <Display::TextStatus(char const*)+0x120>
   11e3c:	ebfffd34 	bl	11314 <__assert_fail@plt>
   11e40:	e51b3010 	ldr	r3, [fp, #-16]
   11e44:	e2433001 	sub	r3, r3, #1
   11e48:	e1a02003 	mov	r2, r3
   11e4c:	e3a01000 	mov	r1, #0
   11e50:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11e54:	eb000036 	bl	11f34 <Display::SetCursorPos(unsigned int, unsigned int)>
   11e58:	e3a03000 	mov	r3, #0
   11e5c:	e50b3008 	str	r3, [fp, #-8]
   11e60:	e51b300c 	ldr	r3, [fp, #-12]
   11e64:	e2433001 	sub	r3, r3, #1
   11e68:	e51b2008 	ldr	r2, [fp, #-8]
   11e6c:	e1520003 	cmp	r2, r3
   11e70:	2a000006 	bcs	11e90 <Display::TextStatus(char const*)+0xdc>
   11e74:	e3a01020 	mov	r1, #32
   11e78:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11e7c:	ebffff59 	bl	11be8 <Display::PutChar(int)>
   11e80:	e51b3008 	ldr	r3, [fp, #-8]
   11e84:	e2833001 	add	r3, r3, #1
   11e88:	e50b3008 	str	r3, [fp, #-8]
   11e8c:	eafffff3 	b	11e60 <Display::TextStatus(char const*)+0xac>
   11e90:	e51b3010 	ldr	r3, [fp, #-16]
   11e94:	e2433001 	sub	r3, r3, #1
   11e98:	e1a02003 	mov	r2, r3
   11e9c:	e3a01000 	mov	r1, #0
   11ea0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11ea4:	eb000022 	bl	11f34 <Display::SetCursorPos(unsigned int, unsigned int)>
   11ea8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   11eac:	e51b1010 	ldr	r1, [fp, #-16]
   11eb0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   11eb4:	ebffff62 	bl	11c44 <Display::Write(unsigned int, char const*)>
   11eb8:	ea000000 	b	11ec0 <Display::TextStatus(char const*)+0x10c>
   11ebc:	e1a00000 	nop			; (mov r0, r0)
   11ec0:	e24bd004 	sub	sp, fp, #4
   11ec4:	e8bd8800 	pop	{fp, pc}
   11ec8:	000445b0 	.word	0x000445b0
   11ecc:	000441a8 	.word	0x000441a8
   11ed0:	000441d0 	.word	0x000441d0
   11ed4:	000441e0 	.word	0x000441e0

00011ed8 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
   11ed8:	e92d4800 	push	{fp, lr}
   11edc:	e28db004 	add	fp, sp, #4
   11ee0:	e24dd010 	sub	sp, sp, #16
   11ee4:	e50b0008 	str	r0, [fp, #-8]
   11ee8:	e50b100c 	str	r1, [fp, #-12]
   11eec:	e50b2010 	str	r2, [fp, #-16]
   11ef0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   11ef4:	e51b100c 	ldr	r1, [fp, #-12]
   11ef8:	e51b0008 	ldr	r0, [fp, #-8]
   11efc:	ebffffac 	bl	11db4 <Display::TextStatus(char const*)>
   11f00:	e51b1010 	ldr	r1, [fp, #-16]
   11f04:	e51b0008 	ldr	r0, [fp, #-8]
   11f08:	eb000047 	bl	1202c <Display::Status(Display7SegmentMessage)>
   11f0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   11f10:	e3730001 	cmn	r3, #1
   11f14:	0a000003 	beq	11f28 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x50>
   11f18:	e51b100c 	ldr	r1, [fp, #-12]
   11f1c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   11f20:	eb00b42e 	bl	3efe0 <console_status>
   11f24:	ea000000 	b	11f2c <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x54>
   11f28:	e1a00000 	nop			; (mov r0, r0)
   11f2c:	e24bd004 	sub	sp, fp, #4
   11f30:	e8bd8800 	pop	{fp, pc}

00011f34 <Display::SetCursorPos(unsigned int, unsigned int)>:
   11f34:	e92d4800 	push	{fp, lr}
   11f38:	e28db004 	add	fp, sp, #4
   11f3c:	e24dd010 	sub	sp, sp, #16
   11f40:	e50b0008 	str	r0, [fp, #-8]
   11f44:	e50b100c 	str	r1, [fp, #-12]
   11f48:	e50b2010 	str	r2, [fp, #-16]
   11f4c:	e51b3008 	ldr	r3, [fp, #-8]
   11f50:	e5933018 	ldr	r3, [r3, #24]
   11f54:	e3530000 	cmp	r3, #0
   11f58:	0a00000a 	beq	11f88 <Display::SetCursorPos(unsigned int, unsigned int)+0x54>
   11f5c:	e51b3008 	ldr	r3, [fp, #-8]
   11f60:	e5930018 	ldr	r0, [r3, #24]
   11f64:	e51b3008 	ldr	r3, [fp, #-8]
   11f68:	e5933018 	ldr	r3, [r3, #24]
   11f6c:	e5933000 	ldr	r3, [r3]
   11f70:	e2833020 	add	r3, r3, #32
   11f74:	e5933000 	ldr	r3, [r3]
   11f78:	e51b2010 	ldr	r2, [fp, #-16]
   11f7c:	e51b100c 	ldr	r1, [fp, #-12]
   11f80:	e12fff33 	blx	r3
   11f84:	ea000000 	b	11f8c <Display::SetCursorPos(unsigned int, unsigned int)+0x58>
   11f88:	e1a00000 	nop			; (mov r0, r0)
   11f8c:	e24bd004 	sub	sp, fp, #4
   11f90:	e8bd8800 	pop	{fp, pc}

00011f94 <Display::GetColumns() const>:
   11f94:	e92d4800 	push	{fp, lr}
   11f98:	e28db004 	add	fp, sp, #4
   11f9c:	e24dd008 	sub	sp, sp, #8
   11fa0:	e50b0008 	str	r0, [fp, #-8]
   11fa4:	e51b3008 	ldr	r3, [fp, #-8]
   11fa8:	e5933018 	ldr	r3, [r3, #24]
   11fac:	e3530000 	cmp	r3, #0
   11fb0:	1a000001 	bne	11fbc <Display::GetColumns() const+0x28>
   11fb4:	e3a03000 	mov	r3, #0
   11fb8:	ea000005 	b	11fd4 <Display::GetColumns() const+0x40>
   11fbc:	e51b3008 	ldr	r3, [fp, #-8]
   11fc0:	e5933018 	ldr	r3, [r3, #24]
   11fc4:	e1a00003 	mov	r0, r3
   11fc8:	ebfffea2 	bl	11a58 <DisplaySet::GetColumns() const>
   11fcc:	e1a03000 	mov	r3, r0
   11fd0:	e1a00000 	nop			; (mov r0, r0)
   11fd4:	e1a00003 	mov	r0, r3
   11fd8:	e24bd004 	sub	sp, fp, #4
   11fdc:	e8bd8800 	pop	{fp, pc}

00011fe0 <Display::GetRows() const>:
   11fe0:	e92d4800 	push	{fp, lr}
   11fe4:	e28db004 	add	fp, sp, #4
   11fe8:	e24dd008 	sub	sp, sp, #8
   11fec:	e50b0008 	str	r0, [fp, #-8]
   11ff0:	e51b3008 	ldr	r3, [fp, #-8]
   11ff4:	e5933018 	ldr	r3, [r3, #24]
   11ff8:	e3530000 	cmp	r3, #0
   11ffc:	1a000001 	bne	12008 <Display::GetRows() const+0x28>
   12000:	e3a03000 	mov	r3, #0
   12004:	ea000005 	b	12020 <Display::GetRows() const+0x40>
   12008:	e51b3008 	ldr	r3, [fp, #-8]
   1200c:	e5933018 	ldr	r3, [r3, #24]
   12010:	e1a00003 	mov	r0, r3
   12014:	ebfffe99 	bl	11a80 <DisplaySet::GetRows() const>
   12018:	e1a03000 	mov	r3, r0
   1201c:	e1a00000 	nop			; (mov r0, r0)
   12020:	e1a00003 	mov	r0, r3
   12024:	e24bd004 	sub	sp, fp, #4
   12028:	e8bd8800 	pop	{fp, pc}

0001202c <Display::Status(Display7SegmentMessage)>:
   1202c:	e92d4800 	push	{fp, lr}
   12030:	e28db004 	add	fp, sp, #4
   12034:	e24dd008 	sub	sp, sp, #8
   12038:	e50b0008 	str	r0, [fp, #-8]
   1203c:	e50b100c 	str	r1, [fp, #-12]
   12040:	e51b3008 	ldr	r3, [fp, #-8]
   12044:	e5d33011 	ldrb	r3, [r3, #17]
   12048:	e3530000 	cmp	r3, #0
   1204c:	0a000008 	beq	12074 <Display::Status(Display7SegmentMessage)+0x48>
   12050:	e51b3008 	ldr	r3, [fp, #-8]
   12054:	e2830008 	add	r0, r3, #8
   12058:	e51b300c 	ldr	r3, [fp, #-12]
   1205c:	e6ff3073 	uxth	r3, r3
   12060:	e1e03003 	mvn	r3, r3
   12064:	e6ff3073 	uxth	r3, r3
   12068:	e1a02003 	mov	r2, r3
   1206c:	e3a01012 	mov	r1, #18
   12070:	ebfffe8c 	bl	11aa8 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
   12074:	e1a00000 	nop			; (mov r0, r0)
   12078:	e24bd004 	sub	sp, fp, #4
   1207c:	e8bd8800 	pop	{fp, pc}

00012080 <Display::SetSleep(bool)>:
   12080:	e92d4800 	push	{fp, lr}
   12084:	e28db004 	add	fp, sp, #4
   12088:	e24dd008 	sub	sp, sp, #8
   1208c:	e50b0008 	str	r0, [fp, #-8]
   12090:	e1a03001 	mov	r3, r1
   12094:	e54b3009 	strb	r3, [fp, #-9]
   12098:	e51b3008 	ldr	r3, [fp, #-8]
   1209c:	e5933018 	ldr	r3, [r3, #24]
   120a0:	e3530000 	cmp	r3, #0
   120a4:	0a000019 	beq	12110 <Display::SetSleep(bool)+0x90>
   120a8:	e51b3008 	ldr	r3, [fp, #-8]
   120ac:	e55b2009 	ldrb	r2, [fp, #-9]
   120b0:	e5c32010 	strb	r2, [r3, #16]
   120b4:	e51b3008 	ldr	r3, [fp, #-8]
   120b8:	e5932018 	ldr	r2, [r3, #24]
   120bc:	e51b3008 	ldr	r3, [fp, #-8]
   120c0:	e5933018 	ldr	r3, [r3, #24]
   120c4:	e5933000 	ldr	r3, [r3]
   120c8:	e2833028 	add	r3, r3, #40	; 0x28
   120cc:	e5933000 	ldr	r3, [r3]
   120d0:	e55b1009 	ldrb	r1, [fp, #-9]
   120d4:	e1a00002 	mov	r0, r2
   120d8:	e12fff33 	blx	r3
   120dc:	e55b3009 	ldrb	r3, [fp, #-9]
   120e0:	e2233001 	eor	r3, r3, #1
   120e4:	e6ef3073 	uxtb	r3, r3
   120e8:	e3530000 	cmp	r3, #0
   120ec:	0a000008 	beq	12114 <Display::SetSleep(bool)+0x94>
   120f0:	ebfffd42 	bl	11600 <Hardware::Get()>
   120f4:	e1a03000 	mov	r3, r0
   120f8:	e1a00003 	mov	r0, r3
   120fc:	eb00b870 	bl	402c4 <Hardware::Millis()>
   12100:	e1a02000 	mov	r2, r0
   12104:	e51b3008 	ldr	r3, [fp, #-8]
   12108:	e5832004 	str	r2, [r3, #4]
   1210c:	ea000000 	b	12114 <Display::SetSleep(bool)+0x94>
   12110:	e1a00000 	nop			; (mov r0, r0)
   12114:	e24bd004 	sub	sp, fp, #4
   12118:	e8bd8800 	pop	{fp, pc}

0001211c <Display::Run()>:
   1211c:	e92d4800 	push	{fp, lr}
   12120:	e28db004 	add	fp, sp, #4
   12124:	e24dd008 	sub	sp, sp, #8
   12128:	e50b0008 	str	r0, [fp, #-8]
   1212c:	e51b3008 	ldr	r3, [fp, #-8]
   12130:	e5933014 	ldr	r3, [r3, #20]
   12134:	e3530000 	cmp	r3, #0
   12138:	0a000029 	beq	121e4 <Display::Run()+0xc8>
   1213c:	e51b3008 	ldr	r3, [fp, #-8]
   12140:	e5d33010 	ldrb	r3, [r3, #16]
   12144:	e2233001 	eor	r3, r3, #1
   12148:	e6ef3073 	uxtb	r3, r3
   1214c:	e3530000 	cmp	r3, #0
   12150:	0a000017 	beq	121b4 <Display::Run()+0x98>
   12154:	ebfffd29 	bl	11600 <Hardware::Get()>
   12158:	e1a03000 	mov	r3, r0
   1215c:	e1a00003 	mov	r0, r3
   12160:	eb00b857 	bl	402c4 <Hardware::Millis()>
   12164:	e1a02000 	mov	r2, r0
   12168:	e51b3008 	ldr	r3, [fp, #-8]
   1216c:	e5933004 	ldr	r3, [r3, #4]
   12170:	e0422003 	sub	r2, r2, r3
   12174:	e51b3008 	ldr	r3, [fp, #-8]
   12178:	e5933014 	ldr	r3, [r3, #20]
   1217c:	e1520003 	cmp	r2, r3
   12180:	83a03001 	movhi	r3, #1
   12184:	93a03000 	movls	r3, #0
   12188:	e6ef3073 	uxtb	r3, r3
   1218c:	e3530000 	cmp	r3, #0
   12190:	13a03001 	movne	r3, #1
   12194:	03a03000 	moveq	r3, #0
   12198:	e6ef3073 	uxtb	r3, r3
   1219c:	e3530000 	cmp	r3, #0
   121a0:	0a000010 	beq	121e8 <Display::Run()+0xcc>
   121a4:	e3a01001 	mov	r1, #1
   121a8:	e51b0008 	ldr	r0, [fp, #-8]
   121ac:	ebffffb3 	bl	12080 <Display::SetSleep(bool)>
   121b0:	ea00000c 	b	121e8 <Display::Run()+0xcc>
   121b4:	eb009ced 	bl	39570 <display::timeout::gpio_renew()>
   121b8:	e1a03000 	mov	r3, r0
   121bc:	e3530000 	cmp	r3, #0
   121c0:	13a03001 	movne	r3, #1
   121c4:	03a03000 	moveq	r3, #0
   121c8:	e6ef3073 	uxtb	r3, r3
   121cc:	e3530000 	cmp	r3, #0
   121d0:	0a000004 	beq	121e8 <Display::Run()+0xcc>
   121d4:	e3a01000 	mov	r1, #0
   121d8:	e51b0008 	ldr	r0, [fp, #-8]
   121dc:	ebffffa7 	bl	12080 <Display::SetSleep(bool)>
   121e0:	ea000000 	b	121e8 <Display::Run()+0xcc>
   121e4:	e1a00000 	nop			; (mov r0, r0)
   121e8:	e24bd004 	sub	sp, fp, #4
   121ec:	e8bd8800 	pop	{fp, pc}

000121f0 <Display::Get()>:
   121f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   121f4:	e28db000 	add	fp, sp, #0
   121f8:	e59f3010 	ldr	r3, [pc, #16]	; 12210 <Display::Get()+0x20>
   121fc:	e5933000 	ldr	r3, [r3]
   12200:	e1a00003 	mov	r0, r3
   12204:	e28bd000 	add	sp, fp, #0
   12208:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1220c:	e12fff1e 	bx	lr
   12210:	0005f2ec 	.word	0x0005f2ec

00012214 <ArtNetNode::SetOutput(LightSet*)>:
   12214:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12218:	e28db000 	add	fp, sp, #0
   1221c:	e24dd00c 	sub	sp, sp, #12
   12220:	e50b0008 	str	r0, [fp, #-8]
   12224:	e50b100c 	str	r1, [fp, #-12]
   12228:	e51b3008 	ldr	r3, [fp, #-8]
   1222c:	e51b200c 	ldr	r2, [fp, #-12]
   12230:	e5832a50 	str	r2, [r3, #2640]	; 0xa50
   12234:	e1a00000 	nop			; (mov r0, r0)
   12238:	e28bd000 	add	sp, fp, #0
   1223c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12240:	e12fff1e 	bx	lr

00012244 <ArtNetNode::GetActiveOutputPorts() const>:
   12244:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12248:	e28db000 	add	fp, sp, #0
   1224c:	e24dd00c 	sub	sp, sp, #12
   12250:	e50b0008 	str	r0, [fp, #-8]
   12254:	e51b3008 	ldr	r3, [fp, #-8]
   12258:	e5d3308e 	ldrb	r3, [r3, #142]	; 0x8e
   1225c:	e1a00003 	mov	r0, r3
   12260:	e28bd000 	add	sp, fp, #0
   12264:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12268:	e12fff1e 	bx	lr

0001226c <ArtNetNode::SetArtNetStore(ArtNetStore*)>:
   1226c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12270:	e28db000 	add	fp, sp, #0
   12274:	e24dd00c 	sub	sp, sp, #12
   12278:	e50b0008 	str	r0, [fp, #-8]
   1227c:	e50b100c 	str	r1, [fp, #-12]
   12280:	e51b3008 	ldr	r3, [fp, #-8]
   12284:	e51b200c 	ldr	r2, [fp, #-12]
   12288:	e5832a64 	str	r2, [r3, #2660]	; 0xa64
   1228c:	e1a00000 	nop			; (mov r0, r0)
   12290:	e28bd000 	add	sp, fp, #0
   12294:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12298:	e12fff1e 	bx	lr

0001229c <RDMDevice::SetRDMDeviceStore(RDMDeviceStore*)>:
   1229c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   122a0:	e28db000 	add	fp, sp, #0
   122a4:	e24dd00c 	sub	sp, sp, #12
   122a8:	e50b0008 	str	r0, [fp, #-8]
   122ac:	e50b100c 	str	r1, [fp, #-12]
   122b0:	e51b3008 	ldr	r3, [fp, #-8]
   122b4:	e51b200c 	ldr	r2, [fp, #-12]
   122b8:	e5832078 	str	r2, [r3, #120]	; 0x78
   122bc:	e1a00000 	nop			; (mov r0, r0)
   122c0:	e28bd000 	add	sp, fp, #0
   122c4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   122c8:	e12fff1e 	bx	lr

000122cc <RDMPersonality::RDMPersonality(char const*, LightSet*)>:
   122cc:	e92d4800 	push	{fp, lr}
   122d0:	e28db004 	add	fp, sp, #4
   122d4:	e24dd010 	sub	sp, sp, #16
   122d8:	e50b0008 	str	r0, [fp, #-8]
   122dc:	e50b100c 	str	r1, [fp, #-12]
   122e0:	e50b2010 	str	r2, [fp, #-16]
   122e4:	e51b3008 	ldr	r3, [fp, #-8]
   122e8:	e3a02000 	mov	r2, #0
   122ec:	e5832004 	str	r2, [r3, #4]
   122f0:	e51b3008 	ldr	r3, [fp, #-8]
   122f4:	e3a02000 	mov	r2, #0
   122f8:	e5832028 	str	r2, [r3, #40]	; 0x28
   122fc:	e51b300c 	ldr	r3, [fp, #-12]
   12300:	e3530000 	cmp	r3, #0
   12304:	1a000004 	bne	1231c <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x50>
   12308:	e59f3078 	ldr	r3, [pc, #120]	; 12388 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0xbc>
   1230c:	e3a0202d 	mov	r2, #45	; 0x2d
   12310:	e59f1074 	ldr	r1, [pc, #116]	; 1238c <RDMPersonality::RDMPersonality(char const*, LightSet*)+0xc0>
   12314:	e59f0074 	ldr	r0, [pc, #116]	; 12390 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0xc4>
   12318:	ebfffbfd 	bl	11314 <__assert_fail@plt>
   1231c:	e51b3010 	ldr	r3, [fp, #-16]
   12320:	e3530000 	cmp	r3, #0
   12324:	1a000003 	bne	12338 <RDMPersonality::RDMPersonality(char const*, LightSet*)+0x6c>
   12328:	e51b3008 	ldr	r3, [fp, #-8]
   1232c:	e3a02000 	mov	r2, #0
   12330:	e1c320b0 	strh	r2, [r3]
   12334:	ea00000c 	b	1236c <RDMPersonality::RDMPersonality(char const*, LightSet*)+0xa0>
   12338:	e51b3010 	ldr	r3, [fp, #-16]
   1233c:	e5933000 	ldr	r3, [r3]
   12340:	e2833028 	add	r3, r3, #40	; 0x28
   12344:	e5933000 	ldr	r3, [r3]
   12348:	e51b0010 	ldr	r0, [fp, #-16]
   1234c:	e12fff33 	blx	r3
   12350:	e1a03000 	mov	r3, r0
   12354:	e1a02003 	mov	r2, r3
   12358:	e51b3008 	ldr	r3, [fp, #-8]
   1235c:	e1c320b0 	strh	r2, [r3]
   12360:	e51b3008 	ldr	r3, [fp, #-8]
   12364:	e51b2010 	ldr	r2, [fp, #-16]
   12368:	e5832004 	str	r2, [r3, #4]
   1236c:	e51b100c 	ldr	r1, [fp, #-12]
   12370:	e51b0008 	ldr	r0, [fp, #-8]
   12374:	eb000006 	bl	12394 <RDMPersonality::SetDescription(char const*)>
   12378:	e51b3008 	ldr	r3, [fp, #-8]
   1237c:	e1a00003 	mov	r0, r3
   12380:	e24bd004 	sub	sp, fp, #4
   12384:	e8bd8800 	pop	{fp, pc}
   12388:	00044544 	.word	0x00044544
   1238c:	000441ec 	.word	0x000441ec
   12390:	00044210 	.word	0x00044210

00012394 <RDMPersonality::SetDescription(char const*)>:
   12394:	e92d4800 	push	{fp, lr}
   12398:	e28db004 	add	fp, sp, #4
   1239c:	e24dd018 	sub	sp, sp, #24
   123a0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   123a4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   123a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   123ac:	e3530000 	cmp	r3, #0
   123b0:	1a000004 	bne	123c8 <RDMPersonality::SetDescription(char const*)+0x34>
   123b4:	e59f30a8 	ldr	r3, [pc, #168]	; 12464 <RDMPersonality::SetDescription(char const*)+0xd0>
   123b8:	e3a0204b 	mov	r2, #75	; 0x4b
   123bc:	e59f10a4 	ldr	r1, [pc, #164]	; 12468 <RDMPersonality::SetDescription(char const*)+0xd4>
   123c0:	e59f00a4 	ldr	r0, [pc, #164]	; 1246c <RDMPersonality::SetDescription(char const*)+0xd8>
   123c4:	ebfffbd2 	bl	11314 <__assert_fail@plt>
   123c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   123cc:	e3a02000 	mov	r2, #0
   123d0:	e5832028 	str	r2, [r3, #40]	; 0x28
   123d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   123d8:	e50b3008 	str	r3, [fp, #-8]
   123dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   123e0:	e2833008 	add	r3, r3, #8
   123e4:	e50b300c 	str	r3, [fp, #-12]
   123e8:	e3a03000 	mov	r3, #0
   123ec:	e50b3010 	str	r3, [fp, #-16]
   123f0:	e51b3008 	ldr	r3, [fp, #-8]
   123f4:	e5d33000 	ldrb	r3, [r3]
   123f8:	e3530000 	cmp	r3, #0
   123fc:	0a000015 	beq	12458 <RDMPersonality::SetDescription(char const*)+0xc4>
   12400:	e51b3010 	ldr	r3, [fp, #-16]
   12404:	e353001f 	cmp	r3, #31
   12408:	8a000012 	bhi	12458 <RDMPersonality::SetDescription(char const*)+0xc4>
   1240c:	e51b3008 	ldr	r3, [fp, #-8]
   12410:	e5d32000 	ldrb	r2, [r3]
   12414:	e51b300c 	ldr	r3, [fp, #-12]
   12418:	e5c32000 	strb	r2, [r3]
   1241c:	e51b3008 	ldr	r3, [fp, #-8]
   12420:	e2833001 	add	r3, r3, #1
   12424:	e50b3008 	str	r3, [fp, #-8]
   12428:	e51b300c 	ldr	r3, [fp, #-12]
   1242c:	e2833001 	add	r3, r3, #1
   12430:	e50b300c 	str	r3, [fp, #-12]
   12434:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12438:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   1243c:	e2832001 	add	r2, r3, #1
   12440:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12444:	e5832028 	str	r2, [r3, #40]	; 0x28
   12448:	e51b3010 	ldr	r3, [fp, #-16]
   1244c:	e2833001 	add	r3, r3, #1
   12450:	e50b3010 	str	r3, [fp, #-16]
   12454:	eaffffe5 	b	123f0 <RDMPersonality::SetDescription(char const*)+0x5c>
   12458:	e1a00000 	nop			; (mov r0, r0)
   1245c:	e24bd004 	sub	sp, fp, #4
   12460:	e8bd8800 	pop	{fp, pc}
   12464:	0004457c 	.word	0x0004457c
   12468:	000441ec 	.word	0x000441ec
   1246c:	00044210 	.word	0x00044210

00012470 <ArtNetParams::GetUniverse(unsigned int, bool&) const>:
   12470:	e92d4800 	push	{fp, lr}
   12474:	e28db004 	add	fp, sp, #4
   12478:	e24dd010 	sub	sp, sp, #16
   1247c:	e50b0008 	str	r0, [fp, #-8]
   12480:	e50b100c 	str	r1, [fp, #-12]
   12484:	e50b2010 	str	r2, [fp, #-16]
   12488:	e51b300c 	ldr	r3, [fp, #-12]
   1248c:	e3530003 	cmp	r3, #3
   12490:	8a00000f 	bhi	124d4 <ArtNetParams::GetUniverse(unsigned int, bool&) const+0x64>
   12494:	e3a02a02 	mov	r2, #8192	; 0x2000
   12498:	e51b300c 	ldr	r3, [fp, #-12]
   1249c:	e1a03312 	lsl	r3, r2, r3
   124a0:	e1a01003 	mov	r1, r3
   124a4:	e51b0008 	ldr	r0, [fp, #-8]
   124a8:	eb000010 	bl	124f0 <ArtNetParams::isMaskSet(unsigned int) const>
   124ac:	e1a03000 	mov	r3, r0
   124b0:	e1a02003 	mov	r2, r3
   124b4:	e51b3010 	ldr	r3, [fp, #-16]
   124b8:	e5c32000 	strb	r2, [r3]
   124bc:	e51b2008 	ldr	r2, [fp, #-8]
   124c0:	e51b300c 	ldr	r3, [fp, #-12]
   124c4:	e0823003 	add	r3, r2, r3
   124c8:	e283306b 	add	r3, r3, #107	; 0x6b
   124cc:	e5d33000 	ldrb	r3, [r3]
   124d0:	ea000003 	b	124e4 <ArtNetParams::GetUniverse(unsigned int, bool&) const+0x74>
   124d4:	e51b3010 	ldr	r3, [fp, #-16]
   124d8:	e3a02000 	mov	r2, #0
   124dc:	e5c32000 	strb	r2, [r3]
   124e0:	e3a03000 	mov	r3, #0
   124e4:	e1a00003 	mov	r0, r3
   124e8:	e24bd004 	sub	sp, fp, #4
   124ec:	e8bd8800 	pop	{fp, pc}

000124f0 <ArtNetParams::isMaskSet(unsigned int) const>:
   124f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   124f4:	e28db000 	add	fp, sp, #0
   124f8:	e24dd00c 	sub	sp, sp, #12
   124fc:	e50b0008 	str	r0, [fp, #-8]
   12500:	e50b100c 	str	r1, [fp, #-12]
   12504:	e51b3008 	ldr	r3, [fp, #-8]
   12508:	e5932004 	ldr	r2, [r3, #4]
   1250c:	e51b300c 	ldr	r3, [fp, #-12]
   12510:	e0033002 	and	r3, r3, r2
   12514:	e51b200c 	ldr	r2, [fp, #-12]
   12518:	e1520003 	cmp	r2, r3
   1251c:	03a03001 	moveq	r3, #1
   12520:	13a03000 	movne	r3, #0
   12524:	e6ef3073 	uxtb	r3, r3
   12528:	e1a00003 	mov	r0, r3
   1252c:	e28bd000 	add	sp, fp, #0
   12530:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12534:	e12fff1e 	bx	lr

00012538 <RemoteConfig::Get()>:
   12538:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1253c:	e28db000 	add	fp, sp, #0
   12540:	e59f3010 	ldr	r3, [pc, #16]	; 12558 <RemoteConfig::Get()+0x20>
   12544:	e5933000 	ldr	r3, [r3]
   12548:	e1a00003 	mov	r0, r3
   1254c:	e28bd000 	add	sp, fp, #0
   12550:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12554:	e12fff1e 	bx	lr
   12558:	0005c3bc 	.word	0x0005c3bc

0001255c <rdm::device::responder::factorydefaults()>:
   1255c:	e92d4800 	push	{fp, lr}
   12560:	e28db004 	add	fp, sp, #4
   12564:	ebfffff3 	bl	12538 <RemoteConfig::Get()>
   12568:	e1a03000 	mov	r3, r0
   1256c:	e3a01000 	mov	r1, #0
   12570:	e1a00003 	mov	r0, r3
   12574:	eb002931 	bl	1ca40 <RemoteConfig::SetDisable(bool)>
   12578:	ebfffc8d 	bl	117b4 <ConfigStore::Get()>
   1257c:	e1a03000 	mov	r3, r0
   12580:	e3a0100b 	mov	r1, #11
   12584:	e1a00003 	mov	r0, r3
   12588:	eb0082b2 	bl	33058 <ConfigStore::ResetSetList(configstore::Store)>
   1258c:	ebfffc88 	bl	117b4 <ConfigStore::Get()>
   12590:	e1a03000 	mov	r3, r0
   12594:	e3a01001 	mov	r1, #1
   12598:	e1a00003 	mov	r0, r3
   1259c:	eb0082ad 	bl	33058 <ConfigStore::ResetSetList(configstore::Store)>
   125a0:	ebfffd23 	bl	11a34 <StoreNetwork::Get()>
   125a4:	e1a03000 	mov	r3, r0
   125a8:	e3a01001 	mov	r1, #1
   125ac:	e1a00003 	mov	r0, r3
   125b0:	ebfffd08 	bl	119d8 <StoreNetwork::SaveDhcp(bool)>
   125b4:	e1a00000 	nop			; (mov r0, r0)
   125b8:	e8bd8800 	pop	{fp, pc}

000125bc <TLC59711Dmx::SetTLC59711DmxStore(TLC59711DmxStore*)>:
   125bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   125c0:	e28db000 	add	fp, sp, #0
   125c4:	e24dd00c 	sub	sp, sp, #12
   125c8:	e50b0008 	str	r0, [fp, #-8]
   125cc:	e50b100c 	str	r1, [fp, #-12]
   125d0:	e51b3008 	ldr	r3, [fp, #-8]
   125d4:	e51b200c 	ldr	r2, [fp, #-12]
   125d8:	e583201c 	str	r2, [r3, #28]
   125dc:	e1a00000 	nop			; (mov r0, r0)
   125e0:	e28bd000 	add	sp, fp, #0
   125e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   125e8:	e12fff1e 	bx	lr

000125ec <TLC59711DmxParams::GetLedType()>:
   125ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   125f0:	e28db000 	add	fp, sp, #0
   125f4:	e24dd00c 	sub	sp, sp, #12
   125f8:	e50b0008 	str	r0, [fp, #-8]
   125fc:	e51b3008 	ldr	r3, [fp, #-8]
   12600:	e5933008 	ldr	r3, [r3, #8]
   12604:	e1a00003 	mov	r0, r3
   12608:	e28bd000 	add	sp, fp, #0
   1260c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12610:	e12fff1e 	bx	lr

00012614 <TLC59711DmxParams::GetLedCount()>:
   12614:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12618:	e28db000 	add	fp, sp, #0
   1261c:	e24dd00c 	sub	sp, sp, #12
   12620:	e50b0008 	str	r0, [fp, #-8]
   12624:	e51b3008 	ldr	r3, [fp, #-8]
   12628:	e5d3300c 	ldrb	r3, [r3, #12]
   1262c:	e6ff3073 	uxth	r3, r3
   12630:	e1a00003 	mov	r0, r3
   12634:	e28bd000 	add	sp, fp, #0
   12638:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1263c:	e12fff1e 	bx	lr

00012640 <TLC59711DmxParams::IsSetLedType()>:
   12640:	e92d4800 	push	{fp, lr}
   12644:	e28db004 	add	fp, sp, #4
   12648:	e24dd008 	sub	sp, sp, #8
   1264c:	e50b0008 	str	r0, [fp, #-8]
   12650:	e3a01001 	mov	r1, #1
   12654:	e51b0008 	ldr	r0, [fp, #-8]
   12658:	eb000003 	bl	1266c <TLC59711DmxParams::isMaskSet(unsigned int)>
   1265c:	e1a03000 	mov	r3, r0
   12660:	e1a00003 	mov	r0, r3
   12664:	e24bd004 	sub	sp, fp, #4
   12668:	e8bd8800 	pop	{fp, pc}

0001266c <TLC59711DmxParams::isMaskSet(unsigned int)>:
   1266c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   12670:	e28db000 	add	fp, sp, #0
   12674:	e24dd00c 	sub	sp, sp, #12
   12678:	e50b0008 	str	r0, [fp, #-8]
   1267c:	e50b100c 	str	r1, [fp, #-12]
   12680:	e51b3008 	ldr	r3, [fp, #-8]
   12684:	e5932004 	ldr	r2, [r3, #4]
   12688:	e51b300c 	ldr	r3, [fp, #-12]
   1268c:	e0033002 	and	r3, r3, r2
   12690:	e51b200c 	ldr	r2, [fp, #-12]
   12694:	e1520003 	cmp	r2, r3
   12698:	03a03001 	moveq	r3, #1
   1269c:	13a03000 	movne	r3, #0
   126a0:	e6ef3073 	uxtb	r3, r3
   126a4:	e1a00003 	mov	r0, r3
   126a8:	e28bd000 	add	sp, fp, #0
   126ac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   126b0:	e12fff1e 	bx	lr

000126b4 <SparkFunDmx::GetMotorsConnected()>:
   126b4:	e92d4800 	push	{fp, lr}
   126b8:	e28db004 	add	fp, sp, #4
   126bc:	e24dd008 	sub	sp, sp, #8
   126c0:	e50b0008 	str	r0, [fp, #-8]
   126c4:	eb007084 	bl	2e8dc <AutoDriver::getNumBoards()>
   126c8:	e1a03000 	mov	r3, r0
   126cc:	e1a00003 	mov	r0, r3
   126d0:	e24bd004 	sub	sp, fp, #4
   126d4:	e8bd8800 	pop	{fp, pc}

000126d8 <SparkFunDmx::SetModeStore(ModeStore*)>:
   126d8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   126dc:	e28db000 	add	fp, sp, #0
   126e0:	e24dd00c 	sub	sp, sp, #12
   126e4:	e50b0008 	str	r0, [fp, #-8]
   126e8:	e50b100c 	str	r1, [fp, #-12]
   126ec:	e51b3008 	ldr	r3, [fp, #-8]
   126f0:	e51b200c 	ldr	r2, [fp, #-12]
   126f4:	e58320bc 	str	r2, [r3, #188]	; 0xbc
   126f8:	e1a00000 	nop			; (mov r0, r0)
   126fc:	e28bd000 	add	sp, fp, #0
   12700:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   12704:	e12fff1e 	bx	lr

00012708 <FirmwareVersion::Print(char const*)>:
   12708:	e92d4800 	push	{fp, lr}
   1270c:	e28db004 	add	fp, sp, #4
   12710:	e24dd008 	sub	sp, sp, #8
   12714:	e50b0008 	str	r0, [fp, #-8]
   12718:	e50b100c 	str	r1, [fp, #-12]
   1271c:	e59f0024 	ldr	r0, [pc, #36]	; 12748 <FirmwareVersion::Print(char const*)+0x40>
   12720:	ebfffabf 	bl	11224 <puts@plt>
   12724:	e51b300c 	ldr	r3, [fp, #-12]
   12728:	e3530000 	cmp	r3, #0
   1272c:	0a000002 	beq	1273c <FirmwareVersion::Print(char const*)+0x34>
   12730:	e51b100c 	ldr	r1, [fp, #-12]
   12734:	e59f0010 	ldr	r0, [pc, #16]	; 1274c <FirmwareVersion::Print(char const*)+0x44>
   12738:	ebfffaad 	bl	111f4 <printf@plt>
   1273c:	e1a00000 	nop			; (mov r0, r0)
   12740:	e24bd004 	sub	sp, fp, #4
   12744:	e8bd8800 	pop	{fp, pc}
   12748:	0005f398 	.word	0x0005f398
   1274c:	00044228 	.word	0x00044228

00012750 <hardware::ledblink::display(unsigned int)>:
   12750:	e92d4830 	push	{r4, r5, fp, lr}
   12754:	e28db00c 	add	fp, sp, #12
   12758:	e24dd010 	sub	sp, sp, #16
   1275c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   12760:	ebfffea2 	bl	121f0 <Display::Get()>
   12764:	e1a03000 	mov	r3, r0
   12768:	e1a00003 	mov	r0, r3
   1276c:	ebfffd0f 	bl	11bb0 <Display::isDetected() const>
   12770:	e1a03000 	mov	r3, r0
   12774:	e3530000 	cmp	r3, #0
   12778:	0a000036 	beq	12858 <hardware::ledblink::display(unsigned int)+0x108>
   1277c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12780:	e3530005 	cmp	r3, #5
   12784:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   12788:	ea000017 	b	127ec <hardware::ledblink::display(unsigned int)+0x9c>
   1278c:	000127a4 	.word	0x000127a4
   12790:	000127b0 	.word	0x000127b0
   12794:	000127bc 	.word	0x000127bc
   12798:	000127c8 	.word	0x000127c8
   1279c:	000127d4 	.word	0x000127d4
   127a0:	000127e0 	.word	0x000127e0
   127a4:	e3a0304f 	mov	r3, #79	; 0x4f
   127a8:	e54b300d 	strb	r3, [fp, #-13]
   127ac:	ea000011 	b	127f8 <hardware::ledblink::display(unsigned int)+0xa8>
   127b0:	e3a0304f 	mov	r3, #79	; 0x4f
   127b4:	e54b300d 	strb	r3, [fp, #-13]
   127b8:	ea00000e 	b	127f8 <hardware::ledblink::display(unsigned int)+0xa8>
   127bc:	e3a0304e 	mov	r3, #78	; 0x4e
   127c0:	e54b300d 	strb	r3, [fp, #-13]
   127c4:	ea00000b 	b	127f8 <hardware::ledblink::display(unsigned int)+0xa8>
   127c8:	e3a03044 	mov	r3, #68	; 0x44
   127cc:	e54b300d 	strb	r3, [fp, #-13]
   127d0:	ea000008 	b	127f8 <hardware::ledblink::display(unsigned int)+0xa8>
   127d4:	e3a03046 	mov	r3, #70	; 0x46
   127d8:	e54b300d 	strb	r3, [fp, #-13]
   127dc:	ea000005 	b	127f8 <hardware::ledblink::display(unsigned int)+0xa8>
   127e0:	e3a03052 	mov	r3, #82	; 0x52
   127e4:	e54b300d 	strb	r3, [fp, #-13]
   127e8:	ea000002 	b	127f8 <hardware::ledblink::display(unsigned int)+0xa8>
   127ec:	e3a03055 	mov	r3, #85	; 0x55
   127f0:	e54b300d 	strb	r3, [fp, #-13]
   127f4:	e1a00000 	nop			; (mov r0, r0)
   127f8:	ebfffe7c 	bl	121f0 <Display::Get()>
   127fc:	e1a05000 	mov	r5, r0
   12800:	ebfffe7a 	bl	121f0 <Display::Get()>
   12804:	e1a03000 	mov	r3, r0
   12808:	e1a00003 	mov	r0, r3
   1280c:	ebfffde0 	bl	11f94 <Display::GetColumns() const>
   12810:	e1a03000 	mov	r3, r0
   12814:	e2434001 	sub	r4, r3, #1
   12818:	ebfffe74 	bl	121f0 <Display::Get()>
   1281c:	e1a03000 	mov	r3, r0
   12820:	e1a00003 	mov	r0, r3
   12824:	ebfffded 	bl	11fe0 <Display::GetRows() const>
   12828:	e1a03000 	mov	r3, r0
   1282c:	e2433001 	sub	r3, r3, #1
   12830:	e1a02003 	mov	r2, r3
   12834:	e1a01004 	mov	r1, r4
   12838:	e1a00005 	mov	r0, r5
   1283c:	ebfffdbc 	bl	11f34 <Display::SetCursorPos(unsigned int, unsigned int)>
   12840:	ebfffe6a 	bl	121f0 <Display::Get()>
   12844:	e1a02000 	mov	r2, r0
   12848:	e55b300d 	ldrb	r3, [fp, #-13]
   1284c:	e1a01003 	mov	r1, r3
   12850:	e1a00002 	mov	r0, r2
   12854:	ebfffce3 	bl	11be8 <Display::PutChar(int)>
   12858:	e1a00000 	nop			; (mov r0, r0)
   1285c:	e24bd00c 	sub	sp, fp, #12
   12860:	e8bd8830 	pop	{r4, r5, fp, pc}

00012864 <DisplayUdf::~DisplayUdf()>:
   12864:	e92d4800 	push	{fp, lr}
   12868:	e28db004 	add	fp, sp, #4
   1286c:	e24dd008 	sub	sp, sp, #8
   12870:	e50b0008 	str	r0, [fp, #-8]
   12874:	e51b3008 	ldr	r3, [fp, #-8]
   12878:	e1a00003 	mov	r0, r3
   1287c:	ebfffcb2 	bl	11b4c <Display::~Display()>
   12880:	e51b3008 	ldr	r3, [fp, #-8]
   12884:	e1a00003 	mov	r0, r3
   12888:	e24bd004 	sub	sp, fp, #4
   1288c:	e8bd8800 	pop	{fp, pc}

00012890 <main>:
   12890:	e92d4810 	push	{r4, fp, lr}
   12894:	e28db008 	add	fp, sp, #8
   12898:	e24ddd5d 	sub	sp, sp, #5952	; 0x1740
   1289c:	e24dd01c 	sub	sp, sp, #28
   128a0:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
   128a4:	e243300c 	sub	r3, r3, #12
   128a8:	e5030744 	str	r0, [r3, #-1860]	; 0xfffff8bc
   128ac:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
   128b0:	e243300c 	sub	r3, r3, #12
   128b4:	e5031748 	str	r1, [r3, #-1864]	; 0xfffff8b8
   128b8:	ebfffabf 	bl	113bc <getuid@plt>
   128bc:	e1a03000 	mov	r3, r0
   128c0:	e3530000 	cmp	r3, #0
   128c4:	13a03001 	movne	r3, #1
   128c8:	03a03000 	moveq	r3, #0
   128cc:	e6ef3073 	uxtb	r3, r3
   128d0:	e3530000 	cmp	r3, #0
   128d4:	0a000007 	beq	128f8 <main+0x68>
   128d8:	e59f3a80 	ldr	r3, [pc, #2688]	; 13360 <main+0xad0>
   128dc:	e5933000 	ldr	r3, [r3]
   128e0:	e3a02028 	mov	r2, #40	; 0x28
   128e4:	e3a01001 	mov	r1, #1
   128e8:	e59f0a74 	ldr	r0, [pc, #2676]	; 13364 <main+0xad4>
   128ec:	ebfffac1 	bl	113f8 <fwrite@plt>
   128f0:	e3e04000 	mvn	r4, #0
   128f4:	ea000295 	b	13350 <main+0xac0>
   128f8:	eb00c47a 	bl	43ae8 <bcm2835_init>
   128fc:	e1a03000 	mov	r3, r0
   12900:	e3530000 	cmp	r3, #0
   12904:	03a03001 	moveq	r3, #1
   12908:	13a03000 	movne	r3, #0
   1290c:	e6ef3073 	uxtb	r3, r3
   12910:	e3530000 	cmp	r3, #0
   12914:	0a000007 	beq	12938 <main+0xa8>
   12918:	e59f3a40 	ldr	r3, [pc, #2624]	; 13360 <main+0xad0>
   1291c:	e5933000 	ldr	r3, [r3]
   12920:	e3a0201f 	mov	r2, #31
   12924:	e3a01001 	mov	r1, #1
   12928:	e59f0a38 	ldr	r0, [pc, #2616]	; 13368 <main+0xad8>
   1292c:	ebfffab1 	bl	113f8 <fwrite@plt>
   12930:	e3e04001 	mvn	r4, #1
   12934:	ea000285 	b	13350 <main+0xac0>
   12938:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
   1293c:	e243300c 	sub	r3, r3, #12
   12940:	e5133744 	ldr	r3, [r3, #-1860]	; 0xfffff8bc
   12944:	e3530001 	cmp	r3, #1
   12948:	ca000008 	bgt	12970 <main+0xe0>
   1294c:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
   12950:	e243300c 	sub	r3, r3, #12
   12954:	e5133748 	ldr	r3, [r3, #-1864]	; 0xfffff8b8
   12958:	e5933000 	ldr	r3, [r3]
   1295c:	e1a01003 	mov	r1, r3
   12960:	e59f0a04 	ldr	r0, [pc, #2564]	; 1336c <main+0xadc>
   12964:	ebfffa22 	bl	111f4 <printf@plt>
   12968:	e3e04002 	mvn	r4, #2
   1296c:	ea000277 	b	13350 <main+0xac0>
   12970:	e24b3f9f 	sub	r3, fp, #636	; 0x27c
   12974:	e1a00003 	mov	r0, r3
   12978:	eb00b2f7 	bl	3f55c <Hardware::Hardware()>
   1297c:	e24b3d0d 	sub	r3, fp, #832	; 0x340
   12980:	e1a00003 	mov	r0, r3
   12984:	eb008c30 	bl	35a4c <Network::Network()>
   12988:	e24b3fe7 	sub	r3, fp, #924	; 0x39c
   1298c:	e1a00003 	mov	r0, r3
   12990:	eb0098b8 	bl	38c78 <DisplayUdf::DisplayUdf()>
   12994:	e24b0e3a 	sub	r0, fp, #928	; 0x3a0
   12998:	e59f39d0 	ldr	r3, [pc, #2512]	; 13370 <main+0xae0>
   1299c:	e59f29d0 	ldr	r2, [pc, #2512]	; 13374 <main+0xae4>
   129a0:	e59f19d0 	ldr	r1, [pc, #2512]	; 13378 <main+0xae8>
   129a4:	eb00b221 	bl	3f230 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
   129a8:	e24b3fe9 	sub	r3, fp, #932	; 0x3a4
   129ac:	e1a00003 	mov	r0, r3
   129b0:	eb008085 	bl	32bcc <ConfigStore::ConfigStore()>
   129b4:	e24b3e3a 	sub	r3, fp, #928	; 0x3a0
   129b8:	e59f19bc 	ldr	r1, [pc, #2492]	; 1337c <main+0xaec>
   129bc:	e1a00003 	mov	r0, r3
   129c0:	ebffff50 	bl	12708 <FirmwareVersion::Print(char const*)>
   129c4:	e24b0fe7 	sub	r0, fp, #924	; 0x39c
   129c8:	e3a03003 	mov	r3, #3
   129cc:	e3a02c06 	mov	r2, #1536	; 0x600
   129d0:	e59f19a8 	ldr	r1, [pc, #2472]	; 13380 <main+0xaf0>
   129d4:	ebfffd3f 	bl	11ed8 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
   129d8:	e24b3feb 	sub	r3, fp, #940	; 0x3ac
   129dc:	e1a00003 	mov	r0, r3
   129e0:	eb008054 	bl	32b38 <StoreNetwork::StoreNetwork()>
   129e4:	e24b3feb 	sub	r3, fp, #940	; 0x3ac
   129e8:	e2832004 	add	r2, r3, #4
   129ec:	e24b3d0d 	sub	r3, fp, #832	; 0x340
   129f0:	e1a01002 	mov	r1, r2
   129f4:	e1a00003 	mov	r0, r3
   129f8:	ebfffb22 	bl	11688 <Network::SetNetworkStore(NetworkStore*)>
   129fc:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
   12a00:	e243300c 	sub	r3, r3, #12
   12a04:	e5133748 	ldr	r3, [r3, #-1864]	; 0xfffff8b8
   12a08:	e2833004 	add	r3, r3, #4
   12a0c:	e5932000 	ldr	r2, [r3]
   12a10:	e24b3d0d 	sub	r3, fp, #832	; 0x340
   12a14:	e1a01002 	mov	r1, r2
   12a18:	e1a00003 	mov	r0, r3
   12a1c:	eb008c65 	bl	35bb8 <Network::Init(char const*)>
   12a20:	e1a03000 	mov	r3, r0
   12a24:	e1a03fa3 	lsr	r3, r3, #31
   12a28:	e6ef3073 	uxtb	r3, r3
   12a2c:	e3530000 	cmp	r3, #0
   12a30:	0a000013 	beq	12a84 <main+0x1f4>
   12a34:	e59f3924 	ldr	r3, [pc, #2340]	; 13360 <main+0xad0>
   12a38:	e5933000 	ldr	r3, [r3]
   12a3c:	e3a0201e 	mov	r2, #30
   12a40:	e3a01001 	mov	r1, #1
   12a44:	e59f0938 	ldr	r0, [pc, #2360]	; 13384 <main+0xaf4>
   12a48:	ebfffa6a 	bl	113f8 <fwrite@plt>
   12a4c:	e3e04000 	mvn	r4, #0
   12a50:	e24b3feb 	sub	r3, fp, #940	; 0x3ac
   12a54:	e1a00003 	mov	r0, r3
   12a58:	eb00026b 	bl	1340c <StoreNetwork::~StoreNetwork()>
   12a5c:	e24b3fe9 	sub	r3, fp, #932	; 0x3a4
   12a60:	e1a00003 	mov	r0, r3
   12a64:	ebfffb2c 	bl	1171c <ConfigStore::~ConfigStore()>
   12a68:	e24b3fe7 	sub	r3, fp, #924	; 0x39c
   12a6c:	e1a00003 	mov	r0, r3
   12a70:	ebffff7b 	bl	12864 <DisplayUdf::~DisplayUdf()>
   12a74:	e24b3d0d 	sub	r3, fp, #832	; 0x340
   12a78:	e1a00003 	mov	r0, r3
   12a7c:	eb008c2f 	bl	35b40 <Network::~Network()>
   12a80:	ea000232 	b	13350 <main+0xac0>
   12a84:	e24b3d0d 	sub	r3, fp, #832	; 0x340
   12a88:	e1a00003 	mov	r0, r3
   12a8c:	eb009148 	bl	36fb4 <Network::Print()>
   12a90:	e3a03000 	mov	r3, #0
   12a94:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   12a98:	e24b3e3b 	sub	r3, fp, #944	; 0x3b0
   12a9c:	e1a00003 	mov	r0, r3
   12aa0:	eb0088cf 	bl	34de4 <StoreSparkFunDmx::StoreSparkFunDmx()>
   12aa4:	e24b3d0f 	sub	r3, fp, #960	; 0x3c0
   12aa8:	e1a00003 	mov	r0, r3
   12aac:	eb0089f9 	bl	35298 <StoreMotors::StoreMotors()>
   12ab0:	e24b3e3b 	sub	r3, fp, #944	; 0x3b0
   12ab4:	e50b33d0 	str	r3, [fp, #-976]	; 0xfffffc30
   12ab8:	e24b3d0f 	sub	r3, fp, #960	; 0x3c0
   12abc:	e50b33cc 	str	r3, [fp, #-972]	; 0xfffffc34
   12ac0:	e24b3d0f 	sub	r3, fp, #960	; 0x3c0
   12ac4:	e2833004 	add	r3, r3, #4
   12ac8:	e50b33c8 	str	r3, [fp, #-968]	; 0xfffffc38
   12acc:	e24b3d0f 	sub	r3, fp, #960	; 0x3c0
   12ad0:	e2833008 	add	r3, r3, #8
   12ad4:	e50b33c4 	str	r3, [fp, #-964]	; 0xfffffc3c
   12ad8:	e24b0fe7 	sub	r0, fp, #924	; 0x39c
   12adc:	e3a03003 	mov	r3, #3
   12ae0:	e3a02c6d 	mov	r2, #27904	; 0x6d00
   12ae4:	e59f189c 	ldr	r1, [pc, #2204]	; 13388 <main+0xaf8>
   12ae8:	ebfffcfa 	bl	11ed8 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
   12aec:	e3a000c0 	mov	r0, #192	; 0xc0
   12af0:	ebfff992 	bl	11140 <operator new(unsigned int)@plt>
   12af4:	e1a03000 	mov	r3, r0
   12af8:	e1a04003 	mov	r4, r3
   12afc:	e1a00004 	mov	r0, r4
   12b00:	eb0054fa 	bl	27ef0 <SparkFunDmx::SparkFunDmx()>
   12b04:	e50b401c 	str	r4, [fp, #-28]	; 0xffffffe4
   12b08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   12b0c:	e3530000 	cmp	r3, #0
   12b10:	1a000004 	bne	12b28 <main+0x298>
   12b14:	e59f3870 	ldr	r3, [pc, #2160]	; 1338c <main+0xafc>
   12b18:	e3a02085 	mov	r2, #133	; 0x85
   12b1c:	e59f186c 	ldr	r1, [pc, #2156]	; 13390 <main+0xb00>
   12b20:	e59f086c 	ldr	r0, [pc, #2156]	; 13394 <main+0xb04>
   12b24:	ebfff9fa 	bl	11314 <__assert_fail@plt>
   12b28:	e24b3e3d 	sub	r3, fp, #976	; 0x3d0
   12b2c:	e1a01003 	mov	r1, r3
   12b30:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   12b34:	eb005685 	bl	28550 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)>
   12b38:	e24b3d0f 	sub	r3, fp, #960	; 0x3c0
   12b3c:	e283300c 	add	r3, r3, #12
   12b40:	e1a01003 	mov	r1, r3
   12b44:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   12b48:	ebfffee2 	bl	126d8 <SparkFunDmx::SetModeStore(ModeStore*)>
   12b4c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   12b50:	ebfffed7 	bl	126b4 <SparkFunDmx::GetMotorsConnected()>
   12b54:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   12b58:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   12b5c:	e50b3010 	str	r3, [fp, #-16]
   12b60:	e24b3ff6 	sub	r3, fp, #984	; 0x3d8
   12b64:	e1a00003 	mov	r0, r3
   12b68:	eb007f24 	bl	32800 <StoreTLC59711::StoreTLC59711()>
   12b6c:	e24b2ff6 	sub	r2, fp, #984	; 0x3d8
   12b70:	e24b3ffb 	sub	r3, fp, #1004	; 0x3ec
   12b74:	e1a01002 	mov	r1, r2
   12b78:	e1a00003 	mov	r0, r3
   12b7c:	eb0074e5 	bl	2ff18 <TLC59711DmxParams::TLC59711DmxParams(TLC59711DmxParamsStore*)>
   12b80:	e3a03000 	mov	r3, #0
   12b84:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   12b88:	e24b3ffb 	sub	r3, fp, #1004	; 0x3ec
   12b8c:	e1a00003 	mov	r0, r3
   12b90:	eb0074ea 	bl	2ff40 <TLC59711DmxParams::Load()>
   12b94:	e1a03000 	mov	r3, r0
   12b98:	e3530000 	cmp	r3, #0
   12b9c:	0a00004e 	beq	12cdc <main+0x44c>
   12ba0:	e24b3ffb 	sub	r3, fp, #1004	; 0x3ec
   12ba4:	e1a00003 	mov	r0, r3
   12ba8:	ebfffea4 	bl	12640 <TLC59711DmxParams::IsSetLedType()>
   12bac:	e1a03000 	mov	r3, r0
   12bb0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   12bb4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   12bb8:	e3530000 	cmp	r3, #0
   12bbc:	0a000046 	beq	12cdc <main+0x44c>
   12bc0:	e3a00020 	mov	r0, #32
   12bc4:	ebfff95d 	bl	11140 <operator new(unsigned int)@plt>
   12bc8:	e1a03000 	mov	r3, r0
   12bcc:	e1a04003 	mov	r4, r3
   12bd0:	e1a00004 	mov	r0, r4
   12bd4:	eb00762f 	bl	30498 <TLC59711Dmx::TLC59711Dmx()>
   12bd8:	e50b4020 	str	r4, [fp, #-32]	; 0xffffffe0
   12bdc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   12be0:	e3530000 	cmp	r3, #0
   12be4:	1a000004 	bne	12bfc <main+0x36c>
   12be8:	e59f379c 	ldr	r3, [pc, #1948]	; 1338c <main+0xafc>
   12bec:	e3a02096 	mov	r2, #150	; 0x96
   12bf0:	e59f1798 	ldr	r1, [pc, #1944]	; 13390 <main+0xb00>
   12bf4:	e59f079c 	ldr	r0, [pc, #1948]	; 13398 <main+0xb08>
   12bf8:	ebfff9c5 	bl	11314 <__assert_fail@plt>
   12bfc:	e24b3ff6 	sub	r3, fp, #984	; 0x3d8
   12c00:	e2833004 	add	r3, r3, #4
   12c04:	e1a01003 	mov	r1, r3
   12c08:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   12c0c:	ebfffe6a 	bl	125bc <TLC59711Dmx::SetTLC59711DmxStore(TLC59711DmxStore*)>
   12c10:	e24b3ffb 	sub	r3, fp, #1004	; 0x3ec
   12c14:	e1a00003 	mov	r0, r3
   12c18:	eb007577 	bl	301fc <TLC59711DmxParams::Dump()>
   12c1c:	e24b3ffb 	sub	r3, fp, #1004	; 0x3ec
   12c20:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   12c24:	e1a00003 	mov	r0, r3
   12c28:	eb00781c 	bl	30ca0 <TLC59711DmxParams::Set(TLC59711Dmx*)>
   12c2c:	e24b3ffb 	sub	r3, fp, #1004	; 0x3ec
   12c30:	e1a00003 	mov	r0, r3
   12c34:	ebfffe6c 	bl	125ec <TLC59711DmxParams::GetLedType()>
   12c38:	e1a03000 	mov	r3, r0
   12c3c:	e1a00003 	mov	r0, r3
   12c40:	eb0075bd 	bl	3033c <TLC59711DmxParams::GetType(TTLC59711Type)>
   12c44:	e1a04000 	mov	r4, r0
   12c48:	e24b3ffb 	sub	r3, fp, #1004	; 0x3ec
   12c4c:	e1a00003 	mov	r0, r3
   12c50:	ebfffe6f 	bl	12614 <TLC59711DmxParams::GetLedCount()>
   12c54:	e1a03000 	mov	r3, r0
   12c58:	e24b0fe7 	sub	r0, fp, #924	; 0x39c
   12c5c:	e58d3000 	str	r3, [sp]
   12c60:	e1a03004 	mov	r3, r4
   12c64:	e59f2730 	ldr	r2, [pc, #1840]	; 1339c <main+0xb0c>
   12c68:	e3a01007 	mov	r1, #7
   12c6c:	ebfffc2b 	bl	11d20 <Display::Printf(unsigned int, char const*, ...)>
   12c70:	e3a00010 	mov	r0, #16
   12c74:	ebfff931 	bl	11140 <operator new(unsigned int)@plt>
   12c78:	e1a03000 	mov	r3, r0
   12c7c:	e1a04003 	mov	r4, r3
   12c80:	e1a00004 	mov	r0, r4
   12c84:	eb00a69f 	bl	3c708 <LightSetChain::LightSetChain()>
   12c88:	e50b4024 	str	r4, [fp, #-36]	; 0xffffffdc
   12c8c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   12c90:	e3530000 	cmp	r3, #0
   12c94:	1a000004 	bne	12cac <main+0x41c>
   12c98:	e59f36ec 	ldr	r3, [pc, #1772]	; 1338c <main+0xafc>
   12c9c:	e3a0209e 	mov	r2, #158	; 0x9e
   12ca0:	e59f16e8 	ldr	r1, [pc, #1768]	; 13390 <main+0xb00>
   12ca4:	e59f06f4 	ldr	r0, [pc, #1780]	; 133a0 <main+0xb10>
   12ca8:	ebfff999 	bl	11314 <__assert_fail@plt>
   12cac:	e3a02000 	mov	r2, #0
   12cb0:	e51b1010 	ldr	r1, [fp, #-16]
   12cb4:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
   12cb8:	eb00a8d1 	bl	3d004 <LightSetChain::Add(LightSet*, int)>
   12cbc:	e3a02001 	mov	r2, #1
   12cc0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   12cc4:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
   12cc8:	eb00a8cd 	bl	3d004 <LightSetChain::Add(LightSet*, int)>
   12ccc:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
   12cd0:	eb00aa7c 	bl	3d6c8 <LightSetChain::Dump()>
   12cd4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   12cd8:	e50b3010 	str	r3, [fp, #-16]
   12cdc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   12ce0:	e3530000 	cmp	r3, #0
   12ce4:	0a000015 	beq	12d40 <main+0x4b0>
   12ce8:	e24b3ffb 	sub	r3, fp, #1004	; 0x3ec
   12cec:	e1a00003 	mov	r0, r3
   12cf0:	ebfffe3d 	bl	125ec <TLC59711DmxParams::GetLedType()>
   12cf4:	e1a03000 	mov	r3, r0
   12cf8:	e1a00003 	mov	r0, r3
   12cfc:	eb00758e 	bl	3033c <TLC59711DmxParams::GetType(TTLC59711Type)>
   12d00:	e1a04000 	mov	r4, r0
   12d04:	e24b3ffb 	sub	r3, fp, #1004	; 0x3ec
   12d08:	e1a00003 	mov	r0, r3
   12d0c:	ebfffe40 	bl	12614 <TLC59711DmxParams::GetLedCount()>
   12d10:	e1a03000 	mov	r3, r0
   12d14:	e24b0e42 	sub	r0, fp, #1056	; 0x420
   12d18:	e240000c 	sub	r0, r0, #12
   12d1c:	e58d3008 	str	r3, [sp, #8]
   12d20:	e58d4004 	str	r4, [sp, #4]
   12d24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12d28:	e58d3000 	str	r3, [sp]
   12d2c:	e59f3670 	ldr	r3, [pc, #1648]	; 133a4 <main+0xb14>
   12d30:	e59f2670 	ldr	r2, [pc, #1648]	; 133a8 <main+0xb18>
   12d34:	e3a0103f 	mov	r1, #63	; 0x3f
   12d38:	ebfff94e 	bl	11278 <snprintf@plt>
   12d3c:	ea000007 	b	12d60 <main+0x4d0>
   12d40:	e24b0e42 	sub	r0, fp, #1056	; 0x420
   12d44:	e240000c 	sub	r0, r0, #12
   12d48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   12d4c:	e58d3000 	str	r3, [sp]
   12d50:	e59f364c 	ldr	r3, [pc, #1612]	; 133a4 <main+0xb14>
   12d54:	e59f2650 	ldr	r2, [pc, #1616]	; 133ac <main+0xb1c>
   12d58:	e3a0103f 	mov	r1, #63	; 0x3f
   12d5c:	ebfff945 	bl	11278 <snprintf@plt>
   12d60:	e24b0fe7 	sub	r0, fp, #924	; 0x39c
   12d64:	e3a03003 	mov	r3, #3
   12d68:	e3a02c66 	mov	r2, #26112	; 0x6600
   12d6c:	e59f163c 	ldr	r1, [pc, #1596]	; 133b0 <main+0xb20>
   12d70:	ebfffc58 	bl	11ed8 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
   12d74:	e24b3d53 	sub	r3, fp, #5312	; 0x14c0
   12d78:	e243300c 	sub	r3, r3, #12
   12d7c:	e243301c 	sub	r3, r3, #28
   12d80:	e1a00003 	mov	r0, r3
   12d84:	eb002e1d 	bl	1e600 <ArtNet4Node::ArtNet4Node()>
   12d88:	e24b3d53 	sub	r3, fp, #5312	; 0x14c0
   12d8c:	e243300c 	sub	r3, r3, #12
   12d90:	e2433024 	sub	r3, r3, #36	; 0x24
   12d94:	e3a01000 	mov	r1, #0
   12d98:	e1a00003 	mov	r0, r3
   12d9c:	eb0084dd 	bl	34118 <StoreArtNet::StoreArtNet(unsigned int)>
   12da0:	e24b3d53 	sub	r3, fp, #5312	; 0x14c0
   12da4:	e243300c 	sub	r3, r3, #12
   12da8:	e2433024 	sub	r3, r3, #36	; 0x24
   12dac:	e2832004 	add	r2, r3, #4
   12db0:	e24b3d53 	sub	r3, fp, #5312	; 0x14c0
   12db4:	e243300c 	sub	r3, r3, #12
   12db8:	e243301c 	sub	r3, r3, #28
   12dbc:	e2833004 	add	r3, r3, #4
   12dc0:	e1a01002 	mov	r1, r2
   12dc4:	e1a00003 	mov	r0, r3
   12dc8:	ebfffd27 	bl	1226c <ArtNetNode::SetArtNetStore(ArtNetStore*)>
   12dcc:	e24b2d53 	sub	r2, fp, #5312	; 0x14c0
   12dd0:	e242200c 	sub	r2, r2, #12
   12dd4:	e2422024 	sub	r2, r2, #36	; 0x24
   12dd8:	e24b3d55 	sub	r3, fp, #5440	; 0x1540
   12ddc:	e243300c 	sub	r3, r3, #12
   12de0:	e2433030 	sub	r3, r3, #48	; 0x30
   12de4:	e1a01002 	mov	r1, r2
   12de8:	e1a00003 	mov	r0, r3
   12dec:	eb0041c4 	bl	23504 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
   12df0:	e24b2e42 	sub	r2, fp, #1056	; 0x420
   12df4:	e242200c 	sub	r2, r2, #12
   12df8:	e24b3d53 	sub	r3, fp, #5312	; 0x14c0
   12dfc:	e243300c 	sub	r3, r3, #12
   12e00:	e243301c 	sub	r3, r3, #28
   12e04:	e2833004 	add	r3, r3, #4
   12e08:	e1a01002 	mov	r1, r2
   12e0c:	e1a00003 	mov	r0, r3
   12e10:	eb0032b6 	bl	1f8f0 <ArtNetNode::SetLongName(char const*)>
   12e14:	e24b3d55 	sub	r3, fp, #5440	; 0x1540
   12e18:	e243300c 	sub	r3, r3, #12
   12e1c:	e2433030 	sub	r3, r3, #48	; 0x30
   12e20:	e1a00003 	mov	r0, r3
   12e24:	eb0041d2 	bl	23574 <ArtNetParams::Load()>
   12e28:	e1a03000 	mov	r3, r0
   12e2c:	e3530000 	cmp	r3, #0
   12e30:	0a00000a 	beq	12e60 <main+0x5d0>
   12e34:	e24b3d55 	sub	r3, fp, #5440	; 0x1540
   12e38:	e243300c 	sub	r3, r3, #12
   12e3c:	e2433030 	sub	r3, r3, #48	; 0x30
   12e40:	e1a00003 	mov	r0, r3
   12e44:	eb003f45 	bl	22b60 <ArtNetParams::Dump()>
   12e48:	e24b3d55 	sub	r3, fp, #5440	; 0x1540
   12e4c:	e243300c 	sub	r3, r3, #12
   12e50:	e2433030 	sub	r3, r3, #48	; 0x30
   12e54:	e3a01000 	mov	r1, #0
   12e58:	e1a00003 	mov	r0, r3
   12e5c:	eb0043cf 	bl	23da0 <ArtNetParams::Set(unsigned int)>
   12e60:	e24b3d53 	sub	r3, fp, #5312	; 0x14c0
   12e64:	e243300c 	sub	r3, r3, #12
   12e68:	e243301c 	sub	r3, r3, #28
   12e6c:	e2833004 	add	r3, r3, #4
   12e70:	e51b1010 	ldr	r1, [fp, #-16]
   12e74:	e1a00003 	mov	r0, r3
   12e78:	ebfffce5 	bl	12214 <ArtNetNode::SetOutput(LightSet*)>
   12e7c:	e24b2d55 	sub	r2, fp, #5440	; 0x1540
   12e80:	e242200c 	sub	r2, r2, #12
   12e84:	e2422031 	sub	r2, r2, #49	; 0x31
   12e88:	e24b3d55 	sub	r3, fp, #5440	; 0x1540
   12e8c:	e243300c 	sub	r3, r3, #12
   12e90:	e2433030 	sub	r3, r3, #48	; 0x30
   12e94:	e3a01000 	mov	r1, #0
   12e98:	e1a00003 	mov	r0, r3
   12e9c:	ebfffd73 	bl	12470 <ArtNetParams::GetUniverse(unsigned int, bool&) const>
   12ea0:	e1a03000 	mov	r3, r0
   12ea4:	e1a02003 	mov	r2, r3
   12ea8:	e24b3d53 	sub	r3, fp, #5312	; 0x14c0
   12eac:	e243300c 	sub	r3, r3, #12
   12eb0:	e243301c 	sub	r3, r3, #28
   12eb4:	e2830004 	add	r0, r3, #4
   12eb8:	e1a03002 	mov	r3, r2
   12ebc:	e3a02001 	mov	r2, #1
   12ec0:	e3a01000 	mov	r1, #0
   12ec4:	eb003a91 	bl	21910 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
   12ec8:	e3a0002c 	mov	r0, #44	; 0x2c
   12ecc:	ebfff89b 	bl	11140 <operator new(unsigned int)@plt>
   12ed0:	e1a03000 	mov	r3, r0
   12ed4:	e1a04003 	mov	r4, r3
   12ed8:	e24b3e42 	sub	r3, fp, #1056	; 0x420
   12edc:	e243300c 	sub	r3, r3, #12
   12ee0:	e51b2010 	ldr	r2, [fp, #-16]
   12ee4:	e1a01003 	mov	r1, r3
   12ee8:	e1a00004 	mov	r0, r4
   12eec:	ebfffcf6 	bl	122cc <RDMPersonality::RDMPersonality(char const*, LightSet*)>
   12ef0:	e24b3a01 	sub	r3, fp, #4096	; 0x1000
   12ef4:	e243300c 	sub	r3, r3, #12
   12ef8:	e5034578 	str	r4, [r3, #-1400]	; 0xfffffa88
   12efc:	e24b1d55 	sub	r1, fp, #5440	; 0x1540
   12f00:	e241100c 	sub	r1, r1, #12
   12f04:	e2411038 	sub	r1, r1, #56	; 0x38
   12f08:	e24b3d59 	sub	r3, fp, #5696	; 0x1640
   12f0c:	e243300c 	sub	r3, r3, #12
   12f10:	e2433014 	sub	r3, r3, #20
   12f14:	e3a02001 	mov	r2, #1
   12f18:	e1a00003 	mov	r0, r3
   12f1c:	eb0002df 	bl	13aa0 <ArtNetRdmResponder::ArtNetRdmResponder(RDMPersonality**, unsigned int)>
   12f20:	e24b3d59 	sub	r3, fp, #5696	; 0x1640
   12f24:	e243300c 	sub	r3, r3, #12
   12f28:	e243301c 	sub	r3, r3, #28
   12f2c:	e1a00003 	mov	r0, r3
   12f30:	eb00865f 	bl	348b4 <StoreRDMDevice::StoreRDMDevice()>
   12f34:	e24b2d59 	sub	r2, fp, #5696	; 0x1640
   12f38:	e242200c 	sub	r2, r2, #12
   12f3c:	e242201c 	sub	r2, r2, #28
   12f40:	e24b3d5a 	sub	r3, fp, #5760	; 0x1680
   12f44:	e243300c 	sub	r3, r3, #12
   12f48:	e243300c 	sub	r3, r3, #12
   12f4c:	e1a01002 	mov	r1, r2
   12f50:	e1a00003 	mov	r0, r3
   12f54:	eb0005ed 	bl	14710 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
   12f58:	e24b3d59 	sub	r3, fp, #5696	; 0x1640
   12f5c:	e243300c 	sub	r3, r3, #12
   12f60:	e243301c 	sub	r3, r3, #28
   12f64:	e2832004 	add	r2, r3, #4
   12f68:	e24b3d59 	sub	r3, fp, #5696	; 0x1640
   12f6c:	e243300c 	sub	r3, r3, #12
   12f70:	e2433014 	sub	r3, r3, #20
   12f74:	e2833008 	add	r3, r3, #8
   12f78:	e1a01002 	mov	r1, r2
   12f7c:	e1a00003 	mov	r0, r3
   12f80:	ebfffcc5 	bl	1229c <RDMDevice::SetRDMDeviceStore(RDMDeviceStore*)>
   12f84:	e24b3d5a 	sub	r3, fp, #5760	; 0x1680
   12f88:	e243300c 	sub	r3, r3, #12
   12f8c:	e2433010 	sub	r3, r3, #16
   12f90:	e1a00003 	mov	r0, r3
   12f94:	eb0086cc 	bl	34acc <StoreRDMSensors::StoreRDMSensors()>
   12f98:	e24b2d5a 	sub	r2, fp, #5760	; 0x1680
   12f9c:	e242200c 	sub	r2, r2, #12
   12fa0:	e2422010 	sub	r2, r2, #16
   12fa4:	e24b3d5b 	sub	r3, fp, #5824	; 0x16c0
   12fa8:	e243300c 	sub	r3, r3, #12
   12fac:	e2433008 	sub	r3, r3, #8
   12fb0:	e1a01002 	mov	r1, r2
   12fb4:	e1a00003 	mov	r0, r3
   12fb8:	eb0019ee 	bl	19778 <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>
   12fbc:	e24b3d5a 	sub	r3, fp, #5760	; 0x1680
   12fc0:	e243300c 	sub	r3, r3, #12
   12fc4:	e243300c 	sub	r3, r3, #12
   12fc8:	e1a00003 	mov	r0, r3
   12fcc:	eb0005dd 	bl	14748 <RDMDeviceParams::Load()>
   12fd0:	e1a03000 	mov	r3, r0
   12fd4:	e3530000 	cmp	r3, #0
   12fd8:	0a00000e 	beq	13018 <main+0x788>
   12fdc:	e24b3d5a 	sub	r3, fp, #5760	; 0x1680
   12fe0:	e243300c 	sub	r3, r3, #12
   12fe4:	e243300c 	sub	r3, r3, #12
   12fe8:	e1a00003 	mov	r0, r3
   12fec:	eb00066f 	bl	149b0 <RDMDeviceParams::Dump()>
   12ff0:	e24b3d59 	sub	r3, fp, #5696	; 0x1640
   12ff4:	e243300c 	sub	r3, r3, #12
   12ff8:	e2433014 	sub	r3, r3, #20
   12ffc:	e2832008 	add	r2, r3, #8
   13000:	e24b3d5a 	sub	r3, fp, #5760	; 0x1680
   13004:	e243300c 	sub	r3, r3, #12
   13008:	e243300c 	sub	r3, r3, #12
   1300c:	e1a01002 	mov	r1, r2
   13010:	e1a00003 	mov	r0, r3
   13014:	eb000640 	bl	1491c <RDMDeviceParams::Set(RDMDevice*)>
   13018:	e24b3d5b 	sub	r3, fp, #5824	; 0x16c0
   1301c:	e243300c 	sub	r3, r3, #12
   13020:	e2433008 	sub	r3, r3, #8
   13024:	e1a00003 	mov	r0, r3
   13028:	eb0019d4 	bl	19780 <RDMSensorsParams::Load()>
   1302c:	e1a03000 	mov	r3, r0
   13030:	e3530000 	cmp	r3, #0
   13034:	0a000009 	beq	13060 <main+0x7d0>
   13038:	e24b3d5b 	sub	r3, fp, #5824	; 0x16c0
   1303c:	e243300c 	sub	r3, r3, #12
   13040:	e2433008 	sub	r3, r3, #8
   13044:	e1a00003 	mov	r0, r3
   13048:	eb001a36 	bl	19928 <RDMSensorsParams::Dump()>
   1304c:	e24b3d5b 	sub	r3, fp, #5824	; 0x16c0
   13050:	e243300c 	sub	r3, r3, #12
   13054:	e2433008 	sub	r3, r3, #8
   13058:	e1a00003 	mov	r0, r3
   1305c:	eb001a44 	bl	19974 <RDMSensorsParams::Set()>
   13060:	e24b3d59 	sub	r3, fp, #5696	; 0x1640
   13064:	e243300c 	sub	r3, r3, #12
   13068:	e2433014 	sub	r3, r3, #20
   1306c:	e2833004 	add	r3, r3, #4
   13070:	e1a00003 	mov	r0, r3
   13074:	eb000465 	bl	14210 <RDMDeviceResponder::Init()>
   13078:	e24b3d59 	sub	r3, fp, #5696	; 0x1640
   1307c:	e243300c 	sub	r3, r3, #12
   13080:	e2433014 	sub	r3, r3, #20
   13084:	e2833004 	add	r3, r3, #4
   13088:	e1a00003 	mov	r0, r3
   1308c:	eb00050e 	bl	144cc <RDMDeviceResponder::Print()>
   13090:	e24b1d59 	sub	r1, fp, #5696	; 0x1640
   13094:	e241100c 	sub	r1, r1, #12
   13098:	e2411014 	sub	r1, r1, #20
   1309c:	e24b3d53 	sub	r3, fp, #5312	; 0x14c0
   130a0:	e243300c 	sub	r3, r3, #12
   130a4:	e243301c 	sub	r3, r3, #28
   130a8:	e2833004 	add	r3, r3, #4
   130ac:	e3a02001 	mov	r2, #1
   130b0:	e1a00003 	mov	r0, r3
   130b4:	eb003908 	bl	214dc <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)>
   130b8:	e24b3d53 	sub	r3, fp, #5312	; 0x14c0
   130bc:	e243300c 	sub	r3, r3, #12
   130c0:	e243301c 	sub	r3, r3, #28
   130c4:	e1a00003 	mov	r0, r3
   130c8:	eb002efb 	bl	1ecbc <ArtNet4Node::Print()>
   130cc:	e51b3010 	ldr	r3, [fp, #-16]
   130d0:	e5933000 	ldr	r3, [r3]
   130d4:	e283301c 	add	r3, r3, #28
   130d8:	e5933000 	ldr	r3, [r3]
   130dc:	e51b0010 	ldr	r0, [fp, #-16]
   130e0:	e12fff33 	blx	r3
   130e4:	e24b3fe7 	sub	r3, fp, #924	; 0x39c
   130e8:	e59f12c4 	ldr	r1, [pc, #708]	; 133b4 <main+0xb24>
   130ec:	e1a00003 	mov	r0, r3
   130f0:	eb00970b 	bl	38d24 <DisplayUdf::SetTitle(char const*, ...)>
   130f4:	e24b3fe7 	sub	r3, fp, #924	; 0x39c
   130f8:	e3a02006 	mov	r2, #6
   130fc:	e3a01002 	mov	r1, #2
   13100:	e1a00003 	mov	r0, r3
   13104:	eb00971f 	bl	38d88 <DisplayUdf::Set(unsigned int, displayudf::Labels)>
   13108:	e24b3fe7 	sub	r3, fp, #924	; 0x39c
   1310c:	e3a02002 	mov	r2, #2
   13110:	e3a01003 	mov	r1, #3
   13114:	e1a00003 	mov	r0, r3
   13118:	eb00971a 	bl	38d88 <DisplayUdf::Set(unsigned int, displayudf::Labels)>
   1311c:	e24b3fe7 	sub	r3, fp, #924	; 0x39c
   13120:	e3a02003 	mov	r2, #3
   13124:	e3a01004 	mov	r1, #4
   13128:	e1a00003 	mov	r0, r3
   1312c:	eb009715 	bl	38d88 <DisplayUdf::Set(unsigned int, displayudf::Labels)>
   13130:	e24b3fe7 	sub	r3, fp, #924	; 0x39c
   13134:	e3a02008 	mov	r2, #8
   13138:	e3a01005 	mov	r1, #5
   1313c:	e1a00003 	mov	r0, r3
   13140:	eb009710 	bl	38d88 <DisplayUdf::Set(unsigned int, displayudf::Labels)>
   13144:	e24b3fe7 	sub	r3, fp, #924	; 0x39c
   13148:	e3a0200d 	mov	r2, #13
   1314c:	e3a01006 	mov	r1, #6
   13150:	e1a00003 	mov	r0, r3
   13154:	eb00970b 	bl	38d88 <DisplayUdf::Set(unsigned int, displayudf::Labels)>
   13158:	e24b3d5b 	sub	r3, fp, #5824	; 0x16c0
   1315c:	e243300c 	sub	r3, r3, #12
   13160:	e243300c 	sub	r3, r3, #12
   13164:	e1a00003 	mov	r0, r3
   13168:	eb007e2a 	bl	32a18 <StoreDisplayUdf::StoreDisplayUdf()>
   1316c:	e24b2d5b 	sub	r2, fp, #5824	; 0x16c0
   13170:	e242200c 	sub	r2, r2, #12
   13174:	e242200c 	sub	r2, r2, #12
   13178:	e24b3d5b 	sub	r3, fp, #5824	; 0x16c0
   1317c:	e243300c 	sub	r3, r3, #12
   13180:	e2433034 	sub	r3, r3, #52	; 0x34
   13184:	e1a01002 	mov	r1, r2
   13188:	e1a00003 	mov	r0, r3
   1318c:	eb009454 	bl	382e4 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
   13190:	e24b3d5b 	sub	r3, fp, #5824	; 0x16c0
   13194:	e243300c 	sub	r3, r3, #12
   13198:	e2433034 	sub	r3, r3, #52	; 0x34
   1319c:	e1a00003 	mov	r0, r3
   131a0:	eb00945a 	bl	38310 <DisplayUdfParams::Load()>
   131a4:	e1a03000 	mov	r3, r0
   131a8:	e3530000 	cmp	r3, #0
   131ac:	0a00000b 	beq	131e0 <main+0x950>
   131b0:	e24b2fe7 	sub	r2, fp, #924	; 0x39c
   131b4:	e24b3d5b 	sub	r3, fp, #5824	; 0x16c0
   131b8:	e243300c 	sub	r3, r3, #12
   131bc:	e2433034 	sub	r3, r3, #52	; 0x34
   131c0:	e1a01002 	mov	r1, r2
   131c4:	e1a00003 	mov	r0, r3
   131c8:	eb009538 	bl	386b0 <DisplayUdfParams::Set(DisplayUdf*)>
   131cc:	e24b3d5b 	sub	r3, fp, #5824	; 0x16c0
   131d0:	e243300c 	sub	r3, r3, #12
   131d4:	e2433034 	sub	r3, r3, #52	; 0x34
   131d8:	e1a00003 	mov	r0, r3
   131dc:	eb00955d 	bl	38758 <DisplayUdfParams::Dump()>
   131e0:	e24b3d53 	sub	r3, fp, #5312	; 0x14c0
   131e4:	e243300c 	sub	r3, r3, #12
   131e8:	e243301c 	sub	r3, r3, #28
   131ec:	e2831004 	add	r1, r3, #4
   131f0:	e24b3fe7 	sub	r3, fp, #924	; 0x39c
   131f4:	e3a02000 	mov	r2, #0
   131f8:	e1a00003 	mov	r0, r3
   131fc:	eb0097ff 	bl	39200 <DisplayUdf::Show(ArtNetNode*, unsigned int)>
   13200:	e24b3d53 	sub	r3, fp, #5312	; 0x14c0
   13204:	e243300c 	sub	r3, r3, #12
   13208:	e243301c 	sub	r3, r3, #28
   1320c:	e2833004 	add	r3, r3, #4
   13210:	e1a00003 	mov	r0, r3
   13214:	ebfffc0a 	bl	12244 <ArtNetNode::GetActiveOutputPorts() const>
   13218:	e1a03000 	mov	r3, r0
   1321c:	e24b0c17 	sub	r0, fp, #5888	; 0x1700
   13220:	e240000c 	sub	r0, r0, #12
   13224:	e2400018 	sub	r0, r0, #24
   13228:	e3a02007 	mov	r2, #7
   1322c:	e3a01000 	mov	r1, #0
   13230:	eb0025c6 	bl	1c950 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
   13234:	e24b3c17 	sub	r3, fp, #5888	; 0x1700
   13238:	e243300c 	sub	r3, r3, #12
   1323c:	e243301c 	sub	r3, r3, #28
   13240:	e1a00003 	mov	r0, r3
   13244:	eb007cbe 	bl	32544 <StoreRemoteConfig::StoreRemoteConfig()>
   13248:	e24b3c17 	sub	r3, fp, #5888	; 0x1700
   1324c:	e243300c 	sub	r3, r3, #12
   13250:	e243301c 	sub	r3, r3, #28
   13254:	e24b2d5d 	sub	r2, fp, #5952	; 0x1740
   13258:	e242200c 	sub	r2, r2, #12
   1325c:	e1a01003 	mov	r1, r3
   13260:	e1a00002 	mov	r0, r2
   13264:	eb00241d 	bl	1c2e0 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
   13268:	e24b3d5d 	sub	r3, fp, #5952	; 0x1740
   1326c:	e243300c 	sub	r3, r3, #12
   13270:	e1a00003 	mov	r0, r3
   13274:	eb002421 	bl	1c300 <RemoteConfigParams::Load()>
   13278:	e1a03000 	mov	r3, r0
   1327c:	e3530000 	cmp	r3, #0
   13280:	0a00000b 	beq	132b4 <main+0xa24>
   13284:	e24b3c17 	sub	r3, fp, #5888	; 0x1700
   13288:	e243300c 	sub	r3, r3, #12
   1328c:	e2433018 	sub	r3, r3, #24
   13290:	e24b2d5d 	sub	r2, fp, #5952	; 0x1740
   13294:	e242200c 	sub	r2, r2, #12
   13298:	e1a01003 	mov	r1, r3
   1329c:	e1a00002 	mov	r0, r2
   132a0:	eb0024f8 	bl	1c688 <RemoteConfigParams::Set(RemoteConfig*)>
   132a4:	e24b3d5d 	sub	r3, fp, #5952	; 0x1740
   132a8:	e243300c 	sub	r3, r3, #12
   132ac:	e1a00003 	mov	r0, r3
   132b0:	eb0023e9 	bl	1c25c <RemoteConfigParams::Dump()>
   132b4:	e24b3fe9 	sub	r3, fp, #932	; 0x3a4
   132b8:	e1a00003 	mov	r0, r3
   132bc:	eb008078 	bl	334a4 <ConfigStore::Flash()>
   132c0:	e1a03000 	mov	r3, r0
   132c4:	e3530000 	cmp	r3, #0
   132c8:	0a000000 	beq	132d0 <main+0xa40>
   132cc:	eafffff8 	b	132b4 <main+0xa24>
   132d0:	e24b0fe7 	sub	r0, fp, #924	; 0x39c
   132d4:	e3a03003 	mov	r3, #3
   132d8:	e3a02c7d 	mov	r2, #32000	; 0x7d00
   132dc:	e59f10d4 	ldr	r1, [pc, #212]	; 133b8 <main+0xb28>
   132e0:	ebfffafc 	bl	11ed8 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
   132e4:	e24b3d53 	sub	r3, fp, #5312	; 0x14c0
   132e8:	e243300c 	sub	r3, r3, #12
   132ec:	e243301c 	sub	r3, r3, #28
   132f0:	e1a00003 	mov	r0, r3
   132f4:	eb002d21 	bl	1e780 <ArtNet4Node::Start()>
   132f8:	e24b0fe7 	sub	r0, fp, #924	; 0x39c
   132fc:	e3a03002 	mov	r3, #2
   13300:	e59f20b4 	ldr	r2, [pc, #180]	; 133bc <main+0xb2c>
   13304:	e59f10b4 	ldr	r1, [pc, #180]	; 133c0 <main+0xb30>
   13308:	ebfffaf2 	bl	11ed8 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
   1330c:	e24b3d53 	sub	r3, fp, #5312	; 0x14c0
   13310:	e243300c 	sub	r3, r3, #12
   13314:	e243301c 	sub	r3, r3, #28
   13318:	e1a00003 	mov	r0, r3
   1331c:	eb002d77 	bl	1e900 <ArtNet4Node::Run()>
   13320:	e24b3c17 	sub	r3, fp, #5888	; 0x1700
   13324:	e243300c 	sub	r3, r3, #12
   13328:	e2433018 	sub	r3, r3, #24
   1332c:	e1a00003 	mov	r0, r3
   13330:	eb0025e3 	bl	1cac4 <RemoteConfig::Run()>
   13334:	e24b3fe9 	sub	r3, fp, #932	; 0x3a4
   13338:	e1a00003 	mov	r0, r3
   1333c:	eb008058 	bl	334a4 <ConfigStore::Flash()>
   13340:	e24b3fe7 	sub	r3, fp, #924	; 0x39c
   13344:	e1a00003 	mov	r0, r3
   13348:	ebfffb73 	bl	1211c <Display::Run()>
   1334c:	eaffffee 	b	1330c <main+0xa7c>
   13350:	e1a03004 	mov	r3, r4
   13354:	e1a00003 	mov	r0, r3
   13358:	e24bd008 	sub	sp, fp, #8
   1335c:	e8bd8810 	pop	{r4, fp, pc}
   13360:	0005c298 	.word	0x0005c298
   13364:	00044238 	.word	0x00044238
   13368:	00044264 	.word	0x00044264
   1336c:	00044284 	.word	0x00044284
   13370:	000442ac 	.word	0x000442ac
   13374:	000442b8 	.word	0x000442b8
   13378:	0004449c 	.word	0x0004449c
   1337c:	000442c4 	.word	0x000442c4
   13380:	00048e30 	.word	0x00048e30
   13384:	000442e4 	.word	0x000442e4
   13388:	000478b0 	.word	0x000478b0
   1338c:	0004452c 	.word	0x0004452c
   13390:	00044304 	.word	0x00044304
   13394:	00044314 	.word	0x00044314
   13398:	0004432c 	.word	0x0004432c
   1339c:	00044344 	.word	0x00044344
   133a0:	0004434c 	.word	0x0004434c
   133a4:	00044360 	.word	0x00044360
   133a8:	0004436c 	.word	0x0004436c
   133ac:	00044384 	.word	0x00044384
   133b0:	00046abc 	.word	0x00046abc
   133b4:	0004438c 	.word	0x0004438c
   133b8:	00046ad0 	.word	0x00046ad0
   133bc:	00008080 	.word	0x00008080
   133c0:	00046ae4 	.word	0x00046ae4

000133c4 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>:
   133c4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   133c8:	e28db000 	add	fp, sp, #0
   133cc:	e24dd00c 	sub	sp, sp, #12
   133d0:	e50b0008 	str	r0, [fp, #-8]
   133d4:	e50b100c 	str	r1, [fp, #-12]
   133d8:	e51b300c 	ldr	r3, [fp, #-12]
   133dc:	e5932000 	ldr	r2, [r3]
   133e0:	e51b3008 	ldr	r3, [fp, #-8]
   133e4:	e5933000 	ldr	r3, [r3]
   133e8:	e1520003 	cmp	r2, r3
   133ec:	2a000001 	bcs	133f8 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x34>
   133f0:	e51b300c 	ldr	r3, [fp, #-12]
   133f4:	ea000000 	b	133fc <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x38>
   133f8:	e51b3008 	ldr	r3, [fp, #-8]
   133fc:	e1a00003 	mov	r0, r3
   13400:	e28bd000 	add	sp, fp, #0
   13404:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13408:	e12fff1e 	bx	lr

0001340c <StoreNetwork::~StoreNetwork()>:
   1340c:	e92d4800 	push	{fp, lr}
   13410:	e28db004 	add	fp, sp, #4
   13414:	e24dd008 	sub	sp, sp, #8
   13418:	e50b0008 	str	r0, [fp, #-8]
   1341c:	e59f203c 	ldr	r2, [pc, #60]	; 13460 <StoreNetwork::~StoreNetwork()+0x54>
   13420:	e51b3008 	ldr	r3, [fp, #-8]
   13424:	e5832000 	str	r2, [r3]
   13428:	e59f2034 	ldr	r2, [pc, #52]	; 13464 <StoreNetwork::~StoreNetwork()+0x58>
   1342c:	e51b3008 	ldr	r3, [fp, #-8]
   13430:	e5832004 	str	r2, [r3, #4]
   13434:	e51b3008 	ldr	r3, [fp, #-8]
   13438:	e2833004 	add	r3, r3, #4
   1343c:	e1a00003 	mov	r0, r3
   13440:	ebfff877 	bl	11624 <NetworkStore::~NetworkStore()>
   13444:	e51b3008 	ldr	r3, [fp, #-8]
   13448:	e1a00003 	mov	r0, r3
   1344c:	ebfff899 	bl	116b8 <NetworkParamsStore::~NetworkParamsStore()>
   13450:	e51b3008 	ldr	r3, [fp, #-8]
   13454:	e1a00003 	mov	r0, r3
   13458:	e24bd004 	sub	sp, fp, #4
   1345c:	e8bd8800 	pop	{fp, pc}
   13460:	000444a8 	.word	0x000444a8
   13464:	000444d4 	.word	0x000444d4

00013468 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
   13468:	e2400004 	sub	r0, r0, #4
   1346c:	eaffffe6 	b	1340c <StoreNetwork::~StoreNetwork()>

00013470 <StoreNetwork::~StoreNetwork()>:
   13470:	e92d4800 	push	{fp, lr}
   13474:	e28db004 	add	fp, sp, #4
   13478:	e24dd008 	sub	sp, sp, #8
   1347c:	e50b0008 	str	r0, [fp, #-8]
   13480:	e51b0008 	ldr	r0, [fp, #-8]
   13484:	ebffffe0 	bl	1340c <StoreNetwork::~StoreNetwork()>
   13488:	e51b0008 	ldr	r0, [fp, #-8]
   1348c:	ebfff79d 	bl	11308 <operator delete(void*)@plt>
   13490:	e51b3008 	ldr	r3, [fp, #-8]
   13494:	e1a00003 	mov	r0, r3
   13498:	e24bd004 	sub	sp, fp, #4
   1349c:	e8bd8800 	pop	{fp, pc}

000134a0 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
   134a0:	e2400004 	sub	r0, r0, #4
   134a4:	eafffff1 	b	13470 <StoreNetwork::~StoreNetwork()>

000134a8 <artnet::display_shortname(char const*)>:
   134a8:	e92d4800 	push	{fp, lr}
   134ac:	e28db004 	add	fp, sp, #4
   134b0:	e24dd008 	sub	sp, sp, #8
   134b4:	e50b0008 	str	r0, [fp, #-8]
   134b8:	e3a03023 	mov	r3, #35	; 0x23
   134bc:	e59f2028 	ldr	r2, [pc, #40]	; 134ec <artnet::display_shortname(char const*)+0x44>
   134c0:	e59f1028 	ldr	r1, [pc, #40]	; 134f0 <artnet::display_shortname(char const*)+0x48>
   134c4:	e59f0028 	ldr	r0, [pc, #40]	; 134f4 <artnet::display_shortname(char const*)+0x4c>
   134c8:	ebfff749 	bl	111f4 <printf@plt>
   134cc:	e3a03024 	mov	r3, #36	; 0x24
   134d0:	e59f2014 	ldr	r2, [pc, #20]	; 134ec <artnet::display_shortname(char const*)+0x44>
   134d4:	e59f1014 	ldr	r1, [pc, #20]	; 134f0 <artnet::display_shortname(char const*)+0x48>
   134d8:	e59f0018 	ldr	r0, [pc, #24]	; 134f8 <artnet::display_shortname(char const*)+0x50>
   134dc:	ebfff744 	bl	111f4 <printf@plt>
   134e0:	e1a00000 	nop			; (mov r0, r0)
   134e4:	e24bd004 	sub	sp, fp, #4
   134e8:	e8bd8800 	pop	{fp, pc}
   134ec:	00044658 	.word	0x00044658
   134f0:	00044620 	.word	0x00044620
   134f4:	00044638 	.word	0x00044638
   134f8:	00044648 	.word	0x00044648

000134fc <artnet::display_longname(char const*)>:
   134fc:	e92d4800 	push	{fp, lr}
   13500:	e28db004 	add	fp, sp, #4
   13504:	e24dd008 	sub	sp, sp, #8
   13508:	e50b0008 	str	r0, [fp, #-8]
   1350c:	e3a03028 	mov	r3, #40	; 0x28
   13510:	e59f2028 	ldr	r2, [pc, #40]	; 13540 <artnet::display_longname(char const*)+0x44>
   13514:	e59f1028 	ldr	r1, [pc, #40]	; 13544 <artnet::display_longname(char const*)+0x48>
   13518:	e59f0028 	ldr	r0, [pc, #40]	; 13548 <artnet::display_longname(char const*)+0x4c>
   1351c:	ebfff734 	bl	111f4 <printf@plt>
   13520:	e3a03029 	mov	r3, #41	; 0x29
   13524:	e59f2014 	ldr	r2, [pc, #20]	; 13540 <artnet::display_longname(char const*)+0x44>
   13528:	e59f1014 	ldr	r1, [pc, #20]	; 13544 <artnet::display_longname(char const*)+0x48>
   1352c:	e59f0018 	ldr	r0, [pc, #24]	; 1354c <artnet::display_longname(char const*)+0x50>
   13530:	ebfff72f 	bl	111f4 <printf@plt>
   13534:	e1a00000 	nop			; (mov r0, r0)
   13538:	e24bd004 	sub	sp, fp, #4
   1353c:	e8bd8800 	pop	{fp, pc}
   13540:	0004466c 	.word	0x0004466c
   13544:	00044620 	.word	0x00044620
   13548:	00044638 	.word	0x00044638
   1354c:	00044648 	.word	0x00044648

00013550 <artnet::display_universe_switch(unsigned int, unsigned char)>:
   13550:	e92d4800 	push	{fp, lr}
   13554:	e28db004 	add	fp, sp, #4
   13558:	e24dd008 	sub	sp, sp, #8
   1355c:	e50b0008 	str	r0, [fp, #-8]
   13560:	e1a03001 	mov	r3, r1
   13564:	e54b3009 	strb	r3, [fp, #-9]
   13568:	e3a0302d 	mov	r3, #45	; 0x2d
   1356c:	e59f2028 	ldr	r2, [pc, #40]	; 1359c <artnet::display_universe_switch(unsigned int, unsigned char)+0x4c>
   13570:	e59f1028 	ldr	r1, [pc, #40]	; 135a0 <artnet::display_universe_switch(unsigned int, unsigned char)+0x50>
   13574:	e59f0028 	ldr	r0, [pc, #40]	; 135a4 <artnet::display_universe_switch(unsigned int, unsigned char)+0x54>
   13578:	ebfff71d 	bl	111f4 <printf@plt>
   1357c:	e3a0302e 	mov	r3, #46	; 0x2e
   13580:	e59f2014 	ldr	r2, [pc, #20]	; 1359c <artnet::display_universe_switch(unsigned int, unsigned char)+0x4c>
   13584:	e59f1014 	ldr	r1, [pc, #20]	; 135a0 <artnet::display_universe_switch(unsigned int, unsigned char)+0x50>
   13588:	e59f0018 	ldr	r0, [pc, #24]	; 135a8 <artnet::display_universe_switch(unsigned int, unsigned char)+0x58>
   1358c:	ebfff718 	bl	111f4 <printf@plt>
   13590:	e1a00000 	nop			; (mov r0, r0)
   13594:	e24bd004 	sub	sp, fp, #4
   13598:	e8bd8800 	pop	{fp, pc}
   1359c:	00044680 	.word	0x00044680
   135a0:	00044620 	.word	0x00044620
   135a4:	00044638 	.word	0x00044638
   135a8:	00044648 	.word	0x00044648

000135ac <artnet::display_net_switch(unsigned char)>:
   135ac:	e92d4800 	push	{fp, lr}
   135b0:	e28db004 	add	fp, sp, #4
   135b4:	e24dd008 	sub	sp, sp, #8
   135b8:	e1a03000 	mov	r3, r0
   135bc:	e54b3005 	strb	r3, [fp, #-5]
   135c0:	e3a03032 	mov	r3, #50	; 0x32
   135c4:	e59f2028 	ldr	r2, [pc, #40]	; 135f4 <artnet::display_net_switch(unsigned char)+0x48>
   135c8:	e59f1028 	ldr	r1, [pc, #40]	; 135f8 <artnet::display_net_switch(unsigned char)+0x4c>
   135cc:	e59f0028 	ldr	r0, [pc, #40]	; 135fc <artnet::display_net_switch(unsigned char)+0x50>
   135d0:	ebfff707 	bl	111f4 <printf@plt>
   135d4:	e3a03033 	mov	r3, #51	; 0x33
   135d8:	e59f2014 	ldr	r2, [pc, #20]	; 135f4 <artnet::display_net_switch(unsigned char)+0x48>
   135dc:	e59f1014 	ldr	r1, [pc, #20]	; 135f8 <artnet::display_net_switch(unsigned char)+0x4c>
   135e0:	e59f0018 	ldr	r0, [pc, #24]	; 13600 <artnet::display_net_switch(unsigned char)+0x54>
   135e4:	ebfff702 	bl	111f4 <printf@plt>
   135e8:	e1a00000 	nop			; (mov r0, r0)
   135ec:	e24bd004 	sub	sp, fp, #4
   135f0:	e8bd8800 	pop	{fp, pc}
   135f4:	00044698 	.word	0x00044698
   135f8:	00044620 	.word	0x00044620
   135fc:	00044638 	.word	0x00044638
   13600:	00044648 	.word	0x00044648

00013604 <artnet::display_subnet_switch(unsigned char)>:
   13604:	e92d4800 	push	{fp, lr}
   13608:	e28db004 	add	fp, sp, #4
   1360c:	e24dd008 	sub	sp, sp, #8
   13610:	e1a03000 	mov	r3, r0
   13614:	e54b3005 	strb	r3, [fp, #-5]
   13618:	e3a03037 	mov	r3, #55	; 0x37
   1361c:	e59f2028 	ldr	r2, [pc, #40]	; 1364c <artnet::display_subnet_switch(unsigned char)+0x48>
   13620:	e59f1028 	ldr	r1, [pc, #40]	; 13650 <artnet::display_subnet_switch(unsigned char)+0x4c>
   13624:	e59f0028 	ldr	r0, [pc, #40]	; 13654 <artnet::display_subnet_switch(unsigned char)+0x50>
   13628:	ebfff6f1 	bl	111f4 <printf@plt>
   1362c:	e3a03038 	mov	r3, #56	; 0x38
   13630:	e59f2014 	ldr	r2, [pc, #20]	; 1364c <artnet::display_subnet_switch(unsigned char)+0x48>
   13634:	e59f1014 	ldr	r1, [pc, #20]	; 13650 <artnet::display_subnet_switch(unsigned char)+0x4c>
   13638:	e59f0018 	ldr	r0, [pc, #24]	; 13658 <artnet::display_subnet_switch(unsigned char)+0x54>
   1363c:	ebfff6ec 	bl	111f4 <printf@plt>
   13640:	e1a00000 	nop			; (mov r0, r0)
   13644:	e24bd004 	sub	sp, fp, #4
   13648:	e8bd8800 	pop	{fp, pc}
   1364c:	000446ac 	.word	0x000446ac
   13650:	00044620 	.word	0x00044620
   13654:	00044638 	.word	0x00044638
   13658:	00044648 	.word	0x00044648

0001365c <artnet::display_merge_mode(unsigned int, lightset::MergeMode)>:
   1365c:	e92d4800 	push	{fp, lr}
   13660:	e28db004 	add	fp, sp, #4
   13664:	e24dd008 	sub	sp, sp, #8
   13668:	e50b0008 	str	r0, [fp, #-8]
   1366c:	e50b100c 	str	r1, [fp, #-12]
   13670:	e3a0303c 	mov	r3, #60	; 0x3c
   13674:	e59f2028 	ldr	r2, [pc, #40]	; 136a4 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)+0x48>
   13678:	e59f1028 	ldr	r1, [pc, #40]	; 136a8 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)+0x4c>
   1367c:	e59f0028 	ldr	r0, [pc, #40]	; 136ac <artnet::display_merge_mode(unsigned int, lightset::MergeMode)+0x50>
   13680:	ebfff6db 	bl	111f4 <printf@plt>
   13684:	e3a0303d 	mov	r3, #61	; 0x3d
   13688:	e59f2014 	ldr	r2, [pc, #20]	; 136a4 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)+0x48>
   1368c:	e59f1014 	ldr	r1, [pc, #20]	; 136a8 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)+0x4c>
   13690:	e59f0018 	ldr	r0, [pc, #24]	; 136b0 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)+0x54>
   13694:	ebfff6d6 	bl	111f4 <printf@plt>
   13698:	e1a00000 	nop			; (mov r0, r0)
   1369c:	e24bd004 	sub	sp, fp, #4
   136a0:	e8bd8800 	pop	{fp, pc}
   136a4:	000446c4 	.word	0x000446c4
   136a8:	00044620 	.word	0x00044620
   136ac:	00044638 	.word	0x00044638
   136b0:	00044648 	.word	0x00044648

000136b4 <artnet::display_port_protocol(unsigned int, artnet::PortProtocol)>:
   136b4:	e92d4800 	push	{fp, lr}
   136b8:	e28db004 	add	fp, sp, #4
   136bc:	e24dd008 	sub	sp, sp, #8
   136c0:	e50b0008 	str	r0, [fp, #-8]
   136c4:	e50b100c 	str	r1, [fp, #-12]
   136c8:	e3a03041 	mov	r3, #65	; 0x41
   136cc:	e59f2028 	ldr	r2, [pc, #40]	; 136fc <artnet::display_port_protocol(unsigned int, artnet::PortProtocol)+0x48>
   136d0:	e59f1028 	ldr	r1, [pc, #40]	; 13700 <artnet::display_port_protocol(unsigned int, artnet::PortProtocol)+0x4c>
   136d4:	e59f0028 	ldr	r0, [pc, #40]	; 13704 <artnet::display_port_protocol(unsigned int, artnet::PortProtocol)+0x50>
   136d8:	ebfff6c5 	bl	111f4 <printf@plt>
   136dc:	e3a03042 	mov	r3, #66	; 0x42
   136e0:	e59f2014 	ldr	r2, [pc, #20]	; 136fc <artnet::display_port_protocol(unsigned int, artnet::PortProtocol)+0x48>
   136e4:	e59f1014 	ldr	r1, [pc, #20]	; 13700 <artnet::display_port_protocol(unsigned int, artnet::PortProtocol)+0x4c>
   136e8:	e59f0018 	ldr	r0, [pc, #24]	; 13708 <artnet::display_port_protocol(unsigned int, artnet::PortProtocol)+0x54>
   136ec:	ebfff6c0 	bl	111f4 <printf@plt>
   136f0:	e1a00000 	nop			; (mov r0, r0)
   136f4:	e24bd004 	sub	sp, fp, #4
   136f8:	e8bd8800 	pop	{fp, pc}
   136fc:	000446d8 	.word	0x000446d8
   13700:	00044620 	.word	0x00044620
   13704:	00044638 	.word	0x00044638
   13708:	00044648 	.word	0x00044648

0001370c <artnet::display_rdm_enabled(unsigned int, bool)>:
   1370c:	e92d4800 	push	{fp, lr}
   13710:	e28db004 	add	fp, sp, #4
   13714:	e24dd008 	sub	sp, sp, #8
   13718:	e50b0008 	str	r0, [fp, #-8]
   1371c:	e1a03001 	mov	r3, r1
   13720:	e54b3009 	strb	r3, [fp, #-9]
   13724:	e3a03046 	mov	r3, #70	; 0x46
   13728:	e59f2028 	ldr	r2, [pc, #40]	; 13758 <artnet::display_rdm_enabled(unsigned int, bool)+0x4c>
   1372c:	e59f1028 	ldr	r1, [pc, #40]	; 1375c <artnet::display_rdm_enabled(unsigned int, bool)+0x50>
   13730:	e59f0028 	ldr	r0, [pc, #40]	; 13760 <artnet::display_rdm_enabled(unsigned int, bool)+0x54>
   13734:	ebfff6ae 	bl	111f4 <printf@plt>
   13738:	e3a03047 	mov	r3, #71	; 0x47
   1373c:	e59f2014 	ldr	r2, [pc, #20]	; 13758 <artnet::display_rdm_enabled(unsigned int, bool)+0x4c>
   13740:	e59f1014 	ldr	r1, [pc, #20]	; 1375c <artnet::display_rdm_enabled(unsigned int, bool)+0x50>
   13744:	e59f0018 	ldr	r0, [pc, #24]	; 13764 <artnet::display_rdm_enabled(unsigned int, bool)+0x58>
   13748:	ebfff6a9 	bl	111f4 <printf@plt>
   1374c:	e1a00000 	nop			; (mov r0, r0)
   13750:	e24bd004 	sub	sp, fp, #4
   13754:	e8bd8800 	pop	{fp, pc}
   13758:	000446f0 	.word	0x000446f0
   1375c:	00044620 	.word	0x00044620
   13760:	00044638 	.word	0x00044638
   13764:	00044648 	.word	0x00044648

00013768 <artnet::display_failsafe(unsigned char)>:
   13768:	e92d4800 	push	{fp, lr}
   1376c:	e28db004 	add	fp, sp, #4
   13770:	e24dd008 	sub	sp, sp, #8
   13774:	e1a03000 	mov	r3, r0
   13778:	e54b3005 	strb	r3, [fp, #-5]
   1377c:	e3a0304b 	mov	r3, #75	; 0x4b
   13780:	e59f2028 	ldr	r2, [pc, #40]	; 137b0 <artnet::display_failsafe(unsigned char)+0x48>
   13784:	e59f1028 	ldr	r1, [pc, #40]	; 137b4 <artnet::display_failsafe(unsigned char)+0x4c>
   13788:	e59f0028 	ldr	r0, [pc, #40]	; 137b8 <artnet::display_failsafe(unsigned char)+0x50>
   1378c:	ebfff698 	bl	111f4 <printf@plt>
   13790:	e3a0304c 	mov	r3, #76	; 0x4c
   13794:	e59f2014 	ldr	r2, [pc, #20]	; 137b0 <artnet::display_failsafe(unsigned char)+0x48>
   13798:	e59f1014 	ldr	r1, [pc, #20]	; 137b4 <artnet::display_failsafe(unsigned char)+0x4c>
   1379c:	e59f0018 	ldr	r0, [pc, #24]	; 137bc <artnet::display_failsafe(unsigned char)+0x54>
   137a0:	ebfff693 	bl	111f4 <printf@plt>
   137a4:	e1a00000 	nop			; (mov r0, r0)
   137a8:	e24bd004 	sub	sp, fp, #4
   137ac:	e8bd8800 	pop	{fp, pc}
   137b0:	00044704 	.word	0x00044704
   137b4:	00044620 	.word	0x00044620
   137b8:	00044638 	.word	0x00044638
   137bc:	00044648 	.word	0x00044648

000137c0 <RDMSoftwareVersion::GetVersion()>:
   137c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   137c4:	e28db000 	add	fp, sp, #0
   137c8:	e59f300c 	ldr	r3, [pc, #12]	; 137dc <RDMSoftwareVersion::GetVersion()+0x1c>
   137cc:	e1a00003 	mov	r0, r3
   137d0:	e28bd000 	add	sp, fp, #0
   137d4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   137d8:	e12fff1e 	bx	lr
   137dc:	00044718 	.word	0x00044718

000137e0 <RDMSoftwareVersion::GetVersionLength()>:
   137e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   137e4:	e28db000 	add	fp, sp, #0
   137e8:	e3a03003 	mov	r3, #3
   137ec:	e1a00003 	mov	r0, r3
   137f0:	e28bd000 	add	sp, fp, #0
   137f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   137f8:	e12fff1e 	bx	lr

000137fc <RDMSoftwareVersion::GetVersionId()>:
   137fc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13800:	e28db000 	add	fp, sp, #0
   13804:	e59f300c 	ldr	r3, [pc, #12]	; 13818 <RDMSoftwareVersion::GetVersionId()+0x1c>
   13808:	e1a00003 	mov	r0, r3
   1380c:	e28bd000 	add	sp, fp, #0
   13810:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13814:	e12fff1e 	bx	lr
   13818:	64089e24 	.word	0x64089e24

0001381c <ArtNetRdm::~ArtNetRdm()>:
   1381c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13820:	e28db000 	add	fp, sp, #0
   13824:	e24dd00c 	sub	sp, sp, #12
   13828:	e50b0008 	str	r0, [fp, #-8]
   1382c:	e59f2018 	ldr	r2, [pc, #24]	; 1384c <ArtNetRdm::~ArtNetRdm()+0x30>
   13830:	e51b3008 	ldr	r3, [fp, #-8]
   13834:	e5832000 	str	r2, [r3]
   13838:	e51b3008 	ldr	r3, [fp, #-8]
   1383c:	e1a00003 	mov	r0, r3
   13840:	e28bd000 	add	sp, fp, #0
   13844:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13848:	e12fff1e 	bx	lr
   1384c:	000447ac 	.word	0x000447ac

00013850 <ArtNetRdm::~ArtNetRdm()>:
   13850:	e92d4800 	push	{fp, lr}
   13854:	e28db004 	add	fp, sp, #4
   13858:	e24dd008 	sub	sp, sp, #8
   1385c:	e50b0008 	str	r0, [fp, #-8]
   13860:	e51b0008 	ldr	r0, [fp, #-8]
   13864:	ebffffec 	bl	1381c <ArtNetRdm::~ArtNetRdm()>
   13868:	e51b0008 	ldr	r0, [fp, #-8]
   1386c:	ebfff6a5 	bl	11308 <operator delete(void*)@plt>
   13870:	e51b3008 	ldr	r3, [fp, #-8]
   13874:	e1a00003 	mov	r0, r3
   13878:	e24bd004 	sub	sp, fp, #4
   1387c:	e8bd8800 	pop	{fp, pc}

00013880 <RDMDevice::GetUID() const>:
   13880:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13884:	e28db000 	add	fp, sp, #0
   13888:	e24dd00c 	sub	sp, sp, #12
   1388c:	e50b0008 	str	r0, [fp, #-8]
   13890:	e51b3008 	ldr	r3, [fp, #-8]
   13894:	e2833001 	add	r3, r3, #1
   13898:	e1a00003 	mov	r0, r3
   1389c:	e28bd000 	add	sp, fp, #0
   138a0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   138a4:	e12fff1e 	bx	lr

000138a8 <RDMIdentify::~RDMIdentify()>:
   138a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   138ac:	e28db000 	add	fp, sp, #0
   138b0:	e24dd00c 	sub	sp, sp, #12
   138b4:	e50b0008 	str	r0, [fp, #-8]
   138b8:	e51b3008 	ldr	r3, [fp, #-8]
   138bc:	e1a00003 	mov	r0, r3
   138c0:	e28bd000 	add	sp, fp, #0
   138c4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   138c8:	e12fff1e 	bx	lr

000138cc <RDMDeviceResponder::~RDMDeviceResponder()>:
   138cc:	e92d4800 	push	{fp, lr}
   138d0:	e28db004 	add	fp, sp, #4
   138d4:	e24dd008 	sub	sp, sp, #8
   138d8:	e50b0008 	str	r0, [fp, #-8]
   138dc:	e59f2044 	ldr	r2, [pc, #68]	; 13928 <RDMDeviceResponder::~RDMDeviceResponder()+0x5c>
   138e0:	e51b3008 	ldr	r3, [fp, #-8]
   138e4:	e5832000 	str	r2, [r3]
   138e8:	e51b3008 	ldr	r3, [fp, #-8]
   138ec:	e283308c 	add	r3, r3, #140	; 0x8c
   138f0:	e1a00003 	mov	r0, r3
   138f4:	eb001d28 	bl	1ad9c <RDMSubDevices::~RDMSubDevices()>
   138f8:	e51b3008 	ldr	r3, [fp, #-8]
   138fc:	e2833084 	add	r3, r3, #132	; 0x84
   13900:	e1a00003 	mov	r0, r3
   13904:	eb001af9 	bl	1a4f0 <RDMSensors::~RDMSensors()>
   13908:	e51b3008 	ldr	r3, [fp, #-8]
   1390c:	e2833080 	add	r3, r3, #128	; 0x80
   13910:	e1a00003 	mov	r0, r3
   13914:	ebffffe3 	bl	138a8 <RDMIdentify::~RDMIdentify()>
   13918:	e51b3008 	ldr	r3, [fp, #-8]
   1391c:	e1a00003 	mov	r0, r3
   13920:	e24bd004 	sub	sp, fp, #4
   13924:	e8bd8800 	pop	{fp, pc}
   13928:	000448d4 	.word	0x000448d4

0001392c <RDMDeviceResponder::~RDMDeviceResponder()>:
   1392c:	e92d4800 	push	{fp, lr}
   13930:	e28db004 	add	fp, sp, #4
   13934:	e24dd008 	sub	sp, sp, #8
   13938:	e50b0008 	str	r0, [fp, #-8]
   1393c:	e51b0008 	ldr	r0, [fp, #-8]
   13940:	ebffffe1 	bl	138cc <RDMDeviceResponder::~RDMDeviceResponder()>
   13944:	e51b0008 	ldr	r0, [fp, #-8]
   13948:	ebfff66e 	bl	11308 <operator delete(void*)@plt>
   1394c:	e51b3008 	ldr	r3, [fp, #-8]
   13950:	e1a00003 	mov	r0, r3
   13954:	e24bd004 	sub	sp, fp, #4
   13958:	e8bd8800 	pop	{fp, pc}

0001395c <ArtNetRdmResponder::Full(unsigned int)>:
   1395c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13960:	e28db000 	add	fp, sp, #0
   13964:	e24dd00c 	sub	sp, sp, #12
   13968:	e50b0008 	str	r0, [fp, #-8]
   1396c:	e50b100c 	str	r1, [fp, #-12]
   13970:	e1a00000 	nop			; (mov r0, r0)
   13974:	e28bd000 	add	sp, fp, #0
   13978:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1397c:	e12fff1e 	bx	lr

00013980 <ArtNetRdmResponder::GetUidCount(unsigned int)>:
   13980:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13984:	e28db000 	add	fp, sp, #0
   13988:	e24dd00c 	sub	sp, sp, #12
   1398c:	e50b0008 	str	r0, [fp, #-8]
   13990:	e50b100c 	str	r1, [fp, #-12]
   13994:	e3a03001 	mov	r3, #1
   13998:	e1a00003 	mov	r0, r3
   1399c:	e28bd000 	add	sp, fp, #0
   139a0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   139a4:	e12fff1e 	bx	lr

000139a8 <ArtNetRdmResponder::TodCopy(unsigned int, unsigned char*)>:
   139a8:	e92d4800 	push	{fp, lr}
   139ac:	e28db004 	add	fp, sp, #4
   139b0:	e24dd010 	sub	sp, sp, #16
   139b4:	e50b0008 	str	r0, [fp, #-8]
   139b8:	e50b100c 	str	r1, [fp, #-12]
   139bc:	e50b2010 	str	r2, [fp, #-16]
   139c0:	e51b3008 	ldr	r3, [fp, #-8]
   139c4:	e2833008 	add	r3, r3, #8
   139c8:	e1a00003 	mov	r0, r3
   139cc:	ebffffab 	bl	13880 <RDMDevice::GetUID() const>
   139d0:	e1a03000 	mov	r3, r0
   139d4:	e3a02006 	mov	r2, #6
   139d8:	e1a01003 	mov	r1, r3
   139dc:	e51b0010 	ldr	r0, [fp, #-16]
   139e0:	ebfff687 	bl	11404 <memcpy@plt>
   139e4:	e1a00000 	nop			; (mov r0, r0)
   139e8:	e24bd004 	sub	sp, fp, #4
   139ec:	e8bd8800 	pop	{fp, pc}

000139f0 <ArtNetRdmResponder::TodReset(unsigned int)>:
   139f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   139f4:	e28db000 	add	fp, sp, #0
   139f8:	e24dd00c 	sub	sp, sp, #12
   139fc:	e50b0008 	str	r0, [fp, #-8]
   13a00:	e50b100c 	str	r1, [fp, #-12]
   13a04:	e1a00000 	nop			; (mov r0, r0)
   13a08:	e28bd000 	add	sp, fp, #0
   13a0c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13a10:	e12fff1e 	bx	lr

00013a14 <ArtNetRdmResponder::TodAddUid(unsigned int, unsigned char const*)>:
   13a14:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13a18:	e28db000 	add	fp, sp, #0
   13a1c:	e24dd014 	sub	sp, sp, #20
   13a20:	e50b0008 	str	r0, [fp, #-8]
   13a24:	e50b100c 	str	r1, [fp, #-12]
   13a28:	e50b2010 	str	r2, [fp, #-16]
   13a2c:	e3a03000 	mov	r3, #0
   13a30:	e1a00003 	mov	r0, r3
   13a34:	e28bd000 	add	sp, fp, #0
   13a38:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13a3c:	e12fff1e 	bx	lr

00013a40 <ArtNetRdmResponder::RdmReceive(unsigned int, unsigned char*)>:
   13a40:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13a44:	e28db000 	add	fp, sp, #0
   13a48:	e24dd014 	sub	sp, sp, #20
   13a4c:	e50b0008 	str	r0, [fp, #-8]
   13a50:	e50b100c 	str	r1, [fp, #-12]
   13a54:	e50b2010 	str	r2, [fp, #-16]
   13a58:	e3a03000 	mov	r3, #0
   13a5c:	e1a00003 	mov	r0, r3
   13a60:	e28bd000 	add	sp, fp, #0
   13a64:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13a68:	e12fff1e 	bx	lr

00013a6c <ArtNetRdm::ArtNetRdm()>:
   13a6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13a70:	e28db000 	add	fp, sp, #0
   13a74:	e24dd00c 	sub	sp, sp, #12
   13a78:	e50b0008 	str	r0, [fp, #-8]
   13a7c:	e59f2018 	ldr	r2, [pc, #24]	; 13a9c <ArtNetRdm::ArtNetRdm()+0x30>
   13a80:	e51b3008 	ldr	r3, [fp, #-8]
   13a84:	e5832000 	str	r2, [r3]
   13a88:	e51b3008 	ldr	r3, [fp, #-8]
   13a8c:	e1a00003 	mov	r0, r3
   13a90:	e28bd000 	add	sp, fp, #0
   13a94:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13a98:	e12fff1e 	bx	lr
   13a9c:	000447ac 	.word	0x000447ac

00013aa0 <ArtNetRdmResponder::ArtNetRdmResponder(RDMPersonality**, unsigned int)>:
   13aa0:	e92d4800 	push	{fp, lr}
   13aa4:	e28db004 	add	fp, sp, #4
   13aa8:	e24dd010 	sub	sp, sp, #16
   13aac:	e50b0008 	str	r0, [fp, #-8]
   13ab0:	e50b100c 	str	r1, [fp, #-12]
   13ab4:	e50b2010 	str	r2, [fp, #-16]
   13ab8:	e51b3008 	ldr	r3, [fp, #-8]
   13abc:	e1a00003 	mov	r0, r3
   13ac0:	ebffffe9 	bl	13a6c <ArtNetRdm::ArtNetRdm()>
   13ac4:	e51b3008 	ldr	r3, [fp, #-8]
   13ac8:	e2833004 	add	r3, r3, #4
   13acc:	e51b2010 	ldr	r2, [fp, #-16]
   13ad0:	e51b100c 	ldr	r1, [fp, #-12]
   13ad4:	e1a00003 	mov	r0, r3
   13ad8:	eb000173 	bl	140ac <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>
   13adc:	e51b3008 	ldr	r3, [fp, #-8]
   13ae0:	e28330d0 	add	r3, r3, #208	; 0xd0
   13ae4:	e3a01001 	mov	r1, #1
   13ae8:	e1a00003 	mov	r0, r3
   13aec:	eb000744 	bl	15804 <RDMHandler::RDMHandler(bool)>
   13af0:	e59f202c 	ldr	r2, [pc, #44]	; 13b24 <ArtNetRdmResponder::ArtNetRdmResponder(RDMPersonality**, unsigned int)+0x84>
   13af4:	e51b3008 	ldr	r3, [fp, #-8]
   13af8:	e5832000 	str	r2, [r3]
   13afc:	e59f2024 	ldr	r2, [pc, #36]	; 13b28 <ArtNetRdmResponder::ArtNetRdmResponder(RDMPersonality**, unsigned int)+0x88>
   13b00:	e51b3008 	ldr	r3, [fp, #-8]
   13b04:	e5832004 	str	r2, [r3, #4]
   13b08:	e59f201c 	ldr	r2, [pc, #28]	; 13b2c <ArtNetRdmResponder::ArtNetRdmResponder(RDMPersonality**, unsigned int)+0x8c>
   13b0c:	e51b3008 	ldr	r3, [fp, #-8]
   13b10:	e5823000 	str	r3, [r2]
   13b14:	e51b3008 	ldr	r3, [fp, #-8]
   13b18:	e1a00003 	mov	r0, r3
   13b1c:	e24bd004 	sub	sp, fp, #4
   13b20:	e8bd8800 	pop	{fp, pc}
   13b24:	00044768 	.word	0x00044768
   13b28:	00044794 	.word	0x00044794
   13b2c:	0005c2a0 	.word	0x0005c2a0

00013b30 <ArtNetRdmResponder::~ArtNetRdmResponder()>:
   13b30:	e92d4800 	push	{fp, lr}
   13b34:	e28db004 	add	fp, sp, #4
   13b38:	e24dd008 	sub	sp, sp, #8
   13b3c:	e50b0008 	str	r0, [fp, #-8]
   13b40:	e59f203c 	ldr	r2, [pc, #60]	; 13b84 <ArtNetRdmResponder::~ArtNetRdmResponder()+0x54>
   13b44:	e51b3008 	ldr	r3, [fp, #-8]
   13b48:	e5832000 	str	r2, [r3]
   13b4c:	e59f2034 	ldr	r2, [pc, #52]	; 13b88 <ArtNetRdmResponder::~ArtNetRdmResponder()+0x58>
   13b50:	e51b3008 	ldr	r3, [fp, #-8]
   13b54:	e5832004 	str	r2, [r3, #4]
   13b58:	e51b3008 	ldr	r3, [fp, #-8]
   13b5c:	e2833004 	add	r3, r3, #4
   13b60:	e1a00003 	mov	r0, r3
   13b64:	ebffff58 	bl	138cc <RDMDeviceResponder::~RDMDeviceResponder()>
   13b68:	e51b3008 	ldr	r3, [fp, #-8]
   13b6c:	e1a00003 	mov	r0, r3
   13b70:	ebffff29 	bl	1381c <ArtNetRdm::~ArtNetRdm()>
   13b74:	e51b3008 	ldr	r3, [fp, #-8]
   13b78:	e1a00003 	mov	r0, r3
   13b7c:	e24bd004 	sub	sp, fp, #4
   13b80:	e8bd8800 	pop	{fp, pc}
   13b84:	00044768 	.word	0x00044768
   13b88:	00044794 	.word	0x00044794

00013b8c <non-virtual thunk to ArtNetRdmResponder::~ArtNetRdmResponder()>:
   13b8c:	e2400004 	sub	r0, r0, #4
   13b90:	eaffffe6 	b	13b30 <ArtNetRdmResponder::~ArtNetRdmResponder()>

00013b94 <ArtNetRdmResponder::~ArtNetRdmResponder()>:
   13b94:	e92d4800 	push	{fp, lr}
   13b98:	e28db004 	add	fp, sp, #4
   13b9c:	e24dd008 	sub	sp, sp, #8
   13ba0:	e50b0008 	str	r0, [fp, #-8]
   13ba4:	e51b0008 	ldr	r0, [fp, #-8]
   13ba8:	ebffffe0 	bl	13b30 <ArtNetRdmResponder::~ArtNetRdmResponder()>
   13bac:	e51b0008 	ldr	r0, [fp, #-8]
   13bb0:	ebfff5d4 	bl	11308 <operator delete(void*)@plt>
   13bb4:	e51b3008 	ldr	r3, [fp, #-8]
   13bb8:	e1a00003 	mov	r0, r3
   13bbc:	e24bd004 	sub	sp, fp, #4
   13bc0:	e8bd8800 	pop	{fp, pc}

00013bc4 <non-virtual thunk to ArtNetRdmResponder::~ArtNetRdmResponder()>:
   13bc4:	e2400004 	sub	r0, r0, #4
   13bc8:	eafffff1 	b	13b94 <ArtNetRdmResponder::~ArtNetRdmResponder()>

00013bcc <ArtNetRdmResponder::Handler(unsigned int, unsigned char const*)>:
   13bcc:	e92d4800 	push	{fp, lr}
   13bd0:	e28db004 	add	fp, sp, #4
   13bd4:	e24dd010 	sub	sp, sp, #16
   13bd8:	e50b0008 	str	r0, [fp, #-8]
   13bdc:	e50b100c 	str	r1, [fp, #-12]
   13be0:	e50b2010 	str	r2, [fp, #-16]
   13be4:	e51b3010 	ldr	r3, [fp, #-16]
   13be8:	e3530000 	cmp	r3, #0
   13bec:	1a000001 	bne	13bf8 <ArtNetRdmResponder::Handler(unsigned int, unsigned char const*)+0x2c>
   13bf0:	e3a03000 	mov	r3, #0
   13bf4:	ea00000c 	b	13c2c <ArtNetRdmResponder::Handler(unsigned int, unsigned char const*)+0x60>
   13bf8:	e51b3008 	ldr	r3, [fp, #-8]
   13bfc:	e28330d0 	add	r3, r3, #208	; 0xd0
   13c00:	e59f2030 	ldr	r2, [pc, #48]	; 13c38 <ArtNetRdmResponder::Handler(unsigned int, unsigned char const*)+0x6c>
   13c04:	e51b1010 	ldr	r1, [fp, #-16]
   13c08:	e1a00003 	mov	r0, r3
   13c0c:	eb000802 	bl	15c1c <RDMHandler::HandleData(unsigned char const*, unsigned char*)>
   13c10:	e59f3020 	ldr	r3, [pc, #32]	; 13c38 <ArtNetRdmResponder::Handler(unsigned int, unsigned char const*)+0x6c>
   13c14:	e5d33000 	ldrb	r3, [r3]
   13c18:	e35300cc 	cmp	r3, #204	; 0xcc
   13c1c:	0a000001 	beq	13c28 <ArtNetRdmResponder::Handler(unsigned int, unsigned char const*)+0x5c>
   13c20:	e3a03000 	mov	r3, #0
   13c24:	ea000000 	b	13c2c <ArtNetRdmResponder::Handler(unsigned int, unsigned char const*)+0x60>
   13c28:	e59f3008 	ldr	r3, [pc, #8]	; 13c38 <ArtNetRdmResponder::Handler(unsigned int, unsigned char const*)+0x6c>
   13c2c:	e1a00003 	mov	r0, r3
   13c30:	e24bd004 	sub	sp, fp, #4
   13c34:	e8bd8800 	pop	{fp, pc}
   13c38:	0005c2a4 	.word	0x0005c2a4

00013c3c <RDMDevice::Init()>:
   13c3c:	e92d4800 	push	{fp, lr}
   13c40:	e28db004 	add	fp, sp, #4
   13c44:	e24dd008 	sub	sp, sp, #8
   13c48:	e50b0008 	str	r0, [fp, #-8]
   13c4c:	e51b3008 	ldr	r3, [fp, #-8]
   13c50:	e3a02001 	mov	r2, #1
   13c54:	e5c32000 	strb	r2, [r3]
   13c58:	e51b0008 	ldr	r0, [fp, #-8]
   13c5c:	eb000002 	bl	13c6c <RDMDevice::SetFactoryDefaults()>
   13c60:	e1a00000 	nop			; (mov r0, r0)
   13c64:	e24bd004 	sub	sp, fp, #4
   13c68:	e8bd8800 	pop	{fp, pc}

00013c6c <RDMDevice::SetFactoryDefaults()>:
   13c6c:	e92d4800 	push	{fp, lr}
   13c70:	e28db004 	add	fp, sp, #4
   13c74:	e24dd010 	sub	sp, sp, #16
   13c78:	e50b0010 	str	r0, [fp, #-16]
   13c7c:	e51b3010 	ldr	r3, [fp, #-16]
   13c80:	e2833052 	add	r3, r3, #82	; 0x52
   13c84:	e50b300c 	str	r3, [fp, #-12]
   13c88:	e51b3010 	ldr	r3, [fp, #-16]
   13c8c:	e5d33072 	ldrb	r3, [r3, #114]	; 0x72
   13c90:	e54b3008 	strb	r3, [fp, #-8]
   13c94:	e24b300c 	sub	r3, fp, #12
   13c98:	e1a01003 	mov	r1, r3
   13c9c:	e51b0010 	ldr	r0, [fp, #-16]
   13ca0:	eb000008 	bl	13cc8 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
   13ca4:	e51b0010 	ldr	r0, [fp, #-16]
   13ca8:	eb00004c 	bl	13de0 <RDMDevice::CalculateChecksum()>
   13cac:	e1a03000 	mov	r3, r0
   13cb0:	e1a02003 	mov	r2, r3
   13cb4:	e51b3010 	ldr	r3, [fp, #-16]
   13cb8:	e1c327b4 	strh	r2, [r3, #116]	; 0x74
   13cbc:	e1a00000 	nop			; (mov r0, r0)
   13cc0:	e24bd004 	sub	sp, fp, #4
   13cc4:	e8bd8800 	pop	{fp, pc}

00013cc8 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>:
   13cc8:	e92d4800 	push	{fp, lr}
   13ccc:	e28db004 	add	fp, sp, #4
   13cd0:	e24dd010 	sub	sp, sp, #16
   13cd4:	e50b0010 	str	r0, [fp, #-16]
   13cd8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   13cdc:	e3a03020 	mov	r3, #32
   13ce0:	e54b3006 	strb	r3, [fp, #-6]
   13ce4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13ce8:	e2832004 	add	r2, r3, #4
   13cec:	e24b3006 	sub	r3, fp, #6
   13cf0:	e1a01002 	mov	r1, r2
   13cf4:	e1a00003 	mov	r0, r3
   13cf8:	eb00025c 	bl	14670 <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)>
   13cfc:	e1a03000 	mov	r3, r0
   13d00:	e5d33000 	ldrb	r3, [r3]
   13d04:	e54b3005 	strb	r3, [fp, #-5]
   13d08:	e51b3010 	ldr	r3, [fp, #-16]
   13d0c:	e5d33000 	ldrb	r3, [r3]
   13d10:	e3530000 	cmp	r3, #0
   13d14:	0a00001a 	beq	13d84 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0xbc>
   13d18:	e51b3010 	ldr	r3, [fp, #-16]
   13d1c:	e283000b 	add	r0, r3, #11
   13d20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13d24:	e5933000 	ldr	r3, [r3]
   13d28:	e55b2005 	ldrb	r2, [fp, #-5]
   13d2c:	e1a01003 	mov	r1, r3
   13d30:	ebfff5b3 	bl	11404 <memcpy@plt>
   13d34:	e51b3010 	ldr	r3, [fp, #-16]
   13d38:	e55b2005 	ldrb	r2, [fp, #-5]
   13d3c:	e5c3202b 	strb	r2, [r3, #43]	; 0x2b
   13d40:	e51b3010 	ldr	r3, [fp, #-16]
   13d44:	e5933078 	ldr	r3, [r3, #120]	; 0x78
   13d48:	e3530000 	cmp	r3, #0
   13d4c:	0a000016 	beq	13dac <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0xe4>
   13d50:	e51b3010 	ldr	r3, [fp, #-16]
   13d54:	e5930078 	ldr	r0, [r3, #120]	; 0x78
   13d58:	e51b3010 	ldr	r3, [fp, #-16]
   13d5c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
   13d60:	e5933000 	ldr	r3, [r3]
   13d64:	e2833008 	add	r3, r3, #8
   13d68:	e5933000 	ldr	r3, [r3]
   13d6c:	e51b2010 	ldr	r2, [fp, #-16]
   13d70:	e282100b 	add	r1, r2, #11
   13d74:	e51b2010 	ldr	r2, [fp, #-16]
   13d78:	e5d2202b 	ldrb	r2, [r2, #43]	; 0x2b
   13d7c:	e12fff33 	blx	r3
   13d80:	ea000009 	b	13dac <RDMDevice::SetLabel(TRDMDeviceInfoData const*)+0xe4>
   13d84:	e51b3010 	ldr	r3, [fp, #-16]
   13d88:	e2830052 	add	r0, r3, #82	; 0x52
   13d8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   13d90:	e5933000 	ldr	r3, [r3]
   13d94:	e55b2005 	ldrb	r2, [fp, #-5]
   13d98:	e1a01003 	mov	r1, r3
   13d9c:	ebfff598 	bl	11404 <memcpy@plt>
   13da0:	e51b3010 	ldr	r3, [fp, #-16]
   13da4:	e55b2005 	ldrb	r2, [fp, #-5]
   13da8:	e5c32072 	strb	r2, [r3, #114]	; 0x72
   13dac:	e1a00000 	nop			; (mov r0, r0)
   13db0:	e24bd004 	sub	sp, fp, #4
   13db4:	e8bd8800 	pop	{fp, pc}

00013db8 <RDMDevice::GetProductCategory() const>:
   13db8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13dbc:	e28db000 	add	fp, sp, #0
   13dc0:	e24dd00c 	sub	sp, sp, #12
   13dc4:	e50b0008 	str	r0, [fp, #-8]
   13dc8:	e51b3008 	ldr	r3, [fp, #-8]
   13dcc:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
   13dd0:	e1a00003 	mov	r0, r3
   13dd4:	e28bd000 	add	sp, fp, #0
   13dd8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13ddc:	e12fff1e 	bx	lr

00013de0 <RDMDevice::CalculateChecksum()>:
   13de0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13de4:	e28db000 	add	fp, sp, #0
   13de8:	e24dd014 	sub	sp, sp, #20
   13dec:	e50b0010 	str	r0, [fp, #-16]
   13df0:	e51b3010 	ldr	r3, [fp, #-16]
   13df4:	e5d33072 	ldrb	r3, [r3, #114]	; 0x72
   13df8:	e14b30b6 	strh	r3, [fp, #-6]
   13dfc:	e3a03000 	mov	r3, #0
   13e00:	e50b300c 	str	r3, [fp, #-12]
   13e04:	e51b3010 	ldr	r3, [fp, #-16]
   13e08:	e5d3302b 	ldrb	r3, [r3, #43]	; 0x2b
   13e0c:	e1a02003 	mov	r2, r3
   13e10:	e51b300c 	ldr	r3, [fp, #-12]
   13e14:	e1530002 	cmp	r3, r2
   13e18:	2a00000c 	bcs	13e50 <RDMDevice::CalculateChecksum()+0x70>
   13e1c:	e51b2010 	ldr	r2, [fp, #-16]
   13e20:	e51b300c 	ldr	r3, [fp, #-12]
   13e24:	e0823003 	add	r3, r2, r3
   13e28:	e283300b 	add	r3, r3, #11
   13e2c:	e5d33000 	ldrb	r3, [r3]
   13e30:	e6ff2073 	uxth	r2, r3
   13e34:	e15b30b6 	ldrh	r3, [fp, #-6]
   13e38:	e0823003 	add	r3, r2, r3
   13e3c:	e14b30b6 	strh	r3, [fp, #-6]
   13e40:	e51b300c 	ldr	r3, [fp, #-12]
   13e44:	e2833001 	add	r3, r3, #1
   13e48:	e50b300c 	str	r3, [fp, #-12]
   13e4c:	eaffffec 	b	13e04 <RDMDevice::CalculateChecksum()+0x24>
   13e50:	e15b30b6 	ldrh	r3, [fp, #-6]
   13e54:	e1a00003 	mov	r0, r3
   13e58:	e28bd000 	add	sp, fp, #0
   13e5c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13e60:	e12fff1e 	bx	lr

00013e64 <Hardware::GetBoardId()>:
   13e64:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13e68:	e28db000 	add	fp, sp, #0
   13e6c:	e24dd00c 	sub	sp, sp, #12
   13e70:	e50b0008 	str	r0, [fp, #-8]
   13e74:	e51b3008 	ldr	r3, [fp, #-8]
   13e78:	e593324c 	ldr	r3, [r3, #588]	; 0x24c
   13e7c:	e1a00003 	mov	r0, r3
   13e80:	e28bd000 	add	sp, fp, #0
   13e84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13e88:	e12fff1e 	bx	lr

00013e8c <RDMPersonality::GetLightSet() const>:
   13e8c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13e90:	e28db000 	add	fp, sp, #0
   13e94:	e24dd00c 	sub	sp, sp, #12
   13e98:	e50b0008 	str	r0, [fp, #-8]
   13e9c:	e51b3008 	ldr	r3, [fp, #-8]
   13ea0:	e5933004 	ldr	r3, [r3, #4]
   13ea4:	e1a00003 	mov	r0, r3
   13ea8:	e28bd000 	add	sp, fp, #0
   13eac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13eb0:	e12fff1e 	bx	lr

00013eb4 <RDMPersonality::GetDescription() const>:
   13eb4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13eb8:	e28db000 	add	fp, sp, #0
   13ebc:	e24dd00c 	sub	sp, sp, #12
   13ec0:	e50b0008 	str	r0, [fp, #-8]
   13ec4:	e51b3008 	ldr	r3, [fp, #-8]
   13ec8:	e2833008 	add	r3, r3, #8
   13ecc:	e1a00003 	mov	r0, r3
   13ed0:	e28bd000 	add	sp, fp, #0
   13ed4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13ed8:	e12fff1e 	bx	lr

00013edc <RDMPersonality::GetDescriptionLength() const>:
   13edc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13ee0:	e28db000 	add	fp, sp, #0
   13ee4:	e24dd00c 	sub	sp, sp, #12
   13ee8:	e50b0008 	str	r0, [fp, #-8]
   13eec:	e51b3008 	ldr	r3, [fp, #-8]
   13ef0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   13ef4:	e6ef3073 	uxtb	r3, r3
   13ef8:	e1a00003 	mov	r0, r3
   13efc:	e28bd000 	add	sp, fp, #0
   13f00:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13f04:	e12fff1e 	bx	lr

00013f08 <RDMSensors::GetCount() const>:
   13f08:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13f0c:	e28db000 	add	fp, sp, #0
   13f10:	e24dd00c 	sub	sp, sp, #12
   13f14:	e50b0008 	str	r0, [fp, #-8]
   13f18:	e51b3008 	ldr	r3, [fp, #-8]
   13f1c:	e5d33004 	ldrb	r3, [r3, #4]
   13f20:	e1a00003 	mov	r0, r3
   13f24:	e28bd000 	add	sp, fp, #0
   13f28:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13f2c:	e12fff1e 	bx	lr

00013f30 <RDMSubDevices::GetCount() const>:
   13f30:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   13f34:	e28db000 	add	fp, sp, #0
   13f38:	e24dd00c 	sub	sp, sp, #12
   13f3c:	e50b0008 	str	r0, [fp, #-8]
   13f40:	e51b3008 	ldr	r3, [fp, #-8]
   13f44:	e1d330b4 	ldrh	r3, [r3, #4]
   13f48:	e1a00003 	mov	r0, r3
   13f4c:	e28bd000 	add	sp, fp, #0
   13f50:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   13f54:	e12fff1e 	bx	lr

00013f58 <RDMDeviceResponder::GetDeviceInfo(unsigned short)>:
   13f58:	e92d4800 	push	{fp, lr}
   13f5c:	e28db004 	add	fp, sp, #4
   13f60:	e24dd010 	sub	sp, sp, #16
   13f64:	e50b0010 	str	r0, [fp, #-16]
   13f68:	e1a03001 	mov	r3, r1
   13f6c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   13f70:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   13f74:	e3530000 	cmp	r3, #0
   13f78:	0a00002e 	beq	14038 <RDMDeviceResponder::GetDeviceInfo(unsigned short)+0xe0>
   13f7c:	e51b3010 	ldr	r3, [fp, #-16]
   13f80:	e283308c 	add	r3, r3, #140	; 0x8c
   13f84:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
   13f88:	e1a01002 	mov	r1, r2
   13f8c:	e1a00003 	mov	r0, r3
   13f90:	eb001bce 	bl	1aed0 <RDMSubDevices::GetInfo(unsigned short)>
   13f94:	e50b0008 	str	r0, [fp, #-8]
   13f98:	e51b3008 	ldr	r3, [fp, #-8]
   13f9c:	e3530000 	cmp	r3, #0
   13fa0:	0a000021 	beq	1402c <RDMDeviceResponder::GetDeviceInfo(unsigned short)+0xd4>
   13fa4:	e51b3008 	ldr	r3, [fp, #-8]
   13fa8:	e1d330b0 	ldrh	r3, [r3]
   13fac:	e1a03443 	asr	r3, r3, #8
   13fb0:	e6ef2073 	uxtb	r2, r3
   13fb4:	e51b3010 	ldr	r3, [fp, #-16]
   13fb8:	e5c320ba 	strb	r2, [r3, #186]	; 0xba
   13fbc:	e51b3008 	ldr	r3, [fp, #-8]
   13fc0:	e1d330b0 	ldrh	r3, [r3]
   13fc4:	e6ef2073 	uxtb	r2, r3
   13fc8:	e51b3010 	ldr	r3, [fp, #-16]
   13fcc:	e5c320bb 	strb	r2, [r3, #187]	; 0xbb
   13fd0:	e51b3008 	ldr	r3, [fp, #-8]
   13fd4:	e5d32004 	ldrb	r2, [r3, #4]
   13fd8:	e51b3010 	ldr	r3, [fp, #-16]
   13fdc:	e5c320bc 	strb	r2, [r3, #188]	; 0xbc
   13fe0:	e51b3008 	ldr	r3, [fp, #-8]
   13fe4:	e5d32005 	ldrb	r2, [r3, #5]
   13fe8:	e51b3010 	ldr	r3, [fp, #-16]
   13fec:	e5c320bd 	strb	r2, [r3, #189]	; 0xbd
   13ff0:	e51b3008 	ldr	r3, [fp, #-8]
   13ff4:	e1d330b2 	ldrh	r3, [r3, #2]
   13ff8:	e1a03443 	asr	r3, r3, #8
   13ffc:	e6ef2073 	uxtb	r2, r3
   14000:	e51b3010 	ldr	r3, [fp, #-16]
   14004:	e5c320be 	strb	r2, [r3, #190]	; 0xbe
   14008:	e51b3008 	ldr	r3, [fp, #-8]
   1400c:	e1d330b2 	ldrh	r3, [r3, #2]
   14010:	e6ef2073 	uxtb	r2, r3
   14014:	e51b3010 	ldr	r3, [fp, #-16]
   14018:	e5c320bf 	strb	r2, [r3, #191]	; 0xbf
   1401c:	e51b3008 	ldr	r3, [fp, #-8]
   14020:	e5d32027 	ldrb	r2, [r3, #39]	; 0x27
   14024:	e51b3010 	ldr	r3, [fp, #-16]
   14028:	e5c320c2 	strb	r2, [r3, #194]	; 0xc2
   1402c:	e51b3010 	ldr	r3, [fp, #-16]
   14030:	e28330b0 	add	r3, r3, #176	; 0xb0
   14034:	ea000001 	b	14040 <RDMDeviceResponder::GetDeviceInfo(unsigned short)+0xe8>
   14038:	e51b3010 	ldr	r3, [fp, #-16]
   1403c:	e283309d 	add	r3, r3, #157	; 0x9d
   14040:	e1a00003 	mov	r0, r3
   14044:	e24bd004 	sub	sp, fp, #4
   14048:	e8bd8800 	pop	{fp, pc}

0001404c <RDMDeviceResponder::CalculateChecksum()>:
   1404c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14050:	e28db000 	add	fp, sp, #0
   14054:	e24dd014 	sub	sp, sp, #20
   14058:	e50b0010 	str	r0, [fp, #-16]
   1405c:	e51b3010 	ldr	r3, [fp, #-16]
   14060:	e5d330ab 	ldrb	r3, [r3, #171]	; 0xab
   14064:	e1a03443 	asr	r3, r3, #8
   14068:	e6ff2073 	uxth	r2, r3
   1406c:	e51b3010 	ldr	r3, [fp, #-16]
   14070:	e5d330ac 	ldrb	r3, [r3, #172]	; 0xac
   14074:	e6ff3073 	uxth	r3, r3
   14078:	e0823003 	add	r3, r2, r3
   1407c:	e14b30b6 	strh	r3, [fp, #-6]
   14080:	e51b3010 	ldr	r3, [fp, #-16]
   14084:	e5d330a9 	ldrb	r3, [r3, #169]	; 0xa9
   14088:	e6ff2073 	uxth	r2, r3
   1408c:	e15b30b6 	ldrh	r3, [fp, #-6]
   14090:	e0823003 	add	r3, r2, r3
   14094:	e14b30b6 	strh	r3, [fp, #-6]
   14098:	e15b30b6 	ldrh	r3, [fp, #-6]
   1409c:	e1a00003 	mov	r0, r3
   140a0:	e28bd000 	add	sp, fp, #0
   140a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   140a8:	e12fff1e 	bx	lr

000140ac <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)>:
   140ac:	e92d4800 	push	{fp, lr}
   140b0:	e28db004 	add	fp, sp, #4
   140b4:	e24dd018 	sub	sp, sp, #24
   140b8:	e50b0010 	str	r0, [fp, #-16]
   140bc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   140c0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   140c4:	e51b3010 	ldr	r3, [fp, #-16]
   140c8:	e2833004 	add	r3, r3, #4
   140cc:	e1a00003 	mov	r0, r3
   140d0:	eb001197 	bl	18734 <RDMDevice::RDMDevice()>
   140d4:	e59f212c 	ldr	r2, [pc, #300]	; 14208 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x15c>
   140d8:	e51b3010 	ldr	r3, [fp, #-16]
   140dc:	e5832000 	str	r2, [r3]
   140e0:	e51b3010 	ldr	r3, [fp, #-16]
   140e4:	e2833080 	add	r3, r3, #128	; 0x80
   140e8:	e1a00003 	mov	r0, r3
   140ec:	eb00126b 	bl	18aa0 <RDMIdentify::RDMIdentify()>
   140f0:	e51b3010 	ldr	r3, [fp, #-16]
   140f4:	e2833084 	add	r3, r3, #132	; 0x84
   140f8:	e1a00003 	mov	r0, r3
   140fc:	eb0018d7 	bl	1a460 <RDMSensors::RDMSensors()>
   14100:	e51b3010 	ldr	r3, [fp, #-16]
   14104:	e283308c 	add	r3, r3, #140	; 0x8c
   14108:	e1a00003 	mov	r0, r3
   1410c:	eb001af7 	bl	1acf0 <RDMSubDevices::RDMSubDevices()>
   14110:	e51b3010 	ldr	r3, [fp, #-16]
   14114:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   14118:	e5832094 	str	r2, [r3, #148]	; 0x94
   1411c:	e51b3010 	ldr	r3, [fp, #-16]
   14120:	e3a02001 	mov	r2, #1
   14124:	e5c320c5 	strb	r2, [r3, #197]	; 0xc5
   14128:	e51b3010 	ldr	r3, [fp, #-16]
   1412c:	e3a02000 	mov	r2, #0
   14130:	e1c32cb6 	strh	r2, [r3, #198]	; 0xc6
   14134:	e51b3010 	ldr	r3, [fp, #-16]
   14138:	e3a02001 	mov	r2, #1
   1413c:	e1c32cb8 	strh	r2, [r3, #200]	; 0xc8
   14140:	e59f20c4 	ldr	r2, [pc, #196]	; 1420c <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x160>
   14144:	e51b3010 	ldr	r3, [fp, #-16]
   14148:	e5823000 	str	r3, [r2]
   1414c:	e3a02065 	mov	r2, #101	; 0x65
   14150:	e51b3010 	ldr	r3, [fp, #-16]
   14154:	e5c320c3 	strb	r2, [r3, #195]	; 0xc3
   14158:	e3a0206e 	mov	r2, #110	; 0x6e
   1415c:	e51b3010 	ldr	r3, [fp, #-16]
   14160:	e5c320c4 	strb	r2, [r3, #196]	; 0xc4
   14164:	e51b3010 	ldr	r3, [fp, #-16]
   14168:	e283309d 	add	r3, r3, #157	; 0x9d
   1416c:	e3a02013 	mov	r2, #19
   14170:	e3a01000 	mov	r1, #0
   14174:	e1a00003 	mov	r0, r3
   14178:	ebfff43b 	bl	1126c <memset@plt>
   1417c:	e51b3010 	ldr	r3, [fp, #-16]
   14180:	e28330b0 	add	r3, r3, #176	; 0xb0
   14184:	e3a02013 	mov	r2, #19
   14188:	e3a01000 	mov	r1, #0
   1418c:	e1a00003 	mov	r0, r3
   14190:	ebfff435 	bl	1126c <memset@plt>
   14194:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14198:	e6ef2073 	uxtb	r2, r3
   1419c:	e51b3010 	ldr	r3, [fp, #-16]
   141a0:	e5c320aa 	strb	r2, [r3, #170]	; 0xaa
   141a4:	ebfffd85 	bl	137c0 <RDMSoftwareVersion::GetVersion()>
   141a8:	e1a02000 	mov	r2, r0
   141ac:	e51b3010 	ldr	r3, [fp, #-16]
   141b0:	e5832098 	str	r2, [r3, #152]	; 0x98
   141b4:	ebfffd89 	bl	137e0 <RDMSoftwareVersion::GetVersionLength()>
   141b8:	e1a03000 	mov	r3, r0
   141bc:	e6ef2073 	uxtb	r2, r3
   141c0:	e51b3010 	ldr	r3, [fp, #-16]
   141c4:	e5c3209c 	strb	r2, [r3, #156]	; 0x9c
   141c8:	e51b3010 	ldr	r3, [fp, #-16]
   141cc:	e5933094 	ldr	r3, [r3, #148]	; 0x94
   141d0:	e5933000 	ldr	r3, [r3]
   141d4:	e1a00003 	mov	r0, r3
   141d8:	ebffff2b 	bl	13e8c <RDMPersonality::GetLightSet() const>
   141dc:	e50b0008 	str	r0, [fp, #-8]
   141e0:	e51b3008 	ldr	r3, [fp, #-8]
   141e4:	e3530000 	cmp	r3, #0
   141e8:	1a000002 	bne	141f8 <RDMDeviceResponder::RDMDeviceResponder(RDMPersonality**, unsigned int)+0x14c>
   141ec:	e51b3010 	ldr	r3, [fp, #-16]
   141f0:	e3e02000 	mvn	r2, #0
   141f4:	e1c32cb8 	strh	r2, [r3, #200]	; 0xc8
   141f8:	e51b3010 	ldr	r3, [fp, #-16]
   141fc:	e1a00003 	mov	r0, r3
   14200:	e24bd004 	sub	sp, fp, #4
   14204:	e8bd8800 	pop	{fp, pc}
   14208:	000448d4 	.word	0x000448d4
   1420c:	0005c3a8 	.word	0x0005c3a8

00014210 <RDMDeviceResponder::Init()>:
   14210:	e92d4800 	push	{fp, lr}
   14214:	e28db004 	add	fp, sp, #4
   14218:	e24dd018 	sub	sp, sp, #24
   1421c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   14220:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14224:	e2833004 	add	r3, r3, #4
   14228:	e1a00003 	mov	r0, r3
   1422c:	ebfffe82 	bl	13c3c <RDMDevice::Init()>
   14230:	ebfffd71 	bl	137fc <RDMSoftwareVersion::GetVersionId()>
   14234:	e50b0008 	str	r0, [fp, #-8]
   14238:	ebfff4f0 	bl	11600 <Hardware::Get()>
   1423c:	e1a03000 	mov	r3, r0
   14240:	e1a00003 	mov	r0, r3
   14244:	ebffff06 	bl	13e64 <Hardware::GetBoardId()>
   14248:	e50b000c 	str	r0, [fp, #-12]
   1424c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14250:	e2833004 	add	r3, r3, #4
   14254:	e1a00003 	mov	r0, r3
   14258:	ebfffed6 	bl	13db8 <RDMDevice::GetProductCategory() const>
   1425c:	e1a03000 	mov	r3, r0
   14260:	e14b30be 	strh	r3, [fp, #-14]
   14264:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14268:	e283308c 	add	r3, r3, #140	; 0x8c
   1426c:	e1a00003 	mov	r0, r3
   14270:	ebffff2e 	bl	13f30 <RDMSubDevices::GetCount() const>
   14274:	e1a03000 	mov	r3, r0
   14278:	e14b31b0 	strh	r3, [fp, #-16]
   1427c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14280:	e3a02001 	mov	r2, #1
   14284:	e5c3209d 	strb	r2, [r3, #157]	; 0x9d
   14288:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1428c:	e3a02000 	mov	r2, #0
   14290:	e5c3209e 	strb	r2, [r3, #158]	; 0x9e
   14294:	e51b300c 	ldr	r3, [fp, #-12]
   14298:	e1a03423 	lsr	r3, r3, #8
   1429c:	e6ef2073 	uxtb	r2, r3
   142a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   142a4:	e5c3209f 	strb	r2, [r3, #159]	; 0x9f
   142a8:	e51b300c 	ldr	r3, [fp, #-12]
   142ac:	e6ef2073 	uxtb	r2, r3
   142b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   142b4:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
   142b8:	e15b30be 	ldrh	r3, [fp, #-14]
   142bc:	e1a03443 	asr	r3, r3, #8
   142c0:	e6ef2073 	uxtb	r2, r3
   142c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   142c8:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
   142cc:	e15b30be 	ldrh	r3, [fp, #-14]
   142d0:	e6ef2073 	uxtb	r2, r3
   142d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   142d8:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2
   142dc:	e51b3008 	ldr	r3, [fp, #-8]
   142e0:	e1a03c23 	lsr	r3, r3, #24
   142e4:	e6ef2073 	uxtb	r2, r3
   142e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   142ec:	e5c320a3 	strb	r2, [r3, #163]	; 0xa3
   142f0:	e51b3008 	ldr	r3, [fp, #-8]
   142f4:	e1a03823 	lsr	r3, r3, #16
   142f8:	e6ef2073 	uxtb	r2, r3
   142fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14300:	e5c320a4 	strb	r2, [r3, #164]	; 0xa4
   14304:	e51b3008 	ldr	r3, [fp, #-8]
   14308:	e1a03423 	lsr	r3, r3, #8
   1430c:	e6ef2073 	uxtb	r2, r3
   14310:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14314:	e5c320a5 	strb	r2, [r3, #165]	; 0xa5
   14318:	e51b3008 	ldr	r3, [fp, #-8]
   1431c:	e6ef2073 	uxtb	r2, r3
   14320:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14324:	e5c320a6 	strb	r2, [r3, #166]	; 0xa6
   14328:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1432c:	e5933094 	ldr	r3, [r3, #148]	; 0x94
   14330:	e5933000 	ldr	r3, [r3]
   14334:	e1a00003 	mov	r0, r3
   14338:	ebfffed3 	bl	13e8c <RDMPersonality::GetLightSet() const>
   1433c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
   14340:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14344:	e3530000 	cmp	r3, #0
   14348:	1a000011 	bne	14394 <RDMDeviceResponder::Init()+0x184>
   1434c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14350:	e3a02000 	mov	r2, #0
   14354:	e5c320a7 	strb	r2, [r3, #167]	; 0xa7
   14358:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1435c:	e3a02000 	mov	r2, #0
   14360:	e5c320a8 	strb	r2, [r3, #168]	; 0xa8
   14364:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14368:	e1d33cb8 	ldrh	r3, [r3, #200]	; 0xc8
   1436c:	e1a03443 	asr	r3, r3, #8
   14370:	e6ef2073 	uxtb	r2, r3
   14374:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14378:	e5c320ab 	strb	r2, [r3, #171]	; 0xab
   1437c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14380:	e1d33cb8 	ldrh	r3, [r3, #200]	; 0xc8
   14384:	e6ef2073 	uxtb	r2, r3
   14388:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1438c:	e5c320ac 	strb	r2, [r3, #172]	; 0xac
   14390:	ea000029 	b	1443c <RDMDeviceResponder::Init()+0x22c>
   14394:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14398:	e5933000 	ldr	r3, [r3]
   1439c:	e2833028 	add	r3, r3, #40	; 0x28
   143a0:	e5933000 	ldr	r3, [r3]
   143a4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   143a8:	e12fff33 	blx	r3
   143ac:	e1a03000 	mov	r3, r0
   143b0:	e1a03443 	asr	r3, r3, #8
   143b4:	e6ef2073 	uxtb	r2, r3
   143b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   143bc:	e5c320a7 	strb	r2, [r3, #167]	; 0xa7
   143c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   143c4:	e5933000 	ldr	r3, [r3]
   143c8:	e2833028 	add	r3, r3, #40	; 0x28
   143cc:	e5933000 	ldr	r3, [r3]
   143d0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   143d4:	e12fff33 	blx	r3
   143d8:	e1a03000 	mov	r3, r0
   143dc:	e6ef2073 	uxtb	r2, r3
   143e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   143e4:	e5c320a8 	strb	r2, [r3, #168]	; 0xa8
   143e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   143ec:	e5933000 	ldr	r3, [r3]
   143f0:	e2833024 	add	r3, r3, #36	; 0x24
   143f4:	e5933000 	ldr	r3, [r3]
   143f8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   143fc:	e12fff33 	blx	r3
   14400:	e1a03000 	mov	r3, r0
   14404:	e1a03443 	asr	r3, r3, #8
   14408:	e6ef2073 	uxtb	r2, r3
   1440c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14410:	e5c320ab 	strb	r2, [r3, #171]	; 0xab
   14414:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   14418:	e5933000 	ldr	r3, [r3]
   1441c:	e2833024 	add	r3, r3, #36	; 0x24
   14420:	e5933000 	ldr	r3, [r3]
   14424:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   14428:	e12fff33 	blx	r3
   1442c:	e1a03000 	mov	r3, r0
   14430:	e6ef2073 	uxtb	r2, r3
   14434:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14438:	e5c320ac 	strb	r2, [r3, #172]	; 0xac
   1443c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14440:	e3a02001 	mov	r2, #1
   14444:	e5c320a9 	strb	r2, [r3, #169]	; 0xa9
   14448:	e15b31b0 	ldrh	r3, [fp, #-16]
   1444c:	e1a03443 	asr	r3, r3, #8
   14450:	e6ef2073 	uxtb	r2, r3
   14454:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14458:	e5c320ad 	strb	r2, [r3, #173]	; 0xad
   1445c:	e15b31b0 	ldrh	r3, [fp, #-16]
   14460:	e6ef2073 	uxtb	r2, r3
   14464:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14468:	e5c320ae 	strb	r2, [r3, #174]	; 0xae
   1446c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14470:	e2833084 	add	r3, r3, #132	; 0x84
   14474:	e1a00003 	mov	r0, r3
   14478:	ebfffea2 	bl	13f08 <RDMSensors::GetCount() const>
   1447c:	e1a03000 	mov	r3, r0
   14480:	e1a02003 	mov	r2, r3
   14484:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14488:	e5c320af 	strb	r2, [r3, #175]	; 0xaf
   1448c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14490:	e28300b0 	add	r0, r3, #176	; 0xb0
   14494:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14498:	e283309d 	add	r3, r3, #157	; 0x9d
   1449c:	e3a02013 	mov	r2, #19
   144a0:	e1a01003 	mov	r1, r3
   144a4:	ebfff3d6 	bl	11404 <memcpy@plt>
   144a8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   144ac:	ebfffee6 	bl	1404c <RDMDeviceResponder::CalculateChecksum()>
   144b0:	e1a03000 	mov	r3, r0
   144b4:	e1a02003 	mov	r2, r3
   144b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   144bc:	e1c32cb6 	strh	r2, [r3, #198]	; 0xc6
   144c0:	e1a00000 	nop			; (mov r0, r0)
   144c4:	e24bd004 	sub	sp, fp, #4
   144c8:	e8bd8800 	pop	{fp, pc}

000144cc <RDMDeviceResponder::Print()>:
   144cc:	e92d4800 	push	{fp, lr}
   144d0:	e28db004 	add	fp, sp, #4
   144d4:	e24dd020 	sub	sp, sp, #32
   144d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   144dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   144e0:	e2833004 	add	r3, r3, #4
   144e4:	e1a00003 	mov	r0, r3
   144e8:	eb001123 	bl	1897c <RDMDevice::Print()>
   144ec:	e3a01000 	mov	r1, #0
   144f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   144f4:	ebfffe97 	bl	13f58 <RDMDeviceResponder::GetDeviceInfo(unsigned short)>
   144f8:	e50b0008 	str	r0, [fp, #-8]
   144fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14500:	e5933094 	ldr	r3, [r3, #148]	; 0x94
   14504:	e5933000 	ldr	r3, [r3]
   14508:	e50b300c 	str	r3, [fp, #-12]
   1450c:	e51b000c 	ldr	r0, [fp, #-12]
   14510:	ebfffe67 	bl	13eb4 <RDMPersonality::GetDescription() const>
   14514:	e50b0010 	str	r0, [fp, #-16]
   14518:	e51b000c 	ldr	r0, [fp, #-12]
   1451c:	ebfffe6e 	bl	13edc <RDMPersonality::GetDescriptionLength() const>
   14520:	e1a03000 	mov	r3, r0
   14524:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   14528:	e59f00e0 	ldr	r0, [pc, #224]	; 14610 <RDMDeviceResponder::Print()+0x144>
   1452c:	ebfff33c 	bl	11224 <puts@plt>
   14530:	e51b3008 	ldr	r3, [fp, #-8]
   14534:	e5d33000 	ldrb	r3, [r3]
   14538:	e1a01003 	mov	r1, r3
   1453c:	e51b3008 	ldr	r3, [fp, #-8]
   14540:	e5d33001 	ldrb	r3, [r3, #1]
   14544:	e1a02003 	mov	r2, r3
   14548:	e59f00c4 	ldr	r0, [pc, #196]	; 14614 <RDMDeviceResponder::Print()+0x148>
   1454c:	ebfff328 	bl	111f4 <printf@plt>
   14550:	e51b3008 	ldr	r3, [fp, #-8]
   14554:	e5d3300e 	ldrb	r3, [r3, #14]
   14558:	e1a03403 	lsl	r3, r3, #8
   1455c:	e51b2008 	ldr	r2, [fp, #-8]
   14560:	e5d2200f 	ldrb	r2, [r2, #15]
   14564:	e0833002 	add	r3, r3, r2
   14568:	e1a01003 	mov	r1, r3
   1456c:	e59f00a4 	ldr	r0, [pc, #164]	; 14618 <RDMDeviceResponder::Print()+0x14c>
   14570:	ebfff31f 	bl	111f4 <printf@plt>
   14574:	e51b3008 	ldr	r3, [fp, #-8]
   14578:	e5d3300a 	ldrb	r3, [r3, #10]
   1457c:	e1a03403 	lsl	r3, r3, #8
   14580:	e51b2008 	ldr	r2, [fp, #-8]
   14584:	e5d2200b 	ldrb	r2, [r2, #11]
   14588:	e0833002 	add	r3, r3, r2
   1458c:	e1a01003 	mov	r1, r3
   14590:	e59f0084 	ldr	r0, [pc, #132]	; 1461c <RDMDeviceResponder::Print()+0x150>
   14594:	ebfff316 	bl	111f4 <printf@plt>
   14598:	e51b3008 	ldr	r3, [fp, #-8]
   1459c:	e5d3300c 	ldrb	r3, [r3, #12]
   145a0:	e1a01003 	mov	r1, r3
   145a4:	e51b3008 	ldr	r3, [fp, #-8]
   145a8:	e5d3300d 	ldrb	r3, [r3, #13]
   145ac:	e1a00003 	mov	r0, r3
   145b0:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
   145b4:	e51b3010 	ldr	r3, [fp, #-16]
   145b8:	e58d3000 	str	r3, [sp]
   145bc:	e1a03002 	mov	r3, r2
   145c0:	e1a02000 	mov	r2, r0
   145c4:	e59f0054 	ldr	r0, [pc, #84]	; 14620 <RDMDeviceResponder::Print()+0x154>
   145c8:	ebfff309 	bl	111f4 <printf@plt>
   145cc:	e51b3008 	ldr	r3, [fp, #-8]
   145d0:	e5d33010 	ldrb	r3, [r3, #16]
   145d4:	e1a03403 	lsl	r3, r3, #8
   145d8:	e51b2008 	ldr	r2, [fp, #-8]
   145dc:	e5d22011 	ldrb	r2, [r2, #17]
   145e0:	e0833002 	add	r3, r3, r2
   145e4:	e1a01003 	mov	r1, r3
   145e8:	e59f0034 	ldr	r0, [pc, #52]	; 14624 <RDMDeviceResponder::Print()+0x158>
   145ec:	ebfff300 	bl	111f4 <printf@plt>
   145f0:	e51b3008 	ldr	r3, [fp, #-8]
   145f4:	e5d33012 	ldrb	r3, [r3, #18]
   145f8:	e1a01003 	mov	r1, r3
   145fc:	e59f0024 	ldr	r0, [pc, #36]	; 14628 <RDMDeviceResponder::Print()+0x15c>
   14600:	ebfff2fb 	bl	111f4 <printf@plt>
   14604:	e1a00000 	nop			; (mov r0, r0)
   14608:	e24bd004 	sub	sp, fp, #4
   1460c:	e8bd8800 	pop	{fp, pc}
   14610:	00044814 	.word	0x00044814
   14614:	00044830 	.word	0x00044830
   14618:	0004484c 	.word	0x0004484c
   1461c:	00044864 	.word	0x00044864
   14620:	0004487c 	.word	0x0004487c
   14624:	0004489c 	.word	0x0004489c
   14628:	000448b4 	.word	0x000448b4

0001462c <RDMDeviceResponder::PersonalityUpdate(LightSet*)>:
   1462c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14630:	e28db000 	add	fp, sp, #0
   14634:	e24dd00c 	sub	sp, sp, #12
   14638:	e50b0008 	str	r0, [fp, #-8]
   1463c:	e50b100c 	str	r1, [fp, #-12]
   14640:	e1a00000 	nop			; (mov r0, r0)
   14644:	e28bd000 	add	sp, fp, #0
   14648:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1464c:	e12fff1e 	bx	lr

00014650 <RDMDeviceResponder::DmxStartAddressUpdate()>:
   14650:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14654:	e28db000 	add	fp, sp, #0
   14658:	e24dd00c 	sub	sp, sp, #12
   1465c:	e50b0008 	str	r0, [fp, #-8]
   14660:	e1a00000 	nop			; (mov r0, r0)
   14664:	e28bd000 	add	sp, fp, #0
   14668:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1466c:	e12fff1e 	bx	lr

00014670 <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)>:
   14670:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14674:	e28db000 	add	fp, sp, #0
   14678:	e24dd00c 	sub	sp, sp, #12
   1467c:	e50b0008 	str	r0, [fp, #-8]
   14680:	e50b100c 	str	r1, [fp, #-12]
   14684:	e51b300c 	ldr	r3, [fp, #-12]
   14688:	e5d32000 	ldrb	r2, [r3]
   1468c:	e51b3008 	ldr	r3, [fp, #-8]
   14690:	e5d33000 	ldrb	r3, [r3]
   14694:	e1520003 	cmp	r2, r3
   14698:	2a000001 	bcs	146a4 <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)+0x34>
   1469c:	e51b300c 	ldr	r3, [fp, #-12]
   146a0:	ea000000 	b	146a8 <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)+0x38>
   146a4:	e51b3008 	ldr	r3, [fp, #-8]
   146a8:	e1a00003 	mov	r0, r3
   146ac:	e28bd000 	add	sp, fp, #0
   146b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   146b4:	e12fff1e 	bx	lr

000146b8 <PropertiesBuilder::AddHex16(char const*, unsigned short, bool)>:
   146b8:	e3a0c004 	mov	ip, #4
   146bc:	e92d4007 	push	{r0, r1, r2, lr}
   146c0:	e58dc000 	str	ip, [sp]
   146c4:	eb009b85 	bl	3b4e0 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>
   146c8:	e28dd00c 	add	sp, sp, #12
   146cc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000146d0 <PropertiesBuilder::GetSize()>:
   146d0:	e5d03008 	ldrb	r3, [r0, #8]
   146d4:	e3530000 	cmp	r3, #0
   146d8:	0a00000a 	beq	14708 <PropertiesBuilder::GetSize()+0x38>
   146dc:	e1d020b6 	ldrh	r2, [r0, #6]
   146e0:	e5903000 	ldr	r3, [r0]
   146e4:	e0833002 	add	r3, r3, r2
   146e8:	e3a0207d 	mov	r2, #125	; 0x7d
   146ec:	e5432001 	strb	r2, [r3, #-1]
   146f0:	e1d030b6 	ldrh	r3, [r0, #6]
   146f4:	e5901000 	ldr	r1, [r0]
   146f8:	e7c12003 	strb	r2, [r1, r3]
   146fc:	e1d030b6 	ldrh	r3, [r0, #6]
   14700:	e2833001 	add	r3, r3, #1
   14704:	e1c030b6 	strh	r3, [r0, #6]
   14708:	e1d000b6 	ldrh	r0, [r0, #6]
   1470c:	e12fff1e 	bx	lr

00014710 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
   14710:	e92d4010 	push	{r4, lr}
   14714:	e3a02025 	mov	r2, #37	; 0x25
   14718:	e1a04000 	mov	r4, r0
   1471c:	e4801004 	str	r1, [r0], #4
   14720:	e3a01000 	mov	r1, #0
   14724:	ebfff2d0 	bl	1126c <memset@plt>
   14728:	e3e02000 	mvn	r2, #0
   1472c:	e3a0307f 	mov	r3, #127	; 0x7f
   14730:	e5c42029 	strb	r2, [r4, #41]	; 0x29
   14734:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   14738:	e5c4202b 	strb	r2, [r4, #43]	; 0x2b
   1473c:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   14740:	e1a00004 	mov	r0, r4
   14744:	e8bd8010 	pop	{r4, pc}

00014748 <RDMDeviceParams::Load()>:
   14748:	e3a03000 	mov	r3, #0
   1474c:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
   14750:	e1a02000 	mov	r2, r0
   14754:	e5803004 	str	r3, [r0, #4]
   14758:	e1a04000 	mov	r4, r0
   1475c:	e59f1068 	ldr	r1, [pc, #104]	; 147cc <RDMDeviceParams::Load()+0x84>
   14760:	e1a0000d 	mov	r0, sp
   14764:	eb009e13 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   14768:	e59f1060 	ldr	r1, [pc, #96]	; 147d0 <RDMDeviceParams::Load()+0x88>
   1476c:	e1a0000d 	mov	r0, sp
   14770:	eb009e30 	bl	3c038 <ReadConfigFile::Read(char const*)>
   14774:	e2505000 	subs	r5, r0, #0
   14778:	e5940000 	ldr	r0, [r4]
   1477c:	0a00000a 	beq	147ac <RDMDeviceParams::Load()+0x64>
   14780:	e3500000 	cmp	r0, #0
   14784:	0a000003 	beq	14798 <RDMDeviceParams::Load()+0x50>
   14788:	e5903000 	ldr	r3, [r0]
   1478c:	e2841004 	add	r1, r4, #4
   14790:	e5933008 	ldr	r3, [r3, #8]
   14794:	e12fff33 	blx	r3
   14798:	e1a0000d 	mov	r0, sp
   1479c:	eb009e16 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   147a0:	e1a00005 	mov	r0, r5
   147a4:	e28dd00c 	add	sp, sp, #12
   147a8:	e8bd8030 	pop	{r4, r5, pc}
   147ac:	e3500000 	cmp	r0, #0
   147b0:	0afffff8 	beq	14798 <RDMDeviceParams::Load()+0x50>
   147b4:	e5903000 	ldr	r3, [r0]
   147b8:	e2841004 	add	r1, r4, #4
   147bc:	e3a05001 	mov	r5, #1
   147c0:	e593300c 	ldr	r3, [r3, #12]
   147c4:	e12fff33 	blx	r3
   147c8:	eafffff2 	b	14798 <RDMDeviceParams::Load()+0x50>
   147cc:	000149b4 	.word	0x000149b4
   147d0:	00044e28 	.word	0x00044e28

000147d4 <RDMDeviceParams::Load(char const*, unsigned int)>:
   147d4:	e5903000 	ldr	r3, [r0]
   147d8:	e3530000 	cmp	r3, #0
   147dc:	012fff1e 	bxeq	lr
   147e0:	e3a03000 	mov	r3, #0
   147e4:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   147e8:	e1a06002 	mov	r6, r2
   147ec:	e5803004 	str	r3, [r0, #4]
   147f0:	e1a05001 	mov	r5, r1
   147f4:	e1a04000 	mov	r4, r0
   147f8:	e1a02000 	mov	r2, r0
   147fc:	e59f1038 	ldr	r1, [pc, #56]	; 1483c <RDMDeviceParams::Load(char const*, unsigned int)+0x68>
   14800:	e1a0000d 	mov	r0, sp
   14804:	eb009deb 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   14808:	e1a02006 	mov	r2, r6
   1480c:	e1a01005 	mov	r1, r5
   14810:	e1a0000d 	mov	r0, sp
   14814:	eb009e52 	bl	3c164 <ReadConfigFile::Read(char const*, unsigned int)>
   14818:	e1a01004 	mov	r1, r4
   1481c:	e4910004 	ldr	r0, [r1], #4
   14820:	e5903000 	ldr	r3, [r0]
   14824:	e5933008 	ldr	r3, [r3, #8]
   14828:	e12fff33 	blx	r3
   1482c:	e1a0000d 	mov	r0, sp
   14830:	eb009df1 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   14834:	e28dd008 	add	sp, sp, #8
   14838:	e8bd8070 	pop	{r4, r5, r6, pc}
   1483c:	000149b4 	.word	0x000149b4

00014840 <RDMDeviceParams::callbackFunction(char const*)>:
   14840:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
   14844:	e3a03020 	mov	r3, #32
   14848:	e1a05001 	mov	r5, r1
   1484c:	e58d3004 	str	r3, [sp, #4]
   14850:	e2802008 	add	r2, r0, #8
   14854:	e1a04000 	mov	r4, r0
   14858:	e28d3004 	add	r3, sp, #4
   1485c:	e59f10a8 	ldr	r1, [pc, #168]	; 1490c <RDMDeviceParams::callbackFunction(char const*)+0xcc>
   14860:	e1a00005 	mov	r0, r5
   14864:	eb009b62 	bl	3b5f4 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
   14868:	e3500000 	cmp	r0, #0
   1486c:	1a000006 	bne	1488c <RDMDeviceParams::callbackFunction(char const*)+0x4c>
   14870:	e59d3004 	ldr	r3, [sp, #4]
   14874:	e5c43028 	strb	r3, [r4, #40]	; 0x28
   14878:	e5943004 	ldr	r3, [r4, #4]
   1487c:	e3833001 	orr	r3, r3, #1
   14880:	e5843004 	str	r3, [r4, #4]
   14884:	e28dd00c 	add	sp, sp, #12
   14888:	e8bd8030 	pop	{r4, r5, pc}
   1488c:	e28d2002 	add	r2, sp, #2
   14890:	e59f1078 	ldr	r1, [pc, #120]	; 14910 <RDMDeviceParams::callbackFunction(char const*)+0xd0>
   14894:	e1a00005 	mov	r0, r5
   14898:	eb009da3 	bl	3bf2c <Sscan::HexUint16(char const*, char const*, unsigned short&)>
   1489c:	e3500000 	cmp	r0, #0
   148a0:	1a000009 	bne	148cc <RDMDeviceParams::callbackFunction(char const*)+0x8c>
   148a4:	e1dd20b2 	ldrh	r2, [sp, #2]
   148a8:	e59f1064 	ldr	r1, [pc, #100]	; 14914 <RDMDeviceParams::callbackFunction(char const*)+0xd4>
   148ac:	e1520001 	cmp	r2, r1
   148b0:	e1a03422 	lsr	r3, r2, #8
   148b4:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   148b8:	e5943004 	ldr	r3, [r4, #4]
   148bc:	e5c42029 	strb	r2, [r4, #41]	; 0x29
   148c0:	03c33002 	biceq	r3, r3, #2
   148c4:	13833002 	orrne	r3, r3, #2
   148c8:	eaffffec 	b	14880 <RDMDeviceParams::callbackFunction(char const*)+0x40>
   148cc:	e28d2002 	add	r2, sp, #2
   148d0:	e59f1040 	ldr	r1, [pc, #64]	; 14918 <RDMDeviceParams::callbackFunction(char const*)+0xd8>
   148d4:	e1a00005 	mov	r0, r5
   148d8:	eb009d93 	bl	3bf2c <Sscan::HexUint16(char const*, char const*, unsigned short&)>
   148dc:	e3500000 	cmp	r0, #0
   148e0:	1affffe7 	bne	14884 <RDMDeviceParams::callbackFunction(char const*)+0x44>
   148e4:	e1dd20b2 	ldrh	r2, [sp, #2]
   148e8:	e59f1024 	ldr	r1, [pc, #36]	; 14914 <RDMDeviceParams::callbackFunction(char const*)+0xd4>
   148ec:	e1520001 	cmp	r2, r1
   148f0:	e1a03422 	lsr	r3, r2, #8
   148f4:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   148f8:	e5943004 	ldr	r3, [r4, #4]
   148fc:	e5c4202b 	strb	r2, [r4, #43]	; 0x2b
   14900:	03c33004 	biceq	r3, r3, #4
   14904:	13833004 	orrne	r3, r3, #4
   14908:	eaffffdc 	b	14880 <RDMDeviceParams::callbackFunction(char const*)+0x40>
   1490c:	00044e38 	.word	0x00044e38
   14910:	00044e48 	.word	0x00044e48
   14914:	00007fff 	.word	0x00007fff
   14918:	00044e5c 	.word	0x00044e5c

0001491c <RDMDeviceParams::Set(RDMDevice*)>:
   1491c:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
   14920:	e1a04000 	mov	r4, r0
   14924:	e1a05001 	mov	r5, r1
   14928:	e5900004 	ldr	r0, [r0, #4]
   1492c:	e3a01001 	mov	r1, #1
   14930:	eb000069 	bl	14adc <RDMDeviceParams::isMaskSet(unsigned int) const [clone .isra.2]>
   14934:	e3500000 	cmp	r0, #0
   14938:	0a000006 	beq	14958 <RDMDeviceParams::Set(RDMDevice*)+0x3c>
   1493c:	e2843008 	add	r3, r4, #8
   14940:	e58d3000 	str	r3, [sp]
   14944:	e5d43028 	ldrb	r3, [r4, #40]	; 0x28
   14948:	e1a0100d 	mov	r1, sp
   1494c:	e1a00005 	mov	r0, r5
   14950:	e5cd3004 	strb	r3, [sp, #4]
   14954:	ebfffcdb 	bl	13cc8 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
   14958:	e3a01002 	mov	r1, #2
   1495c:	e5940004 	ldr	r0, [r4, #4]
   14960:	eb00005d 	bl	14adc <RDMDeviceParams::isMaskSet(unsigned int) const [clone .isra.2]>
   14964:	e3500000 	cmp	r0, #0
   14968:	0a000004 	beq	14980 <RDMDeviceParams::Set(RDMDevice*)+0x64>
   1496c:	e5941028 	ldr	r1, [r4, #40]	; 0x28
   14970:	e285004e 	add	r0, r5, #78	; 0x4e
   14974:	e1a01421 	lsr	r1, r1, #8
   14978:	e6ff1071 	uxth	r1, r1
   1497c:	eb000052 	bl	14acc <RDMDevice::SetProductCategory(unsigned short) [clone .isra.0]>
   14980:	e3a01004 	mov	r1, #4
   14984:	e5940004 	ldr	r0, [r4, #4]
   14988:	eb000053 	bl	14adc <RDMDeviceParams::isMaskSet(unsigned int) const [clone .isra.2]>
   1498c:	e3500000 	cmp	r0, #0
   14990:	0a000004 	beq	149a8 <RDMDeviceParams::Set(RDMDevice*)+0x8c>
   14994:	e5d4102c 	ldrb	r1, [r4, #44]	; 0x2c
   14998:	e5d4302b 	ldrb	r3, [r4, #43]	; 0x2b
   1499c:	e2850050 	add	r0, r5, #80	; 0x50
   149a0:	e1831401 	orr	r1, r3, r1, lsl #8
   149a4:	eb00004a 	bl	14ad4 <RDMDevice::SetProductDetail(unsigned short) [clone .isra.1]>
   149a8:	e28dd00c 	add	sp, sp, #12
   149ac:	e8bd8030 	pop	{r4, r5, pc}

000149b0 <RDMDeviceParams::Dump()>:
   149b0:	e12fff1e 	bx	lr

000149b4 <RDMDeviceParams::staticCallbackFunction(void*, char const*)>:
   149b4:	eaffffa1 	b	14840 <RDMDeviceParams::callbackFunction(char const*)>

000149b8 <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)>:
   149b8:	e92d407f 	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   149bc:	e3510000 	cmp	r1, #0
   149c0:	e1a04000 	mov	r4, r0
   149c4:	e1a05002 	mov	r5, r2
   149c8:	e1a06003 	mov	r6, r3
   149cc:	e280c004 	add	ip, r0, #4
   149d0:	0a000026 	beq	14a70 <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0xb8>
   149d4:	e1a0000c 	mov	r0, ip
   149d8:	e2813028 	add	r3, r1, #40	; 0x28
   149dc:	e4912004 	ldr	r2, [r1], #4
   149e0:	e1510003 	cmp	r1, r3
   149e4:	e4802004 	str	r2, [r0], #4
   149e8:	1afffffb 	bne	149dc <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0x24>
   149ec:	e5d13000 	ldrb	r3, [r1]
   149f0:	e5c03000 	strb	r3, [r0]
   149f4:	e1a03006 	mov	r3, r6
   149f8:	e1a02005 	mov	r2, r5
   149fc:	e59f1084 	ldr	r1, [pc, #132]	; 14a88 <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0xd0>
   14a00:	e28d0004 	add	r0, sp, #4
   14a04:	eb009ca6 	bl	3bca4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
   14a08:	e5940004 	ldr	r0, [r4, #4]
   14a0c:	e3a01002 	mov	r1, #2
   14a10:	eb000031 	bl	14adc <RDMDeviceParams::isMaskSet(unsigned int) const [clone .isra.2]>
   14a14:	e5942028 	ldr	r2, [r4, #40]	; 0x28
   14a18:	e59f106c 	ldr	r1, [pc, #108]	; 14a8c <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0xd4>
   14a1c:	e1a02422 	lsr	r2, r2, #8
   14a20:	e6ff2072 	uxth	r2, r2
   14a24:	e1a03000 	mov	r3, r0
   14a28:	e28d0004 	add	r0, sp, #4
   14a2c:	ebffff21 	bl	146b8 <PropertiesBuilder::AddHex16(char const*, unsigned short, bool)>
   14a30:	e5940004 	ldr	r0, [r4, #4]
   14a34:	e3a01004 	mov	r1, #4
   14a38:	eb000027 	bl	14adc <RDMDeviceParams::isMaskSet(unsigned int) const [clone .isra.2]>
   14a3c:	e5d4102c 	ldrb	r1, [r4, #44]	; 0x2c
   14a40:	e5d4202b 	ldrb	r2, [r4, #43]	; 0x2b
   14a44:	e1822401 	orr	r2, r2, r1, lsl #8
   14a48:	e59f1040 	ldr	r1, [pc, #64]	; 14a90 <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0xd8>
   14a4c:	e1a03000 	mov	r3, r0
   14a50:	e28d0004 	add	r0, sp, #4
   14a54:	ebffff17 	bl	146b8 <PropertiesBuilder::AddHex16(char const*, unsigned short, bool)>
   14a58:	e28d0004 	add	r0, sp, #4
   14a5c:	ebffff1b 	bl	146d0 <PropertiesBuilder::GetSize()>
   14a60:	e59d3020 	ldr	r3, [sp, #32]
   14a64:	e5830000 	str	r0, [r3]
   14a68:	e28dd010 	add	sp, sp, #16
   14a6c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14a70:	e5900000 	ldr	r0, [r0]
   14a74:	e1a0100c 	mov	r1, ip
   14a78:	e5903000 	ldr	r3, [r0]
   14a7c:	e593300c 	ldr	r3, [r3, #12]
   14a80:	e12fff33 	blx	r3
   14a84:	eaffffda 	b	149f4 <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)+0x3c>
   14a88:	00044e28 	.word	0x00044e28
   14a8c:	00044e48 	.word	0x00044e48
   14a90:	00044e5c 	.word	0x00044e5c

00014a94 <RDMDeviceParams::Save(char*, unsigned int, unsigned int&)>:
   14a94:	e590c000 	ldr	ip, [r0]
   14a98:	e35c0000 	cmp	ip, #0
   14a9c:	1a000001 	bne	14aa8 <RDMDeviceParams::Save(char*, unsigned int, unsigned int&)+0x14>
   14aa0:	e583c000 	str	ip, [r3]
   14aa4:	e12fff1e 	bx	lr
   14aa8:	e1a0c003 	mov	ip, r3
   14aac:	e92d4007 	push	{r0, r1, r2, lr}
   14ab0:	e1a03002 	mov	r3, r2
   14ab4:	e58dc000 	str	ip, [sp]
   14ab8:	e1a02001 	mov	r2, r1
   14abc:	e3a01000 	mov	r1, #0
   14ac0:	ebffffbc 	bl	149b8 <RDMDeviceParams::Builder(rdm::deviceparams::Params const*, char*, unsigned int, unsigned int&)>
   14ac4:	e28dd00c 	add	sp, sp, #12
   14ac8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00014acc <RDMDevice::SetProductCategory(unsigned short) [clone .isra.0]>:
   14acc:	e1c010b0 	strh	r1, [r0]
   14ad0:	e12fff1e 	bx	lr

00014ad4 <RDMDevice::SetProductDetail(unsigned short) [clone .isra.1]>:
   14ad4:	e1c010b0 	strh	r1, [r0]
   14ad8:	e12fff1e 	bx	lr

00014adc <RDMDeviceParams::isMaskSet(unsigned int) const [clone .isra.2]>:
   14adc:	e1d13000 	bics	r3, r1, r0
   14ae0:	03a00001 	moveq	r0, #1
   14ae4:	13a00000 	movne	r0, #0
   14ae8:	e12fff1e 	bx	lr

00014aec <RDMDevice::GetFactoryDefaults()>:
   14aec:	e92d4810 	push	{r4, fp, lr}
   14af0:	e28db008 	add	fp, sp, #8
   14af4:	e24dd00c 	sub	sp, sp, #12
   14af8:	e50b0010 	str	r0, [fp, #-16]
   14afc:	e51b3010 	ldr	r3, [fp, #-16]
   14b00:	e1d347b4 	ldrh	r4, [r3, #116]	; 0x74
   14b04:	e51b0010 	ldr	r0, [fp, #-16]
   14b08:	ebfffcb4 	bl	13de0 <RDMDevice::CalculateChecksum()>
   14b0c:	e1a03000 	mov	r3, r0
   14b10:	e1540003 	cmp	r4, r3
   14b14:	03a03001 	moveq	r3, #1
   14b18:	13a03000 	movne	r3, #0
   14b1c:	e6ef3073 	uxtb	r3, r3
   14b20:	e1a00003 	mov	r0, r3
   14b24:	e24bd008 	sub	sp, fp, #8
   14b28:	e8bd8810 	pop	{r4, fp, pc}

00014b2c <RDMDevice::GetManufacturerName(TRDMDeviceInfoData*)>:
   14b2c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14b30:	e28db000 	add	fp, sp, #0
   14b34:	e24dd00c 	sub	sp, sp, #12
   14b38:	e50b0008 	str	r0, [fp, #-8]
   14b3c:	e50b100c 	str	r1, [fp, #-12]
   14b40:	e51b3008 	ldr	r3, [fp, #-8]
   14b44:	e283202c 	add	r2, r3, #44	; 0x2c
   14b48:	e51b300c 	ldr	r3, [fp, #-12]
   14b4c:	e5832000 	str	r2, [r3]
   14b50:	e51b3008 	ldr	r3, [fp, #-8]
   14b54:	e5d3204c 	ldrb	r2, [r3, #76]	; 0x4c
   14b58:	e51b300c 	ldr	r3, [fp, #-12]
   14b5c:	e5c32004 	strb	r2, [r3, #4]
   14b60:	e1a00000 	nop			; (mov r0, r0)
   14b64:	e28bd000 	add	sp, fp, #0
   14b68:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14b6c:	e12fff1e 	bx	lr

00014b70 <RDMDevice::GetLabel(TRDMDeviceInfoData*)>:
   14b70:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14b74:	e28db000 	add	fp, sp, #0
   14b78:	e24dd00c 	sub	sp, sp, #12
   14b7c:	e50b0008 	str	r0, [fp, #-8]
   14b80:	e50b100c 	str	r1, [fp, #-12]
   14b84:	e51b3008 	ldr	r3, [fp, #-8]
   14b88:	e283200b 	add	r2, r3, #11
   14b8c:	e51b300c 	ldr	r3, [fp, #-12]
   14b90:	e5832000 	str	r2, [r3]
   14b94:	e51b3008 	ldr	r3, [fp, #-8]
   14b98:	e5d3202b 	ldrb	r2, [r3, #43]	; 0x2b
   14b9c:	e51b300c 	ldr	r3, [fp, #-12]
   14ba0:	e5c32004 	strb	r2, [r3, #4]
   14ba4:	e1a00000 	nop			; (mov r0, r0)
   14ba8:	e28bd000 	add	sp, fp, #0
   14bac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14bb0:	e12fff1e 	bx	lr

00014bb4 <RDMDevice::GetProductDetail() const>:
   14bb4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14bb8:	e28db000 	add	fp, sp, #0
   14bbc:	e24dd00c 	sub	sp, sp, #12
   14bc0:	e50b0008 	str	r0, [fp, #-8]
   14bc4:	e51b3008 	ldr	r3, [fp, #-8]
   14bc8:	e1d335b0 	ldrh	r3, [r3, #80]	; 0x50
   14bcc:	e1a00003 	mov	r0, r3
   14bd0:	e28bd000 	add	sp, fp, #0
   14bd4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14bd8:	e12fff1e 	bx	lr

00014bdc <RDMIdentify::On()>:
   14bdc:	e92d4800 	push	{fp, lr}
   14be0:	e28db004 	add	fp, sp, #4
   14be4:	e24dd008 	sub	sp, sp, #8
   14be8:	e50b0008 	str	r0, [fp, #-8]
   14bec:	e59f304c 	ldr	r3, [pc, #76]	; 14c40 <RDMIdentify::On()+0x64>
   14bf0:	e3a02001 	mov	r2, #1
   14bf4:	e5c32000 	strb	r2, [r3]
   14bf8:	ebfff280 	bl	11600 <Hardware::Get()>
   14bfc:	e1a03000 	mov	r3, r0
   14c00:	e3a02001 	mov	r2, #1
   14c04:	e3a01004 	mov	r1, #4
   14c08:	e1a00003 	mov	r0, r3
   14c0c:	eb00a925 	bl	3f0a8 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
   14c10:	e59f302c 	ldr	r3, [pc, #44]	; 14c44 <RDMIdentify::On()+0x68>
   14c14:	e5d33000 	ldrb	r3, [r3]
   14c18:	e3530000 	cmp	r3, #0
   14c1c:	0a000004 	beq	14c34 <RDMIdentify::On()+0x58>
   14c20:	e59f301c 	ldr	r3, [pc, #28]	; 14c44 <RDMIdentify::On()+0x68>
   14c24:	e5d33000 	ldrb	r3, [r3]
   14c28:	e1a01003 	mov	r1, r3
   14c2c:	e51b0008 	ldr	r0, [fp, #-8]
   14c30:	eb000fa7 	bl	18ad4 <RDMIdentify::On(rdm::identify::Mode)>
   14c34:	e1a00000 	nop			; (mov r0, r0)
   14c38:	e24bd004 	sub	sp, fp, #4
   14c3c:	e8bd8800 	pop	{fp, pc}
   14c40:	0005c3ac 	.word	0x0005c3ac
   14c44:	0005c3ad 	.word	0x0005c3ad

00014c48 <RDMIdentify::Off()>:
   14c48:	e92d4800 	push	{fp, lr}
   14c4c:	e28db004 	add	fp, sp, #4
   14c50:	e24dd008 	sub	sp, sp, #8
   14c54:	e50b0008 	str	r0, [fp, #-8]
   14c58:	e59f304c 	ldr	r3, [pc, #76]	; 14cac <RDMIdentify::Off()+0x64>
   14c5c:	e3a02000 	mov	r2, #0
   14c60:	e5c32000 	strb	r2, [r3]
   14c64:	ebfff265 	bl	11600 <Hardware::Get()>
   14c68:	e1a03000 	mov	r3, r0
   14c6c:	e3a02000 	mov	r2, #0
   14c70:	e3a01002 	mov	r1, #2
   14c74:	e1a00003 	mov	r0, r3
   14c78:	eb00a90a 	bl	3f0a8 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
   14c7c:	e59f302c 	ldr	r3, [pc, #44]	; 14cb0 <RDMIdentify::Off()+0x68>
   14c80:	e5d33000 	ldrb	r3, [r3]
   14c84:	e3530000 	cmp	r3, #0
   14c88:	0a000004 	beq	14ca0 <RDMIdentify::Off()+0x58>
   14c8c:	e59f301c 	ldr	r3, [pc, #28]	; 14cb0 <RDMIdentify::Off()+0x68>
   14c90:	e5d33000 	ldrb	r3, [r3]
   14c94:	e1a01003 	mov	r1, r3
   14c98:	e51b0008 	ldr	r0, [fp, #-8]
   14c9c:	eb000f96 	bl	18afc <RDMIdentify::Off(rdm::identify::Mode)>
   14ca0:	e1a00000 	nop			; (mov r0, r0)
   14ca4:	e24bd004 	sub	sp, fp, #4
   14ca8:	e8bd8800 	pop	{fp, pc}
   14cac:	0005c3ac 	.word	0x0005c3ac
   14cb0:	0005c3ad 	.word	0x0005c3ad

00014cb4 <RDMIdentify::IsEnabled() const>:
   14cb4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14cb8:	e28db000 	add	fp, sp, #0
   14cbc:	e24dd00c 	sub	sp, sp, #12
   14cc0:	e50b0008 	str	r0, [fp, #-8]
   14cc4:	e59f3010 	ldr	r3, [pc, #16]	; 14cdc <RDMIdentify::IsEnabled() const+0x28>
   14cc8:	e5d33000 	ldrb	r3, [r3]
   14ccc:	e1a00003 	mov	r0, r3
   14cd0:	e28bd000 	add	sp, fp, #0
   14cd4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14cd8:	e12fff1e 	bx	lr
   14cdc:	0005c3ac 	.word	0x0005c3ac

00014ce0 <RDMIdentify::Get()>:
   14ce0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14ce4:	e28db000 	add	fp, sp, #0
   14ce8:	e59f3010 	ldr	r3, [pc, #16]	; 14d00 <RDMIdentify::Get()+0x20>
   14cec:	e5933000 	ldr	r3, [r3]
   14cf0:	e1a00003 	mov	r0, r3
   14cf4:	e28bd000 	add	sp, fp, #0
   14cf8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14cfc:	e12fff1e 	bx	lr
   14d00:	0005c3b0 	.word	0x0005c3b0

00014d04 <RDMPersonality::GetSlots() const>:
   14d04:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14d08:	e28db000 	add	fp, sp, #0
   14d0c:	e24dd00c 	sub	sp, sp, #12
   14d10:	e50b0008 	str	r0, [fp, #-8]
   14d14:	e51b3008 	ldr	r3, [fp, #-8]
   14d18:	e1d330b0 	ldrh	r3, [r3]
   14d1c:	e1a00003 	mov	r0, r3
   14d20:	e28bd000 	add	sp, fp, #0
   14d24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14d28:	e12fff1e 	bx	lr

00014d2c <RDMPersonality::DescriptionCopyTo(char*, unsigned char&)>:
   14d2c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14d30:	e28db000 	add	fp, sp, #0
   14d34:	e24dd024 	sub	sp, sp, #36	; 0x24
   14d38:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   14d3c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   14d40:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   14d44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d48:	e2833008 	add	r3, r3, #8
   14d4c:	e50b3008 	str	r3, [fp, #-8]
   14d50:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   14d54:	e50b300c 	str	r3, [fp, #-12]
   14d58:	e3a03000 	mov	r3, #0
   14d5c:	e54b300d 	strb	r3, [fp, #-13]
   14d60:	e55b200d 	ldrb	r2, [fp, #-13]
   14d64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d68:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   14d6c:	e1520003 	cmp	r2, r3
   14d70:	2a000012 	bcs	14dc0 <RDMPersonality::DescriptionCopyTo(char*, unsigned char&)+0x94>
   14d74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   14d78:	e5d33000 	ldrb	r3, [r3]
   14d7c:	e55b200d 	ldrb	r2, [fp, #-13]
   14d80:	e1520003 	cmp	r2, r3
   14d84:	2a00000d 	bcs	14dc0 <RDMPersonality::DescriptionCopyTo(char*, unsigned char&)+0x94>
   14d88:	e51b3008 	ldr	r3, [fp, #-8]
   14d8c:	e5d32000 	ldrb	r2, [r3]
   14d90:	e51b300c 	ldr	r3, [fp, #-12]
   14d94:	e5c32000 	strb	r2, [r3]
   14d98:	e51b3008 	ldr	r3, [fp, #-8]
   14d9c:	e2833001 	add	r3, r3, #1
   14da0:	e50b3008 	str	r3, [fp, #-8]
   14da4:	e51b300c 	ldr	r3, [fp, #-12]
   14da8:	e2833001 	add	r3, r3, #1
   14dac:	e50b300c 	str	r3, [fp, #-12]
   14db0:	e55b300d 	ldrb	r3, [fp, #-13]
   14db4:	e2833001 	add	r3, r3, #1
   14db8:	e54b300d 	strb	r3, [fp, #-13]
   14dbc:	eaffffe7 	b	14d60 <RDMPersonality::DescriptionCopyTo(char*, unsigned char&)+0x34>
   14dc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   14dc4:	e55b200d 	ldrb	r2, [fp, #-13]
   14dc8:	e5c32000 	strb	r2, [r3]
   14dcc:	e1a00000 	nop			; (mov r0, r0)
   14dd0:	e28bd000 	add	sp, fp, #0
   14dd4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14dd8:	e12fff1e 	bx	lr

00014ddc <RDMSensors::Get()>:
   14ddc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14de0:	e28db000 	add	fp, sp, #0
   14de4:	e59f3010 	ldr	r3, [pc, #16]	; 14dfc <RDMSensors::Get()+0x20>
   14de8:	e5933000 	ldr	r3, [r3]
   14dec:	e1a00003 	mov	r0, r3
   14df0:	e28bd000 	add	sp, fp, #0
   14df4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14df8:	e12fff1e 	bx	lr
   14dfc:	0005c3b4 	.word	0x0005c3b4

00014e00 <RDMSubDevices::Get()>:
   14e00:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14e04:	e28db000 	add	fp, sp, #0
   14e08:	e59f3010 	ldr	r3, [pc, #16]	; 14e20 <RDMSubDevices::Get()+0x20>
   14e0c:	e5933000 	ldr	r3, [r3]
   14e10:	e1a00003 	mov	r0, r3
   14e14:	e28bd000 	add	sp, fp, #0
   14e18:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   14e1c:	e12fff1e 	bx	lr
   14e20:	0005c3b8 	.word	0x0005c3b8

00014e24 <RDMDeviceResponder::SetLabel(unsigned short, char const*, unsigned char)>:
   14e24:	e92d4800 	push	{fp, lr}
   14e28:	e28db004 	add	fp, sp, #4
   14e2c:	e24dd018 	sub	sp, sp, #24
   14e30:	e50b0010 	str	r0, [fp, #-16]
   14e34:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   14e38:	e1a02003 	mov	r2, r3
   14e3c:	e1a03001 	mov	r3, r1
   14e40:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   14e44:	e1a03002 	mov	r3, r2
   14e48:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
   14e4c:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
   14e50:	e3530020 	cmp	r3, #32
   14e54:	9a000001 	bls	14e60 <RDMDeviceResponder::SetLabel(unsigned short, char const*, unsigned char)+0x3c>
   14e58:	e3a03020 	mov	r3, #32
   14e5c:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
   14e60:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   14e64:	e3530000 	cmp	r3, #0
   14e68:	0a000006 	beq	14e88 <RDMDeviceResponder::SetLabel(unsigned short, char const*, unsigned char)+0x64>
   14e6c:	e51b3010 	ldr	r3, [fp, #-16]
   14e70:	e283008c 	add	r0, r3, #140	; 0x8c
   14e74:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
   14e78:	e15b11b2 	ldrh	r1, [fp, #-18]	; 0xffffffee
   14e7c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   14e80:	eb001880 	bl	1b088 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>
   14e84:	ea000009 	b	14eb0 <RDMDeviceResponder::SetLabel(unsigned short, char const*, unsigned char)+0x8c>
   14e88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e8c:	e50b300c 	str	r3, [fp, #-12]
   14e90:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
   14e94:	e54b3008 	strb	r3, [fp, #-8]
   14e98:	e51b3010 	ldr	r3, [fp, #-16]
   14e9c:	e2833004 	add	r3, r3, #4
   14ea0:	e24b200c 	sub	r2, fp, #12
   14ea4:	e1a01002 	mov	r1, r2
   14ea8:	e1a00003 	mov	r0, r3
   14eac:	ebfffb85 	bl	13cc8 <RDMDevice::SetLabel(TRDMDeviceInfoData const*)>
   14eb0:	e24bd004 	sub	sp, fp, #4
   14eb4:	e8bd8800 	pop	{fp, pc}

00014eb8 <RDMDeviceResponder::GetLabel(unsigned short, TRDMDeviceInfoData*)>:
   14eb8:	e92d4800 	push	{fp, lr}
   14ebc:	e28db004 	add	fp, sp, #4
   14ec0:	e24dd010 	sub	sp, sp, #16
   14ec4:	e50b0008 	str	r0, [fp, #-8]
   14ec8:	e1a03001 	mov	r3, r1
   14ecc:	e50b2010 	str	r2, [fp, #-16]
   14ed0:	e14b30ba 	strh	r3, [fp, #-10]
   14ed4:	e15b30ba 	ldrh	r3, [fp, #-10]
   14ed8:	e3530000 	cmp	r3, #0
   14edc:	0a000006 	beq	14efc <RDMDeviceResponder::GetLabel(unsigned short, TRDMDeviceInfoData*)+0x44>
   14ee0:	e51b3008 	ldr	r3, [fp, #-8]
   14ee4:	e283308c 	add	r3, r3, #140	; 0x8c
   14ee8:	e15b10ba 	ldrh	r1, [fp, #-10]
   14eec:	e51b2010 	ldr	r2, [fp, #-16]
   14ef0:	e1a00003 	mov	r0, r3
   14ef4:	eb001827 	bl	1af98 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>
   14ef8:	ea000004 	b	14f10 <RDMDeviceResponder::GetLabel(unsigned short, TRDMDeviceInfoData*)+0x58>
   14efc:	e51b3008 	ldr	r3, [fp, #-8]
   14f00:	e2833004 	add	r3, r3, #4
   14f04:	e51b1010 	ldr	r1, [fp, #-16]
   14f08:	e1a00003 	mov	r0, r3
   14f0c:	ebffff17 	bl	14b70 <RDMDevice::GetLabel(TRDMDeviceInfoData*)>
   14f10:	e24bd004 	sub	sp, fp, #4
   14f14:	e8bd8800 	pop	{fp, pc}

00014f18 <RDMDeviceResponder::SetFactoryDefaults()>:
   14f18:	e92d4800 	push	{fp, lr}
   14f1c:	e28db004 	add	fp, sp, #4
   14f20:	e24dd008 	sub	sp, sp, #8
   14f24:	e50b0008 	str	r0, [fp, #-8]
   14f28:	e51b3008 	ldr	r3, [fp, #-8]
   14f2c:	e2833004 	add	r3, r3, #4
   14f30:	e1a00003 	mov	r0, r3
   14f34:	ebfffb4c 	bl	13c6c <RDMDevice::SetFactoryDefaults()>
   14f38:	e3a02001 	mov	r2, #1
   14f3c:	e3a01000 	mov	r1, #0
   14f40:	e51b0008 	ldr	r0, [fp, #-8]
   14f44:	eb00014f 	bl	15488 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
   14f48:	e51b3008 	ldr	r3, [fp, #-8]
   14f4c:	e1d33cb8 	ldrh	r3, [r3, #200]	; 0xc8
   14f50:	e1a02003 	mov	r2, r3
   14f54:	e3a01000 	mov	r1, #0
   14f58:	e51b0008 	ldr	r0, [fp, #-8]
   14f5c:	eb00006e 	bl	1511c <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
   14f60:	e51b3008 	ldr	r3, [fp, #-8]
   14f64:	e28300b0 	add	r0, r3, #176	; 0xb0
   14f68:	e51b3008 	ldr	r3, [fp, #-8]
   14f6c:	e283309d 	add	r3, r3, #157	; 0x9d
   14f70:	e3a02013 	mov	r2, #19
   14f74:	e1a01003 	mov	r1, r3
   14f78:	ebfff121 	bl	11404 <memcpy@plt>
   14f7c:	e51b3008 	ldr	r3, [fp, #-8]
   14f80:	e283308c 	add	r3, r3, #140	; 0x8c
   14f84:	e1a00003 	mov	r0, r3
   14f88:	eb001ad0 	bl	1bad0 <RDMSubDevices::SetFactoryDefaults()>
   14f8c:	e51b0008 	ldr	r0, [fp, #-8]
   14f90:	ebfffc2d 	bl	1404c <RDMDeviceResponder::CalculateChecksum()>
   14f94:	e1a03000 	mov	r3, r0
   14f98:	e1a02003 	mov	r2, r3
   14f9c:	e51b3008 	ldr	r3, [fp, #-8]
   14fa0:	e1c32cb6 	strh	r2, [r3, #198]	; 0xc6
   14fa4:	e51b3008 	ldr	r3, [fp, #-8]
   14fa8:	e3a02001 	mov	r2, #1
   14fac:	e5c320c5 	strb	r2, [r3, #197]	; 0xc5
   14fb0:	ebfff569 	bl	1255c <rdm::device::responder::factorydefaults()>
   14fb4:	e1a00000 	nop			; (mov r0, r0)
   14fb8:	e24bd004 	sub	sp, fp, #4
   14fbc:	e8bd8800 	pop	{fp, pc}

00014fc0 <RDMDeviceResponder::GetFactoryDefaults()>:
   14fc0:	e92d4810 	push	{r4, fp, lr}
   14fc4:	e28db008 	add	fp, sp, #8
   14fc8:	e24dd00c 	sub	sp, sp, #12
   14fcc:	e50b0010 	str	r0, [fp, #-16]
   14fd0:	e51b3010 	ldr	r3, [fp, #-16]
   14fd4:	e5d330c5 	ldrb	r3, [r3, #197]	; 0xc5
   14fd8:	e3530000 	cmp	r3, #0
   14fdc:	0a00002b 	beq	15090 <RDMDeviceResponder::GetFactoryDefaults()+0xd0>
   14fe0:	e51b3010 	ldr	r3, [fp, #-16]
   14fe4:	e2833004 	add	r3, r3, #4
   14fe8:	e1a00003 	mov	r0, r3
   14fec:	ebfffebe 	bl	14aec <RDMDevice::GetFactoryDefaults()>
   14ff0:	e1a03000 	mov	r3, r0
   14ff4:	e2233001 	eor	r3, r3, #1
   14ff8:	e6ef3073 	uxtb	r3, r3
   14ffc:	e3530000 	cmp	r3, #0
   15000:	0a000004 	beq	15018 <RDMDeviceResponder::GetFactoryDefaults()+0x58>
   15004:	e51b3010 	ldr	r3, [fp, #-16]
   15008:	e3a02000 	mov	r2, #0
   1500c:	e5c320c5 	strb	r2, [r3, #197]	; 0xc5
   15010:	e3a03000 	mov	r3, #0
   15014:	ea00001f 	b	15098 <RDMDeviceResponder::GetFactoryDefaults()+0xd8>
   15018:	e51b3010 	ldr	r3, [fp, #-16]
   1501c:	e1d34cb6 	ldrh	r4, [r3, #198]	; 0xc6
   15020:	e51b0010 	ldr	r0, [fp, #-16]
   15024:	ebfffc08 	bl	1404c <RDMDeviceResponder::CalculateChecksum()>
   15028:	e1a03000 	mov	r3, r0
   1502c:	e1540003 	cmp	r4, r3
   15030:	13a03001 	movne	r3, #1
   15034:	03a03000 	moveq	r3, #0
   15038:	e6ef3073 	uxtb	r3, r3
   1503c:	e3530000 	cmp	r3, #0
   15040:	0a000004 	beq	15058 <RDMDeviceResponder::GetFactoryDefaults()+0x98>
   15044:	e51b3010 	ldr	r3, [fp, #-16]
   15048:	e3a02000 	mov	r2, #0
   1504c:	e5c320c5 	strb	r2, [r3, #197]	; 0xc5
   15050:	e3a03000 	mov	r3, #0
   15054:	ea00000f 	b	15098 <RDMDeviceResponder::GetFactoryDefaults()+0xd8>
   15058:	e51b3010 	ldr	r3, [fp, #-16]
   1505c:	e283308c 	add	r3, r3, #140	; 0x8c
   15060:	e1a00003 	mov	r0, r3
   15064:	eb001a6e 	bl	1ba24 <RDMSubDevices::GetFactoryDefaults()>
   15068:	e1a03000 	mov	r3, r0
   1506c:	e2233001 	eor	r3, r3, #1
   15070:	e6ef3073 	uxtb	r3, r3
   15074:	e3530000 	cmp	r3, #0
   15078:	0a000004 	beq	15090 <RDMDeviceResponder::GetFactoryDefaults()+0xd0>
   1507c:	e51b3010 	ldr	r3, [fp, #-16]
   15080:	e3a02000 	mov	r2, #0
   15084:	e5c320c5 	strb	r2, [r3, #197]	; 0xc5
   15088:	e3a03000 	mov	r3, #0
   1508c:	ea000001 	b	15098 <RDMDeviceResponder::GetFactoryDefaults()+0xd8>
   15090:	e51b3010 	ldr	r3, [fp, #-16]
   15094:	e5d330c5 	ldrb	r3, [r3, #197]	; 0xc5
   15098:	e1a00003 	mov	r0, r3
   1509c:	e24bd008 	sub	sp, fp, #8
   150a0:	e8bd8810 	pop	{r4, fp, pc}

000150a4 <RDMDeviceResponder::GetLanguage() const>:
   150a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   150a8:	e28db000 	add	fp, sp, #0
   150ac:	e24dd00c 	sub	sp, sp, #12
   150b0:	e50b0008 	str	r0, [fp, #-8]
   150b4:	e51b3008 	ldr	r3, [fp, #-8]
   150b8:	e28330c3 	add	r3, r3, #195	; 0xc3
   150bc:	e1a00003 	mov	r0, r3
   150c0:	e28bd000 	add	sp, fp, #0
   150c4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   150c8:	e12fff1e 	bx	lr

000150cc <RDMDeviceResponder::GetSoftwareVersion() const>:
   150cc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   150d0:	e28db000 	add	fp, sp, #0
   150d4:	e24dd00c 	sub	sp, sp, #12
   150d8:	e50b0008 	str	r0, [fp, #-8]
   150dc:	e51b3008 	ldr	r3, [fp, #-8]
   150e0:	e5933098 	ldr	r3, [r3, #152]	; 0x98
   150e4:	e1a00003 	mov	r0, r3
   150e8:	e28bd000 	add	sp, fp, #0
   150ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   150f0:	e12fff1e 	bx	lr

000150f4 <RDMDeviceResponder::GetSoftwareVersionLength() const>:
   150f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   150f8:	e28db000 	add	fp, sp, #0
   150fc:	e24dd00c 	sub	sp, sp, #12
   15100:	e50b0008 	str	r0, [fp, #-8]
   15104:	e51b3008 	ldr	r3, [fp, #-8]
   15108:	e5d3309c 	ldrb	r3, [r3, #156]	; 0x9c
   1510c:	e1a00003 	mov	r0, r3
   15110:	e28bd000 	add	sp, fp, #0
   15114:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   15118:	e12fff1e 	bx	lr

0001511c <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>:
   1511c:	e92d4800 	push	{fp, lr}
   15120:	e28db004 	add	fp, sp, #4
   15124:	e24dd010 	sub	sp, sp, #16
   15128:	e50b0010 	str	r0, [fp, #-16]
   1512c:	e1a03001 	mov	r3, r1
   15130:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   15134:	e1a03002 	mov	r3, r2
   15138:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
   1513c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
   15140:	e3530000 	cmp	r3, #0
   15144:	0a000036 	beq	15224 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x108>
   15148:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
   1514c:	e3530c02 	cmp	r3, #512	; 0x200
   15150:	8a000033 	bhi	15224 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x108>
   15154:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   15158:	e3530000 	cmp	r3, #0
   1515c:	0a000006 	beq	1517c <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x60>
   15160:	e51b3010 	ldr	r3, [fp, #-16]
   15164:	e283308c 	add	r3, r3, #140	; 0x8c
   15168:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
   1516c:	e15b11b2 	ldrh	r1, [fp, #-18]	; 0xffffffee
   15170:	e1a00003 	mov	r0, r3
   15174:	eb001835 	bl	1b250 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>
   15178:	ea00002a 	b	15228 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x10c>
   1517c:	e51b3010 	ldr	r3, [fp, #-16]
   15180:	e5932094 	ldr	r2, [r3, #148]	; 0x94
   15184:	e51b3010 	ldr	r3, [fp, #-16]
   15188:	e5d330a9 	ldrb	r3, [r3, #169]	; 0xa9
   1518c:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   15190:	e1a03103 	lsl	r3, r3, #2
   15194:	e0823003 	add	r3, r2, r3
   15198:	e5933000 	ldr	r3, [r3]
   1519c:	e50b3008 	str	r3, [fp, #-8]
   151a0:	e51b0008 	ldr	r0, [fp, #-8]
   151a4:	ebfffb38 	bl	13e8c <RDMPersonality::GetLightSet() const>
   151a8:	e50b000c 	str	r0, [fp, #-12]
   151ac:	e51b300c 	ldr	r3, [fp, #-12]
   151b0:	e3530000 	cmp	r3, #0
   151b4:	0a00001b 	beq	15228 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x10c>
   151b8:	e51b300c 	ldr	r3, [fp, #-12]
   151bc:	e5933000 	ldr	r3, [r3]
   151c0:	e2833020 	add	r3, r3, #32
   151c4:	e5933000 	ldr	r3, [r3]
   151c8:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
   151cc:	e1a01002 	mov	r1, r2
   151d0:	e51b000c 	ldr	r0, [fp, #-12]
   151d4:	e12fff33 	blx	r3
   151d8:	e1a03000 	mov	r3, r0
   151dc:	e3530000 	cmp	r3, #0
   151e0:	0a000008 	beq	15208 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0xec>
   151e4:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
   151e8:	e1a03443 	asr	r3, r3, #8
   151ec:	e6ef2073 	uxtb	r2, r3
   151f0:	e51b3010 	ldr	r3, [fp, #-16]
   151f4:	e5c320ab 	strb	r2, [r3, #171]	; 0xab
   151f8:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
   151fc:	e6ef2073 	uxtb	r2, r3
   15200:	e51b3010 	ldr	r3, [fp, #-16]
   15204:	e5c320ac 	strb	r2, [r3, #172]	; 0xac
   15208:	e51b3010 	ldr	r3, [fp, #-16]
   1520c:	e5933000 	ldr	r3, [r3]
   15210:	e283300c 	add	r3, r3, #12
   15214:	e5933000 	ldr	r3, [r3]
   15218:	e51b0010 	ldr	r0, [fp, #-16]
   1521c:	e12fff33 	blx	r3
   15220:	ea000000 	b	15228 <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)+0x10c>
   15224:	e1a00000 	nop			; (mov r0, r0)
   15228:	e24bd004 	sub	sp, fp, #4
   1522c:	e8bd8800 	pop	{fp, pc}

00015230 <RDMDeviceResponder::GetDmxStartAddress(unsigned short)>:
   15230:	e92d4800 	push	{fp, lr}
   15234:	e28db004 	add	fp, sp, #4
   15238:	e24dd008 	sub	sp, sp, #8
   1523c:	e50b0008 	str	r0, [fp, #-8]
   15240:	e1a03001 	mov	r3, r1
   15244:	e14b30ba 	strh	r3, [fp, #-10]
   15248:	e15b30ba 	ldrh	r3, [fp, #-10]
   1524c:	e3530000 	cmp	r3, #0
   15250:	0a000007 	beq	15274 <RDMDeviceResponder::GetDmxStartAddress(unsigned short)+0x44>
   15254:	e51b3008 	ldr	r3, [fp, #-8]
   15258:	e283308c 	add	r3, r3, #140	; 0x8c
   1525c:	e15b20ba 	ldrh	r2, [fp, #-10]
   15260:	e1a01002 	mov	r1, r2
   15264:	e1a00003 	mov	r0, r3
   15268:	eb0017c6 	bl	1b188 <RDMSubDevices::GetDmxStartAddress(unsigned short)>
   1526c:	e1a03000 	mov	r3, r0
   15270:	ea000009 	b	1529c <RDMDeviceResponder::GetDmxStartAddress(unsigned short)+0x6c>
   15274:	e51b3008 	ldr	r3, [fp, #-8]
   15278:	e5d330ab 	ldrb	r3, [r3, #171]	; 0xab
   1527c:	e6ff3073 	uxth	r3, r3
   15280:	e1a03403 	lsl	r3, r3, #8
   15284:	e6ff2073 	uxth	r2, r3
   15288:	e51b3008 	ldr	r3, [fp, #-8]
   1528c:	e5d330ac 	ldrb	r3, [r3, #172]	; 0xac
   15290:	e6ff3073 	uxth	r3, r3
   15294:	e0823003 	add	r3, r2, r3
   15298:	e6ff3073 	uxth	r3, r3
   1529c:	e1a00003 	mov	r0, r3
   152a0:	e24bd004 	sub	sp, fp, #4
   152a4:	e8bd8800 	pop	{fp, pc}

000152a8 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&)>:
   152a8:	e92d4800 	push	{fp, lr}
   152ac:	e28db004 	add	fp, sp, #4
   152b0:	e24dd018 	sub	sp, sp, #24
   152b4:	e50b0010 	str	r0, [fp, #-16]
   152b8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   152bc:	e1a03001 	mov	r3, r1
   152c0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   152c4:	e1a03002 	mov	r3, r2
   152c8:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
   152cc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   152d0:	e3530000 	cmp	r3, #0
   152d4:	0a000001 	beq	152e0 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&)+0x38>
   152d8:	e3a03000 	mov	r3, #0
   152dc:	ea000015 	b	15338 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&)+0x90>
   152e0:	e51b3010 	ldr	r3, [fp, #-16]
   152e4:	e5932094 	ldr	r2, [r3, #148]	; 0x94
   152e8:	e51b3010 	ldr	r3, [fp, #-16]
   152ec:	e5d330a9 	ldrb	r3, [r3, #169]	; 0xa9
   152f0:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   152f4:	e1a03103 	lsl	r3, r3, #2
   152f8:	e0823003 	add	r3, r2, r3
   152fc:	e5933000 	ldr	r3, [r3]
   15300:	e50b3008 	str	r3, [fp, #-8]
   15304:	e51b0008 	ldr	r0, [fp, #-8]
   15308:	ebfffadf 	bl	13e8c <RDMPersonality::GetLightSet() const>
   1530c:	e50b000c 	str	r0, [fp, #-12]
   15310:	e51b300c 	ldr	r3, [fp, #-12]
   15314:	e5933000 	ldr	r3, [r3]
   15318:	e283302c 	add	r3, r3, #44	; 0x2c
   1531c:	e5933000 	ldr	r3, [r3]
   15320:	e15b11b4 	ldrh	r1, [fp, #-20]	; 0xffffffec
   15324:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   15328:	e51b000c 	ldr	r0, [fp, #-12]
   1532c:	e12fff33 	blx	r3
   15330:	e1a03000 	mov	r3, r0
   15334:	e1a00000 	nop			; (mov r0, r0)
   15338:	e1a00003 	mov	r0, r3
   1533c:	e24bd004 	sub	sp, fp, #4
   15340:	e8bd8800 	pop	{fp, pc}

00015344 <RDMDeviceResponder::GetDmxFootPrint(unsigned short)>:
   15344:	e92d4800 	push	{fp, lr}
   15348:	e28db004 	add	fp, sp, #4
   1534c:	e24dd008 	sub	sp, sp, #8
   15350:	e50b0008 	str	r0, [fp, #-8]
   15354:	e1a03001 	mov	r3, r1
   15358:	e14b30ba 	strh	r3, [fp, #-10]
   1535c:	e15b30ba 	ldrh	r3, [fp, #-10]
   15360:	e3530000 	cmp	r3, #0
   15364:	0a000007 	beq	15388 <RDMDeviceResponder::GetDmxFootPrint(unsigned short)+0x44>
   15368:	e51b3008 	ldr	r3, [fp, #-8]
   1536c:	e283308c 	add	r3, r3, #140	; 0x8c
   15370:	e15b20ba 	ldrh	r2, [fp, #-10]
   15374:	e1a01002 	mov	r1, r2
   15378:	e1a00003 	mov	r0, r3
   1537c:	eb0017e8 	bl	1b324 <RDMSubDevices::GetDmxFootPrint(unsigned short)>
   15380:	e1a03000 	mov	r3, r0
   15384:	ea000009 	b	153b0 <RDMDeviceResponder::GetDmxFootPrint(unsigned short)+0x6c>
   15388:	e51b3008 	ldr	r3, [fp, #-8]
   1538c:	e5d330a7 	ldrb	r3, [r3, #167]	; 0xa7
   15390:	e6ff3073 	uxth	r3, r3
   15394:	e1a03403 	lsl	r3, r3, #8
   15398:	e6ff2073 	uxth	r2, r3
   1539c:	e51b3008 	ldr	r3, [fp, #-8]
   153a0:	e5d330a8 	ldrb	r3, [r3, #168]	; 0xa8
   153a4:	e6ff3073 	uxth	r3, r3
   153a8:	e0823003 	add	r3, r2, r3
   153ac:	e6ff3073 	uxth	r3, r3
   153b0:	e1a00003 	mov	r0, r3
   153b4:	e24bd004 	sub	sp, fp, #4
   153b8:	e8bd8800 	pop	{fp, pc}

000153bc <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>:
   153bc:	e92d4800 	push	{fp, lr}
   153c0:	e28db004 	add	fp, sp, #4
   153c4:	e24dd008 	sub	sp, sp, #8
   153c8:	e50b0008 	str	r0, [fp, #-8]
   153cc:	e1a03001 	mov	r3, r1
   153d0:	e14b30ba 	strh	r3, [fp, #-10]
   153d4:	e1a03002 	mov	r3, r2
   153d8:	e54b300b 	strb	r3, [fp, #-11]
   153dc:	e15b30ba 	ldrh	r3, [fp, #-10]
   153e0:	e3530000 	cmp	r3, #0
   153e4:	0a000007 	beq	15408 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)+0x4c>
   153e8:	e51b3008 	ldr	r3, [fp, #-8]
   153ec:	e283308c 	add	r3, r3, #140	; 0x8c
   153f0:	e55b200b 	ldrb	r2, [fp, #-11]
   153f4:	e15b10ba 	ldrh	r1, [fp, #-10]
   153f8:	e1a00003 	mov	r0, r3
   153fc:	eb001893 	bl	1b650 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>
   15400:	e1a03000 	mov	r3, r0
   15404:	ea000006 	b	15424 <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)+0x68>
   15408:	e51b3008 	ldr	r3, [fp, #-8]
   1540c:	e5932094 	ldr	r2, [r3, #148]	; 0x94
   15410:	e55b300b 	ldrb	r3, [fp, #-11]
   15414:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   15418:	e1a03103 	lsl	r3, r3, #2
   1541c:	e0823003 	add	r3, r2, r3
   15420:	e5933000 	ldr	r3, [r3]
   15424:	e1a00003 	mov	r0, r3
   15428:	e24bd004 	sub	sp, fp, #4
   1542c:	e8bd8800 	pop	{fp, pc}

00015430 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>:
   15430:	e92d4800 	push	{fp, lr}
   15434:	e28db004 	add	fp, sp, #4
   15438:	e24dd008 	sub	sp, sp, #8
   1543c:	e50b0008 	str	r0, [fp, #-8]
   15440:	e1a03001 	mov	r3, r1
   15444:	e14b30ba 	strh	r3, [fp, #-10]
   15448:	e15b30ba 	ldrh	r3, [fp, #-10]
   1544c:	e3530000 	cmp	r3, #0
   15450:	0a000007 	beq	15474 <RDMDeviceResponder::GetPersonalityCount(unsigned short)+0x44>
   15454:	e51b3008 	ldr	r3, [fp, #-8]
   15458:	e283308c 	add	r3, r3, #140	; 0x8c
   1545c:	e15b20ba 	ldrh	r2, [fp, #-10]
   15460:	e1a01002 	mov	r1, r2
   15464:	e1a00003 	mov	r0, r3
   15468:	eb001846 	bl	1b588 <RDMSubDevices::GetPersonalityCount(unsigned short)>
   1546c:	e1a03000 	mov	r3, r0
   15470:	ea000001 	b	1547c <RDMDeviceResponder::GetPersonalityCount(unsigned short)+0x4c>
   15474:	e51b3008 	ldr	r3, [fp, #-8]
   15478:	e5d330aa 	ldrb	r3, [r3, #170]	; 0xaa
   1547c:	e1a00003 	mov	r0, r3
   15480:	e24bd004 	sub	sp, fp, #4
   15484:	e8bd8800 	pop	{fp, pc}

00015488 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>:
   15488:	e92d4800 	push	{fp, lr}
   1548c:	e28db004 	add	fp, sp, #4
   15490:	e24dd010 	sub	sp, sp, #16
   15494:	e50b0010 	str	r0, [fp, #-16]
   15498:	e1a03001 	mov	r3, r1
   1549c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   154a0:	e1a03002 	mov	r3, r2
   154a4:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
   154a8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   154ac:	e3530000 	cmp	r3, #0
   154b0:	0a000006 	beq	154d0 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x48>
   154b4:	e51b3010 	ldr	r3, [fp, #-16]
   154b8:	e283308c 	add	r3, r3, #140	; 0x8c
   154bc:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
   154c0:	e15b11b2 	ldrh	r1, [fp, #-18]	; 0xffffffee
   154c4:	e1a00003 	mov	r0, r3
   154c8:	eb0017f9 	bl	1b4b4 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>
   154cc:	ea000041 	b	155d8 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x150>
   154d0:	e51b3010 	ldr	r3, [fp, #-16]
   154d4:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
   154d8:	e5c320a9 	strb	r2, [r3, #169]	; 0xa9
   154dc:	e51b3010 	ldr	r3, [fp, #-16]
   154e0:	e5932094 	ldr	r2, [r3, #148]	; 0x94
   154e4:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
   154e8:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   154ec:	e1a03103 	lsl	r3, r3, #2
   154f0:	e0823003 	add	r3, r2, r3
   154f4:	e5933000 	ldr	r3, [r3]
   154f8:	e50b3008 	str	r3, [fp, #-8]
   154fc:	e51b0008 	ldr	r0, [fp, #-8]
   15500:	ebfffa61 	bl	13e8c <RDMPersonality::GetLightSet() const>
   15504:	e50b000c 	str	r0, [fp, #-12]
   15508:	e51b300c 	ldr	r3, [fp, #-12]
   1550c:	e3530000 	cmp	r3, #0
   15510:	0a000030 	beq	155d8 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)+0x150>
   15514:	e51b300c 	ldr	r3, [fp, #-12]
   15518:	e5933000 	ldr	r3, [r3]
   1551c:	e2833028 	add	r3, r3, #40	; 0x28
   15520:	e5933000 	ldr	r3, [r3]
   15524:	e51b000c 	ldr	r0, [fp, #-12]
   15528:	e12fff33 	blx	r3
   1552c:	e1a03000 	mov	r3, r0
   15530:	e1a03443 	asr	r3, r3, #8
   15534:	e6ef2073 	uxtb	r2, r3
   15538:	e51b3010 	ldr	r3, [fp, #-16]
   1553c:	e5c320a7 	strb	r2, [r3, #167]	; 0xa7
   15540:	e51b300c 	ldr	r3, [fp, #-12]
   15544:	e5933000 	ldr	r3, [r3]
   15548:	e2833028 	add	r3, r3, #40	; 0x28
   1554c:	e5933000 	ldr	r3, [r3]
   15550:	e51b000c 	ldr	r0, [fp, #-12]
   15554:	e12fff33 	blx	r3
   15558:	e1a03000 	mov	r3, r0
   1555c:	e6ef2073 	uxtb	r2, r3
   15560:	e51b3010 	ldr	r3, [fp, #-16]
   15564:	e5c320a8 	strb	r2, [r3, #168]	; 0xa8
   15568:	e51b300c 	ldr	r3, [fp, #-12]
   1556c:	e5933000 	ldr	r3, [r3]
   15570:	e2833024 	add	r3, r3, #36	; 0x24
   15574:	e5933000 	ldr	r3, [r3]
   15578:	e51b000c 	ldr	r0, [fp, #-12]
   1557c:	e12fff33 	blx	r3
   15580:	e1a03000 	mov	r3, r0
   15584:	e1a03443 	asr	r3, r3, #8
   15588:	e6ef2073 	uxtb	r2, r3
   1558c:	e51b3010 	ldr	r3, [fp, #-16]
   15590:	e5c320ab 	strb	r2, [r3, #171]	; 0xab
   15594:	e51b300c 	ldr	r3, [fp, #-12]
   15598:	e5933000 	ldr	r3, [r3]
   1559c:	e2833024 	add	r3, r3, #36	; 0x24
   155a0:	e5933000 	ldr	r3, [r3]
   155a4:	e51b000c 	ldr	r0, [fp, #-12]
   155a8:	e12fff33 	blx	r3
   155ac:	e1a03000 	mov	r3, r0
   155b0:	e6ef2073 	uxtb	r2, r3
   155b4:	e51b3010 	ldr	r3, [fp, #-16]
   155b8:	e5c320ac 	strb	r2, [r3, #172]	; 0xac
   155bc:	e51b3010 	ldr	r3, [fp, #-16]
   155c0:	e5933000 	ldr	r3, [r3]
   155c4:	e2833008 	add	r3, r3, #8
   155c8:	e5933000 	ldr	r3, [r3]
   155cc:	e51b100c 	ldr	r1, [fp, #-12]
   155d0:	e51b0010 	ldr	r0, [fp, #-16]
   155d4:	e12fff33 	blx	r3
   155d8:	e24bd004 	sub	sp, fp, #4
   155dc:	e8bd8800 	pop	{fp, pc}

000155e0 <RDMDeviceResponder::GetPersonalityCurrent(unsigned short)>:
   155e0:	e92d4800 	push	{fp, lr}
   155e4:	e28db004 	add	fp, sp, #4
   155e8:	e24dd008 	sub	sp, sp, #8
   155ec:	e50b0008 	str	r0, [fp, #-8]
   155f0:	e1a03001 	mov	r3, r1
   155f4:	e14b30ba 	strh	r3, [fp, #-10]
   155f8:	e15b30ba 	ldrh	r3, [fp, #-10]
   155fc:	e3530000 	cmp	r3, #0
   15600:	0a000007 	beq	15624 <RDMDeviceResponder::GetPersonalityCurrent(unsigned short)+0x44>
   15604:	e51b3008 	ldr	r3, [fp, #-8]
   15608:	e283308c 	add	r3, r3, #140	; 0x8c
   1560c:	e15b20ba 	ldrh	r2, [fp, #-10]
   15610:	e1a01002 	mov	r1, r2
   15614:	e1a00003 	mov	r0, r3
   15618:	eb001773 	bl	1b3ec <RDMSubDevices::GetPersonalityCurrent(unsigned short)>
   1561c:	e1a03000 	mov	r3, r0
   15620:	ea000001 	b	1562c <RDMDeviceResponder::GetPersonalityCurrent(unsigned short)+0x4c>
   15624:	e51b3008 	ldr	r3, [fp, #-8]
   15628:	e5d330a9 	ldrb	r3, [r3, #169]	; 0xa9
   1562c:	e1a00003 	mov	r0, r3
   15630:	e24bd004 	sub	sp, fp, #4
   15634:	e8bd8800 	pop	{fp, pc}

00015638 <RDMDeviceResponder::Get()>:
   15638:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1563c:	e28db000 	add	fp, sp, #0
   15640:	e59f3010 	ldr	r3, [pc, #16]	; 15658 <RDMDeviceResponder::Get()+0x20>
   15644:	e5933000 	ldr	r3, [r3]
   15648:	e1a00003 	mov	r0, r3
   1564c:	e28bd000 	add	sp, fp, #0
   15650:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   15654:	e12fff1e 	bx	lr
   15658:	0005c3a8 	.word	0x0005c3a8

0001565c <DisplaySet::GetContrast() const>:
   1565c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   15660:	e28db000 	add	fp, sp, #0
   15664:	e24dd00c 	sub	sp, sp, #12
   15668:	e50b0008 	str	r0, [fp, #-8]
   1566c:	e51b3008 	ldr	r3, [fp, #-8]
   15670:	e5d3300c 	ldrb	r3, [r3, #12]
   15674:	e1a00003 	mov	r0, r3
   15678:	e28bd000 	add	sp, fp, #0
   1567c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   15680:	e12fff1e 	bx	lr

00015684 <DisplaySet::GetFlipVertically() const>:
   15684:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   15688:	e28db000 	add	fp, sp, #0
   1568c:	e24dd00c 	sub	sp, sp, #12
   15690:	e50b0008 	str	r0, [fp, #-8]
   15694:	e51b3008 	ldr	r3, [fp, #-8]
   15698:	e5d3300d 	ldrb	r3, [r3, #13]
   1569c:	e1a00003 	mov	r0, r3
   156a0:	e28bd000 	add	sp, fp, #0
   156a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   156a8:	e12fff1e 	bx	lr

000156ac <Display::SetContrast(unsigned char)>:
   156ac:	e92d4800 	push	{fp, lr}
   156b0:	e28db004 	add	fp, sp, #4
   156b4:	e24dd008 	sub	sp, sp, #8
   156b8:	e50b0008 	str	r0, [fp, #-8]
   156bc:	e1a03001 	mov	r3, r1
   156c0:	e54b3009 	strb	r3, [fp, #-9]
   156c4:	e51b3008 	ldr	r3, [fp, #-8]
   156c8:	e5933018 	ldr	r3, [r3, #24]
   156cc:	e3530000 	cmp	r3, #0
   156d0:	0a00000a 	beq	15700 <Display::SetContrast(unsigned char)+0x54>
   156d4:	e51b3008 	ldr	r3, [fp, #-8]
   156d8:	e5932018 	ldr	r2, [r3, #24]
   156dc:	e51b3008 	ldr	r3, [fp, #-8]
   156e0:	e5933018 	ldr	r3, [r3, #24]
   156e4:	e5933000 	ldr	r3, [r3]
   156e8:	e283302c 	add	r3, r3, #44	; 0x2c
   156ec:	e5933000 	ldr	r3, [r3]
   156f0:	e55b1009 	ldrb	r1, [fp, #-9]
   156f4:	e1a00002 	mov	r0, r2
   156f8:	e12fff33 	blx	r3
   156fc:	ea000000 	b	15704 <Display::SetContrast(unsigned char)+0x58>
   15700:	e1a00000 	nop			; (mov r0, r0)
   15704:	e24bd004 	sub	sp, fp, #4
   15708:	e8bd8800 	pop	{fp, pc}

0001570c <Display::SetFlipVertically(bool)>:
   1570c:	e92d4800 	push	{fp, lr}
   15710:	e28db004 	add	fp, sp, #4
   15714:	e24dd008 	sub	sp, sp, #8
   15718:	e50b0008 	str	r0, [fp, #-8]
   1571c:	e1a03001 	mov	r3, r1
   15720:	e54b3009 	strb	r3, [fp, #-9]
   15724:	e51b3008 	ldr	r3, [fp, #-8]
   15728:	e5933018 	ldr	r3, [r3, #24]
   1572c:	e3530000 	cmp	r3, #0
   15730:	0a00000a 	beq	15760 <Display::SetFlipVertically(bool)+0x54>
   15734:	e51b3008 	ldr	r3, [fp, #-8]
   15738:	e5932018 	ldr	r2, [r3, #24]
   1573c:	e51b3008 	ldr	r3, [fp, #-8]
   15740:	e5933018 	ldr	r3, [r3, #24]
   15744:	e5933000 	ldr	r3, [r3]
   15748:	e2833030 	add	r3, r3, #48	; 0x30
   1574c:	e5933000 	ldr	r3, [r3]
   15750:	e55b1009 	ldrb	r1, [fp, #-9]
   15754:	e1a00002 	mov	r0, r2
   15758:	e12fff33 	blx	r3
   1575c:	ea000000 	b	15764 <Display::SetFlipVertically(bool)+0x58>
   15760:	e1a00000 	nop			; (mov r0, r0)
   15764:	e24bd004 	sub	sp, fp, #4
   15768:	e8bd8800 	pop	{fp, pc}

0001576c <Display::GetFlipVertically() const>:
   1576c:	e92d4800 	push	{fp, lr}
   15770:	e28db004 	add	fp, sp, #4
   15774:	e24dd008 	sub	sp, sp, #8
   15778:	e50b0008 	str	r0, [fp, #-8]
   1577c:	e51b3008 	ldr	r3, [fp, #-8]
   15780:	e5933018 	ldr	r3, [r3, #24]
   15784:	e3530000 	cmp	r3, #0
   15788:	1a000001 	bne	15794 <Display::GetFlipVertically() const+0x28>
   1578c:	e3a03000 	mov	r3, #0
   15790:	ea000005 	b	157ac <Display::GetFlipVertically() const+0x40>
   15794:	e51b3008 	ldr	r3, [fp, #-8]
   15798:	e5933018 	ldr	r3, [r3, #24]
   1579c:	e1a00003 	mov	r0, r3
   157a0:	ebffffb7 	bl	15684 <DisplaySet::GetFlipVertically() const>
   157a4:	e1a03000 	mov	r3, r0
   157a8:	e1a00000 	nop			; (mov r0, r0)
   157ac:	e1a00003 	mov	r0, r3
   157b0:	e24bd004 	sub	sp, fp, #4
   157b4:	e8bd8800 	pop	{fp, pc}

000157b8 <Display::GetContrast() const>:
   157b8:	e92d4800 	push	{fp, lr}
   157bc:	e28db004 	add	fp, sp, #4
   157c0:	e24dd008 	sub	sp, sp, #8
   157c4:	e50b0008 	str	r0, [fp, #-8]
   157c8:	e51b3008 	ldr	r3, [fp, #-8]
   157cc:	e5933018 	ldr	r3, [r3, #24]
   157d0:	e3530000 	cmp	r3, #0
   157d4:	1a000001 	bne	157e0 <Display::GetContrast() const+0x28>
   157d8:	e3a03000 	mov	r3, #0
   157dc:	ea000005 	b	157f8 <Display::GetContrast() const+0x40>
   157e0:	e51b3008 	ldr	r3, [fp, #-8]
   157e4:	e5933018 	ldr	r3, [r3, #24]
   157e8:	e1a00003 	mov	r0, r3
   157ec:	ebffff9a 	bl	1565c <DisplaySet::GetContrast() const>
   157f0:	e1a03000 	mov	r3, r0
   157f4:	e1a00000 	nop			; (mov r0, r0)
   157f8:	e1a00003 	mov	r0, r3
   157fc:	e24bd004 	sub	sp, fp, #4
   15800:	e8bd8800 	pop	{fp, pc}

00015804 <RDMHandler::RDMHandler(bool)>:
   15804:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   15808:	e28db000 	add	fp, sp, #0
   1580c:	e24dd00c 	sub	sp, sp, #12
   15810:	e50b0008 	str	r0, [fp, #-8]
   15814:	e1a03001 	mov	r3, r1
   15818:	e54b3009 	strb	r3, [fp, #-9]
   1581c:	e51b3008 	ldr	r3, [fp, #-8]
   15820:	e55b2009 	ldrb	r2, [fp, #-9]
   15824:	e5c32000 	strb	r2, [r3]
   15828:	e51b3008 	ldr	r3, [fp, #-8]
   1582c:	e3a02000 	mov	r2, #0
   15830:	e5c32001 	strb	r2, [r3, #1]
   15834:	e51b3008 	ldr	r3, [fp, #-8]
   15838:	e3a02000 	mov	r2, #0
   1583c:	e5832004 	str	r2, [r3, #4]
   15840:	e51b3008 	ldr	r3, [fp, #-8]
   15844:	e3a02000 	mov	r2, #0
   15848:	e5832008 	str	r2, [r3, #8]
   1584c:	e51b3008 	ldr	r3, [fp, #-8]
   15850:	e1a00003 	mov	r0, r3
   15854:	e28bd000 	add	sp, fp, #0
   15858:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1585c:	e12fff1e 	bx	lr

00015860 <RDMHandler::HandleString(char const*, unsigned int)>:
   15860:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   15864:	e28db000 	add	fp, sp, #0
   15868:	e24dd01c 	sub	sp, sp, #28
   1586c:	e50b0010 	str	r0, [fp, #-16]
   15870:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   15874:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   15878:	e51b3010 	ldr	r3, [fp, #-16]
   1587c:	e5933008 	ldr	r3, [r3, #8]
   15880:	e50b300c 	str	r3, [fp, #-12]
   15884:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15888:	e6ef2073 	uxtb	r2, r3
   1588c:	e51b300c 	ldr	r3, [fp, #-12]
   15890:	e5c32017 	strb	r2, [r3, #23]
   15894:	e3a03000 	mov	r3, #0
   15898:	e50b3008 	str	r3, [fp, #-8]
   1589c:	e51b2008 	ldr	r2, [fp, #-8]
   158a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   158a4:	e1520003 	cmp	r2, r3
   158a8:	2a00000d 	bcs	158e4 <RDMHandler::HandleString(char const*, unsigned int)+0x84>
   158ac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   158b0:	e51b3008 	ldr	r3, [fp, #-8]
   158b4:	e0823003 	add	r3, r2, r3
   158b8:	e5d31000 	ldrb	r1, [r3]
   158bc:	e51b200c 	ldr	r2, [fp, #-12]
   158c0:	e51b3008 	ldr	r3, [fp, #-8]
   158c4:	e0823003 	add	r3, r2, r3
   158c8:	e2833018 	add	r3, r3, #24
   158cc:	e1a02001 	mov	r2, r1
   158d0:	e5c32000 	strb	r2, [r3]
   158d4:	e51b3008 	ldr	r3, [fp, #-8]
   158d8:	e2833001 	add	r3, r3, #1
   158dc:	e50b3008 	str	r3, [fp, #-8]
   158e0:	eaffffed 	b	1589c <RDMHandler::HandleString(char const*, unsigned int)+0x3c>
   158e4:	e1a00000 	nop			; (mov r0, r0)
   158e8:	e28bd000 	add	sp, fp, #0
   158ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   158f0:	e12fff1e 	bx	lr

000158f4 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>:
   158f4:	e92d4800 	push	{fp, lr}
   158f8:	e28db004 	add	fp, sp, #4
   158fc:	e24dd020 	sub	sp, sp, #32
   15900:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   15904:	e1a03001 	mov	r3, r1
   15908:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
   1590c:	e1a03002 	mov	r3, r2
   15910:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
   15914:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   15918:	e5933004 	ldr	r3, [r3, #4]
   1591c:	e50b3010 	str	r3, [fp, #-16]
   15920:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   15924:	e5933008 	ldr	r3, [r3, #8]
   15928:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   1592c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15930:	e3e02033 	mvn	r2, #51	; 0x33
   15934:	e5c32000 	strb	r2, [r3]
   15938:	e51b3010 	ldr	r3, [fp, #-16]
   1593c:	e5d32000 	ldrb	r2, [r3]
   15940:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15944:	e5c32001 	strb	r2, [r3, #1]
   15948:	e51b3010 	ldr	r3, [fp, #-16]
   1594c:	e5d3200e 	ldrb	r2, [r3, #14]
   15950:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15954:	e5c3200f 	strb	r2, [r3, #15]
   15958:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1595c:	e3a02000 	mov	r2, #0
   15960:	e5c32011 	strb	r2, [r3, #17]
   15964:	e51b3010 	ldr	r3, [fp, #-16]
   15968:	e5d32011 	ldrb	r2, [r3, #17]
   1596c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15970:	e5c32012 	strb	r2, [r3, #18]
   15974:	e51b3010 	ldr	r3, [fp, #-16]
   15978:	e5d32012 	ldrb	r2, [r3, #18]
   1597c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15980:	e5c32013 	strb	r2, [r3, #19]
   15984:	e51b3010 	ldr	r3, [fp, #-16]
   15988:	e5d33013 	ldrb	r3, [r3, #19]
   1598c:	e2833001 	add	r3, r3, #1
   15990:	e6ef2073 	uxtb	r2, r3
   15994:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15998:	e5c32014 	strb	r2, [r3, #20]
   1599c:	e51b3010 	ldr	r3, [fp, #-16]
   159a0:	e5d32014 	ldrb	r2, [r3, #20]
   159a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   159a8:	e5c32015 	strb	r2, [r3, #21]
   159ac:	e51b3010 	ldr	r3, [fp, #-16]
   159b0:	e5d32015 	ldrb	r2, [r3, #21]
   159b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   159b8:	e5c32016 	strb	r2, [r3, #22]
   159bc:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   159c0:	e3530000 	cmp	r3, #0
   159c4:	0a000004 	beq	159dc <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0xe8>
   159c8:	e3530000 	cmp	r3, #0
   159cc:	ba00006c 	blt	15b84 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x290>
   159d0:	e3530002 	cmp	r3, #2
   159d4:	ca00006a 	bgt	15b84 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x290>
   159d8:	ea000009 	b	15a04 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x110>
   159dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   159e0:	e5d33017 	ldrb	r3, [r3, #23]
   159e4:	e2833018 	add	r3, r3, #24
   159e8:	e6ef2073 	uxtb	r2, r3
   159ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   159f0:	e5c32002 	strb	r2, [r3, #2]
   159f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   159f8:	e3a02000 	mov	r2, #0
   159fc:	e5c32010 	strb	r2, [r3, #16]
   15a00:	ea000012 	b	15a50 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x15c>
   15a04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15a08:	e3a0201a 	mov	r2, #26
   15a0c:	e5c32002 	strb	r2, [r3, #2]
   15a10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15a14:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
   15a18:	e5c32010 	strb	r2, [r3, #16]
   15a1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15a20:	e3a02002 	mov	r2, #2
   15a24:	e5c32017 	strb	r2, [r3, #23]
   15a28:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
   15a2c:	e1a03443 	asr	r3, r3, #8
   15a30:	e6ef2073 	uxtb	r2, r3
   15a34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15a38:	e5c32018 	strb	r2, [r3, #24]
   15a3c:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
   15a40:	e6ef2073 	uxtb	r2, r3
   15a44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15a48:	e5c32019 	strb	r2, [r3, #25]
   15a4c:	e1a00000 	nop			; (mov r0, r0)
   15a50:	ebfffef8 	bl	15638 <RDMDeviceResponder::Get()>
   15a54:	e1a03000 	mov	r3, r0
   15a58:	e2833004 	add	r3, r3, #4
   15a5c:	e1a00003 	mov	r0, r3
   15a60:	ebfff786 	bl	13880 <RDMDevice::GetUID() const>
   15a64:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   15a68:	e3a03000 	mov	r3, #0
   15a6c:	e50b3008 	str	r3, [fp, #-8]
   15a70:	e51b3008 	ldr	r3, [fp, #-8]
   15a74:	e3530005 	cmp	r3, #5
   15a78:	8a000018 	bhi	15ae0 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x1ec>
   15a7c:	e51b2010 	ldr	r2, [fp, #-16]
   15a80:	e51b3008 	ldr	r3, [fp, #-8]
   15a84:	e0823003 	add	r3, r2, r3
   15a88:	e2833008 	add	r3, r3, #8
   15a8c:	e5d31000 	ldrb	r1, [r3]
   15a90:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   15a94:	e51b3008 	ldr	r3, [fp, #-8]
   15a98:	e0823003 	add	r3, r2, r3
   15a9c:	e2833003 	add	r3, r3, #3
   15aa0:	e1a02001 	mov	r2, r1
   15aa4:	e5c32000 	strb	r2, [r3]
   15aa8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   15aac:	e51b3008 	ldr	r3, [fp, #-8]
   15ab0:	e0823003 	add	r3, r2, r3
   15ab4:	e5d31000 	ldrb	r1, [r3]
   15ab8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   15abc:	e51b3008 	ldr	r3, [fp, #-8]
   15ac0:	e0823003 	add	r3, r2, r3
   15ac4:	e2833009 	add	r3, r3, #9
   15ac8:	e1a02001 	mov	r2, r1
   15acc:	e5c32000 	strb	r2, [r3]
   15ad0:	e51b3008 	ldr	r3, [fp, #-8]
   15ad4:	e2833001 	add	r3, r3, #1
   15ad8:	e50b3008 	str	r3, [fp, #-8]
   15adc:	eaffffe3 	b	15a70 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x17c>
   15ae0:	e3a03000 	mov	r3, #0
   15ae4:	e14b30ba 	strh	r3, [fp, #-10]
   15ae8:	e3a03000 	mov	r3, #0
   15aec:	e50b3008 	str	r3, [fp, #-8]
   15af0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15af4:	e5d33002 	ldrb	r3, [r3, #2]
   15af8:	e1a02003 	mov	r2, r3
   15afc:	e51b3008 	ldr	r3, [fp, #-8]
   15b00:	e1530002 	cmp	r3, r2
   15b04:	2a00000c 	bcs	15b3c <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x248>
   15b08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   15b0c:	e5932008 	ldr	r2, [r3, #8]
   15b10:	e51b3008 	ldr	r3, [fp, #-8]
   15b14:	e0823003 	add	r3, r2, r3
   15b18:	e5d33000 	ldrb	r3, [r3]
   15b1c:	e6ff2073 	uxth	r2, r3
   15b20:	e15b30ba 	ldrh	r3, [fp, #-10]
   15b24:	e0823003 	add	r3, r2, r3
   15b28:	e14b30ba 	strh	r3, [fp, #-10]
   15b2c:	e51b3008 	ldr	r3, [fp, #-8]
   15b30:	e2833001 	add	r3, r3, #1
   15b34:	e50b3008 	str	r3, [fp, #-8]
   15b38:	eaffffec 	b	15af0 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x1fc>
   15b3c:	e15b30ba 	ldrh	r3, [fp, #-10]
   15b40:	e1a00443 	asr	r0, r3, #8
   15b44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   15b48:	e5932008 	ldr	r2, [r3, #8]
   15b4c:	e51b3008 	ldr	r3, [fp, #-8]
   15b50:	e2831001 	add	r1, r3, #1
   15b54:	e50b1008 	str	r1, [fp, #-8]
   15b58:	e0823003 	add	r3, r2, r3
   15b5c:	e6ef2070 	uxtb	r2, r0
   15b60:	e5c32000 	strb	r2, [r3]
   15b64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   15b68:	e5932008 	ldr	r2, [r3, #8]
   15b6c:	e51b3008 	ldr	r3, [fp, #-8]
   15b70:	e0823003 	add	r3, r2, r3
   15b74:	e15b20ba 	ldrh	r2, [fp, #-10]
   15b78:	e6ef2072 	uxtb	r2, r2
   15b7c:	e5c32000 	strb	r2, [r3]
   15b80:	ea000000 	b	15b88 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)+0x294>
   15b84:	e1a00000 	nop			; (mov r0, r0)
   15b88:	e24bd004 	sub	sp, fp, #4
   15b8c:	e8bd8800 	pop	{fp, pc}

00015b90 <RDMHandler::RespondMessageAck()>:
   15b90:	e92d4800 	push	{fp, lr}
   15b94:	e28db004 	add	fp, sp, #4
   15b98:	e24dd010 	sub	sp, sp, #16
   15b9c:	e50b0010 	str	r0, [fp, #-16]
   15ba0:	e51b3010 	ldr	r3, [fp, #-16]
   15ba4:	e5933004 	ldr	r3, [r3, #4]
   15ba8:	e50b3008 	str	r3, [fp, #-8]
   15bac:	e51b3008 	ldr	r3, [fp, #-8]
   15bb0:	e5d33016 	ldrb	r3, [r3, #22]
   15bb4:	e3530000 	cmp	r3, #0
   15bb8:	1a000002 	bne	15bc8 <RDMHandler::RespondMessageAck()+0x38>
   15bbc:	e51b3008 	ldr	r3, [fp, #-8]
   15bc0:	e3a02018 	mov	r2, #24
   15bc4:	e5c32001 	strb	r2, [r3, #1]
   15bc8:	e3a02000 	mov	r2, #0
   15bcc:	e3a01000 	mov	r1, #0
   15bd0:	e51b0010 	ldr	r0, [fp, #-16]
   15bd4:	ebffff46 	bl	158f4 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>
   15bd8:	e1a00000 	nop			; (mov r0, r0)
   15bdc:	e24bd004 	sub	sp, fp, #4
   15be0:	e8bd8800 	pop	{fp, pc}

00015be4 <RDMHandler::RespondMessageNack(unsigned short)>:
   15be4:	e92d4800 	push	{fp, lr}
   15be8:	e28db004 	add	fp, sp, #4
   15bec:	e24dd008 	sub	sp, sp, #8
   15bf0:	e50b0008 	str	r0, [fp, #-8]
   15bf4:	e1a03001 	mov	r3, r1
   15bf8:	e14b30ba 	strh	r3, [fp, #-10]
   15bfc:	e15b30ba 	ldrh	r3, [fp, #-10]
   15c00:	e1a02003 	mov	r2, r3
   15c04:	e3a01002 	mov	r1, #2
   15c08:	e51b0008 	ldr	r0, [fp, #-8]
   15c0c:	ebffff38 	bl	158f4 <RDMHandler::CreateRespondMessage(unsigned char, unsigned short)>
   15c10:	e1a00000 	nop			; (mov r0, r0)
   15c14:	e24bd004 	sub	sp, fp, #4
   15c18:	e8bd8800 	pop	{fp, pc}

00015c1c <RDMHandler::HandleData(unsigned char const*, unsigned char*)>:
   15c1c:	e92d4800 	push	{fp, lr}
   15c20:	e28db004 	add	fp, sp, #4
   15c24:	e24dd048 	sub	sp, sp, #72	; 0x48
   15c28:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
   15c2c:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
   15c30:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
   15c34:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   15c38:	e3e02000 	mvn	r2, #0
   15c3c:	e5c32000 	strb	r2, [r3]
   15c40:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   15c44:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
   15c48:	e5832004 	str	r2, [r3, #4]
   15c4c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   15c50:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
   15c54:	e5832008 	str	r2, [r3, #8]
   15c58:	e3a03000 	mov	r3, #0
   15c5c:	e54b3005 	strb	r3, [fp, #-5]
   15c60:	e3a03000 	mov	r3, #0
   15c64:	e54b3006 	strb	r3, [fp, #-6]
   15c68:	e3a03000 	mov	r3, #0
   15c6c:	e54b3007 	strb	r3, [fp, #-7]
   15c70:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   15c74:	e5933004 	ldr	r3, [r3, #4]
   15c78:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   15c7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15c80:	e5d33013 	ldrb	r3, [r3, #19]
   15c84:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   15c88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15c8c:	e5d33014 	ldrb	r3, [r3, #20]
   15c90:	e6ff3073 	uxth	r3, r3
   15c94:	e1a03403 	lsl	r3, r3, #8
   15c98:	e6ff2073 	uxth	r2, r3
   15c9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ca0:	e5d33015 	ldrb	r3, [r3, #21]
   15ca4:	e6ff3073 	uxth	r3, r3
   15ca8:	e0823003 	add	r3, r2, r3
   15cac:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
   15cb0:	ebfffe60 	bl	15638 <RDMDeviceResponder::Get()>
   15cb4:	e1a03000 	mov	r3, r0
   15cb8:	e2833004 	add	r3, r3, #4
   15cbc:	e1a00003 	mov	r0, r3
   15cc0:	ebfff6ee 	bl	13880 <RDMDevice::GetUID() const>
   15cc4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   15cc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ccc:	e2833002 	add	r3, r3, #2
   15cd0:	e3a02006 	mov	r2, #6
   15cd4:	e59f14d8 	ldr	r1, [pc, #1240]	; 161b4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x598>
   15cd8:	e1a00003 	mov	r0, r3
   15cdc:	ebffedf5 	bl	114b8 <memcmp@plt>
   15ce0:	e1a03000 	mov	r3, r0
   15ce4:	e3530000 	cmp	r3, #0
   15ce8:	1a000001 	bne	15cf4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0xd8>
   15cec:	e3a03001 	mov	r3, #1
   15cf0:	e54b3006 	strb	r3, [fp, #-6]
   15cf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15cf8:	e2833002 	add	r3, r3, #2
   15cfc:	e3a02002 	mov	r2, #2
   15d00:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   15d04:	e1a00003 	mov	r0, r3
   15d08:	ebffedea 	bl	114b8 <memcmp@plt>
   15d0c:	e1a03000 	mov	r3, r0
   15d10:	e3530000 	cmp	r3, #0
   15d14:	1a00000d 	bne	15d50 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x134>
   15d18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15d1c:	e2833004 	add	r3, r3, #4
   15d20:	e3a02004 	mov	r2, #4
   15d24:	e59f1488 	ldr	r1, [pc, #1160]	; 161b4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x598>
   15d28:	e1a00003 	mov	r0, r3
   15d2c:	ebffede1 	bl	114b8 <memcmp@plt>
   15d30:	e1a03000 	mov	r3, r0
   15d34:	e3530000 	cmp	r3, #0
   15d38:	1a000004 	bne	15d50 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x134>
   15d3c:	e3a03001 	mov	r3, #1
   15d40:	e54b3007 	strb	r3, [fp, #-7]
   15d44:	e3a03001 	mov	r3, #1
   15d48:	e54b3005 	strb	r3, [fp, #-5]
   15d4c:	ea00000a 	b	15d7c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x160>
   15d50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15d54:	e2833002 	add	r3, r3, #2
   15d58:	e3a02006 	mov	r2, #6
   15d5c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   15d60:	e1a00003 	mov	r0, r3
   15d64:	ebffedd3 	bl	114b8 <memcmp@plt>
   15d68:	e1a03000 	mov	r3, r0
   15d6c:	e3530000 	cmp	r3, #0
   15d70:	1a000001 	bne	15d7c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x160>
   15d74:	e3a03001 	mov	r3, #1
   15d78:	e54b3005 	strb	r3, [fp, #-5]
   15d7c:	e55b3005 	ldrb	r3, [fp, #-5]
   15d80:	e2233001 	eor	r3, r3, #1
   15d84:	e6ef3073 	uxtb	r3, r3
   15d88:	e3530000 	cmp	r3, #0
   15d8c:	0a000004 	beq	15da4 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x188>
   15d90:	e55b3006 	ldrb	r3, [fp, #-6]
   15d94:	e2233001 	eor	r3, r3, #1
   15d98:	e6ef3073 	uxtb	r3, r3
   15d9c:	e3530000 	cmp	r3, #0
   15da0:	1a000101 	bne	161ac <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x590>
   15da4:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15da8:	e3530010 	cmp	r3, #16
   15dac:	1a0000dc 	bne	16124 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x508>
   15db0:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
   15db4:	e3530001 	cmp	r3, #1
   15db8:	1a00007a 	bne	15fa8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x38c>
   15dbc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   15dc0:	e5d33001 	ldrb	r3, [r3, #1]
   15dc4:	e2233001 	eor	r3, r3, #1
   15dc8:	e6ef3073 	uxtb	r3, r3
   15dcc:	e3530000 	cmp	r3, #0
   15dd0:	0a0000f5 	beq	161ac <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x590>
   15dd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15dd8:	e2833017 	add	r3, r3, #23
   15ddc:	e3a02006 	mov	r2, #6
   15de0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   15de4:	e1a00003 	mov	r0, r3
   15de8:	ebffedb2 	bl	114b8 <memcmp@plt>
   15dec:	e1a03000 	mov	r3, r0
   15df0:	e3530000 	cmp	r3, #0
   15df4:	ca0000ec 	bgt	161ac <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x590>
   15df8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15dfc:	e2833017 	add	r3, r3, #23
   15e00:	e2833006 	add	r3, r3, #6
   15e04:	e3a02006 	mov	r2, #6
   15e08:	e1a01003 	mov	r1, r3
   15e0c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   15e10:	ebffeda8 	bl	114b8 <memcmp@plt>
   15e14:	e1a03000 	mov	r3, r0
   15e18:	e3530000 	cmp	r3, #0
   15e1c:	ca0000e2 	bgt	161ac <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x590>
   15e20:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   15e24:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   15e28:	e59f3388 	ldr	r3, [pc, #904]	; 161b8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x59c>
   15e2c:	e14b30ba 	strh	r3, [fp, #-10]
   15e30:	e3a03000 	mov	r3, #0
   15e34:	e50b3010 	str	r3, [fp, #-16]
   15e38:	e51b3010 	ldr	r3, [fp, #-16]
   15e3c:	e3530006 	cmp	r3, #6
   15e40:	8a000008 	bhi	15e68 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x24c>
   15e44:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   15e48:	e51b3010 	ldr	r3, [fp, #-16]
   15e4c:	e0823003 	add	r3, r2, r3
   15e50:	e3e02001 	mvn	r2, #1
   15e54:	e5c32000 	strb	r2, [r3]
   15e58:	e51b3010 	ldr	r3, [fp, #-16]
   15e5c:	e2833001 	add	r3, r3, #1
   15e60:	e50b3010 	str	r3, [fp, #-16]
   15e64:	eafffff3 	b	15e38 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x21c>
   15e68:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   15e6c:	e3e02055 	mvn	r2, #85	; 0x55
   15e70:	e5c32007 	strb	r2, [r3, #7]
   15e74:	e3a03000 	mov	r3, #0
   15e78:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   15e7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15e80:	e3530005 	cmp	r3, #5
   15e84:	8a000026 	bhi	15f24 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x308>
   15e88:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   15e8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15e90:	e0823003 	add	r3, r2, r3
   15e94:	e5d33000 	ldrb	r3, [r3]
   15e98:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   15e9c:	e1a02082 	lsl	r2, r2, #1
   15ea0:	e1e03003 	mvn	r3, r3
   15ea4:	e2033055 	and	r3, r3, #85	; 0x55
   15ea8:	e1e03003 	mvn	r3, r3
   15eac:	e6ef1073 	uxtb	r1, r3
   15eb0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   15eb4:	e0833002 	add	r3, r3, r2
   15eb8:	e1a02001 	mov	r2, r1
   15ebc:	e5c32008 	strb	r2, [r3, #8]
   15ec0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   15ec4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15ec8:	e0823003 	add	r3, r2, r3
   15ecc:	e5d32000 	ldrb	r2, [r3]
   15ed0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15ed4:	e1a03083 	lsl	r3, r3, #1
   15ed8:	e2833001 	add	r3, r3, #1
   15edc:	e3822055 	orr	r2, r2, #85	; 0x55
   15ee0:	e6ef1072 	uxtb	r1, r2
   15ee4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   15ee8:	e0823003 	add	r3, r2, r3
   15eec:	e1a02001 	mov	r2, r1
   15ef0:	e5c32008 	strb	r2, [r3, #8]
   15ef4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   15ef8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15efc:	e0823003 	add	r3, r2, r3
   15f00:	e5d33000 	ldrb	r3, [r3]
   15f04:	e6ff2073 	uxth	r2, r3
   15f08:	e15b30ba 	ldrh	r3, [fp, #-10]
   15f0c:	e0823003 	add	r3, r2, r3
   15f10:	e14b30ba 	strh	r3, [fp, #-10]
   15f14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   15f18:	e2833001 	add	r3, r3, #1
   15f1c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   15f20:	eaffffd5 	b	15e7c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x260>
   15f24:	e15b30ba 	ldrh	r3, [fp, #-10]
   15f28:	e1a03443 	asr	r3, r3, #8
   15f2c:	e6af3073 	sxtb	r3, r3
   15f30:	e1e03003 	mvn	r3, r3
   15f34:	e2033055 	and	r3, r3, #85	; 0x55
   15f38:	e1e03003 	mvn	r3, r3
   15f3c:	e6af3073 	sxtb	r3, r3
   15f40:	e6ef2073 	uxtb	r2, r3
   15f44:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   15f48:	e5c32014 	strb	r2, [r3, #20]
   15f4c:	e15b30ba 	ldrh	r3, [fp, #-10]
   15f50:	e1a03443 	asr	r3, r3, #8
   15f54:	e6af3073 	sxtb	r3, r3
   15f58:	e3833055 	orr	r3, r3, #85	; 0x55
   15f5c:	e6af3073 	sxtb	r3, r3
   15f60:	e6ef2073 	uxtb	r2, r3
   15f64:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   15f68:	e5c32015 	strb	r2, [r3, #21]
   15f6c:	e15b30ba 	ldrh	r3, [fp, #-10]
   15f70:	e6ef3073 	uxtb	r3, r3
   15f74:	e1e03003 	mvn	r3, r3
   15f78:	e2033055 	and	r3, r3, #85	; 0x55
   15f7c:	e1e03003 	mvn	r3, r3
   15f80:	e6ef2073 	uxtb	r2, r3
   15f84:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   15f88:	e5c32016 	strb	r2, [r3, #22]
   15f8c:	e15b30ba 	ldrh	r3, [fp, #-10]
   15f90:	e6ef3073 	uxtb	r3, r3
   15f94:	e3833055 	orr	r3, r3, #85	; 0x55
   15f98:	e6ef2073 	uxtb	r2, r3
   15f9c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   15fa0:	e5c32017 	strb	r2, [r3, #23]
   15fa4:	ea000080 	b	161ac <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x590>
   15fa8:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
   15fac:	e3530003 	cmp	r3, #3
   15fb0:	1a00002e 	bne	16070 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x454>
   15fb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   15fb8:	e5d33016 	ldrb	r3, [r3, #22]
   15fbc:	e3530000 	cmp	r3, #0
   15fc0:	1a000076 	bne	161a0 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x584>
   15fc4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   15fc8:	e3a02000 	mov	r2, #0
   15fcc:	e5c32001 	strb	r2, [r3, #1]
   15fd0:	e55b3006 	ldrb	r3, [fp, #-6]
   15fd4:	e2233001 	eor	r3, r3, #1
   15fd8:	e6ef3073 	uxtb	r3, r3
   15fdc:	e3530000 	cmp	r3, #0
   15fe0:	0a000071 	beq	161ac <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x590>
   15fe4:	e55b3005 	ldrb	r3, [fp, #-5]
   15fe8:	e3530000 	cmp	r3, #0
   15fec:	0a00006e 	beq	161ac <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x590>
   15ff0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   15ff4:	e5933008 	ldr	r3, [r3, #8]
   15ff8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
   15ffc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   16000:	e3a02002 	mov	r2, #2
   16004:	e5c32017 	strb	r2, [r3, #23]
   16008:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1600c:	e3a02000 	mov	r2, #0
   16010:	e5c32018 	strb	r2, [r3, #24]
   16014:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   16018:	e3a02000 	mov	r2, #0
   1601c:	e5c32019 	strb	r2, [r3, #25]
   16020:	ebfffb76 	bl	14e00 <RDMSubDevices::Get()>
   16024:	e1a03000 	mov	r3, r0
   16028:	e1a00003 	mov	r0, r3
   1602c:	ebfff7bf 	bl	13f30 <RDMSubDevices::GetCount() const>
   16030:	e1a03000 	mov	r3, r0
   16034:	e3530000 	cmp	r3, #0
   16038:	13a03001 	movne	r3, #1
   1603c:	03a03000 	moveq	r3, #0
   16040:	e6ef3073 	uxtb	r3, r3
   16044:	e3530000 	cmp	r3, #0
   16048:	0a000005 	beq	16064 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x448>
   1604c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   16050:	e5d33019 	ldrb	r3, [r3, #25]
   16054:	e3833002 	orr	r3, r3, #2
   16058:	e6ef2073 	uxtb	r2, r3
   1605c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   16060:	e5c32019 	strb	r2, [r3, #25]
   16064:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
   16068:	ebfffec8 	bl	15b90 <RDMHandler::RespondMessageAck()>
   1606c:	ea00004e 	b	161ac <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x590>
   16070:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
   16074:	e3530002 	cmp	r3, #2
   16078:	1a00004b 	bne	161ac <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x590>
   1607c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16080:	e5d33016 	ldrb	r3, [r3, #22]
   16084:	e3530000 	cmp	r3, #0
   16088:	1a000046 	bne	161a8 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x58c>
   1608c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   16090:	e3a02001 	mov	r2, #1
   16094:	e5c32001 	strb	r2, [r3, #1]
   16098:	e55b3005 	ldrb	r3, [fp, #-5]
   1609c:	e3530000 	cmp	r3, #0
   160a0:	0a000041 	beq	161ac <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x590>
   160a4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   160a8:	e5933008 	ldr	r3, [r3, #8]
   160ac:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   160b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   160b4:	e3a02002 	mov	r2, #2
   160b8:	e5c32017 	strb	r2, [r3, #23]
   160bc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   160c0:	e3a02000 	mov	r2, #0
   160c4:	e5c32018 	strb	r2, [r3, #24]
   160c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   160cc:	e3a02000 	mov	r2, #0
   160d0:	e5c32019 	strb	r2, [r3, #25]
   160d4:	ebfffb49 	bl	14e00 <RDMSubDevices::Get()>
   160d8:	e1a03000 	mov	r3, r0
   160dc:	e1a00003 	mov	r0, r3
   160e0:	ebfff792 	bl	13f30 <RDMSubDevices::GetCount() const>
   160e4:	e1a03000 	mov	r3, r0
   160e8:	e3530000 	cmp	r3, #0
   160ec:	13a03001 	movne	r3, #1
   160f0:	03a03000 	moveq	r3, #0
   160f4:	e6ef3073 	uxtb	r3, r3
   160f8:	e3530000 	cmp	r3, #0
   160fc:	0a000005 	beq	16118 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x4fc>
   16100:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   16104:	e5d33019 	ldrb	r3, [r3, #25]
   16108:	e3833002 	orr	r3, r3, #2
   1610c:	e6ef2073 	uxtb	r2, r3
   16110:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   16114:	e5c32019 	strb	r2, [r3, #25]
   16118:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
   1611c:	ebfffe9b 	bl	15b90 <RDMHandler::RespondMessageAck()>
   16120:	ea000021 	b	161ac <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x590>
   16124:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16128:	e5d33011 	ldrb	r3, [r3, #17]
   1612c:	e6ff3073 	uxth	r3, r3
   16130:	e1a03403 	lsl	r3, r3, #8
   16134:	e6ff2073 	uxth	r2, r3
   16138:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1613c:	e5d33012 	ldrb	r3, [r3, #18]
   16140:	e6ff3073 	uxth	r3, r3
   16144:	e0823003 	add	r3, r2, r3
   16148:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
   1614c:	e55b3006 	ldrb	r3, [fp, #-6]
   16150:	e3530000 	cmp	r3, #0
   16154:	1a000002 	bne	16164 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x548>
   16158:	e55b3007 	ldrb	r3, [fp, #-7]
   1615c:	e3530000 	cmp	r3, #0
   16160:	0a000001 	beq	1616c <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x550>
   16164:	e3a01001 	mov	r1, #1
   16168:	ea000000 	b	16170 <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x554>
   1616c:	e3a01000 	mov	r1, #0
   16170:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16174:	e5d33016 	ldrb	r3, [r3, #22]
   16178:	e15bc1bc 	ldrh	ip, [fp, #-28]	; 0xffffffe4
   1617c:	e55b0019 	ldrb	r0, [fp, #-25]	; 0xffffffe7
   16180:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
   16184:	e58d2004 	str	r2, [sp, #4]
   16188:	e58d3000 	str	r3, [sp]
   1618c:	e1a0300c 	mov	r3, ip
   16190:	e1a02000 	mov	r2, r0
   16194:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
   16198:	eb000007 	bl	161bc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>
   1619c:	ea000002 	b	161ac <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x590>
   161a0:	e1a00000 	nop			; (mov r0, r0)
   161a4:	ea000000 	b	161ac <RDMHandler::HandleData(unsigned char const*, unsigned char*)+0x590>
   161a8:	e1a00000 	nop			; (mov r0, r0)
   161ac:	e24bd004 	sub	sp, fp, #4
   161b0:	e8bd8800 	pop	{fp, pc}
   161b4:	00044908 	.word	0x00044908
   161b8:	000005fa 	.word	0x000005fa

000161bc <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)>:
   161bc:	e92d4800 	push	{fp, lr}
   161c0:	e28db004 	add	fp, sp, #4
   161c4:	e24dd018 	sub	sp, sp, #24
   161c8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   161cc:	e1a00001 	mov	r0, r1
   161d0:	e1a01002 	mov	r1, r2
   161d4:	e1a02003 	mov	r2, r3
   161d8:	e1a03000 	mov	r3, r0
   161dc:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   161e0:	e1a03001 	mov	r3, r1
   161e4:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
   161e8:	e1a03002 	mov	r3, r2
   161ec:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
   161f0:	e3a03000 	mov	r3, #0
   161f4:	e50b3008 	str	r3, [fp, #-8]
   161f8:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
   161fc:	e3530020 	cmp	r3, #32
   16200:	0a000006 	beq	16220 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x64>
   16204:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
   16208:	e3530030 	cmp	r3, #48	; 0x30
   1620c:	0a000003 	beq	16220 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x64>
   16210:	e3a01005 	mov	r1, #5
   16214:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   16218:	ebfffe71 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   1621c:	ea0000ca 	b	1654c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x390>
   16220:	ebfffaf6 	bl	14e00 <RDMSubDevices::Get()>
   16224:	e1a03000 	mov	r3, r0
   16228:	e1a00003 	mov	r0, r3
   1622c:	ebfff73f 	bl	13f30 <RDMSubDevices::GetCount() const>
   16230:	e1a03000 	mov	r3, r0
   16234:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   16238:	e1db20b8 	ldrh	r2, [fp, #8]
   1623c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   16240:	e1520003 	cmp	r2, r3
   16244:	9a000007 	bls	16268 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xac>
   16248:	e1db30b8 	ldrh	r3, [fp, #8]
   1624c:	e59f2300 	ldr	r2, [pc, #768]	; 16554 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x398>
   16250:	e1530002 	cmp	r3, r2
   16254:	0a000003 	beq	16268 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xac>
   16258:	e3a01009 	mov	r1, #9
   1625c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   16260:	ebfffe5f 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   16264:	ea0000b8 	b	1654c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x390>
   16268:	e3a03000 	mov	r3, #0
   1626c:	e50b3010 	str	r3, [fp, #-16]
   16270:	e51b3010 	ldr	r3, [fp, #-16]
   16274:	e353001b 	cmp	r3, #27
   16278:	8a00002a 	bhi	16328 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x16c>
   1627c:	e59f12d4 	ldr	r1, [pc, #724]	; 16558 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x39c>
   16280:	e51b2010 	ldr	r2, [fp, #-16]
   16284:	e1a03002 	mov	r3, r2
   16288:	e1a03083 	lsl	r3, r3, #1
   1628c:	e0833002 	add	r3, r3, r2
   16290:	e1a03183 	lsl	r3, r3, #3
   16294:	e0813003 	add	r3, r1, r3
   16298:	e1d330b0 	ldrh	r3, [r3]
   1629c:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
   162a0:	e1520003 	cmp	r2, r3
   162a4:	1a00001b 	bne	16318 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x15c>
   162a8:	e51b2010 	ldr	r2, [fp, #-16]
   162ac:	e1a03002 	mov	r3, r2
   162b0:	e1a03083 	lsl	r3, r3, #1
   162b4:	e0833002 	add	r3, r3, r2
   162b8:	e1a03183 	lsl	r3, r3, #3
   162bc:	e59f2294 	ldr	r2, [pc, #660]	; 16558 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x39c>
   162c0:	e0833002 	add	r3, r3, r2
   162c4:	e50b3008 	str	r3, [fp, #-8]
   162c8:	e59f1288 	ldr	r1, [pc, #648]	; 16558 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x39c>
   162cc:	e51b2010 	ldr	r2, [fp, #-16]
   162d0:	e1a03002 	mov	r3, r2
   162d4:	e1a03083 	lsl	r3, r3, #1
   162d8:	e0833002 	add	r3, r3, r2
   162dc:	e1a03183 	lsl	r3, r3, #3
   162e0:	e0813003 	add	r3, r1, r3
   162e4:	e2833016 	add	r3, r3, #22
   162e8:	e5d33000 	ldrb	r3, [r3]
   162ec:	e54b3009 	strb	r3, [fp, #-9]
   162f0:	e59f1260 	ldr	r1, [pc, #608]	; 16558 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x39c>
   162f4:	e51b2010 	ldr	r2, [fp, #-16]
   162f8:	e1a03002 	mov	r3, r2
   162fc:	e1a03083 	lsl	r3, r3, #1
   16300:	e0833002 	add	r3, r3, r2
   16304:	e1a03183 	lsl	r3, r3, #3
   16308:	e0813003 	add	r3, r1, r3
   1630c:	e2833017 	add	r3, r3, #23
   16310:	e5d33000 	ldrb	r3, [r3]
   16314:	e54b300a 	strb	r3, [fp, #-10]
   16318:	e51b3010 	ldr	r3, [fp, #-16]
   1631c:	e2833001 	add	r3, r3, #1
   16320:	e50b3010 	str	r3, [fp, #-16]
   16324:	eaffffd1 	b	16270 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0xb4>
   16328:	e51b3008 	ldr	r3, [fp, #-8]
   1632c:	e3530000 	cmp	r3, #0
   16330:	1a000003 	bne	16344 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x188>
   16334:	e3a01000 	mov	r1, #0
   16338:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1633c:	ebfffe28 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   16340:	ea000081 	b	1654c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x390>
   16344:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16348:	e5d33000 	ldrb	r3, [r3]
   1634c:	e3530000 	cmp	r3, #0
   16350:	0a000008 	beq	16378 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1bc>
   16354:	e55b3009 	ldrb	r3, [fp, #-9]
   16358:	e2233001 	eor	r3, r3, #1
   1635c:	e6ef3073 	uxtb	r3, r3
   16360:	e3530000 	cmp	r3, #0
   16364:	0a00000c 	beq	1639c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e0>
   16368:	e3a01000 	mov	r1, #0
   1636c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   16370:	ebfffe1b 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   16374:	ea000074 	b	1654c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x390>
   16378:	e55b300a 	ldrb	r3, [fp, #-10]
   1637c:	e2233001 	eor	r3, r3, #1
   16380:	e6ef3073 	uxtb	r3, r3
   16384:	e3530000 	cmp	r3, #0
   16388:	0a000003 	beq	1639c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x1e0>
   1638c:	e3a01000 	mov	r1, #0
   16390:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   16394:	ebfffe12 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   16398:	ea00006b 	b	1654c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x390>
   1639c:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
   163a0:	e3530020 	cmp	r3, #32
   163a4:	1a00003d 	bne	164a0 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2e4>
   163a8:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   163ac:	e3530000 	cmp	r3, #0
   163b0:	1a000064 	bne	16548 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x38c>
   163b4:	e1db30b8 	ldrh	r3, [fp, #8]
   163b8:	e59f2194 	ldr	r2, [pc, #404]	; 16554 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x398>
   163bc:	e1530002 	cmp	r3, r2
   163c0:	1a000003 	bne	163d4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x218>
   163c4:	e3a01009 	mov	r1, #9
   163c8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   163cc:	ebfffe04 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   163d0:	ea00005d 	b	1654c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x390>
   163d4:	e51b3008 	ldr	r3, [fp, #-8]
   163d8:	e5933004 	ldr	r3, [r3, #4]
   163dc:	e3530000 	cmp	r3, #0
   163e0:	1a000008 	bne	16408 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x24c>
   163e4:	e51b3008 	ldr	r3, [fp, #-8]
   163e8:	e5933008 	ldr	r3, [r3, #8]
   163ec:	e2033001 	and	r3, r3, #1
   163f0:	e3530000 	cmp	r3, #0
   163f4:	1a000003 	bne	16408 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x24c>
   163f8:	e3a01005 	mov	r1, #5
   163fc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   16400:	ebfffdf7 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   16404:	ea000050 	b	1654c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x390>
   16408:	e51b3008 	ldr	r3, [fp, #-8]
   1640c:	e5d33014 	ldrb	r3, [r3, #20]
   16410:	e5db2004 	ldrb	r2, [fp, #4]
   16414:	e1520003 	cmp	r2, r3
   16418:	0a000003 	beq	1642c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x270>
   1641c:	e3a01001 	mov	r1, #1
   16420:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   16424:	ebfffdee 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   16428:	ea000047 	b	1654c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x390>
   1642c:	e51b3008 	ldr	r3, [fp, #-8]
   16430:	e5933008 	ldr	r3, [r3, #8]
   16434:	e1a030c3 	asr	r3, r3, #1
   16438:	e1a02003 	mov	r2, r3
   1643c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16440:	e0830002 	add	r0, r3, r2
   16444:	e51b3008 	ldr	r3, [fp, #-8]
   16448:	e5933008 	ldr	r3, [r3, #8]
   1644c:	e2033001 	and	r3, r3, #1
   16450:	e3530000 	cmp	r3, #0
   16454:	0a00000b 	beq	16488 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2cc>
   16458:	e51b3008 	ldr	r3, [fp, #-8]
   1645c:	e5933008 	ldr	r3, [r3, #8]
   16460:	e1a030c3 	asr	r3, r3, #1
   16464:	e1a02003 	mov	r2, r3
   16468:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1646c:	e0833002 	add	r3, r3, r2
   16470:	e5933000 	ldr	r3, [r3]
   16474:	e51b2008 	ldr	r2, [fp, #-8]
   16478:	e5922004 	ldr	r2, [r2, #4]
   1647c:	e0833002 	add	r3, r3, r2
   16480:	e5933000 	ldr	r3, [r3]
   16484:	ea000001 	b	16490 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x2d4>
   16488:	e51b3008 	ldr	r3, [fp, #-8]
   1648c:	e5933004 	ldr	r3, [r3, #4]
   16490:	e1db20b8 	ldrh	r2, [fp, #8]
   16494:	e1a01002 	mov	r1, r2
   16498:	e12fff33 	blx	r3
   1649c:	ea00002a 	b	1654c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x390>
   164a0:	e51b3008 	ldr	r3, [fp, #-8]
   164a4:	e593300c 	ldr	r3, [r3, #12]
   164a8:	e3530000 	cmp	r3, #0
   164ac:	1a000008 	bne	164d4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x318>
   164b0:	e51b3008 	ldr	r3, [fp, #-8]
   164b4:	e5933010 	ldr	r3, [r3, #16]
   164b8:	e2033001 	and	r3, r3, #1
   164bc:	e3530000 	cmp	r3, #0
   164c0:	1a000003 	bne	164d4 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x318>
   164c4:	e3a01005 	mov	r1, #5
   164c8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   164cc:	ebfffdc4 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   164d0:	ea00001d 	b	1654c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x390>
   164d4:	e51b3008 	ldr	r3, [fp, #-8]
   164d8:	e5933010 	ldr	r3, [r3, #16]
   164dc:	e1a030c3 	asr	r3, r3, #1
   164e0:	e1a02003 	mov	r2, r3
   164e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   164e8:	e0830002 	add	r0, r3, r2
   164ec:	e51b3008 	ldr	r3, [fp, #-8]
   164f0:	e5933010 	ldr	r3, [r3, #16]
   164f4:	e2033001 	and	r3, r3, #1
   164f8:	e3530000 	cmp	r3, #0
   164fc:	0a00000b 	beq	16530 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x374>
   16500:	e51b3008 	ldr	r3, [fp, #-8]
   16504:	e5933010 	ldr	r3, [r3, #16]
   16508:	e1a030c3 	asr	r3, r3, #1
   1650c:	e1a02003 	mov	r2, r3
   16510:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16514:	e0833002 	add	r3, r3, r2
   16518:	e5933000 	ldr	r3, [r3]
   1651c:	e51b2008 	ldr	r2, [fp, #-8]
   16520:	e592200c 	ldr	r2, [r2, #12]
   16524:	e0833002 	add	r3, r3, r2
   16528:	e5933000 	ldr	r3, [r3]
   1652c:	ea000001 	b	16538 <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x37c>
   16530:	e51b3008 	ldr	r3, [fp, #-8]
   16534:	e593300c 	ldr	r3, [r3, #12]
   16538:	e1db20b8 	ldrh	r2, [fp, #8]
   1653c:	e55b1019 	ldrb	r1, [fp, #-25]	; 0xffffffe7
   16540:	e12fff33 	blx	r3
   16544:	ea000000 	b	1654c <RDMHandler::Handlers(bool, unsigned char, unsigned short, unsigned char, unsigned short)+0x390>
   16548:	e1a00000 	nop			; (mov r0, r0)
   1654c:	e24bd004 	sub	sp, fp, #4
   16550:	e8bd8800 	pop	{fp, pc}
   16554:	0000ffff 	.word	0x0000ffff
   16558:	00044974 	.word	0x00044974

0001655c <RDMHandler::GetSupportedParameters(unsigned short)>:
   1655c:	e92d4800 	push	{fp, lr}
   16560:	e28db004 	add	fp, sp, #4
   16564:	e24dd028 	sub	sp, sp, #40	; 0x28
   16568:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   1656c:	e1a03001 	mov	r3, r1
   16570:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
   16574:	e3a03000 	mov	r3, #0
   16578:	e54b3005 	strb	r3, [fp, #-5]
   1657c:	e3a03000 	mov	r3, #0
   16580:	e50b3010 	str	r3, [fp, #-16]
   16584:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
   16588:	e3530000 	cmp	r3, #0
   1658c:	0a000004 	beq	165a4 <RDMHandler::GetSupportedParameters(unsigned short)+0x48>
   16590:	e59f31a0 	ldr	r3, [pc, #416]	; 16738 <RDMHandler::GetSupportedParameters(unsigned short)+0x1dc>
   16594:	e50b300c 	str	r3, [fp, #-12]
   16598:	e3a03008 	mov	r3, #8
   1659c:	e50b3010 	str	r3, [fp, #-16]
   165a0:	ea000003 	b	165b4 <RDMHandler::GetSupportedParameters(unsigned short)+0x58>
   165a4:	e59f3190 	ldr	r3, [pc, #400]	; 1673c <RDMHandler::GetSupportedParameters(unsigned short)+0x1e0>
   165a8:	e50b300c 	str	r3, [fp, #-12]
   165ac:	e3a0301c 	mov	r3, #28
   165b0:	e50b3010 	str	r3, [fp, #-16]
   165b4:	e3a03000 	mov	r3, #0
   165b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   165bc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   165c0:	e51b3010 	ldr	r3, [fp, #-16]
   165c4:	e1520003 	cmp	r2, r3
   165c8:	2a000011 	bcs	16614 <RDMHandler::GetSupportedParameters(unsigned short)+0xb8>
   165cc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   165d0:	e1a03002 	mov	r3, r2
   165d4:	e1a03083 	lsl	r3, r3, #1
   165d8:	e0833002 	add	r3, r3, r2
   165dc:	e1a03183 	lsl	r3, r3, #3
   165e0:	e1a02003 	mov	r2, r3
   165e4:	e51b300c 	ldr	r3, [fp, #-12]
   165e8:	e0833002 	add	r3, r3, r2
   165ec:	e5d33015 	ldrb	r3, [r3, #21]
   165f0:	e3530000 	cmp	r3, #0
   165f4:	0a000002 	beq	16604 <RDMHandler::GetSupportedParameters(unsigned short)+0xa8>
   165f8:	e55b3005 	ldrb	r3, [fp, #-5]
   165fc:	e2833001 	add	r3, r3, #1
   16600:	e54b3005 	strb	r3, [fp, #-5]
   16604:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   16608:	e2833001 	add	r3, r3, #1
   1660c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   16610:	eaffffe9 	b	165bc <RDMHandler::GetSupportedParameters(unsigned short)+0x60>
   16614:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   16618:	e5933008 	ldr	r3, [r3, #8]
   1661c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   16620:	e55b3005 	ldrb	r3, [fp, #-5]
   16624:	e1a03083 	lsl	r3, r3, #1
   16628:	e6ef2073 	uxtb	r2, r3
   1662c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   16630:	e5c32017 	strb	r2, [r3, #23]
   16634:	e3a03000 	mov	r3, #0
   16638:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   1663c:	e3a03000 	mov	r3, #0
   16640:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   16644:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   16648:	e51b3010 	ldr	r3, [fp, #-16]
   1664c:	e1520003 	cmp	r2, r3
   16650:	2a000033 	bcs	16724 <RDMHandler::GetSupportedParameters(unsigned short)+0x1c8>
   16654:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   16658:	e1a03002 	mov	r3, r2
   1665c:	e1a03083 	lsl	r3, r3, #1
   16660:	e0833002 	add	r3, r3, r2
   16664:	e1a03183 	lsl	r3, r3, #3
   16668:	e1a02003 	mov	r2, r3
   1666c:	e51b300c 	ldr	r3, [fp, #-12]
   16670:	e0833002 	add	r3, r3, r2
   16674:	e5d33015 	ldrb	r3, [r3, #21]
   16678:	e3530000 	cmp	r3, #0
   1667c:	0a000024 	beq	16714 <RDMHandler::GetSupportedParameters(unsigned short)+0x1b8>
   16680:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   16684:	e1a03002 	mov	r3, r2
   16688:	e1a03083 	lsl	r3, r3, #1
   1668c:	e0833002 	add	r3, r3, r2
   16690:	e1a03183 	lsl	r3, r3, #3
   16694:	e1a02003 	mov	r2, r3
   16698:	e51b300c 	ldr	r3, [fp, #-12]
   1669c:	e0833002 	add	r3, r3, r2
   166a0:	e1d330b0 	ldrh	r3, [r3]
   166a4:	e1a02443 	asr	r2, r3, #8
   166a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   166ac:	e1a03083 	lsl	r3, r3, #1
   166b0:	e6ef1072 	uxtb	r1, r2
   166b4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   166b8:	e0823003 	add	r3, r2, r3
   166bc:	e1a02001 	mov	r2, r1
   166c0:	e5c32018 	strb	r2, [r3, #24]
   166c4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   166c8:	e1a03002 	mov	r3, r2
   166cc:	e1a03083 	lsl	r3, r3, #1
   166d0:	e0833002 	add	r3, r3, r2
   166d4:	e1a03183 	lsl	r3, r3, #3
   166d8:	e1a02003 	mov	r2, r3
   166dc:	e51b300c 	ldr	r3, [fp, #-12]
   166e0:	e0833002 	add	r3, r3, r2
   166e4:	e1d320b0 	ldrh	r2, [r3]
   166e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   166ec:	e1a03083 	lsl	r3, r3, #1
   166f0:	e2833001 	add	r3, r3, #1
   166f4:	e6ef1072 	uxtb	r1, r2
   166f8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   166fc:	e0823003 	add	r3, r2, r3
   16700:	e1a02001 	mov	r2, r1
   16704:	e5c32018 	strb	r2, [r3, #24]
   16708:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1670c:	e2833001 	add	r3, r3, #1
   16710:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   16714:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   16718:	e2833001 	add	r3, r3, #1
   1671c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   16720:	eaffffc7 	b	16644 <RDMHandler::GetSupportedParameters(unsigned short)+0xe8>
   16724:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   16728:	ebfffd18 	bl	15b90 <RDMHandler::RespondMessageAck()>
   1672c:	e1a00000 	nop			; (mov r0, r0)
   16730:	e24bd004 	sub	sp, fp, #4
   16734:	e8bd8800 	pop	{fp, pc}
   16738:	00044c14 	.word	0x00044c14
   1673c:	00044974 	.word	0x00044974

00016740 <RDMHandler::GetDeviceInfo(unsigned short)>:
   16740:	e92d4800 	push	{fp, lr}
   16744:	e28db004 	add	fp, sp, #4
   16748:	e24dd018 	sub	sp, sp, #24
   1674c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   16750:	e1a03001 	mov	r3, r1
   16754:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
   16758:	ebfffbb6 	bl	15638 <RDMDeviceResponder::Get()>
   1675c:	e1a02000 	mov	r2, r0
   16760:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
   16764:	e1a01003 	mov	r1, r3
   16768:	e1a00002 	mov	r0, r2
   1676c:	ebfff5f9 	bl	13f58 <RDMDeviceResponder::GetDeviceInfo(unsigned short)>
   16770:	e50b0008 	str	r0, [fp, #-8]
   16774:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16778:	e5933008 	ldr	r3, [r3, #8]
   1677c:	e50b300c 	str	r3, [fp, #-12]
   16780:	e51b300c 	ldr	r3, [fp, #-12]
   16784:	e2833018 	add	r3, r3, #24
   16788:	e50b3010 	str	r3, [fp, #-16]
   1678c:	e51b300c 	ldr	r3, [fp, #-12]
   16790:	e3a02013 	mov	r2, #19
   16794:	e5c32017 	strb	r2, [r3, #23]
   16798:	e3a02013 	mov	r2, #19
   1679c:	e51b1008 	ldr	r1, [fp, #-8]
   167a0:	e51b0010 	ldr	r0, [fp, #-16]
   167a4:	ebffeb16 	bl	11404 <memcpy@plt>
   167a8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   167ac:	ebfffcf7 	bl	15b90 <RDMHandler::RespondMessageAck()>
   167b0:	e1a00000 	nop			; (mov r0, r0)
   167b4:	e24bd004 	sub	sp, fp, #4
   167b8:	e8bd8800 	pop	{fp, pc}

000167bc <RDMHandler::GetFactoryDefaults(unsigned short)>:
   167bc:	e92d4800 	push	{fp, lr}
   167c0:	e28db004 	add	fp, sp, #4
   167c4:	e24dd010 	sub	sp, sp, #16
   167c8:	e50b0010 	str	r0, [fp, #-16]
   167cc:	e1a03001 	mov	r3, r1
   167d0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   167d4:	e51b3010 	ldr	r3, [fp, #-16]
   167d8:	e5933008 	ldr	r3, [r3, #8]
   167dc:	e50b3008 	str	r3, [fp, #-8]
   167e0:	e51b3008 	ldr	r3, [fp, #-8]
   167e4:	e3a02001 	mov	r2, #1
   167e8:	e5c32017 	strb	r2, [r3, #23]
   167ec:	ebfffb91 	bl	15638 <RDMDeviceResponder::Get()>
   167f0:	e1a03000 	mov	r3, r0
   167f4:	e1a00003 	mov	r0, r3
   167f8:	ebfff9f0 	bl	14fc0 <RDMDeviceResponder::GetFactoryDefaults()>
   167fc:	e1a03000 	mov	r3, r0
   16800:	e3530000 	cmp	r3, #0
   16804:	0a000001 	beq	16810 <RDMHandler::GetFactoryDefaults(unsigned short)+0x54>
   16808:	e3a02001 	mov	r2, #1
   1680c:	ea000000 	b	16814 <RDMHandler::GetFactoryDefaults(unsigned short)+0x58>
   16810:	e3a02000 	mov	r2, #0
   16814:	e51b3008 	ldr	r3, [fp, #-8]
   16818:	e5c32018 	strb	r2, [r3, #24]
   1681c:	e51b0010 	ldr	r0, [fp, #-16]
   16820:	ebfffcda 	bl	15b90 <RDMHandler::RespondMessageAck()>
   16824:	e1a00000 	nop			; (mov r0, r0)
   16828:	e24bd004 	sub	sp, fp, #4
   1682c:	e8bd8800 	pop	{fp, pc}

00016830 <RDMHandler::SetFactoryDefaults(bool, unsigned short)>:
   16830:	e92d4800 	push	{fp, lr}
   16834:	e28db004 	add	fp, sp, #4
   16838:	e24dd010 	sub	sp, sp, #16
   1683c:	e50b0010 	str	r0, [fp, #-16]
   16840:	e1a03001 	mov	r3, r1
   16844:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   16848:	e1a03002 	mov	r3, r2
   1684c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
   16850:	e51b3010 	ldr	r3, [fp, #-16]
   16854:	e5933004 	ldr	r3, [r3, #4]
   16858:	e50b3008 	str	r3, [fp, #-8]
   1685c:	e51b3008 	ldr	r3, [fp, #-8]
   16860:	e5d33016 	ldrb	r3, [r3, #22]
   16864:	e3530000 	cmp	r3, #0
   16868:	0a000003 	beq	1687c <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x4c>
   1686c:	e3a01001 	mov	r1, #1
   16870:	e51b0010 	ldr	r0, [fp, #-16]
   16874:	ebfffcda 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   16878:	ea000010 	b	168c0 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x90>
   1687c:	ebfffb6d 	bl	15638 <RDMDeviceResponder::Get()>
   16880:	e1a03000 	mov	r3, r0
   16884:	e1a00003 	mov	r0, r3
   16888:	ebfff9a2 	bl	14f18 <RDMDeviceResponder::SetFactoryDefaults()>
   1688c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   16890:	e3530000 	cmp	r3, #0
   16894:	1a000008 	bne	168bc <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x8c>
   16898:	e51b3010 	ldr	r3, [fp, #-16]
   1689c:	e5933008 	ldr	r3, [r3, #8]
   168a0:	e50b300c 	str	r3, [fp, #-12]
   168a4:	e51b300c 	ldr	r3, [fp, #-12]
   168a8:	e3a02000 	mov	r2, #0
   168ac:	e5c32017 	strb	r2, [r3, #23]
   168b0:	e51b0010 	ldr	r0, [fp, #-16]
   168b4:	ebfffcb5 	bl	15b90 <RDMHandler::RespondMessageAck()>
   168b8:	ea000000 	b	168c0 <RDMHandler::SetFactoryDefaults(bool, unsigned short)+0x90>
   168bc:	e1a00000 	nop			; (mov r0, r0)
   168c0:	e24bd004 	sub	sp, fp, #4
   168c4:	e8bd8800 	pop	{fp, pc}

000168c8 <RDMHandler::GetProductDetailIdList(unsigned short)>:
   168c8:	e92d4800 	push	{fp, lr}
   168cc:	e28db004 	add	fp, sp, #4
   168d0:	e24dd010 	sub	sp, sp, #16
   168d4:	e50b0010 	str	r0, [fp, #-16]
   168d8:	e1a03001 	mov	r3, r1
   168dc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   168e0:	ebfffb54 	bl	15638 <RDMDeviceResponder::Get()>
   168e4:	e1a03000 	mov	r3, r0
   168e8:	e2833004 	add	r3, r3, #4
   168ec:	e1a00003 	mov	r0, r3
   168f0:	ebfff8af 	bl	14bb4 <RDMDevice::GetProductDetail() const>
   168f4:	e1a03000 	mov	r3, r0
   168f8:	e14b30b6 	strh	r3, [fp, #-6]
   168fc:	e51b3010 	ldr	r3, [fp, #-16]
   16900:	e5933008 	ldr	r3, [r3, #8]
   16904:	e50b300c 	str	r3, [fp, #-12]
   16908:	e51b300c 	ldr	r3, [fp, #-12]
   1690c:	e3a02002 	mov	r2, #2
   16910:	e5c32017 	strb	r2, [r3, #23]
   16914:	e15b30b6 	ldrh	r3, [fp, #-6]
   16918:	e1a03443 	asr	r3, r3, #8
   1691c:	e6ef2073 	uxtb	r2, r3
   16920:	e51b300c 	ldr	r3, [fp, #-12]
   16924:	e5c32018 	strb	r2, [r3, #24]
   16928:	e15b30b6 	ldrh	r3, [fp, #-6]
   1692c:	e6ef2073 	uxtb	r2, r3
   16930:	e51b300c 	ldr	r3, [fp, #-12]
   16934:	e5c32019 	strb	r2, [r3, #25]
   16938:	e51b0010 	ldr	r0, [fp, #-16]
   1693c:	ebfffc93 	bl	15b90 <RDMHandler::RespondMessageAck()>
   16940:	e1a00000 	nop			; (mov r0, r0)
   16944:	e24bd004 	sub	sp, fp, #4
   16948:	e8bd8800 	pop	{fp, pc}

0001694c <RDMHandler::GetDeviceModelDescription(unsigned short)>:
   1694c:	e92d4800 	push	{fp, lr}
   16950:	e28db004 	add	fp, sp, #4
   16954:	e24dd010 	sub	sp, sp, #16
   16958:	e50b0010 	str	r0, [fp, #-16]
   1695c:	e1a03001 	mov	r3, r1
   16960:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   16964:	ebffeb25 	bl	11600 <Hardware::Get()>
   16968:	e1a02000 	mov	r2, r0
   1696c:	e24b3009 	sub	r3, fp, #9
   16970:	e1a01003 	mov	r1, r3
   16974:	e1a00002 	mov	r0, r2
   16978:	eb00a496 	bl	3fbd8 <Hardware::GetBoardName(unsigned char&)>
   1697c:	e50b0008 	str	r0, [fp, #-8]
   16980:	e55b3009 	ldrb	r3, [fp, #-9]
   16984:	e1a02003 	mov	r2, r3
   16988:	e51b1008 	ldr	r1, [fp, #-8]
   1698c:	e51b0010 	ldr	r0, [fp, #-16]
   16990:	ebfffbb2 	bl	15860 <RDMHandler::HandleString(char const*, unsigned int)>
   16994:	e51b0010 	ldr	r0, [fp, #-16]
   16998:	ebfffc7c 	bl	15b90 <RDMHandler::RespondMessageAck()>
   1699c:	e1a00000 	nop			; (mov r0, r0)
   169a0:	e24bd004 	sub	sp, fp, #4
   169a4:	e8bd8800 	pop	{fp, pc}

000169a8 <RDMHandler::GetManufacturerLabel(unsigned short)>:
   169a8:	e92d4800 	push	{fp, lr}
   169ac:	e28db004 	add	fp, sp, #4
   169b0:	e24dd010 	sub	sp, sp, #16
   169b4:	e50b0010 	str	r0, [fp, #-16]
   169b8:	e1a03001 	mov	r3, r1
   169bc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   169c0:	ebfffb1c 	bl	15638 <RDMDeviceResponder::Get()>
   169c4:	e1a03000 	mov	r3, r0
   169c8:	e2833004 	add	r3, r3, #4
   169cc:	e24b200c 	sub	r2, fp, #12
   169d0:	e1a01002 	mov	r1, r2
   169d4:	e1a00003 	mov	r0, r3
   169d8:	ebfff853 	bl	14b2c <RDMDevice::GetManufacturerName(TRDMDeviceInfoData*)>
   169dc:	e51b300c 	ldr	r3, [fp, #-12]
   169e0:	e55b2008 	ldrb	r2, [fp, #-8]
   169e4:	e1a01003 	mov	r1, r3
   169e8:	e51b0010 	ldr	r0, [fp, #-16]
   169ec:	ebfffb9b 	bl	15860 <RDMHandler::HandleString(char const*, unsigned int)>
   169f0:	e51b0010 	ldr	r0, [fp, #-16]
   169f4:	ebfffc65 	bl	15b90 <RDMHandler::RespondMessageAck()>
   169f8:	e1a00000 	nop			; (mov r0, r0)
   169fc:	e24bd004 	sub	sp, fp, #4
   16a00:	e8bd8800 	pop	{fp, pc}

00016a04 <RDMHandler::GetDeviceLabel(unsigned short)>:
   16a04:	e92d4800 	push	{fp, lr}
   16a08:	e28db004 	add	fp, sp, #4
   16a0c:	e24dd010 	sub	sp, sp, #16
   16a10:	e50b0010 	str	r0, [fp, #-16]
   16a14:	e1a03001 	mov	r3, r1
   16a18:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   16a1c:	ebfffb05 	bl	15638 <RDMDeviceResponder::Get()>
   16a20:	e24b200c 	sub	r2, fp, #12
   16a24:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   16a28:	e1a01003 	mov	r1, r3
   16a2c:	ebfff921 	bl	14eb8 <RDMDeviceResponder::GetLabel(unsigned short, TRDMDeviceInfoData*)>
   16a30:	e51b300c 	ldr	r3, [fp, #-12]
   16a34:	e55b2008 	ldrb	r2, [fp, #-8]
   16a38:	e1a01003 	mov	r1, r3
   16a3c:	e51b0010 	ldr	r0, [fp, #-16]
   16a40:	ebfffb86 	bl	15860 <RDMHandler::HandleString(char const*, unsigned int)>
   16a44:	e51b0010 	ldr	r0, [fp, #-16]
   16a48:	ebfffc50 	bl	15b90 <RDMHandler::RespondMessageAck()>
   16a4c:	e1a00000 	nop			; (mov r0, r0)
   16a50:	e24bd004 	sub	sp, fp, #4
   16a54:	e8bd8800 	pop	{fp, pc}

00016a58 <RDMHandler::SetDeviceLabel(bool, unsigned short)>:
   16a58:	e92d4800 	push	{fp, lr}
   16a5c:	e28db004 	add	fp, sp, #4
   16a60:	e24dd010 	sub	sp, sp, #16
   16a64:	e50b0010 	str	r0, [fp, #-16]
   16a68:	e1a03001 	mov	r3, r1
   16a6c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   16a70:	e1a03002 	mov	r3, r2
   16a74:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
   16a78:	e51b3010 	ldr	r3, [fp, #-16]
   16a7c:	e5933004 	ldr	r3, [r3, #4]
   16a80:	e50b3008 	str	r3, [fp, #-8]
   16a84:	e51b3008 	ldr	r3, [fp, #-8]
   16a88:	e5d33016 	ldrb	r3, [r3, #22]
   16a8c:	e3530020 	cmp	r3, #32
   16a90:	9a000003 	bls	16aa4 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x4c>
   16a94:	e3a01001 	mov	r1, #1
   16a98:	e51b0010 	ldr	r0, [fp, #-16]
   16a9c:	ebfffc50 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   16aa0:	ea000013 	b	16af4 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x9c>
   16aa4:	ebfffae3 	bl	15638 <RDMDeviceResponder::Get()>
   16aa8:	e51b3008 	ldr	r3, [fp, #-8]
   16aac:	e2832017 	add	r2, r3, #23
   16ab0:	e51b3008 	ldr	r3, [fp, #-8]
   16ab4:	e5d33016 	ldrb	r3, [r3, #22]
   16ab8:	e15b11b4 	ldrh	r1, [fp, #-20]	; 0xffffffec
   16abc:	ebfff8d8 	bl	14e24 <RDMDeviceResponder::SetLabel(unsigned short, char const*, unsigned char)>
   16ac0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   16ac4:	e3530000 	cmp	r3, #0
   16ac8:	1a000008 	bne	16af0 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x98>
   16acc:	e51b3010 	ldr	r3, [fp, #-16]
   16ad0:	e5933008 	ldr	r3, [r3, #8]
   16ad4:	e50b300c 	str	r3, [fp, #-12]
   16ad8:	e51b300c 	ldr	r3, [fp, #-12]
   16adc:	e3a02000 	mov	r2, #0
   16ae0:	e5c32017 	strb	r2, [r3, #23]
   16ae4:	e51b0010 	ldr	r0, [fp, #-16]
   16ae8:	ebfffc28 	bl	15b90 <RDMHandler::RespondMessageAck()>
   16aec:	ea000000 	b	16af4 <RDMHandler::SetDeviceLabel(bool, unsigned short)+0x9c>
   16af0:	e1a00000 	nop			; (mov r0, r0)
   16af4:	e24bd004 	sub	sp, fp, #4
   16af8:	e8bd8800 	pop	{fp, pc}

00016afc <RDMHandler::GetSoftwareVersionLabel(unsigned short)>:
   16afc:	e92d4800 	push	{fp, lr}
   16b00:	e28db004 	add	fp, sp, #4
   16b04:	e24dd010 	sub	sp, sp, #16
   16b08:	e50b0010 	str	r0, [fp, #-16]
   16b0c:	e1a03001 	mov	r3, r1
   16b10:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   16b14:	ebfffac7 	bl	15638 <RDMDeviceResponder::Get()>
   16b18:	e1a03000 	mov	r3, r0
   16b1c:	e1a00003 	mov	r0, r3
   16b20:	ebfff969 	bl	150cc <RDMDeviceResponder::GetSoftwareVersion() const>
   16b24:	e50b0008 	str	r0, [fp, #-8]
   16b28:	ebfffac2 	bl	15638 <RDMDeviceResponder::Get()>
   16b2c:	e1a03000 	mov	r3, r0
   16b30:	e1a00003 	mov	r0, r3
   16b34:	ebfff96e 	bl	150f4 <RDMDeviceResponder::GetSoftwareVersionLength() const>
   16b38:	e1a03000 	mov	r3, r0
   16b3c:	e54b3009 	strb	r3, [fp, #-9]
   16b40:	e55b3009 	ldrb	r3, [fp, #-9]
   16b44:	e1a02003 	mov	r2, r3
   16b48:	e51b1008 	ldr	r1, [fp, #-8]
   16b4c:	e51b0010 	ldr	r0, [fp, #-16]
   16b50:	ebfffb42 	bl	15860 <RDMHandler::HandleString(char const*, unsigned int)>
   16b54:	e51b0010 	ldr	r0, [fp, #-16]
   16b58:	ebfffc0c 	bl	15b90 <RDMHandler::RespondMessageAck()>
   16b5c:	e1a00000 	nop			; (mov r0, r0)
   16b60:	e24bd004 	sub	sp, fp, #4
   16b64:	e8bd8800 	pop	{fp, pc}

00016b68 <RDMHandler::SetResetDevice(bool, unsigned short)>:
   16b68:	e92d4800 	push	{fp, lr}
   16b6c:	e28db004 	add	fp, sp, #4
   16b70:	e24dd018 	sub	sp, sp, #24
   16b74:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   16b78:	e1a03001 	mov	r3, r1
   16b7c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   16b80:	e1a03002 	mov	r3, r2
   16b84:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
   16b88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b8c:	e5933004 	ldr	r3, [r3, #4]
   16b90:	e50b3008 	str	r3, [fp, #-8]
   16b94:	e51b3008 	ldr	r3, [fp, #-8]
   16b98:	e5d33016 	ldrb	r3, [r3, #22]
   16b9c:	e3530001 	cmp	r3, #1
   16ba0:	0a000003 	beq	16bb4 <RDMHandler::SetResetDevice(bool, unsigned short)+0x4c>
   16ba4:	e3a01001 	mov	r1, #1
   16ba8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   16bac:	ebfffc0c 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   16bb0:	ea000025 	b	16c4c <RDMHandler::SetResetDevice(bool, unsigned short)+0xe4>
   16bb4:	e51b3008 	ldr	r3, [fp, #-8]
   16bb8:	e5d33017 	ldrb	r3, [r3, #23]
   16bbc:	e54b3009 	strb	r3, [fp, #-9]
   16bc0:	e55b3009 	ldrb	r3, [fp, #-9]
   16bc4:	e3530001 	cmp	r3, #1
   16bc8:	0a000006 	beq	16be8 <RDMHandler::SetResetDevice(bool, unsigned short)+0x80>
   16bcc:	e55b3009 	ldrb	r3, [fp, #-9]
   16bd0:	e35300ff 	cmp	r3, #255	; 0xff
   16bd4:	0a000003 	beq	16be8 <RDMHandler::SetResetDevice(bool, unsigned short)+0x80>
   16bd8:	e3a01006 	mov	r1, #6
   16bdc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   16be0:	ebfffbff 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   16be4:	ea000018 	b	16c4c <RDMHandler::SetResetDevice(bool, unsigned short)+0xe4>
   16be8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16bec:	e5933008 	ldr	r3, [r3, #8]
   16bf0:	e50b3010 	str	r3, [fp, #-16]
   16bf4:	e51b3010 	ldr	r3, [fp, #-16]
   16bf8:	e3a02000 	mov	r2, #0
   16bfc:	e5c32017 	strb	r2, [r3, #23]
   16c00:	e55b3009 	ldrb	r3, [fp, #-9]
   16c04:	e35300ff 	cmp	r3, #255	; 0xff
   16c08:	1a000003 	bne	16c1c <RDMHandler::SetResetDevice(bool, unsigned short)+0xb4>
   16c0c:	e3a01004 	mov	r1, #4
   16c10:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   16c14:	ebfffbf2 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   16c18:	ea00000b 	b	16c4c <RDMHandler::SetResetDevice(bool, unsigned short)+0xe4>
   16c1c:	ebffea77 	bl	11600 <Hardware::Get()>
   16c20:	e1a03000 	mov	r3, r0
   16c24:	e1a00003 	mov	r0, r3
   16c28:	eb00a470 	bl	3fdf0 <Hardware::Reboot()>
   16c2c:	e1a03000 	mov	r3, r0
   16c30:	e2233001 	eor	r3, r3, #1
   16c34:	e6ef3073 	uxtb	r3, r3
   16c38:	e3530000 	cmp	r3, #0
   16c3c:	0a000002 	beq	16c4c <RDMHandler::SetResetDevice(bool, unsigned short)+0xe4>
   16c40:	e3a01004 	mov	r1, #4
   16c44:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   16c48:	ebfffbe5 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   16c4c:	e24bd004 	sub	sp, fp, #4
   16c50:	e8bd8800 	pop	{fp, pc}

00016c54 <RDMHandler::GetIdentifyDevice(unsigned short)>:
   16c54:	e92d4800 	push	{fp, lr}
   16c58:	e28db004 	add	fp, sp, #4
   16c5c:	e24dd010 	sub	sp, sp, #16
   16c60:	e50b0010 	str	r0, [fp, #-16]
   16c64:	e1a03001 	mov	r3, r1
   16c68:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   16c6c:	e51b3010 	ldr	r3, [fp, #-16]
   16c70:	e5933008 	ldr	r3, [r3, #8]
   16c74:	e50b3008 	str	r3, [fp, #-8]
   16c78:	e51b3008 	ldr	r3, [fp, #-8]
   16c7c:	e3a02001 	mov	r2, #1
   16c80:	e5c32017 	strb	r2, [r3, #23]
   16c84:	ebfff815 	bl	14ce0 <RDMIdentify::Get()>
   16c88:	e1a03000 	mov	r3, r0
   16c8c:	e1a00003 	mov	r0, r3
   16c90:	ebfff807 	bl	14cb4 <RDMIdentify::IsEnabled() const>
   16c94:	e1a03000 	mov	r3, r0
   16c98:	e3530000 	cmp	r3, #0
   16c9c:	0a000001 	beq	16ca8 <RDMHandler::GetIdentifyDevice(unsigned short)+0x54>
   16ca0:	e3a02001 	mov	r2, #1
   16ca4:	ea000000 	b	16cac <RDMHandler::GetIdentifyDevice(unsigned short)+0x58>
   16ca8:	e3a02000 	mov	r2, #0
   16cac:	e51b3008 	ldr	r3, [fp, #-8]
   16cb0:	e5c32018 	strb	r2, [r3, #24]
   16cb4:	e51b0010 	ldr	r0, [fp, #-16]
   16cb8:	ebfffbb4 	bl	15b90 <RDMHandler::RespondMessageAck()>
   16cbc:	e1a00000 	nop			; (mov r0, r0)
   16cc0:	e24bd004 	sub	sp, fp, #4
   16cc4:	e8bd8800 	pop	{fp, pc}

00016cc8 <RDMHandler::SetIdentifyDevice(bool, unsigned short)>:
   16cc8:	e92d4800 	push	{fp, lr}
   16ccc:	e28db004 	add	fp, sp, #4
   16cd0:	e24dd010 	sub	sp, sp, #16
   16cd4:	e50b0010 	str	r0, [fp, #-16]
   16cd8:	e1a03001 	mov	r3, r1
   16cdc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   16ce0:	e1a03002 	mov	r3, r2
   16ce4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
   16ce8:	e51b3010 	ldr	r3, [fp, #-16]
   16cec:	e5933004 	ldr	r3, [r3, #4]
   16cf0:	e50b3008 	str	r3, [fp, #-8]
   16cf4:	e51b3008 	ldr	r3, [fp, #-8]
   16cf8:	e5d33016 	ldrb	r3, [r3, #22]
   16cfc:	e3530001 	cmp	r3, #1
   16d00:	0a000003 	beq	16d14 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x4c>
   16d04:	e3a01001 	mov	r1, #1
   16d08:	e51b0010 	ldr	r0, [fp, #-16]
   16d0c:	ebfffbb4 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   16d10:	ea000025 	b	16dac <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0xe4>
   16d14:	e51b3008 	ldr	r3, [fp, #-8]
   16d18:	e5d33017 	ldrb	r3, [r3, #23]
   16d1c:	e3530000 	cmp	r3, #0
   16d20:	0a000007 	beq	16d44 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x7c>
   16d24:	e51b3008 	ldr	r3, [fp, #-8]
   16d28:	e5d33017 	ldrb	r3, [r3, #23]
   16d2c:	e3530001 	cmp	r3, #1
   16d30:	0a000003 	beq	16d44 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0x7c>
   16d34:	e3a01006 	mov	r1, #6
   16d38:	e51b0010 	ldr	r0, [fp, #-16]
   16d3c:	ebfffba8 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   16d40:	ea000019 	b	16dac <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0xe4>
   16d44:	e51b3008 	ldr	r3, [fp, #-8]
   16d48:	e5d33017 	ldrb	r3, [r3, #23]
   16d4c:	e3530000 	cmp	r3, #0
   16d50:	1a000004 	bne	16d68 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0xa0>
   16d54:	ebfff7e1 	bl	14ce0 <RDMIdentify::Get()>
   16d58:	e1a03000 	mov	r3, r0
   16d5c:	e1a00003 	mov	r0, r3
   16d60:	ebfff7b8 	bl	14c48 <RDMIdentify::Off()>
   16d64:	ea000003 	b	16d78 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0xb0>
   16d68:	ebfff7dc 	bl	14ce0 <RDMIdentify::Get()>
   16d6c:	e1a03000 	mov	r3, r0
   16d70:	e1a00003 	mov	r0, r3
   16d74:	ebfff798 	bl	14bdc <RDMIdentify::On()>
   16d78:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   16d7c:	e3530000 	cmp	r3, #0
   16d80:	1a000008 	bne	16da8 <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0xe0>
   16d84:	e51b3010 	ldr	r3, [fp, #-16]
   16d88:	e5933008 	ldr	r3, [r3, #8]
   16d8c:	e50b300c 	str	r3, [fp, #-12]
   16d90:	e51b300c 	ldr	r3, [fp, #-12]
   16d94:	e3a02000 	mov	r2, #0
   16d98:	e5c32017 	strb	r2, [r3, #23]
   16d9c:	e51b0010 	ldr	r0, [fp, #-16]
   16da0:	ebfffb7a 	bl	15b90 <RDMHandler::RespondMessageAck()>
   16da4:	ea000000 	b	16dac <RDMHandler::SetIdentifyDevice(bool, unsigned short)+0xe4>
   16da8:	e1a00000 	nop			; (mov r0, r0)
   16dac:	e24bd004 	sub	sp, fp, #4
   16db0:	e8bd8800 	pop	{fp, pc}

00016db4 <RDMHandler::GetLanguage(unsigned short)>:
   16db4:	e92d4800 	push	{fp, lr}
   16db8:	e28db004 	add	fp, sp, #4
   16dbc:	e24dd010 	sub	sp, sp, #16
   16dc0:	e50b0010 	str	r0, [fp, #-16]
   16dc4:	e1a03001 	mov	r3, r1
   16dc8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   16dcc:	ebfffa19 	bl	15638 <RDMDeviceResponder::Get()>
   16dd0:	e1a03000 	mov	r3, r0
   16dd4:	e1a00003 	mov	r0, r3
   16dd8:	ebfff8b1 	bl	150a4 <RDMDeviceResponder::GetLanguage() const>
   16ddc:	e50b0008 	str	r0, [fp, #-8]
   16de0:	e3a02002 	mov	r2, #2
   16de4:	e51b1008 	ldr	r1, [fp, #-8]
   16de8:	e51b0010 	ldr	r0, [fp, #-16]
   16dec:	ebfffa9b 	bl	15860 <RDMHandler::HandleString(char const*, unsigned int)>
   16df0:	e51b0010 	ldr	r0, [fp, #-16]
   16df4:	ebfffb65 	bl	15b90 <RDMHandler::RespondMessageAck()>
   16df8:	e1a00000 	nop			; (mov r0, r0)
   16dfc:	e24bd004 	sub	sp, fp, #4
   16e00:	e8bd8800 	pop	{fp, pc}

00016e04 <RDMHandler::SetLanguage(bool, unsigned short)>:
   16e04:	e92d4800 	push	{fp, lr}
   16e08:	e28db004 	add	fp, sp, #4
   16e0c:	e24dd018 	sub	sp, sp, #24
   16e10:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   16e14:	e1a03001 	mov	r3, r1
   16e18:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   16e1c:	e1a03002 	mov	r3, r2
   16e20:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
   16e24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e28:	e5933004 	ldr	r3, [r3, #4]
   16e2c:	e50b3008 	str	r3, [fp, #-8]
   16e30:	e51b3008 	ldr	r3, [fp, #-8]
   16e34:	e5d33016 	ldrb	r3, [r3, #22]
   16e38:	e3530002 	cmp	r3, #2
   16e3c:	0a000003 	beq	16e50 <RDMHandler::SetLanguage(bool, unsigned short)+0x4c>
   16e40:	e3a01001 	mov	r1, #1
   16e44:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   16e48:	ebfffb65 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   16e4c:	ea000022 	b	16edc <RDMHandler::SetLanguage(bool, unsigned short)+0xd8>
   16e50:	ebfff9f8 	bl	15638 <RDMDeviceResponder::Get()>
   16e54:	e1a03000 	mov	r3, r0
   16e58:	e1a00003 	mov	r0, r3
   16e5c:	ebfff890 	bl	150a4 <RDMDeviceResponder::GetLanguage() const>
   16e60:	e50b000c 	str	r0, [fp, #-12]
   16e64:	e51b3008 	ldr	r3, [fp, #-8]
   16e68:	e5d32017 	ldrb	r2, [r3, #23]
   16e6c:	e51b300c 	ldr	r3, [fp, #-12]
   16e70:	e5d33000 	ldrb	r3, [r3]
   16e74:	e1520003 	cmp	r2, r3
   16e78:	1a000006 	bne	16e98 <RDMHandler::SetLanguage(bool, unsigned short)+0x94>
   16e7c:	e51b3008 	ldr	r3, [fp, #-8]
   16e80:	e5d32018 	ldrb	r2, [r3, #24]
   16e84:	e51b300c 	ldr	r3, [fp, #-12]
   16e88:	e2833001 	add	r3, r3, #1
   16e8c:	e5d33000 	ldrb	r3, [r3]
   16e90:	e1520003 	cmp	r2, r3
   16e94:	0a000003 	beq	16ea8 <RDMHandler::SetLanguage(bool, unsigned short)+0xa4>
   16e98:	e3a01006 	mov	r1, #6
   16e9c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ea0:	ebfffb4f 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   16ea4:	ea00000c 	b	16edc <RDMHandler::SetLanguage(bool, unsigned short)+0xd8>
   16ea8:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   16eac:	e3530000 	cmp	r3, #0
   16eb0:	1a000008 	bne	16ed8 <RDMHandler::SetLanguage(bool, unsigned short)+0xd4>
   16eb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16eb8:	e5933008 	ldr	r3, [r3, #8]
   16ebc:	e50b3010 	str	r3, [fp, #-16]
   16ec0:	e51b3010 	ldr	r3, [fp, #-16]
   16ec4:	e3a02000 	mov	r2, #0
   16ec8:	e5c32017 	strb	r2, [r3, #23]
   16ecc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ed0:	ebfffb2e 	bl	15b90 <RDMHandler::RespondMessageAck()>
   16ed4:	ea000000 	b	16edc <RDMHandler::SetLanguage(bool, unsigned short)+0xd8>
   16ed8:	e1a00000 	nop			; (mov r0, r0)
   16edc:	e24bd004 	sub	sp, fp, #4
   16ee0:	e8bd8800 	pop	{fp, pc}

00016ee4 <RDMHandler::GetBootSoftwareVersionId(unsigned short)>:
   16ee4:	e92d4800 	push	{fp, lr}
   16ee8:	e28db004 	add	fp, sp, #4
   16eec:	e24dd018 	sub	sp, sp, #24
   16ef0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   16ef4:	e1a03001 	mov	r3, r1
   16ef8:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
   16efc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f00:	e5933004 	ldr	r3, [r3, #4]
   16f04:	e50b3008 	str	r3, [fp, #-8]
   16f08:	e51b3008 	ldr	r3, [fp, #-8]
   16f0c:	e5d33016 	ldrb	r3, [r3, #22]
   16f10:	e3530000 	cmp	r3, #0
   16f14:	0a000003 	beq	16f28 <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0x44>
   16f18:	e3a01001 	mov	r1, #1
   16f1c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   16f20:	ebfffb2f 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   16f24:	ea00001f 	b	16fa8 <RDMHandler::GetBootSoftwareVersionId(unsigned short)+0xc4>
   16f28:	ebffe9b4 	bl	11600 <Hardware::Get()>
   16f2c:	e1a03000 	mov	r3, r0
   16f30:	e1a00003 	mov	r0, r3
   16f34:	eb00a2f1 	bl	3fb00 <Hardware::GetReleaseId()>
   16f38:	e50b000c 	str	r0, [fp, #-12]
   16f3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f40:	e5933008 	ldr	r3, [r3, #8]
   16f44:	e50b3010 	str	r3, [fp, #-16]
   16f48:	e51b3010 	ldr	r3, [fp, #-16]
   16f4c:	e3a02004 	mov	r2, #4
   16f50:	e5c32017 	strb	r2, [r3, #23]
   16f54:	e51b300c 	ldr	r3, [fp, #-12]
   16f58:	e1a03c23 	lsr	r3, r3, #24
   16f5c:	e6ef2073 	uxtb	r2, r3
   16f60:	e51b3010 	ldr	r3, [fp, #-16]
   16f64:	e5c32018 	strb	r2, [r3, #24]
   16f68:	e51b300c 	ldr	r3, [fp, #-12]
   16f6c:	e1a03823 	lsr	r3, r3, #16
   16f70:	e6ef2073 	uxtb	r2, r3
   16f74:	e51b3010 	ldr	r3, [fp, #-16]
   16f78:	e5c32019 	strb	r2, [r3, #25]
   16f7c:	e51b300c 	ldr	r3, [fp, #-12]
   16f80:	e1a03423 	lsr	r3, r3, #8
   16f84:	e6ef2073 	uxtb	r2, r3
   16f88:	e51b3010 	ldr	r3, [fp, #-16]
   16f8c:	e5c3201a 	strb	r2, [r3, #26]
   16f90:	e51b300c 	ldr	r3, [fp, #-12]
   16f94:	e6ef2073 	uxtb	r2, r3
   16f98:	e51b3010 	ldr	r3, [fp, #-16]
   16f9c:	e5c3201b 	strb	r2, [r3, #27]
   16fa0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   16fa4:	ebfffaf9 	bl	15b90 <RDMHandler::RespondMessageAck()>
   16fa8:	e24bd004 	sub	sp, fp, #4
   16fac:	e8bd8800 	pop	{fp, pc}

00016fb0 <RDMHandler::GetBootSoftwareVersionLabel(unsigned short)>:
   16fb0:	e92d4800 	push	{fp, lr}
   16fb4:	e28db004 	add	fp, sp, #4
   16fb8:	e24dd010 	sub	sp, sp, #16
   16fbc:	e50b0010 	str	r0, [fp, #-16]
   16fc0:	e1a03001 	mov	r3, r1
   16fc4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   16fc8:	ebffe98c 	bl	11600 <Hardware::Get()>
   16fcc:	e1a02000 	mov	r2, r0
   16fd0:	e24b300a 	sub	r3, fp, #10
   16fd4:	e1a01003 	mov	r1, r3
   16fd8:	e1a00002 	mov	r0, r2
   16fdc:	eb00a28d 	bl	3fa18 <Hardware::GetSysName(unsigned char&)>
   16fe0:	e50b0008 	str	r0, [fp, #-8]
   16fe4:	e3a03020 	mov	r3, #32
   16fe8:	e54b3009 	strb	r3, [fp, #-9]
   16fec:	e24b200a 	sub	r2, fp, #10
   16ff0:	e24b3009 	sub	r3, fp, #9
   16ff4:	e1a01002 	mov	r1, r2
   16ff8:	e1a00003 	mov	r0, r3
   16ffc:	ebfff59b 	bl	14670 <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)>
   17000:	e1a03000 	mov	r3, r0
   17004:	e5d33000 	ldrb	r3, [r3]
   17008:	e1a02003 	mov	r2, r3
   1700c:	e51b1008 	ldr	r1, [fp, #-8]
   17010:	e51b0010 	ldr	r0, [fp, #-16]
   17014:	ebfffa11 	bl	15860 <RDMHandler::HandleString(char const*, unsigned int)>
   17018:	e51b0010 	ldr	r0, [fp, #-16]
   1701c:	ebfffadb 	bl	15b90 <RDMHandler::RespondMessageAck()>
   17020:	e1a00000 	nop			; (mov r0, r0)
   17024:	e24bd004 	sub	sp, fp, #4
   17028:	e8bd8800 	pop	{fp, pc}

0001702c <RDMHandler::GetPersonality(unsigned short)>:
   1702c:	e92d4800 	push	{fp, lr}
   17030:	e28db004 	add	fp, sp, #4
   17034:	e24dd010 	sub	sp, sp, #16
   17038:	e50b0010 	str	r0, [fp, #-16]
   1703c:	e1a03001 	mov	r3, r1
   17040:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   17044:	ebfff97b 	bl	15638 <RDMDeviceResponder::Get()>
   17048:	e1a02000 	mov	r2, r0
   1704c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   17050:	e1a01003 	mov	r1, r3
   17054:	e1a00002 	mov	r0, r2
   17058:	ebfff960 	bl	155e0 <RDMDeviceResponder::GetPersonalityCurrent(unsigned short)>
   1705c:	e1a03000 	mov	r3, r0
   17060:	e54b3005 	strb	r3, [fp, #-5]
   17064:	ebfff973 	bl	15638 <RDMDeviceResponder::Get()>
   17068:	e1a02000 	mov	r2, r0
   1706c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   17070:	e1a01003 	mov	r1, r3
   17074:	e1a00002 	mov	r0, r2
   17078:	ebfff8ec 	bl	15430 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
   1707c:	e1a03000 	mov	r3, r0
   17080:	e54b3006 	strb	r3, [fp, #-6]
   17084:	e51b3010 	ldr	r3, [fp, #-16]
   17088:	e5933008 	ldr	r3, [r3, #8]
   1708c:	e50b300c 	str	r3, [fp, #-12]
   17090:	e51b300c 	ldr	r3, [fp, #-12]
   17094:	e3a02002 	mov	r2, #2
   17098:	e5c32017 	strb	r2, [r3, #23]
   1709c:	e51b300c 	ldr	r3, [fp, #-12]
   170a0:	e55b2005 	ldrb	r2, [fp, #-5]
   170a4:	e5c32018 	strb	r2, [r3, #24]
   170a8:	e51b300c 	ldr	r3, [fp, #-12]
   170ac:	e55b2006 	ldrb	r2, [fp, #-6]
   170b0:	e5c32019 	strb	r2, [r3, #25]
   170b4:	e51b0010 	ldr	r0, [fp, #-16]
   170b8:	ebfffab4 	bl	15b90 <RDMHandler::RespondMessageAck()>
   170bc:	e1a00000 	nop			; (mov r0, r0)
   170c0:	e24bd004 	sub	sp, fp, #4
   170c4:	e8bd8800 	pop	{fp, pc}

000170c8 <RDMHandler::SetPersonality(bool, unsigned short)>:
   170c8:	e92d4800 	push	{fp, lr}
   170cc:	e28db004 	add	fp, sp, #4
   170d0:	e24dd018 	sub	sp, sp, #24
   170d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   170d8:	e1a03001 	mov	r3, r1
   170dc:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   170e0:	e1a03002 	mov	r3, r2
   170e4:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
   170e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   170ec:	e5933004 	ldr	r3, [r3, #4]
   170f0:	e50b3008 	str	r3, [fp, #-8]
   170f4:	e51b3008 	ldr	r3, [fp, #-8]
   170f8:	e5d33016 	ldrb	r3, [r3, #22]
   170fc:	e3530001 	cmp	r3, #1
   17100:	0a000003 	beq	17114 <RDMHandler::SetPersonality(bool, unsigned short)+0x4c>
   17104:	e3a01001 	mov	r1, #1
   17108:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1710c:	ebfffab4 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   17110:	ea000022 	b	171a0 <RDMHandler::SetPersonality(bool, unsigned short)+0xd8>
   17114:	e51b3008 	ldr	r3, [fp, #-8]
   17118:	e5d33017 	ldrb	r3, [r3, #23]
   1711c:	e54b3009 	strb	r3, [fp, #-9]
   17120:	ebfff944 	bl	15638 <RDMDeviceResponder::Get()>
   17124:	e1a02000 	mov	r2, r0
   17128:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
   1712c:	e1a01003 	mov	r1, r3
   17130:	e1a00002 	mov	r0, r2
   17134:	ebfff8bd 	bl	15430 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
   17138:	e1a03000 	mov	r3, r0
   1713c:	e54b300a 	strb	r3, [fp, #-10]
   17140:	e55b3009 	ldrb	r3, [fp, #-9]
   17144:	e3530000 	cmp	r3, #0
   17148:	0a000003 	beq	1715c <RDMHandler::SetPersonality(bool, unsigned short)+0x94>
   1714c:	e55b2009 	ldrb	r2, [fp, #-9]
   17150:	e55b300a 	ldrb	r3, [fp, #-10]
   17154:	e1520003 	cmp	r2, r3
   17158:	9a000003 	bls	1716c <RDMHandler::SetPersonality(bool, unsigned short)+0xa4>
   1715c:	e3a01006 	mov	r1, #6
   17160:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17164:	ebfffa9e 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   17168:	ea00000c 	b	171a0 <RDMHandler::SetPersonality(bool, unsigned short)+0xd8>
   1716c:	ebfff931 	bl	15638 <RDMDeviceResponder::Get()>
   17170:	e55b2009 	ldrb	r2, [fp, #-9]
   17174:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
   17178:	e1a01003 	mov	r1, r3
   1717c:	ebfff8c1 	bl	15488 <RDMDeviceResponder::SetPersonalityCurrent(unsigned short, unsigned char)>
   17180:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17184:	e5933008 	ldr	r3, [r3, #8]
   17188:	e50b3010 	str	r3, [fp, #-16]
   1718c:	e51b3010 	ldr	r3, [fp, #-16]
   17190:	e3a02000 	mov	r2, #0
   17194:	e5c32017 	strb	r2, [r3, #23]
   17198:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1719c:	ebfffa7b 	bl	15b90 <RDMHandler::RespondMessageAck()>
   171a0:	e24bd004 	sub	sp, fp, #4
   171a4:	e8bd8800 	pop	{fp, pc}

000171a8 <RDMHandler::GetPersonalityDescription(unsigned short)>:
   171a8:	e92d4800 	push	{fp, lr}
   171ac:	e28db004 	add	fp, sp, #4
   171b0:	e24dd020 	sub	sp, sp, #32
   171b4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   171b8:	e1a03001 	mov	r3, r1
   171bc:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
   171c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   171c4:	e5933004 	ldr	r3, [r3, #4]
   171c8:	e50b3008 	str	r3, [fp, #-8]
   171cc:	e51b3008 	ldr	r3, [fp, #-8]
   171d0:	e5d33017 	ldrb	r3, [r3, #23]
   171d4:	e54b3009 	strb	r3, [fp, #-9]
   171d8:	ebfff916 	bl	15638 <RDMDeviceResponder::Get()>
   171dc:	e1a02000 	mov	r2, r0
   171e0:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
   171e4:	e1a01003 	mov	r1, r3
   171e8:	e1a00002 	mov	r0, r2
   171ec:	ebfff88f 	bl	15430 <RDMDeviceResponder::GetPersonalityCount(unsigned short)>
   171f0:	e1a03000 	mov	r3, r0
   171f4:	e54b300a 	strb	r3, [fp, #-10]
   171f8:	e55b3009 	ldrb	r3, [fp, #-9]
   171fc:	e3530000 	cmp	r3, #0
   17200:	0a000003 	beq	17214 <RDMHandler::GetPersonalityDescription(unsigned short)+0x6c>
   17204:	e55b2009 	ldrb	r2, [fp, #-9]
   17208:	e55b300a 	ldrb	r3, [fp, #-10]
   1720c:	e1520003 	cmp	r2, r3
   17210:	9a000003 	bls	17224 <RDMHandler::GetPersonalityDescription(unsigned short)+0x7c>
   17214:	e3a01006 	mov	r1, #6
   17218:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   1721c:	ebfffa70 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   17220:	ea00002d 	b	172dc <RDMHandler::GetPersonalityDescription(unsigned short)+0x134>
   17224:	ebfff903 	bl	15638 <RDMDeviceResponder::Get()>
   17228:	e55b2009 	ldrb	r2, [fp, #-9]
   1722c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
   17230:	e1a01003 	mov	r1, r3
   17234:	ebfff860 	bl	153bc <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
   17238:	e1a03000 	mov	r3, r0
   1723c:	e1a00003 	mov	r0, r3
   17240:	ebfff6af 	bl	14d04 <RDMPersonality::GetSlots() const>
   17244:	e1a03000 	mov	r3, r0
   17248:	e14b30bc 	strh	r3, [fp, #-12]
   1724c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   17250:	e5933008 	ldr	r3, [r3, #8]
   17254:	e50b3010 	str	r3, [fp, #-16]
   17258:	e51b3010 	ldr	r3, [fp, #-16]
   1725c:	e55b2009 	ldrb	r2, [fp, #-9]
   17260:	e5c32018 	strb	r2, [r3, #24]
   17264:	e15b30bc 	ldrh	r3, [fp, #-12]
   17268:	e1a03443 	asr	r3, r3, #8
   1726c:	e6ef2073 	uxtb	r2, r3
   17270:	e51b3010 	ldr	r3, [fp, #-16]
   17274:	e5c32019 	strb	r2, [r3, #25]
   17278:	e15b30bc 	ldrh	r3, [fp, #-12]
   1727c:	e6ef2073 	uxtb	r2, r3
   17280:	e51b3010 	ldr	r3, [fp, #-16]
   17284:	e5c3201a 	strb	r2, [r3, #26]
   17288:	e51b3010 	ldr	r3, [fp, #-16]
   1728c:	e283301b 	add	r3, r3, #27
   17290:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   17294:	e3a03020 	mov	r3, #32
   17298:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   1729c:	ebfff8e5 	bl	15638 <RDMDeviceResponder::Get()>
   172a0:	e55b2009 	ldrb	r2, [fp, #-9]
   172a4:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
   172a8:	e1a01003 	mov	r1, r3
   172ac:	ebfff842 	bl	153bc <RDMDeviceResponder::GetPersonality(unsigned short, unsigned char)>
   172b0:	e24b3015 	sub	r3, fp, #21
   172b4:	e1a02003 	mov	r2, r3
   172b8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   172bc:	ebfff69a 	bl	14d2c <RDMPersonality::DescriptionCopyTo(char*, unsigned char&)>
   172c0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   172c4:	e2833003 	add	r3, r3, #3
   172c8:	e6ef2073 	uxtb	r2, r3
   172cc:	e51b3010 	ldr	r3, [fp, #-16]
   172d0:	e5c32017 	strb	r2, [r3, #23]
   172d4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   172d8:	ebfffa2c 	bl	15b90 <RDMHandler::RespondMessageAck()>
   172dc:	e24bd004 	sub	sp, fp, #4
   172e0:	e8bd8800 	pop	{fp, pc}

000172e4 <RDMHandler::GetDmxStartAddress(unsigned short)>:
   172e4:	e92d4800 	push	{fp, lr}
   172e8:	e28db004 	add	fp, sp, #4
   172ec:	e24dd010 	sub	sp, sp, #16
   172f0:	e50b0010 	str	r0, [fp, #-16]
   172f4:	e1a03001 	mov	r3, r1
   172f8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   172fc:	ebfff8cd 	bl	15638 <RDMDeviceResponder::Get()>
   17300:	e1a02000 	mov	r2, r0
   17304:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   17308:	e1a01003 	mov	r1, r3
   1730c:	e1a00002 	mov	r0, r2
   17310:	ebfff7c6 	bl	15230 <RDMDeviceResponder::GetDmxStartAddress(unsigned short)>
   17314:	e1a03000 	mov	r3, r0
   17318:	e14b30b6 	strh	r3, [fp, #-6]
   1731c:	e51b3010 	ldr	r3, [fp, #-16]
   17320:	e5933008 	ldr	r3, [r3, #8]
   17324:	e50b300c 	str	r3, [fp, #-12]
   17328:	e51b300c 	ldr	r3, [fp, #-12]
   1732c:	e3a02002 	mov	r2, #2
   17330:	e5c32017 	strb	r2, [r3, #23]
   17334:	e15b30b6 	ldrh	r3, [fp, #-6]
   17338:	e1a03443 	asr	r3, r3, #8
   1733c:	e6ef2073 	uxtb	r2, r3
   17340:	e51b300c 	ldr	r3, [fp, #-12]
   17344:	e5c32018 	strb	r2, [r3, #24]
   17348:	e15b30b6 	ldrh	r3, [fp, #-6]
   1734c:	e6ef2073 	uxtb	r2, r3
   17350:	e51b300c 	ldr	r3, [fp, #-12]
   17354:	e5c32019 	strb	r2, [r3, #25]
   17358:	e51b0010 	ldr	r0, [fp, #-16]
   1735c:	ebfffa0b 	bl	15b90 <RDMHandler::RespondMessageAck()>
   17360:	e1a00000 	nop			; (mov r0, r0)
   17364:	e24bd004 	sub	sp, fp, #4
   17368:	e8bd8800 	pop	{fp, pc}

0001736c <RDMHandler::SetDmxStartAddress(bool, unsigned short)>:
   1736c:	e92d4800 	push	{fp, lr}
   17370:	e28db004 	add	fp, sp, #4
   17374:	e24dd018 	sub	sp, sp, #24
   17378:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1737c:	e1a03001 	mov	r3, r1
   17380:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   17384:	e1a03002 	mov	r3, r2
   17388:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
   1738c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17390:	e5933004 	ldr	r3, [r3, #4]
   17394:	e50b3008 	str	r3, [fp, #-8]
   17398:	e51b3008 	ldr	r3, [fp, #-8]
   1739c:	e5d33016 	ldrb	r3, [r3, #22]
   173a0:	e3530002 	cmp	r3, #2
   173a4:	0a000003 	beq	173b8 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x4c>
   173a8:	e3a01001 	mov	r1, #1
   173ac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   173b0:	ebfffa0b 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   173b4:	ea000025 	b	17450 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0xe4>
   173b8:	e51b3008 	ldr	r3, [fp, #-8]
   173bc:	e5d33017 	ldrb	r3, [r3, #23]
   173c0:	e6ff3073 	uxth	r3, r3
   173c4:	e1a03403 	lsl	r3, r3, #8
   173c8:	e6ff2073 	uxth	r2, r3
   173cc:	e51b3008 	ldr	r3, [fp, #-8]
   173d0:	e5d33018 	ldrb	r3, [r3, #24]
   173d4:	e6ff3073 	uxth	r3, r3
   173d8:	e0823003 	add	r3, r2, r3
   173dc:	e14b30ba 	strh	r3, [fp, #-10]
   173e0:	e15b30ba 	ldrh	r3, [fp, #-10]
   173e4:	e3530000 	cmp	r3, #0
   173e8:	0a000002 	beq	173f8 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x8c>
   173ec:	e15b30ba 	ldrh	r3, [fp, #-10]
   173f0:	e3530c02 	cmp	r3, #512	; 0x200
   173f4:	9a000003 	bls	17408 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0x9c>
   173f8:	e3a01006 	mov	r1, #6
   173fc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17400:	ebfff9f7 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   17404:	ea000011 	b	17450 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0xe4>
   17408:	ebfff88a 	bl	15638 <RDMDeviceResponder::Get()>
   1740c:	e15b20ba 	ldrh	r2, [fp, #-10]
   17410:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
   17414:	e1a01003 	mov	r1, r3
   17418:	ebfff73f 	bl	1511c <RDMDeviceResponder::SetDmxStartAddress(unsigned short, unsigned short)>
   1741c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   17420:	e3530000 	cmp	r3, #0
   17424:	1a000008 	bne	1744c <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0xe0>
   17428:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1742c:	e5933008 	ldr	r3, [r3, #8]
   17430:	e50b3010 	str	r3, [fp, #-16]
   17434:	e51b3010 	ldr	r3, [fp, #-16]
   17438:	e3a02000 	mov	r2, #0
   1743c:	e5c32017 	strb	r2, [r3, #23]
   17440:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17444:	ebfff9d1 	bl	15b90 <RDMHandler::RespondMessageAck()>
   17448:	ea000000 	b	17450 <RDMHandler::SetDmxStartAddress(bool, unsigned short)+0xe4>
   1744c:	e1a00000 	nop			; (mov r0, r0)
   17450:	e24bd004 	sub	sp, fp, #4
   17454:	e8bd8800 	pop	{fp, pc}

00017458 <RDMHandler::GetSensorDefinition(unsigned short)>:
   17458:	e92d4800 	push	{fp, lr}
   1745c:	e28db004 	add	fp, sp, #4
   17460:	e24dd020 	sub	sp, sp, #32
   17464:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   17468:	e1a03001 	mov	r3, r1
   1746c:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
   17470:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   17474:	e5933004 	ldr	r3, [r3, #4]
   17478:	e50b3010 	str	r3, [fp, #-16]
   1747c:	e51b3010 	ldr	r3, [fp, #-16]
   17480:	e5d33017 	ldrb	r3, [r3, #23]
   17484:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   17488:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   1748c:	e35300ff 	cmp	r3, #255	; 0xff
   17490:	0a000008 	beq	174b8 <RDMHandler::GetSensorDefinition(unsigned short)+0x60>
   17494:	ebfff650 	bl	14ddc <RDMSensors::Get()>
   17498:	e1a03000 	mov	r3, r0
   1749c:	e1a00003 	mov	r0, r3
   174a0:	ebfff298 	bl	13f08 <RDMSensors::GetCount() const>
   174a4:	e1a03000 	mov	r3, r0
   174a8:	e1a02003 	mov	r2, r3
   174ac:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   174b0:	e1530002 	cmp	r3, r2
   174b4:	3a000001 	bcc	174c0 <RDMHandler::GetSensorDefinition(unsigned short)+0x68>
   174b8:	e3a03001 	mov	r3, #1
   174bc:	ea000000 	b	174c4 <RDMHandler::GetSensorDefinition(unsigned short)+0x6c>
   174c0:	e3a03000 	mov	r3, #0
   174c4:	e3530000 	cmp	r3, #0
   174c8:	0a000003 	beq	174dc <RDMHandler::GetSensorDefinition(unsigned short)+0x84>
   174cc:	e3a01006 	mov	r1, #6
   174d0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   174d4:	ebfff9c2 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   174d8:	ea000071 	b	176a4 <RDMHandler::GetSensorDefinition(unsigned short)+0x24c>
   174dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   174e0:	e5933008 	ldr	r3, [r3, #8]
   174e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   174e8:	ebfff63b 	bl	14ddc <RDMSensors::Get()>
   174ec:	e1a02000 	mov	r2, r0
   174f0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   174f4:	e1a01003 	mov	r1, r3
   174f8:	e1a00002 	mov	r0, r2
   174fc:	eb000c3f 	bl	1a600 <RDMSensors::GetDefintion(unsigned char)>
   17500:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
   17504:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   17508:	e5d33000 	ldrb	r3, [r3]
   1750c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
   17510:	e1520003 	cmp	r2, r3
   17514:	0a000003 	beq	17528 <RDMHandler::GetSensorDefinition(unsigned short)+0xd0>
   17518:	e3a01006 	mov	r1, #6
   1751c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   17520:	ebfff9af 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   17524:	ea00005e 	b	176a4 <RDMHandler::GetSensorDefinition(unsigned short)+0x24c>
   17528:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1752c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
   17530:	e5c32018 	strb	r2, [r3, #24]
   17534:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   17538:	e5d32001 	ldrb	r2, [r3, #1]
   1753c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17540:	e5c32019 	strb	r2, [r3, #25]
   17544:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   17548:	e5d32002 	ldrb	r2, [r3, #2]
   1754c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17550:	e5c3201a 	strb	r2, [r3, #26]
   17554:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   17558:	e5d32003 	ldrb	r2, [r3, #3]
   1755c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17560:	e5c3201b 	strb	r2, [r3, #27]
   17564:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   17568:	e1d330f4 	ldrsh	r3, [r3, #4]
   1756c:	e1a03443 	asr	r3, r3, #8
   17570:	e6ef2073 	uxtb	r2, r3
   17574:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17578:	e5c3201c 	strb	r2, [r3, #28]
   1757c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   17580:	e1d330f4 	ldrsh	r3, [r3, #4]
   17584:	e6ef2073 	uxtb	r2, r3
   17588:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1758c:	e5c3201d 	strb	r2, [r3, #29]
   17590:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   17594:	e1d330f6 	ldrsh	r3, [r3, #6]
   17598:	e1a03443 	asr	r3, r3, #8
   1759c:	e6ef2073 	uxtb	r2, r3
   175a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   175a4:	e5c3201e 	strb	r2, [r3, #30]
   175a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   175ac:	e1d330f6 	ldrsh	r3, [r3, #6]
   175b0:	e6ef2073 	uxtb	r2, r3
   175b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   175b8:	e5c3201f 	strb	r2, [r3, #31]
   175bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   175c0:	e1d330f8 	ldrsh	r3, [r3, #8]
   175c4:	e1a03443 	asr	r3, r3, #8
   175c8:	e6ef2073 	uxtb	r2, r3
   175cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   175d0:	e5c32020 	strb	r2, [r3, #32]
   175d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   175d8:	e1d330f8 	ldrsh	r3, [r3, #8]
   175dc:	e6ef2073 	uxtb	r2, r3
   175e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   175e4:	e5c32021 	strb	r2, [r3, #33]	; 0x21
   175e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   175ec:	e1d330fa 	ldrsh	r3, [r3, #10]
   175f0:	e1a03443 	asr	r3, r3, #8
   175f4:	e6ef2073 	uxtb	r2, r3
   175f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   175fc:	e5c32022 	strb	r2, [r3, #34]	; 0x22
   17600:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   17604:	e1d330fa 	ldrsh	r3, [r3, #10]
   17608:	e6ef2073 	uxtb	r2, r3
   1760c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17610:	e5c32023 	strb	r2, [r3, #35]	; 0x23
   17614:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   17618:	e5d3202d 	ldrb	r2, [r3, #45]	; 0x2d
   1761c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17620:	e5c32024 	strb	r2, [r3, #36]	; 0x24
   17624:	e3a0300d 	mov	r3, #13
   17628:	e50b3008 	str	r3, [fp, #-8]
   1762c:	e3a03000 	mov	r3, #0
   17630:	e50b300c 	str	r3, [fp, #-12]
   17634:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   17638:	e5d3302c 	ldrb	r3, [r3, #44]	; 0x2c
   1763c:	e1a02003 	mov	r2, r3
   17640:	e51b300c 	ldr	r3, [fp, #-12]
   17644:	e1530002 	cmp	r3, r2
   17648:	aa00000f 	bge	1768c <RDMHandler::GetSensorDefinition(unsigned short)+0x234>
   1764c:	e51b3008 	ldr	r3, [fp, #-8]
   17650:	e2832001 	add	r2, r3, #1
   17654:	e50b2008 	str	r2, [fp, #-8]
   17658:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   1765c:	e51b200c 	ldr	r2, [fp, #-12]
   17660:	e0812002 	add	r2, r1, r2
   17664:	e282200c 	add	r2, r2, #12
   17668:	e5d21000 	ldrb	r1, [r2]
   1766c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   17670:	e0823003 	add	r3, r2, r3
   17674:	e1a02001 	mov	r2, r1
   17678:	e5c32018 	strb	r2, [r3, #24]
   1767c:	e51b300c 	ldr	r3, [fp, #-12]
   17680:	e2833001 	add	r3, r3, #1
   17684:	e50b300c 	str	r3, [fp, #-12]
   17688:	eaffffe9 	b	17634 <RDMHandler::GetSensorDefinition(unsigned short)+0x1dc>
   1768c:	e51b3008 	ldr	r3, [fp, #-8]
   17690:	e6ef2073 	uxtb	r2, r3
   17694:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17698:	e5c32017 	strb	r2, [r3, #23]
   1769c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   176a0:	ebfff93a 	bl	15b90 <RDMHandler::RespondMessageAck()>
   176a4:	e24bd004 	sub	sp, fp, #4
   176a8:	e8bd8800 	pop	{fp, pc}

000176ac <RDMHandler::GetSensorValue(unsigned short)>:
   176ac:	e92d4800 	push	{fp, lr}
   176b0:	e28db004 	add	fp, sp, #4
   176b4:	e24dd018 	sub	sp, sp, #24
   176b8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   176bc:	e1a03001 	mov	r3, r1
   176c0:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
   176c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   176c8:	e5933004 	ldr	r3, [r3, #4]
   176cc:	e50b3008 	str	r3, [fp, #-8]
   176d0:	e51b3008 	ldr	r3, [fp, #-8]
   176d4:	e5d33016 	ldrb	r3, [r3, #22]
   176d8:	e3530001 	cmp	r3, #1
   176dc:	0a000003 	beq	176f0 <RDMHandler::GetSensorValue(unsigned short)+0x44>
   176e0:	e3a01001 	mov	r1, #1
   176e4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   176e8:	ebfff93d 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   176ec:	ea000062 	b	1787c <RDMHandler::GetSensorValue(unsigned short)+0x1d0>
   176f0:	e51b3008 	ldr	r3, [fp, #-8]
   176f4:	e5d33017 	ldrb	r3, [r3, #23]
   176f8:	e54b3009 	strb	r3, [fp, #-9]
   176fc:	e55b3009 	ldrb	r3, [fp, #-9]
   17700:	e35300ff 	cmp	r3, #255	; 0xff
   17704:	0a000008 	beq	1772c <RDMHandler::GetSensorValue(unsigned short)+0x80>
   17708:	ebfff5b3 	bl	14ddc <RDMSensors::Get()>
   1770c:	e1a03000 	mov	r3, r0
   17710:	e1a00003 	mov	r0, r3
   17714:	ebfff1fb 	bl	13f08 <RDMSensors::GetCount() const>
   17718:	e1a03000 	mov	r3, r0
   1771c:	e1a02003 	mov	r2, r3
   17720:	e55b3009 	ldrb	r3, [fp, #-9]
   17724:	e1530002 	cmp	r3, r2
   17728:	3a000001 	bcc	17734 <RDMHandler::GetSensorValue(unsigned short)+0x88>
   1772c:	e3a03001 	mov	r3, #1
   17730:	ea000000 	b	17738 <RDMHandler::GetSensorValue(unsigned short)+0x8c>
   17734:	e3a03000 	mov	r3, #0
   17738:	e3530000 	cmp	r3, #0
   1773c:	0a000003 	beq	17750 <RDMHandler::GetSensorValue(unsigned short)+0xa4>
   17740:	e3a01006 	mov	r1, #6
   17744:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17748:	ebfff925 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   1774c:	ea00004a 	b	1787c <RDMHandler::GetSensorValue(unsigned short)+0x1d0>
   17750:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17754:	e5933008 	ldr	r3, [r3, #8]
   17758:	e50b3010 	str	r3, [fp, #-16]
   1775c:	ebfff59e 	bl	14ddc <RDMSensors::Get()>
   17760:	e1a02000 	mov	r2, r0
   17764:	e55b3009 	ldrb	r3, [fp, #-9]
   17768:	e1a01003 	mov	r1, r3
   1776c:	e1a00002 	mov	r0, r2
   17770:	eb000bb4 	bl	1a648 <RDMSensors::GetValues(unsigned char)>
   17774:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
   17778:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1777c:	e5d33008 	ldrb	r3, [r3, #8]
   17780:	e55b2009 	ldrb	r2, [fp, #-9]
   17784:	e1520003 	cmp	r2, r3
   17788:	0a000003 	beq	1779c <RDMHandler::GetSensorValue(unsigned short)+0xf0>
   1778c:	e3a01006 	mov	r1, #6
   17790:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17794:	ebfff912 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   17798:	ea000037 	b	1787c <RDMHandler::GetSensorValue(unsigned short)+0x1d0>
   1779c:	e51b3010 	ldr	r3, [fp, #-16]
   177a0:	e3a02009 	mov	r2, #9
   177a4:	e5c32017 	strb	r2, [r3, #23]
   177a8:	e51b3010 	ldr	r3, [fp, #-16]
   177ac:	e3a02021 	mov	r2, #33	; 0x21
   177b0:	e5c32002 	strb	r2, [r3, #2]
   177b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   177b8:	e5d32008 	ldrb	r2, [r3, #8]
   177bc:	e51b3010 	ldr	r3, [fp, #-16]
   177c0:	e5c32018 	strb	r2, [r3, #24]
   177c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   177c8:	e1d330f0 	ldrsh	r3, [r3]
   177cc:	e1a03443 	asr	r3, r3, #8
   177d0:	e6ef2073 	uxtb	r2, r3
   177d4:	e51b3010 	ldr	r3, [fp, #-16]
   177d8:	e5c32019 	strb	r2, [r3, #25]
   177dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   177e0:	e1d330f0 	ldrsh	r3, [r3]
   177e4:	e6ef2073 	uxtb	r2, r3
   177e8:	e51b3010 	ldr	r3, [fp, #-16]
   177ec:	e5c3201a 	strb	r2, [r3, #26]
   177f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   177f4:	e1d330f2 	ldrsh	r3, [r3, #2]
   177f8:	e1a03443 	asr	r3, r3, #8
   177fc:	e6ef2073 	uxtb	r2, r3
   17800:	e51b3010 	ldr	r3, [fp, #-16]
   17804:	e5c3201b 	strb	r2, [r3, #27]
   17808:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1780c:	e1d330f2 	ldrsh	r3, [r3, #2]
   17810:	e6ef2073 	uxtb	r2, r3
   17814:	e51b3010 	ldr	r3, [fp, #-16]
   17818:	e5c3201c 	strb	r2, [r3, #28]
   1781c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   17820:	e1d330f4 	ldrsh	r3, [r3, #4]
   17824:	e1a03443 	asr	r3, r3, #8
   17828:	e6ef2073 	uxtb	r2, r3
   1782c:	e51b3010 	ldr	r3, [fp, #-16]
   17830:	e5c3201d 	strb	r2, [r3, #29]
   17834:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   17838:	e1d330f4 	ldrsh	r3, [r3, #4]
   1783c:	e6ef2073 	uxtb	r2, r3
   17840:	e51b3010 	ldr	r3, [fp, #-16]
   17844:	e5c3201e 	strb	r2, [r3, #30]
   17848:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1784c:	e1d330f6 	ldrsh	r3, [r3, #6]
   17850:	e1a03443 	asr	r3, r3, #8
   17854:	e6ef2073 	uxtb	r2, r3
   17858:	e51b3010 	ldr	r3, [fp, #-16]
   1785c:	e5c3201f 	strb	r2, [r3, #31]
   17860:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   17864:	e1d330f6 	ldrsh	r3, [r3, #6]
   17868:	e6ef2073 	uxtb	r2, r3
   1786c:	e51b3010 	ldr	r3, [fp, #-16]
   17870:	e5c32020 	strb	r2, [r3, #32]
   17874:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17878:	ebfff8c4 	bl	15b90 <RDMHandler::RespondMessageAck()>
   1787c:	e24bd004 	sub	sp, fp, #4
   17880:	e8bd8800 	pop	{fp, pc}

00017884 <RDMHandler::SetSensorValue(bool, unsigned short)>:
   17884:	e92d4800 	push	{fp, lr}
   17888:	e28db004 	add	fp, sp, #4
   1788c:	e24dd018 	sub	sp, sp, #24
   17890:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   17894:	e1a03001 	mov	r3, r1
   17898:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   1789c:	e1a03002 	mov	r3, r2
   178a0:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
   178a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   178a8:	e5933004 	ldr	r3, [r3, #4]
   178ac:	e50b3008 	str	r3, [fp, #-8]
   178b0:	e51b3008 	ldr	r3, [fp, #-8]
   178b4:	e5d33016 	ldrb	r3, [r3, #22]
   178b8:	e3530001 	cmp	r3, #1
   178bc:	0a000003 	beq	178d0 <RDMHandler::SetSensorValue(bool, unsigned short)+0x4c>
   178c0:	e3a01001 	mov	r1, #1
   178c4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   178c8:	ebfff8c5 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   178cc:	ea00008b 	b	17b00 <RDMHandler::SetSensorValue(bool, unsigned short)+0x27c>
   178d0:	e51b3008 	ldr	r3, [fp, #-8]
   178d4:	e5d33017 	ldrb	r3, [r3, #23]
   178d8:	e54b3009 	strb	r3, [fp, #-9]
   178dc:	e55b3009 	ldrb	r3, [fp, #-9]
   178e0:	e35300ff 	cmp	r3, #255	; 0xff
   178e4:	0a00000a 	beq	17914 <RDMHandler::SetSensorValue(bool, unsigned short)+0x90>
   178e8:	ebfff53b 	bl	14ddc <RDMSensors::Get()>
   178ec:	e1a03000 	mov	r3, r0
   178f0:	e1a00003 	mov	r0, r3
   178f4:	ebfff183 	bl	13f08 <RDMSensors::GetCount() const>
   178f8:	e1a03000 	mov	r3, r0
   178fc:	e1a02003 	mov	r2, r3
   17900:	e55b3009 	ldrb	r3, [fp, #-9]
   17904:	e1530002 	cmp	r3, r2
   17908:	3a000001 	bcc	17914 <RDMHandler::SetSensorValue(bool, unsigned short)+0x90>
   1790c:	e3a03001 	mov	r3, #1
   17910:	ea000000 	b	17918 <RDMHandler::SetSensorValue(bool, unsigned short)+0x94>
   17914:	e3a03000 	mov	r3, #0
   17918:	e3530000 	cmp	r3, #0
   1791c:	0a000003 	beq	17930 <RDMHandler::SetSensorValue(bool, unsigned short)+0xac>
   17920:	e3a01006 	mov	r1, #6
   17924:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17928:	ebfff8ad 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   1792c:	ea000073 	b	17b00 <RDMHandler::SetSensorValue(bool, unsigned short)+0x27c>
   17930:	ebfff529 	bl	14ddc <RDMSensors::Get()>
   17934:	e1a02000 	mov	r2, r0
   17938:	e55b3009 	ldrb	r3, [fp, #-9]
   1793c:	e1a01003 	mov	r1, r3
   17940:	e1a00002 	mov	r0, r2
   17944:	eb000b51 	bl	1a690 <RDMSensors::SetValues(unsigned char)>
   17948:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1794c:	e3530000 	cmp	r3, #0
   17950:	1a000069 	bne	17afc <RDMHandler::SetSensorValue(bool, unsigned short)+0x278>
   17954:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17958:	e5933008 	ldr	r3, [r3, #8]
   1795c:	e50b3010 	str	r3, [fp, #-16]
   17960:	e55b3009 	ldrb	r3, [fp, #-9]
   17964:	e35300ff 	cmp	r3, #255	; 0xff
   17968:	1a000023 	bne	179fc <RDMHandler::SetSensorValue(bool, unsigned short)+0x178>
   1796c:	e51b3010 	ldr	r3, [fp, #-16]
   17970:	e3a02009 	mov	r2, #9
   17974:	e5c32017 	strb	r2, [r3, #23]
   17978:	e51b3010 	ldr	r3, [fp, #-16]
   1797c:	e3a02021 	mov	r2, #33	; 0x21
   17980:	e5c32002 	strb	r2, [r3, #2]
   17984:	e51b3010 	ldr	r3, [fp, #-16]
   17988:	e3a02000 	mov	r2, #0
   1798c:	e5c32018 	strb	r2, [r3, #24]
   17990:	e51b3010 	ldr	r3, [fp, #-16]
   17994:	e3a02000 	mov	r2, #0
   17998:	e5c32019 	strb	r2, [r3, #25]
   1799c:	e51b3010 	ldr	r3, [fp, #-16]
   179a0:	e3a02000 	mov	r2, #0
   179a4:	e5c3201a 	strb	r2, [r3, #26]
   179a8:	e51b3010 	ldr	r3, [fp, #-16]
   179ac:	e3a02000 	mov	r2, #0
   179b0:	e5c3201b 	strb	r2, [r3, #27]
   179b4:	e51b3010 	ldr	r3, [fp, #-16]
   179b8:	e3a02000 	mov	r2, #0
   179bc:	e5c3201c 	strb	r2, [r3, #28]
   179c0:	e51b3010 	ldr	r3, [fp, #-16]
   179c4:	e3a02000 	mov	r2, #0
   179c8:	e5c3201d 	strb	r2, [r3, #29]
   179cc:	e51b3010 	ldr	r3, [fp, #-16]
   179d0:	e3a02000 	mov	r2, #0
   179d4:	e5c3201e 	strb	r2, [r3, #30]
   179d8:	e51b3010 	ldr	r3, [fp, #-16]
   179dc:	e3a02000 	mov	r2, #0
   179e0:	e5c3201f 	strb	r2, [r3, #31]
   179e4:	e51b3010 	ldr	r3, [fp, #-16]
   179e8:	e3a02000 	mov	r2, #0
   179ec:	e5c32020 	strb	r2, [r3, #32]
   179f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   179f4:	ebfff865 	bl	15b90 <RDMHandler::RespondMessageAck()>
   179f8:	ea000040 	b	17b00 <RDMHandler::SetSensorValue(bool, unsigned short)+0x27c>
   179fc:	ebfff4f6 	bl	14ddc <RDMSensors::Get()>
   17a00:	e1a02000 	mov	r2, r0
   17a04:	e55b3009 	ldrb	r3, [fp, #-9]
   17a08:	e1a01003 	mov	r1, r3
   17a0c:	e1a00002 	mov	r0, r2
   17a10:	eb000b0c 	bl	1a648 <RDMSensors::GetValues(unsigned char)>
   17a14:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
   17a18:	e51b3010 	ldr	r3, [fp, #-16]
   17a1c:	e3a02009 	mov	r2, #9
   17a20:	e5c32017 	strb	r2, [r3, #23]
   17a24:	e51b3010 	ldr	r3, [fp, #-16]
   17a28:	e3a02021 	mov	r2, #33	; 0x21
   17a2c:	e5c32002 	strb	r2, [r3, #2]
   17a30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   17a34:	e5d32008 	ldrb	r2, [r3, #8]
   17a38:	e51b3010 	ldr	r3, [fp, #-16]
   17a3c:	e5c32018 	strb	r2, [r3, #24]
   17a40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   17a44:	e1d330f0 	ldrsh	r3, [r3]
   17a48:	e1a03443 	asr	r3, r3, #8
   17a4c:	e6ef2073 	uxtb	r2, r3
   17a50:	e51b3010 	ldr	r3, [fp, #-16]
   17a54:	e5c32019 	strb	r2, [r3, #25]
   17a58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   17a5c:	e1d330f0 	ldrsh	r3, [r3]
   17a60:	e6ef2073 	uxtb	r2, r3
   17a64:	e51b3010 	ldr	r3, [fp, #-16]
   17a68:	e5c3201a 	strb	r2, [r3, #26]
   17a6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   17a70:	e1d330f2 	ldrsh	r3, [r3, #2]
   17a74:	e1a03443 	asr	r3, r3, #8
   17a78:	e6ef2073 	uxtb	r2, r3
   17a7c:	e51b3010 	ldr	r3, [fp, #-16]
   17a80:	e5c3201b 	strb	r2, [r3, #27]
   17a84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   17a88:	e1d330f2 	ldrsh	r3, [r3, #2]
   17a8c:	e6ef2073 	uxtb	r2, r3
   17a90:	e51b3010 	ldr	r3, [fp, #-16]
   17a94:	e5c3201c 	strb	r2, [r3, #28]
   17a98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   17a9c:	e1d330f4 	ldrsh	r3, [r3, #4]
   17aa0:	e1a03443 	asr	r3, r3, #8
   17aa4:	e6ef2073 	uxtb	r2, r3
   17aa8:	e51b3010 	ldr	r3, [fp, #-16]
   17aac:	e5c3201d 	strb	r2, [r3, #29]
   17ab0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   17ab4:	e1d330f4 	ldrsh	r3, [r3, #4]
   17ab8:	e6ef2073 	uxtb	r2, r3
   17abc:	e51b3010 	ldr	r3, [fp, #-16]
   17ac0:	e5c3201e 	strb	r2, [r3, #30]
   17ac4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   17ac8:	e1d330f6 	ldrsh	r3, [r3, #6]
   17acc:	e1a03443 	asr	r3, r3, #8
   17ad0:	e6ef2073 	uxtb	r2, r3
   17ad4:	e51b3010 	ldr	r3, [fp, #-16]
   17ad8:	e5c3201f 	strb	r2, [r3, #31]
   17adc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   17ae0:	e1d330f6 	ldrsh	r3, [r3, #6]
   17ae4:	e6ef2073 	uxtb	r2, r3
   17ae8:	e51b3010 	ldr	r3, [fp, #-16]
   17aec:	e5c32020 	strb	r2, [r3, #32]
   17af0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17af4:	ebfff825 	bl	15b90 <RDMHandler::RespondMessageAck()>
   17af8:	ea000000 	b	17b00 <RDMHandler::SetSensorValue(bool, unsigned short)+0x27c>
   17afc:	e1a00000 	nop			; (mov r0, r0)
   17b00:	e24bd004 	sub	sp, fp, #4
   17b04:	e8bd8800 	pop	{fp, pc}

00017b08 <RDMHandler::SetRecordSensors(bool, unsigned short)>:
   17b08:	e92d4800 	push	{fp, lr}
   17b0c:	e28db004 	add	fp, sp, #4
   17b10:	e24dd018 	sub	sp, sp, #24
   17b14:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   17b18:	e1a03001 	mov	r3, r1
   17b1c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   17b20:	e1a03002 	mov	r3, r2
   17b24:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
   17b28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b2c:	e5933004 	ldr	r3, [r3, #4]
   17b30:	e50b3008 	str	r3, [fp, #-8]
   17b34:	e51b3008 	ldr	r3, [fp, #-8]
   17b38:	e5d33016 	ldrb	r3, [r3, #22]
   17b3c:	e3530001 	cmp	r3, #1
   17b40:	0a000003 	beq	17b54 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x4c>
   17b44:	e3a01001 	mov	r1, #1
   17b48:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17b4c:	ebfff824 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   17b50:	ea00003d 	b	17c4c <RDMHandler::SetRecordSensors(bool, unsigned short)+0x144>
   17b54:	e51b3008 	ldr	r3, [fp, #-8]
   17b58:	e5d33017 	ldrb	r3, [r3, #23]
   17b5c:	e54b3009 	strb	r3, [fp, #-9]
   17b60:	e55b3009 	ldrb	r3, [fp, #-9]
   17b64:	e35300ff 	cmp	r3, #255	; 0xff
   17b68:	1a000008 	bne	17b90 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x88>
   17b6c:	ebfff49a 	bl	14ddc <RDMSensors::Get()>
   17b70:	e1a03000 	mov	r3, r0
   17b74:	e1a00003 	mov	r0, r3
   17b78:	ebfff0e2 	bl	13f08 <RDMSensors::GetCount() const>
   17b7c:	e1a03000 	mov	r3, r0
   17b80:	e3530000 	cmp	r3, #0
   17b84:	1a000001 	bne	17b90 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x88>
   17b88:	e3a03001 	mov	r3, #1
   17b8c:	ea000000 	b	17b94 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x8c>
   17b90:	e3a03000 	mov	r3, #0
   17b94:	e3530000 	cmp	r3, #0
   17b98:	0a000003 	beq	17bac <RDMHandler::SetRecordSensors(bool, unsigned short)+0xa4>
   17b9c:	e3a01006 	mov	r1, #6
   17ba0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17ba4:	ebfff80e 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   17ba8:	ea000027 	b	17c4c <RDMHandler::SetRecordSensors(bool, unsigned short)+0x144>
   17bac:	e55b3009 	ldrb	r3, [fp, #-9]
   17bb0:	e35300ff 	cmp	r3, #255	; 0xff
   17bb4:	0a00000a 	beq	17be4 <RDMHandler::SetRecordSensors(bool, unsigned short)+0xdc>
   17bb8:	ebfff487 	bl	14ddc <RDMSensors::Get()>
   17bbc:	e1a03000 	mov	r3, r0
   17bc0:	e1a00003 	mov	r0, r3
   17bc4:	ebfff0cf 	bl	13f08 <RDMSensors::GetCount() const>
   17bc8:	e1a03000 	mov	r3, r0
   17bcc:	e1a02003 	mov	r2, r3
   17bd0:	e55b3009 	ldrb	r3, [fp, #-9]
   17bd4:	e1530002 	cmp	r3, r2
   17bd8:	3a000001 	bcc	17be4 <RDMHandler::SetRecordSensors(bool, unsigned short)+0xdc>
   17bdc:	e3a03001 	mov	r3, #1
   17be0:	ea000000 	b	17be8 <RDMHandler::SetRecordSensors(bool, unsigned short)+0xe0>
   17be4:	e3a03000 	mov	r3, #0
   17be8:	e3530000 	cmp	r3, #0
   17bec:	0a000003 	beq	17c00 <RDMHandler::SetRecordSensors(bool, unsigned short)+0xf8>
   17bf0:	e3a01006 	mov	r1, #6
   17bf4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17bf8:	ebfff7f9 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   17bfc:	ea000012 	b	17c4c <RDMHandler::SetRecordSensors(bool, unsigned short)+0x144>
   17c00:	ebfff475 	bl	14ddc <RDMSensors::Get()>
   17c04:	e1a02000 	mov	r2, r0
   17c08:	e55b3009 	ldrb	r3, [fp, #-9]
   17c0c:	e1a01003 	mov	r1, r3
   17c10:	e1a00002 	mov	r0, r2
   17c14:	eb000ac5 	bl	1a730 <RDMSensors::SetRecord(unsigned char)>
   17c18:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   17c1c:	e3530000 	cmp	r3, #0
   17c20:	1a000008 	bne	17c48 <RDMHandler::SetRecordSensors(bool, unsigned short)+0x140>
   17c24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c28:	e5933008 	ldr	r3, [r3, #8]
   17c2c:	e50b3010 	str	r3, [fp, #-16]
   17c30:	e51b3010 	ldr	r3, [fp, #-16]
   17c34:	e3a02000 	mov	r2, #0
   17c38:	e5c32017 	strb	r2, [r3, #23]
   17c3c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17c40:	ebfff7d2 	bl	15b90 <RDMHandler::RespondMessageAck()>
   17c44:	ea000000 	b	17c4c <RDMHandler::SetRecordSensors(bool, unsigned short)+0x144>
   17c48:	e1a00000 	nop			; (mov r0, r0)
   17c4c:	e24bd004 	sub	sp, fp, #4
   17c50:	e8bd8800 	pop	{fp, pc}

00017c54 <RDMHandler::GetDeviceHours(unsigned short)>:
   17c54:	e92d4800 	push	{fp, lr}
   17c58:	e28db004 	add	fp, sp, #4
   17c5c:	e24dd018 	sub	sp, sp, #24
   17c60:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   17c64:	e1a03001 	mov	r3, r1
   17c68:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
   17c6c:	ebffe663 	bl	11600 <Hardware::Get()>
   17c70:	e1a03000 	mov	r3, r0
   17c74:	e1a00003 	mov	r0, r3
   17c78:	eb009fea 	bl	3fc28 <Hardware::GetUpTime()>
   17c7c:	e1a02000 	mov	r2, r0
   17c80:	e59f30d8 	ldr	r3, [pc, #216]	; 17d60 <RDMHandler::GetDeviceHours(unsigned short)+0x10c>
   17c84:	e0832293 	umull	r2, r3, r3, r2
   17c88:	e1a035a3 	lsr	r3, r3, #11
   17c8c:	e1a02003 	mov	r2, r3
   17c90:	e3a03000 	mov	r3, #0
   17c94:	e14b20fc 	strd	r2, [fp, #-12]
   17c98:	e14b20dc 	ldrd	r2, [fp, #-12]
   17c9c:	e3e00000 	mvn	r0, #0
   17ca0:	e3a01000 	mov	r1, #0
   17ca4:	e1530001 	cmp	r3, r1
   17ca8:	01520000 	cmpeq	r2, r0
   17cac:	9a000002 	bls	17cbc <RDMHandler::GetDeviceHours(unsigned short)+0x68>
   17cb0:	e3e02000 	mvn	r2, #0
   17cb4:	e3a03000 	mov	r3, #0
   17cb8:	e14b20fc 	strd	r2, [fp, #-12]
   17cbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17cc0:	e5933008 	ldr	r3, [r3, #8]
   17cc4:	e50b3010 	str	r3, [fp, #-16]
   17cc8:	e51b3010 	ldr	r3, [fp, #-16]
   17ccc:	e3a02004 	mov	r2, #4
   17cd0:	e5c32017 	strb	r2, [r3, #23]
   17cd4:	e14b00dc 	ldrd	r0, [fp, #-12]
   17cd8:	e3a02000 	mov	r2, #0
   17cdc:	e3a03000 	mov	r3, #0
   17ce0:	e1a02c20 	lsr	r2, r0, #24
   17ce4:	e1822401 	orr	r2, r2, r1, lsl #8
   17ce8:	e1a03c21 	lsr	r3, r1, #24
   17cec:	e6ef2072 	uxtb	r2, r2
   17cf0:	e51b3010 	ldr	r3, [fp, #-16]
   17cf4:	e5c32018 	strb	r2, [r3, #24]
   17cf8:	e14b00dc 	ldrd	r0, [fp, #-12]
   17cfc:	e3a02000 	mov	r2, #0
   17d00:	e3a03000 	mov	r3, #0
   17d04:	e1a02820 	lsr	r2, r0, #16
   17d08:	e1822801 	orr	r2, r2, r1, lsl #16
   17d0c:	e1a03821 	lsr	r3, r1, #16
   17d10:	e6ef2072 	uxtb	r2, r2
   17d14:	e51b3010 	ldr	r3, [fp, #-16]
   17d18:	e5c32019 	strb	r2, [r3, #25]
   17d1c:	e14b00dc 	ldrd	r0, [fp, #-12]
   17d20:	e3a02000 	mov	r2, #0
   17d24:	e3a03000 	mov	r3, #0
   17d28:	e1a02420 	lsr	r2, r0, #8
   17d2c:	e1822c01 	orr	r2, r2, r1, lsl #24
   17d30:	e1a03421 	lsr	r3, r1, #8
   17d34:	e6ef2072 	uxtb	r2, r2
   17d38:	e51b3010 	ldr	r3, [fp, #-16]
   17d3c:	e5c3201a 	strb	r2, [r3, #26]
   17d40:	e55b200c 	ldrb	r2, [fp, #-12]
   17d44:	e51b3010 	ldr	r3, [fp, #-16]
   17d48:	e5c3201b 	strb	r2, [r3, #27]
   17d4c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17d50:	ebfff78e 	bl	15b90 <RDMHandler::RespondMessageAck()>
   17d54:	e1a00000 	nop			; (mov r0, r0)
   17d58:	e24bd004 	sub	sp, fp, #4
   17d5c:	e8bd8800 	pop	{fp, pc}
   17d60:	91a2b3c5 	.word	0x91a2b3c5

00017d64 <RDMHandler::SetDeviceHours(bool, unsigned short)>:
   17d64:	e92d4800 	push	{fp, lr}
   17d68:	e28db004 	add	fp, sp, #4
   17d6c:	e24dd008 	sub	sp, sp, #8
   17d70:	e50b0008 	str	r0, [fp, #-8]
   17d74:	e1a03001 	mov	r3, r1
   17d78:	e54b3009 	strb	r3, [fp, #-9]
   17d7c:	e1a03002 	mov	r3, r2
   17d80:	e14b30bc 	strh	r3, [fp, #-12]
   17d84:	e3a01004 	mov	r1, #4
   17d88:	e51b0008 	ldr	r0, [fp, #-8]
   17d8c:	ebfff794 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   17d90:	e1a00000 	nop			; (mov r0, r0)
   17d94:	e24bd004 	sub	sp, fp, #4
   17d98:	e8bd8800 	pop	{fp, pc}

00017d9c <RDMHandler::GetDisplayInvert(unsigned short)>:
   17d9c:	e92d4800 	push	{fp, lr}
   17da0:	e28db004 	add	fp, sp, #4
   17da4:	e24dd010 	sub	sp, sp, #16
   17da8:	e50b0010 	str	r0, [fp, #-16]
   17dac:	e1a03001 	mov	r3, r1
   17db0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   17db4:	e51b3010 	ldr	r3, [fp, #-16]
   17db8:	e5933008 	ldr	r3, [r3, #8]
   17dbc:	e50b3008 	str	r3, [fp, #-8]
   17dc0:	e51b3008 	ldr	r3, [fp, #-8]
   17dc4:	e3a02001 	mov	r2, #1
   17dc8:	e5c32017 	strb	r2, [r3, #23]
   17dcc:	ebffe907 	bl	121f0 <Display::Get()>
   17dd0:	e1a03000 	mov	r3, r0
   17dd4:	e1a00003 	mov	r0, r3
   17dd8:	ebfff663 	bl	1576c <Display::GetFlipVertically() const>
   17ddc:	e1a03000 	mov	r3, r0
   17de0:	e3530000 	cmp	r3, #0
   17de4:	0a000001 	beq	17df0 <RDMHandler::GetDisplayInvert(unsigned short)+0x54>
   17de8:	e3a02001 	mov	r2, #1
   17dec:	ea000000 	b	17df4 <RDMHandler::GetDisplayInvert(unsigned short)+0x58>
   17df0:	e3a02000 	mov	r2, #0
   17df4:	e51b3008 	ldr	r3, [fp, #-8]
   17df8:	e5c32018 	strb	r2, [r3, #24]
   17dfc:	e51b0010 	ldr	r0, [fp, #-16]
   17e00:	ebfff762 	bl	15b90 <RDMHandler::RespondMessageAck()>
   17e04:	e1a00000 	nop			; (mov r0, r0)
   17e08:	e24bd004 	sub	sp, fp, #4
   17e0c:	e8bd8800 	pop	{fp, pc}

00017e10 <RDMHandler::SetDisplayInvert(bool, unsigned short)>:
   17e10:	e92d4800 	push	{fp, lr}
   17e14:	e28db004 	add	fp, sp, #4
   17e18:	e24dd018 	sub	sp, sp, #24
   17e1c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   17e20:	e1a03001 	mov	r3, r1
   17e24:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   17e28:	e1a03002 	mov	r3, r2
   17e2c:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
   17e30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17e34:	e5933004 	ldr	r3, [r3, #4]
   17e38:	e50b3008 	str	r3, [fp, #-8]
   17e3c:	e51b3008 	ldr	r3, [fp, #-8]
   17e40:	e5d33016 	ldrb	r3, [r3, #22]
   17e44:	e3530001 	cmp	r3, #1
   17e48:	0a000003 	beq	17e5c <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x4c>
   17e4c:	e3a01001 	mov	r1, #1
   17e50:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17e54:	ebfff762 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   17e58:	ea00001a 	b	17ec8 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0xb8>
   17e5c:	e51b3008 	ldr	r3, [fp, #-8]
   17e60:	e5d33017 	ldrb	r3, [r3, #23]
   17e64:	e54b3009 	strb	r3, [fp, #-9]
   17e68:	e55b3009 	ldrb	r3, [fp, #-9]
   17e6c:	e3530002 	cmp	r3, #2
   17e70:	1a000002 	bne	17e80 <RDMHandler::SetDisplayInvert(bool, unsigned short)+0x70>
   17e74:	e3a01006 	mov	r1, #6
   17e78:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17e7c:	ebfff758 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   17e80:	ebffe8da 	bl	121f0 <Display::Get()>
   17e84:	e1a02000 	mov	r2, r0
   17e88:	e55b3009 	ldrb	r3, [fp, #-9]
   17e8c:	e3530001 	cmp	r3, #1
   17e90:	03a03001 	moveq	r3, #1
   17e94:	13a03000 	movne	r3, #0
   17e98:	e6ef3073 	uxtb	r3, r3
   17e9c:	e1a01003 	mov	r1, r3
   17ea0:	e1a00002 	mov	r0, r2
   17ea4:	ebfff618 	bl	1570c <Display::SetFlipVertically(bool)>
   17ea8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17eac:	e5933008 	ldr	r3, [r3, #8]
   17eb0:	e50b3010 	str	r3, [fp, #-16]
   17eb4:	e51b3010 	ldr	r3, [fp, #-16]
   17eb8:	e3a02000 	mov	r2, #0
   17ebc:	e5c32017 	strb	r2, [r3, #23]
   17ec0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17ec4:	ebfff731 	bl	15b90 <RDMHandler::RespondMessageAck()>
   17ec8:	e24bd004 	sub	sp, fp, #4
   17ecc:	e8bd8800 	pop	{fp, pc}

00017ed0 <RDMHandler::GetDisplayLevel(unsigned short)>:
   17ed0:	e92d4800 	push	{fp, lr}
   17ed4:	e28db004 	add	fp, sp, #4
   17ed8:	e24dd010 	sub	sp, sp, #16
   17edc:	e50b0010 	str	r0, [fp, #-16]
   17ee0:	e1a03001 	mov	r3, r1
   17ee4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   17ee8:	e51b3010 	ldr	r3, [fp, #-16]
   17eec:	e5933008 	ldr	r3, [r3, #8]
   17ef0:	e50b3008 	str	r3, [fp, #-8]
   17ef4:	e51b3008 	ldr	r3, [fp, #-8]
   17ef8:	e3a02001 	mov	r2, #1
   17efc:	e5c32017 	strb	r2, [r3, #23]
   17f00:	ebffe8ba 	bl	121f0 <Display::Get()>
   17f04:	e1a03000 	mov	r3, r0
   17f08:	e1a00003 	mov	r0, r3
   17f0c:	ebfff629 	bl	157b8 <Display::GetContrast() const>
   17f10:	e1a03000 	mov	r3, r0
   17f14:	e1a02003 	mov	r2, r3
   17f18:	e51b3008 	ldr	r3, [fp, #-8]
   17f1c:	e5c32018 	strb	r2, [r3, #24]
   17f20:	e51b0010 	ldr	r0, [fp, #-16]
   17f24:	ebfff719 	bl	15b90 <RDMHandler::RespondMessageAck()>
   17f28:	e1a00000 	nop			; (mov r0, r0)
   17f2c:	e24bd004 	sub	sp, fp, #4
   17f30:	e8bd8800 	pop	{fp, pc}

00017f34 <RDMHandler::SetDisplayLevel(bool, unsigned short)>:
   17f34:	e92d4800 	push	{fp, lr}
   17f38:	e28db004 	add	fp, sp, #4
   17f3c:	e24dd018 	sub	sp, sp, #24
   17f40:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   17f44:	e1a03001 	mov	r3, r1
   17f48:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   17f4c:	e1a03002 	mov	r3, r2
   17f50:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
   17f54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f58:	e5933004 	ldr	r3, [r3, #4]
   17f5c:	e50b3008 	str	r3, [fp, #-8]
   17f60:	e51b3008 	ldr	r3, [fp, #-8]
   17f64:	e5d33016 	ldrb	r3, [r3, #22]
   17f68:	e3530001 	cmp	r3, #1
   17f6c:	0a000003 	beq	17f80 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x4c>
   17f70:	e3a01001 	mov	r1, #1
   17f74:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17f78:	ebfff719 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   17f7c:	ea00001e 	b	17ffc <RDMHandler::SetDisplayLevel(bool, unsigned short)+0xc8>
   17f80:	e51b3008 	ldr	r3, [fp, #-8]
   17f84:	e5d33017 	ldrb	r3, [r3, #23]
   17f88:	e54b3009 	strb	r3, [fp, #-9]
   17f8c:	e55b3009 	ldrb	r3, [fp, #-9]
   17f90:	e3530000 	cmp	r3, #0
   17f94:	0a000005 	beq	17fb0 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x7c>
   17f98:	ebffe894 	bl	121f0 <Display::Get()>
   17f9c:	e1a03000 	mov	r3, r0
   17fa0:	e3a01000 	mov	r1, #0
   17fa4:	e1a00003 	mov	r0, r3
   17fa8:	ebffe834 	bl	12080 <Display::SetSleep(bool)>
   17fac:	ea000004 	b	17fc4 <RDMHandler::SetDisplayLevel(bool, unsigned short)+0x90>
   17fb0:	ebffe88e 	bl	121f0 <Display::Get()>
   17fb4:	e1a03000 	mov	r3, r0
   17fb8:	e3a01001 	mov	r1, #1
   17fbc:	e1a00003 	mov	r0, r3
   17fc0:	ebffe82e 	bl	12080 <Display::SetSleep(bool)>
   17fc4:	ebffe889 	bl	121f0 <Display::Get()>
   17fc8:	e1a02000 	mov	r2, r0
   17fcc:	e55b3009 	ldrb	r3, [fp, #-9]
   17fd0:	e1a01003 	mov	r1, r3
   17fd4:	e1a00002 	mov	r0, r2
   17fd8:	ebfff5b3 	bl	156ac <Display::SetContrast(unsigned char)>
   17fdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   17fe0:	e5933008 	ldr	r3, [r3, #8]
   17fe4:	e50b3010 	str	r3, [fp, #-16]
   17fe8:	e51b3010 	ldr	r3, [fp, #-16]
   17fec:	e3a02000 	mov	r2, #0
   17ff0:	e5c32017 	strb	r2, [r3, #23]
   17ff4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   17ff8:	ebfff6e4 	bl	15b90 <RDMHandler::RespondMessageAck()>
   17ffc:	e24bd004 	sub	sp, fp, #4
   18000:	e8bd8800 	pop	{fp, pc}

00018004 <RDMHandler::GetRealTimeClock(unsigned short)>:
   18004:	e92d4800 	push	{fp, lr}
   18008:	e28db004 	add	fp, sp, #4
   1800c:	e24dd040 	sub	sp, sp, #64	; 0x40
   18010:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
   18014:	e1a03001 	mov	r3, r1
   18018:	e14b34b2 	strh	r3, [fp, #-66]	; 0xffffffbe
   1801c:	ebffe577 	bl	11600 <Hardware::Get()>
   18020:	e1a02000 	mov	r2, r0
   18024:	e24b3038 	sub	r3, fp, #56	; 0x38
   18028:	e1a01003 	mov	r1, r3
   1802c:	e1a00002 	mov	r0, r2
   18030:	eb009f46 	bl	3fd50 <Hardware::GetTime(tm*)>
   18034:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   18038:	e6ff3073 	uxth	r3, r3
   1803c:	e2833e76 	add	r3, r3, #1888	; 0x760
   18040:	e283300c 	add	r3, r3, #12
   18044:	e14b30b6 	strh	r3, [fp, #-6]
   18048:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   1804c:	e5933008 	ldr	r3, [r3, #8]
   18050:	e50b300c 	str	r3, [fp, #-12]
   18054:	e15b30b6 	ldrh	r3, [fp, #-6]
   18058:	e1a03443 	asr	r3, r3, #8
   1805c:	e6ef2073 	uxtb	r2, r3
   18060:	e51b300c 	ldr	r3, [fp, #-12]
   18064:	e5c32018 	strb	r2, [r3, #24]
   18068:	e15b30b6 	ldrh	r3, [fp, #-6]
   1806c:	e6ef2073 	uxtb	r2, r3
   18070:	e51b300c 	ldr	r3, [fp, #-12]
   18074:	e5c32019 	strb	r2, [r3, #25]
   18078:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1807c:	e6ef3073 	uxtb	r3, r3
   18080:	e2833001 	add	r3, r3, #1
   18084:	e6ef2073 	uxtb	r2, r3
   18088:	e51b300c 	ldr	r3, [fp, #-12]
   1808c:	e5c3201a 	strb	r2, [r3, #26]
   18090:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   18094:	e6ef2073 	uxtb	r2, r3
   18098:	e51b300c 	ldr	r3, [fp, #-12]
   1809c:	e5c3201b 	strb	r2, [r3, #27]
   180a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   180a4:	e6ef2073 	uxtb	r2, r3
   180a8:	e51b300c 	ldr	r3, [fp, #-12]
   180ac:	e5c3201c 	strb	r2, [r3, #28]
   180b0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   180b4:	e6ef2073 	uxtb	r2, r3
   180b8:	e51b300c 	ldr	r3, [fp, #-12]
   180bc:	e5c3201d 	strb	r2, [r3, #29]
   180c0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   180c4:	e6ef2073 	uxtb	r2, r3
   180c8:	e51b300c 	ldr	r3, [fp, #-12]
   180cc:	e5c3201e 	strb	r2, [r3, #30]
   180d0:	e51b300c 	ldr	r3, [fp, #-12]
   180d4:	e3a02007 	mov	r2, #7
   180d8:	e5c32017 	strb	r2, [r3, #23]
   180dc:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
   180e0:	ebfff6aa 	bl	15b90 <RDMHandler::RespondMessageAck()>
   180e4:	e1a00000 	nop			; (mov r0, r0)
   180e8:	e24bd004 	sub	sp, fp, #4
   180ec:	e8bd8800 	pop	{fp, pc}

000180f0 <RDMHandler::SetRealTimeClock(bool, unsigned short)>:
   180f0:	e92d4800 	push	{fp, lr}
   180f4:	e28db004 	add	fp, sp, #4
   180f8:	e24dd040 	sub	sp, sp, #64	; 0x40
   180fc:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
   18100:	e1a03001 	mov	r3, r1
   18104:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
   18108:	e1a03002 	mov	r3, r2
   1810c:	e14b34b4 	strh	r3, [fp, #-68]	; 0xffffffbc
   18110:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   18114:	e5933004 	ldr	r3, [r3, #4]
   18118:	e50b3008 	str	r3, [fp, #-8]
   1811c:	e51b3008 	ldr	r3, [fp, #-8]
   18120:	e5d33016 	ldrb	r3, [r3, #22]
   18124:	e3530007 	cmp	r3, #7
   18128:	0a000003 	beq	1813c <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x4c>
   1812c:	e3a01001 	mov	r1, #1
   18130:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
   18134:	ebfff6aa 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   18138:	ea00003d 	b	18234 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x144>
   1813c:	e51b3008 	ldr	r3, [fp, #-8]
   18140:	e5d33017 	ldrb	r3, [r3, #23]
   18144:	e1a03403 	lsl	r3, r3, #8
   18148:	e51b2008 	ldr	r2, [fp, #-8]
   1814c:	e5d22018 	ldrb	r2, [r2, #24]
   18150:	e0833002 	add	r3, r3, r2
   18154:	e2433e76 	sub	r3, r3, #1888	; 0x760
   18158:	e243300c 	sub	r3, r3, #12
   1815c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   18160:	e51b3008 	ldr	r3, [fp, #-8]
   18164:	e5d33019 	ldrb	r3, [r3, #25]
   18168:	e2433001 	sub	r3, r3, #1
   1816c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
   18170:	e51b3008 	ldr	r3, [fp, #-8]
   18174:	e5d3301a 	ldrb	r3, [r3, #26]
   18178:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   1817c:	e51b3008 	ldr	r3, [fp, #-8]
   18180:	e5d3301b 	ldrb	r3, [r3, #27]
   18184:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
   18188:	e51b3008 	ldr	r3, [fp, #-8]
   1818c:	e5d3301c 	ldrb	r3, [r3, #28]
   18190:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   18194:	e51b3008 	ldr	r3, [fp, #-8]
   18198:	e5d3301d 	ldrb	r3, [r3, #29]
   1819c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
   181a0:	e55b3041 	ldrb	r3, [fp, #-65]	; 0xffffffbf
   181a4:	e2233001 	eor	r3, r3, #1
   181a8:	e6ef3073 	uxtb	r3, r3
   181ac:	e3530000 	cmp	r3, #0
   181b0:	0a00000c 	beq	181e8 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0xf8>
   181b4:	ebffe511 	bl	11600 <Hardware::Get()>
   181b8:	e1a02000 	mov	r2, r0
   181bc:	e24b3038 	sub	r3, fp, #56	; 0x38
   181c0:	e1a01003 	mov	r1, r3
   181c4:	e1a00002 	mov	r0, r2
   181c8:	eb009ec6 	bl	3fce8 <Hardware::SetTime(tm const*)>
   181cc:	e1a03000 	mov	r3, r0
   181d0:	e2233001 	eor	r3, r3, #1
   181d4:	e6ef3073 	uxtb	r3, r3
   181d8:	e3530000 	cmp	r3, #0
   181dc:	0a000001 	beq	181e8 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0xf8>
   181e0:	e3a03001 	mov	r3, #1
   181e4:	ea000000 	b	181ec <RDMHandler::SetRealTimeClock(bool, unsigned short)+0xfc>
   181e8:	e3a03000 	mov	r3, #0
   181ec:	e3530000 	cmp	r3, #0
   181f0:	0a000002 	beq	18200 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x110>
   181f4:	e3a01004 	mov	r1, #4
   181f8:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
   181fc:	ebfff678 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   18200:	e55b3041 	ldrb	r3, [fp, #-65]	; 0xffffffbf
   18204:	e3530000 	cmp	r3, #0
   18208:	1a000008 	bne	18230 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x140>
   1820c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   18210:	e5933008 	ldr	r3, [r3, #8]
   18214:	e50b300c 	str	r3, [fp, #-12]
   18218:	e51b300c 	ldr	r3, [fp, #-12]
   1821c:	e3a02000 	mov	r2, #0
   18220:	e5c32017 	strb	r2, [r3, #23]
   18224:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
   18228:	ebfff658 	bl	15b90 <RDMHandler::RespondMessageAck()>
   1822c:	ea000000 	b	18234 <RDMHandler::SetRealTimeClock(bool, unsigned short)+0x144>
   18230:	e1a00000 	nop			; (mov r0, r0)
   18234:	e24bd004 	sub	sp, fp, #4
   18238:	e8bd8800 	pop	{fp, pc}

0001823c <RDMHandler::GetPowerState(unsigned short)>:
   1823c:	e92d4800 	push	{fp, lr}
   18240:	e28db004 	add	fp, sp, #4
   18244:	e24dd010 	sub	sp, sp, #16
   18248:	e50b0010 	str	r0, [fp, #-16]
   1824c:	e1a03001 	mov	r3, r1
   18250:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   18254:	e51b3010 	ldr	r3, [fp, #-16]
   18258:	e5933008 	ldr	r3, [r3, #8]
   1825c:	e50b3008 	str	r3, [fp, #-8]
   18260:	e51b3008 	ldr	r3, [fp, #-8]
   18264:	e3a02001 	mov	r2, #1
   18268:	e5c32017 	strb	r2, [r3, #23]
   1826c:	e51b3008 	ldr	r3, [fp, #-8]
   18270:	e3e02000 	mvn	r2, #0
   18274:	e5c32018 	strb	r2, [r3, #24]
   18278:	e51b0010 	ldr	r0, [fp, #-16]
   1827c:	ebfff643 	bl	15b90 <RDMHandler::RespondMessageAck()>
   18280:	e1a00000 	nop			; (mov r0, r0)
   18284:	e24bd004 	sub	sp, fp, #4
   18288:	e8bd8800 	pop	{fp, pc}

0001828c <RDMHandler::SetPowerState(bool, unsigned short)>:
   1828c:	e92d4800 	push	{fp, lr}
   18290:	e28db004 	add	fp, sp, #4
   18294:	e24dd018 	sub	sp, sp, #24
   18298:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1829c:	e1a03001 	mov	r3, r1
   182a0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   182a4:	e1a03002 	mov	r3, r2
   182a8:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
   182ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   182b0:	e5933004 	ldr	r3, [r3, #4]
   182b4:	e50b3008 	str	r3, [fp, #-8]
   182b8:	e51b3008 	ldr	r3, [fp, #-8]
   182bc:	e5d33016 	ldrb	r3, [r3, #22]
   182c0:	e3530001 	cmp	r3, #1
   182c4:	0a000003 	beq	182d8 <RDMHandler::SetPowerState(bool, unsigned short)+0x4c>
   182c8:	e3a01001 	mov	r1, #1
   182cc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   182d0:	ebfff643 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   182d4:	ea00001b 	b	18348 <RDMHandler::SetPowerState(bool, unsigned short)+0xbc>
   182d8:	e51b3008 	ldr	r3, [fp, #-8]
   182dc:	e5d33017 	ldrb	r3, [r3, #23]
   182e0:	e54b3009 	strb	r3, [fp, #-9]
   182e4:	e55b3009 	ldrb	r3, [fp, #-9]
   182e8:	e35300ff 	cmp	r3, #255	; 0xff
   182ec:	0a000006 	beq	1830c <RDMHandler::SetPowerState(bool, unsigned short)+0x80>
   182f0:	e55b3009 	ldrb	r3, [fp, #-9]
   182f4:	e3530002 	cmp	r3, #2
   182f8:	9a000003 	bls	1830c <RDMHandler::SetPowerState(bool, unsigned short)+0x80>
   182fc:	e3a01006 	mov	r1, #6
   18300:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   18304:	ebfff636 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   18308:	ea00000e 	b	18348 <RDMHandler::SetPowerState(bool, unsigned short)+0xbc>
   1830c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   18310:	e5933008 	ldr	r3, [r3, #8]
   18314:	e50b3010 	str	r3, [fp, #-16]
   18318:	e55b3009 	ldrb	r3, [fp, #-9]
   1831c:	e35300ff 	cmp	r3, #255	; 0xff
   18320:	1a000005 	bne	1833c <RDMHandler::SetPowerState(bool, unsigned short)+0xb0>
   18324:	e51b3010 	ldr	r3, [fp, #-16]
   18328:	e3a02000 	mov	r2, #0
   1832c:	e5c32017 	strb	r2, [r3, #23]
   18330:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   18334:	ebfff615 	bl	15b90 <RDMHandler::RespondMessageAck()>
   18338:	ea000002 	b	18348 <RDMHandler::SetPowerState(bool, unsigned short)+0xbc>
   1833c:	e3a01004 	mov	r1, #4
   18340:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   18344:	ebfff626 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   18348:	e24bd004 	sub	sp, fp, #4
   1834c:	e8bd8800 	pop	{fp, pc}

00018350 <RDMHandler::GetSlotInfo(unsigned short)>:
   18350:	e92d4800 	push	{fp, lr}
   18354:	e28db004 	add	fp, sp, #4
   18358:	e24dd020 	sub	sp, sp, #32
   1835c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   18360:	e1a03001 	mov	r3, r1
   18364:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
   18368:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1836c:	e5933008 	ldr	r3, [r3, #8]
   18370:	e50b3010 	str	r3, [fp, #-16]
   18374:	ebfff4af 	bl	15638 <RDMDeviceResponder::Get()>
   18378:	e1a02000 	mov	r2, r0
   1837c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
   18380:	e1a01003 	mov	r1, r3
   18384:	e1a00002 	mov	r0, r2
   18388:	ebfff3ed 	bl	15344 <RDMDeviceResponder::GetDmxFootPrint(unsigned short)>
   1838c:	e1a03000 	mov	r3, r0
   18390:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
   18394:	e3a03000 	mov	r3, #0
   18398:	e50b3008 	str	r3, [fp, #-8]
   1839c:	e3a03000 	mov	r3, #0
   183a0:	e14b30ba 	strh	r3, [fp, #-10]
   183a4:	e3a0302e 	mov	r3, #46	; 0x2e
   183a8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   183ac:	e24b2012 	sub	r2, fp, #18
   183b0:	e24b3014 	sub	r3, fp, #20
   183b4:	e1a01002 	mov	r1, r2
   183b8:	e1a00003 	mov	r0, r3
   183bc:	eb0000ad 	bl	18678 <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)>
   183c0:	e1a03000 	mov	r3, r0
   183c4:	e1d330b0 	ldrh	r3, [r3]
   183c8:	e15b20ba 	ldrh	r2, [fp, #-10]
   183cc:	e1520003 	cmp	r2, r3
   183d0:	33a03001 	movcc	r3, #1
   183d4:	23a03000 	movcs	r3, #0
   183d8:	e6ef3073 	uxtb	r3, r3
   183dc:	e3530000 	cmp	r3, #0
   183e0:	0a000039 	beq	184cc <RDMHandler::GetSlotInfo(unsigned short)+0x17c>
   183e4:	ebfff493 	bl	15638 <RDMDeviceResponder::Get()>
   183e8:	e24b3018 	sub	r3, fp, #24
   183ec:	e15b20ba 	ldrh	r2, [fp, #-10]
   183f0:	e15b12b2 	ldrh	r1, [fp, #-34]	; 0xffffffde
   183f4:	ebfff3ab 	bl	152a8 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&)>
   183f8:	e1a03000 	mov	r3, r0
   183fc:	e3530000 	cmp	r3, #0
   18400:	0a00002d 	beq	184bc <RDMHandler::GetSlotInfo(unsigned short)+0x16c>
   18404:	e15b30ba 	ldrh	r3, [fp, #-10]
   18408:	e1a01443 	asr	r1, r3, #8
   1840c:	e51b3008 	ldr	r3, [fp, #-8]
   18410:	e2832001 	add	r2, r3, #1
   18414:	e50b2008 	str	r2, [fp, #-8]
   18418:	e6ef1071 	uxtb	r1, r1
   1841c:	e51b2010 	ldr	r2, [fp, #-16]
   18420:	e0823003 	add	r3, r2, r3
   18424:	e1a02001 	mov	r2, r1
   18428:	e5c32018 	strb	r2, [r3, #24]
   1842c:	e51b3008 	ldr	r3, [fp, #-8]
   18430:	e2832001 	add	r2, r3, #1
   18434:	e50b2008 	str	r2, [fp, #-8]
   18438:	e15b20ba 	ldrh	r2, [fp, #-10]
   1843c:	e6ef1072 	uxtb	r1, r2
   18440:	e51b2010 	ldr	r2, [fp, #-16]
   18444:	e0823003 	add	r3, r2, r3
   18448:	e1a02001 	mov	r2, r1
   1844c:	e5c32018 	strb	r2, [r3, #24]
   18450:	e51b3008 	ldr	r3, [fp, #-8]
   18454:	e2832001 	add	r2, r3, #1
   18458:	e50b2008 	str	r2, [fp, #-8]
   1845c:	e55b1016 	ldrb	r1, [fp, #-22]	; 0xffffffea
   18460:	e51b2010 	ldr	r2, [fp, #-16]
   18464:	e0823003 	add	r3, r2, r3
   18468:	e1a02001 	mov	r2, r1
   1846c:	e5c32018 	strb	r2, [r3, #24]
   18470:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
   18474:	e1a01443 	asr	r1, r3, #8
   18478:	e51b3008 	ldr	r3, [fp, #-8]
   1847c:	e2832001 	add	r2, r3, #1
   18480:	e50b2008 	str	r2, [fp, #-8]
   18484:	e6ef1071 	uxtb	r1, r1
   18488:	e51b2010 	ldr	r2, [fp, #-16]
   1848c:	e0823003 	add	r3, r2, r3
   18490:	e1a02001 	mov	r2, r1
   18494:	e5c32018 	strb	r2, [r3, #24]
   18498:	e15b11b8 	ldrh	r1, [fp, #-24]	; 0xffffffe8
   1849c:	e51b3008 	ldr	r3, [fp, #-8]
   184a0:	e2832001 	add	r2, r3, #1
   184a4:	e50b2008 	str	r2, [fp, #-8]
   184a8:	e6ef1071 	uxtb	r1, r1
   184ac:	e51b2010 	ldr	r2, [fp, #-16]
   184b0:	e0823003 	add	r3, r2, r3
   184b4:	e1a02001 	mov	r2, r1
   184b8:	e5c32018 	strb	r2, [r3, #24]
   184bc:	e15b30ba 	ldrh	r3, [fp, #-10]
   184c0:	e2833001 	add	r3, r3, #1
   184c4:	e14b30ba 	strh	r3, [fp, #-10]
   184c8:	eaffffb5 	b	183a4 <RDMHandler::GetSlotInfo(unsigned short)+0x54>
   184cc:	e51b3008 	ldr	r3, [fp, #-8]
   184d0:	e6ef2073 	uxtb	r2, r3
   184d4:	e51b3010 	ldr	r3, [fp, #-16]
   184d8:	e5c32017 	strb	r2, [r3, #23]
   184dc:	e51b3008 	ldr	r3, [fp, #-8]
   184e0:	e6ef3073 	uxtb	r3, r3
   184e4:	e2833018 	add	r3, r3, #24
   184e8:	e6ef2073 	uxtb	r2, r3
   184ec:	e51b3010 	ldr	r3, [fp, #-16]
   184f0:	e5c32002 	strb	r2, [r3, #2]
   184f4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   184f8:	ebfff5a4 	bl	15b90 <RDMHandler::RespondMessageAck()>
   184fc:	e1a00000 	nop			; (mov r0, r0)
   18500:	e24bd004 	sub	sp, fp, #4
   18504:	e8bd8800 	pop	{fp, pc}

00018508 <RDMHandler::GetSlotDescription(unsigned short)>:
   18508:	e92d4800 	push	{fp, lr}
   1850c:	e28db004 	add	fp, sp, #4
   18510:	e24dd028 	sub	sp, sp, #40	; 0x28
   18514:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   18518:	e1a03001 	mov	r3, r1
   1851c:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
   18520:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   18524:	e5933004 	ldr	r3, [r3, #4]
   18528:	e50b300c 	str	r3, [fp, #-12]
   1852c:	e51b300c 	ldr	r3, [fp, #-12]
   18530:	e5d33017 	ldrb	r3, [r3, #23]
   18534:	e6ff3073 	uxth	r3, r3
   18538:	e1a03403 	lsl	r3, r3, #8
   1853c:	e6ff2073 	uxth	r2, r3
   18540:	e51b300c 	ldr	r3, [fp, #-12]
   18544:	e5d33018 	ldrb	r3, [r3, #24]
   18548:	e6ff3073 	uxth	r3, r3
   1854c:	e0823003 	add	r3, r2, r3
   18550:	e14b30be 	strh	r3, [fp, #-14]
   18554:	ebfff437 	bl	15638 <RDMDeviceResponder::Get()>
   18558:	e24b301c 	sub	r3, fp, #28
   1855c:	e15b20be 	ldrh	r2, [fp, #-14]
   18560:	e15b12ba 	ldrh	r1, [fp, #-42]	; 0xffffffd6
   18564:	ebfff34f 	bl	152a8 <RDMDeviceResponder::GetSlotInfo(unsigned short, unsigned short, lightset::SlotInfo&)>
   18568:	e1a03000 	mov	r3, r0
   1856c:	e2233001 	eor	r3, r3, #1
   18570:	e6ef3073 	uxtb	r3, r3
   18574:	e3530000 	cmp	r3, #0
   18578:	0a000003 	beq	1858c <RDMHandler::GetSlotDescription(unsigned short)+0x84>
   1857c:	e3a01006 	mov	r1, #6
   18580:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   18584:	ebfff596 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   18588:	ea000038 	b	18670 <RDMHandler::GetSlotDescription(unsigned short)+0x168>
   1858c:	e15b11bc 	ldrh	r1, [fp, #-28]	; 0xffffffe4
   18590:	e24b2020 	sub	r2, fp, #32
   18594:	e15b30be 	ldrh	r3, [fp, #-14]
   18598:	e1a00003 	mov	r0, r3
   1859c:	eb000217 	bl	18e00 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>
   185a0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
   185a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   185a8:	e3530000 	cmp	r3, #0
   185ac:	1a000003 	bne	185c0 <RDMHandler::GetSlotDescription(unsigned short)+0xb8>
   185b0:	e3a01006 	mov	r1, #6
   185b4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   185b8:	ebfff589 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   185bc:	ea00002b 	b	18670 <RDMHandler::GetSlotDescription(unsigned short)+0x168>
   185c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   185c4:	e3530020 	cmp	r3, #32
   185c8:	9a000001 	bls	185d4 <RDMHandler::GetSlotDescription(unsigned short)+0xcc>
   185cc:	e3a03020 	mov	r3, #32
   185d0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   185d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   185d8:	e5933008 	ldr	r3, [r3, #8]
   185dc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   185e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   185e4:	e6ef3073 	uxtb	r3, r3
   185e8:	e2833002 	add	r3, r3, #2
   185ec:	e6ef2073 	uxtb	r2, r3
   185f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   185f4:	e5c32017 	strb	r2, [r3, #23]
   185f8:	e51b300c 	ldr	r3, [fp, #-12]
   185fc:	e5d32017 	ldrb	r2, [r3, #23]
   18600:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   18604:	e5c32018 	strb	r2, [r3, #24]
   18608:	e51b300c 	ldr	r3, [fp, #-12]
   1860c:	e5d32018 	ldrb	r2, [r3, #24]
   18610:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   18614:	e5c32019 	strb	r2, [r3, #25]
   18618:	e3a03000 	mov	r3, #0
   1861c:	e50b3008 	str	r3, [fp, #-8]
   18620:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   18624:	e51b2008 	ldr	r2, [fp, #-8]
   18628:	e1520003 	cmp	r2, r3
   1862c:	2a00000d 	bcs	18668 <RDMHandler::GetSlotDescription(unsigned short)+0x160>
   18630:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   18634:	e51b3008 	ldr	r3, [fp, #-8]
   18638:	e0822003 	add	r2, r2, r3
   1863c:	e51b3008 	ldr	r3, [fp, #-8]
   18640:	e2833002 	add	r3, r3, #2
   18644:	e5d21000 	ldrb	r1, [r2]
   18648:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1864c:	e0823003 	add	r3, r2, r3
   18650:	e1a02001 	mov	r2, r1
   18654:	e5c32018 	strb	r2, [r3, #24]
   18658:	e51b3008 	ldr	r3, [fp, #-8]
   1865c:	e2833001 	add	r3, r3, #1
   18660:	e50b3008 	str	r3, [fp, #-8]
   18664:	eaffffed 	b	18620 <RDMHandler::GetSlotDescription(unsigned short)+0x118>
   18668:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   1866c:	ebfff547 	bl	15b90 <RDMHandler::RespondMessageAck()>
   18670:	e24bd004 	sub	sp, fp, #4
   18674:	e8bd8800 	pop	{fp, pc}

00018678 <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)>:
   18678:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1867c:	e28db000 	add	fp, sp, #0
   18680:	e24dd00c 	sub	sp, sp, #12
   18684:	e50b0008 	str	r0, [fp, #-8]
   18688:	e50b100c 	str	r1, [fp, #-12]
   1868c:	e51b300c 	ldr	r3, [fp, #-12]
   18690:	e1d320b0 	ldrh	r2, [r3]
   18694:	e51b3008 	ldr	r3, [fp, #-8]
   18698:	e1d330b0 	ldrh	r3, [r3]
   1869c:	e1520003 	cmp	r2, r3
   186a0:	2a000001 	bcs	186ac <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)+0x34>
   186a4:	e51b300c 	ldr	r3, [fp, #-12]
   186a8:	ea000000 	b	186b0 <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)+0x38>
   186ac:	e51b3008 	ldr	r3, [fp, #-8]
   186b0:	e1a00003 	mov	r0, r3
   186b4:	e28bd000 	add	sp, fp, #0
   186b8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   186bc:	e12fff1e 	bx	lr

000186c0 <Network::GetIp() const>:
   186c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   186c4:	e28db000 	add	fp, sp, #0
   186c8:	e24dd00c 	sub	sp, sp, #12
   186cc:	e50b0008 	str	r0, [fp, #-8]
   186d0:	e51b3008 	ldr	r3, [fp, #-8]
   186d4:	e5933010 	ldr	r3, [r3, #16]
   186d8:	e1a00003 	mov	r0, r3
   186dc:	e28bd000 	add	sp, fp, #0
   186e0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   186e4:	e12fff1e 	bx	lr

000186e8 <Network::Get()>:
   186e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   186ec:	e28db000 	add	fp, sp, #0
   186f0:	e59f3010 	ldr	r3, [pc, #16]	; 18708 <Network::Get()+0x20>
   186f4:	e5933000 	ldr	r3, [r3]
   186f8:	e1a00003 	mov	r0, r3
   186fc:	e28bd000 	add	sp, fp, #0
   18700:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   18704:	e12fff1e 	bx	lr
   18708:	0005f2e0 	.word	0x0005f2e0

0001870c <Hardware::GetWebsiteUrl()>:
   1870c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   18710:	e28db000 	add	fp, sp, #0
   18714:	e24dd00c 	sub	sp, sp, #12
   18718:	e50b0008 	str	r0, [fp, #-8]
   1871c:	e59f300c 	ldr	r3, [pc, #12]	; 18730 <Hardware::GetWebsiteUrl()+0x24>
   18720:	e1a00003 	mov	r0, r3
   18724:	e28bd000 	add	sp, fp, #0
   18728:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1872c:	e12fff1e 	bx	lr
   18730:	00044cf4 	.word	0x00044cf4

00018734 <RDMDevice::RDMDevice()>:
   18734:	e92d4800 	push	{fp, lr}
   18738:	e28db004 	add	fp, sp, #4
   1873c:	e24dd030 	sub	sp, sp, #48	; 0x30
   18740:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   18744:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18748:	e3a02000 	mov	r2, #0
   1874c:	e5c32000 	strb	r2, [r3]
   18750:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18754:	e3a02000 	mov	r2, #0
   18758:	e5c32072 	strb	r2, [r3, #114]	; 0x72
   1875c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18760:	e3a02000 	mov	r2, #0
   18764:	e1c327b4 	strh	r2, [r3, #116]	; 0x74
   18768:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   1876c:	e3a02000 	mov	r2, #0
   18770:	e5832078 	str	r2, [r3, #120]	; 0x78
   18774:	e3a03020 	mov	r3, #32
   18778:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   1877c:	e59f01ec 	ldr	r0, [pc, #492]	; 18970 <RDMDevice::RDMDevice()+0x23c>
   18780:	ebffe328 	bl	11428 <strlen@plt>
   18784:	e1a03000 	mov	r3, r0
   18788:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   1878c:	e24b2020 	sub	r2, fp, #32
   18790:	e24b3024 	sub	r3, fp, #36	; 0x24
   18794:	e1a01002 	mov	r1, r2
   18798:	e1a00003 	mov	r0, r3
   1879c:	ebffeb08 	bl	133c4 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>
   187a0:	e1a03000 	mov	r3, r0
   187a4:	e5933000 	ldr	r3, [r3]
   187a8:	e50b3008 	str	r3, [fp, #-8]
   187ac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   187b0:	e283302c 	add	r3, r3, #44	; 0x2c
   187b4:	e51b2008 	ldr	r2, [fp, #-8]
   187b8:	e59f11b0 	ldr	r1, [pc, #432]	; 18970 <RDMDevice::RDMDevice()+0x23c>
   187bc:	e1a00003 	mov	r0, r3
   187c0:	ebffe30f 	bl	11404 <memcpy@plt>
   187c4:	e51b3008 	ldr	r3, [fp, #-8]
   187c8:	e6ef2073 	uxtb	r2, r3
   187cc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   187d0:	e5c3204c 	strb	r2, [r3, #76]	; 0x4c
   187d4:	e59f3198 	ldr	r3, [pc, #408]	; 18974 <RDMDevice::RDMDevice()+0x240>
   187d8:	e5d32000 	ldrb	r2, [r3]
   187dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   187e0:	e5c32001 	strb	r2, [r3, #1]
   187e4:	e59f3188 	ldr	r3, [pc, #392]	; 18974 <RDMDevice::RDMDevice()+0x240>
   187e8:	e5d32001 	ldrb	r2, [r3, #1]
   187ec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   187f0:	e5c32002 	strb	r2, [r3, #2]
   187f4:	ebffffbb 	bl	186e8 <Network::Get()>
   187f8:	e1a02000 	mov	r2, r0
   187fc:	e24b302c 	sub	r3, fp, #44	; 0x2c
   18800:	e1a01003 	mov	r1, r3
   18804:	e1a00002 	mov	r0, r2
   18808:	eb007683 	bl	3621c <Network::MacAddressCopyTo(unsigned char*)>
   1880c:	ebffffb5 	bl	186e8 <Network::Get()>
   18810:	e1a03000 	mov	r3, r0
   18814:	e1a00003 	mov	r0, r3
   18818:	ebffffa8 	bl	186c0 <Network::GetIp() const>
   1881c:	e50b000c 	str	r0, [fp, #-12]
   18820:	e51b300c 	ldr	r3, [fp, #-12]
   18824:	e1a03c23 	lsr	r3, r3, #24
   18828:	e6ef2073 	uxtb	r2, r3
   1882c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18830:	e5c32006 	strb	r2, [r3, #6]
   18834:	e51b300c 	ldr	r3, [fp, #-12]
   18838:	e1a03823 	lsr	r3, r3, #16
   1883c:	e6ef2073 	uxtb	r2, r3
   18840:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18844:	e5c32005 	strb	r2, [r3, #5]
   18848:	e51b300c 	ldr	r3, [fp, #-12]
   1884c:	e1a03423 	lsr	r3, r3, #8
   18850:	e6ef2073 	uxtb	r2, r3
   18854:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18858:	e5c32004 	strb	r2, [r3, #4]
   1885c:	e51b300c 	ldr	r3, [fp, #-12]
   18860:	e6ef2073 	uxtb	r2, r3
   18864:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18868:	e5c32003 	strb	r2, [r3, #3]
   1886c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18870:	e5d32006 	ldrb	r2, [r3, #6]
   18874:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18878:	e5c32007 	strb	r2, [r3, #7]
   1887c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18880:	e5d32005 	ldrb	r2, [r3, #5]
   18884:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18888:	e5c32008 	strb	r2, [r3, #8]
   1888c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18890:	e5d32004 	ldrb	r2, [r3, #4]
   18894:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18898:	e5c32009 	strb	r2, [r3, #9]
   1889c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   188a0:	e5d32003 	ldrb	r2, [r3, #3]
   188a4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   188a8:	e5c3200a 	strb	r2, [r3, #10]
   188ac:	ebffe353 	bl	11600 <Hardware::Get()>
   188b0:	e1a03000 	mov	r3, r0
   188b4:	e1a00003 	mov	r0, r3
   188b8:	ebffff93 	bl	1870c <Hardware::GetWebsiteUrl()>
   188bc:	e50b0010 	str	r0, [fp, #-16]
   188c0:	e3a03020 	mov	r3, #32
   188c4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   188c8:	e51b0010 	ldr	r0, [fp, #-16]
   188cc:	ebffe2d5 	bl	11428 <strlen@plt>
   188d0:	e1a03000 	mov	r3, r0
   188d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   188d8:	e24b2018 	sub	r2, fp, #24
   188dc:	e24b301c 	sub	r3, fp, #28
   188e0:	e1a01002 	mov	r1, r2
   188e4:	e1a00003 	mov	r0, r3
   188e8:	ebffeab5 	bl	133c4 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>
   188ec:	e1a03000 	mov	r3, r0
   188f0:	e5933000 	ldr	r3, [r3]
   188f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   188f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   188fc:	e283302c 	add	r3, r3, #44	; 0x2c
   18900:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   18904:	e51b1010 	ldr	r1, [fp, #-16]
   18908:	e1a00003 	mov	r0, r3
   1890c:	ebffe2bc 	bl	11404 <memcpy@plt>
   18910:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   18914:	e6ef2073 	uxtb	r2, r3
   18918:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   1891c:	e5c3204c 	strb	r2, [r3, #76]	; 0x4c
   18920:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18924:	e3e02902 	mvn	r2, #32768	; 0x8000
   18928:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
   1892c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18930:	e3e02902 	mvn	r2, #32768	; 0x8000
   18934:	e1c325b0 	strh	r2, [r3, #80]	; 0x50
   18938:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   1893c:	e3a02017 	mov	r2, #23
   18940:	e5c32072 	strb	r2, [r3, #114]	; 0x72
   18944:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18948:	e2830052 	add	r0, r3, #82	; 0x52
   1894c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18950:	e5d33072 	ldrb	r3, [r3, #114]	; 0x72
   18954:	e1a02003 	mov	r2, r3
   18958:	e59f1018 	ldr	r1, [pc, #24]	; 18978 <RDMDevice::RDMDevice()+0x244>
   1895c:	ebffe2a8 	bl	11404 <memcpy@plt>
   18960:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   18964:	e1a00003 	mov	r0, r3
   18968:	e24bd004 	sub	sp, fp, #4
   1896c:	e8bd8800 	pop	{fp, pc}
   18970:	00044e08 	.word	0x00044e08
   18974:	00044e24 	.word	0x00044e24
   18978:	00044de8 	.word	0x00044de8

0001897c <RDMDevice::Print()>:
   1897c:	e92d4800 	push	{fp, lr}
   18980:	e28db004 	add	fp, sp, #4
   18984:	e24dd010 	sub	sp, sp, #16
   18988:	e50b0008 	str	r0, [fp, #-8]
   1898c:	e59f00f0 	ldr	r0, [pc, #240]	; 18a84 <RDMDevice::Print()+0x108>
   18990:	ebffe223 	bl	11224 <puts@plt>
   18994:	e51b3008 	ldr	r3, [fp, #-8]
   18998:	e5d3304c 	ldrb	r3, [r3, #76]	; 0x4c
   1899c:	e1a01003 	mov	r1, r3
   189a0:	e51b3008 	ldr	r3, [fp, #-8]
   189a4:	e283302c 	add	r3, r3, #44	; 0x2c
   189a8:	e1a02003 	mov	r2, r3
   189ac:	e59f00d4 	ldr	r0, [pc, #212]	; 18a88 <RDMDevice::Print()+0x10c>
   189b0:	ebffe20f 	bl	111f4 <printf@plt>
   189b4:	e51b3008 	ldr	r3, [fp, #-8]
   189b8:	e5d33001 	ldrb	r3, [r3, #1]
   189bc:	e1a01003 	mov	r1, r3
   189c0:	e51b3008 	ldr	r3, [fp, #-8]
   189c4:	e5d33002 	ldrb	r3, [r3, #2]
   189c8:	e1a02003 	mov	r2, r3
   189cc:	e59f00b8 	ldr	r0, [pc, #184]	; 18a8c <RDMDevice::Print()+0x110>
   189d0:	ebffe207 	bl	111f4 <printf@plt>
   189d4:	e51b3008 	ldr	r3, [fp, #-8]
   189d8:	e5d3300a 	ldrb	r3, [r3, #10]
   189dc:	e1a01003 	mov	r1, r3
   189e0:	e51b3008 	ldr	r3, [fp, #-8]
   189e4:	e5d33009 	ldrb	r3, [r3, #9]
   189e8:	e1a02003 	mov	r2, r3
   189ec:	e51b3008 	ldr	r3, [fp, #-8]
   189f0:	e5d33008 	ldrb	r3, [r3, #8]
   189f4:	e1a00003 	mov	r0, r3
   189f8:	e51b3008 	ldr	r3, [fp, #-8]
   189fc:	e5d33007 	ldrb	r3, [r3, #7]
   18a00:	e58d3000 	str	r3, [sp]
   18a04:	e1a03000 	mov	r3, r0
   18a08:	e59f0080 	ldr	r0, [pc, #128]	; 18a90 <RDMDevice::Print()+0x114>
   18a0c:	ebffe1f8 	bl	111f4 <printf@plt>
   18a10:	e51b3008 	ldr	r3, [fp, #-8]
   18a14:	e5d3302b 	ldrb	r3, [r3, #43]	; 0x2b
   18a18:	e1a01003 	mov	r1, r3
   18a1c:	e51b3008 	ldr	r3, [fp, #-8]
   18a20:	e283300b 	add	r3, r3, #11
   18a24:	e1a02003 	mov	r2, r3
   18a28:	e59f0064 	ldr	r0, [pc, #100]	; 18a94 <RDMDevice::Print()+0x118>
   18a2c:	ebffe1f0 	bl	111f4 <printf@plt>
   18a30:	e51b3008 	ldr	r3, [fp, #-8]
   18a34:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
   18a38:	e1a01443 	asr	r1, r3, #8
   18a3c:	e51b3008 	ldr	r3, [fp, #-8]
   18a40:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
   18a44:	e6ef3073 	uxtb	r3, r3
   18a48:	e1a02003 	mov	r2, r3
   18a4c:	e59f0044 	ldr	r0, [pc, #68]	; 18a98 <RDMDevice::Print()+0x11c>
   18a50:	ebffe1e7 	bl	111f4 <printf@plt>
   18a54:	e51b3008 	ldr	r3, [fp, #-8]
   18a58:	e1d335b0 	ldrh	r3, [r3, #80]	; 0x50
   18a5c:	e1a01443 	asr	r1, r3, #8
   18a60:	e51b3008 	ldr	r3, [fp, #-8]
   18a64:	e1d335b0 	ldrh	r3, [r3, #80]	; 0x50
   18a68:	e6ef3073 	uxtb	r3, r3
   18a6c:	e1a02003 	mov	r2, r3
   18a70:	e59f0024 	ldr	r0, [pc, #36]	; 18a9c <RDMDevice::Print()+0x120>
   18a74:	ebffe1de 	bl	111f4 <printf@plt>
   18a78:	e1a00000 	nop			; (mov r0, r0)
   18a7c:	e24bd004 	sub	sp, fp, #4
   18a80:	e8bd8800 	pop	{fp, pc}
   18a84:	00044d0c 	.word	0x00044d0c
   18a88:	00044d28 	.word	0x00044d28
   18a8c:	00044d44 	.word	0x00044d44
   18a90:	00044d64 	.word	0x00044d64
   18a94:	00044d8c 	.word	0x00044d8c
   18a98:	00044da8 	.word	0x00044da8
   18a9c:	00044dc8 	.word	0x00044dc8

00018aa0 <RDMIdentify::RDMIdentify()>:
   18aa0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   18aa4:	e28db000 	add	fp, sp, #0
   18aa8:	e24dd00c 	sub	sp, sp, #12
   18aac:	e50b0008 	str	r0, [fp, #-8]
   18ab0:	e59f2018 	ldr	r2, [pc, #24]	; 18ad0 <RDMIdentify::RDMIdentify()+0x30>
   18ab4:	e51b3008 	ldr	r3, [fp, #-8]
   18ab8:	e5823000 	str	r3, [r2]
   18abc:	e51b3008 	ldr	r3, [fp, #-8]
   18ac0:	e1a00003 	mov	r0, r3
   18ac4:	e28bd000 	add	sp, fp, #0
   18ac8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   18acc:	e12fff1e 	bx	lr
   18ad0:	0005c3b0 	.word	0x0005c3b0

00018ad4 <RDMIdentify::On(rdm::identify::Mode)>:
   18ad4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   18ad8:	e28db000 	add	fp, sp, #0
   18adc:	e24dd00c 	sub	sp, sp, #12
   18ae0:	e50b0008 	str	r0, [fp, #-8]
   18ae4:	e1a03001 	mov	r3, r1
   18ae8:	e54b3009 	strb	r3, [fp, #-9]
   18aec:	e1a00000 	nop			; (mov r0, r0)
   18af0:	e28bd000 	add	sp, fp, #0
   18af4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   18af8:	e12fff1e 	bx	lr

00018afc <RDMIdentify::Off(rdm::identify::Mode)>:
   18afc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   18b00:	e28db000 	add	fp, sp, #0
   18b04:	e24dd00c 	sub	sp, sp, #12
   18b08:	e50b0008 	str	r0, [fp, #-8]
   18b0c:	e1a03001 	mov	r3, r1
   18b10:	e54b3009 	strb	r3, [fp, #-9]
   18b14:	e1a00000 	nop			; (mov r0, r0)
   18b18:	e28bd000 	add	sp, fp, #0
   18b1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   18b20:	e12fff1e 	bx	lr

00018b24 <RDMIdentify::SetMode(rdm::identify::Mode)>:
   18b24:	e92d4800 	push	{fp, lr}
   18b28:	e28db004 	add	fp, sp, #4
   18b2c:	e24dd008 	sub	sp, sp, #8
   18b30:	e50b0008 	str	r0, [fp, #-8]
   18b34:	e1a03001 	mov	r3, r1
   18b38:	e54b3009 	strb	r3, [fp, #-9]
   18b3c:	e55b3009 	ldrb	r3, [fp, #-9]
   18b40:	e3530000 	cmp	r3, #0
   18b44:	0a000002 	beq	18b54 <RDMIdentify::SetMode(rdm::identify::Mode)+0x30>
   18b48:	e55b3009 	ldrb	r3, [fp, #-9]
   18b4c:	e35300ff 	cmp	r3, #255	; 0xff
   18b50:	1a00001a 	bne	18bc0 <RDMIdentify::SetMode(rdm::identify::Mode)+0x9c>
   18b54:	e59f2070 	ldr	r2, [pc, #112]	; 18bcc <RDMIdentify::SetMode(rdm::identify::Mode)+0xa8>
   18b58:	e55b3009 	ldrb	r3, [fp, #-9]
   18b5c:	e5c23000 	strb	r3, [r2]
   18b60:	e59f3068 	ldr	r3, [pc, #104]	; 18bd0 <RDMIdentify::SetMode(rdm::identify::Mode)+0xac>
   18b64:	e5d33000 	ldrb	r3, [r3]
   18b68:	e3530000 	cmp	r3, #0
   18b6c:	0a00000e 	beq	18bac <RDMIdentify::SetMode(rdm::identify::Mode)+0x88>
   18b70:	e55b3009 	ldrb	r3, [fp, #-9]
   18b74:	e3530000 	cmp	r3, #0
   18b78:	0a000005 	beq	18b94 <RDMIdentify::SetMode(rdm::identify::Mode)+0x70>
   18b7c:	e59f3048 	ldr	r3, [pc, #72]	; 18bcc <RDMIdentify::SetMode(rdm::identify::Mode)+0xa8>
   18b80:	e5d33000 	ldrb	r3, [r3]
   18b84:	e1a01003 	mov	r1, r3
   18b88:	e51b0008 	ldr	r0, [fp, #-8]
   18b8c:	ebffffd0 	bl	18ad4 <RDMIdentify::On(rdm::identify::Mode)>
   18b90:	ea00000a 	b	18bc0 <RDMIdentify::SetMode(rdm::identify::Mode)+0x9c>
   18b94:	e59f3030 	ldr	r3, [pc, #48]	; 18bcc <RDMIdentify::SetMode(rdm::identify::Mode)+0xa8>
   18b98:	e5d33000 	ldrb	r3, [r3]
   18b9c:	e1a01003 	mov	r1, r3
   18ba0:	e51b0008 	ldr	r0, [fp, #-8]
   18ba4:	ebffffd4 	bl	18afc <RDMIdentify::Off(rdm::identify::Mode)>
   18ba8:	ea000004 	b	18bc0 <RDMIdentify::SetMode(rdm::identify::Mode)+0x9c>
   18bac:	e59f3018 	ldr	r3, [pc, #24]	; 18bcc <RDMIdentify::SetMode(rdm::identify::Mode)+0xa8>
   18bb0:	e5d33000 	ldrb	r3, [r3]
   18bb4:	e1a01003 	mov	r1, r3
   18bb8:	e51b0008 	ldr	r0, [fp, #-8]
   18bbc:	ebffffce 	bl	18afc <RDMIdentify::Off(rdm::identify::Mode)>
   18bc0:	e1a00000 	nop			; (mov r0, r0)
   18bc4:	e24bd004 	sub	sp, fp, #4
   18bc8:	e8bd8800 	pop	{fp, pc}
   18bcc:	0005c3ad 	.word	0x0005c3ad
   18bd0:	0005c3ac 	.word	0x0005c3ac

00018bd4 <RDMIdentify::GetMode() const>:
   18bd4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   18bd8:	e28db000 	add	fp, sp, #0
   18bdc:	e24dd00c 	sub	sp, sp, #12
   18be0:	e50b0008 	str	r0, [fp, #-8]
   18be4:	e59f3010 	ldr	r3, [pc, #16]	; 18bfc <RDMIdentify::GetMode() const+0x28>
   18be8:	e5d33000 	ldrb	r3, [r3]
   18bec:	e1a00003 	mov	r0, r3
   18bf0:	e28bd000 	add	sp, fp, #0
   18bf4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   18bf8:	e12fff1e 	bx	lr
   18bfc:	0005c3ad 	.word	0x0005c3ad

00018c00 <RDMHandler::GetIdentifyMode(unsigned short)>:
   18c00:	e92d4800 	push	{fp, lr}
   18c04:	e28db004 	add	fp, sp, #4
   18c08:	e24dd010 	sub	sp, sp, #16
   18c0c:	e50b0010 	str	r0, [fp, #-16]
   18c10:	e1a03001 	mov	r3, r1
   18c14:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   18c18:	e51b3010 	ldr	r3, [fp, #-16]
   18c1c:	e5933008 	ldr	r3, [r3, #8]
   18c20:	e50b3008 	str	r3, [fp, #-8]
   18c24:	e51b3008 	ldr	r3, [fp, #-8]
   18c28:	e3a02001 	mov	r2, #1
   18c2c:	e5c32017 	strb	r2, [r3, #23]
   18c30:	ebfff02a 	bl	14ce0 <RDMIdentify::Get()>
   18c34:	e1a03000 	mov	r3, r0
   18c38:	e1a00003 	mov	r0, r3
   18c3c:	ebffffe4 	bl	18bd4 <RDMIdentify::GetMode() const>
   18c40:	e1a03000 	mov	r3, r0
   18c44:	e1a02003 	mov	r2, r3
   18c48:	e51b3008 	ldr	r3, [fp, #-8]
   18c4c:	e5c32018 	strb	r2, [r3, #24]
   18c50:	e51b0010 	ldr	r0, [fp, #-16]
   18c54:	ebfff3cd 	bl	15b90 <RDMHandler::RespondMessageAck()>
   18c58:	e1a00000 	nop			; (mov r0, r0)
   18c5c:	e24bd004 	sub	sp, fp, #4
   18c60:	e8bd8800 	pop	{fp, pc}

00018c64 <RDMHandler::SetIdentifyMode(bool, unsigned short)>:
   18c64:	e92d4800 	push	{fp, lr}
   18c68:	e28db004 	add	fp, sp, #4
   18c6c:	e24dd010 	sub	sp, sp, #16
   18c70:	e50b0010 	str	r0, [fp, #-16]
   18c74:	e1a03001 	mov	r3, r1
   18c78:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   18c7c:	e1a03002 	mov	r3, r2
   18c80:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
   18c84:	e51b3010 	ldr	r3, [fp, #-16]
   18c88:	e5933004 	ldr	r3, [r3, #4]
   18c8c:	e50b3008 	str	r3, [fp, #-8]
   18c90:	e51b3008 	ldr	r3, [fp, #-8]
   18c94:	e5d33016 	ldrb	r3, [r3, #22]
   18c98:	e3530001 	cmp	r3, #1
   18c9c:	0a000003 	beq	18cb0 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x4c>
   18ca0:	e3a01001 	mov	r1, #1
   18ca4:	e51b0010 	ldr	r0, [fp, #-16]
   18ca8:	ebfff3cd 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   18cac:	ea00001f 	b	18d30 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0xcc>
   18cb0:	e51b3008 	ldr	r3, [fp, #-8]
   18cb4:	e5d33017 	ldrb	r3, [r3, #23]
   18cb8:	e3530000 	cmp	r3, #0
   18cbc:	0a000007 	beq	18ce0 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x7c>
   18cc0:	e51b3008 	ldr	r3, [fp, #-8]
   18cc4:	e5d33017 	ldrb	r3, [r3, #23]
   18cc8:	e35300ff 	cmp	r3, #255	; 0xff
   18ccc:	0a000003 	beq	18ce0 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0x7c>
   18cd0:	e3a01006 	mov	r1, #6
   18cd4:	e51b0010 	ldr	r0, [fp, #-16]
   18cd8:	ebfff3c1 	bl	15be4 <RDMHandler::RespondMessageNack(unsigned short)>
   18cdc:	ea000013 	b	18d30 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0xcc>
   18ce0:	ebffeffe 	bl	14ce0 <RDMIdentify::Get()>
   18ce4:	e1a02000 	mov	r2, r0
   18ce8:	e51b3008 	ldr	r3, [fp, #-8]
   18cec:	e5d33017 	ldrb	r3, [r3, #23]
   18cf0:	e1a01003 	mov	r1, r3
   18cf4:	e1a00002 	mov	r0, r2
   18cf8:	ebffff89 	bl	18b24 <RDMIdentify::SetMode(rdm::identify::Mode)>
   18cfc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   18d00:	e3530000 	cmp	r3, #0
   18d04:	1a000008 	bne	18d2c <RDMHandler::SetIdentifyMode(bool, unsigned short)+0xc8>
   18d08:	e51b3010 	ldr	r3, [fp, #-16]
   18d0c:	e5933008 	ldr	r3, [r3, #8]
   18d10:	e50b300c 	str	r3, [fp, #-12]
   18d14:	e51b300c 	ldr	r3, [fp, #-12]
   18d18:	e3a02000 	mov	r2, #0
   18d1c:	e5c32017 	strb	r2, [r3, #23]
   18d20:	e51b0010 	ldr	r0, [fp, #-16]
   18d24:	ebfff399 	bl	15b90 <RDMHandler::RespondMessageAck()>
   18d28:	ea000000 	b	18d30 <RDMHandler::SetIdentifyMode(bool, unsigned short)+0xcc>
   18d2c:	e1a00000 	nop			; (mov r0, r0)
   18d30:	e24bd004 	sub	sp, fp, #4
   18d34:	e8bd8800 	pop	{fp, pc}

00018d38 <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)>:
   18d38:	e92d4800 	push	{fp, lr}
   18d3c:	e28db004 	add	fp, sp, #4
   18d40:	e24dd010 	sub	sp, sp, #16
   18d44:	e1a03000 	mov	r3, r0
   18d48:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   18d4c:	e54b300d 	strb	r3, [fp, #-13]
   18d50:	e3a03000 	mov	r3, #0
   18d54:	e50b3008 	str	r3, [fp, #-8]
   18d58:	e51b3008 	ldr	r3, [fp, #-8]
   18d5c:	e3530008 	cmp	r3, #8
   18d60:	8a00001b 	bhi	18dd4 <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0x9c>
   18d64:	e55b300d 	ldrb	r3, [fp, #-13]
   18d68:	e59f1088 	ldr	r1, [pc, #136]	; 18df8 <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0xc0>
   18d6c:	e51b2008 	ldr	r2, [fp, #-8]
   18d70:	e7912182 	ldr	r2, [r1, r2, lsl #3]
   18d74:	e1530002 	cmp	r3, r2
   18d78:	1a000011 	bne	18dc4 <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0x8c>
   18d7c:	e59f2074 	ldr	r2, [pc, #116]	; 18df8 <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0xc0>
   18d80:	e51b3008 	ldr	r3, [fp, #-8]
   18d84:	e1a03183 	lsl	r3, r3, #3
   18d88:	e0823003 	add	r3, r2, r3
   18d8c:	e5933004 	ldr	r3, [r3, #4]
   18d90:	e1a00003 	mov	r0, r3
   18d94:	ebffe1a3 	bl	11428 <strlen@plt>
   18d98:	e1a03000 	mov	r3, r0
   18d9c:	e6ff3073 	uxth	r3, r3
   18da0:	e1a02003 	mov	r2, r3
   18da4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   18da8:	e5832000 	str	r2, [r3]
   18dac:	e59f2044 	ldr	r2, [pc, #68]	; 18df8 <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0xc0>
   18db0:	e51b3008 	ldr	r3, [fp, #-8]
   18db4:	e1a03183 	lsl	r3, r3, #3
   18db8:	e0823003 	add	r3, r2, r3
   18dbc:	e5933004 	ldr	r3, [r3, #4]
   18dc0:	ea000009 	b	18dec <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0xb4>
   18dc4:	e51b3008 	ldr	r3, [fp, #-8]
   18dc8:	e2833001 	add	r3, r3, #1
   18dcc:	e50b3008 	str	r3, [fp, #-8]
   18dd0:	eaffffe0 	b	18d58 <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0x20>
   18dd4:	e3a03018 	mov	r3, #24
   18dd8:	e6ff3073 	uxth	r3, r3
   18ddc:	e1a02003 	mov	r2, r3
   18de0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   18de4:	e5832000 	str	r2, [r3]
   18de8:	e59f300c 	ldr	r3, [pc, #12]	; 18dfc <RDMSlotInfo::GetTypeText(unsigned char, unsigned int&)+0xc4>
   18dec:	e1a00003 	mov	r0, r3
   18df0:	e24bd004 	sub	sp, fp, #4
   18df4:	e8bd8800 	pop	{fp, pc}
   18df8:	00045360 	.word	0x00045360
   18dfc:	00044ff0 	.word	0x00044ff0

00018e00 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)>:
   18e00:	e92d4800 	push	{fp, lr}
   18e04:	e28db004 	add	fp, sp, #4
   18e08:	e24dd010 	sub	sp, sp, #16
   18e0c:	e1a03000 	mov	r3, r0
   18e10:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   18e14:	e14b30be 	strh	r3, [fp, #-14]
   18e18:	e1a03001 	mov	r3, r1
   18e1c:	e14b31b0 	strh	r3, [fp, #-16]
   18e20:	e15b31b0 	ldrh	r3, [fp, #-16]
   18e24:	e59f209c 	ldr	r2, [pc, #156]	; 18ec8 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0xc8>
   18e28:	e1530002 	cmp	r3, r2
   18e2c:	1a000005 	bne	18e48 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x48>
   18e30:	e15b30be 	ldrh	r3, [fp, #-14]
   18e34:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   18e38:	e1a00003 	mov	r0, r3
   18e3c:	eb000023 	bl	18ed0 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>
   18e40:	e1a03000 	mov	r3, r0
   18e44:	ea00001c 	b	18ebc <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0xbc>
   18e48:	e15b31b0 	ldrh	r3, [fp, #-16]
   18e4c:	e1a00003 	mov	r0, r3
   18e50:	eb000031 	bl	18f1c <RDMSlotInfo::bsearch(unsigned short)>
   18e54:	e50b0008 	str	r0, [fp, #-8]
   18e58:	e51b3008 	ldr	r3, [fp, #-8]
   18e5c:	e3530000 	cmp	r3, #0
   18e60:	aa000004 	bge	18e78 <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0x78>
   18e64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   18e68:	e3a02000 	mov	r2, #0
   18e6c:	e5832000 	str	r2, [r3]
   18e70:	e3a03000 	mov	r3, #0
   18e74:	ea000010 	b	18ebc <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0xbc>
   18e78:	e59f204c 	ldr	r2, [pc, #76]	; 18ecc <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0xcc>
   18e7c:	e51b3008 	ldr	r3, [fp, #-8]
   18e80:	e1a03183 	lsl	r3, r3, #3
   18e84:	e0823003 	add	r3, r2, r3
   18e88:	e5933004 	ldr	r3, [r3, #4]
   18e8c:	e1a00003 	mov	r0, r3
   18e90:	ebffe164 	bl	11428 <strlen@plt>
   18e94:	e1a03000 	mov	r3, r0
   18e98:	e6ff3073 	uxth	r3, r3
   18e9c:	e1a02003 	mov	r2, r3
   18ea0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   18ea4:	e5832000 	str	r2, [r3]
   18ea8:	e59f201c 	ldr	r2, [pc, #28]	; 18ecc <RDMSlotInfo::GetCategoryText(unsigned short, unsigned short, unsigned int&)+0xcc>
   18eac:	e51b3008 	ldr	r3, [fp, #-8]
   18eb0:	e1a03183 	lsl	r3, r3, #3
   18eb4:	e0823003 	add	r3, r2, r3
   18eb8:	e5933004 	ldr	r3, [r3, #4]
   18ebc:	e1a00003 	mov	r0, r3
   18ec0:	e24bd004 	sub	sp, fp, #4
   18ec4:	e8bd8800 	pop	{fp, pc}
   18ec8:	0000ffff 	.word	0x0000ffff
   18ecc:	000453a8 	.word	0x000453a8

00018ed0 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)>:
   18ed0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   18ed4:	e28db000 	add	fp, sp, #0
   18ed8:	e24dd014 	sub	sp, sp, #20
   18edc:	e1a03000 	mov	r3, r0
   18ee0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   18ee4:	e14b30be 	strh	r3, [fp, #-14]
   18ee8:	e3a03027 	mov	r3, #39	; 0x27
   18eec:	e50b3008 	str	r3, [fp, #-8]
   18ef0:	e3a0300d 	mov	r3, #13
   18ef4:	e6ff3073 	uxth	r3, r3
   18ef8:	e1a02003 	mov	r2, r3
   18efc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   18f00:	e5832000 	str	r2, [r3]
   18f04:	e59f300c 	ldr	r3, [pc, #12]	; 18f18 <RDMSlotInfo::GetCategoryTextUndefined(unsigned short, unsigned int&)+0x48>
   18f08:	e1a00003 	mov	r0, r3
   18f0c:	e28bd000 	add	sp, fp, #0
   18f10:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   18f14:	e12fff1e 	bx	lr
   18f18:	00045350 	.word	0x00045350

00018f1c <RDMSlotInfo::bsearch(unsigned short)>:
   18f1c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   18f20:	e28db000 	add	fp, sp, #0
   18f24:	e24dd01c 	sub	sp, sp, #28
   18f28:	e1a03000 	mov	r3, r0
   18f2c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
   18f30:	e3a03000 	mov	r3, #0
   18f34:	e50b3008 	str	r3, [fp, #-8]
   18f38:	e3a03028 	mov	r3, #40	; 0x28
   18f3c:	e50b300c 	str	r3, [fp, #-12]
   18f40:	e51b2008 	ldr	r2, [fp, #-8]
   18f44:	e51b300c 	ldr	r3, [fp, #-12]
   18f48:	e1520003 	cmp	r2, r3
   18f4c:	ca00001f 	bgt	18fd0 <RDMSlotInfo::bsearch(unsigned short)+0xb4>
   18f50:	e51b200c 	ldr	r2, [fp, #-12]
   18f54:	e51b3008 	ldr	r3, [fp, #-8]
   18f58:	e0423003 	sub	r3, r2, r3
   18f5c:	e1a02fa3 	lsr	r2, r3, #31
   18f60:	e0823003 	add	r3, r2, r3
   18f64:	e1a030c3 	asr	r3, r3, #1
   18f68:	e1a02003 	mov	r2, r3
   18f6c:	e51b3008 	ldr	r3, [fp, #-8]
   18f70:	e0833002 	add	r3, r3, r2
   18f74:	e50b3010 	str	r3, [fp, #-16]
   18f78:	e59f2064 	ldr	r2, [pc, #100]	; 18fe4 <RDMSlotInfo::bsearch(unsigned short)+0xc8>
   18f7c:	e51b3010 	ldr	r3, [fp, #-16]
   18f80:	e7923183 	ldr	r3, [r2, r3, lsl #3]
   18f84:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   18f88:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
   18f8c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   18f90:	e1520003 	cmp	r2, r3
   18f94:	aa000003 	bge	18fa8 <RDMSlotInfo::bsearch(unsigned short)+0x8c>
   18f98:	e51b3010 	ldr	r3, [fp, #-16]
   18f9c:	e2833001 	add	r3, r3, #1
   18fa0:	e50b3008 	str	r3, [fp, #-8]
   18fa4:	eaffffe5 	b	18f40 <RDMSlotInfo::bsearch(unsigned short)+0x24>
   18fa8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
   18fac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   18fb0:	e1520003 	cmp	r2, r3
   18fb4:	da000003 	ble	18fc8 <RDMSlotInfo::bsearch(unsigned short)+0xac>
   18fb8:	e51b3010 	ldr	r3, [fp, #-16]
   18fbc:	e2433001 	sub	r3, r3, #1
   18fc0:	e50b300c 	str	r3, [fp, #-12]
   18fc4:	eaffffdd 	b	18f40 <RDMSlotInfo::bsearch(unsigned short)+0x24>
   18fc8:	e51b3010 	ldr	r3, [fp, #-16]
   18fcc:	ea000000 	b	18fd4 <RDMSlotInfo::bsearch(unsigned short)+0xb8>
   18fd0:	e3e03000 	mvn	r3, #0
   18fd4:	e1a00003 	mov	r0, r3
   18fd8:	e28bd000 	add	sp, fp, #0
   18fdc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   18fe0:	e12fff1e 	bx	lr
   18fe4:	000453a8 	.word	0x000453a8

00018fe8 <RDMSensor::~RDMSensor()>:
   18fe8:	e12fff1e 	bx	lr

00018fec <RDMSensor::~RDMSensor()>:
   18fec:	e92d4010 	push	{r4, lr}
   18ff0:	e1a04000 	mov	r4, r0
   18ff4:	ebffe0c3 	bl	11308 <operator delete(void*)@plt>
   18ff8:	e1a00004 	mov	r0, r4
   18ffc:	e8bd8010 	pop	{r4, pc}

00019000 <RDMSensorBH170::RDMSensorBH170(unsigned char, unsigned char)>:
   19000:	e92d4070 	push	{r4, r5, r6, lr}
   19004:	e1a05002 	mov	r5, r2
   19008:	e1a04000 	mov	r4, r0
   1900c:	eb00060a 	bl	1a83c <RDMSensor::RDMSensor(unsigned char)>
   19010:	e1a01005 	mov	r1, r5
   19014:	e2840040 	add	r0, r4, #64	; 0x40
   19018:	eb00972d 	bl	3ecd4 <sensor::BH170::BH170(unsigned char)>
   1901c:	e59f3080 	ldr	r3, [pc, #128]	; 190a4 <RDMSensorBH170::RDMSensorBH170(unsigned char, unsigned char)+0xa4>
   19020:	e1a00004 	mov	r0, r4
   19024:	e3a01018 	mov	r1, #24
   19028:	e4803007 	str	r3, [r0], #7
   1902c:	eb0003db 	bl	19fa0 <RDMSensor::SetType(unsigned char) [clone .isra.0]>
   19030:	e2840008 	add	r0, r4, #8
   19034:	e3a0101a 	mov	r1, #26
   19038:	eb0003da 	bl	19fa8 <RDMSensor::SetUnit(unsigned char) [clone .isra.1]>
   1903c:	e3a01000 	mov	r1, #0
   19040:	e2840009 	add	r0, r4, #9
   19044:	eb0003d9 	bl	19fb0 <RDMSensor::SetPrefix(unsigned char) [clone .isra.2]>
   19048:	e3a00000 	mov	r0, #0
   1904c:	eb0003e3 	bl	19fe0 <short rdm::sensor::safe_range_min<int>(int const&) [clone .isra.9]>
   19050:	e1a01000 	mov	r1, r0
   19054:	e1a06000 	mov	r6, r0
   19058:	e284000a 	add	r0, r4, #10
   1905c:	eb0003d5 	bl	19fb8 <RDMSensor::SetRangeMin(short) [clone .isra.3]>
   19060:	e59f0040 	ldr	r0, [pc, #64]	; 190a8 <RDMSensorBH170::RDMSensorBH170(unsigned char, unsigned char)+0xa8>
   19064:	eb0003e3 	bl	19ff8 <short rdm::sensor::safe_range_max<int>(int const&) [clone .isra.10]>
   19068:	e1a05000 	mov	r5, r0
   1906c:	e1a01000 	mov	r1, r0
   19070:	e284000c 	add	r0, r4, #12
   19074:	eb0003d1 	bl	19fc0 <RDMSensor::SetRangeMax(short) [clone .isra.4]>
   19078:	e1a01006 	mov	r1, r6
   1907c:	e284000e 	add	r0, r4, #14
   19080:	eb0003d0 	bl	19fc8 <RDMSensor::SetNormalMin(short) [clone .isra.5]>
   19084:	e1a01005 	mov	r1, r5
   19088:	e2840010 	add	r0, r4, #16
   1908c:	eb0003cf 	bl	19fd0 <RDMSensor::SetNormalMax(short) [clone .isra.6]>
   19090:	e1a00004 	mov	r0, r4
   19094:	e59f1010 	ldr	r1, [pc, #16]	; 190ac <RDMSensorBH170::RDMSensorBH170(unsigned char, unsigned char)+0xac>
   19098:	eb00060a 	bl	1a8c8 <RDMSensor::SetDescription(char const*)>
   1909c:	e1a00004 	mov	r0, r4
   190a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   190a4:	000456d8 	.word	0x000456d8
   190a8:	0000ffff 	.word	0x0000ffff
   190ac:	00045504 	.word	0x00045504

000190b0 <RDMSensorBH170::Initialize()>:
   190b0:	e5d00048 	ldrb	r0, [r0, #72]	; 0x48
   190b4:	ea0003c8 	b	19fdc <sensor::BH170::Initialize() [clone .isra.8]>

000190b8 <RDMSensorBH170::GetValue()>:
   190b8:	e92d4010 	push	{r4, lr}
   190bc:	e2800040 	add	r0, r0, #64	; 0x40
   190c0:	eb00972f 	bl	3ed84 <sensor::BH170::Get()>
   190c4:	e1a00880 	lsl	r0, r0, #17
   190c8:	e1a008a0 	lsr	r0, r0, #17
   190cc:	e8bd8010 	pop	{r4, pc}

000190d0 <RDMSensorMCP9808::RDMSensorMCP9808(unsigned char, unsigned char)>:
   190d0:	e92d4070 	push	{r4, r5, r6, lr}
   190d4:	e1a05002 	mov	r5, r2
   190d8:	e1a04000 	mov	r4, r0
   190dc:	eb0005d6 	bl	1a83c <RDMSensor::RDMSensor(unsigned char)>
   190e0:	e1a01005 	mov	r1, r5
   190e4:	e2840040 	add	r0, r4, #64	; 0x40
   190e8:	eb009698 	bl	3eb50 <sensor::MCP9808::MCP9808(unsigned char)>
   190ec:	e59f3088 	ldr	r3, [pc, #136]	; 1917c <RDMSensorMCP9808::RDMSensorMCP9808(unsigned char, unsigned char)+0xac>
   190f0:	e1a00004 	mov	r0, r4
   190f4:	e3a01000 	mov	r1, #0
   190f8:	e4803007 	str	r3, [r0], #7
   190fc:	eb0003a7 	bl	19fa0 <RDMSensor::SetType(unsigned char) [clone .isra.0]>
   19100:	e2840008 	add	r0, r4, #8
   19104:	e3a01001 	mov	r1, #1
   19108:	eb0003a6 	bl	19fa8 <RDMSensor::SetUnit(unsigned char) [clone .isra.1]>
   1910c:	e3a01000 	mov	r1, #0
   19110:	e2840009 	add	r0, r4, #9
   19114:	eb0003a5 	bl	19fb0 <RDMSensor::SetPrefix(unsigned char) [clone .isra.2]>
   19118:	e3e00013 	mvn	r0, #19
   1911c:	eb0003af 	bl	19fe0 <short rdm::sensor::safe_range_min<int>(int const&) [clone .isra.9]>
   19120:	e1a01000 	mov	r1, r0
   19124:	e284000a 	add	r0, r4, #10
   19128:	eb0003a2 	bl	19fb8 <RDMSensor::SetRangeMin(short) [clone .isra.3]>
   1912c:	e3a00064 	mov	r0, #100	; 0x64
   19130:	eb0003b0 	bl	19ff8 <short rdm::sensor::safe_range_max<int>(int const&) [clone .isra.10]>
   19134:	e1a01000 	mov	r1, r0
   19138:	e284000c 	add	r0, r4, #12
   1913c:	eb00039f 	bl	19fc0 <RDMSensor::SetRangeMax(short) [clone .isra.4]>
   19140:	e3a00012 	mov	r0, #18
   19144:	eb0003a5 	bl	19fe0 <short rdm::sensor::safe_range_min<int>(int const&) [clone .isra.9]>
   19148:	e1a01000 	mov	r1, r0
   1914c:	e284000e 	add	r0, r4, #14
   19150:	eb00039c 	bl	19fc8 <RDMSensor::SetNormalMin(short) [clone .isra.5]>
   19154:	e3a00028 	mov	r0, #40	; 0x28
   19158:	eb0003a0 	bl	19fe0 <short rdm::sensor::safe_range_min<int>(int const&) [clone .isra.9]>
   1915c:	e1a01000 	mov	r1, r0
   19160:	e2840010 	add	r0, r4, #16
   19164:	eb000399 	bl	19fd0 <RDMSensor::SetNormalMax(short) [clone .isra.6]>
   19168:	e1a00004 	mov	r0, r4
   1916c:	e59f100c 	ldr	r1, [pc, #12]	; 19180 <RDMSensorMCP9808::RDMSensorMCP9808(unsigned char, unsigned char)+0xb0>
   19170:	eb0005d4 	bl	1a8c8 <RDMSensor::SetDescription(char const*)>
   19174:	e1a00004 	mov	r0, r4
   19178:	e8bd8070 	pop	{r4, r5, r6, pc}
   1917c:	000456c0 	.word	0x000456c0
   19180:	0004551c 	.word	0x0004551c

00019184 <RDMSensorMCP9808::Initialize()>:
   19184:	e5d00048 	ldrb	r0, [r0, #72]	; 0x48
   19188:	ea0003a0 	b	1a010 <sensor::MCP9808::Initialize() [clone .isra.11]>

0001918c <RDMSensorMCP9808::GetValue()>:
   1918c:	e92d4010 	push	{r4, lr}
   19190:	e2800040 	add	r0, r0, #64	; 0x40
   19194:	eb0096ab 	bl	3ec48 <sensor::MCP9808::Get()>
   19198:	eebd0ac0 	vcvt.s32.f32	s0, s0
   1919c:	ee103a10 	vmov	r3, s0
   191a0:	e6bf0073 	sxth	r0, r3
   191a4:	e8bd8010 	pop	{r4, pc}

000191a8 <RDMSensorHTU21DHumidity::RDMSensorHTU21DHumidity(unsigned char, unsigned char)>:
   191a8:	e92d4070 	push	{r4, r5, r6, lr}
   191ac:	e1a05002 	mov	r5, r2
   191b0:	e1a04000 	mov	r4, r0
   191b4:	eb0005a0 	bl	1a83c <RDMSensor::RDMSensor(unsigned char)>
   191b8:	e1a01005 	mov	r1, r5
   191bc:	e2840040 	add	r0, r4, #64	; 0x40
   191c0:	eb00943c 	bl	3e2b8 <sensor::HTU21D::HTU21D(unsigned char)>
   191c4:	e59f3080 	ldr	r3, [pc, #128]	; 1924c <RDMSensorHTU21DHumidity::RDMSensorHTU21DHumidity(unsigned char, unsigned char)+0xa4>
   191c8:	e1a00004 	mov	r0, r4
   191cc:	e3a0101f 	mov	r1, #31
   191d0:	e4803007 	str	r3, [r0], #7
   191d4:	eb000371 	bl	19fa0 <RDMSensor::SetType(unsigned char) [clone .isra.0]>
   191d8:	e2840008 	add	r0, r4, #8
   191dc:	e3a01000 	mov	r1, #0
   191e0:	eb000370 	bl	19fa8 <RDMSensor::SetUnit(unsigned char) [clone .isra.1]>
   191e4:	e3a01000 	mov	r1, #0
   191e8:	e2840009 	add	r0, r4, #9
   191ec:	eb00036f 	bl	19fb0 <RDMSensor::SetPrefix(unsigned char) [clone .isra.2]>
   191f0:	e3a00000 	mov	r0, #0
   191f4:	eb000379 	bl	19fe0 <short rdm::sensor::safe_range_min<int>(int const&) [clone .isra.9]>
   191f8:	e1a01000 	mov	r1, r0
   191fc:	e1a06000 	mov	r6, r0
   19200:	e284000a 	add	r0, r4, #10
   19204:	eb00036b 	bl	19fb8 <RDMSensor::SetRangeMin(short) [clone .isra.3]>
   19208:	e3a00064 	mov	r0, #100	; 0x64
   1920c:	eb000379 	bl	19ff8 <short rdm::sensor::safe_range_max<int>(int const&) [clone .isra.10]>
   19210:	e1a05000 	mov	r5, r0
   19214:	e1a01000 	mov	r1, r0
   19218:	e284000c 	add	r0, r4, #12
   1921c:	eb000367 	bl	19fc0 <RDMSensor::SetRangeMax(short) [clone .isra.4]>
   19220:	e1a01006 	mov	r1, r6
   19224:	e284000e 	add	r0, r4, #14
   19228:	eb000366 	bl	19fc8 <RDMSensor::SetNormalMin(short) [clone .isra.5]>
   1922c:	e1a01005 	mov	r1, r5
   19230:	e2840010 	add	r0, r4, #16
   19234:	eb000365 	bl	19fd0 <RDMSensor::SetNormalMax(short) [clone .isra.6]>
   19238:	e1a00004 	mov	r0, r4
   1923c:	e59f100c 	ldr	r1, [pc, #12]	; 19250 <RDMSensorHTU21DHumidity::RDMSensorHTU21DHumidity(unsigned char, unsigned char)+0xa8>
   19240:	eb0005a0 	bl	1a8c8 <RDMSensor::SetDescription(char const*)>
   19244:	e1a00004 	mov	r0, r4
   19248:	e8bd8070 	pop	{r4, r5, r6, pc}
   1924c:	000456a8 	.word	0x000456a8
   19250:	00045554 	.word	0x00045554

00019254 <RDMSensorHTU21DHumidity::Initialize()>:
   19254:	e5d00048 	ldrb	r0, [r0, #72]	; 0x48
   19258:	ea00036d 	b	1a014 <sensor::HTU21D::Initialize() [clone .isra.12]>

0001925c <RDMSensorHTU21DHumidity::GetValue()>:
   1925c:	e92d4010 	push	{r4, lr}
   19260:	e2800040 	add	r0, r0, #64	; 0x40
   19264:	eb00944b 	bl	3e398 <sensor::HTU21D::GetHumidity()>
   19268:	eebd0ac0 	vcvt.s32.f32	s0, s0
   1926c:	ee103a10 	vmov	r3, s0
   19270:	e6bf0073 	sxth	r0, r3
   19274:	e8bd8010 	pop	{r4, pc}

00019278 <RDMSensorHTU21DTemperature::RDMSensorHTU21DTemperature(unsigned char, unsigned char)>:
   19278:	e92d4070 	push	{r4, r5, r6, lr}
   1927c:	e1a05002 	mov	r5, r2
   19280:	e1a04000 	mov	r4, r0
   19284:	eb00056c 	bl	1a83c <RDMSensor::RDMSensor(unsigned char)>
   19288:	e1a01005 	mov	r1, r5
   1928c:	e2840040 	add	r0, r4, #64	; 0x40
   19290:	eb009408 	bl	3e2b8 <sensor::HTU21D::HTU21D(unsigned char)>
   19294:	e59f3080 	ldr	r3, [pc, #128]	; 1931c <RDMSensorHTU21DTemperature::RDMSensorHTU21DTemperature(unsigned char, unsigned char)+0xa4>
   19298:	e1a00004 	mov	r0, r4
   1929c:	e3a01000 	mov	r1, #0
   192a0:	e4803007 	str	r3, [r0], #7
   192a4:	eb00033d 	bl	19fa0 <RDMSensor::SetType(unsigned char) [clone .isra.0]>
   192a8:	e2840008 	add	r0, r4, #8
   192ac:	e3a01001 	mov	r1, #1
   192b0:	eb00033c 	bl	19fa8 <RDMSensor::SetUnit(unsigned char) [clone .isra.1]>
   192b4:	e3a01000 	mov	r1, #0
   192b8:	e2840009 	add	r0, r4, #9
   192bc:	eb00033b 	bl	19fb0 <RDMSensor::SetPrefix(unsigned char) [clone .isra.2]>
   192c0:	e3e00027 	mvn	r0, #39	; 0x27
   192c4:	eb000345 	bl	19fe0 <short rdm::sensor::safe_range_min<int>(int const&) [clone .isra.9]>
   192c8:	e1a01000 	mov	r1, r0
   192cc:	e1a06000 	mov	r6, r0
   192d0:	e284000a 	add	r0, r4, #10
   192d4:	eb000337 	bl	19fb8 <RDMSensor::SetRangeMin(short) [clone .isra.3]>
   192d8:	e3a0007d 	mov	r0, #125	; 0x7d
   192dc:	eb000345 	bl	19ff8 <short rdm::sensor::safe_range_max<int>(int const&) [clone .isra.10]>
   192e0:	e1a05000 	mov	r5, r0
   192e4:	e1a01000 	mov	r1, r0
   192e8:	e284000c 	add	r0, r4, #12
   192ec:	eb000333 	bl	19fc0 <RDMSensor::SetRangeMax(short) [clone .isra.4]>
   192f0:	e1a01006 	mov	r1, r6
   192f4:	e284000e 	add	r0, r4, #14
   192f8:	eb000332 	bl	19fc8 <RDMSensor::SetNormalMin(short) [clone .isra.5]>
   192fc:	e1a01005 	mov	r1, r5
   19300:	e2840010 	add	r0, r4, #16
   19304:	eb000331 	bl	19fd0 <RDMSensor::SetNormalMax(short) [clone .isra.6]>
   19308:	e1a00004 	mov	r0, r4
   1930c:	e59f100c 	ldr	r1, [pc, #12]	; 19320 <RDMSensorHTU21DTemperature::RDMSensorHTU21DTemperature(unsigned char, unsigned char)+0xa8>
   19310:	eb00056c 	bl	1a8c8 <RDMSensor::SetDescription(char const*)>
   19314:	e1a00004 	mov	r0, r4
   19318:	e8bd8070 	pop	{r4, r5, r6, pc}
   1931c:	00045690 	.word	0x00045690
   19320:	00045538 	.word	0x00045538

00019324 <RDMSensorHTU21DTemperature::Initialize()>:
   19324:	e5d00048 	ldrb	r0, [r0, #72]	; 0x48
   19328:	ea000339 	b	1a014 <sensor::HTU21D::Initialize() [clone .isra.12]>

0001932c <RDMSensorHTU21DTemperature::GetValue()>:
   1932c:	e92d4010 	push	{r4, lr}
   19330:	e2800040 	add	r0, r0, #64	; 0x40
   19334:	eb0093ff 	bl	3e338 <sensor::HTU21D::GetTemperature()>
   19338:	eebd0ac0 	vcvt.s32.f32	s0, s0
   1933c:	ee103a10 	vmov	r3, s0
   19340:	e6bf0073 	sxth	r0, r3
   19344:	e8bd8010 	pop	{r4, pc}

00019348 <RDMSensorINA219Current::RDMSensorINA219Current(unsigned char, unsigned char)>:
   19348:	e92d4070 	push	{r4, r5, r6, lr}
   1934c:	e1a05002 	mov	r5, r2
   19350:	e1a04000 	mov	r4, r0
   19354:	eb000538 	bl	1a83c <RDMSensor::RDMSensor(unsigned char)>
   19358:	e1a01005 	mov	r1, r5
   1935c:	e2840040 	add	r0, r4, #64	; 0x40
   19360:	eb009494 	bl	3e5b8 <sensor::INA219::INA219(unsigned char)>
   19364:	e59f3080 	ldr	r3, [pc, #128]	; 193ec <RDMSensorINA219Current::RDMSensorINA219Current(unsigned char, unsigned char)+0xa4>
   19368:	e1a00004 	mov	r0, r4
   1936c:	e3a01002 	mov	r1, #2
   19370:	e4803007 	str	r3, [r0], #7
   19374:	eb000309 	bl	19fa0 <RDMSensor::SetType(unsigned char) [clone .isra.0]>
   19378:	e2840008 	add	r0, r4, #8
   1937c:	e3a01005 	mov	r1, #5
   19380:	eb000308 	bl	19fa8 <RDMSensor::SetUnit(unsigned char) [clone .isra.1]>
   19384:	e3a01003 	mov	r1, #3
   19388:	e2840009 	add	r0, r4, #9
   1938c:	eb000307 	bl	19fb0 <RDMSensor::SetPrefix(unsigned char) [clone .isra.2]>
   19390:	e59f0058 	ldr	r0, [pc, #88]	; 193f0 <RDMSensorINA219Current::RDMSensorINA219Current(unsigned char, unsigned char)+0xa8>
   19394:	eb000311 	bl	19fe0 <short rdm::sensor::safe_range_min<int>(int const&) [clone .isra.9]>
   19398:	e1a01000 	mov	r1, r0
   1939c:	e1a06000 	mov	r6, r0
   193a0:	e284000a 	add	r0, r4, #10
   193a4:	eb000303 	bl	19fb8 <RDMSensor::SetRangeMin(short) [clone .isra.3]>
   193a8:	e3a00e7d 	mov	r0, #2000	; 0x7d0
   193ac:	eb000311 	bl	19ff8 <short rdm::sensor::safe_range_max<int>(int const&) [clone .isra.10]>
   193b0:	e1a05000 	mov	r5, r0
   193b4:	e1a01000 	mov	r1, r0
   193b8:	e284000c 	add	r0, r4, #12
   193bc:	eb0002ff 	bl	19fc0 <RDMSensor::SetRangeMax(short) [clone .isra.4]>
   193c0:	e1a01006 	mov	r1, r6
   193c4:	e284000e 	add	r0, r4, #14
   193c8:	eb0002fe 	bl	19fc8 <RDMSensor::SetNormalMin(short) [clone .isra.5]>
   193cc:	e1a01005 	mov	r1, r5
   193d0:	e2840010 	add	r0, r4, #16
   193d4:	eb0002fd 	bl	19fd0 <RDMSensor::SetNormalMax(short) [clone .isra.6]>
   193d8:	e1a00004 	mov	r0, r4
   193dc:	e59f1010 	ldr	r1, [pc, #16]	; 193f4 <RDMSensorINA219Current::RDMSensorINA219Current(unsigned char, unsigned char)+0xac>
   193e0:	eb000538 	bl	1a8c8 <RDMSensor::SetDescription(char const*)>
   193e4:	e1a00004 	mov	r0, r4
   193e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   193ec:	00045678 	.word	0x00045678
   193f0:	fffff830 	.word	0xfffff830
   193f4:	000455ac 	.word	0x000455ac

000193f8 <RDMSensorINA219Current::Initialize()>:
   193f8:	e5d00048 	ldrb	r0, [r0, #72]	; 0x48
   193fc:	ea000305 	b	1a018 <sensor::INA219::Initialize() [clone .isra.13]>

00019400 <RDMSensorINA219Current::GetValue()>:
   19400:	e92d4010 	push	{r4, lr}
   19404:	e2800040 	add	r0, r0, #64	; 0x40
   19408:	eb009556 	bl	3e968 <sensor::INA219::GetShuntCurrent()>
   1940c:	eddf7a04 	vldr	s15, [pc, #16]	; 19424 <RDMSensorINA219Current::GetValue()+0x24>
   19410:	ee200a27 	vmul.f32	s0, s0, s15
   19414:	eebd0ac0 	vcvt.s32.f32	s0, s0
   19418:	ee103a10 	vmov	r3, s0
   1941c:	e6bf0073 	sxth	r0, r3
   19420:	e8bd8010 	pop	{r4, pc}
   19424:	447a0000 	.word	0x447a0000

00019428 <RDMSensorINA219Power::RDMSensorINA219Power(unsigned char, unsigned char)>:
   19428:	e92d4070 	push	{r4, r5, r6, lr}
   1942c:	e1a05002 	mov	r5, r2
   19430:	e1a04000 	mov	r4, r0
   19434:	eb000500 	bl	1a83c <RDMSensor::RDMSensor(unsigned char)>
   19438:	e1a01005 	mov	r1, r5
   1943c:	e2840040 	add	r0, r4, #64	; 0x40
   19440:	eb00945c 	bl	3e5b8 <sensor::INA219::INA219(unsigned char)>
   19444:	e59f3080 	ldr	r3, [pc, #128]	; 194cc <RDMSensorINA219Power::RDMSensorINA219Power(unsigned char, unsigned char)+0xa4>
   19448:	e1a00004 	mov	r0, r4
   1944c:	e3a01002 	mov	r1, #2
   19450:	e4803007 	str	r3, [r0], #7
   19454:	eb0002d1 	bl	19fa0 <RDMSensor::SetType(unsigned char) [clone .isra.0]>
   19458:	e2840008 	add	r0, r4, #8
   1945c:	e3a01005 	mov	r1, #5
   19460:	eb0002d0 	bl	19fa8 <RDMSensor::SetUnit(unsigned char) [clone .isra.1]>
   19464:	e3a01003 	mov	r1, #3
   19468:	e2840009 	add	r0, r4, #9
   1946c:	eb0002cf 	bl	19fb0 <RDMSensor::SetPrefix(unsigned char) [clone .isra.2]>
   19470:	e3e0003f 	mvn	r0, #63	; 0x3f
   19474:	eb0002d9 	bl	19fe0 <short rdm::sensor::safe_range_min<int>(int const&) [clone .isra.9]>
   19478:	e1a01000 	mov	r1, r0
   1947c:	e1a06000 	mov	r6, r0
   19480:	e284000a 	add	r0, r4, #10
   19484:	eb0002cb 	bl	19fb8 <RDMSensor::SetRangeMin(short) [clone .isra.3]>
   19488:	e3a00040 	mov	r0, #64	; 0x40
   1948c:	eb0002d9 	bl	19ff8 <short rdm::sensor::safe_range_max<int>(int const&) [clone .isra.10]>
   19490:	e1a05000 	mov	r5, r0
   19494:	e1a01000 	mov	r1, r0
   19498:	e284000c 	add	r0, r4, #12
   1949c:	eb0002c7 	bl	19fc0 <RDMSensor::SetRangeMax(short) [clone .isra.4]>
   194a0:	e1a01006 	mov	r1, r6
   194a4:	e284000e 	add	r0, r4, #14
   194a8:	eb0002c6 	bl	19fc8 <RDMSensor::SetNormalMin(short) [clone .isra.5]>
   194ac:	e1a01005 	mov	r1, r5
   194b0:	e2840010 	add	r0, r4, #16
   194b4:	eb0002c5 	bl	19fd0 <RDMSensor::SetNormalMax(short) [clone .isra.6]>
   194b8:	e1a00004 	mov	r0, r4
   194bc:	e59f100c 	ldr	r1, [pc, #12]	; 194d0 <RDMSensorINA219Power::RDMSensorINA219Power(unsigned char, unsigned char)+0xa8>
   194c0:	eb000500 	bl	1a8c8 <RDMSensor::SetDescription(char const*)>
   194c4:	e1a00004 	mov	r0, r4
   194c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   194cc:	00045660 	.word	0x00045660
   194d0:	000455cc 	.word	0x000455cc

000194d4 <RDMSensorINA219Power::Initialize()>:
   194d4:	e5d00048 	ldrb	r0, [r0, #72]	; 0x48
   194d8:	ea0002ce 	b	1a018 <sensor::INA219::Initialize() [clone .isra.13]>

000194dc <RDMSensorINA219Power::GetValue()>:
   194dc:	e92d4010 	push	{r4, lr}
   194e0:	e2800040 	add	r0, r0, #64	; 0x40
   194e4:	eb009558 	bl	3ea4c <sensor::INA219::GetBusPower()>
   194e8:	eebd0ac0 	vcvt.s32.f32	s0, s0
   194ec:	ee103a10 	vmov	r3, s0
   194f0:	e6bf0073 	sxth	r0, r3
   194f4:	e8bd8010 	pop	{r4, pc}

000194f8 <RDMSensorINA219Voltage::RDMSensorINA219Voltage(unsigned char, unsigned char)>:
   194f8:	e92d4070 	push	{r4, r5, r6, lr}
   194fc:	e1a05002 	mov	r5, r2
   19500:	e1a04000 	mov	r4, r0
   19504:	eb0004cc 	bl	1a83c <RDMSensor::RDMSensor(unsigned char)>
   19508:	e1a01005 	mov	r1, r5
   1950c:	e2840040 	add	r0, r4, #64	; 0x40
   19510:	eb009428 	bl	3e5b8 <sensor::INA219::INA219(unsigned char)>
   19514:	e59f3080 	ldr	r3, [pc, #128]	; 1959c <RDMSensorINA219Voltage::RDMSensorINA219Voltage(unsigned char, unsigned char)+0xa4>
   19518:	e1a00004 	mov	r0, r4
   1951c:	e3a01002 	mov	r1, #2
   19520:	e4803007 	str	r3, [r0], #7
   19524:	eb00029d 	bl	19fa0 <RDMSensor::SetType(unsigned char) [clone .isra.0]>
   19528:	e2840008 	add	r0, r4, #8
   1952c:	e3a01005 	mov	r1, #5
   19530:	eb00029c 	bl	19fa8 <RDMSensor::SetUnit(unsigned char) [clone .isra.1]>
   19534:	e3a01003 	mov	r1, #3
   19538:	e2840009 	add	r0, r4, #9
   1953c:	eb00029b 	bl	19fb0 <RDMSensor::SetPrefix(unsigned char) [clone .isra.2]>
   19540:	e59f0058 	ldr	r0, [pc, #88]	; 195a0 <RDMSensorINA219Voltage::RDMSensorINA219Voltage(unsigned char, unsigned char)+0xa8>
   19544:	eb0002a5 	bl	19fe0 <short rdm::sensor::safe_range_min<int>(int const&) [clone .isra.9]>
   19548:	e1a01000 	mov	r1, r0
   1954c:	e1a06000 	mov	r6, r0
   19550:	e284000a 	add	r0, r4, #10
   19554:	eb000297 	bl	19fb8 <RDMSensor::SetRangeMin(short) [clone .isra.3]>
   19558:	e3a00c7d 	mov	r0, #32000	; 0x7d00
   1955c:	eb0002a5 	bl	19ff8 <short rdm::sensor::safe_range_max<int>(int const&) [clone .isra.10]>
   19560:	e1a05000 	mov	r5, r0
   19564:	e1a01000 	mov	r1, r0
   19568:	e284000c 	add	r0, r4, #12
   1956c:	eb000293 	bl	19fc0 <RDMSensor::SetRangeMax(short) [clone .isra.4]>
   19570:	e1a01006 	mov	r1, r6
   19574:	e284000e 	add	r0, r4, #14
   19578:	eb000292 	bl	19fc8 <RDMSensor::SetNormalMin(short) [clone .isra.5]>
   1957c:	e1a01005 	mov	r1, r5
   19580:	e2840010 	add	r0, r4, #16
   19584:	eb000291 	bl	19fd0 <RDMSensor::SetNormalMax(short) [clone .isra.6]>
   19588:	e1a00004 	mov	r0, r4
   1958c:	e59f1010 	ldr	r1, [pc, #16]	; 195a4 <RDMSensorINA219Voltage::RDMSensorINA219Voltage(unsigned char, unsigned char)+0xac>
   19590:	eb0004cc 	bl	1a8c8 <RDMSensor::SetDescription(char const*)>
   19594:	e1a00004 	mov	r0, r4
   19598:	e8bd8070 	pop	{r4, r5, r6, pc}
   1959c:	00045648 	.word	0x00045648
   195a0:	ffff8300 	.word	0xffff8300
   195a4:	000455bc 	.word	0x000455bc

000195a8 <RDMSensorINA219Voltage::Initialize()>:
   195a8:	e5d00048 	ldrb	r0, [r0, #72]	; 0x48
   195ac:	ea000299 	b	1a018 <sensor::INA219::Initialize() [clone .isra.13]>

000195b0 <RDMSensorINA219Voltage::GetValue()>:
   195b0:	e92d4010 	push	{r4, lr}
   195b4:	e2800040 	add	r0, r0, #64	; 0x40
   195b8:	eb009514 	bl	3ea10 <sensor::INA219::GetBusVoltage()>
   195bc:	eddf7a04 	vldr	s15, [pc, #16]	; 195d4 <RDMSensorINA219Voltage::GetValue()+0x24>
   195c0:	ee200a27 	vmul.f32	s0, s0, s15
   195c4:	eebd0ac0 	vcvt.s32.f32	s0, s0
   195c8:	ee103a10 	vmov	r3, s0
   195cc:	e6bf0073 	sxth	r0, r3
   195d0:	e8bd8010 	pop	{r4, pc}
   195d4:	447a0000 	.word	0x447a0000

000195d8 <RDMSensorSI7021Humidity::RDMSensorSI7021Humidity(unsigned char, unsigned char)>:
   195d8:	e92d4070 	push	{r4, r5, r6, lr}
   195dc:	e1a05002 	mov	r5, r2
   195e0:	e1a04000 	mov	r4, r0
   195e4:	eb000494 	bl	1a83c <RDMSensor::RDMSensor(unsigned char)>
   195e8:	e1a01005 	mov	r1, r5
   195ec:	e2840040 	add	r0, r4, #64	; 0x40
   195f0:	eb0095f7 	bl	3edd4 <sensor::SI7021::SI7021(unsigned char)>
   195f4:	e59f3080 	ldr	r3, [pc, #128]	; 1967c <RDMSensorSI7021Humidity::RDMSensorSI7021Humidity(unsigned char, unsigned char)+0xa4>
   195f8:	e1a00004 	mov	r0, r4
   195fc:	e3a0101f 	mov	r1, #31
   19600:	e4803007 	str	r3, [r0], #7
   19604:	eb000265 	bl	19fa0 <RDMSensor::SetType(unsigned char) [clone .isra.0]>
   19608:	e2840008 	add	r0, r4, #8
   1960c:	e3a01000 	mov	r1, #0
   19610:	eb000264 	bl	19fa8 <RDMSensor::SetUnit(unsigned char) [clone .isra.1]>
   19614:	e3a01000 	mov	r1, #0
   19618:	e2840009 	add	r0, r4, #9
   1961c:	eb000263 	bl	19fb0 <RDMSensor::SetPrefix(unsigned char) [clone .isra.2]>
   19620:	e3a00000 	mov	r0, #0
   19624:	eb00027d 	bl	1a020 <short rdm::sensor::safe_range_min<short>(short const&) [clone .isra.15]>
   19628:	e1a01000 	mov	r1, r0
   1962c:	e1a06000 	mov	r6, r0
   19630:	e284000a 	add	r0, r4, #10
   19634:	eb00025f 	bl	19fb8 <RDMSensor::SetRangeMin(short) [clone .isra.3]>
   19638:	e3a00064 	mov	r0, #100	; 0x64
   1963c:	eb000278 	bl	1a024 <short rdm::sensor::safe_range_max<short>(short const&) [clone .isra.16]>
   19640:	e1a05000 	mov	r5, r0
   19644:	e1a01000 	mov	r1, r0
   19648:	e284000c 	add	r0, r4, #12
   1964c:	eb00025b 	bl	19fc0 <RDMSensor::SetRangeMax(short) [clone .isra.4]>
   19650:	e1a01006 	mov	r1, r6
   19654:	e284000e 	add	r0, r4, #14
   19658:	eb00025a 	bl	19fc8 <RDMSensor::SetNormalMin(short) [clone .isra.5]>
   1965c:	e1a01005 	mov	r1, r5
   19660:	e2840010 	add	r0, r4, #16
   19664:	eb000259 	bl	19fd0 <RDMSensor::SetNormalMax(short) [clone .isra.6]>
   19668:	e1a00004 	mov	r0, r4
   1966c:	e59f100c 	ldr	r1, [pc, #12]	; 19680 <RDMSensorSI7021Humidity::RDMSensorSI7021Humidity(unsigned char, unsigned char)+0xa8>
   19670:	eb000494 	bl	1a8c8 <RDMSensor::SetDescription(char const*)>
   19674:	e1a00004 	mov	r0, r4
   19678:	e8bd8070 	pop	{r4, r5, r6, pc}
   1967c:	00045630 	.word	0x00045630
   19680:	000455f8 	.word	0x000455f8

00019684 <RDMSensorSI7021Humidity::Initialize()>:
   19684:	e5d00048 	ldrb	r0, [r0, #72]	; 0x48
   19688:	ea000263 	b	1a01c <sensor::SI7021::Initialize() [clone .isra.14]>

0001968c <RDMSensorSI7021Humidity::GetValue()>:
   1968c:	e92d4010 	push	{r4, lr}
   19690:	e2800040 	add	r0, r0, #64	; 0x40
   19694:	eb009606 	bl	3eeb4 <sensor::SI7021::GetHumidity()>
   19698:	eebd0ac0 	vcvt.s32.f32	s0, s0
   1969c:	ee103a10 	vmov	r3, s0
   196a0:	e6bf0073 	sxth	r0, r3
   196a4:	e8bd8010 	pop	{r4, pc}

000196a8 <RDMSensorSI7021Temperature::RDMSensorSI7021Temperature(unsigned char, unsigned char)>:
   196a8:	e92d4070 	push	{r4, r5, r6, lr}
   196ac:	e1a05002 	mov	r5, r2
   196b0:	e1a04000 	mov	r4, r0
   196b4:	eb000460 	bl	1a83c <RDMSensor::RDMSensor(unsigned char)>
   196b8:	e1a01005 	mov	r1, r5
   196bc:	e2840040 	add	r0, r4, #64	; 0x40
   196c0:	eb0095c3 	bl	3edd4 <sensor::SI7021::SI7021(unsigned char)>
   196c4:	e59f3080 	ldr	r3, [pc, #128]	; 1974c <RDMSensorSI7021Temperature::RDMSensorSI7021Temperature(unsigned char, unsigned char)+0xa4>
   196c8:	e1a00004 	mov	r0, r4
   196cc:	e3a01000 	mov	r1, #0
   196d0:	e4803007 	str	r3, [r0], #7
   196d4:	eb000231 	bl	19fa0 <RDMSensor::SetType(unsigned char) [clone .isra.0]>
   196d8:	e2840008 	add	r0, r4, #8
   196dc:	e3a01001 	mov	r1, #1
   196e0:	eb000230 	bl	19fa8 <RDMSensor::SetUnit(unsigned char) [clone .isra.1]>
   196e4:	e3a01000 	mov	r1, #0
   196e8:	e2840009 	add	r0, r4, #9
   196ec:	eb00022f 	bl	19fb0 <RDMSensor::SetPrefix(unsigned char) [clone .isra.2]>
   196f0:	e3e00027 	mvn	r0, #39	; 0x27
   196f4:	eb000239 	bl	19fe0 <short rdm::sensor::safe_range_min<int>(int const&) [clone .isra.9]>
   196f8:	e1a01000 	mov	r1, r0
   196fc:	e1a06000 	mov	r6, r0
   19700:	e284000a 	add	r0, r4, #10
   19704:	eb00022b 	bl	19fb8 <RDMSensor::SetRangeMin(short) [clone .isra.3]>
   19708:	e3a0007d 	mov	r0, #125	; 0x7d
   1970c:	eb000239 	bl	19ff8 <short rdm::sensor::safe_range_max<int>(int const&) [clone .isra.10]>
   19710:	e1a05000 	mov	r5, r0
   19714:	e1a01000 	mov	r1, r0
   19718:	e284000c 	add	r0, r4, #12
   1971c:	eb000227 	bl	19fc0 <RDMSensor::SetRangeMax(short) [clone .isra.4]>
   19720:	e1a01006 	mov	r1, r6
   19724:	e284000e 	add	r0, r4, #14
   19728:	eb000226 	bl	19fc8 <RDMSensor::SetNormalMin(short) [clone .isra.5]>
   1972c:	e1a01005 	mov	r1, r5
   19730:	e2840010 	add	r0, r4, #16
   19734:	eb000225 	bl	19fd0 <RDMSensor::SetNormalMax(short) [clone .isra.6]>
   19738:	e1a00004 	mov	r0, r4
   1973c:	e59f100c 	ldr	r1, [pc, #12]	; 19750 <RDMSensorSI7021Temperature::RDMSensorSI7021Temperature(unsigned char, unsigned char)+0xa8>
   19740:	eb000460 	bl	1a8c8 <RDMSensor::SetDescription(char const*)>
   19744:	e1a00004 	mov	r0, r4
   19748:	e8bd8070 	pop	{r4, r5, r6, pc}
   1974c:	00045618 	.word	0x00045618
   19750:	000455dc 	.word	0x000455dc

00019754 <RDMSensorSI7021Temperature::Initialize()>:
   19754:	e5d00048 	ldrb	r0, [r0, #72]	; 0x48
   19758:	ea00022f 	b	1a01c <sensor::SI7021::Initialize() [clone .isra.14]>

0001975c <RDMSensorSI7021Temperature::GetValue()>:
   1975c:	e92d4010 	push	{r4, lr}
   19760:	e2800040 	add	r0, r0, #64	; 0x40
   19764:	eb0095ba 	bl	3ee54 <sensor::SI7021::GetTemperature()>
   19768:	eebd0ac0 	vcvt.s32.f32	s0, s0
   1976c:	ee103a10 	vmov	r3, s0
   19770:	e6bf0073 	sxth	r0, r3
   19774:	e8bd8010 	pop	{r4, pc}

00019778 <RDMSensorsParams::RDMSensorsParams(RDMSensorsParamsStore*)>:
   19778:	e5801000 	str	r1, [r0]
   1977c:	e12fff1e 	bx	lr

00019780 <RDMSensorsParams::Load()>:
   19780:	e3a03000 	mov	r3, #0
   19784:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
   19788:	e1a02000 	mov	r2, r0
   1978c:	e5803004 	str	r3, [r0, #4]
   19790:	e1a04000 	mov	r4, r0
   19794:	e59f1068 	ldr	r1, [pc, #104]	; 19804 <RDMSensorsParams::Load()+0x84>
   19798:	e1a0000d 	mov	r0, sp
   1979c:	eb008a05 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   197a0:	e59f1060 	ldr	r1, [pc, #96]	; 19808 <RDMSensorsParams::Load()+0x88>
   197a4:	e1a0000d 	mov	r0, sp
   197a8:	eb008a22 	bl	3c038 <ReadConfigFile::Read(char const*)>
   197ac:	e2505000 	subs	r5, r0, #0
   197b0:	e5940000 	ldr	r0, [r4]
   197b4:	0a00000a 	beq	197e4 <RDMSensorsParams::Load()+0x64>
   197b8:	e3500000 	cmp	r0, #0
   197bc:	0a000003 	beq	197d0 <RDMSensorsParams::Load()+0x50>
   197c0:	e5903000 	ldr	r3, [r0]
   197c4:	e2841004 	add	r1, r4, #4
   197c8:	e5933008 	ldr	r3, [r3, #8]
   197cc:	e12fff33 	blx	r3
   197d0:	e1a0000d 	mov	r0, sp
   197d4:	eb008a08 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   197d8:	e1a00005 	mov	r0, r5
   197dc:	e28dd00c 	add	sp, sp, #12
   197e0:	e8bd8030 	pop	{r4, r5, pc}
   197e4:	e3500000 	cmp	r0, #0
   197e8:	0afffff8 	beq	197d0 <RDMSensorsParams::Load()+0x50>
   197ec:	e5903000 	ldr	r3, [r0]
   197f0:	e2841004 	add	r1, r4, #4
   197f4:	e3a05001 	mov	r5, #1
   197f8:	e593300c 	ldr	r3, [r3, #12]
   197fc:	e12fff33 	blx	r3
   19800:	eafffff2 	b	197d0 <RDMSensorsParams::Load()+0x50>
   19804:	00019c18 	.word	0x00019c18
   19808:	0004575c 	.word	0x0004575c

0001980c <RDMSensorsParams::Load(char const*, unsigned int)>:
   1980c:	e5903000 	ldr	r3, [r0]
   19810:	e3530000 	cmp	r3, #0
   19814:	012fff1e 	bxeq	lr
   19818:	e3a03000 	mov	r3, #0
   1981c:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   19820:	e1a06002 	mov	r6, r2
   19824:	e5803004 	str	r3, [r0, #4]
   19828:	e1a05001 	mov	r5, r1
   1982c:	e1a04000 	mov	r4, r0
   19830:	e1a02000 	mov	r2, r0
   19834:	e59f1038 	ldr	r1, [pc, #56]	; 19874 <RDMSensorsParams::Load(char const*, unsigned int)+0x68>
   19838:	e1a0000d 	mov	r0, sp
   1983c:	eb0089dd 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   19840:	e1a02006 	mov	r2, r6
   19844:	e1a01005 	mov	r1, r5
   19848:	e1a0000d 	mov	r0, sp
   1984c:	eb008a44 	bl	3c164 <ReadConfigFile::Read(char const*, unsigned int)>
   19850:	e1a01004 	mov	r1, r4
   19854:	e4910004 	ldr	r0, [r1], #4
   19858:	e5903000 	ldr	r3, [r0]
   1985c:	e5933008 	ldr	r3, [r3, #8]
   19860:	e12fff33 	blx	r3
   19864:	e1a0000d 	mov	r0, sp
   19868:	eb0089e3 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   1986c:	e28dd008 	add	sp, sp, #8
   19870:	e8bd8070 	pop	{r4, r5, r6, pc}
   19874:	00019c18 	.word	0x00019c18

00019878 <RDMSensorsParams::Builder(TRDMSensorsParams const*, char*, unsigned int, unsigned int&)>:
   19878:	e3510000 	cmp	r1, #0
   1987c:	e92d4030 	push	{r4, r5, lr}
   19880:	e280c004 	add	ip, r0, #4
   19884:	e24dd014 	sub	sp, sp, #20
   19888:	e1a04002 	mov	r4, r2
   1988c:	e1a05003 	mov	r5, r3
   19890:	0a00000f 	beq	198d4 <RDMSensorsParams::Builder(TRDMSensorsParams const*, char*, unsigned int, unsigned int&)+0x5c>
   19894:	e2813034 	add	r3, r1, #52	; 0x34
   19898:	e4912004 	ldr	r2, [r1], #4
   1989c:	e1510003 	cmp	r1, r3
   198a0:	e48c2004 	str	r2, [ip], #4
   198a4:	1afffffb 	bne	19898 <RDMSensorsParams::Builder(TRDMSensorsParams const*, char*, unsigned int, unsigned int&)+0x20>
   198a8:	e1a03005 	mov	r3, r5
   198ac:	e1a02004 	mov	r2, r4
   198b0:	e59f1034 	ldr	r1, [pc, #52]	; 198ec <RDMSensorsParams::Builder(TRDMSensorsParams const*, char*, unsigned int, unsigned int&)+0x74>
   198b4:	e28d0004 	add	r0, sp, #4
   198b8:	eb0088f9 	bl	3bca4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
   198bc:	e28d0004 	add	r0, sp, #4
   198c0:	ebffeb82 	bl	146d0 <PropertiesBuilder::GetSize()>
   198c4:	e59d3020 	ldr	r3, [sp, #32]
   198c8:	e5830000 	str	r0, [r3]
   198cc:	e28dd014 	add	sp, sp, #20
   198d0:	e8bd8030 	pop	{r4, r5, pc}
   198d4:	e5900000 	ldr	r0, [r0]
   198d8:	e1a0100c 	mov	r1, ip
   198dc:	e5903000 	ldr	r3, [r0]
   198e0:	e593300c 	ldr	r3, [r3, #12]
   198e4:	e12fff33 	blx	r3
   198e8:	eaffffee 	b	198a8 <RDMSensorsParams::Builder(TRDMSensorsParams const*, char*, unsigned int, unsigned int&)+0x30>
   198ec:	0004575c 	.word	0x0004575c

000198f0 <RDMSensorsParams::Save(char*, unsigned int, unsigned int&)>:
   198f0:	e590c000 	ldr	ip, [r0]
   198f4:	e35c0000 	cmp	ip, #0
   198f8:	1a000001 	bne	19904 <RDMSensorsParams::Save(char*, unsigned int, unsigned int&)+0x14>
   198fc:	e583c000 	str	ip, [r3]
   19900:	e12fff1e 	bx	lr
   19904:	e1a0c003 	mov	ip, r3
   19908:	e92d4007 	push	{r0, r1, r2, lr}
   1990c:	e1a03002 	mov	r3, r2
   19910:	e58dc000 	str	ip, [sp]
   19914:	e1a02001 	mov	r2, r1
   19918:	e3a01000 	mov	r1, #0
   1991c:	ebffffd5 	bl	19878 <RDMSensorsParams::Builder(TRDMSensorsParams const*, char*, unsigned int, unsigned int&)>
   19920:	e28dd00c 	add	sp, sp, #12
   19924:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00019928 <RDMSensorsParams::Dump()>:
   19928:	e12fff1e 	bx	lr

0001992c <RDMSensorsParams::Add(RDMSensor*)>:
   1992c:	e92d4070 	push	{r4, r5, r6, lr}
   19930:	e1a00001 	mov	r0, r1
   19934:	e5913000 	ldr	r3, [r1]
   19938:	e1a04001 	mov	r4, r1
   1993c:	e5933008 	ldr	r3, [r3, #8]
   19940:	e12fff33 	blx	r3
   19944:	e2505000 	subs	r5, r0, #0
   19948:	0a000004 	beq	19960 <RDMSensorsParams::Add(RDMSensor*)+0x34>
   1994c:	ebffed22 	bl	14ddc <RDMSensors::Get()>
   19950:	e1a01004 	mov	r1, r4
   19954:	eb000491 	bl	1aba0 <RDMSensors::Add(RDMSensor*)>
   19958:	e1a00005 	mov	r0, r5
   1995c:	e8bd8070 	pop	{r4, r5, r6, pc}
   19960:	e5943000 	ldr	r3, [r4]
   19964:	e1a00004 	mov	r0, r4
   19968:	e5933004 	ldr	r3, [r3, #4]
   1996c:	e12fff33 	blx	r3
   19970:	eafffff8 	b	19958 <RDMSensorsParams::Add(RDMSensor*)+0x2c>

00019974 <RDMSensorsParams::Set()>:
   19974:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19978:	e1a05000 	mov	r5, r0
   1997c:	e1a07000 	mov	r7, r0
   19980:	e3a08000 	mov	r8, #0
   19984:	e5953004 	ldr	r3, [r5, #4]
   19988:	e1530008 	cmp	r3, r8
   1998c:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   19990:	ebffed11 	bl	14ddc <RDMSensors::Get()>
   19994:	e5d00004 	ldrb	r0, [r0, #4]
   19998:	eb00018e 	bl	19fd8 <RDMSensors::GetCount() const [clone .isra.7]>
   1999c:	e5d73008 	ldrb	r3, [r7, #8]
   199a0:	e5d76009 	ldrb	r6, [r7, #9]
   199a4:	e1a04000 	mov	r4, r0
   199a8:	e3530004 	cmp	r3, #4
   199ac:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   199b0:	ea00000d 	b	199ec <RDMSensorsParams::Set()+0x78>
   199b4:	000199c8 	.word	0x000199c8
   199b8:	000199f8 	.word	0x000199f8
   199bc:	00019a44 	.word	0x00019a44
   199c0:	00019ab8 	.word	0x00019ab8
   199c4:	00019ad4 	.word	0x00019ad4
   199c8:	e3a0004c 	mov	r0, #76	; 0x4c
   199cc:	ebffdddb 	bl	11140 <operator new(unsigned int)@plt>
   199d0:	e1a02006 	mov	r2, r6
   199d4:	e1a01004 	mov	r1, r4
   199d8:	e1a09000 	mov	r9, r0
   199dc:	ebfffd87 	bl	19000 <RDMSensorBH170::RDMSensorBH170(unsigned char, unsigned char)>
   199e0:	e1a01009 	mov	r1, r9
   199e4:	e1a00005 	mov	r0, r5
   199e8:	ebffffcf 	bl	1992c <RDMSensorsParams::Add(RDMSensor*)>
   199ec:	e2888001 	add	r8, r8, #1
   199f0:	e2877003 	add	r7, r7, #3
   199f4:	eaffffe2 	b	19984 <RDMSensorsParams::Set()+0x10>
   199f8:	e3a0004c 	mov	r0, #76	; 0x4c
   199fc:	ebffddcf 	bl	11140 <operator new(unsigned int)@plt>
   19a00:	e1a02006 	mov	r2, r6
   19a04:	e1a01004 	mov	r1, r4
   19a08:	e1a09000 	mov	r9, r0
   19a0c:	ebfffde5 	bl	191a8 <RDMSensorHTU21DHumidity::RDMSensorHTU21DHumidity(unsigned char, unsigned char)>
   19a10:	e1a01009 	mov	r1, r9
   19a14:	e1a00005 	mov	r0, r5
   19a18:	ebffffc3 	bl	1992c <RDMSensorsParams::Add(RDMSensor*)>
   19a1c:	e3500000 	cmp	r0, #0
   19a20:	0afffff1 	beq	199ec <RDMSensorsParams::Set()+0x78>
   19a24:	e3a0004c 	mov	r0, #76	; 0x4c
   19a28:	ebffddc4 	bl	11140 <operator new(unsigned int)@plt>
   19a2c:	e2841001 	add	r1, r4, #1
   19a30:	e1a02006 	mov	r2, r6
   19a34:	e6ef1071 	uxtb	r1, r1
   19a38:	e1a09000 	mov	r9, r0
   19a3c:	ebfffe0d 	bl	19278 <RDMSensorHTU21DTemperature::RDMSensorHTU21DTemperature(unsigned char, unsigned char)>
   19a40:	eaffffe6 	b	199e0 <RDMSensorsParams::Set()+0x6c>
   19a44:	e3a00060 	mov	r0, #96	; 0x60
   19a48:	ebffddbc 	bl	11140 <operator new(unsigned int)@plt>
   19a4c:	e1a02006 	mov	r2, r6
   19a50:	e1a01004 	mov	r1, r4
   19a54:	e1a09000 	mov	r9, r0
   19a58:	ebfffe3a 	bl	19348 <RDMSensorINA219Current::RDMSensorINA219Current(unsigned char, unsigned char)>
   19a5c:	e1a01009 	mov	r1, r9
   19a60:	e1a00005 	mov	r0, r5
   19a64:	ebffffb0 	bl	1992c <RDMSensorsParams::Add(RDMSensor*)>
   19a68:	e3500000 	cmp	r0, #0
   19a6c:	0affffde 	beq	199ec <RDMSensorsParams::Set()+0x78>
   19a70:	e3a00060 	mov	r0, #96	; 0x60
   19a74:	ebffddb1 	bl	11140 <operator new(unsigned int)@plt>
   19a78:	e2841001 	add	r1, r4, #1
   19a7c:	e1a02006 	mov	r2, r6
   19a80:	e6ef1071 	uxtb	r1, r1
   19a84:	e1a09000 	mov	r9, r0
   19a88:	ebfffe66 	bl	19428 <RDMSensorINA219Power::RDMSensorINA219Power(unsigned char, unsigned char)>
   19a8c:	e1a01009 	mov	r1, r9
   19a90:	e1a00005 	mov	r0, r5
   19a94:	ebffffa4 	bl	1992c <RDMSensorsParams::Add(RDMSensor*)>
   19a98:	e3a00060 	mov	r0, #96	; 0x60
   19a9c:	ebffdda7 	bl	11140 <operator new(unsigned int)@plt>
   19aa0:	e2841002 	add	r1, r4, #2
   19aa4:	e1a02006 	mov	r2, r6
   19aa8:	e6ef1071 	uxtb	r1, r1
   19aac:	e1a09000 	mov	r9, r0
   19ab0:	ebfffe90 	bl	194f8 <RDMSensorINA219Voltage::RDMSensorINA219Voltage(unsigned char, unsigned char)>
   19ab4:	eaffffc9 	b	199e0 <RDMSensorsParams::Set()+0x6c>
   19ab8:	e3a0004c 	mov	r0, #76	; 0x4c
   19abc:	ebffdd9f 	bl	11140 <operator new(unsigned int)@plt>
   19ac0:	e1a02006 	mov	r2, r6
   19ac4:	e1a01004 	mov	r1, r4
   19ac8:	e1a09000 	mov	r9, r0
   19acc:	ebfffd7f 	bl	190d0 <RDMSensorMCP9808::RDMSensorMCP9808(unsigned char, unsigned char)>
   19ad0:	eaffffc2 	b	199e0 <RDMSensorsParams::Set()+0x6c>
   19ad4:	e3a0004c 	mov	r0, #76	; 0x4c
   19ad8:	ebffdd98 	bl	11140 <operator new(unsigned int)@plt>
   19adc:	e1a02006 	mov	r2, r6
   19ae0:	e1a01004 	mov	r1, r4
   19ae4:	e1a09000 	mov	r9, r0
   19ae8:	ebfffeba 	bl	195d8 <RDMSensorSI7021Humidity::RDMSensorSI7021Humidity(unsigned char, unsigned char)>
   19aec:	e1a01009 	mov	r1, r9
   19af0:	e1a00005 	mov	r0, r5
   19af4:	ebffff8c 	bl	1992c <RDMSensorsParams::Add(RDMSensor*)>
   19af8:	e3500000 	cmp	r0, #0
   19afc:	0affffba 	beq	199ec <RDMSensorsParams::Set()+0x78>
   19b00:	e3a0004c 	mov	r0, #76	; 0x4c
   19b04:	ebffdd8d 	bl	11140 <operator new(unsigned int)@plt>
   19b08:	e2841001 	add	r1, r4, #1
   19b0c:	e1a02006 	mov	r2, r6
   19b10:	e6ef1071 	uxtb	r1, r1
   19b14:	e1a09000 	mov	r9, r0
   19b18:	ebfffee2 	bl	196a8 <RDMSensorSI7021Temperature::RDMSensorSI7021Temperature(unsigned char, unsigned char)>
   19b1c:	eaffffaf 	b	199e0 <RDMSensorsParams::Set()+0x6c>

00019b20 <RDMSensorsParams::callbackFunction(char const*)>:
   19b20:	e92d4030 	push	{r4, r5, lr}
   19b24:	e24dd034 	sub	sp, sp, #52	; 0x34
   19b28:	e1a04001 	mov	r4, r1
   19b2c:	e3a02020 	mov	r2, #32
   19b30:	e3a01000 	mov	r1, #0
   19b34:	e1a05000 	mov	r5, r0
   19b38:	e28d0010 	add	r0, sp, #16
   19b3c:	ebffddca 	bl	1126c <memset@plt>
   19b40:	e3a0301f 	mov	r3, #31
   19b44:	e5cd300d 	strb	r3, [sp, #13]
   19b48:	e3a03000 	mov	r3, #0
   19b4c:	e5cd300e 	strb	r3, [sp, #14]
   19b50:	e5cd300f 	strb	r3, [sp, #15]
   19b54:	e28d300f 	add	r3, sp, #15
   19b58:	e58d3000 	str	r3, [sp]
   19b5c:	e1a00004 	mov	r0, r4
   19b60:	e28d300e 	add	r3, sp, #14
   19b64:	e28d200d 	add	r2, sp, #13
   19b68:	e28d1010 	add	r1, sp, #16
   19b6c:	eb008a8e 	bl	3c5ac <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)>
   19b70:	e2504000 	subs	r4, r0, #0
   19b74:	1a000016 	bne	19bd4 <RDMSensorsParams::callbackFunction(char const*)+0xb4>
   19b78:	e5dd3010 	ldrb	r3, [sp, #16]
   19b7c:	e3530000 	cmp	r3, #0
   19b80:	0a000013 	beq	19bd4 <RDMSensorsParams::callbackFunction(char const*)+0xb4>
   19b84:	e5dd300d 	ldrb	r3, [sp, #13]
   19b88:	e3530000 	cmp	r3, #0
   19b8c:	0a000010 	beq	19bd4 <RDMSensorsParams::callbackFunction(char const*)+0xb4>
   19b90:	e28d0010 	add	r0, sp, #16
   19b94:	eb000136 	bl	1a074 <RDMSensors::GetTypeString(char const*)>
   19b98:	e3500005 	cmp	r0, #5
   19b9c:	0a00000c 	beq	19bd4 <RDMSensorsParams::callbackFunction(char const*)+0xb4>
   19ba0:	e5dd100e 	ldrb	r1, [sp, #14]
   19ba4:	e5953004 	ldr	r3, [r5, #4]
   19ba8:	e1a02005 	mov	r2, r5
   19bac:	e1530004 	cmp	r3, r4
   19bb0:	0a00000f 	beq	19bf4 <RDMSensorsParams::callbackFunction(char const*)+0xd4>
   19bb4:	e3510000 	cmp	r1, #0
   19bb8:	0a000007 	beq	19bdc <RDMSensorsParams::callbackFunction(char const*)+0xbc>
   19bbc:	e5d2c009 	ldrb	ip, [r2, #9]
   19bc0:	e15c0001 	cmp	ip, r1
   19bc4:	1a000007 	bne	19be8 <RDMSensorsParams::callbackFunction(char const*)+0xc8>
   19bc8:	e0844084 	add	r4, r4, r4, lsl #1
   19bcc:	e0854004 	add	r4, r5, r4
   19bd0:	e5c40008 	strb	r0, [r4, #8]
   19bd4:	e28dd034 	add	sp, sp, #52	; 0x34
   19bd8:	e8bd8030 	pop	{r4, r5, pc}
   19bdc:	e5d2c008 	ldrb	ip, [r2, #8]
   19be0:	e15c0000 	cmp	ip, r0
   19be4:	0afffffa 	beq	19bd4 <RDMSensorsParams::callbackFunction(char const*)+0xb4>
   19be8:	e2844001 	add	r4, r4, #1
   19bec:	e2822003 	add	r2, r2, #3
   19bf0:	eaffffed 	b	19bac <RDMSensorsParams::callbackFunction(char const*)+0x8c>
   19bf4:	e3530010 	cmp	r3, #16
   19bf8:	0afffff5 	beq	19bd4 <RDMSensorsParams::callbackFunction(char const*)+0xb4>
   19bfc:	e0834083 	add	r4, r3, r3, lsl #1
   19c00:	e0854004 	add	r4, r5, r4
   19c04:	e2832001 	add	r2, r3, #1
   19c08:	e5852004 	str	r2, [r5, #4]
   19c0c:	e5c40008 	strb	r0, [r4, #8]
   19c10:	e5c41009 	strb	r1, [r4, #9]
   19c14:	eaffffee 	b	19bd4 <RDMSensorsParams::callbackFunction(char const*)+0xb4>

00019c18 <RDMSensorsParams::staticCallbackFunction(void*, char const*)>:
   19c18:	eaffffc0 	b	19b20 <RDMSensorsParams::callbackFunction(char const*)>

00019c1c <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
   19c1c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   19c20:	e28db000 	add	fp, sp, #0
   19c24:	e24dd00c 	sub	sp, sp, #12
   19c28:	e50b0008 	str	r0, [fp, #-8]
   19c2c:	e59f2018 	ldr	r2, [pc, #24]	; 19c4c <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()+0x30>
   19c30:	e51b3008 	ldr	r3, [fp, #-8]
   19c34:	e5832000 	str	r2, [r3]
   19c38:	e51b3008 	ldr	r3, [fp, #-8]
   19c3c:	e1a00003 	mov	r0, r3
   19c40:	e28bd000 	add	sp, fp, #0
   19c44:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   19c48:	e12fff1e 	bx	lr
   19c4c:	00045618 	.word	0x00045618

00019c50 <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>:
   19c50:	e92d4800 	push	{fp, lr}
   19c54:	e28db004 	add	fp, sp, #4
   19c58:	e24dd008 	sub	sp, sp, #8
   19c5c:	e50b0008 	str	r0, [fp, #-8]
   19c60:	e51b0008 	ldr	r0, [fp, #-8]
   19c64:	ebffffec 	bl	19c1c <RDMSensorSI7021Temperature::~RDMSensorSI7021Temperature()>
   19c68:	e51b0008 	ldr	r0, [fp, #-8]
   19c6c:	ebffdda5 	bl	11308 <operator delete(void*)@plt>
   19c70:	e51b3008 	ldr	r3, [fp, #-8]
   19c74:	e1a00003 	mov	r0, r3
   19c78:	e24bd004 	sub	sp, fp, #4
   19c7c:	e8bd8800 	pop	{fp, pc}

00019c80 <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
   19c80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   19c84:	e28db000 	add	fp, sp, #0
   19c88:	e24dd00c 	sub	sp, sp, #12
   19c8c:	e50b0008 	str	r0, [fp, #-8]
   19c90:	e59f2018 	ldr	r2, [pc, #24]	; 19cb0 <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()+0x30>
   19c94:	e51b3008 	ldr	r3, [fp, #-8]
   19c98:	e5832000 	str	r2, [r3]
   19c9c:	e51b3008 	ldr	r3, [fp, #-8]
   19ca0:	e1a00003 	mov	r0, r3
   19ca4:	e28bd000 	add	sp, fp, #0
   19ca8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   19cac:	e12fff1e 	bx	lr
   19cb0:	00045630 	.word	0x00045630

00019cb4 <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>:
   19cb4:	e92d4800 	push	{fp, lr}
   19cb8:	e28db004 	add	fp, sp, #4
   19cbc:	e24dd008 	sub	sp, sp, #8
   19cc0:	e50b0008 	str	r0, [fp, #-8]
   19cc4:	e51b0008 	ldr	r0, [fp, #-8]
   19cc8:	ebffffec 	bl	19c80 <RDMSensorSI7021Humidity::~RDMSensorSI7021Humidity()>
   19ccc:	e51b0008 	ldr	r0, [fp, #-8]
   19cd0:	ebffdd8c 	bl	11308 <operator delete(void*)@plt>
   19cd4:	e51b3008 	ldr	r3, [fp, #-8]
   19cd8:	e1a00003 	mov	r0, r3
   19cdc:	e24bd004 	sub	sp, fp, #4
   19ce0:	e8bd8800 	pop	{fp, pc}

00019ce4 <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
   19ce4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   19ce8:	e28db000 	add	fp, sp, #0
   19cec:	e24dd00c 	sub	sp, sp, #12
   19cf0:	e50b0008 	str	r0, [fp, #-8]
   19cf4:	e59f2018 	ldr	r2, [pc, #24]	; 19d14 <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()+0x30>
   19cf8:	e51b3008 	ldr	r3, [fp, #-8]
   19cfc:	e5832000 	str	r2, [r3]
   19d00:	e51b3008 	ldr	r3, [fp, #-8]
   19d04:	e1a00003 	mov	r0, r3
   19d08:	e28bd000 	add	sp, fp, #0
   19d0c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   19d10:	e12fff1e 	bx	lr
   19d14:	00045648 	.word	0x00045648

00019d18 <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>:
   19d18:	e92d4800 	push	{fp, lr}
   19d1c:	e28db004 	add	fp, sp, #4
   19d20:	e24dd008 	sub	sp, sp, #8
   19d24:	e50b0008 	str	r0, [fp, #-8]
   19d28:	e51b0008 	ldr	r0, [fp, #-8]
   19d2c:	ebffffec 	bl	19ce4 <RDMSensorINA219Voltage::~RDMSensorINA219Voltage()>
   19d30:	e51b0008 	ldr	r0, [fp, #-8]
   19d34:	ebffdd73 	bl	11308 <operator delete(void*)@plt>
   19d38:	e51b3008 	ldr	r3, [fp, #-8]
   19d3c:	e1a00003 	mov	r0, r3
   19d40:	e24bd004 	sub	sp, fp, #4
   19d44:	e8bd8800 	pop	{fp, pc}

00019d48 <RDMSensorINA219Power::~RDMSensorINA219Power()>:
   19d48:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   19d4c:	e28db000 	add	fp, sp, #0
   19d50:	e24dd00c 	sub	sp, sp, #12
   19d54:	e50b0008 	str	r0, [fp, #-8]
   19d58:	e59f2018 	ldr	r2, [pc, #24]	; 19d78 <RDMSensorINA219Power::~RDMSensorINA219Power()+0x30>
   19d5c:	e51b3008 	ldr	r3, [fp, #-8]
   19d60:	e5832000 	str	r2, [r3]
   19d64:	e51b3008 	ldr	r3, [fp, #-8]
   19d68:	e1a00003 	mov	r0, r3
   19d6c:	e28bd000 	add	sp, fp, #0
   19d70:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   19d74:	e12fff1e 	bx	lr
   19d78:	00045660 	.word	0x00045660

00019d7c <RDMSensorINA219Power::~RDMSensorINA219Power()>:
   19d7c:	e92d4800 	push	{fp, lr}
   19d80:	e28db004 	add	fp, sp, #4
   19d84:	e24dd008 	sub	sp, sp, #8
   19d88:	e50b0008 	str	r0, [fp, #-8]
   19d8c:	e51b0008 	ldr	r0, [fp, #-8]
   19d90:	ebffffec 	bl	19d48 <RDMSensorINA219Power::~RDMSensorINA219Power()>
   19d94:	e51b0008 	ldr	r0, [fp, #-8]
   19d98:	ebffdd5a 	bl	11308 <operator delete(void*)@plt>
   19d9c:	e51b3008 	ldr	r3, [fp, #-8]
   19da0:	e1a00003 	mov	r0, r3
   19da4:	e24bd004 	sub	sp, fp, #4
   19da8:	e8bd8800 	pop	{fp, pc}

00019dac <RDMSensorINA219Current::~RDMSensorINA219Current()>:
   19dac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   19db0:	e28db000 	add	fp, sp, #0
   19db4:	e24dd00c 	sub	sp, sp, #12
   19db8:	e50b0008 	str	r0, [fp, #-8]
   19dbc:	e59f2018 	ldr	r2, [pc, #24]	; 19ddc <RDMSensorINA219Current::~RDMSensorINA219Current()+0x30>
   19dc0:	e51b3008 	ldr	r3, [fp, #-8]
   19dc4:	e5832000 	str	r2, [r3]
   19dc8:	e51b3008 	ldr	r3, [fp, #-8]
   19dcc:	e1a00003 	mov	r0, r3
   19dd0:	e28bd000 	add	sp, fp, #0
   19dd4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   19dd8:	e12fff1e 	bx	lr
   19ddc:	00045678 	.word	0x00045678

00019de0 <RDMSensorINA219Current::~RDMSensorINA219Current()>:
   19de0:	e92d4800 	push	{fp, lr}
   19de4:	e28db004 	add	fp, sp, #4
   19de8:	e24dd008 	sub	sp, sp, #8
   19dec:	e50b0008 	str	r0, [fp, #-8]
   19df0:	e51b0008 	ldr	r0, [fp, #-8]
   19df4:	ebffffec 	bl	19dac <RDMSensorINA219Current::~RDMSensorINA219Current()>
   19df8:	e51b0008 	ldr	r0, [fp, #-8]
   19dfc:	ebffdd41 	bl	11308 <operator delete(void*)@plt>
   19e00:	e51b3008 	ldr	r3, [fp, #-8]
   19e04:	e1a00003 	mov	r0, r3
   19e08:	e24bd004 	sub	sp, fp, #4
   19e0c:	e8bd8800 	pop	{fp, pc}

00019e10 <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
   19e10:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   19e14:	e28db000 	add	fp, sp, #0
   19e18:	e24dd00c 	sub	sp, sp, #12
   19e1c:	e50b0008 	str	r0, [fp, #-8]
   19e20:	e59f2018 	ldr	r2, [pc, #24]	; 19e40 <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()+0x30>
   19e24:	e51b3008 	ldr	r3, [fp, #-8]
   19e28:	e5832000 	str	r2, [r3]
   19e2c:	e51b3008 	ldr	r3, [fp, #-8]
   19e30:	e1a00003 	mov	r0, r3
   19e34:	e28bd000 	add	sp, fp, #0
   19e38:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   19e3c:	e12fff1e 	bx	lr
   19e40:	00045690 	.word	0x00045690

00019e44 <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>:
   19e44:	e92d4800 	push	{fp, lr}
   19e48:	e28db004 	add	fp, sp, #4
   19e4c:	e24dd008 	sub	sp, sp, #8
   19e50:	e50b0008 	str	r0, [fp, #-8]
   19e54:	e51b0008 	ldr	r0, [fp, #-8]
   19e58:	ebffffec 	bl	19e10 <RDMSensorHTU21DTemperature::~RDMSensorHTU21DTemperature()>
   19e5c:	e51b0008 	ldr	r0, [fp, #-8]
   19e60:	ebffdd28 	bl	11308 <operator delete(void*)@plt>
   19e64:	e51b3008 	ldr	r3, [fp, #-8]
   19e68:	e1a00003 	mov	r0, r3
   19e6c:	e24bd004 	sub	sp, fp, #4
   19e70:	e8bd8800 	pop	{fp, pc}

00019e74 <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
   19e74:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   19e78:	e28db000 	add	fp, sp, #0
   19e7c:	e24dd00c 	sub	sp, sp, #12
   19e80:	e50b0008 	str	r0, [fp, #-8]
   19e84:	e59f2018 	ldr	r2, [pc, #24]	; 19ea4 <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()+0x30>
   19e88:	e51b3008 	ldr	r3, [fp, #-8]
   19e8c:	e5832000 	str	r2, [r3]
   19e90:	e51b3008 	ldr	r3, [fp, #-8]
   19e94:	e1a00003 	mov	r0, r3
   19e98:	e28bd000 	add	sp, fp, #0
   19e9c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   19ea0:	e12fff1e 	bx	lr
   19ea4:	000456a8 	.word	0x000456a8

00019ea8 <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>:
   19ea8:	e92d4800 	push	{fp, lr}
   19eac:	e28db004 	add	fp, sp, #4
   19eb0:	e24dd008 	sub	sp, sp, #8
   19eb4:	e50b0008 	str	r0, [fp, #-8]
   19eb8:	e51b0008 	ldr	r0, [fp, #-8]
   19ebc:	ebffffec 	bl	19e74 <RDMSensorHTU21DHumidity::~RDMSensorHTU21DHumidity()>
   19ec0:	e51b0008 	ldr	r0, [fp, #-8]
   19ec4:	ebffdd0f 	bl	11308 <operator delete(void*)@plt>
   19ec8:	e51b3008 	ldr	r3, [fp, #-8]
   19ecc:	e1a00003 	mov	r0, r3
   19ed0:	e24bd004 	sub	sp, fp, #4
   19ed4:	e8bd8800 	pop	{fp, pc}

00019ed8 <RDMSensorMCP9808::~RDMSensorMCP9808()>:
   19ed8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   19edc:	e28db000 	add	fp, sp, #0
   19ee0:	e24dd00c 	sub	sp, sp, #12
   19ee4:	e50b0008 	str	r0, [fp, #-8]
   19ee8:	e59f2018 	ldr	r2, [pc, #24]	; 19f08 <RDMSensorMCP9808::~RDMSensorMCP9808()+0x30>
   19eec:	e51b3008 	ldr	r3, [fp, #-8]
   19ef0:	e5832000 	str	r2, [r3]
   19ef4:	e51b3008 	ldr	r3, [fp, #-8]
   19ef8:	e1a00003 	mov	r0, r3
   19efc:	e28bd000 	add	sp, fp, #0
   19f00:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   19f04:	e12fff1e 	bx	lr
   19f08:	000456c0 	.word	0x000456c0

00019f0c <RDMSensorMCP9808::~RDMSensorMCP9808()>:
   19f0c:	e92d4800 	push	{fp, lr}
   19f10:	e28db004 	add	fp, sp, #4
   19f14:	e24dd008 	sub	sp, sp, #8
   19f18:	e50b0008 	str	r0, [fp, #-8]
   19f1c:	e51b0008 	ldr	r0, [fp, #-8]
   19f20:	ebffffec 	bl	19ed8 <RDMSensorMCP9808::~RDMSensorMCP9808()>
   19f24:	e51b0008 	ldr	r0, [fp, #-8]
   19f28:	ebffdcf6 	bl	11308 <operator delete(void*)@plt>
   19f2c:	e51b3008 	ldr	r3, [fp, #-8]
   19f30:	e1a00003 	mov	r0, r3
   19f34:	e24bd004 	sub	sp, fp, #4
   19f38:	e8bd8800 	pop	{fp, pc}

00019f3c <RDMSensorBH170::~RDMSensorBH170()>:
   19f3c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   19f40:	e28db000 	add	fp, sp, #0
   19f44:	e24dd00c 	sub	sp, sp, #12
   19f48:	e50b0008 	str	r0, [fp, #-8]
   19f4c:	e59f2018 	ldr	r2, [pc, #24]	; 19f6c <RDMSensorBH170::~RDMSensorBH170()+0x30>
   19f50:	e51b3008 	ldr	r3, [fp, #-8]
   19f54:	e5832000 	str	r2, [r3]
   19f58:	e51b3008 	ldr	r3, [fp, #-8]
   19f5c:	e1a00003 	mov	r0, r3
   19f60:	e28bd000 	add	sp, fp, #0
   19f64:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   19f68:	e12fff1e 	bx	lr
   19f6c:	000456d8 	.word	0x000456d8

00019f70 <RDMSensorBH170::~RDMSensorBH170()>:
   19f70:	e92d4800 	push	{fp, lr}
   19f74:	e28db004 	add	fp, sp, #4
   19f78:	e24dd008 	sub	sp, sp, #8
   19f7c:	e50b0008 	str	r0, [fp, #-8]
   19f80:	e51b0008 	ldr	r0, [fp, #-8]
   19f84:	ebffffec 	bl	19f3c <RDMSensorBH170::~RDMSensorBH170()>
   19f88:	e51b0008 	ldr	r0, [fp, #-8]
   19f8c:	ebffdcdd 	bl	11308 <operator delete(void*)@plt>
   19f90:	e51b3008 	ldr	r3, [fp, #-8]
   19f94:	e1a00003 	mov	r0, r3
   19f98:	e24bd004 	sub	sp, fp, #4
   19f9c:	e8bd8800 	pop	{fp, pc}

00019fa0 <RDMSensor::SetType(unsigned char) [clone .isra.0]>:
   19fa0:	e5c01000 	strb	r1, [r0]
   19fa4:	e12fff1e 	bx	lr

00019fa8 <RDMSensor::SetUnit(unsigned char) [clone .isra.1]>:
   19fa8:	e5c01000 	strb	r1, [r0]
   19fac:	e12fff1e 	bx	lr

00019fb0 <RDMSensor::SetPrefix(unsigned char) [clone .isra.2]>:
   19fb0:	e5c01000 	strb	r1, [r0]
   19fb4:	e12fff1e 	bx	lr

00019fb8 <RDMSensor::SetRangeMin(short) [clone .isra.3]>:
   19fb8:	e1c010b0 	strh	r1, [r0]
   19fbc:	e12fff1e 	bx	lr

00019fc0 <RDMSensor::SetRangeMax(short) [clone .isra.4]>:
   19fc0:	e1c010b0 	strh	r1, [r0]
   19fc4:	e12fff1e 	bx	lr

00019fc8 <RDMSensor::SetNormalMin(short) [clone .isra.5]>:
   19fc8:	e1c010b0 	strh	r1, [r0]
   19fcc:	e12fff1e 	bx	lr

00019fd0 <RDMSensor::SetNormalMax(short) [clone .isra.6]>:
   19fd0:	e1c010b0 	strh	r1, [r0]
   19fd4:	e12fff1e 	bx	lr

00019fd8 <RDMSensors::GetCount() const [clone .isra.7]>:
   19fd8:	e12fff1e 	bx	lr

00019fdc <sensor::BH170::Initialize() [clone .isra.8]>:
   19fdc:	e12fff1e 	bx	lr

00019fe0 <short rdm::sensor::safe_range_min<int>(int const&) [clone .isra.9]>:
   19fe0:	e59f300c 	ldr	r3, [pc, #12]	; 19ff4 <short rdm::sensor::safe_range_min<int>(int const&) [clone .isra.9]+0x14>
   19fe4:	e1500003 	cmp	r0, r3
   19fe8:	b1a00003 	movlt	r0, r3
   19fec:	e6bf0070 	sxth	r0, r0
   19ff0:	e12fff1e 	bx	lr
   19ff4:	ffff8000 	.word	0xffff8000

00019ff8 <short rdm::sensor::safe_range_max<int>(int const&) [clone .isra.10]>:
   19ff8:	e59f300c 	ldr	r3, [pc, #12]	; 1a00c <short rdm::sensor::safe_range_max<int>(int const&) [clone .isra.10]+0x14>
   19ffc:	e1500003 	cmp	r0, r3
   1a000:	a1a00003 	movge	r0, r3
   1a004:	e6bf0070 	sxth	r0, r0
   1a008:	e12fff1e 	bx	lr
   1a00c:	00007fff 	.word	0x00007fff

0001a010 <sensor::MCP9808::Initialize() [clone .isra.11]>:
   1a010:	e12fff1e 	bx	lr

0001a014 <sensor::HTU21D::Initialize() [clone .isra.12]>:
   1a014:	e12fff1e 	bx	lr

0001a018 <sensor::INA219::Initialize() [clone .isra.13]>:
   1a018:	e12fff1e 	bx	lr

0001a01c <sensor::SI7021::Initialize() [clone .isra.14]>:
   1a01c:	e12fff1e 	bx	lr

0001a020 <short rdm::sensor::safe_range_min<short>(short const&) [clone .isra.15]>:
   1a020:	e12fff1e 	bx	lr

0001a024 <short rdm::sensor::safe_range_max<short>(short const&) [clone .isra.16]>:
   1a024:	e12fff1e 	bx	lr

0001a028 <RDMSensors::GetTypeString(rdm::sensors::type)>:
   1a028:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1a02c:	e28db000 	add	fp, sp, #0
   1a030:	e24dd00c 	sub	sp, sp, #12
   1a034:	e50b0008 	str	r0, [fp, #-8]
   1a038:	e51b3008 	ldr	r3, [fp, #-8]
   1a03c:	e3530004 	cmp	r3, #4
   1a040:	8a000004 	bhi	1a058 <RDMSensors::GetTypeString(rdm::sensors::type)+0x30>
   1a044:	e51b3008 	ldr	r3, [fp, #-8]
   1a048:	e1a03183 	lsl	r3, r3, #3
   1a04c:	e59f2018 	ldr	r2, [pc, #24]	; 1a06c <RDMSensors::GetTypeString(rdm::sensors::type)+0x44>
   1a050:	e0833002 	add	r3, r3, r2
   1a054:	ea000000 	b	1a05c <RDMSensors::GetTypeString(rdm::sensors::type)+0x34>
   1a058:	e59f3010 	ldr	r3, [pc, #16]	; 1a070 <RDMSensors::GetTypeString(rdm::sensors::type)+0x48>
   1a05c:	e1a00003 	mov	r0, r3
   1a060:	e28bd000 	add	sp, fp, #0
   1a064:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1a068:	e12fff1e 	bx	lr
   1a06c:	00045768 	.word	0x00045768
   1a070:	000456fc 	.word	0x000456fc

0001a074 <RDMSensors::GetTypeString(char const*)>:
   1a074:	e92d4800 	push	{fp, lr}
   1a078:	e28db004 	add	fp, sp, #4
   1a07c:	e24dd010 	sub	sp, sp, #16
   1a080:	e50b0010 	str	r0, [fp, #-16]
   1a084:	e3a03000 	mov	r3, #0
   1a088:	e50b3008 	str	r3, [fp, #-8]
   1a08c:	e51b3008 	ldr	r3, [fp, #-8]
   1a090:	e3530004 	cmp	r3, #4
   1a094:	8a00000f 	bhi	1a0d8 <RDMSensors::GetTypeString(char const*)+0x64>
   1a098:	e51b3008 	ldr	r3, [fp, #-8]
   1a09c:	e1a03183 	lsl	r3, r3, #3
   1a0a0:	e59f2040 	ldr	r2, [pc, #64]	; 1a0e8 <RDMSensors::GetTypeString(char const*)+0x74>
   1a0a4:	e0833002 	add	r3, r3, r2
   1a0a8:	e1a01003 	mov	r1, r3
   1a0ac:	e51b0010 	ldr	r0, [fp, #-16]
   1a0b0:	ebffdc31 	bl	1117c <strcasecmp@plt>
   1a0b4:	e1a03000 	mov	r3, r0
   1a0b8:	e3530000 	cmp	r3, #0
   1a0bc:	1a000001 	bne	1a0c8 <RDMSensors::GetTypeString(char const*)+0x54>
   1a0c0:	e51b3008 	ldr	r3, [fp, #-8]
   1a0c4:	ea000004 	b	1a0dc <RDMSensors::GetTypeString(char const*)+0x68>
   1a0c8:	e51b3008 	ldr	r3, [fp, #-8]
   1a0cc:	e2833001 	add	r3, r3, #1
   1a0d0:	e50b3008 	str	r3, [fp, #-8]
   1a0d4:	eaffffec 	b	1a08c <RDMSensors::GetTypeString(char const*)+0x18>
   1a0d8:	e3a03005 	mov	r3, #5
   1a0dc:	e1a00003 	mov	r0, r3
   1a0e0:	e24bd004 	sub	sp, fp, #4
   1a0e4:	e8bd8800 	pop	{fp, pc}
   1a0e8:	00045768 	.word	0x00045768

0001a0ec <RDMSensor::SetType(unsigned char)>:
   1a0ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1a0f0:	e28db000 	add	fp, sp, #0
   1a0f4:	e24dd00c 	sub	sp, sp, #12
   1a0f8:	e50b0008 	str	r0, [fp, #-8]
   1a0fc:	e1a03001 	mov	r3, r1
   1a100:	e54b3009 	strb	r3, [fp, #-9]
   1a104:	e51b3008 	ldr	r3, [fp, #-8]
   1a108:	e55b2009 	ldrb	r2, [fp, #-9]
   1a10c:	e5c32007 	strb	r2, [r3, #7]
   1a110:	e1a00000 	nop			; (mov r0, r0)
   1a114:	e28bd000 	add	sp, fp, #0
   1a118:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1a11c:	e12fff1e 	bx	lr

0001a120 <RDMSensor::SetUnit(unsigned char)>:
   1a120:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1a124:	e28db000 	add	fp, sp, #0
   1a128:	e24dd00c 	sub	sp, sp, #12
   1a12c:	e50b0008 	str	r0, [fp, #-8]
   1a130:	e1a03001 	mov	r3, r1
   1a134:	e54b3009 	strb	r3, [fp, #-9]
   1a138:	e51b3008 	ldr	r3, [fp, #-8]
   1a13c:	e55b2009 	ldrb	r2, [fp, #-9]
   1a140:	e5c32008 	strb	r2, [r3, #8]
   1a144:	e1a00000 	nop			; (mov r0, r0)
   1a148:	e28bd000 	add	sp, fp, #0
   1a14c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1a150:	e12fff1e 	bx	lr

0001a154 <RDMSensor::SetPrefix(unsigned char)>:
   1a154:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1a158:	e28db000 	add	fp, sp, #0
   1a15c:	e24dd00c 	sub	sp, sp, #12
   1a160:	e50b0008 	str	r0, [fp, #-8]
   1a164:	e1a03001 	mov	r3, r1
   1a168:	e54b3009 	strb	r3, [fp, #-9]
   1a16c:	e51b3008 	ldr	r3, [fp, #-8]
   1a170:	e55b2009 	ldrb	r2, [fp, #-9]
   1a174:	e5c32009 	strb	r2, [r3, #9]
   1a178:	e1a00000 	nop			; (mov r0, r0)
   1a17c:	e28bd000 	add	sp, fp, #0
   1a180:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1a184:	e12fff1e 	bx	lr

0001a188 <RDMSensor::SetRangeMin(short)>:
   1a188:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1a18c:	e28db000 	add	fp, sp, #0
   1a190:	e24dd00c 	sub	sp, sp, #12
   1a194:	e50b0008 	str	r0, [fp, #-8]
   1a198:	e1a03001 	mov	r3, r1
   1a19c:	e14b30ba 	strh	r3, [fp, #-10]
   1a1a0:	e51b3008 	ldr	r3, [fp, #-8]
   1a1a4:	e15b20ba 	ldrh	r2, [fp, #-10]
   1a1a8:	e1c320ba 	strh	r2, [r3, #10]
   1a1ac:	e1a00000 	nop			; (mov r0, r0)
   1a1b0:	e28bd000 	add	sp, fp, #0
   1a1b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1a1b8:	e12fff1e 	bx	lr

0001a1bc <RDMSensor::SetRangeMax(short)>:
   1a1bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1a1c0:	e28db000 	add	fp, sp, #0
   1a1c4:	e24dd00c 	sub	sp, sp, #12
   1a1c8:	e50b0008 	str	r0, [fp, #-8]
   1a1cc:	e1a03001 	mov	r3, r1
   1a1d0:	e14b30ba 	strh	r3, [fp, #-10]
   1a1d4:	e51b3008 	ldr	r3, [fp, #-8]
   1a1d8:	e15b20ba 	ldrh	r2, [fp, #-10]
   1a1dc:	e1c320bc 	strh	r2, [r3, #12]
   1a1e0:	e1a00000 	nop			; (mov r0, r0)
   1a1e4:	e28bd000 	add	sp, fp, #0
   1a1e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1a1ec:	e12fff1e 	bx	lr

0001a1f0 <RDMSensor::SetNormalMin(short)>:
   1a1f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1a1f4:	e28db000 	add	fp, sp, #0
   1a1f8:	e24dd00c 	sub	sp, sp, #12
   1a1fc:	e50b0008 	str	r0, [fp, #-8]
   1a200:	e1a03001 	mov	r3, r1
   1a204:	e14b30ba 	strh	r3, [fp, #-10]
   1a208:	e51b3008 	ldr	r3, [fp, #-8]
   1a20c:	e15b20ba 	ldrh	r2, [fp, #-10]
   1a210:	e1c320be 	strh	r2, [r3, #14]
   1a214:	e1a00000 	nop			; (mov r0, r0)
   1a218:	e28bd000 	add	sp, fp, #0
   1a21c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1a220:	e12fff1e 	bx	lr

0001a224 <RDMSensor::SetNormalMax(short)>:
   1a224:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1a228:	e28db000 	add	fp, sp, #0
   1a22c:	e24dd00c 	sub	sp, sp, #12
   1a230:	e50b0008 	str	r0, [fp, #-8]
   1a234:	e1a03001 	mov	r3, r1
   1a238:	e14b30ba 	strh	r3, [fp, #-10]
   1a23c:	e51b3008 	ldr	r3, [fp, #-8]
   1a240:	e15b20ba 	ldrh	r2, [fp, #-10]
   1a244:	e1c321b0 	strh	r2, [r3, #16]
   1a248:	e1a00000 	nop			; (mov r0, r0)
   1a24c:	e28bd000 	add	sp, fp, #0
   1a250:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1a254:	e12fff1e 	bx	lr

0001a258 <RDMSensor::GetDefintion()>:
   1a258:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1a25c:	e28db000 	add	fp, sp, #0
   1a260:	e24dd00c 	sub	sp, sp, #12
   1a264:	e50b0008 	str	r0, [fp, #-8]
   1a268:	e51b3008 	ldr	r3, [fp, #-8]
   1a26c:	e2833006 	add	r3, r3, #6
   1a270:	e1a00003 	mov	r0, r3
   1a274:	e28bd000 	add	sp, fp, #0
   1a278:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1a27c:	e12fff1e 	bx	lr

0001a280 <Hardware::GetCoreTemperatureMin()>:
   1a280:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1a284:	e28db000 	add	fp, sp, #0
   1a288:	e24dd00c 	sub	sp, sp, #12
   1a28c:	e50b0008 	str	r0, [fp, #-8]
   1a290:	e59f3010 	ldr	r3, [pc, #16]	; 1a2a8 <Hardware::GetCoreTemperatureMin()+0x28>
   1a294:	ee073a90 	vmov	s15, r3
   1a298:	eeb00a67 	vmov.f32	s0, s15
   1a29c:	e28bd000 	add	sp, fp, #0
   1a2a0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1a2a4:	e12fff1e 	bx	lr
   1a2a8:	c2200000 	.word	0xc2200000

0001a2ac <CpuTemperature::CpuTemperature(unsigned char)>:
   1a2ac:	e92d4810 	push	{r4, fp, lr}
   1a2b0:	e28db008 	add	fp, sp, #8
   1a2b4:	e24dd00c 	sub	sp, sp, #12
   1a2b8:	e50b0010 	str	r0, [fp, #-16]
   1a2bc:	e1a03001 	mov	r3, r1
   1a2c0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   1a2c4:	e51b3010 	ldr	r3, [fp, #-16]
   1a2c8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
   1a2cc:	e1a01002 	mov	r1, r2
   1a2d0:	e1a00003 	mov	r0, r3
   1a2d4:	eb000158 	bl	1a83c <RDMSensor::RDMSensor(unsigned char)>
   1a2d8:	e59f2114 	ldr	r2, [pc, #276]	; 1a3f4 <CpuTemperature::CpuTemperature(unsigned char)+0x148>
   1a2dc:	e51b3010 	ldr	r3, [fp, #-16]
   1a2e0:	e5832000 	str	r2, [r3]
   1a2e4:	e51b3010 	ldr	r3, [fp, #-16]
   1a2e8:	e3a01000 	mov	r1, #0
   1a2ec:	e1a00003 	mov	r0, r3
   1a2f0:	ebffff7d 	bl	1a0ec <RDMSensor::SetType(unsigned char)>
   1a2f4:	e51b3010 	ldr	r3, [fp, #-16]
   1a2f8:	e3a01001 	mov	r1, #1
   1a2fc:	e1a00003 	mov	r0, r3
   1a300:	ebffff86 	bl	1a120 <RDMSensor::SetUnit(unsigned char)>
   1a304:	e51b3010 	ldr	r3, [fp, #-16]
   1a308:	e3a01000 	mov	r1, #0
   1a30c:	e1a00003 	mov	r0, r3
   1a310:	ebffff8f 	bl	1a154 <RDMSensor::SetPrefix(unsigned char)>
   1a314:	e51b4010 	ldr	r4, [fp, #-16]
   1a318:	ebffdcb8 	bl	11600 <Hardware::Get()>
   1a31c:	e1a03000 	mov	r3, r0
   1a320:	e1a00003 	mov	r0, r3
   1a324:	ebffffd5 	bl	1a280 <Hardware::GetCoreTemperatureMin()>
   1a328:	eef07a40 	vmov.f32	s15, s0
   1a32c:	eefd7ae7 	vcvt.s32.f32	s15, s15
   1a330:	ee173a90 	vmov	r3, s15
   1a334:	e6bf3073 	sxth	r3, r3
   1a338:	e1a01003 	mov	r1, r3
   1a33c:	e1a00004 	mov	r0, r4
   1a340:	ebffff90 	bl	1a188 <RDMSensor::SetRangeMin(short)>
   1a344:	e51b4010 	ldr	r4, [fp, #-16]
   1a348:	ebffdcac 	bl	11600 <Hardware::Get()>
   1a34c:	e1a03000 	mov	r3, r0
   1a350:	e1a00003 	mov	r0, r3
   1a354:	eb00974d 	bl	40090 <Hardware::GetCoreTemperatureMax()>
   1a358:	eef07a40 	vmov.f32	s15, s0
   1a35c:	eefd7ae7 	vcvt.s32.f32	s15, s15
   1a360:	ee173a90 	vmov	r3, s15
   1a364:	e6bf3073 	sxth	r3, r3
   1a368:	e1a01003 	mov	r1, r3
   1a36c:	e1a00004 	mov	r0, r4
   1a370:	ebffff91 	bl	1a1bc <RDMSensor::SetRangeMax(short)>
   1a374:	e51b4010 	ldr	r4, [fp, #-16]
   1a378:	ebffdca0 	bl	11600 <Hardware::Get()>
   1a37c:	e1a03000 	mov	r3, r0
   1a380:	e1a00003 	mov	r0, r3
   1a384:	ebffffbd 	bl	1a280 <Hardware::GetCoreTemperatureMin()>
   1a388:	eef07a40 	vmov.f32	s15, s0
   1a38c:	eefd7ae7 	vcvt.s32.f32	s15, s15
   1a390:	ee173a90 	vmov	r3, s15
   1a394:	e6bf3073 	sxth	r3, r3
   1a398:	e1a01003 	mov	r1, r3
   1a39c:	e1a00004 	mov	r0, r4
   1a3a0:	ebffff92 	bl	1a1f0 <RDMSensor::SetNormalMin(short)>
   1a3a4:	e51b4010 	ldr	r4, [fp, #-16]
   1a3a8:	ebffdc94 	bl	11600 <Hardware::Get()>
   1a3ac:	e1a03000 	mov	r3, r0
   1a3b0:	e1a00003 	mov	r0, r3
   1a3b4:	eb009735 	bl	40090 <Hardware::GetCoreTemperatureMax()>
   1a3b8:	eef07a40 	vmov.f32	s15, s0
   1a3bc:	eefd7ae7 	vcvt.s32.f32	s15, s15
   1a3c0:	ee173a90 	vmov	r3, s15
   1a3c4:	e6bf3073 	sxth	r3, r3
   1a3c8:	e1a01003 	mov	r1, r3
   1a3cc:	e1a00004 	mov	r0, r4
   1a3d0:	ebffff93 	bl	1a224 <RDMSensor::SetNormalMax(short)>
   1a3d4:	e51b3010 	ldr	r3, [fp, #-16]
   1a3d8:	e59f1018 	ldr	r1, [pc, #24]	; 1a3f8 <CpuTemperature::CpuTemperature(unsigned char)+0x14c>
   1a3dc:	e1a00003 	mov	r0, r3
   1a3e0:	eb000138 	bl	1a8c8 <RDMSensor::SetDescription(char const*)>
   1a3e4:	e51b3010 	ldr	r3, [fp, #-16]
   1a3e8:	e1a00003 	mov	r0, r3
   1a3ec:	e24bd008 	sub	sp, fp, #8
   1a3f0:	e8bd8810 	pop	{r4, fp, pc}
   1a3f4:	00045724 	.word	0x00045724
   1a3f8:	00045718 	.word	0x00045718

0001a3fc <CpuTemperature::Initialize()>:
   1a3fc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1a400:	e28db000 	add	fp, sp, #0
   1a404:	e24dd00c 	sub	sp, sp, #12
   1a408:	e50b0008 	str	r0, [fp, #-8]
   1a40c:	e3a03001 	mov	r3, #1
   1a410:	e1a00003 	mov	r0, r3
   1a414:	e28bd000 	add	sp, fp, #0
   1a418:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1a41c:	e12fff1e 	bx	lr

0001a420 <CpuTemperature::GetValue()>:
   1a420:	e92d4800 	push	{fp, lr}
   1a424:	e28db004 	add	fp, sp, #4
   1a428:	e24dd010 	sub	sp, sp, #16
   1a42c:	e50b0010 	str	r0, [fp, #-16]
   1a430:	ebffdc72 	bl	11600 <Hardware::Get()>
   1a434:	e1a03000 	mov	r3, r0
   1a438:	e1a00003 	mov	r0, r3
   1a43c:	eb0096b3 	bl	3ff10 <Hardware::GetCoreTemperature()>
   1a440:	eef07a40 	vmov.f32	s15, s0
   1a444:	eefd7ae7 	vcvt.s32.f32	s15, s15
   1a448:	ee173a90 	vmov	r3, s15
   1a44c:	e14b30b6 	strh	r3, [fp, #-6]
   1a450:	e15b30f6 	ldrsh	r3, [fp, #-6]
   1a454:	e1a00003 	mov	r0, r3
   1a458:	e24bd004 	sub	sp, fp, #4
   1a45c:	e8bd8800 	pop	{fp, pc}

0001a460 <RDMSensors::RDMSensors()>:
   1a460:	e92d4810 	push	{r4, fp, lr}
   1a464:	e28db008 	add	fp, sp, #8
   1a468:	e24dd00c 	sub	sp, sp, #12
   1a46c:	e50b0010 	str	r0, [fp, #-16]
   1a470:	e51b3010 	ldr	r3, [fp, #-16]
   1a474:	e3a02000 	mov	r2, #0
   1a478:	e5832000 	str	r2, [r3]
   1a47c:	e51b3010 	ldr	r3, [fp, #-16]
   1a480:	e3a02000 	mov	r2, #0
   1a484:	e5c32004 	strb	r2, [r3, #4]
   1a488:	e59f205c 	ldr	r2, [pc, #92]	; 1a4ec <RDMSensors::RDMSensors()+0x8c>
   1a48c:	e51b3010 	ldr	r3, [fp, #-16]
   1a490:	e5823000 	str	r3, [r2]
   1a494:	e3a00040 	mov	r0, #64	; 0x40
   1a498:	ebffdb82 	bl	112a8 <operator new[](unsigned int)@plt>
   1a49c:	e1a03000 	mov	r3, r0
   1a4a0:	e1a02003 	mov	r2, r3
   1a4a4:	e51b3010 	ldr	r3, [fp, #-16]
   1a4a8:	e5832000 	str	r2, [r3]
   1a4ac:	e3a00040 	mov	r0, #64	; 0x40
   1a4b0:	ebffdb22 	bl	11140 <operator new(unsigned int)@plt>
   1a4b4:	e1a03000 	mov	r3, r0
   1a4b8:	e1a04003 	mov	r4, r3
   1a4bc:	e51b3010 	ldr	r3, [fp, #-16]
   1a4c0:	e5d33004 	ldrb	r3, [r3, #4]
   1a4c4:	e1a01003 	mov	r1, r3
   1a4c8:	e1a00004 	mov	r0, r4
   1a4cc:	ebffff76 	bl	1a2ac <CpuTemperature::CpuTemperature(unsigned char)>
   1a4d0:	e1a01004 	mov	r1, r4
   1a4d4:	e51b0010 	ldr	r0, [fp, #-16]
   1a4d8:	eb0001b0 	bl	1aba0 <RDMSensors::Add(RDMSensor*)>
   1a4dc:	e51b3010 	ldr	r3, [fp, #-16]
   1a4e0:	e1a00003 	mov	r0, r3
   1a4e4:	e24bd008 	sub	sp, fp, #8
   1a4e8:	e8bd8810 	pop	{r4, fp, pc}
   1a4ec:	0005c3b4 	.word	0x0005c3b4

0001a4f0 <RDMSensors::~RDMSensors()>:
   1a4f0:	e92d4800 	push	{fp, lr}
   1a4f4:	e28db004 	add	fp, sp, #4
   1a4f8:	e24dd010 	sub	sp, sp, #16
   1a4fc:	e50b0010 	str	r0, [fp, #-16]
   1a500:	e3a03000 	mov	r3, #0
   1a504:	e50b3008 	str	r3, [fp, #-8]
   1a508:	e51b3010 	ldr	r3, [fp, #-16]
   1a50c:	e5d33004 	ldrb	r3, [r3, #4]
   1a510:	e1a02003 	mov	r2, r3
   1a514:	e51b3008 	ldr	r3, [fp, #-8]
   1a518:	e1530002 	cmp	r3, r2
   1a51c:	2a00002b 	bcs	1a5d0 <RDMSensors::~RDMSensors()+0xe0>
   1a520:	e51b3010 	ldr	r3, [fp, #-16]
   1a524:	e5932000 	ldr	r2, [r3]
   1a528:	e51b3008 	ldr	r3, [fp, #-8]
   1a52c:	e1a03103 	lsl	r3, r3, #2
   1a530:	e0823003 	add	r3, r2, r3
   1a534:	e5933000 	ldr	r3, [r3]
   1a538:	e3530000 	cmp	r3, #0
   1a53c:	0a00001f 	beq	1a5c0 <RDMSensors::~RDMSensors()+0xd0>
   1a540:	e51b3010 	ldr	r3, [fp, #-16]
   1a544:	e5932000 	ldr	r2, [r3]
   1a548:	e51b3008 	ldr	r3, [fp, #-8]
   1a54c:	e1a03103 	lsl	r3, r3, #2
   1a550:	e0823003 	add	r3, r2, r3
   1a554:	e5933000 	ldr	r3, [r3]
   1a558:	e3530000 	cmp	r3, #0
   1a55c:	0a000010 	beq	1a5a4 <RDMSensors::~RDMSensors()+0xb4>
   1a560:	e51b3010 	ldr	r3, [fp, #-16]
   1a564:	e5932000 	ldr	r2, [r3]
   1a568:	e51b3008 	ldr	r3, [fp, #-8]
   1a56c:	e1a03103 	lsl	r3, r3, #2
   1a570:	e0823003 	add	r3, r2, r3
   1a574:	e5931000 	ldr	r1, [r3]
   1a578:	e51b3010 	ldr	r3, [fp, #-16]
   1a57c:	e5932000 	ldr	r2, [r3]
   1a580:	e51b3008 	ldr	r3, [fp, #-8]
   1a584:	e1a03103 	lsl	r3, r3, #2
   1a588:	e0823003 	add	r3, r2, r3
   1a58c:	e5933000 	ldr	r3, [r3]
   1a590:	e5933000 	ldr	r3, [r3]
   1a594:	e2833004 	add	r3, r3, #4
   1a598:	e5933000 	ldr	r3, [r3]
   1a59c:	e1a00001 	mov	r0, r1
   1a5a0:	e12fff33 	blx	r3
   1a5a4:	e51b3010 	ldr	r3, [fp, #-16]
   1a5a8:	e5932000 	ldr	r2, [r3]
   1a5ac:	e51b3008 	ldr	r3, [fp, #-8]
   1a5b0:	e1a03103 	lsl	r3, r3, #2
   1a5b4:	e0823003 	add	r3, r2, r3
   1a5b8:	e3a02000 	mov	r2, #0
   1a5bc:	e5832000 	str	r2, [r3]
   1a5c0:	e51b3008 	ldr	r3, [fp, #-8]
   1a5c4:	e2833001 	add	r3, r3, #1
   1a5c8:	e50b3008 	str	r3, [fp, #-8]
   1a5cc:	eaffffcd 	b	1a508 <RDMSensors::~RDMSensors()+0x18>
   1a5d0:	e51b3010 	ldr	r3, [fp, #-16]
   1a5d4:	e5933000 	ldr	r3, [r3]
   1a5d8:	e3530000 	cmp	r3, #0
   1a5dc:	0a000003 	beq	1a5f0 <RDMSensors::~RDMSensors()+0x100>
   1a5e0:	e51b3010 	ldr	r3, [fp, #-16]
   1a5e4:	e5933000 	ldr	r3, [r3]
   1a5e8:	e1a00003 	mov	r0, r3
   1a5ec:	ebffdb69 	bl	11398 <operator delete[](void*)@plt>
   1a5f0:	e51b3010 	ldr	r3, [fp, #-16]
   1a5f4:	e1a00003 	mov	r0, r3
   1a5f8:	e24bd004 	sub	sp, fp, #4
   1a5fc:	e8bd8800 	pop	{fp, pc}

0001a600 <RDMSensors::GetDefintion(unsigned char)>:
   1a600:	e92d4800 	push	{fp, lr}
   1a604:	e28db004 	add	fp, sp, #4
   1a608:	e24dd008 	sub	sp, sp, #8
   1a60c:	e50b0008 	str	r0, [fp, #-8]
   1a610:	e1a03001 	mov	r3, r1
   1a614:	e54b3009 	strb	r3, [fp, #-9]
   1a618:	e51b3008 	ldr	r3, [fp, #-8]
   1a61c:	e5932000 	ldr	r2, [r3]
   1a620:	e55b3009 	ldrb	r3, [fp, #-9]
   1a624:	e1a03103 	lsl	r3, r3, #2
   1a628:	e0823003 	add	r3, r2, r3
   1a62c:	e5933000 	ldr	r3, [r3]
   1a630:	e1a00003 	mov	r0, r3
   1a634:	ebffff07 	bl	1a258 <RDMSensor::GetDefintion()>
   1a638:	e1a03000 	mov	r3, r0
   1a63c:	e1a00003 	mov	r0, r3
   1a640:	e24bd004 	sub	sp, fp, #4
   1a644:	e8bd8800 	pop	{fp, pc}

0001a648 <RDMSensors::GetValues(unsigned char)>:
   1a648:	e92d4800 	push	{fp, lr}
   1a64c:	e28db004 	add	fp, sp, #4
   1a650:	e24dd008 	sub	sp, sp, #8
   1a654:	e50b0008 	str	r0, [fp, #-8]
   1a658:	e1a03001 	mov	r3, r1
   1a65c:	e54b3009 	strb	r3, [fp, #-9]
   1a660:	e51b3008 	ldr	r3, [fp, #-8]
   1a664:	e5932000 	ldr	r2, [r3]
   1a668:	e55b3009 	ldrb	r3, [fp, #-9]
   1a66c:	e1a03103 	lsl	r3, r3, #2
   1a670:	e0823003 	add	r3, r2, r3
   1a674:	e5933000 	ldr	r3, [r3]
   1a678:	e1a00003 	mov	r0, r3
   1a67c:	eb0000b7 	bl	1a960 <RDMSensor::GetValues()>
   1a680:	e1a03000 	mov	r3, r0
   1a684:	e1a00003 	mov	r0, r3
   1a688:	e24bd004 	sub	sp, fp, #4
   1a68c:	e8bd8800 	pop	{fp, pc}

0001a690 <RDMSensors::SetValues(unsigned char)>:
   1a690:	e92d4800 	push	{fp, lr}
   1a694:	e28db004 	add	fp, sp, #4
   1a698:	e24dd010 	sub	sp, sp, #16
   1a69c:	e50b0010 	str	r0, [fp, #-16]
   1a6a0:	e1a03001 	mov	r3, r1
   1a6a4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   1a6a8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   1a6ac:	e35300ff 	cmp	r3, #255	; 0xff
   1a6b0:	1a000013 	bne	1a704 <RDMSensors::SetValues(unsigned char)+0x74>
   1a6b4:	e3a03000 	mov	r3, #0
   1a6b8:	e50b3008 	str	r3, [fp, #-8]
   1a6bc:	e51b3010 	ldr	r3, [fp, #-16]
   1a6c0:	e5d33004 	ldrb	r3, [r3, #4]
   1a6c4:	e1a02003 	mov	r2, r3
   1a6c8:	e51b3008 	ldr	r3, [fp, #-8]
   1a6cc:	e1530002 	cmp	r3, r2
   1a6d0:	2a000013 	bcs	1a724 <RDMSensors::SetValues(unsigned char)+0x94>
   1a6d4:	e51b3010 	ldr	r3, [fp, #-16]
   1a6d8:	e5932000 	ldr	r2, [r3]
   1a6dc:	e51b3008 	ldr	r3, [fp, #-8]
   1a6e0:	e1a03103 	lsl	r3, r3, #2
   1a6e4:	e0823003 	add	r3, r2, r3
   1a6e8:	e5933000 	ldr	r3, [r3]
   1a6ec:	e1a00003 	mov	r0, r3
   1a6f0:	eb0000c2 	bl	1aa00 <RDMSensor::SetValues()>
   1a6f4:	e51b3008 	ldr	r3, [fp, #-8]
   1a6f8:	e2833001 	add	r3, r3, #1
   1a6fc:	e50b3008 	str	r3, [fp, #-8]
   1a700:	eaffffed 	b	1a6bc <RDMSensors::SetValues(unsigned char)+0x2c>
   1a704:	e51b3010 	ldr	r3, [fp, #-16]
   1a708:	e5932000 	ldr	r2, [r3]
   1a70c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   1a710:	e1a03103 	lsl	r3, r3, #2
   1a714:	e0823003 	add	r3, r2, r3
   1a718:	e5933000 	ldr	r3, [r3]
   1a71c:	e1a00003 	mov	r0, r3
   1a720:	eb0000b6 	bl	1aa00 <RDMSensor::SetValues()>
   1a724:	e1a00000 	nop			; (mov r0, r0)
   1a728:	e24bd004 	sub	sp, fp, #4
   1a72c:	e8bd8800 	pop	{fp, pc}

0001a730 <RDMSensors::SetRecord(unsigned char)>:
   1a730:	e92d4800 	push	{fp, lr}
   1a734:	e28db004 	add	fp, sp, #4
   1a738:	e24dd010 	sub	sp, sp, #16
   1a73c:	e50b0010 	str	r0, [fp, #-16]
   1a740:	e1a03001 	mov	r3, r1
   1a744:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   1a748:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   1a74c:	e35300ff 	cmp	r3, #255	; 0xff
   1a750:	1a000013 	bne	1a7a4 <RDMSensors::SetRecord(unsigned char)+0x74>
   1a754:	e3a03000 	mov	r3, #0
   1a758:	e50b3008 	str	r3, [fp, #-8]
   1a75c:	e51b3010 	ldr	r3, [fp, #-16]
   1a760:	e5d33004 	ldrb	r3, [r3, #4]
   1a764:	e1a02003 	mov	r2, r3
   1a768:	e51b3008 	ldr	r3, [fp, #-8]
   1a76c:	e1530002 	cmp	r3, r2
   1a770:	2a000013 	bcs	1a7c4 <RDMSensors::SetRecord(unsigned char)+0x94>
   1a774:	e51b3010 	ldr	r3, [fp, #-16]
   1a778:	e5932000 	ldr	r2, [r3]
   1a77c:	e51b3008 	ldr	r3, [fp, #-8]
   1a780:	e1a03103 	lsl	r3, r3, #2
   1a784:	e0823003 	add	r3, r2, r3
   1a788:	e5933000 	ldr	r3, [r3]
   1a78c:	e1a00003 	mov	r0, r3
   1a790:	eb0000b5 	bl	1aa6c <RDMSensor::Record()>
   1a794:	e51b3008 	ldr	r3, [fp, #-8]
   1a798:	e2833001 	add	r3, r3, #1
   1a79c:	e50b3008 	str	r3, [fp, #-8]
   1a7a0:	eaffffed 	b	1a75c <RDMSensors::SetRecord(unsigned char)+0x2c>
   1a7a4:	e51b3010 	ldr	r3, [fp, #-16]
   1a7a8:	e5932000 	ldr	r2, [r3]
   1a7ac:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   1a7b0:	e1a03103 	lsl	r3, r3, #2
   1a7b4:	e0823003 	add	r3, r2, r3
   1a7b8:	e5933000 	ldr	r3, [r3]
   1a7bc:	e1a00003 	mov	r0, r3
   1a7c0:	eb0000a9 	bl	1aa6c <RDMSensor::Record()>
   1a7c4:	e1a00000 	nop			; (mov r0, r0)
   1a7c8:	e24bd004 	sub	sp, fp, #4
   1a7cc:	e8bd8800 	pop	{fp, pc}

0001a7d0 <CpuTemperature::~CpuTemperature()>:
   1a7d0:	e92d4800 	push	{fp, lr}
   1a7d4:	e28db004 	add	fp, sp, #4
   1a7d8:	e24dd008 	sub	sp, sp, #8
   1a7dc:	e50b0008 	str	r0, [fp, #-8]
   1a7e0:	e59f2020 	ldr	r2, [pc, #32]	; 1a808 <CpuTemperature::~CpuTemperature()+0x38>
   1a7e4:	e51b3008 	ldr	r3, [fp, #-8]
   1a7e8:	e5832000 	str	r2, [r3]
   1a7ec:	e51b3008 	ldr	r3, [fp, #-8]
   1a7f0:	e1a00003 	mov	r0, r3
   1a7f4:	ebfff9fb 	bl	18fe8 <RDMSensor::~RDMSensor()>
   1a7f8:	e51b3008 	ldr	r3, [fp, #-8]
   1a7fc:	e1a00003 	mov	r0, r3
   1a800:	e24bd004 	sub	sp, fp, #4
   1a804:	e8bd8800 	pop	{fp, pc}
   1a808:	00045724 	.word	0x00045724

0001a80c <CpuTemperature::~CpuTemperature()>:
   1a80c:	e92d4800 	push	{fp, lr}
   1a810:	e28db004 	add	fp, sp, #4
   1a814:	e24dd008 	sub	sp, sp, #8
   1a818:	e50b0008 	str	r0, [fp, #-8]
   1a81c:	e51b0008 	ldr	r0, [fp, #-8]
   1a820:	ebffffea 	bl	1a7d0 <CpuTemperature::~CpuTemperature()>
   1a824:	e51b0008 	ldr	r0, [fp, #-8]
   1a828:	ebffdab6 	bl	11308 <operator delete(void*)@plt>
   1a82c:	e51b3008 	ldr	r3, [fp, #-8]
   1a830:	e1a00003 	mov	r0, r3
   1a834:	e24bd004 	sub	sp, fp, #4
   1a838:	e8bd8800 	pop	{fp, pc}

0001a83c <RDMSensor::RDMSensor(unsigned char)>:
   1a83c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1a840:	e28db000 	add	fp, sp, #0
   1a844:	e24dd00c 	sub	sp, sp, #12
   1a848:	e50b0008 	str	r0, [fp, #-8]
   1a84c:	e1a03001 	mov	r3, r1
   1a850:	e54b3009 	strb	r3, [fp, #-9]
   1a854:	e59f2068 	ldr	r2, [pc, #104]	; 1a8c4 <RDMSensor::RDMSensor(unsigned char)+0x88>
   1a858:	e51b3008 	ldr	r3, [fp, #-8]
   1a85c:	e5832000 	str	r2, [r3]
   1a860:	e51b3008 	ldr	r3, [fp, #-8]
   1a864:	e55b2009 	ldrb	r2, [fp, #-9]
   1a868:	e5c32004 	strb	r2, [r3, #4]
   1a86c:	e51b3008 	ldr	r3, [fp, #-8]
   1a870:	e5d32004 	ldrb	r2, [r3, #4]
   1a874:	e51b3008 	ldr	r3, [fp, #-8]
   1a878:	e5c32006 	strb	r2, [r3, #6]
   1a87c:	e51b3008 	ldr	r3, [fp, #-8]
   1a880:	e3a02003 	mov	r2, #3
   1a884:	e5c32033 	strb	r2, [r3, #51]	; 0x33
   1a888:	e51b3008 	ldr	r3, [fp, #-8]
   1a88c:	e5d32004 	ldrb	r2, [r3, #4]
   1a890:	e51b3008 	ldr	r3, [fp, #-8]
   1a894:	e5c3203c 	strb	r2, [r3, #60]	; 0x3c
   1a898:	e51b3008 	ldr	r3, [fp, #-8]
   1a89c:	e3e02902 	mvn	r2, #32768	; 0x8000
   1a8a0:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
   1a8a4:	e51b3008 	ldr	r3, [fp, #-8]
   1a8a8:	e3a02902 	mov	r2, #32768	; 0x8000
   1a8ac:	e1c323b8 	strh	r2, [r3, #56]	; 0x38
   1a8b0:	e51b3008 	ldr	r3, [fp, #-8]
   1a8b4:	e1a00003 	mov	r0, r3
   1a8b8:	e28bd000 	add	sp, fp, #0
   1a8bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1a8c0:	e12fff1e 	bx	lr
   1a8c4:	0004573c 	.word	0x0004573c

0001a8c8 <RDMSensor::SetDescription(char const*)>:
   1a8c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1a8cc:	e28db000 	add	fp, sp, #0
   1a8d0:	e24dd014 	sub	sp, sp, #20
   1a8d4:	e50b0010 	str	r0, [fp, #-16]
   1a8d8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1a8dc:	e3a03000 	mov	r3, #0
   1a8e0:	e50b3008 	str	r3, [fp, #-8]
   1a8e4:	e51b3008 	ldr	r3, [fp, #-8]
   1a8e8:	e353001f 	cmp	r3, #31
   1a8ec:	8a000013 	bhi	1a940 <RDMSensor::SetDescription(char const*)+0x78>
   1a8f0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1a8f4:	e51b3008 	ldr	r3, [fp, #-8]
   1a8f8:	e0823003 	add	r3, r2, r3
   1a8fc:	e5d33000 	ldrb	r3, [r3]
   1a900:	e3530000 	cmp	r3, #0
   1a904:	0a00000d 	beq	1a940 <RDMSensor::SetDescription(char const*)+0x78>
   1a908:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1a90c:	e51b3008 	ldr	r3, [fp, #-8]
   1a910:	e0823003 	add	r3, r2, r3
   1a914:	e5d31000 	ldrb	r1, [r3]
   1a918:	e51b2010 	ldr	r2, [fp, #-16]
   1a91c:	e51b3008 	ldr	r3, [fp, #-8]
   1a920:	e0823003 	add	r3, r2, r3
   1a924:	e2833012 	add	r3, r3, #18
   1a928:	e1a02001 	mov	r2, r1
   1a92c:	e5c32000 	strb	r2, [r3]
   1a930:	e51b3008 	ldr	r3, [fp, #-8]
   1a934:	e2833001 	add	r3, r3, #1
   1a938:	e50b3008 	str	r3, [fp, #-8]
   1a93c:	eaffffe8 	b	1a8e4 <RDMSensor::SetDescription(char const*)+0x1c>
   1a940:	e51b3008 	ldr	r3, [fp, #-8]
   1a944:	e6ef2073 	uxtb	r2, r3
   1a948:	e51b3010 	ldr	r3, [fp, #-16]
   1a94c:	e5c32032 	strb	r2, [r3, #50]	; 0x32
   1a950:	e1a00000 	nop			; (mov r0, r0)
   1a954:	e28bd000 	add	sp, fp, #0
   1a958:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1a95c:	e12fff1e 	bx	lr

0001a960 <RDMSensor::GetValues()>:
   1a960:	e92d4800 	push	{fp, lr}
   1a964:	e28db004 	add	fp, sp, #4
   1a968:	e24dd010 	sub	sp, sp, #16
   1a96c:	e50b0010 	str	r0, [fp, #-16]
   1a970:	e51b3010 	ldr	r3, [fp, #-16]
   1a974:	e5933000 	ldr	r3, [r3]
   1a978:	e283300c 	add	r3, r3, #12
   1a97c:	e5933000 	ldr	r3, [r3]
   1a980:	e51b0010 	ldr	r0, [fp, #-16]
   1a984:	e12fff33 	blx	r3
   1a988:	e1a03000 	mov	r3, r0
   1a98c:	e14b30b6 	strh	r3, [fp, #-6]
   1a990:	e15b20f6 	ldrsh	r2, [fp, #-6]
   1a994:	e51b3010 	ldr	r3, [fp, #-16]
   1a998:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
   1a99c:	e51b3010 	ldr	r3, [fp, #-16]
   1a9a0:	e2833036 	add	r3, r3, #54	; 0x36
   1a9a4:	e24b2006 	sub	r2, fp, #6
   1a9a8:	e1a01002 	mov	r1, r2
   1a9ac:	e1a00003 	mov	r0, r3
   1a9b0:	eb000056 	bl	1ab10 <short const& std::min<short>(short const&, short const&)>
   1a9b4:	e1a03000 	mov	r3, r0
   1a9b8:	e1d320f0 	ldrsh	r2, [r3]
   1a9bc:	e51b3010 	ldr	r3, [fp, #-16]
   1a9c0:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
   1a9c4:	e51b3010 	ldr	r3, [fp, #-16]
   1a9c8:	e2833038 	add	r3, r3, #56	; 0x38
   1a9cc:	e24b2006 	sub	r2, fp, #6
   1a9d0:	e1a01002 	mov	r1, r2
   1a9d4:	e1a00003 	mov	r0, r3
   1a9d8:	eb00005e 	bl	1ab58 <short const& std::max<short>(short const&, short const&)>
   1a9dc:	e1a03000 	mov	r3, r0
   1a9e0:	e1d320f0 	ldrsh	r2, [r3]
   1a9e4:	e51b3010 	ldr	r3, [fp, #-16]
   1a9e8:	e1c323b8 	strh	r2, [r3, #56]	; 0x38
   1a9ec:	e51b3010 	ldr	r3, [fp, #-16]
   1a9f0:	e2833034 	add	r3, r3, #52	; 0x34
   1a9f4:	e1a00003 	mov	r0, r3
   1a9f8:	e24bd004 	sub	sp, fp, #4
   1a9fc:	e8bd8800 	pop	{fp, pc}

0001aa00 <RDMSensor::SetValues()>:
   1aa00:	e92d4800 	push	{fp, lr}
   1aa04:	e28db004 	add	fp, sp, #4
   1aa08:	e24dd010 	sub	sp, sp, #16
   1aa0c:	e50b0010 	str	r0, [fp, #-16]
   1aa10:	e51b3010 	ldr	r3, [fp, #-16]
   1aa14:	e5933000 	ldr	r3, [r3]
   1aa18:	e283300c 	add	r3, r3, #12
   1aa1c:	e5933000 	ldr	r3, [r3]
   1aa20:	e51b0010 	ldr	r0, [fp, #-16]
   1aa24:	e12fff33 	blx	r3
   1aa28:	e1a03000 	mov	r3, r0
   1aa2c:	e14b30b6 	strh	r3, [fp, #-6]
   1aa30:	e51b3010 	ldr	r3, [fp, #-16]
   1aa34:	e15b20b6 	ldrh	r2, [fp, #-6]
   1aa38:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
   1aa3c:	e51b3010 	ldr	r3, [fp, #-16]
   1aa40:	e15b20b6 	ldrh	r2, [fp, #-6]
   1aa44:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
   1aa48:	e51b3010 	ldr	r3, [fp, #-16]
   1aa4c:	e15b20b6 	ldrh	r2, [fp, #-6]
   1aa50:	e1c323b8 	strh	r2, [r3, #56]	; 0x38
   1aa54:	e51b3010 	ldr	r3, [fp, #-16]
   1aa58:	e15b20b6 	ldrh	r2, [fp, #-6]
   1aa5c:	e1c323ba 	strh	r2, [r3, #58]	; 0x3a
   1aa60:	e1a00000 	nop			; (mov r0, r0)
   1aa64:	e24bd004 	sub	sp, fp, #4
   1aa68:	e8bd8800 	pop	{fp, pc}

0001aa6c <RDMSensor::Record()>:
   1aa6c:	e92d4800 	push	{fp, lr}
   1aa70:	e28db004 	add	fp, sp, #4
   1aa74:	e24dd010 	sub	sp, sp, #16
   1aa78:	e50b0010 	str	r0, [fp, #-16]
   1aa7c:	e51b3010 	ldr	r3, [fp, #-16]
   1aa80:	e5933000 	ldr	r3, [r3]
   1aa84:	e283300c 	add	r3, r3, #12
   1aa88:	e5933000 	ldr	r3, [r3]
   1aa8c:	e51b0010 	ldr	r0, [fp, #-16]
   1aa90:	e12fff33 	blx	r3
   1aa94:	e1a03000 	mov	r3, r0
   1aa98:	e14b30b6 	strh	r3, [fp, #-6]
   1aa9c:	e15b20f6 	ldrsh	r2, [fp, #-6]
   1aaa0:	e51b3010 	ldr	r3, [fp, #-16]
   1aaa4:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
   1aaa8:	e15b20f6 	ldrsh	r2, [fp, #-6]
   1aaac:	e51b3010 	ldr	r3, [fp, #-16]
   1aab0:	e1c323ba 	strh	r2, [r3, #58]	; 0x3a
   1aab4:	e51b3010 	ldr	r3, [fp, #-16]
   1aab8:	e2833036 	add	r3, r3, #54	; 0x36
   1aabc:	e24b2006 	sub	r2, fp, #6
   1aac0:	e1a01002 	mov	r1, r2
   1aac4:	e1a00003 	mov	r0, r3
   1aac8:	eb000010 	bl	1ab10 <short const& std::min<short>(short const&, short const&)>
   1aacc:	e1a03000 	mov	r3, r0
   1aad0:	e1d320f0 	ldrsh	r2, [r3]
   1aad4:	e51b3010 	ldr	r3, [fp, #-16]
   1aad8:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
   1aadc:	e51b3010 	ldr	r3, [fp, #-16]
   1aae0:	e2833038 	add	r3, r3, #56	; 0x38
   1aae4:	e24b2006 	sub	r2, fp, #6
   1aae8:	e1a01002 	mov	r1, r2
   1aaec:	e1a00003 	mov	r0, r3
   1aaf0:	eb000018 	bl	1ab58 <short const& std::max<short>(short const&, short const&)>
   1aaf4:	e1a03000 	mov	r3, r0
   1aaf8:	e1d320f0 	ldrsh	r2, [r3]
   1aafc:	e51b3010 	ldr	r3, [fp, #-16]
   1ab00:	e1c323b8 	strh	r2, [r3, #56]	; 0x38
   1ab04:	e1a00000 	nop			; (mov r0, r0)
   1ab08:	e24bd004 	sub	sp, fp, #4
   1ab0c:	e8bd8800 	pop	{fp, pc}

0001ab10 <short const& std::min<short>(short const&, short const&)>:
   1ab10:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1ab14:	e28db000 	add	fp, sp, #0
   1ab18:	e24dd00c 	sub	sp, sp, #12
   1ab1c:	e50b0008 	str	r0, [fp, #-8]
   1ab20:	e50b100c 	str	r1, [fp, #-12]
   1ab24:	e51b300c 	ldr	r3, [fp, #-12]
   1ab28:	e1d320f0 	ldrsh	r2, [r3]
   1ab2c:	e51b3008 	ldr	r3, [fp, #-8]
   1ab30:	e1d330f0 	ldrsh	r3, [r3]
   1ab34:	e1520003 	cmp	r2, r3
   1ab38:	aa000001 	bge	1ab44 <short const& std::min<short>(short const&, short const&)+0x34>
   1ab3c:	e51b300c 	ldr	r3, [fp, #-12]
   1ab40:	ea000000 	b	1ab48 <short const& std::min<short>(short const&, short const&)+0x38>
   1ab44:	e51b3008 	ldr	r3, [fp, #-8]
   1ab48:	e1a00003 	mov	r0, r3
   1ab4c:	e28bd000 	add	sp, fp, #0
   1ab50:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1ab54:	e12fff1e 	bx	lr

0001ab58 <short const& std::max<short>(short const&, short const&)>:
   1ab58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1ab5c:	e28db000 	add	fp, sp, #0
   1ab60:	e24dd00c 	sub	sp, sp, #12
   1ab64:	e50b0008 	str	r0, [fp, #-8]
   1ab68:	e50b100c 	str	r1, [fp, #-12]
   1ab6c:	e51b3008 	ldr	r3, [fp, #-8]
   1ab70:	e1d320f0 	ldrsh	r2, [r3]
   1ab74:	e51b300c 	ldr	r3, [fp, #-12]
   1ab78:	e1d330f0 	ldrsh	r3, [r3]
   1ab7c:	e1520003 	cmp	r2, r3
   1ab80:	aa000001 	bge	1ab8c <short const& std::max<short>(short const&, short const&)+0x34>
   1ab84:	e51b300c 	ldr	r3, [fp, #-12]
   1ab88:	ea000000 	b	1ab90 <short const& std::max<short>(short const&, short const&)+0x38>
   1ab8c:	e51b3008 	ldr	r3, [fp, #-8]
   1ab90:	e1a00003 	mov	r0, r3
   1ab94:	e28bd000 	add	sp, fp, #0
   1ab98:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1ab9c:	e12fff1e 	bx	lr

0001aba0 <RDMSensors::Add(RDMSensor*)>:
   1aba0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1aba4:	e28db000 	add	fp, sp, #0
   1aba8:	e24dd00c 	sub	sp, sp, #12
   1abac:	e50b0008 	str	r0, [fp, #-8]
   1abb0:	e50b100c 	str	r1, [fp, #-12]
   1abb4:	e51b3008 	ldr	r3, [fp, #-8]
   1abb8:	e5933000 	ldr	r3, [r3]
   1abbc:	e3530000 	cmp	r3, #0
   1abc0:	1a000001 	bne	1abcc <RDMSensors::Add(RDMSensor*)+0x2c>
   1abc4:	e3a03000 	mov	r3, #0
   1abc8:	ea000012 	b	1ac18 <RDMSensors::Add(RDMSensor*)+0x78>
   1abcc:	e51b3008 	ldr	r3, [fp, #-8]
   1abd0:	e5d33004 	ldrb	r3, [r3, #4]
   1abd4:	e3530010 	cmp	r3, #16
   1abd8:	1a000001 	bne	1abe4 <RDMSensors::Add(RDMSensor*)+0x44>
   1abdc:	e3a03000 	mov	r3, #0
   1abe0:	ea00000c 	b	1ac18 <RDMSensors::Add(RDMSensor*)+0x78>
   1abe4:	e51b3008 	ldr	r3, [fp, #-8]
   1abe8:	e5932000 	ldr	r2, [r3]
   1abec:	e51b3008 	ldr	r3, [fp, #-8]
   1abf0:	e5d33004 	ldrb	r3, [r3, #4]
   1abf4:	e2831001 	add	r1, r3, #1
   1abf8:	e6ef0071 	uxtb	r0, r1
   1abfc:	e51b1008 	ldr	r1, [fp, #-8]
   1ac00:	e5c10004 	strb	r0, [r1, #4]
   1ac04:	e1a03103 	lsl	r3, r3, #2
   1ac08:	e0823003 	add	r3, r2, r3
   1ac0c:	e51b200c 	ldr	r2, [fp, #-12]
   1ac10:	e5832000 	str	r2, [r3]
   1ac14:	e3a03001 	mov	r3, #1
   1ac18:	e1a00003 	mov	r0, r3
   1ac1c:	e28bd000 	add	sp, fp, #0
   1ac20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1ac24:	e12fff1e 	bx	lr

0001ac28 <RDMSubDevice::GetDmxStartAddress() const>:
   1ac28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1ac2c:	e28db000 	add	fp, sp, #0
   1ac30:	e24dd00c 	sub	sp, sp, #12
   1ac34:	e50b0008 	str	r0, [fp, #-8]
   1ac38:	e51b3008 	ldr	r3, [fp, #-8]
   1ac3c:	e1d331b2 	ldrh	r3, [r3, #18]
   1ac40:	e1a00003 	mov	r0, r3
   1ac44:	e28bd000 	add	sp, fp, #0
   1ac48:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1ac4c:	e12fff1e 	bx	lr

0001ac50 <RDMSubDevice::GetPersonalityCurrent() const>:
   1ac50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1ac54:	e28db000 	add	fp, sp, #0
   1ac58:	e24dd00c 	sub	sp, sp, #12
   1ac5c:	e50b0008 	str	r0, [fp, #-8]
   1ac60:	e51b3008 	ldr	r3, [fp, #-8]
   1ac64:	e5d33014 	ldrb	r3, [r3, #20]
   1ac68:	e1a00003 	mov	r0, r3
   1ac6c:	e28bd000 	add	sp, fp, #0
   1ac70:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1ac74:	e12fff1e 	bx	lr

0001ac78 <RDMSubDevice::GetInfo()>:
   1ac78:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1ac7c:	e28db000 	add	fp, sp, #0
   1ac80:	e24dd00c 	sub	sp, sp, #12
   1ac84:	e50b0008 	str	r0, [fp, #-8]
   1ac88:	e51b3008 	ldr	r3, [fp, #-8]
   1ac8c:	e2833010 	add	r3, r3, #16
   1ac90:	e1a00003 	mov	r0, r3
   1ac94:	e28bd000 	add	sp, fp, #0
   1ac98:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1ac9c:	e12fff1e 	bx	lr

0001aca0 <RDMSubDevice::GetPersonalityCount() const>:
   1aca0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1aca4:	e28db000 	add	fp, sp, #0
   1aca8:	e24dd00c 	sub	sp, sp, #12
   1acac:	e50b0008 	str	r0, [fp, #-8]
   1acb0:	e51b3008 	ldr	r3, [fp, #-8]
   1acb4:	e5d33015 	ldrb	r3, [r3, #21]
   1acb8:	e1a00003 	mov	r0, r3
   1acbc:	e28bd000 	add	sp, fp, #0
   1acc0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1acc4:	e12fff1e 	bx	lr

0001acc8 <RDMSubDevice::GetDmxFootPrint() const>:
   1acc8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1accc:	e28db000 	add	fp, sp, #0
   1acd0:	e24dd00c 	sub	sp, sp, #12
   1acd4:	e50b0008 	str	r0, [fp, #-8]
   1acd8:	e51b3008 	ldr	r3, [fp, #-8]
   1acdc:	e1d331b0 	ldrh	r3, [r3, #16]
   1ace0:	e1a00003 	mov	r0, r3
   1ace4:	e28bd000 	add	sp, fp, #0
   1ace8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1acec:	e12fff1e 	bx	lr

0001acf0 <RDMSubDevices::RDMSubDevices()>:
   1acf0:	e92d4800 	push	{fp, lr}
   1acf4:	e28db004 	add	fp, sp, #4
   1acf8:	e24dd008 	sub	sp, sp, #8
   1acfc:	e50b0008 	str	r0, [fp, #-8]
   1ad00:	e51b3008 	ldr	r3, [fp, #-8]
   1ad04:	e3a02000 	mov	r2, #0
   1ad08:	e5832000 	str	r2, [r3]
   1ad0c:	e51b3008 	ldr	r3, [fp, #-8]
   1ad10:	e3a02000 	mov	r2, #0
   1ad14:	e1c320b4 	strh	r2, [r3, #4]
   1ad18:	e3a03027 	mov	r3, #39	; 0x27
   1ad1c:	e59f205c 	ldr	r2, [pc, #92]	; 1ad80 <RDMSubDevices::RDMSubDevices()+0x90>
   1ad20:	e59f105c 	ldr	r1, [pc, #92]	; 1ad84 <RDMSubDevices::RDMSubDevices()+0x94>
   1ad24:	e59f005c 	ldr	r0, [pc, #92]	; 1ad88 <RDMSubDevices::RDMSubDevices()+0x98>
   1ad28:	ebffd931 	bl	111f4 <printf@plt>
   1ad2c:	e59f3058 	ldr	r3, [pc, #88]	; 1ad8c <RDMSubDevices::RDMSubDevices()+0x9c>
   1ad30:	e5933000 	ldr	r3, [r3]
   1ad34:	e3530000 	cmp	r3, #0
   1ad38:	0a000004 	beq	1ad50 <RDMSubDevices::RDMSubDevices()+0x60>
   1ad3c:	e59f304c 	ldr	r3, [pc, #76]	; 1ad90 <RDMSubDevices::RDMSubDevices()+0xa0>
   1ad40:	e3a02029 	mov	r2, #41	; 0x29
   1ad44:	e59f1038 	ldr	r1, [pc, #56]	; 1ad84 <RDMSubDevices::RDMSubDevices()+0x94>
   1ad48:	e59f0044 	ldr	r0, [pc, #68]	; 1ad94 <RDMSubDevices::RDMSubDevices()+0xa4>
   1ad4c:	ebffd970 	bl	11314 <__assert_fail@plt>
   1ad50:	e59f2034 	ldr	r2, [pc, #52]	; 1ad8c <RDMSubDevices::RDMSubDevices()+0x9c>
   1ad54:	e51b3008 	ldr	r3, [fp, #-8]
   1ad58:	e5823000 	str	r3, [r2]
   1ad5c:	e3a03035 	mov	r3, #53	; 0x35
   1ad60:	e59f2018 	ldr	r2, [pc, #24]	; 1ad80 <RDMSubDevices::RDMSubDevices()+0x90>
   1ad64:	e59f1018 	ldr	r1, [pc, #24]	; 1ad84 <RDMSubDevices::RDMSubDevices()+0x94>
   1ad68:	e59f0028 	ldr	r0, [pc, #40]	; 1ad98 <RDMSubDevices::RDMSubDevices()+0xa8>
   1ad6c:	ebffd920 	bl	111f4 <printf@plt>
   1ad70:	e51b3008 	ldr	r3, [fp, #-8]
   1ad74:	e1a00003 	mov	r0, r3
   1ad78:	e24bd004 	sub	sp, fp, #4
   1ad7c:	e8bd8800 	pop	{fp, pc}
   1ad80:	000458a0 	.word	0x000458a0
   1ad84:	000457cc 	.word	0x000457cc
   1ad88:	000457e4 	.word	0x000457e4
   1ad8c:	0005c3b8 	.word	0x0005c3b8
   1ad90:	000458b0 	.word	0x000458b0
   1ad94:	000457f4 	.word	0x000457f4
   1ad98:	00045808 	.word	0x00045808

0001ad9c <RDMSubDevices::~RDMSubDevices()>:
   1ad9c:	e92d4800 	push	{fp, lr}
   1ada0:	e28db004 	add	fp, sp, #4
   1ada4:	e24dd010 	sub	sp, sp, #16
   1ada8:	e50b0010 	str	r0, [fp, #-16]
   1adac:	e3a03039 	mov	r3, #57	; 0x39
   1adb0:	e59f2108 	ldr	r2, [pc, #264]	; 1aec0 <RDMSubDevices::~RDMSubDevices()+0x124>
   1adb4:	e59f1108 	ldr	r1, [pc, #264]	; 1aec4 <RDMSubDevices::~RDMSubDevices()+0x128>
   1adb8:	e59f0108 	ldr	r0, [pc, #264]	; 1aec8 <RDMSubDevices::~RDMSubDevices()+0x12c>
   1adbc:	ebffd90c 	bl	111f4 <printf@plt>
   1adc0:	e3a03000 	mov	r3, #0
   1adc4:	e50b3008 	str	r3, [fp, #-8]
   1adc8:	e51b3010 	ldr	r3, [fp, #-16]
   1adcc:	e1d330b4 	ldrh	r3, [r3, #4]
   1add0:	e1a02003 	mov	r2, r3
   1add4:	e51b3008 	ldr	r3, [fp, #-8]
   1add8:	e1530002 	cmp	r3, r2
   1addc:	2a000023 	bcs	1ae70 <RDMSubDevices::~RDMSubDevices()+0xd4>
   1ade0:	e51b3010 	ldr	r3, [fp, #-16]
   1ade4:	e5932000 	ldr	r2, [r3]
   1ade8:	e51b3008 	ldr	r3, [fp, #-8]
   1adec:	e1a03103 	lsl	r3, r3, #2
   1adf0:	e0823003 	add	r3, r2, r3
   1adf4:	e5933000 	ldr	r3, [r3]
   1adf8:	e3530000 	cmp	r3, #0
   1adfc:	0a000010 	beq	1ae44 <RDMSubDevices::~RDMSubDevices()+0xa8>
   1ae00:	e51b3010 	ldr	r3, [fp, #-16]
   1ae04:	e5932000 	ldr	r2, [r3]
   1ae08:	e51b3008 	ldr	r3, [fp, #-8]
   1ae0c:	e1a03103 	lsl	r3, r3, #2
   1ae10:	e0823003 	add	r3, r2, r3
   1ae14:	e5931000 	ldr	r1, [r3]
   1ae18:	e51b3010 	ldr	r3, [fp, #-16]
   1ae1c:	e5932000 	ldr	r2, [r3]
   1ae20:	e51b3008 	ldr	r3, [fp, #-8]
   1ae24:	e1a03103 	lsl	r3, r3, #2
   1ae28:	e0823003 	add	r3, r2, r3
   1ae2c:	e5933000 	ldr	r3, [r3]
   1ae30:	e5933000 	ldr	r3, [r3]
   1ae34:	e2833004 	add	r3, r3, #4
   1ae38:	e5933000 	ldr	r3, [r3]
   1ae3c:	e1a00001 	mov	r0, r1
   1ae40:	e12fff33 	blx	r3
   1ae44:	e51b3010 	ldr	r3, [fp, #-16]
   1ae48:	e5932000 	ldr	r2, [r3]
   1ae4c:	e51b3008 	ldr	r3, [fp, #-8]
   1ae50:	e1a03103 	lsl	r3, r3, #2
   1ae54:	e0823003 	add	r3, r2, r3
   1ae58:	e3a02000 	mov	r2, #0
   1ae5c:	e5832000 	str	r2, [r3]
   1ae60:	e51b3008 	ldr	r3, [fp, #-8]
   1ae64:	e2833001 	add	r3, r3, #1
   1ae68:	e50b3008 	str	r3, [fp, #-8]
   1ae6c:	eaffffd5 	b	1adc8 <RDMSubDevices::~RDMSubDevices()+0x2c>
   1ae70:	e51b3010 	ldr	r3, [fp, #-16]
   1ae74:	e5933000 	ldr	r3, [r3]
   1ae78:	e3530000 	cmp	r3, #0
   1ae7c:	0a000003 	beq	1ae90 <RDMSubDevices::~RDMSubDevices()+0xf4>
   1ae80:	e51b3010 	ldr	r3, [fp, #-16]
   1ae84:	e5933000 	ldr	r3, [r3]
   1ae88:	e1a00003 	mov	r0, r3
   1ae8c:	ebffd941 	bl	11398 <operator delete[](void*)@plt>
   1ae90:	e51b3010 	ldr	r3, [fp, #-16]
   1ae94:	e3a02000 	mov	r2, #0
   1ae98:	e1c320b4 	strh	r2, [r3, #4]
   1ae9c:	e3a03045 	mov	r3, #69	; 0x45
   1aea0:	e59f2018 	ldr	r2, [pc, #24]	; 1aec0 <RDMSubDevices::~RDMSubDevices()+0x124>
   1aea4:	e59f1018 	ldr	r1, [pc, #24]	; 1aec4 <RDMSubDevices::~RDMSubDevices()+0x128>
   1aea8:	e59f001c 	ldr	r0, [pc, #28]	; 1aecc <RDMSubDevices::~RDMSubDevices()+0x130>
   1aeac:	ebffd8d0 	bl	111f4 <printf@plt>
   1aeb0:	e51b3010 	ldr	r3, [fp, #-16]
   1aeb4:	e1a00003 	mov	r0, r3
   1aeb8:	e24bd004 	sub	sp, fp, #4
   1aebc:	e8bd8800 	pop	{fp, pc}
   1aec0:	000458d0 	.word	0x000458d0
   1aec4:	000457cc 	.word	0x000457cc
   1aec8:	000457e4 	.word	0x000457e4
   1aecc:	00045808 	.word	0x00045808

0001aed0 <RDMSubDevices::GetInfo(unsigned short)>:
   1aed0:	e92d4800 	push	{fp, lr}
   1aed4:	e28db004 	add	fp, sp, #4
   1aed8:	e24dd008 	sub	sp, sp, #8
   1aedc:	e50b0008 	str	r0, [fp, #-8]
   1aee0:	e1a03001 	mov	r3, r1
   1aee4:	e14b30ba 	strh	r3, [fp, #-10]
   1aee8:	e15b30ba 	ldrh	r3, [fp, #-10]
   1aeec:	e3530000 	cmp	r3, #0
   1aef0:	0a000004 	beq	1af08 <RDMSubDevices::GetInfo(unsigned short)+0x38>
   1aef4:	e51b3008 	ldr	r3, [fp, #-8]
   1aef8:	e1d330b4 	ldrh	r3, [r3, #4]
   1aefc:	e15b20ba 	ldrh	r2, [fp, #-10]
   1af00:	e1520003 	cmp	r2, r3
   1af04:	9a000004 	bls	1af1c <RDMSubDevices::GetInfo(unsigned short)+0x4c>
   1af08:	e59f3078 	ldr	r3, [pc, #120]	; 1af88 <RDMSubDevices::GetInfo(unsigned short)+0xb8>
   1af0c:	e3a02049 	mov	r2, #73	; 0x49
   1af10:	e59f1074 	ldr	r1, [pc, #116]	; 1af8c <RDMSubDevices::GetInfo(unsigned short)+0xbc>
   1af14:	e59f0074 	ldr	r0, [pc, #116]	; 1af90 <RDMSubDevices::GetInfo(unsigned short)+0xc0>
   1af18:	ebffd8fd 	bl	11314 <__assert_fail@plt>
   1af1c:	e51b3008 	ldr	r3, [fp, #-8]
   1af20:	e5932000 	ldr	r2, [r3]
   1af24:	e15b30ba 	ldrh	r3, [fp, #-10]
   1af28:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1af2c:	e1a03103 	lsl	r3, r3, #2
   1af30:	e0823003 	add	r3, r2, r3
   1af34:	e5933000 	ldr	r3, [r3]
   1af38:	e3530000 	cmp	r3, #0
   1af3c:	1a000004 	bne	1af54 <RDMSubDevices::GetInfo(unsigned short)+0x84>
   1af40:	e59f3040 	ldr	r3, [pc, #64]	; 1af88 <RDMSubDevices::GetInfo(unsigned short)+0xb8>
   1af44:	e3a0204b 	mov	r2, #75	; 0x4b
   1af48:	e59f103c 	ldr	r1, [pc, #60]	; 1af8c <RDMSubDevices::GetInfo(unsigned short)+0xbc>
   1af4c:	e59f0040 	ldr	r0, [pc, #64]	; 1af94 <RDMSubDevices::GetInfo(unsigned short)+0xc4>
   1af50:	ebffd8ef 	bl	11314 <__assert_fail@plt>
   1af54:	e51b3008 	ldr	r3, [fp, #-8]
   1af58:	e5932000 	ldr	r2, [r3]
   1af5c:	e15b30ba 	ldrh	r3, [fp, #-10]
   1af60:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1af64:	e1a03103 	lsl	r3, r3, #2
   1af68:	e0823003 	add	r3, r2, r3
   1af6c:	e5933000 	ldr	r3, [r3]
   1af70:	e1a00003 	mov	r0, r3
   1af74:	ebffff3f 	bl	1ac78 <RDMSubDevice::GetInfo()>
   1af78:	e1a03000 	mov	r3, r0
   1af7c:	e1a00003 	mov	r0, r3
   1af80:	e24bd004 	sub	sp, fp, #4
   1af84:	e8bd8800 	pop	{fp, pc}
   1af88:	000458e0 	.word	0x000458e0
   1af8c:	000457cc 	.word	0x000457cc
   1af90:	00045818 	.word	0x00045818
   1af94:	00045848 	.word	0x00045848

0001af98 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)>:
   1af98:	e92d4800 	push	{fp, lr}
   1af9c:	e28db004 	add	fp, sp, #4
   1afa0:	e24dd010 	sub	sp, sp, #16
   1afa4:	e50b0008 	str	r0, [fp, #-8]
   1afa8:	e1a03001 	mov	r3, r1
   1afac:	e50b2010 	str	r2, [fp, #-16]
   1afb0:	e14b30ba 	strh	r3, [fp, #-10]
   1afb4:	e15b30ba 	ldrh	r3, [fp, #-10]
   1afb8:	e3530000 	cmp	r3, #0
   1afbc:	0a000004 	beq	1afd4 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)+0x3c>
   1afc0:	e51b3008 	ldr	r3, [fp, #-8]
   1afc4:	e1d330b4 	ldrh	r3, [r3, #4]
   1afc8:	e15b20ba 	ldrh	r2, [fp, #-10]
   1afcc:	e1520003 	cmp	r2, r3
   1afd0:	9a000004 	bls	1afe8 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)+0x50>
   1afd4:	e59f3098 	ldr	r3, [pc, #152]	; 1b074 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)+0xdc>
   1afd8:	e3a02050 	mov	r2, #80	; 0x50
   1afdc:	e59f1094 	ldr	r1, [pc, #148]	; 1b078 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)+0xe0>
   1afe0:	e59f0094 	ldr	r0, [pc, #148]	; 1b07c <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)+0xe4>
   1afe4:	ebffd8ca 	bl	11314 <__assert_fail@plt>
   1afe8:	e51b3010 	ldr	r3, [fp, #-16]
   1afec:	e3530000 	cmp	r3, #0
   1aff0:	1a000004 	bne	1b008 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)+0x70>
   1aff4:	e59f3078 	ldr	r3, [pc, #120]	; 1b074 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)+0xdc>
   1aff8:	e3a02051 	mov	r2, #81	; 0x51
   1affc:	e59f1074 	ldr	r1, [pc, #116]	; 1b078 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)+0xe0>
   1b000:	e59f0078 	ldr	r0, [pc, #120]	; 1b080 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)+0xe8>
   1b004:	ebffd8c2 	bl	11314 <__assert_fail@plt>
   1b008:	e51b3008 	ldr	r3, [fp, #-8]
   1b00c:	e5932000 	ldr	r2, [r3]
   1b010:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b014:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b018:	e1a03103 	lsl	r3, r3, #2
   1b01c:	e0823003 	add	r3, r2, r3
   1b020:	e5933000 	ldr	r3, [r3]
   1b024:	e3530000 	cmp	r3, #0
   1b028:	1a000004 	bne	1b040 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)+0xa8>
   1b02c:	e59f3040 	ldr	r3, [pc, #64]	; 1b074 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)+0xdc>
   1b030:	e3a02053 	mov	r2, #83	; 0x53
   1b034:	e59f103c 	ldr	r1, [pc, #60]	; 1b078 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)+0xe0>
   1b038:	e59f0044 	ldr	r0, [pc, #68]	; 1b084 <RDMSubDevices::GetLabel(unsigned short, TRDMDeviceInfoData*)+0xec>
   1b03c:	ebffd8b4 	bl	11314 <__assert_fail@plt>
   1b040:	e51b3008 	ldr	r3, [fp, #-8]
   1b044:	e5932000 	ldr	r2, [r3]
   1b048:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b04c:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b050:	e1a03103 	lsl	r3, r3, #2
   1b054:	e0823003 	add	r3, r2, r3
   1b058:	e5933000 	ldr	r3, [r3]
   1b05c:	e51b1010 	ldr	r1, [fp, #-16]
   1b060:	e1a00003 	mov	r0, r3
   1b064:	eb00038d 	bl	1bea0 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>
   1b068:	e1a00000 	nop			; (mov r0, r0)
   1b06c:	e24bd004 	sub	sp, fp, #4
   1b070:	e8bd8800 	pop	{fp, pc}
   1b074:	00045918 	.word	0x00045918
   1b078:	000457cc 	.word	0x000457cc
   1b07c:	00045818 	.word	0x00045818
   1b080:	00045874 	.word	0x00045874
   1b084:	00045848 	.word	0x00045848

0001b088 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)>:
   1b088:	e92d4800 	push	{fp, lr}
   1b08c:	e28db004 	add	fp, sp, #4
   1b090:	e24dd010 	sub	sp, sp, #16
   1b094:	e50b0008 	str	r0, [fp, #-8]
   1b098:	e50b2010 	str	r2, [fp, #-16]
   1b09c:	e1a02003 	mov	r2, r3
   1b0a0:	e1a03001 	mov	r3, r1
   1b0a4:	e14b30ba 	strh	r3, [fp, #-10]
   1b0a8:	e1a03002 	mov	r3, r2
   1b0ac:	e54b300b 	strb	r3, [fp, #-11]
   1b0b0:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b0b4:	e3530000 	cmp	r3, #0
   1b0b8:	0a000004 	beq	1b0d0 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)+0x48>
   1b0bc:	e51b3008 	ldr	r3, [fp, #-8]
   1b0c0:	e1d330b4 	ldrh	r3, [r3, #4]
   1b0c4:	e15b20ba 	ldrh	r2, [fp, #-10]
   1b0c8:	e1520003 	cmp	r2, r3
   1b0cc:	9a000004 	bls	1b0e4 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)+0x5c>
   1b0d0:	e59f309c 	ldr	r3, [pc, #156]	; 1b174 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)+0xec>
   1b0d4:	e3a02058 	mov	r2, #88	; 0x58
   1b0d8:	e59f1098 	ldr	r1, [pc, #152]	; 1b178 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)+0xf0>
   1b0dc:	e59f0098 	ldr	r0, [pc, #152]	; 1b17c <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)+0xf4>
   1b0e0:	ebffd88b 	bl	11314 <__assert_fail@plt>
   1b0e4:	e51b3010 	ldr	r3, [fp, #-16]
   1b0e8:	e3530000 	cmp	r3, #0
   1b0ec:	1a000004 	bne	1b104 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)+0x7c>
   1b0f0:	e59f307c 	ldr	r3, [pc, #124]	; 1b174 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)+0xec>
   1b0f4:	e3a02059 	mov	r2, #89	; 0x59
   1b0f8:	e59f1078 	ldr	r1, [pc, #120]	; 1b178 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)+0xf0>
   1b0fc:	e59f007c 	ldr	r0, [pc, #124]	; 1b180 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)+0xf8>
   1b100:	ebffd883 	bl	11314 <__assert_fail@plt>
   1b104:	e51b3008 	ldr	r3, [fp, #-8]
   1b108:	e5932000 	ldr	r2, [r3]
   1b10c:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b110:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b114:	e1a03103 	lsl	r3, r3, #2
   1b118:	e0823003 	add	r3, r2, r3
   1b11c:	e5933000 	ldr	r3, [r3]
   1b120:	e3530000 	cmp	r3, #0
   1b124:	1a000004 	bne	1b13c <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)+0xb4>
   1b128:	e59f3044 	ldr	r3, [pc, #68]	; 1b174 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)+0xec>
   1b12c:	e3a0205b 	mov	r2, #91	; 0x5b
   1b130:	e59f1040 	ldr	r1, [pc, #64]	; 1b178 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)+0xf0>
   1b134:	e59f0048 	ldr	r0, [pc, #72]	; 1b184 <RDMSubDevices::SetLabel(unsigned short, char const*, unsigned char)+0xfc>
   1b138:	ebffd875 	bl	11314 <__assert_fail@plt>
   1b13c:	e51b3008 	ldr	r3, [fp, #-8]
   1b140:	e5932000 	ldr	r2, [r3]
   1b144:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b148:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b14c:	e1a03103 	lsl	r3, r3, #2
   1b150:	e0823003 	add	r3, r2, r3
   1b154:	e5933000 	ldr	r3, [r3]
   1b158:	e55b200b 	ldrb	r2, [fp, #-11]
   1b15c:	e51b1010 	ldr	r1, [fp, #-16]
   1b160:	e1a00003 	mov	r0, r3
   1b164:	eb000398 	bl	1bfcc <RDMSubDevice::SetLabel(char const*, unsigned char)>
   1b168:	e1a00000 	nop			; (mov r0, r0)
   1b16c:	e24bd004 	sub	sp, fp, #4
   1b170:	e8bd8800 	pop	{fp, pc}
   1b174:	00045954 	.word	0x00045954
   1b178:	000457cc 	.word	0x000457cc
   1b17c:	00045818 	.word	0x00045818
   1b180:	0004588c 	.word	0x0004588c
   1b184:	00045848 	.word	0x00045848

0001b188 <RDMSubDevices::GetDmxStartAddress(unsigned short)>:
   1b188:	e92d4800 	push	{fp, lr}
   1b18c:	e28db004 	add	fp, sp, #4
   1b190:	e24dd008 	sub	sp, sp, #8
   1b194:	e50b0008 	str	r0, [fp, #-8]
   1b198:	e1a03001 	mov	r3, r1
   1b19c:	e14b30ba 	strh	r3, [fp, #-10]
   1b1a0:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b1a4:	e3530000 	cmp	r3, #0
   1b1a8:	0a000004 	beq	1b1c0 <RDMSubDevices::GetDmxStartAddress(unsigned short)+0x38>
   1b1ac:	e51b3008 	ldr	r3, [fp, #-8]
   1b1b0:	e1d330b4 	ldrh	r3, [r3, #4]
   1b1b4:	e15b20ba 	ldrh	r2, [fp, #-10]
   1b1b8:	e1520003 	cmp	r2, r3
   1b1bc:	9a000004 	bls	1b1d4 <RDMSubDevices::GetDmxStartAddress(unsigned short)+0x4c>
   1b1c0:	e59f3078 	ldr	r3, [pc, #120]	; 1b240 <RDMSubDevices::GetDmxStartAddress(unsigned short)+0xb8>
   1b1c4:	e3a02061 	mov	r2, #97	; 0x61
   1b1c8:	e59f1074 	ldr	r1, [pc, #116]	; 1b244 <RDMSubDevices::GetDmxStartAddress(unsigned short)+0xbc>
   1b1cc:	e59f0074 	ldr	r0, [pc, #116]	; 1b248 <RDMSubDevices::GetDmxStartAddress(unsigned short)+0xc0>
   1b1d0:	ebffd84f 	bl	11314 <__assert_fail@plt>
   1b1d4:	e51b3008 	ldr	r3, [fp, #-8]
   1b1d8:	e5932000 	ldr	r2, [r3]
   1b1dc:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b1e0:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b1e4:	e1a03103 	lsl	r3, r3, #2
   1b1e8:	e0823003 	add	r3, r2, r3
   1b1ec:	e5933000 	ldr	r3, [r3]
   1b1f0:	e3530000 	cmp	r3, #0
   1b1f4:	1a000004 	bne	1b20c <RDMSubDevices::GetDmxStartAddress(unsigned short)+0x84>
   1b1f8:	e59f3040 	ldr	r3, [pc, #64]	; 1b240 <RDMSubDevices::GetDmxStartAddress(unsigned short)+0xb8>
   1b1fc:	e3a02063 	mov	r2, #99	; 0x63
   1b200:	e59f103c 	ldr	r1, [pc, #60]	; 1b244 <RDMSubDevices::GetDmxStartAddress(unsigned short)+0xbc>
   1b204:	e59f0040 	ldr	r0, [pc, #64]	; 1b24c <RDMSubDevices::GetDmxStartAddress(unsigned short)+0xc4>
   1b208:	ebffd841 	bl	11314 <__assert_fail@plt>
   1b20c:	e51b3008 	ldr	r3, [fp, #-8]
   1b210:	e5932000 	ldr	r2, [r3]
   1b214:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b218:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b21c:	e1a03103 	lsl	r3, r3, #2
   1b220:	e0823003 	add	r3, r2, r3
   1b224:	e5933000 	ldr	r3, [r3]
   1b228:	e1a00003 	mov	r0, r3
   1b22c:	ebfffe7d 	bl	1ac28 <RDMSubDevice::GetDmxStartAddress() const>
   1b230:	e1a03000 	mov	r3, r0
   1b234:	e1a00003 	mov	r0, r3
   1b238:	e24bd004 	sub	sp, fp, #4
   1b23c:	e8bd8800 	pop	{fp, pc}
   1b240:	00045994 	.word	0x00045994
   1b244:	000457cc 	.word	0x000457cc
   1b248:	00045818 	.word	0x00045818
   1b24c:	00045848 	.word	0x00045848

0001b250 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)>:
   1b250:	e92d4800 	push	{fp, lr}
   1b254:	e28db004 	add	fp, sp, #4
   1b258:	e24dd008 	sub	sp, sp, #8
   1b25c:	e50b0008 	str	r0, [fp, #-8]
   1b260:	e1a03001 	mov	r3, r1
   1b264:	e14b30ba 	strh	r3, [fp, #-10]
   1b268:	e1a03002 	mov	r3, r2
   1b26c:	e14b30bc 	strh	r3, [fp, #-12]
   1b270:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b274:	e3530000 	cmp	r3, #0
   1b278:	0a000004 	beq	1b290 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)+0x40>
   1b27c:	e51b3008 	ldr	r3, [fp, #-8]
   1b280:	e1d330b4 	ldrh	r3, [r3, #4]
   1b284:	e15b20ba 	ldrh	r2, [fp, #-10]
   1b288:	e1520003 	cmp	r2, r3
   1b28c:	9a000004 	bls	1b2a4 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)+0x54>
   1b290:	e59f307c 	ldr	r3, [pc, #124]	; 1b314 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)+0xc4>
   1b294:	e3a02068 	mov	r2, #104	; 0x68
   1b298:	e59f1078 	ldr	r1, [pc, #120]	; 1b318 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)+0xc8>
   1b29c:	e59f0078 	ldr	r0, [pc, #120]	; 1b31c <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)+0xcc>
   1b2a0:	ebffd81b 	bl	11314 <__assert_fail@plt>
   1b2a4:	e51b3008 	ldr	r3, [fp, #-8]
   1b2a8:	e5932000 	ldr	r2, [r3]
   1b2ac:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b2b0:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b2b4:	e1a03103 	lsl	r3, r3, #2
   1b2b8:	e0823003 	add	r3, r2, r3
   1b2bc:	e5933000 	ldr	r3, [r3]
   1b2c0:	e3530000 	cmp	r3, #0
   1b2c4:	1a000004 	bne	1b2dc <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)+0x8c>
   1b2c8:	e59f3044 	ldr	r3, [pc, #68]	; 1b314 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)+0xc4>
   1b2cc:	e3a0206a 	mov	r2, #106	; 0x6a
   1b2d0:	e59f1040 	ldr	r1, [pc, #64]	; 1b318 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)+0xc8>
   1b2d4:	e59f0044 	ldr	r0, [pc, #68]	; 1b320 <RDMSubDevices::SetDmxStartAddress(unsigned short, unsigned short)+0xd0>
   1b2d8:	ebffd80d 	bl	11314 <__assert_fail@plt>
   1b2dc:	e51b3008 	ldr	r3, [fp, #-8]
   1b2e0:	e5932000 	ldr	r2, [r3]
   1b2e4:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b2e8:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b2ec:	e1a03103 	lsl	r3, r3, #2
   1b2f0:	e0823003 	add	r3, r2, r3
   1b2f4:	e5933000 	ldr	r3, [r3]
   1b2f8:	e15b20bc 	ldrh	r2, [fp, #-12]
   1b2fc:	e1a01002 	mov	r1, r2
   1b300:	e1a00003 	mov	r0, r3
   1b304:	eb00027d 	bl	1bd00 <RDMSubDevice::SetDmxStartAddress(unsigned short)>
   1b308:	e1a00000 	nop			; (mov r0, r0)
   1b30c:	e24bd004 	sub	sp, fp, #4
   1b310:	e8bd8800 	pop	{fp, pc}
   1b314:	000459cc 	.word	0x000459cc
   1b318:	000457cc 	.word	0x000457cc
   1b31c:	00045818 	.word	0x00045818
   1b320:	00045848 	.word	0x00045848

0001b324 <RDMSubDevices::GetDmxFootPrint(unsigned short)>:
   1b324:	e92d4800 	push	{fp, lr}
   1b328:	e28db004 	add	fp, sp, #4
   1b32c:	e24dd008 	sub	sp, sp, #8
   1b330:	e50b0008 	str	r0, [fp, #-8]
   1b334:	e1a03001 	mov	r3, r1
   1b338:	e14b30ba 	strh	r3, [fp, #-10]
   1b33c:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b340:	e3530000 	cmp	r3, #0
   1b344:	0a000004 	beq	1b35c <RDMSubDevices::GetDmxFootPrint(unsigned short)+0x38>
   1b348:	e51b3008 	ldr	r3, [fp, #-8]
   1b34c:	e1d330b4 	ldrh	r3, [r3, #4]
   1b350:	e15b20ba 	ldrh	r2, [fp, #-10]
   1b354:	e1520003 	cmp	r2, r3
   1b358:	9a000004 	bls	1b370 <RDMSubDevices::GetDmxFootPrint(unsigned short)+0x4c>
   1b35c:	e59f3078 	ldr	r3, [pc, #120]	; 1b3dc <RDMSubDevices::GetDmxFootPrint(unsigned short)+0xb8>
   1b360:	e3a0206f 	mov	r2, #111	; 0x6f
   1b364:	e59f1074 	ldr	r1, [pc, #116]	; 1b3e0 <RDMSubDevices::GetDmxFootPrint(unsigned short)+0xbc>
   1b368:	e59f0074 	ldr	r0, [pc, #116]	; 1b3e4 <RDMSubDevices::GetDmxFootPrint(unsigned short)+0xc0>
   1b36c:	ebffd7e8 	bl	11314 <__assert_fail@plt>
   1b370:	e51b3008 	ldr	r3, [fp, #-8]
   1b374:	e5932000 	ldr	r2, [r3]
   1b378:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b37c:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b380:	e1a03103 	lsl	r3, r3, #2
   1b384:	e0823003 	add	r3, r2, r3
   1b388:	e5933000 	ldr	r3, [r3]
   1b38c:	e3530000 	cmp	r3, #0
   1b390:	1a000004 	bne	1b3a8 <RDMSubDevices::GetDmxFootPrint(unsigned short)+0x84>
   1b394:	e59f3040 	ldr	r3, [pc, #64]	; 1b3dc <RDMSubDevices::GetDmxFootPrint(unsigned short)+0xb8>
   1b398:	e3a02071 	mov	r2, #113	; 0x71
   1b39c:	e59f103c 	ldr	r1, [pc, #60]	; 1b3e0 <RDMSubDevices::GetDmxFootPrint(unsigned short)+0xbc>
   1b3a0:	e59f0040 	ldr	r0, [pc, #64]	; 1b3e8 <RDMSubDevices::GetDmxFootPrint(unsigned short)+0xc4>
   1b3a4:	ebffd7da 	bl	11314 <__assert_fail@plt>
   1b3a8:	e51b3008 	ldr	r3, [fp, #-8]
   1b3ac:	e5932000 	ldr	r2, [r3]
   1b3b0:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b3b4:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b3b8:	e1a03103 	lsl	r3, r3, #2
   1b3bc:	e0823003 	add	r3, r2, r3
   1b3c0:	e5933000 	ldr	r3, [r3]
   1b3c4:	e1a00003 	mov	r0, r3
   1b3c8:	ebfffe3e 	bl	1acc8 <RDMSubDevice::GetDmxFootPrint() const>
   1b3cc:	e1a03000 	mov	r3, r0
   1b3d0:	e1a00003 	mov	r0, r3
   1b3d4:	e24bd004 	sub	sp, fp, #4
   1b3d8:	e8bd8800 	pop	{fp, pc}
   1b3dc:	00045a08 	.word	0x00045a08
   1b3e0:	000457cc 	.word	0x000457cc
   1b3e4:	00045818 	.word	0x00045818
   1b3e8:	00045848 	.word	0x00045848

0001b3ec <RDMSubDevices::GetPersonalityCurrent(unsigned short)>:
   1b3ec:	e92d4800 	push	{fp, lr}
   1b3f0:	e28db004 	add	fp, sp, #4
   1b3f4:	e24dd008 	sub	sp, sp, #8
   1b3f8:	e50b0008 	str	r0, [fp, #-8]
   1b3fc:	e1a03001 	mov	r3, r1
   1b400:	e14b30ba 	strh	r3, [fp, #-10]
   1b404:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b408:	e3530000 	cmp	r3, #0
   1b40c:	0a000004 	beq	1b424 <RDMSubDevices::GetPersonalityCurrent(unsigned short)+0x38>
   1b410:	e51b3008 	ldr	r3, [fp, #-8]
   1b414:	e1d330b4 	ldrh	r3, [r3, #4]
   1b418:	e15b20ba 	ldrh	r2, [fp, #-10]
   1b41c:	e1520003 	cmp	r2, r3
   1b420:	9a000004 	bls	1b438 <RDMSubDevices::GetPersonalityCurrent(unsigned short)+0x4c>
   1b424:	e59f3078 	ldr	r3, [pc, #120]	; 1b4a4 <RDMSubDevices::GetPersonalityCurrent(unsigned short)+0xb8>
   1b428:	e3a02076 	mov	r2, #118	; 0x76
   1b42c:	e59f1074 	ldr	r1, [pc, #116]	; 1b4a8 <RDMSubDevices::GetPersonalityCurrent(unsigned short)+0xbc>
   1b430:	e59f0074 	ldr	r0, [pc, #116]	; 1b4ac <RDMSubDevices::GetPersonalityCurrent(unsigned short)+0xc0>
   1b434:	ebffd7b6 	bl	11314 <__assert_fail@plt>
   1b438:	e51b3008 	ldr	r3, [fp, #-8]
   1b43c:	e5932000 	ldr	r2, [r3]
   1b440:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b444:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b448:	e1a03103 	lsl	r3, r3, #2
   1b44c:	e0823003 	add	r3, r2, r3
   1b450:	e5933000 	ldr	r3, [r3]
   1b454:	e3530000 	cmp	r3, #0
   1b458:	1a000004 	bne	1b470 <RDMSubDevices::GetPersonalityCurrent(unsigned short)+0x84>
   1b45c:	e59f3040 	ldr	r3, [pc, #64]	; 1b4a4 <RDMSubDevices::GetPersonalityCurrent(unsigned short)+0xb8>
   1b460:	e3a02078 	mov	r2, #120	; 0x78
   1b464:	e59f103c 	ldr	r1, [pc, #60]	; 1b4a8 <RDMSubDevices::GetPersonalityCurrent(unsigned short)+0xbc>
   1b468:	e59f0040 	ldr	r0, [pc, #64]	; 1b4b0 <RDMSubDevices::GetPersonalityCurrent(unsigned short)+0xc4>
   1b46c:	ebffd7a8 	bl	11314 <__assert_fail@plt>
   1b470:	e51b3008 	ldr	r3, [fp, #-8]
   1b474:	e5932000 	ldr	r2, [r3]
   1b478:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b47c:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b480:	e1a03103 	lsl	r3, r3, #2
   1b484:	e0823003 	add	r3, r2, r3
   1b488:	e5933000 	ldr	r3, [r3]
   1b48c:	e1a00003 	mov	r0, r3
   1b490:	ebfffdee 	bl	1ac50 <RDMSubDevice::GetPersonalityCurrent() const>
   1b494:	e1a03000 	mov	r3, r0
   1b498:	e1a00003 	mov	r0, r3
   1b49c:	e24bd004 	sub	sp, fp, #4
   1b4a0:	e8bd8800 	pop	{fp, pc}
   1b4a4:	00045a3c 	.word	0x00045a3c
   1b4a8:	000457cc 	.word	0x000457cc
   1b4ac:	00045818 	.word	0x00045818
   1b4b0:	00045848 	.word	0x00045848

0001b4b4 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)>:
   1b4b4:	e92d4800 	push	{fp, lr}
   1b4b8:	e28db004 	add	fp, sp, #4
   1b4bc:	e24dd008 	sub	sp, sp, #8
   1b4c0:	e50b0008 	str	r0, [fp, #-8]
   1b4c4:	e1a03001 	mov	r3, r1
   1b4c8:	e14b30ba 	strh	r3, [fp, #-10]
   1b4cc:	e1a03002 	mov	r3, r2
   1b4d0:	e54b300b 	strb	r3, [fp, #-11]
   1b4d4:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b4d8:	e3530000 	cmp	r3, #0
   1b4dc:	0a000004 	beq	1b4f4 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)+0x40>
   1b4e0:	e51b3008 	ldr	r3, [fp, #-8]
   1b4e4:	e1d330b4 	ldrh	r3, [r3, #4]
   1b4e8:	e15b20ba 	ldrh	r2, [fp, #-10]
   1b4ec:	e1520003 	cmp	r2, r3
   1b4f0:	9a000004 	bls	1b508 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)+0x54>
   1b4f4:	e59f307c 	ldr	r3, [pc, #124]	; 1b578 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)+0xc4>
   1b4f8:	e3a0207d 	mov	r2, #125	; 0x7d
   1b4fc:	e59f1078 	ldr	r1, [pc, #120]	; 1b57c <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)+0xc8>
   1b500:	e59f0078 	ldr	r0, [pc, #120]	; 1b580 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)+0xcc>
   1b504:	ebffd782 	bl	11314 <__assert_fail@plt>
   1b508:	e51b3008 	ldr	r3, [fp, #-8]
   1b50c:	e5932000 	ldr	r2, [r3]
   1b510:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b514:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b518:	e1a03103 	lsl	r3, r3, #2
   1b51c:	e0823003 	add	r3, r2, r3
   1b520:	e5933000 	ldr	r3, [r3]
   1b524:	e3530000 	cmp	r3, #0
   1b528:	1a000004 	bne	1b540 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)+0x8c>
   1b52c:	e59f3044 	ldr	r3, [pc, #68]	; 1b578 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)+0xc4>
   1b530:	e3a0207f 	mov	r2, #127	; 0x7f
   1b534:	e59f1040 	ldr	r1, [pc, #64]	; 1b57c <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)+0xc8>
   1b538:	e59f0044 	ldr	r0, [pc, #68]	; 1b584 <RDMSubDevices::SetPersonalityCurrent(unsigned short, unsigned char)+0xd0>
   1b53c:	ebffd774 	bl	11314 <__assert_fail@plt>
   1b540:	e51b3008 	ldr	r3, [fp, #-8]
   1b544:	e5932000 	ldr	r2, [r3]
   1b548:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b54c:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b550:	e1a03103 	lsl	r3, r3, #2
   1b554:	e0823003 	add	r3, r2, r3
   1b558:	e5933000 	ldr	r3, [r3]
   1b55c:	e55b200b 	ldrb	r2, [fp, #-11]
   1b560:	e1a01002 	mov	r1, r2
   1b564:	e1a00003 	mov	r0, r3
   1b568:	eb0002c7 	bl	1c08c <RDMSubDevice::SetPersonalityCurrent(unsigned char)>
   1b56c:	e1a00000 	nop			; (mov r0, r0)
   1b570:	e24bd004 	sub	sp, fp, #4
   1b574:	e8bd8800 	pop	{fp, pc}
   1b578:	00045a74 	.word	0x00045a74
   1b57c:	000457cc 	.word	0x000457cc
   1b580:	00045818 	.word	0x00045818
   1b584:	00045848 	.word	0x00045848

0001b588 <RDMSubDevices::GetPersonalityCount(unsigned short)>:
   1b588:	e92d4800 	push	{fp, lr}
   1b58c:	e28db004 	add	fp, sp, #4
   1b590:	e24dd008 	sub	sp, sp, #8
   1b594:	e50b0008 	str	r0, [fp, #-8]
   1b598:	e1a03001 	mov	r3, r1
   1b59c:	e14b30ba 	strh	r3, [fp, #-10]
   1b5a0:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b5a4:	e3530000 	cmp	r3, #0
   1b5a8:	0a000004 	beq	1b5c0 <RDMSubDevices::GetPersonalityCount(unsigned short)+0x38>
   1b5ac:	e51b3008 	ldr	r3, [fp, #-8]
   1b5b0:	e1d330b4 	ldrh	r3, [r3, #4]
   1b5b4:	e15b20ba 	ldrh	r2, [fp, #-10]
   1b5b8:	e1520003 	cmp	r2, r3
   1b5bc:	9a000004 	bls	1b5d4 <RDMSubDevices::GetPersonalityCount(unsigned short)+0x4c>
   1b5c0:	e59f3078 	ldr	r3, [pc, #120]	; 1b640 <RDMSubDevices::GetPersonalityCount(unsigned short)+0xb8>
   1b5c4:	e3a02084 	mov	r2, #132	; 0x84
   1b5c8:	e59f1074 	ldr	r1, [pc, #116]	; 1b644 <RDMSubDevices::GetPersonalityCount(unsigned short)+0xbc>
   1b5cc:	e59f0074 	ldr	r0, [pc, #116]	; 1b648 <RDMSubDevices::GetPersonalityCount(unsigned short)+0xc0>
   1b5d0:	ebffd74f 	bl	11314 <__assert_fail@plt>
   1b5d4:	e51b3008 	ldr	r3, [fp, #-8]
   1b5d8:	e5932000 	ldr	r2, [r3]
   1b5dc:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b5e0:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b5e4:	e1a03103 	lsl	r3, r3, #2
   1b5e8:	e0823003 	add	r3, r2, r3
   1b5ec:	e5933000 	ldr	r3, [r3]
   1b5f0:	e3530000 	cmp	r3, #0
   1b5f4:	1a000004 	bne	1b60c <RDMSubDevices::GetPersonalityCount(unsigned short)+0x84>
   1b5f8:	e59f3040 	ldr	r3, [pc, #64]	; 1b640 <RDMSubDevices::GetPersonalityCount(unsigned short)+0xb8>
   1b5fc:	e3a02086 	mov	r2, #134	; 0x86
   1b600:	e59f103c 	ldr	r1, [pc, #60]	; 1b644 <RDMSubDevices::GetPersonalityCount(unsigned short)+0xbc>
   1b604:	e59f0040 	ldr	r0, [pc, #64]	; 1b64c <RDMSubDevices::GetPersonalityCount(unsigned short)+0xc4>
   1b608:	ebffd741 	bl	11314 <__assert_fail@plt>
   1b60c:	e51b3008 	ldr	r3, [fp, #-8]
   1b610:	e5932000 	ldr	r2, [r3]
   1b614:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b618:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b61c:	e1a03103 	lsl	r3, r3, #2
   1b620:	e0823003 	add	r3, r2, r3
   1b624:	e5933000 	ldr	r3, [r3]
   1b628:	e1a00003 	mov	r0, r3
   1b62c:	ebfffd9b 	bl	1aca0 <RDMSubDevice::GetPersonalityCount() const>
   1b630:	e1a03000 	mov	r3, r0
   1b634:	e1a00003 	mov	r0, r3
   1b638:	e24bd004 	sub	sp, fp, #4
   1b63c:	e8bd8800 	pop	{fp, pc}
   1b640:	00045ab4 	.word	0x00045ab4
   1b644:	000457cc 	.word	0x000457cc
   1b648:	00045818 	.word	0x00045818
   1b64c:	00045848 	.word	0x00045848

0001b650 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)>:
   1b650:	e92d4800 	push	{fp, lr}
   1b654:	e28db004 	add	fp, sp, #4
   1b658:	e24dd008 	sub	sp, sp, #8
   1b65c:	e50b0008 	str	r0, [fp, #-8]
   1b660:	e1a03001 	mov	r3, r1
   1b664:	e14b30ba 	strh	r3, [fp, #-10]
   1b668:	e1a03002 	mov	r3, r2
   1b66c:	e54b300b 	strb	r3, [fp, #-11]
   1b670:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b674:	e3530000 	cmp	r3, #0
   1b678:	0a000004 	beq	1b690 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)+0x40>
   1b67c:	e51b3008 	ldr	r3, [fp, #-8]
   1b680:	e1d330b4 	ldrh	r3, [r3, #4]
   1b684:	e15b20ba 	ldrh	r2, [fp, #-10]
   1b688:	e1520003 	cmp	r2, r3
   1b68c:	9a000004 	bls	1b6a4 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)+0x54>
   1b690:	e59f3080 	ldr	r3, [pc, #128]	; 1b718 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)+0xc8>
   1b694:	e3a0208b 	mov	r2, #139	; 0x8b
   1b698:	e59f107c 	ldr	r1, [pc, #124]	; 1b71c <RDMSubDevices::GetPersonality(unsigned short, unsigned char)+0xcc>
   1b69c:	e59f007c 	ldr	r0, [pc, #124]	; 1b720 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)+0xd0>
   1b6a0:	ebffd71b 	bl	11314 <__assert_fail@plt>
   1b6a4:	e51b3008 	ldr	r3, [fp, #-8]
   1b6a8:	e5932000 	ldr	r2, [r3]
   1b6ac:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b6b0:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b6b4:	e1a03103 	lsl	r3, r3, #2
   1b6b8:	e0823003 	add	r3, r2, r3
   1b6bc:	e5933000 	ldr	r3, [r3]
   1b6c0:	e3530000 	cmp	r3, #0
   1b6c4:	1a000004 	bne	1b6dc <RDMSubDevices::GetPersonality(unsigned short, unsigned char)+0x8c>
   1b6c8:	e59f3048 	ldr	r3, [pc, #72]	; 1b718 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)+0xc8>
   1b6cc:	e3a0208d 	mov	r2, #141	; 0x8d
   1b6d0:	e59f1044 	ldr	r1, [pc, #68]	; 1b71c <RDMSubDevices::GetPersonality(unsigned short, unsigned char)+0xcc>
   1b6d4:	e59f0048 	ldr	r0, [pc, #72]	; 1b724 <RDMSubDevices::GetPersonality(unsigned short, unsigned char)+0xd4>
   1b6d8:	ebffd70d 	bl	11314 <__assert_fail@plt>
   1b6dc:	e51b3008 	ldr	r3, [fp, #-8]
   1b6e0:	e5932000 	ldr	r2, [r3]
   1b6e4:	e15b30ba 	ldrh	r3, [fp, #-10]
   1b6e8:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1b6ec:	e1a03103 	lsl	r3, r3, #2
   1b6f0:	e0823003 	add	r3, r2, r3
   1b6f4:	e5933000 	ldr	r3, [r3]
   1b6f8:	e55b200b 	ldrb	r2, [fp, #-11]
   1b6fc:	e1a01002 	mov	r1, r2
   1b700:	e1a00003 	mov	r0, r3
   1b704:	eb0001bf 	bl	1be08 <RDMSubDevice::GetPersonality(unsigned char)>
   1b708:	e1a03000 	mov	r3, r0
   1b70c:	e1a00003 	mov	r0, r3
   1b710:	e24bd004 	sub	sp, fp, #4
   1b714:	e8bd8800 	pop	{fp, pc}
   1b718:	00045aec 	.word	0x00045aec
   1b71c:	000457cc 	.word	0x000457cc
   1b720:	00045818 	.word	0x00045818
   1b724:	00045848 	.word	0x00045848

0001b728 <RDMSubDevices::Start()>:
   1b728:	e92d4800 	push	{fp, lr}
   1b72c:	e28db004 	add	fp, sp, #4
   1b730:	e24dd010 	sub	sp, sp, #16
   1b734:	e50b0010 	str	r0, [fp, #-16]
   1b738:	e3a03092 	mov	r3, #146	; 0x92
   1b73c:	e59f20bc 	ldr	r2, [pc, #188]	; 1b800 <RDMSubDevices::Start()+0xd8>
   1b740:	e59f10bc 	ldr	r1, [pc, #188]	; 1b804 <RDMSubDevices::Start()+0xdc>
   1b744:	e59f00bc 	ldr	r0, [pc, #188]	; 1b808 <RDMSubDevices::Start()+0xe0>
   1b748:	ebffd6a9 	bl	111f4 <printf@plt>
   1b74c:	e3a03000 	mov	r3, #0
   1b750:	e50b3008 	str	r3, [fp, #-8]
   1b754:	e51b3010 	ldr	r3, [fp, #-16]
   1b758:	e1d330b4 	ldrh	r3, [r3, #4]
   1b75c:	e1a02003 	mov	r2, r3
   1b760:	e51b3008 	ldr	r3, [fp, #-8]
   1b764:	e1530002 	cmp	r3, r2
   1b768:	2a00001c 	bcs	1b7e0 <RDMSubDevices::Start()+0xb8>
   1b76c:	e51b3010 	ldr	r3, [fp, #-16]
   1b770:	e5932000 	ldr	r2, [r3]
   1b774:	e51b3008 	ldr	r3, [fp, #-8]
   1b778:	e1a03103 	lsl	r3, r3, #2
   1b77c:	e0823003 	add	r3, r2, r3
   1b780:	e5933000 	ldr	r3, [r3]
   1b784:	e3530000 	cmp	r3, #0
   1b788:	0a000010 	beq	1b7d0 <RDMSubDevices::Start()+0xa8>
   1b78c:	e51b3010 	ldr	r3, [fp, #-16]
   1b790:	e5932000 	ldr	r2, [r3]
   1b794:	e51b3008 	ldr	r3, [fp, #-8]
   1b798:	e1a03103 	lsl	r3, r3, #2
   1b79c:	e0823003 	add	r3, r2, r3
   1b7a0:	e5931000 	ldr	r1, [r3]
   1b7a4:	e51b3010 	ldr	r3, [fp, #-16]
   1b7a8:	e5932000 	ldr	r2, [r3]
   1b7ac:	e51b3008 	ldr	r3, [fp, #-8]
   1b7b0:	e1a03103 	lsl	r3, r3, #2
   1b7b4:	e0823003 	add	r3, r2, r3
   1b7b8:	e5933000 	ldr	r3, [r3]
   1b7bc:	e5933000 	ldr	r3, [r3]
   1b7c0:	e283300c 	add	r3, r3, #12
   1b7c4:	e5933000 	ldr	r3, [r3]
   1b7c8:	e1a00001 	mov	r0, r1
   1b7cc:	e12fff33 	blx	r3
   1b7d0:	e51b3008 	ldr	r3, [fp, #-8]
   1b7d4:	e2833001 	add	r3, r3, #1
   1b7d8:	e50b3008 	str	r3, [fp, #-8]
   1b7dc:	eaffffdc 	b	1b754 <RDMSubDevices::Start()+0x2c>
   1b7e0:	e3a0309a 	mov	r3, #154	; 0x9a
   1b7e4:	e59f2014 	ldr	r2, [pc, #20]	; 1b800 <RDMSubDevices::Start()+0xd8>
   1b7e8:	e59f1014 	ldr	r1, [pc, #20]	; 1b804 <RDMSubDevices::Start()+0xdc>
   1b7ec:	e59f0018 	ldr	r0, [pc, #24]	; 1b80c <RDMSubDevices::Start()+0xe4>
   1b7f0:	ebffd67f 	bl	111f4 <printf@plt>
   1b7f4:	e1a00000 	nop			; (mov r0, r0)
   1b7f8:	e24bd004 	sub	sp, fp, #4
   1b7fc:	e8bd8800 	pop	{fp, pc}
   1b800:	00045b30 	.word	0x00045b30
   1b804:	000457cc 	.word	0x000457cc
   1b808:	000457e4 	.word	0x000457e4
   1b80c:	00045808 	.word	0x00045808

0001b810 <RDMSubDevices::Stop()>:
   1b810:	e92d4800 	push	{fp, lr}
   1b814:	e28db004 	add	fp, sp, #4
   1b818:	e24dd010 	sub	sp, sp, #16
   1b81c:	e50b0010 	str	r0, [fp, #-16]
   1b820:	e3a0309e 	mov	r3, #158	; 0x9e
   1b824:	e59f20bc 	ldr	r2, [pc, #188]	; 1b8e8 <RDMSubDevices::Stop()+0xd8>
   1b828:	e59f10bc 	ldr	r1, [pc, #188]	; 1b8ec <RDMSubDevices::Stop()+0xdc>
   1b82c:	e59f00bc 	ldr	r0, [pc, #188]	; 1b8f0 <RDMSubDevices::Stop()+0xe0>
   1b830:	ebffd66f 	bl	111f4 <printf@plt>
   1b834:	e3a03000 	mov	r3, #0
   1b838:	e50b3008 	str	r3, [fp, #-8]
   1b83c:	e51b3010 	ldr	r3, [fp, #-16]
   1b840:	e1d330b4 	ldrh	r3, [r3, #4]
   1b844:	e1a02003 	mov	r2, r3
   1b848:	e51b3008 	ldr	r3, [fp, #-8]
   1b84c:	e1530002 	cmp	r3, r2
   1b850:	2a00001c 	bcs	1b8c8 <RDMSubDevices::Stop()+0xb8>
   1b854:	e51b3010 	ldr	r3, [fp, #-16]
   1b858:	e5932000 	ldr	r2, [r3]
   1b85c:	e51b3008 	ldr	r3, [fp, #-8]
   1b860:	e1a03103 	lsl	r3, r3, #2
   1b864:	e0823003 	add	r3, r2, r3
   1b868:	e5933000 	ldr	r3, [r3]
   1b86c:	e3530000 	cmp	r3, #0
   1b870:	0a000010 	beq	1b8b8 <RDMSubDevices::Stop()+0xa8>
   1b874:	e51b3010 	ldr	r3, [fp, #-16]
   1b878:	e5932000 	ldr	r2, [r3]
   1b87c:	e51b3008 	ldr	r3, [fp, #-8]
   1b880:	e1a03103 	lsl	r3, r3, #2
   1b884:	e0823003 	add	r3, r2, r3
   1b888:	e5931000 	ldr	r1, [r3]
   1b88c:	e51b3010 	ldr	r3, [fp, #-16]
   1b890:	e5932000 	ldr	r2, [r3]
   1b894:	e51b3008 	ldr	r3, [fp, #-8]
   1b898:	e1a03103 	lsl	r3, r3, #2
   1b89c:	e0823003 	add	r3, r2, r3
   1b8a0:	e5933000 	ldr	r3, [r3]
   1b8a4:	e5933000 	ldr	r3, [r3]
   1b8a8:	e2833010 	add	r3, r3, #16
   1b8ac:	e5933000 	ldr	r3, [r3]
   1b8b0:	e1a00001 	mov	r0, r1
   1b8b4:	e12fff33 	blx	r3
   1b8b8:	e51b3008 	ldr	r3, [fp, #-8]
   1b8bc:	e2833001 	add	r3, r3, #1
   1b8c0:	e50b3008 	str	r3, [fp, #-8]
   1b8c4:	eaffffdc 	b	1b83c <RDMSubDevices::Stop()+0x2c>
   1b8c8:	e3a030a6 	mov	r3, #166	; 0xa6
   1b8cc:	e59f2014 	ldr	r2, [pc, #20]	; 1b8e8 <RDMSubDevices::Stop()+0xd8>
   1b8d0:	e59f1014 	ldr	r1, [pc, #20]	; 1b8ec <RDMSubDevices::Stop()+0xdc>
   1b8d4:	e59f0014 	ldr	r0, [pc, #20]	; 1b8f0 <RDMSubDevices::Stop()+0xe0>
   1b8d8:	ebffd645 	bl	111f4 <printf@plt>
   1b8dc:	e1a00000 	nop			; (mov r0, r0)
   1b8e0:	e24bd004 	sub	sp, fp, #4
   1b8e4:	e8bd8800 	pop	{fp, pc}
   1b8e8:	00045b38 	.word	0x00045b38
   1b8ec:	000457cc 	.word	0x000457cc
   1b8f0:	000457e4 	.word	0x000457e4

0001b8f4 <RDMSubDevices::SetData(unsigned char const*, unsigned int)>:
   1b8f4:	e92d4810 	push	{r4, fp, lr}
   1b8f8:	e28db008 	add	fp, sp, #8
   1b8fc:	e24dd01c 	sub	sp, sp, #28
   1b900:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1b904:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   1b908:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   1b90c:	e3a03000 	mov	r3, #0
   1b910:	e50b3010 	str	r3, [fp, #-16]
   1b914:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b918:	e1d330b4 	ldrh	r3, [r3, #4]
   1b91c:	e1a02003 	mov	r2, r3
   1b920:	e51b3010 	ldr	r3, [fp, #-16]
   1b924:	e1530002 	cmp	r3, r2
   1b928:	2a00003a 	bcs	1ba18 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x124>
   1b92c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b930:	e5932000 	ldr	r2, [r3]
   1b934:	e51b3010 	ldr	r3, [fp, #-16]
   1b938:	e1a03103 	lsl	r3, r3, #2
   1b93c:	e0823003 	add	r3, r2, r3
   1b940:	e5933000 	ldr	r3, [r3]
   1b944:	e3530000 	cmp	r3, #0
   1b948:	0a00002e 	beq	1ba08 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x114>
   1b94c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b950:	e5932000 	ldr	r2, [r3]
   1b954:	e51b3010 	ldr	r3, [fp, #-16]
   1b958:	e1a03103 	lsl	r3, r3, #2
   1b95c:	e0823003 	add	r3, r2, r3
   1b960:	e5933000 	ldr	r3, [r3]
   1b964:	e1a00003 	mov	r0, r3
   1b968:	ebfffcae 	bl	1ac28 <RDMSubDevice::GetDmxStartAddress() const>
   1b96c:	e1a03000 	mov	r3, r0
   1b970:	e1a04003 	mov	r4, r3
   1b974:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b978:	e5932000 	ldr	r2, [r3]
   1b97c:	e51b3010 	ldr	r3, [fp, #-16]
   1b980:	e1a03103 	lsl	r3, r3, #2
   1b984:	e0823003 	add	r3, r2, r3
   1b988:	e5933000 	ldr	r3, [r3]
   1b98c:	e1a00003 	mov	r0, r3
   1b990:	ebfffccc 	bl	1acc8 <RDMSubDevice::GetDmxFootPrint() const>
   1b994:	e1a03000 	mov	r3, r0
   1b998:	e0843003 	add	r3, r4, r3
   1b99c:	e6ff3073 	uxth	r3, r3
   1b9a0:	e2433001 	sub	r3, r3, #1
   1b9a4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b9a8:	e1520003 	cmp	r2, r3
   1b9ac:	23a03001 	movcs	r3, #1
   1b9b0:	33a03000 	movcc	r3, #0
   1b9b4:	e6ef3073 	uxtb	r3, r3
   1b9b8:	e3530000 	cmp	r3, #0
   1b9bc:	0a000011 	beq	1ba08 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x114>
   1b9c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b9c4:	e5932000 	ldr	r2, [r3]
   1b9c8:	e51b3010 	ldr	r3, [fp, #-16]
   1b9cc:	e1a03103 	lsl	r3, r3, #2
   1b9d0:	e0823003 	add	r3, r2, r3
   1b9d4:	e5930000 	ldr	r0, [r3]
   1b9d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b9dc:	e5932000 	ldr	r2, [r3]
   1b9e0:	e51b3010 	ldr	r3, [fp, #-16]
   1b9e4:	e1a03103 	lsl	r3, r3, #2
   1b9e8:	e0823003 	add	r3, r2, r3
   1b9ec:	e5933000 	ldr	r3, [r3]
   1b9f0:	e5933000 	ldr	r3, [r3]
   1b9f4:	e2833014 	add	r3, r3, #20
   1b9f8:	e5933000 	ldr	r3, [r3]
   1b9fc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   1ba00:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   1ba04:	e12fff33 	blx	r3
   1ba08:	e51b3010 	ldr	r3, [fp, #-16]
   1ba0c:	e2833001 	add	r3, r3, #1
   1ba10:	e50b3010 	str	r3, [fp, #-16]
   1ba14:	eaffffbe 	b	1b914 <RDMSubDevices::SetData(unsigned char const*, unsigned int)+0x20>
   1ba18:	e1a00000 	nop			; (mov r0, r0)
   1ba1c:	e24bd008 	sub	sp, fp, #8
   1ba20:	e8bd8810 	pop	{r4, fp, pc}

0001ba24 <RDMSubDevices::GetFactoryDefaults()>:
   1ba24:	e92d4800 	push	{fp, lr}
   1ba28:	e28db004 	add	fp, sp, #4
   1ba2c:	e24dd010 	sub	sp, sp, #16
   1ba30:	e50b0010 	str	r0, [fp, #-16]
   1ba34:	e3a03000 	mov	r3, #0
   1ba38:	e50b3008 	str	r3, [fp, #-8]
   1ba3c:	e51b3010 	ldr	r3, [fp, #-16]
   1ba40:	e1d330b4 	ldrh	r3, [r3, #4]
   1ba44:	e1a02003 	mov	r2, r3
   1ba48:	e51b3008 	ldr	r3, [fp, #-8]
   1ba4c:	e1530002 	cmp	r3, r2
   1ba50:	2a00001a 	bcs	1bac0 <RDMSubDevices::GetFactoryDefaults()+0x9c>
   1ba54:	e51b3010 	ldr	r3, [fp, #-16]
   1ba58:	e5932000 	ldr	r2, [r3]
   1ba5c:	e51b3008 	ldr	r3, [fp, #-8]
   1ba60:	e1a03103 	lsl	r3, r3, #2
   1ba64:	e0823003 	add	r3, r2, r3
   1ba68:	e5933000 	ldr	r3, [r3]
   1ba6c:	e3530000 	cmp	r3, #0
   1ba70:	0a00000e 	beq	1bab0 <RDMSubDevices::GetFactoryDefaults()+0x8c>
   1ba74:	e51b3010 	ldr	r3, [fp, #-16]
   1ba78:	e5932000 	ldr	r2, [r3]
   1ba7c:	e51b3008 	ldr	r3, [fp, #-8]
   1ba80:	e1a03103 	lsl	r3, r3, #2
   1ba84:	e0823003 	add	r3, r2, r3
   1ba88:	e5933000 	ldr	r3, [r3]
   1ba8c:	e1a00003 	mov	r0, r3
   1ba90:	eb00018a 	bl	1c0c0 <RDMSubDevice::GetFactoryDefaults()>
   1ba94:	e1a03000 	mov	r3, r0
   1ba98:	e2233001 	eor	r3, r3, #1
   1ba9c:	e6ef3073 	uxtb	r3, r3
   1baa0:	e3530000 	cmp	r3, #0
   1baa4:	0a000001 	beq	1bab0 <RDMSubDevices::GetFactoryDefaults()+0x8c>
   1baa8:	e3a03000 	mov	r3, #0
   1baac:	ea000004 	b	1bac4 <RDMSubDevices::GetFactoryDefaults()+0xa0>
   1bab0:	e51b3008 	ldr	r3, [fp, #-8]
   1bab4:	e2833001 	add	r3, r3, #1
   1bab8:	e50b3008 	str	r3, [fp, #-8]
   1babc:	eaffffde 	b	1ba3c <RDMSubDevices::GetFactoryDefaults()+0x18>
   1bac0:	e3a03001 	mov	r3, #1
   1bac4:	e1a00003 	mov	r0, r3
   1bac8:	e24bd004 	sub	sp, fp, #4
   1bacc:	e8bd8800 	pop	{fp, pc}

0001bad0 <RDMSubDevices::SetFactoryDefaults()>:
   1bad0:	e92d4800 	push	{fp, lr}
   1bad4:	e28db004 	add	fp, sp, #4
   1bad8:	e24dd010 	sub	sp, sp, #16
   1badc:	e50b0010 	str	r0, [fp, #-16]
   1bae0:	e3a03000 	mov	r3, #0
   1bae4:	e50b3008 	str	r3, [fp, #-8]
   1bae8:	e51b3010 	ldr	r3, [fp, #-16]
   1baec:	e1d330b4 	ldrh	r3, [r3, #4]
   1baf0:	e1a02003 	mov	r2, r3
   1baf4:	e51b3008 	ldr	r3, [fp, #-8]
   1baf8:	e1530002 	cmp	r3, r2
   1bafc:	2a000013 	bcs	1bb50 <RDMSubDevices::SetFactoryDefaults()+0x80>
   1bb00:	e51b3010 	ldr	r3, [fp, #-16]
   1bb04:	e5932000 	ldr	r2, [r3]
   1bb08:	e51b3008 	ldr	r3, [fp, #-8]
   1bb0c:	e1a03103 	lsl	r3, r3, #2
   1bb10:	e0823003 	add	r3, r2, r3
   1bb14:	e5933000 	ldr	r3, [r3]
   1bb18:	e3530000 	cmp	r3, #0
   1bb1c:	0a000007 	beq	1bb40 <RDMSubDevices::SetFactoryDefaults()+0x70>
   1bb20:	e51b3010 	ldr	r3, [fp, #-16]
   1bb24:	e5932000 	ldr	r2, [r3]
   1bb28:	e51b3008 	ldr	r3, [fp, #-8]
   1bb2c:	e1a03103 	lsl	r3, r3, #2
   1bb30:	e0823003 	add	r3, r2, r3
   1bb34:	e5933000 	ldr	r3, [r3]
   1bb38:	e1a00003 	mov	r0, r3
   1bb3c:	eb00017a 	bl	1c12c <RDMSubDevice::SetFactoryDefaults()>
   1bb40:	e51b3008 	ldr	r3, [fp, #-8]
   1bb44:	e2833001 	add	r3, r3, #1
   1bb48:	e50b3008 	str	r3, [fp, #-8]
   1bb4c:	eaffffe5 	b	1bae8 <RDMSubDevices::SetFactoryDefaults()+0x18>
   1bb50:	e1a00000 	nop			; (mov r0, r0)
   1bb54:	e24bd004 	sub	sp, fp, #4
   1bb58:	e8bd8800 	pop	{fp, pc}

0001bb5c <RDMSubDevice::RDMSubDevice(char const*, unsigned short, unsigned char)>:
   1bb5c:	e92d4800 	push	{fp, lr}
   1bb60:	e28db004 	add	fp, sp, #4
   1bb64:	e24dd018 	sub	sp, sp, #24
   1bb68:	e50b0010 	str	r0, [fp, #-16]
   1bb6c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1bb70:	e1a01002 	mov	r1, r2
   1bb74:	e1a02003 	mov	r2, r3
   1bb78:	e1a03001 	mov	r3, r1
   1bb7c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
   1bb80:	e1a03002 	mov	r3, r2
   1bb84:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
   1bb88:	e59f2108 	ldr	r2, [pc, #264]	; 1bc98 <RDMSubDevice::RDMSubDevice(char const*, unsigned short, unsigned char)+0x13c>
   1bb8c:	e51b3010 	ldr	r3, [fp, #-16]
   1bb90:	e5832000 	str	r2, [r3]
   1bb94:	e51b3010 	ldr	r3, [fp, #-16]
   1bb98:	e3a02000 	mov	r2, #0
   1bb9c:	e5832004 	str	r2, [r3, #4]
   1bba0:	e51b3010 	ldr	r3, [fp, #-16]
   1bba4:	e3a02001 	mov	r2, #1
   1bba8:	e5c32008 	strb	r2, [r3, #8]
   1bbac:	e51b3010 	ldr	r3, [fp, #-16]
   1bbb0:	e3a02000 	mov	r2, #0
   1bbb4:	e1c320ba 	strh	r2, [r3, #10]
   1bbb8:	e51b3010 	ldr	r3, [fp, #-16]
   1bbbc:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
   1bbc0:	e1c320bc 	strh	r2, [r3, #12]
   1bbc4:	e51b3010 	ldr	r3, [fp, #-16]
   1bbc8:	e55b2017 	ldrb	r2, [fp, #-23]	; 0xffffffe9
   1bbcc:	e5c3200e 	strb	r2, [r3, #14]
   1bbd0:	e3a03000 	mov	r3, #0
   1bbd4:	e50b3008 	str	r3, [fp, #-8]
   1bbd8:	e51b3008 	ldr	r3, [fp, #-8]
   1bbdc:	e353001f 	cmp	r3, #31
   1bbe0:	8a000013 	bhi	1bc34 <RDMSubDevice::RDMSubDevice(char const*, unsigned short, unsigned char)+0xd8>
   1bbe4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1bbe8:	e51b3008 	ldr	r3, [fp, #-8]
   1bbec:	e0823003 	add	r3, r2, r3
   1bbf0:	e5d33000 	ldrb	r3, [r3]
   1bbf4:	e3530000 	cmp	r3, #0
   1bbf8:	0a00000d 	beq	1bc34 <RDMSubDevice::RDMSubDevice(char const*, unsigned short, unsigned char)+0xd8>
   1bbfc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1bc00:	e51b3008 	ldr	r3, [fp, #-8]
   1bc04:	e0823003 	add	r3, r2, r3
   1bc08:	e5d31000 	ldrb	r1, [r3]
   1bc0c:	e51b2010 	ldr	r2, [fp, #-16]
   1bc10:	e51b3008 	ldr	r3, [fp, #-8]
   1bc14:	e0823003 	add	r3, r2, r3
   1bc18:	e2833038 	add	r3, r3, #56	; 0x38
   1bc1c:	e1a02001 	mov	r2, r1
   1bc20:	e5c32000 	strb	r2, [r3]
   1bc24:	e51b3008 	ldr	r3, [fp, #-8]
   1bc28:	e2833001 	add	r3, r3, #1
   1bc2c:	e50b3008 	str	r3, [fp, #-8]
   1bc30:	eaffffe8 	b	1bbd8 <RDMSubDevice::RDMSubDevice(char const*, unsigned short, unsigned char)+0x7c>
   1bc34:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   1bc38:	e51b0010 	ldr	r0, [fp, #-16]
   1bc3c:	eb0000b2 	bl	1bf0c <RDMSubDevice::SetLabel(char const*)>
   1bc40:	e51b3010 	ldr	r3, [fp, #-16]
   1bc44:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
   1bc48:	e1c321b2 	strh	r2, [r3, #18]
   1bc4c:	e51b3010 	ldr	r3, [fp, #-16]
   1bc50:	e55b2017 	ldrb	r2, [fp, #-23]	; 0xffffffe9
   1bc54:	e5c32014 	strb	r2, [r3, #20]
   1bc58:	e51b3010 	ldr	r3, [fp, #-16]
   1bc5c:	e3a02000 	mov	r2, #0
   1bc60:	e5c32037 	strb	r2, [r3, #55]	; 0x37
   1bc64:	e51b3010 	ldr	r3, [fp, #-16]
   1bc68:	e3a02000 	mov	r2, #0
   1bc6c:	e5c32015 	strb	r2, [r3, #21]
   1bc70:	e51b0010 	ldr	r0, [fp, #-16]
   1bc74:	eb000148 	bl	1c19c <RDMSubDevice::CalculateChecksum()>
   1bc78:	e1a03000 	mov	r3, r0
   1bc7c:	e1a02003 	mov	r2, r3
   1bc80:	e51b3010 	ldr	r3, [fp, #-16]
   1bc84:	e1c320ba 	strh	r2, [r3, #10]
   1bc88:	e51b3010 	ldr	r3, [fp, #-16]
   1bc8c:	e1a00003 	mov	r0, r3
   1bc90:	e24bd004 	sub	sp, fp, #4
   1bc94:	e8bd8800 	pop	{fp, pc}
   1bc98:	00045c14 	.word	0x00045c14

0001bc9c <RDMSubDevice::~RDMSubDevice()>:
   1bc9c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1bca0:	e28db000 	add	fp, sp, #0
   1bca4:	e24dd00c 	sub	sp, sp, #12
   1bca8:	e50b0008 	str	r0, [fp, #-8]
   1bcac:	e59f2018 	ldr	r2, [pc, #24]	; 1bccc <RDMSubDevice::~RDMSubDevice()+0x30>
   1bcb0:	e51b3008 	ldr	r3, [fp, #-8]
   1bcb4:	e5832000 	str	r2, [r3]
   1bcb8:	e51b3008 	ldr	r3, [fp, #-8]
   1bcbc:	e1a00003 	mov	r0, r3
   1bcc0:	e28bd000 	add	sp, fp, #0
   1bcc4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1bcc8:	e12fff1e 	bx	lr
   1bccc:	00045c14 	.word	0x00045c14

0001bcd0 <RDMSubDevice::~RDMSubDevice()>:
   1bcd0:	e92d4800 	push	{fp, lr}
   1bcd4:	e28db004 	add	fp, sp, #4
   1bcd8:	e24dd008 	sub	sp, sp, #8
   1bcdc:	e50b0008 	str	r0, [fp, #-8]
   1bce0:	e51b0008 	ldr	r0, [fp, #-8]
   1bce4:	ebffffec 	bl	1bc9c <RDMSubDevice::~RDMSubDevice()>
   1bce8:	e51b0008 	ldr	r0, [fp, #-8]
   1bcec:	ebffd585 	bl	11308 <operator delete(void*)@plt>
   1bcf0:	e51b3008 	ldr	r3, [fp, #-8]
   1bcf4:	e1a00003 	mov	r0, r3
   1bcf8:	e24bd004 	sub	sp, fp, #4
   1bcfc:	e8bd8800 	pop	{fp, pc}

0001bd00 <RDMSubDevice::SetDmxStartAddress(unsigned short)>:
   1bd00:	e92d4800 	push	{fp, lr}
   1bd04:	e28db004 	add	fp, sp, #4
   1bd08:	e24dd008 	sub	sp, sp, #8
   1bd0c:	e50b0008 	str	r0, [fp, #-8]
   1bd10:	e1a03001 	mov	r3, r1
   1bd14:	e14b30ba 	strh	r3, [fp, #-10]
   1bd18:	e51b3008 	ldr	r3, [fp, #-8]
   1bd1c:	e15b20ba 	ldrh	r2, [fp, #-10]
   1bd20:	e1c321b2 	strh	r2, [r3, #18]
   1bd24:	e51b3008 	ldr	r3, [fp, #-8]
   1bd28:	e5933000 	ldr	r3, [r3]
   1bd2c:	e2833018 	add	r3, r3, #24
   1bd30:	e5933000 	ldr	r3, [r3]
   1bd34:	e3a01000 	mov	r1, #0
   1bd38:	e51b0008 	ldr	r0, [fp, #-8]
   1bd3c:	e12fff33 	blx	r3
   1bd40:	e1a00000 	nop			; (mov r0, r0)
   1bd44:	e24bd004 	sub	sp, fp, #4
   1bd48:	e8bd8800 	pop	{fp, pc}

0001bd4c <RDMSubDevice::SetDmxFootprint(unsigned short)>:
   1bd4c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1bd50:	e28db000 	add	fp, sp, #0
   1bd54:	e24dd00c 	sub	sp, sp, #12
   1bd58:	e50b0008 	str	r0, [fp, #-8]
   1bd5c:	e1a03001 	mov	r3, r1
   1bd60:	e14b30ba 	strh	r3, [fp, #-10]
   1bd64:	e51b3008 	ldr	r3, [fp, #-8]
   1bd68:	e15b20ba 	ldrh	r2, [fp, #-10]
   1bd6c:	e1c321b0 	strh	r2, [r3, #16]
   1bd70:	e1a00000 	nop			; (mov r0, r0)
   1bd74:	e28bd000 	add	sp, fp, #0
   1bd78:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1bd7c:	e12fff1e 	bx	lr

0001bd80 <RDMSubDevice::SetPersonalities(RDMPersonality**, unsigned char)>:
   1bd80:	e92d4800 	push	{fp, lr}
   1bd84:	e28db004 	add	fp, sp, #4
   1bd88:	e24dd010 	sub	sp, sp, #16
   1bd8c:	e50b0008 	str	r0, [fp, #-8]
   1bd90:	e50b100c 	str	r1, [fp, #-12]
   1bd94:	e1a03002 	mov	r3, r2
   1bd98:	e54b300d 	strb	r3, [fp, #-13]
   1bd9c:	e51b300c 	ldr	r3, [fp, #-12]
   1bda0:	e3530000 	cmp	r3, #0
   1bda4:	1a000004 	bne	1bdbc <RDMSubDevice::SetPersonalities(RDMPersonality**, unsigned char)+0x3c>
   1bda8:	e59f304c 	ldr	r3, [pc, #76]	; 1bdfc <RDMSubDevice::SetPersonalities(RDMPersonality**, unsigned char)+0x7c>
   1bdac:	e3a02040 	mov	r2, #64	; 0x40
   1bdb0:	e59f1048 	ldr	r1, [pc, #72]	; 1be00 <RDMSubDevice::SetPersonalities(RDMPersonality**, unsigned char)+0x80>
   1bdb4:	e59f0048 	ldr	r0, [pc, #72]	; 1be04 <RDMSubDevice::SetPersonalities(RDMPersonality**, unsigned char)+0x84>
   1bdb8:	ebffd555 	bl	11314 <__assert_fail@plt>
   1bdbc:	e51b3008 	ldr	r3, [fp, #-8]
   1bdc0:	e55b200d 	ldrb	r2, [fp, #-13]
   1bdc4:	e5c32015 	strb	r2, [r3, #21]
   1bdc8:	e51b3008 	ldr	r3, [fp, #-8]
   1bdcc:	e51b200c 	ldr	r2, [fp, #-12]
   1bdd0:	e5832004 	str	r2, [r3, #4]
   1bdd4:	e51b3008 	ldr	r3, [fp, #-8]
   1bdd8:	e5933000 	ldr	r3, [r3]
   1bddc:	e2833018 	add	r3, r3, #24
   1bde0:	e5933000 	ldr	r3, [r3]
   1bde4:	e3a01001 	mov	r1, #1
   1bde8:	e51b0008 	ldr	r0, [fp, #-8]
   1bdec:	e12fff33 	blx	r3
   1bdf0:	e1a00000 	nop			; (mov r0, r0)
   1bdf4:	e24bd004 	sub	sp, fp, #4
   1bdf8:	e8bd8800 	pop	{fp, pc}
   1bdfc:	00045c30 	.word	0x00045c30
   1be00:	00045b60 	.word	0x00045b60
   1be04:	00045b78 	.word	0x00045b78

0001be08 <RDMSubDevice::GetPersonality(unsigned char)>:
   1be08:	e92d4800 	push	{fp, lr}
   1be0c:	e28db004 	add	fp, sp, #4
   1be10:	e24dd008 	sub	sp, sp, #8
   1be14:	e50b0008 	str	r0, [fp, #-8]
   1be18:	e1a03001 	mov	r3, r1
   1be1c:	e54b3009 	strb	r3, [fp, #-9]
   1be20:	e55b3009 	ldrb	r3, [fp, #-9]
   1be24:	e3530000 	cmp	r3, #0
   1be28:	1a000004 	bne	1be40 <RDMSubDevice::GetPersonality(unsigned char)+0x38>
   1be2c:	e59f305c 	ldr	r3, [pc, #92]	; 1be90 <RDMSubDevice::GetPersonality(unsigned char)+0x88>
   1be30:	e3a02049 	mov	r2, #73	; 0x49
   1be34:	e59f1058 	ldr	r1, [pc, #88]	; 1be94 <RDMSubDevice::GetPersonality(unsigned char)+0x8c>
   1be38:	e59f0058 	ldr	r0, [pc, #88]	; 1be98 <RDMSubDevice::GetPersonality(unsigned char)+0x90>
   1be3c:	ebffd534 	bl	11314 <__assert_fail@plt>
   1be40:	e51b3008 	ldr	r3, [fp, #-8]
   1be44:	e5d33015 	ldrb	r3, [r3, #21]
   1be48:	e55b2009 	ldrb	r2, [fp, #-9]
   1be4c:	e1520003 	cmp	r2, r3
   1be50:	9a000004 	bls	1be68 <RDMSubDevice::GetPersonality(unsigned char)+0x60>
   1be54:	e59f3034 	ldr	r3, [pc, #52]	; 1be90 <RDMSubDevice::GetPersonality(unsigned char)+0x88>
   1be58:	e3a0204a 	mov	r2, #74	; 0x4a
   1be5c:	e59f1030 	ldr	r1, [pc, #48]	; 1be94 <RDMSubDevice::GetPersonality(unsigned char)+0x8c>
   1be60:	e59f0034 	ldr	r0, [pc, #52]	; 1be9c <RDMSubDevice::GetPersonality(unsigned char)+0x94>
   1be64:	ebffd52a 	bl	11314 <__assert_fail@plt>
   1be68:	e51b3008 	ldr	r3, [fp, #-8]
   1be6c:	e5932004 	ldr	r2, [r3, #4]
   1be70:	e55b3009 	ldrb	r3, [fp, #-9]
   1be74:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   1be78:	e1a03103 	lsl	r3, r3, #2
   1be7c:	e0823003 	add	r3, r2, r3
   1be80:	e5933000 	ldr	r3, [r3]
   1be84:	e1a00003 	mov	r0, r3
   1be88:	e24bd004 	sub	sp, fp, #4
   1be8c:	e8bd8800 	pop	{fp, pc}
   1be90:	00045c70 	.word	0x00045c70
   1be94:	00045b60 	.word	0x00045b60
   1be98:	00045b98 	.word	0x00045b98
   1be9c:	00045bac 	.word	0x00045bac

0001bea0 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)>:
   1bea0:	e92d4800 	push	{fp, lr}
   1bea4:	e28db004 	add	fp, sp, #4
   1bea8:	e24dd008 	sub	sp, sp, #8
   1beac:	e50b0008 	str	r0, [fp, #-8]
   1beb0:	e50b100c 	str	r1, [fp, #-12]
   1beb4:	e51b300c 	ldr	r3, [fp, #-12]
   1beb8:	e3530000 	cmp	r3, #0
   1bebc:	1a000004 	bne	1bed4 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)+0x34>
   1bec0:	e59f3038 	ldr	r3, [pc, #56]	; 1bf00 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)+0x60>
   1bec4:	e3a02050 	mov	r2, #80	; 0x50
   1bec8:	e59f1034 	ldr	r1, [pc, #52]	; 1bf04 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)+0x64>
   1becc:	e59f0034 	ldr	r0, [pc, #52]	; 1bf08 <RDMSubDevice::GetLabel(TRDMDeviceInfoData*)+0x68>
   1bed0:	ebffd50f 	bl	11314 <__assert_fail@plt>
   1bed4:	e51b3008 	ldr	r3, [fp, #-8]
   1bed8:	e2832016 	add	r2, r3, #22
   1bedc:	e51b300c 	ldr	r3, [fp, #-12]
   1bee0:	e5832000 	str	r2, [r3]
   1bee4:	e51b3008 	ldr	r3, [fp, #-8]
   1bee8:	e5d32036 	ldrb	r2, [r3, #54]	; 0x36
   1beec:	e51b300c 	ldr	r3, [fp, #-12]
   1bef0:	e5c32004 	strb	r2, [r3, #4]
   1bef4:	e1a00000 	nop			; (mov r0, r0)
   1bef8:	e24bd004 	sub	sp, fp, #4
   1befc:	e8bd8800 	pop	{fp, pc}
   1bf00:	00045ca8 	.word	0x00045ca8
   1bf04:	00045b60 	.word	0x00045b60
   1bf08:	00045be0 	.word	0x00045be0

0001bf0c <RDMSubDevice::SetLabel(char const*)>:
   1bf0c:	e92d4800 	push	{fp, lr}
   1bf10:	e28db004 	add	fp, sp, #4
   1bf14:	e24dd010 	sub	sp, sp, #16
   1bf18:	e50b0010 	str	r0, [fp, #-16]
   1bf1c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1bf20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1bf24:	e3530000 	cmp	r3, #0
   1bf28:	1a000004 	bne	1bf40 <RDMSubDevice::SetLabel(char const*)+0x34>
   1bf2c:	e59f308c 	ldr	r3, [pc, #140]	; 1bfc0 <RDMSubDevice::SetLabel(char const*)+0xb4>
   1bf30:	e3a02057 	mov	r2, #87	; 0x57
   1bf34:	e59f1088 	ldr	r1, [pc, #136]	; 1bfc4 <RDMSubDevice::SetLabel(char const*)+0xb8>
   1bf38:	e59f0088 	ldr	r0, [pc, #136]	; 1bfc8 <RDMSubDevice::SetLabel(char const*)+0xbc>
   1bf3c:	ebffd4f4 	bl	11314 <__assert_fail@plt>
   1bf40:	e3a03000 	mov	r3, #0
   1bf44:	e50b3008 	str	r3, [fp, #-8]
   1bf48:	e51b3008 	ldr	r3, [fp, #-8]
   1bf4c:	e353001f 	cmp	r3, #31
   1bf50:	8a000013 	bhi	1bfa4 <RDMSubDevice::SetLabel(char const*)+0x98>
   1bf54:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1bf58:	e51b3008 	ldr	r3, [fp, #-8]
   1bf5c:	e0823003 	add	r3, r2, r3
   1bf60:	e5d33000 	ldrb	r3, [r3]
   1bf64:	e3530000 	cmp	r3, #0
   1bf68:	0a00000d 	beq	1bfa4 <RDMSubDevice::SetLabel(char const*)+0x98>
   1bf6c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1bf70:	e51b3008 	ldr	r3, [fp, #-8]
   1bf74:	e0823003 	add	r3, r2, r3
   1bf78:	e5d31000 	ldrb	r1, [r3]
   1bf7c:	e51b2010 	ldr	r2, [fp, #-16]
   1bf80:	e51b3008 	ldr	r3, [fp, #-8]
   1bf84:	e0823003 	add	r3, r2, r3
   1bf88:	e2833016 	add	r3, r3, #22
   1bf8c:	e1a02001 	mov	r2, r1
   1bf90:	e5c32000 	strb	r2, [r3]
   1bf94:	e51b3008 	ldr	r3, [fp, #-8]
   1bf98:	e2833001 	add	r3, r3, #1
   1bf9c:	e50b3008 	str	r3, [fp, #-8]
   1bfa0:	eaffffe8 	b	1bf48 <RDMSubDevice::SetLabel(char const*)+0x3c>
   1bfa4:	e51b3008 	ldr	r3, [fp, #-8]
   1bfa8:	e6ef2073 	uxtb	r2, r3
   1bfac:	e51b3010 	ldr	r3, [fp, #-16]
   1bfb0:	e5c32036 	strb	r2, [r3, #54]	; 0x36
   1bfb4:	e1a00000 	nop			; (mov r0, r0)
   1bfb8:	e24bd004 	sub	sp, fp, #4
   1bfbc:	e8bd8800 	pop	{fp, pc}
   1bfc0:	00045cdc 	.word	0x00045cdc
   1bfc4:	00045b60 	.word	0x00045b60
   1bfc8:	00045bf8 	.word	0x00045bf8

0001bfcc <RDMSubDevice::SetLabel(char const*, unsigned char)>:
   1bfcc:	e92d4800 	push	{fp, lr}
   1bfd0:	e28db004 	add	fp, sp, #4
   1bfd4:	e24dd018 	sub	sp, sp, #24
   1bfd8:	e50b0010 	str	r0, [fp, #-16]
   1bfdc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1bfe0:	e1a03002 	mov	r3, r2
   1bfe4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   1bfe8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1bfec:	e3530000 	cmp	r3, #0
   1bff0:	1a000004 	bne	1c008 <RDMSubDevice::SetLabel(char const*, unsigned char)+0x3c>
   1bff4:	e59f3084 	ldr	r3, [pc, #132]	; 1c080 <RDMSubDevice::SetLabel(char const*, unsigned char)+0xb4>
   1bff8:	e3a02062 	mov	r2, #98	; 0x62
   1bffc:	e59f1080 	ldr	r1, [pc, #128]	; 1c084 <RDMSubDevice::SetLabel(char const*, unsigned char)+0xb8>
   1c000:	e59f0080 	ldr	r0, [pc, #128]	; 1c088 <RDMSubDevice::SetLabel(char const*, unsigned char)+0xbc>
   1c004:	ebffd4c2 	bl	11314 <__assert_fail@plt>
   1c008:	e3a03000 	mov	r3, #0
   1c00c:	e50b3008 	str	r3, [fp, #-8]
   1c010:	e51b3008 	ldr	r3, [fp, #-8]
   1c014:	e353001f 	cmp	r3, #31
   1c018:	8a000011 	bhi	1c064 <RDMSubDevice::SetLabel(char const*, unsigned char)+0x98>
   1c01c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   1c020:	e51b2008 	ldr	r2, [fp, #-8]
   1c024:	e1520003 	cmp	r2, r3
   1c028:	2a00000d 	bcs	1c064 <RDMSubDevice::SetLabel(char const*, unsigned char)+0x98>
   1c02c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1c030:	e51b3008 	ldr	r3, [fp, #-8]
   1c034:	e0823003 	add	r3, r2, r3
   1c038:	e5d31000 	ldrb	r1, [r3]
   1c03c:	e51b2010 	ldr	r2, [fp, #-16]
   1c040:	e51b3008 	ldr	r3, [fp, #-8]
   1c044:	e0823003 	add	r3, r2, r3
   1c048:	e2833016 	add	r3, r3, #22
   1c04c:	e1a02001 	mov	r2, r1
   1c050:	e5c32000 	strb	r2, [r3]
   1c054:	e51b3008 	ldr	r3, [fp, #-8]
   1c058:	e2833001 	add	r3, r3, #1
   1c05c:	e50b3008 	str	r3, [fp, #-8]
   1c060:	eaffffea 	b	1c010 <RDMSubDevice::SetLabel(char const*, unsigned char)+0x44>
   1c064:	e51b3008 	ldr	r3, [fp, #-8]
   1c068:	e6ef2073 	uxtb	r2, r3
   1c06c:	e51b3010 	ldr	r3, [fp, #-16]
   1c070:	e5c32036 	strb	r2, [r3, #54]	; 0x36
   1c074:	e1a00000 	nop			; (mov r0, r0)
   1c078:	e24bd004 	sub	sp, fp, #4
   1c07c:	e8bd8800 	pop	{fp, pc}
   1c080:	00045d08 	.word	0x00045d08
   1c084:	00045b60 	.word	0x00045b60
   1c088:	00045bf8 	.word	0x00045bf8

0001c08c <RDMSubDevice::SetPersonalityCurrent(unsigned char)>:
   1c08c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1c090:	e28db000 	add	fp, sp, #0
   1c094:	e24dd00c 	sub	sp, sp, #12
   1c098:	e50b0008 	str	r0, [fp, #-8]
   1c09c:	e1a03001 	mov	r3, r1
   1c0a0:	e54b3009 	strb	r3, [fp, #-9]
   1c0a4:	e51b3008 	ldr	r3, [fp, #-8]
   1c0a8:	e55b2009 	ldrb	r2, [fp, #-9]
   1c0ac:	e5c32014 	strb	r2, [r3, #20]
   1c0b0:	e1a00000 	nop			; (mov r0, r0)
   1c0b4:	e28bd000 	add	sp, fp, #0
   1c0b8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1c0bc:	e12fff1e 	bx	lr

0001c0c0 <RDMSubDevice::GetFactoryDefaults()>:
   1c0c0:	e92d4810 	push	{r4, fp, lr}
   1c0c4:	e28db008 	add	fp, sp, #8
   1c0c8:	e24dd00c 	sub	sp, sp, #12
   1c0cc:	e50b0010 	str	r0, [fp, #-16]
   1c0d0:	e51b3010 	ldr	r3, [fp, #-16]
   1c0d4:	e5d33008 	ldrb	r3, [r3, #8]
   1c0d8:	e3530000 	cmp	r3, #0
   1c0dc:	0a00000d 	beq	1c118 <RDMSubDevice::GetFactoryDefaults()+0x58>
   1c0e0:	e51b3010 	ldr	r3, [fp, #-16]
   1c0e4:	e1d340ba 	ldrh	r4, [r3, #10]
   1c0e8:	e51b0010 	ldr	r0, [fp, #-16]
   1c0ec:	eb00002a 	bl	1c19c <RDMSubDevice::CalculateChecksum()>
   1c0f0:	e1a03000 	mov	r3, r0
   1c0f4:	e1540003 	cmp	r4, r3
   1c0f8:	13a03001 	movne	r3, #1
   1c0fc:	03a03000 	moveq	r3, #0
   1c100:	e6ef3073 	uxtb	r3, r3
   1c104:	e3530000 	cmp	r3, #0
   1c108:	0a000002 	beq	1c118 <RDMSubDevice::GetFactoryDefaults()+0x58>
   1c10c:	e51b3010 	ldr	r3, [fp, #-16]
   1c110:	e3a02000 	mov	r2, #0
   1c114:	e5c32008 	strb	r2, [r3, #8]
   1c118:	e51b3010 	ldr	r3, [fp, #-16]
   1c11c:	e5d33008 	ldrb	r3, [r3, #8]
   1c120:	e1a00003 	mov	r0, r3
   1c124:	e24bd008 	sub	sp, fp, #8
   1c128:	e8bd8810 	pop	{r4, fp, pc}

0001c12c <RDMSubDevice::SetFactoryDefaults()>:
   1c12c:	e92d4800 	push	{fp, lr}
   1c130:	e28db004 	add	fp, sp, #4
   1c134:	e24dd008 	sub	sp, sp, #8
   1c138:	e50b0008 	str	r0, [fp, #-8]
   1c13c:	e51b3008 	ldr	r3, [fp, #-8]
   1c140:	e5d33008 	ldrb	r3, [r3, #8]
   1c144:	e3530000 	cmp	r3, #0
   1c148:	1a000010 	bne	1c190 <RDMSubDevice::SetFactoryDefaults()+0x64>
   1c14c:	e51b3008 	ldr	r3, [fp, #-8]
   1c150:	e2833038 	add	r3, r3, #56	; 0x38
   1c154:	e1a01003 	mov	r1, r3
   1c158:	e51b0008 	ldr	r0, [fp, #-8]
   1c15c:	ebffff6a 	bl	1bf0c <RDMSubDevice::SetLabel(char const*)>
   1c160:	e51b3008 	ldr	r3, [fp, #-8]
   1c164:	e1d320bc 	ldrh	r2, [r3, #12]
   1c168:	e51b3008 	ldr	r3, [fp, #-8]
   1c16c:	e1c321b2 	strh	r2, [r3, #18]
   1c170:	e51b3008 	ldr	r3, [fp, #-8]
   1c174:	e5d3200e 	ldrb	r2, [r3, #14]
   1c178:	e51b3008 	ldr	r3, [fp, #-8]
   1c17c:	e5c32014 	strb	r2, [r3, #20]
   1c180:	e51b3008 	ldr	r3, [fp, #-8]
   1c184:	e3a02001 	mov	r2, #1
   1c188:	e5c32008 	strb	r2, [r3, #8]
   1c18c:	ea000000 	b	1c194 <RDMSubDevice::SetFactoryDefaults()+0x68>
   1c190:	e1a00000 	nop			; (mov r0, r0)
   1c194:	e24bd004 	sub	sp, fp, #4
   1c198:	e8bd8800 	pop	{fp, pc}

0001c19c <RDMSubDevice::CalculateChecksum()>:
   1c19c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1c1a0:	e28db000 	add	fp, sp, #0
   1c1a4:	e24dd014 	sub	sp, sp, #20
   1c1a8:	e50b0010 	str	r0, [fp, #-16]
   1c1ac:	e51b3010 	ldr	r3, [fp, #-16]
   1c1b0:	e1d331b2 	ldrh	r3, [r3, #18]
   1c1b4:	e14b30b6 	strh	r3, [fp, #-6]
   1c1b8:	e51b3010 	ldr	r3, [fp, #-16]
   1c1bc:	e5d33014 	ldrb	r3, [r3, #20]
   1c1c0:	e6ff2073 	uxth	r2, r3
   1c1c4:	e15b30b6 	ldrh	r3, [fp, #-6]
   1c1c8:	e0823003 	add	r3, r2, r3
   1c1cc:	e14b30b6 	strh	r3, [fp, #-6]
   1c1d0:	e3a03000 	mov	r3, #0
   1c1d4:	e50b300c 	str	r3, [fp, #-12]
   1c1d8:	e51b3010 	ldr	r3, [fp, #-16]
   1c1dc:	e5d33036 	ldrb	r3, [r3, #54]	; 0x36
   1c1e0:	e1a02003 	mov	r2, r3
   1c1e4:	e51b300c 	ldr	r3, [fp, #-12]
   1c1e8:	e1530002 	cmp	r3, r2
   1c1ec:	2a00000c 	bcs	1c224 <RDMSubDevice::CalculateChecksum()+0x88>
   1c1f0:	e51b2010 	ldr	r2, [fp, #-16]
   1c1f4:	e51b300c 	ldr	r3, [fp, #-12]
   1c1f8:	e0823003 	add	r3, r2, r3
   1c1fc:	e2833016 	add	r3, r3, #22
   1c200:	e5d33000 	ldrb	r3, [r3]
   1c204:	e6ff2073 	uxth	r2, r3
   1c208:	e15b30b6 	ldrh	r3, [fp, #-6]
   1c20c:	e0823003 	add	r3, r2, r3
   1c210:	e14b30b6 	strh	r3, [fp, #-6]
   1c214:	e51b300c 	ldr	r3, [fp, #-12]
   1c218:	e2833001 	add	r3, r3, #1
   1c21c:	e50b300c 	str	r3, [fp, #-12]
   1c220:	eaffffec 	b	1c1d8 <RDMSubDevice::CalculateChecksum()+0x3c>
   1c224:	e15b30b6 	ldrh	r3, [fp, #-6]
   1c228:	e1a00003 	mov	r0, r3
   1c22c:	e28bd000 	add	sp, fp, #0
   1c230:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1c234:	e12fff1e 	bx	lr

0001c238 <RDMSubDevice::UpdateEvent(TRDMSubDeviceUpdateEvent)>:
   1c238:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1c23c:	e28db000 	add	fp, sp, #0
   1c240:	e24dd00c 	sub	sp, sp, #12
   1c244:	e50b0008 	str	r0, [fp, #-8]
   1c248:	e50b100c 	str	r1, [fp, #-12]
   1c24c:	e1a00000 	nop			; (mov r0, r0)
   1c250:	e28bd000 	add	sp, fp, #0
   1c254:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1c258:	e12fff1e 	bx	lr

0001c25c <RemoteConfigParams::Dump()>:
   1c25c:	e12fff1e 	bx	lr

0001c260 <PropertiesBuilder::Add(char const*, bool)>:
   1c260:	e3a03001 	mov	r3, #1
   1c264:	e92d4007 	push	{r0, r1, r2, lr}
   1c268:	e58d3000 	str	r3, [sp]
   1c26c:	e1a03002 	mov	r3, r2
   1c270:	eb00012f 	bl	1c734 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)>
   1c274:	e28dd00c 	add	sp, sp, #12
   1c278:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0001c27c <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)>:
   1c27c:	e92d4030 	push	{r4, r5, lr}
   1c280:	e1a0c001 	mov	ip, r1
   1c284:	e5dd5010 	ldrb	r5, [sp, #16]
   1c288:	e1a01002 	mov	r1, r2
   1c28c:	e1a0e003 	mov	lr, r3
   1c290:	e3550000 	cmp	r5, #0
   1c294:	e59d400c 	ldr	r4, [sp, #12]
   1c298:	e5d02008 	ldrb	r2, [r0, #8]
   1c29c:	1a000003 	bne	1c2b0 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x34>
   1c2a0:	e3520000 	cmp	r2, #0
   1c2a4:	1a000004 	bne	1c2bc <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x40>
   1c2a8:	e59f2024 	ldr	r2, [pc, #36]	; 1c2d4 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x58>
   1c2ac:	ea000005 	b	1c2c8 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x4c>
   1c2b0:	e3520000 	cmp	r2, #0
   1c2b4:	059f201c 	ldreq	r2, [pc, #28]	; 1c2d8 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x5c>
   1c2b8:	0a000002 	beq	1c2c8 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x4c>
   1c2bc:	e59f2018 	ldr	r2, [pc, #24]	; 1c2dc <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x60>
   1c2c0:	e1a0300e 	mov	r3, lr
   1c2c4:	e58d400c 	str	r4, [sp, #12]
   1c2c8:	e1a0000c 	mov	r0, ip
   1c2cc:	e8bd4030 	pop	{r4, r5, lr}
   1c2d0:	eaffd3e8 	b	11278 <snprintf@plt>
   1c2d4:	00045d77 	.word	0x00045d77
   1c2d8:	00045d78 	.word	0x00045d78
   1c2dc:	00045d6c 	.word	0x00045d6c

0001c2e0 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
   1c2e0:	e92d4010 	push	{r4, lr}
   1c2e4:	e3a02020 	mov	r2, #32
   1c2e8:	e1a04000 	mov	r4, r0
   1c2ec:	e4801004 	str	r1, [r0], #4
   1c2f0:	e3a01000 	mov	r1, #0
   1c2f4:	ebffd3dc 	bl	1126c <memset@plt>
   1c2f8:	e1a00004 	mov	r0, r4
   1c2fc:	e8bd8010 	pop	{r4, pc}

0001c300 <RemoteConfigParams::Load()>:
   1c300:	e3a03000 	mov	r3, #0
   1c304:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
   1c308:	e1a02000 	mov	r2, r0
   1c30c:	e5803004 	str	r3, [r0, #4]
   1c310:	e1a04000 	mov	r4, r0
   1c314:	e59f1068 	ldr	r1, [pc, #104]	; 1c384 <RemoteConfigParams::Load()+0x84>
   1c318:	e1a0000d 	mov	r0, sp
   1c31c:	eb007f25 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   1c320:	e59f1060 	ldr	r1, [pc, #96]	; 1c388 <RemoteConfigParams::Load()+0x88>
   1c324:	e1a0000d 	mov	r0, sp
   1c328:	eb007f42 	bl	3c038 <ReadConfigFile::Read(char const*)>
   1c32c:	e2505000 	subs	r5, r0, #0
   1c330:	e5940000 	ldr	r0, [r4]
   1c334:	0a00000a 	beq	1c364 <RemoteConfigParams::Load()+0x64>
   1c338:	e3500000 	cmp	r0, #0
   1c33c:	0a000003 	beq	1c350 <RemoteConfigParams::Load()+0x50>
   1c340:	e5903000 	ldr	r3, [r0]
   1c344:	e2841004 	add	r1, r4, #4
   1c348:	e5933008 	ldr	r3, [r3, #8]
   1c34c:	e12fff33 	blx	r3
   1c350:	e1a0000d 	mov	r0, sp
   1c354:	eb007f28 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   1c358:	e1a00005 	mov	r0, r5
   1c35c:	e28dd00c 	add	sp, sp, #12
   1c360:	e8bd8030 	pop	{r4, r5, pc}
   1c364:	e3500000 	cmp	r0, #0
   1c368:	0afffff8 	beq	1c350 <RemoteConfigParams::Load()+0x50>
   1c36c:	e5903000 	ldr	r3, [r0]
   1c370:	e2841004 	add	r1, r4, #4
   1c374:	e3a05001 	mov	r5, #1
   1c378:	e593300c 	ldr	r3, [r3, #12]
   1c37c:	e12fff33 	blx	r3
   1c380:	eafffff2 	b	1c350 <RemoteConfigParams::Load()+0x50>
   1c384:	0001c730 	.word	0x0001c730
   1c388:	00046268 	.word	0x00046268

0001c38c <RemoteConfigParams::Load(char const*, unsigned int)>:
   1c38c:	e3a03000 	mov	r3, #0
   1c390:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   1c394:	e1a04000 	mov	r4, r0
   1c398:	e5803004 	str	r3, [r0, #4]
   1c39c:	e1a05001 	mov	r5, r1
   1c3a0:	e1a06002 	mov	r6, r2
   1c3a4:	e59f103c 	ldr	r1, [pc, #60]	; 1c3e8 <RemoteConfigParams::Load(char const*, unsigned int)+0x5c>
   1c3a8:	e1a02000 	mov	r2, r0
   1c3ac:	e1a0000d 	mov	r0, sp
   1c3b0:	eb007f00 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   1c3b4:	e1a02006 	mov	r2, r6
   1c3b8:	e1a01005 	mov	r1, r5
   1c3bc:	e1a0000d 	mov	r0, sp
   1c3c0:	eb007f67 	bl	3c164 <ReadConfigFile::Read(char const*, unsigned int)>
   1c3c4:	e1a01004 	mov	r1, r4
   1c3c8:	e4910004 	ldr	r0, [r1], #4
   1c3cc:	e5903000 	ldr	r3, [r0]
   1c3d0:	e5933008 	ldr	r3, [r3, #8]
   1c3d4:	e12fff33 	blx	r3
   1c3d8:	e1a0000d 	mov	r0, sp
   1c3dc:	eb007f06 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   1c3e0:	e28dd008 	add	sp, sp, #8
   1c3e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c3e8:	0001c730 	.word	0x0001c730

0001c3ec <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
   1c3ec:	e5903004 	ldr	r3, [r0, #4]
   1c3f0:	e3510000 	cmp	r1, #0
   1c3f4:	11833002 	orrne	r3, r3, r2
   1c3f8:	01c33002 	biceq	r3, r3, r2
   1c3fc:	e5803004 	str	r3, [r0, #4]
   1c400:	e12fff1e 	bx	lr

0001c404 <RemoteConfigParams::callbackFunction(char const*)>:
   1c404:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
   1c408:	e1a05001 	mov	r5, r1
   1c40c:	e28d2003 	add	r2, sp, #3
   1c410:	e1a04000 	mov	r4, r0
   1c414:	e59f10d4 	ldr	r1, [pc, #212]	; 1c4f0 <RemoteConfigParams::callbackFunction(char const*)+0xec>
   1c418:	e1a00005 	mov	r0, r5
   1c41c:	eb007e08 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   1c420:	e3500000 	cmp	r0, #0
   1c424:	03a02001 	moveq	r2, #1
   1c428:	0a000006 	beq	1c448 <RemoteConfigParams::callbackFunction(char const*)+0x44>
   1c42c:	e28d2003 	add	r2, sp, #3
   1c430:	e59f10bc 	ldr	r1, [pc, #188]	; 1c4f4 <RemoteConfigParams::callbackFunction(char const*)+0xf0>
   1c434:	e1a00005 	mov	r0, r5
   1c438:	eb007e01 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   1c43c:	e3500000 	cmp	r0, #0
   1c440:	1a000005 	bne	1c45c <RemoteConfigParams::callbackFunction(char const*)+0x58>
   1c444:	e3a02002 	mov	r2, #2
   1c448:	e5dd1003 	ldrb	r1, [sp, #3]
   1c44c:	e1a00004 	mov	r0, r4
   1c450:	ebffffe5 	bl	1c3ec <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
   1c454:	e28dd00c 	add	sp, sp, #12
   1c458:	e8bd8030 	pop	{r4, r5, pc}
   1c45c:	e28d2003 	add	r2, sp, #3
   1c460:	e59f1090 	ldr	r1, [pc, #144]	; 1c4f8 <RemoteConfigParams::callbackFunction(char const*)+0xf4>
   1c464:	e1a00005 	mov	r0, r5
   1c468:	eb007df5 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   1c46c:	e3500000 	cmp	r0, #0
   1c470:	03a02004 	moveq	r2, #4
   1c474:	0afffff3 	beq	1c448 <RemoteConfigParams::callbackFunction(char const*)+0x44>
   1c478:	e28d2003 	add	r2, sp, #3
   1c47c:	e59f1078 	ldr	r1, [pc, #120]	; 1c4fc <RemoteConfigParams::callbackFunction(char const*)+0xf8>
   1c480:	e1a00005 	mov	r0, r5
   1c484:	eb007dee 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   1c488:	e3500000 	cmp	r0, #0
   1c48c:	03a02008 	moveq	r2, #8
   1c490:	0affffec 	beq	1c448 <RemoteConfigParams::callbackFunction(char const*)+0x44>
   1c494:	e28d2003 	add	r2, sp, #3
   1c498:	e59f1060 	ldr	r1, [pc, #96]	; 1c500 <RemoteConfigParams::callbackFunction(char const*)+0xfc>
   1c49c:	e1a00005 	mov	r0, r5
   1c4a0:	eb007de7 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   1c4a4:	e3500000 	cmp	r0, #0
   1c4a8:	03a02020 	moveq	r2, #32
   1c4ac:	0affffe5 	beq	1c448 <RemoteConfigParams::callbackFunction(char const*)+0x44>
   1c4b0:	e3a03017 	mov	r3, #23
   1c4b4:	e58d3004 	str	r3, [sp, #4]
   1c4b8:	e284200c 	add	r2, r4, #12
   1c4bc:	e28d3004 	add	r3, sp, #4
   1c4c0:	e59f103c 	ldr	r1, [pc, #60]	; 1c504 <RemoteConfigParams::callbackFunction(char const*)+0x100>
   1c4c4:	e1a00005 	mov	r0, r5
   1c4c8:	eb007c49 	bl	3b5f4 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
   1c4cc:	e3500000 	cmp	r0, #0
   1c4d0:	1affffdf 	bne	1c454 <RemoteConfigParams::callbackFunction(char const*)+0x50>
   1c4d4:	e59d3004 	ldr	r3, [sp, #4]
   1c4d8:	e0843003 	add	r3, r4, r3
   1c4dc:	e5c3000c 	strb	r0, [r3, #12]
   1c4e0:	e5943004 	ldr	r3, [r4, #4]
   1c4e4:	e3833010 	orr	r3, r3, #16
   1c4e8:	e5843004 	str	r3, [r4, #4]
   1c4ec:	eaffffd8 	b	1c454 <RemoteConfigParams::callbackFunction(char const*)+0x50>
   1c4f0:	00046274 	.word	0x00046274
   1c4f4:	0004627c 	.word	0x0004627c
   1c4f8:	0004628c 	.word	0x0004628c
   1c4fc:	0004629c 	.word	0x0004629c
   1c500:	000462ac 	.word	0x000462ac
   1c504:	000462bc 	.word	0x000462bc

0001c508 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
   1c508:	e3510000 	cmp	r1, #0
   1c50c:	e92d4070 	push	{r4, r5, r6, lr}
   1c510:	e280c004 	add	ip, r0, #4
   1c514:	e24dd018 	sub	sp, sp, #24
   1c518:	e1a04000 	mov	r4, r0
   1c51c:	e1a05002 	mov	r5, r2
   1c520:	e1a06003 	mov	r6, r3
   1c524:	0a00003c 	beq	1c61c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>
   1c528:	e2813020 	add	r3, r1, #32
   1c52c:	e4912004 	ldr	r2, [r1], #4
   1c530:	e1510003 	cmp	r1, r3
   1c534:	e48c2004 	str	r2, [ip], #4
   1c538:	1afffffb 	bne	1c52c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x24>
   1c53c:	e1a03006 	mov	r3, r6
   1c540:	e1a02005 	mov	r2, r5
   1c544:	e59f10e8 	ldr	r1, [pc, #232]	; 1c634 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x12c>
   1c548:	e28d000c 	add	r0, sp, #12
   1c54c:	eb007dd4 	bl	3bca4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
   1c550:	e5940004 	ldr	r0, [r4, #4]
   1c554:	e3a01001 	mov	r1, #1
   1c558:	eb0000cc 	bl	1c890 <RemoteConfigParams::isMaskSet(unsigned int) const [clone .isra.4]>
   1c55c:	e59f10d4 	ldr	r1, [pc, #212]	; 1c638 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x130>
   1c560:	e1a02000 	mov	r2, r0
   1c564:	e28d000c 	add	r0, sp, #12
   1c568:	ebffff3c 	bl	1c260 <PropertiesBuilder::Add(char const*, bool)>
   1c56c:	e5940004 	ldr	r0, [r4, #4]
   1c570:	e3a01002 	mov	r1, #2
   1c574:	eb0000c5 	bl	1c890 <RemoteConfigParams::isMaskSet(unsigned int) const [clone .isra.4]>
   1c578:	e59f10bc 	ldr	r1, [pc, #188]	; 1c63c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x134>
   1c57c:	e1a02000 	mov	r2, r0
   1c580:	e28d000c 	add	r0, sp, #12
   1c584:	ebffff35 	bl	1c260 <PropertiesBuilder::Add(char const*, bool)>
   1c588:	e5940004 	ldr	r0, [r4, #4]
   1c58c:	e3a01004 	mov	r1, #4
   1c590:	eb0000be 	bl	1c890 <RemoteConfigParams::isMaskSet(unsigned int) const [clone .isra.4]>
   1c594:	e59f10a4 	ldr	r1, [pc, #164]	; 1c640 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x138>
   1c598:	e1a02000 	mov	r2, r0
   1c59c:	e28d000c 	add	r0, sp, #12
   1c5a0:	ebffff2e 	bl	1c260 <PropertiesBuilder::Add(char const*, bool)>
   1c5a4:	e5940004 	ldr	r0, [r4, #4]
   1c5a8:	e3a01008 	mov	r1, #8
   1c5ac:	eb0000b7 	bl	1c890 <RemoteConfigParams::isMaskSet(unsigned int) const [clone .isra.4]>
   1c5b0:	e59f108c 	ldr	r1, [pc, #140]	; 1c644 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x13c>
   1c5b4:	e1a02000 	mov	r2, r0
   1c5b8:	e28d000c 	add	r0, sp, #12
   1c5bc:	ebffff27 	bl	1c260 <PropertiesBuilder::Add(char const*, bool)>
   1c5c0:	e5940004 	ldr	r0, [r4, #4]
   1c5c4:	e3a01020 	mov	r1, #32
   1c5c8:	eb0000b0 	bl	1c890 <RemoteConfigParams::isMaskSet(unsigned int) const [clone .isra.4]>
   1c5cc:	e59f1074 	ldr	r1, [pc, #116]	; 1c648 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x140>
   1c5d0:	e1a02000 	mov	r2, r0
   1c5d4:	e28d000c 	add	r0, sp, #12
   1c5d8:	ebffff20 	bl	1c260 <PropertiesBuilder::Add(char const*, bool)>
   1c5dc:	e5940004 	ldr	r0, [r4, #4]
   1c5e0:	e3a01010 	mov	r1, #16
   1c5e4:	eb0000a9 	bl	1c890 <RemoteConfigParams::isMaskSet(unsigned int) const [clone .isra.4]>
   1c5e8:	e3a03001 	mov	r3, #1
   1c5ec:	e58d3000 	str	r3, [sp]
   1c5f0:	e284200c 	add	r2, r4, #12
   1c5f4:	e59f1050 	ldr	r1, [pc, #80]	; 1c64c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x144>
   1c5f8:	e1a03000 	mov	r3, r0
   1c5fc:	e28d000c 	add	r0, sp, #12
   1c600:	eb000065 	bl	1c79c <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)>
   1c604:	e28d000c 	add	r0, sp, #12
   1c608:	ebffe030 	bl	146d0 <PropertiesBuilder::GetSize()>
   1c60c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1c610:	e5830000 	str	r0, [r3]
   1c614:	e28dd018 	add	sp, sp, #24
   1c618:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c61c:	e5900000 	ldr	r0, [r0]
   1c620:	e1a0100c 	mov	r1, ip
   1c624:	e5903000 	ldr	r3, [r0]
   1c628:	e593300c 	ldr	r3, [r3, #12]
   1c62c:	e12fff33 	blx	r3
   1c630:	eaffffc1 	b	1c53c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x34>
   1c634:	00046268 	.word	0x00046268
   1c638:	00046274 	.word	0x00046274
   1c63c:	0004627c 	.word	0x0004627c
   1c640:	0004628c 	.word	0x0004628c
   1c644:	0004629c 	.word	0x0004629c
   1c648:	000462ac 	.word	0x000462ac
   1c64c:	000462bc 	.word	0x000462bc

0001c650 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
   1c650:	e590c000 	ldr	ip, [r0]
   1c654:	e35c0000 	cmp	ip, #0
   1c658:	1a000001 	bne	1c664 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x14>
   1c65c:	e583c000 	str	ip, [r3]
   1c660:	e12fff1e 	bx	lr
   1c664:	e1a0c003 	mov	ip, r3
   1c668:	e92d4007 	push	{r0, r1, r2, lr}
   1c66c:	e1a03002 	mov	r3, r2
   1c670:	e58dc000 	str	ip, [sp]
   1c674:	e1a02001 	mov	r2, r1
   1c678:	e3a01000 	mov	r1, #0
   1c67c:	ebffffa1 	bl	1c508 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
   1c680:	e28dd00c 	add	sp, sp, #12
   1c684:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0001c688 <RemoteConfigParams::Set(RemoteConfig*)>:
   1c688:	e92d4070 	push	{r4, r5, r6, lr}
   1c68c:	e1a04000 	mov	r4, r0
   1c690:	e1a05001 	mov	r5, r1
   1c694:	e5900004 	ldr	r0, [r0, #4]
   1c698:	e3a01001 	mov	r1, #1
   1c69c:	eb00007b 	bl	1c890 <RemoteConfigParams::isMaskSet(unsigned int) const [clone .isra.4]>
   1c6a0:	e1a01000 	mov	r1, r0
   1c6a4:	e1a00005 	mov	r0, r5
   1c6a8:	eb0000e4 	bl	1ca40 <RemoteConfig::SetDisable(bool)>
   1c6ac:	e3a01002 	mov	r1, #2
   1c6b0:	e5940004 	ldr	r0, [r4, #4]
   1c6b4:	eb000075 	bl	1c890 <RemoteConfigParams::isMaskSet(unsigned int) const [clone .isra.4]>
   1c6b8:	e1a01000 	mov	r1, r0
   1c6bc:	e285000d 	add	r0, r5, #13
   1c6c0:	eb00006a 	bl	1c870 <RemoteConfig::SetDisableWrite(bool) [clone .isra.0]>
   1c6c4:	e3a01004 	mov	r1, #4
   1c6c8:	e5940004 	ldr	r0, [r4, #4]
   1c6cc:	eb00006f 	bl	1c890 <RemoteConfigParams::isMaskSet(unsigned int) const [clone .isra.4]>
   1c6d0:	e1a01000 	mov	r1, r0
   1c6d4:	e285000e 	add	r0, r5, #14
   1c6d8:	eb000066 	bl	1c878 <RemoteConfig::SetEnableReboot(bool) [clone .isra.1]>
   1c6dc:	e3a01008 	mov	r1, #8
   1c6e0:	e5940004 	ldr	r0, [r4, #4]
   1c6e4:	eb000069 	bl	1c890 <RemoteConfigParams::isMaskSet(unsigned int) const [clone .isra.4]>
   1c6e8:	e1a01000 	mov	r1, r0
   1c6ec:	e285000f 	add	r0, r5, #15
   1c6f0:	eb000062 	bl	1c880 <RemoteConfig::SetEnableUptime(bool) [clone .isra.2]>
   1c6f4:	e3a01020 	mov	r1, #32
   1c6f8:	e5940004 	ldr	r0, [r4, #4]
   1c6fc:	eb000063 	bl	1c890 <RemoteConfigParams::isMaskSet(unsigned int) const [clone .isra.4]>
   1c700:	e1a01000 	mov	r1, r0
   1c704:	e2850010 	add	r0, r5, #16
   1c708:	eb00005e 	bl	1c888 <RemoteConfig::SetEnableFactory(bool) [clone .isra.3]>
   1c70c:	e3a01010 	mov	r1, #16
   1c710:	e5940004 	ldr	r0, [r4, #4]
   1c714:	eb00005d 	bl	1c890 <RemoteConfigParams::isMaskSet(unsigned int) const [clone .isra.4]>
   1c718:	e3500000 	cmp	r0, #0
   1c71c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1c720:	e284100c 	add	r1, r4, #12
   1c724:	e1a00005 	mov	r0, r5
   1c728:	e8bd4070 	pop	{r4, r5, r6, lr}
   1c72c:	ea0000db 	b	1caa0 <RemoteConfig::SetDisplayName(char const*)>

0001c730 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
   1c730:	eaffff33 	b	1c404 <RemoteConfigParams::callbackFunction(char const*)>

0001c734 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)>:
   1c734:	e92d407f 	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1c738:	e1d0e0b6 	ldrh	lr, [r0, #6]
   1c73c:	e1d050b4 	ldrh	r5, [r0, #4]
   1c740:	e15e0005 	cmp	lr, r5
   1c744:	3a000002 	bcc	1c754 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x20>
   1c748:	e3a00000 	mov	r0, #0
   1c74c:	e28dd010 	add	sp, sp, #16
   1c750:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c754:	e1a0c003 	mov	ip, r3
   1c758:	e59d6020 	ldr	r6, [sp, #32]
   1c75c:	e1a03001 	mov	r3, r1
   1c760:	e5901000 	ldr	r1, [r0]
   1c764:	e045500e 	sub	r5, r5, lr
   1c768:	e88d1004 	stm	sp, {r2, ip}
   1c76c:	e58d6008 	str	r6, [sp, #8]
   1c770:	e1a02005 	mov	r2, r5
   1c774:	e081100e 	add	r1, r1, lr
   1c778:	e1a04000 	mov	r4, r0
   1c77c:	eb000020 	bl	1c804 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)>
   1c780:	e1550000 	cmp	r5, r0
   1c784:	baffffef 	blt	1c748 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x14>
   1c788:	e1d430b6 	ldrh	r3, [r4, #6]
   1c78c:	e0833000 	add	r3, r3, r0
   1c790:	e1c430b6 	strh	r3, [r4, #6]
   1c794:	e3a00001 	mov	r0, #1
   1c798:	eaffffeb 	b	1c74c <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x18>

0001c79c <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)>:
   1c79c:	e92d407f 	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1c7a0:	e1d0e0b6 	ldrh	lr, [r0, #6]
   1c7a4:	e1d050b4 	ldrh	r5, [r0, #4]
   1c7a8:	e15e0005 	cmp	lr, r5
   1c7ac:	3a000002 	bcc	1c7bc <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x20>
   1c7b0:	e3a00000 	mov	r0, #0
   1c7b4:	e28dd010 	add	sp, sp, #16
   1c7b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c7bc:	e1a0c003 	mov	ip, r3
   1c7c0:	e59d6020 	ldr	r6, [sp, #32]
   1c7c4:	e1a03001 	mov	r3, r1
   1c7c8:	e5901000 	ldr	r1, [r0]
   1c7cc:	e045500e 	sub	r5, r5, lr
   1c7d0:	e88d1004 	stm	sp, {r2, ip}
   1c7d4:	e58d6008 	str	r6, [sp, #8]
   1c7d8:	e1a02005 	mov	r2, r5
   1c7dc:	e081100e 	add	r1, r1, lr
   1c7e0:	e1a04000 	mov	r4, r0
   1c7e4:	ebfffea4 	bl	1c27c <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)>
   1c7e8:	e1550000 	cmp	r5, r0
   1c7ec:	baffffef 	blt	1c7b0 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x14>
   1c7f0:	e1d430b6 	ldrh	r3, [r4, #6]
   1c7f4:	e0833000 	add	r3, r3, r0
   1c7f8:	e1c430b6 	strh	r3, [r4, #6]
   1c7fc:	e3a00001 	mov	r0, #1
   1c800:	eaffffeb 	b	1c7b4 <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)+0x18>

0001c804 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)>:
   1c804:	e92d4010 	push	{r4, lr}
   1c808:	e1a0c001 	mov	ip, r1
   1c80c:	e5dd400c 	ldrb	r4, [sp, #12]
   1c810:	e1a01002 	mov	r1, r2
   1c814:	e1a0e003 	mov	lr, r3
   1c818:	e3540000 	cmp	r4, #0
   1c81c:	e5dd2008 	ldrb	r2, [sp, #8]
   1c820:	e5d00008 	ldrb	r0, [r0, #8]
   1c824:	1a000004 	bne	1c83c <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x38>
   1c828:	e3500000 	cmp	r0, #0
   1c82c:	1a000006 	bne	1c84c <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x48>
   1c830:	e58d2008 	str	r2, [sp, #8]
   1c834:	e59f2028 	ldr	r2, [pc, #40]	; 1c864 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x60>
   1c838:	ea000006 	b	1c858 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x54>
   1c83c:	e3500000 	cmp	r0, #0
   1c840:	058d2008 	streq	r2, [sp, #8]
   1c844:	059f201c 	ldreq	r2, [pc, #28]	; 1c868 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x64>
   1c848:	0a000002 	beq	1c858 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x54>
   1c84c:	e58d2008 	str	r2, [sp, #8]
   1c850:	e59f2014 	ldr	r2, [pc, #20]	; 1c86c <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x68>
   1c854:	e1a0300e 	mov	r3, lr
   1c858:	e1a0000c 	mov	r0, ip
   1c85c:	e8bd4010 	pop	{r4, lr}
   1c860:	eaffd284 	b	11278 <snprintf@plt>
   1c864:	00045d88 	.word	0x00045d88
   1c868:	00047f40 	.word	0x00047f40
   1c86c:	00045d7f 	.word	0x00045d7f

0001c870 <RemoteConfig::SetDisableWrite(bool) [clone .isra.0]>:
   1c870:	e5c01000 	strb	r1, [r0]
   1c874:	e12fff1e 	bx	lr

0001c878 <RemoteConfig::SetEnableReboot(bool) [clone .isra.1]>:
   1c878:	e5c01000 	strb	r1, [r0]
   1c87c:	e12fff1e 	bx	lr

0001c880 <RemoteConfig::SetEnableUptime(bool) [clone .isra.2]>:
   1c880:	e5c01000 	strb	r1, [r0]
   1c884:	e12fff1e 	bx	lr

0001c888 <RemoteConfig::SetEnableFactory(bool) [clone .isra.3]>:
   1c888:	e5c01000 	strb	r1, [r0]
   1c88c:	e12fff1e 	bx	lr

0001c890 <RemoteConfigParams::isMaskSet(unsigned int) const [clone .isra.4]>:
   1c890:	e1d13000 	bics	r3, r1, r0
   1c894:	03a00001 	moveq	r0, #1
   1c898:	13a00000 	movne	r0, #0
   1c89c:	e12fff1e 	bx	lr

0001c8a0 <RemoteConfig::HandleGetNoParams()>:
   1c8a0:	e3a02000 	mov	r2, #0
   1c8a4:	e1a01002 	mov	r1, r2
   1c8a8:	ea0001c5 	b	1cfc4 <RemoteConfig::HandleGet(void*, unsigned int)>

0001c8ac <PropertiesConfig::IsJSON()>:
   1c8ac:	e3a00001 	mov	r0, #1
   1c8b0:	eaffffff 	b	1c8b4 <PropertiesConfig::isMaskSet(unsigned char)>

0001c8b4 <PropertiesConfig::isMaskSet(unsigned char)>:
   1c8b4:	e59f3010 	ldr	r3, [pc, #16]	; 1c8cc <PropertiesConfig::isMaskSet(unsigned char)+0x18>
   1c8b8:	e5d33000 	ldrb	r3, [r3]
   1c8bc:	e1d03003 	bics	r3, r0, r3
   1c8c0:	03a00001 	moveq	r0, #1
   1c8c4:	13a00000 	movne	r0, #0
   1c8c8:	e12fff1e 	bx	lr
   1c8cc:	0005f37c 	.word	0x0005f37c

0001c8d0 <StoreRemoteConfig::Get()>:
   1c8d0:	e59f3004 	ldr	r3, [pc, #4]	; 1c8dc <StoreRemoteConfig::Get()+0xc>
   1c8d4:	e5930000 	ldr	r0, [r3]
   1c8d8:	e12fff1e 	bx	lr
   1c8dc:	0005dc18 	.word	0x0005dc18

0001c8e0 <StoreDisplayUdf::Get()>:
   1c8e0:	e59f3004 	ldr	r3, [pc, #4]	; 1c8ec <StoreDisplayUdf::Get()+0xc>
   1c8e4:	e5930000 	ldr	r0, [r3]
   1c8e8:	e12fff1e 	bx	lr
   1c8ec:	0005dc20 	.word	0x0005dc20

0001c8f0 <StoreArtNet::Get()>:
   1c8f0:	e59f3004 	ldr	r3, [pc, #4]	; 1c8fc <StoreArtNet::Get()+0xc>
   1c8f4:	e5930000 	ldr	r0, [r3]
   1c8f8:	e12fff1e 	bx	lr
   1c8fc:	0005ec50 	.word	0x0005ec50

0001c900 <StoreE131::Get()>:
   1c900:	e59f3004 	ldr	r3, [pc, #4]	; 1c90c <StoreE131::Get()+0xc>
   1c904:	e5930000 	ldr	r0, [r3]
   1c908:	e12fff1e 	bx	lr
   1c90c:	0005ec5c 	.word	0x0005ec5c

0001c910 <StoreTLC59711::Get()>:
   1c910:	e59f3004 	ldr	r3, [pc, #4]	; 1c91c <StoreTLC59711::Get()+0xc>
   1c914:	e5930000 	ldr	r0, [r3]
   1c918:	e12fff1e 	bx	lr
   1c91c:	0005dc1c 	.word	0x0005dc1c

0001c920 <StoreSparkFunDmx::Get()>:
   1c920:	e59f3004 	ldr	r3, [pc, #4]	; 1c92c <StoreSparkFunDmx::Get()+0xc>
   1c924:	e5930000 	ldr	r0, [r3]
   1c928:	e12fff1e 	bx	lr
   1c92c:	0005ec60 	.word	0x0005ec60

0001c930 <StoreMotors::Get()>:
   1c930:	e59f3004 	ldr	r3, [pc, #4]	; 1c93c <StoreMotors::Get()+0xc>
   1c934:	e5930000 	ldr	r0, [r3]
   1c938:	e12fff1e 	bx	lr
   1c93c:	0005ec64 	.word	0x0005ec64

0001c940 <StoreRDMDevice::Get()>:
   1c940:	e59f3004 	ldr	r3, [pc, #4]	; 1c94c <StoreRDMDevice::Get()+0xc>
   1c944:	e5930000 	ldr	r0, [r3]
   1c948:	e12fff1e 	bx	lr
   1c94c:	0005ec54 	.word	0x0005ec54

0001c950 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
   1c950:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c954:	e1a04000 	mov	r4, r0
   1c958:	e1a07003 	mov	r7, r3
   1c95c:	e5843008 	str	r3, [r4, #8]
   1c960:	e3e03000 	mvn	r3, #0
   1c964:	e5842004 	str	r2, [r4, #4]
   1c968:	e5841000 	str	r1, [r4]
   1c96c:	e5803014 	str	r3, [r0, #20]
   1c970:	e59f305c 	ldr	r3, [pc, #92]	; 1c9d4 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x84>
   1c974:	e3a05000 	mov	r5, #0
   1c978:	e59f6058 	ldr	r6, [pc, #88]	; 1c9d8 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x88>
   1c97c:	e580500c 	str	r5, [r0, #12]
   1c980:	e1c051b0 	strh	r5, [r0, #16]
   1c984:	e5805018 	str	r5, [r0, #24]
   1c988:	e580501c 	str	r5, [r0, #28]
   1c98c:	e5805020 	str	r5, [r0, #32]
   1c990:	e5c05024 	strb	r5, [r0, #36]	; 0x24
   1c994:	e1a08002 	mov	r8, r2
   1c998:	e5830000 	str	r0, [r3]
   1c99c:	e1a09001 	mov	r9, r1
   1c9a0:	ebffef50 	bl	186e8 <Network::Get()>
   1c9a4:	e1a01006 	mov	r1, r6
   1c9a8:	eb00661b 	bl	3621c <Network::MacAddressCopyTo(unsigned char*)>
   1c9ac:	e5c69006 	strb	r9, [r6, #6]
   1c9b0:	e5c68007 	strb	r8, [r6, #7]
   1c9b4:	e5c67008 	strb	r7, [r6, #8]
   1c9b8:	e5c65009 	strb	r5, [r6, #9]
   1c9bc:	ebffef49 	bl	186e8 <Network::Get()>
   1c9c0:	e59f1014 	ldr	r1, [pc, #20]	; 1c9dc <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x8c>
   1c9c4:	eb00653a 	bl	35eb4 <Network::Begin(unsigned short)>
   1c9c8:	e5840014 	str	r0, [r4, #20]
   1c9cc:	e1a00004 	mov	r0, r4
   1c9d0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c9d4:	0005c3bc 	.word	0x0005c3bc
   1c9d8:	0005c3c0 	.word	0x0005c3c0
   1c9dc:	00002905 	.word	0x00002905

0001c9e0 <RemoteConfig::~RemoteConfig()>:
   1c9e0:	e92d4010 	push	{r4, lr}
   1c9e4:	e1a04000 	mov	r4, r0
   1c9e8:	ebffef3e 	bl	186e8 <Network::Get()>
   1c9ec:	e59f1008 	ldr	r1, [pc, #8]	; 1c9fc <RemoteConfig::~RemoteConfig()+0x1c>
   1c9f0:	eb006624 	bl	36288 <Network::End(unsigned short)>
   1c9f4:	e1a00004 	mov	r0, r4
   1c9f8:	e8bd8010 	pop	{r4, pc}
   1c9fc:	00002905 	.word	0x00002905

0001ca00 <RemoteConfig::GetStringNode() const>:
   1ca00:	e59f3010 	ldr	r3, [pc, #16]	; 1ca18 <RemoteConfig::GetStringNode() const+0x18>
   1ca04:	e5d30006 	ldrb	r0, [r3, #6]
   1ca08:	e59f300c 	ldr	r3, [pc, #12]	; 1ca1c <RemoteConfig::GetStringNode() const+0x1c>
   1ca0c:	e0800180 	add	r0, r0, r0, lsl #3
   1ca10:	e0830080 	add	r0, r3, r0, lsl #1
   1ca14:	e12fff1e 	bx	lr
   1ca18:	0005c3c0 	.word	0x0005c3c0
   1ca1c:	00045ff4 	.word	0x00045ff4

0001ca20 <RemoteConfig::GetStringOutput() const>:
   1ca20:	e59f3010 	ldr	r3, [pc, #16]	; 1ca38 <RemoteConfig::GetStringOutput() const+0x18>
   1ca24:	e5d30007 	ldrb	r0, [r3, #7]
   1ca28:	e59f300c 	ldr	r3, [pc, #12]	; 1ca3c <RemoteConfig::GetStringOutput() const+0x1c>
   1ca2c:	e0800080 	add	r0, r0, r0, lsl #1
   1ca30:	e0830100 	add	r0, r3, r0, lsl #2
   1ca34:	e12fff1e 	bx	lr
   1ca38:	0005c3c0 	.word	0x0005c3c0
   1ca3c:	000460cc 	.word	0x000460cc

0001ca40 <RemoteConfig::SetDisable(bool)>:
   1ca40:	e92d4070 	push	{r4, r5, r6, lr}
   1ca44:	e2515000 	subs	r5, r1, #0
   1ca48:	e1a04000 	mov	r4, r0
   1ca4c:	e5d0300c 	ldrb	r3, [r0, #12]
   1ca50:	0a000009 	beq	1ca7c <RemoteConfig::SetDisable(bool)+0x3c>
   1ca54:	e3530000 	cmp	r3, #0
   1ca58:	18bd8070 	popne	{r4, r5, r6, pc}
   1ca5c:	ebffef21 	bl	186e8 <Network::Get()>
   1ca60:	e59f1034 	ldr	r1, [pc, #52]	; 1ca9c <RemoteConfig::SetDisable(bool)+0x5c>
   1ca64:	eb006607 	bl	36288 <Network::End(unsigned short)>
   1ca68:	e3e03000 	mvn	r3, #0
   1ca6c:	e5843014 	str	r3, [r4, #20]
   1ca70:	e3a03001 	mov	r3, #1
   1ca74:	e5c4300c 	strb	r3, [r4, #12]
   1ca78:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ca7c:	e3530000 	cmp	r3, #0
   1ca80:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ca84:	ebffef17 	bl	186e8 <Network::Get()>
   1ca88:	e59f100c 	ldr	r1, [pc, #12]	; 1ca9c <RemoteConfig::SetDisable(bool)+0x5c>
   1ca8c:	eb006508 	bl	35eb4 <Network::Begin(unsigned short)>
   1ca90:	e5c4500c 	strb	r5, [r4, #12]
   1ca94:	e5840014 	str	r0, [r4, #20]
   1ca98:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ca9c:	00002905 	.word	0x00002905

0001caa0 <RemoteConfig::SetDisplayName(char const*)>:
   1caa0:	e59f3018 	ldr	r3, [pc, #24]	; 1cac0 <RemoteConfig::SetDisplayName(char const*)+0x20>
   1caa4:	e3a02017 	mov	r2, #23
   1caa8:	e92d4010 	push	{r4, lr}
   1caac:	e1a00003 	mov	r0, r3
   1cab0:	ebffd27a 	bl	114a0 <strncpy@plt>
   1cab4:	e3a02000 	mov	r2, #0
   1cab8:	e5c02017 	strb	r2, [r0, #23]
   1cabc:	e8bd8010 	pop	{r4, pc}
   1cac0:	0005c3c9 	.word	0x0005c3c9

0001cac4 <RemoteConfig::Run()>:
   1cac4:	e5d0300c 	ldrb	r3, [r0, #12]
   1cac8:	e3530000 	cmp	r3, #0
   1cacc:	112fff1e 	bxne	lr
   1cad0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1cad4:	e1a04000 	mov	r4, r0
   1cad8:	e5900020 	ldr	r0, [r0, #32]
   1cadc:	e24dd014 	sub	sp, sp, #20
   1cae0:	e3500000 	cmp	r0, #0
   1cae4:	0a000000 	beq	1caec <RemoteConfig::Run()+0x28>
   1cae8:	eb006a2e 	bl	373a8 <TFTPDaemon::Run()>
   1caec:	e59f51a8 	ldr	r5, [pc, #424]	; 1cc9c <RemoteConfig::Run()+0x1d8>
   1caf0:	ebffeefc 	bl	186e8 <Network::Get()>
   1caf4:	e28d300e 	add	r3, sp, #14
   1caf8:	e58d3000 	str	r3, [sp]
   1cafc:	e1a02005 	mov	r2, r5
   1cb00:	e2843018 	add	r3, r4, #24
   1cb04:	e5941014 	ldr	r1, [r4, #20]
   1cb08:	eb00671c 	bl	36780 <Network::RecvFrom(int, void const**, unsigned int*, unsigned short*)>
   1cb0c:	e3500003 	cmp	r0, #3
   1cb10:	e584001c 	str	r0, [r4, #28]
   1cb14:	9a000038 	bls	1cbfc <RemoteConfig::Run()+0x138>
   1cb18:	e5953000 	ldr	r3, [r5]
   1cb1c:	e2400001 	sub	r0, r0, #1
   1cb20:	e7d32000 	ldrb	r2, [r3, r0]
   1cb24:	e352000a 	cmp	r2, #10
   1cb28:	0584001c 	streq	r0, [r4, #28]
   1cb2c:	e5d31000 	ldrb	r1, [r3]
   1cb30:	e351003f 	cmp	r1, #63	; 0x3f
   1cb34:	1a000028 	bne	1cbdc <RemoteConfig::Run()+0x118>
   1cb38:	e59f6160 	ldr	r6, [pc, #352]	; 1cca0 <RemoteConfig::Run()+0x1dc>
   1cb3c:	e594801c 	ldr	r8, [r4, #28]
   1cb40:	e3a07000 	mov	r7, #0
   1cb44:	e1a09006 	mov	r9, r6
   1cb48:	e2835001 	add	r5, r3, #1
   1cb4c:	e2488001 	sub	r8, r8, #1
   1cb50:	e584801c 	str	r8, [r4, #28]
   1cb54:	e5d6300e 	ldrb	r3, [r6, #14]
   1cb58:	e1d620bc 	ldrh	r2, [r6, #12]
   1cb5c:	e3530000 	cmp	r3, #0
   1cb60:	0a00000d 	beq	1cb9c <RemoteConfig::Run()+0xd8>
   1cb64:	e1580002 	cmp	r8, r2
   1cb68:	8a00000d 	bhi	1cba4 <RemoteConfig::Run()+0xe0>
   1cb6c:	e2877001 	add	r7, r7, #1
   1cb70:	e3570009 	cmp	r7, #9
   1cb74:	e2866010 	add	r6, r6, #16
   1cb78:	1afffff5 	bne	1cb54 <RemoteConfig::Run()+0x90>
   1cb7c:	ebffeed9 	bl	186e8 <Network::Get()>
   1cb80:	e59f311c 	ldr	r3, [pc, #284]	; 1cca4 <RemoteConfig::Run()+0x1e0>
   1cb84:	e59f211c 	ldr	r2, [pc, #284]	; 1cca8 <RemoteConfig::Run()+0x1e4>
   1cb88:	e58d3004 	str	r3, [sp, #4]
   1cb8c:	e5943018 	ldr	r3, [r4, #24]
   1cb90:	e58d3000 	str	r3, [sp]
   1cb94:	e3a03008 	mov	r3, #8
   1cb98:	ea00003c 	b	1cc90 <RemoteConfig::Run()+0x1cc>
   1cb9c:	e1580002 	cmp	r8, r2
   1cba0:	1afffff1 	bne	1cb6c <RemoteConfig::Run()+0xa8>
   1cba4:	e5961008 	ldr	r1, [r6, #8]
   1cba8:	e1a00005 	mov	r0, r5
   1cbac:	ebffd241 	bl	114b8 <memcmp@plt>
   1cbb0:	e3500000 	cmp	r0, #0
   1cbb4:	1affffec 	bne	1cb6c <RemoteConfig::Run()+0xa8>
   1cbb8:	e0893207 	add	r3, r9, r7, lsl #4
   1cbbc:	e5932004 	ldr	r2, [r3, #4]
   1cbc0:	e7993207 	ldr	r3, [r9, r7, lsl #4]
   1cbc4:	e3120001 	tst	r2, #1
   1cbc8:	e08400c2 	add	r0, r4, r2, asr #1
   1cbcc:	179420c2 	ldrne	r2, [r4, r2, asr #1]
   1cbd0:	17923003 	ldrne	r3, [r2, r3]
   1cbd4:	e12fff33 	blx	r3
   1cbd8:	ea000007 	b	1cbfc <RemoteConfig::Run()+0x138>
   1cbdc:	e5d4200d 	ldrb	r2, [r4, #13]
   1cbe0:	e3520000 	cmp	r2, #0
   1cbe4:	1a000004 	bne	1cbfc <RemoteConfig::Run()+0x138>
   1cbe8:	e3510023 	cmp	r1, #35	; 0x23
   1cbec:	1a000004 	bne	1cc04 <RemoteConfig::Run()+0x140>
   1cbf0:	e1a01002 	mov	r1, r2
   1cbf4:	e1a00004 	mov	r0, r4
   1cbf8:	eb000216 	bl	1d458 <RemoteConfig::HandleSet(void*, unsigned int)>
   1cbfc:	e28dd014 	add	sp, sp, #20
   1cc00:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1cc04:	e3510021 	cmp	r1, #33	; 0x21
   1cc08:	1afffffb 	bne	1cbfc <RemoteConfig::Run()+0x138>
   1cc0c:	e594601c 	ldr	r6, [r4, #28]
   1cc10:	e2466001 	sub	r6, r6, #1
   1cc14:	e3560005 	cmp	r6, #5
   1cc18:	e584601c 	str	r6, [r4, #28]
   1cc1c:	9a000014 	bls	1cc74 <RemoteConfig::Run()+0x1b0>
   1cc20:	e2835001 	add	r5, r3, #1
   1cc24:	e3a02005 	mov	r2, #5
   1cc28:	e59f107c 	ldr	r1, [pc, #124]	; 1ccac <RemoteConfig::Run()+0x1e8>
   1cc2c:	e1a00005 	mov	r0, r5
   1cc30:	ebffd220 	bl	114b8 <memcmp@plt>
   1cc34:	e3500000 	cmp	r0, #0
   1cc38:	1a00000b 	bne	1cc6c <RemoteConfig::Run()+0x1a8>
   1cc3c:	e59f306c 	ldr	r3, [pc, #108]	; 1ccb0 <RemoteConfig::Run()+0x1ec>
   1cc40:	e7933200 	ldr	r3, [r3, r0, lsl #4]
   1cc44:	e1a00004 	mov	r0, r4
   1cc48:	eaffffe1 	b	1cbd4 <RemoteConfig::Run()+0x110>
   1cc4c:	e3a02008 	mov	r2, #8
   1cc50:	e59f105c 	ldr	r1, [pc, #92]	; 1ccb4 <RemoteConfig::Run()+0x1f0>
   1cc54:	e1a00005 	mov	r0, r5
   1cc58:	ebffd216 	bl	114b8 <memcmp@plt>
   1cc5c:	e3500000 	cmp	r0, #0
   1cc60:	1a000003 	bne	1cc74 <RemoteConfig::Run()+0x1b0>
   1cc64:	e3a00001 	mov	r0, #1
   1cc68:	eafffff3 	b	1cc3c <RemoteConfig::Run()+0x178>
   1cc6c:	e3560008 	cmp	r6, #8
   1cc70:	8afffff5 	bhi	1cc4c <RemoteConfig::Run()+0x188>
   1cc74:	ebffee9b 	bl	186e8 <Network::Get()>
   1cc78:	e59f3024 	ldr	r3, [pc, #36]	; 1cca4 <RemoteConfig::Run()+0x1e0>
   1cc7c:	e59f2034 	ldr	r2, [pc, #52]	; 1ccb8 <RemoteConfig::Run()+0x1f4>
   1cc80:	e58d3004 	str	r3, [sp, #4]
   1cc84:	e5943018 	ldr	r3, [r4, #24]
   1cc88:	e58d3000 	str	r3, [sp]
   1cc8c:	e3a03008 	mov	r3, #8
   1cc90:	e5941014 	ldr	r1, [r4, #20]
   1cc94:	eb0066d2 	bl	367e4 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>
   1cc98:	eaffffd7 	b	1cbfc <RemoteConfig::Run()+0x138>
   1cc9c:	0005c3e4 	.word	0x0005c3e4
   1cca0:	00045f44 	.word	0x00045f44
   1cca4:	00002905 	.word	0x00002905
   1cca8:	00046165 	.word	0x00046165
   1ccac:	00045f30 	.word	0x00045f30
   1ccb0:	00045fd4 	.word	0x00045fd4
   1ccb4:	00045f1c 	.word	0x00045f1c
   1ccb8:	0004615c 	.word	0x0004615c

0001ccbc <RemoteConfig::HandleUptime()>:
   1ccbc:	e5d0300f 	ldrb	r3, [r0, #15]
   1ccc0:	e3530000 	cmp	r3, #0
   1ccc4:	012fff1e 	bxeq	lr
   1ccc8:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   1cccc:	e1a04000 	mov	r4, r0
   1ccd0:	ebffd24a 	bl	11600 <Hardware::Get()>
   1ccd4:	eb008bd3 	bl	3fc28 <Hardware::GetUpTime()>
   1ccd8:	e594201c 	ldr	r2, [r4, #28]
   1ccdc:	e3520007 	cmp	r2, #7
   1cce0:	e1a03000 	mov	r3, r0
   1cce4:	1a00000e 	bne	1cd24 <RemoteConfig::HandleUptime()+0x68>
   1cce8:	e59f503c 	ldr	r5, [pc, #60]	; 1cd2c <RemoteConfig::HandleUptime()+0x70>
   1ccec:	e59f203c 	ldr	r2, [pc, #60]	; 1cd30 <RemoteConfig::HandleUptime()+0x74>
   1ccf0:	e59f103c 	ldr	r1, [pc, #60]	; 1cd34 <RemoteConfig::HandleUptime()+0x78>
   1ccf4:	e5950000 	ldr	r0, [r5]
   1ccf8:	ebffd15e 	bl	11278 <snprintf@plt>
   1ccfc:	e1a06000 	mov	r6, r0
   1cd00:	ebffee78 	bl	186e8 <Network::Get()>
   1cd04:	e59f302c 	ldr	r3, [pc, #44]	; 1cd38 <RemoteConfig::HandleUptime()+0x7c>
   1cd08:	e5952000 	ldr	r2, [r5]
   1cd0c:	e58d3004 	str	r3, [sp, #4]
   1cd10:	e5943018 	ldr	r3, [r4, #24]
   1cd14:	e58d3000 	str	r3, [sp]
   1cd18:	e6ff3076 	uxth	r3, r6
   1cd1c:	e5941014 	ldr	r1, [r4, #20]
   1cd20:	eb0066af 	bl	367e4 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>
   1cd24:	e28dd008 	add	sp, sp, #8
   1cd28:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cd2c:	0005c3e4 	.word	0x0005c3e4
   1cd30:	0004616e 	.word	0x0004616e
   1cd34:	000003ff 	.word	0x000003ff
   1cd38:	00002905 	.word	0x00002905

0001cd3c <RemoteConfig::HandleVersion()>:
   1cd3c:	e590301c 	ldr	r3, [r0, #28]
   1cd40:	e3530008 	cmp	r3, #8
   1cd44:	112fff1e 	bxne	lr
   1cd48:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   1cd4c:	e1a04000 	mov	r4, r0
   1cd50:	eb0002e1 	bl	1d8dc <FirmwareVersion::GetPrint() [clone .isra.1]>
   1cd54:	e59f5040 	ldr	r5, [pc, #64]	; 1cd9c <RemoteConfig::HandleVersion()+0x60>
   1cd58:	e59f2040 	ldr	r2, [pc, #64]	; 1cda0 <RemoteConfig::HandleVersion()+0x64>
   1cd5c:	e59f1040 	ldr	r1, [pc, #64]	; 1cda4 <RemoteConfig::HandleVersion()+0x68>
   1cd60:	e1a03000 	mov	r3, r0
   1cd64:	e5950000 	ldr	r0, [r5]
   1cd68:	ebffd142 	bl	11278 <snprintf@plt>
   1cd6c:	e1a06000 	mov	r6, r0
   1cd70:	ebffee5c 	bl	186e8 <Network::Get()>
   1cd74:	e59f302c 	ldr	r3, [pc, #44]	; 1cda8 <RemoteConfig::HandleVersion()+0x6c>
   1cd78:	e5952000 	ldr	r2, [r5]
   1cd7c:	e58d3004 	str	r3, [sp, #4]
   1cd80:	e5943018 	ldr	r3, [r4, #24]
   1cd84:	e58d3000 	str	r3, [sp]
   1cd88:	e6ff3076 	uxth	r3, r6
   1cd8c:	e5941014 	ldr	r1, [r4, #20]
   1cd90:	eb006693 	bl	367e4 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>
   1cd94:	e28dd008 	add	sp, sp, #8
   1cd98:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cd9c:	0005c3e4 	.word	0x0005c3e4
   1cda0:	0004617b 	.word	0x0004617b
   1cda4:	000003ff 	.word	0x000003ff
   1cda8:	00002905 	.word	0x00002905

0001cdac <RemoteConfig::HandleList()>:
   1cdac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cdb0:	e24dd024 	sub	sp, sp, #36	; 0x24
   1cdb4:	e1a04000 	mov	r4, r0
   1cdb8:	ebffee4a 	bl	186e8 <Network::Get()>
   1cdbc:	e5947000 	ldr	r7, [r4]
   1cdc0:	e3a02012 	mov	r2, #18
   1cdc4:	e59f3114 	ldr	r3, [pc, #276]	; 1cee0 <RemoteConfig::HandleList()+0x134>
   1cdc8:	e5948004 	ldr	r8, [r4, #4]
   1cdcc:	e0273792 	mla	r7, r2, r7, r3
   1cdd0:	e3a0200c 	mov	r2, #12
   1cdd4:	e59f3108 	ldr	r3, [pc, #264]	; 1cee4 <RemoteConfig::HandleList()+0x138>
   1cdd8:	e59f9108 	ldr	r9, [pc, #264]	; 1cee8 <RemoteConfig::HandleList()+0x13c>
   1cddc:	e0283892 	mla	r8, r2, r8, r3
   1cde0:	e59f6104 	ldr	r6, [pc, #260]	; 1ceec <RemoteConfig::HandleList()+0x140>
   1cde4:	e5d9b009 	ldrb	fp, [r9, #9]
   1cde8:	e594a008 	ldr	sl, [r4, #8]
   1cdec:	e5965000 	ldr	r5, [r6]
   1cdf0:	e2855007 	add	r5, r5, #7
   1cdf4:	e5900010 	ldr	r0, [r0, #16]
   1cdf8:	eb0002b6 	bl	1d8d8 <Network::GetIp() const [clone .isra.0]>
   1cdfc:	e35b0000 	cmp	fp, #0
   1ce00:	e1a02420 	lsr	r2, r0, #8
   1ce04:	e1a01820 	lsr	r1, r0, #16
   1ce08:	e6ef3070 	uxtb	r3, r0
   1ce0c:	e6ef2072 	uxtb	r2, r2
   1ce10:	e6ef1071 	uxtb	r1, r1
   1ce14:	e1a00c20 	lsr	r0, r0, #24
   1ce18:	0a00001a 	beq	1ce88 <RemoteConfig::HandleList()+0xdc>
   1ce1c:	e2899009 	add	r9, r9, #9
   1ce20:	e58d0008 	str	r0, [sp, #8]
   1ce24:	e58d1004 	str	r1, [sp, #4]
   1ce28:	e58d2000 	str	r2, [sp]
   1ce2c:	e58d9018 	str	r9, [sp, #24]
   1ce30:	e58da014 	str	sl, [sp, #20]
   1ce34:	e58d8010 	str	r8, [sp, #16]
   1ce38:	e58d700c 	str	r7, [sp, #12]
   1ce3c:	e59f20ac 	ldr	r2, [pc, #172]	; 1cef0 <RemoteConfig::HandleList()+0x144>
   1ce40:	e3a01ffe 	mov	r1, #1016	; 0x3f8
   1ce44:	e1a00005 	mov	r0, r5
   1ce48:	ebffd10a 	bl	11278 <snprintf@plt>
   1ce4c:	e594301c 	ldr	r3, [r4, #28]
   1ce50:	e1a07000 	mov	r7, r0
   1ce54:	e3530005 	cmp	r3, #5
   1ce58:	1a000015 	bne	1ceb4 <RemoteConfig::HandleList()+0x108>
   1ce5c:	ebffee21 	bl	186e8 <Network::Get()>
   1ce60:	e59f308c 	ldr	r3, [pc, #140]	; 1cef4 <RemoteConfig::HandleList()+0x148>
   1ce64:	e58d3004 	str	r3, [sp, #4]
   1ce68:	e5943018 	ldr	r3, [r4, #24]
   1ce6c:	e58d3000 	str	r3, [sp]
   1ce70:	e1a02005 	mov	r2, r5
   1ce74:	e6ff3077 	uxth	r3, r7
   1ce78:	e5941014 	ldr	r1, [r4, #20]
   1ce7c:	eb006658 	bl	367e4 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>
   1ce80:	e28dd024 	add	sp, sp, #36	; 0x24
   1ce84:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce88:	e58d0008 	str	r0, [sp, #8]
   1ce8c:	e58d1004 	str	r1, [sp, #4]
   1ce90:	e58d2000 	str	r2, [sp]
   1ce94:	e58da014 	str	sl, [sp, #20]
   1ce98:	e58d8010 	str	r8, [sp, #16]
   1ce9c:	e58d700c 	str	r7, [sp, #12]
   1cea0:	e59f2050 	ldr	r2, [pc, #80]	; 1cef8 <RemoteConfig::HandleList()+0x14c>
   1cea4:	e3a01ffe 	mov	r1, #1016	; 0x3f8
   1cea8:	e1a00005 	mov	r0, r5
   1ceac:	ebffd0f1 	bl	11278 <snprintf@plt>
   1ceb0:	eaffffe5 	b	1ce4c <RemoteConfig::HandleList()+0xa0>
   1ceb4:	e3530006 	cmp	r3, #6
   1ceb8:	1afffff0 	bne	1ce80 <RemoteConfig::HandleList()+0xd4>
   1cebc:	e5963000 	ldr	r3, [r6]
   1cec0:	e5d33006 	ldrb	r3, [r3, #6]
   1cec4:	e353002a 	cmp	r3, #42	; 0x2a
   1cec8:	1affffec 	bne	1ce80 <RemoteConfig::HandleList()+0xd4>
   1cecc:	ebffee05 	bl	186e8 <Network::Get()>
   1ced0:	e59f301c 	ldr	r3, [pc, #28]	; 1cef4 <RemoteConfig::HandleList()+0x148>
   1ced4:	e58d3004 	str	r3, [sp, #4]
   1ced8:	e3e03000 	mvn	r3, #0
   1cedc:	eaffffe2 	b	1ce6c <RemoteConfig::HandleList()+0xc0>
   1cee0:	00045ff4 	.word	0x00045ff4
   1cee4:	000460cc 	.word	0x000460cc
   1cee8:	0005c3c0 	.word	0x0005c3c0
   1ceec:	0005c3e4 	.word	0x0005c3e4
   1cef0:	00046186 	.word	0x00046186
   1cef4:	00002905 	.word	0x00002905
   1cef8:	0004619f 	.word	0x0004619f

0001cefc <RemoteConfig::HandleDisplaySet()>:
   1cefc:	e590301c 	ldr	r3, [r0, #28]
   1cf00:	e3530009 	cmp	r3, #9
   1cf04:	112fff1e 	bxne	lr
   1cf08:	e92d4010 	push	{r4, lr}
   1cf0c:	ebffd4b7 	bl	121f0 <Display::Get()>
   1cf10:	e59f3018 	ldr	r3, [pc, #24]	; 1cf30 <RemoteConfig::HandleDisplaySet()+0x34>
   1cf14:	e8bd4010 	pop	{r4, lr}
   1cf18:	e5933000 	ldr	r3, [r3]
   1cf1c:	e5d31009 	ldrb	r1, [r3, #9]
   1cf20:	e2411030 	sub	r1, r1, #48	; 0x30
   1cf24:	e16f1f11 	clz	r1, r1
   1cf28:	e1a012a1 	lsr	r1, r1, #5
   1cf2c:	eaffd453 	b	12080 <Display::SetSleep(bool)>
   1cf30:	0005c3e4 	.word	0x0005c3e4

0001cf34 <RemoteConfig::HandleDisplayGet()>:
   1cf34:	e590301c 	ldr	r3, [r0, #28]
   1cf38:	e3530008 	cmp	r3, #8
   1cf3c:	112fff1e 	bxne	lr
   1cf40:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   1cf44:	e1a04000 	mov	r4, r0
   1cf48:	ebffd4a8 	bl	121f0 <Display::Get()>
   1cf4c:	e59f5058 	ldr	r5, [pc, #88]	; 1cfac <RemoteConfig::HandleDisplayGet()+0x78>
   1cf50:	e5956000 	ldr	r6, [r5]
   1cf54:	e5d00010 	ldrb	r0, [r0, #16]
   1cf58:	eb000262 	bl	1d8e8 <Display::isSleep() const [clone .isra.2]>
   1cf5c:	e59f204c 	ldr	r2, [pc, #76]	; 1cfb0 <RemoteConfig::HandleDisplayGet()+0x7c>
   1cf60:	e59f304c 	ldr	r3, [pc, #76]	; 1cfb4 <RemoteConfig::HandleDisplayGet()+0x80>
   1cf64:	e59f104c 	ldr	r1, [pc, #76]	; 1cfb8 <RemoteConfig::HandleDisplayGet()+0x84>
   1cf68:	e3500000 	cmp	r0, #0
   1cf6c:	01a03002 	moveq	r3, r2
   1cf70:	e1a00006 	mov	r0, r6
   1cf74:	e59f2040 	ldr	r2, [pc, #64]	; 1cfbc <RemoteConfig::HandleDisplayGet()+0x88>
   1cf78:	ebffd0be 	bl	11278 <snprintf@plt>
   1cf7c:	e1a06000 	mov	r6, r0
   1cf80:	ebffedd8 	bl	186e8 <Network::Get()>
   1cf84:	e59f3034 	ldr	r3, [pc, #52]	; 1cfc0 <RemoteConfig::HandleDisplayGet()+0x8c>
   1cf88:	e5952000 	ldr	r2, [r5]
   1cf8c:	e58d3004 	str	r3, [sp, #4]
   1cf90:	e5943018 	ldr	r3, [r4, #24]
   1cf94:	e58d3000 	str	r3, [sp]
   1cf98:	e6ff3076 	uxth	r3, r6
   1cf9c:	e5941014 	ldr	r1, [r4, #20]
   1cfa0:	eb00660f 	bl	367e4 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>
   1cfa4:	e28dd008 	add	sp, sp, #8
   1cfa8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cfac:	0005c3e4 	.word	0x0005c3e4
   1cfb0:	000461b5 	.word	0x000461b5
   1cfb4:	000461b8 	.word	0x000461b8
   1cfb8:	000003ff 	.word	0x000003ff
   1cfbc:	000461bc 	.word	0x000461bc
   1cfc0:	00002905 	.word	0x00002905

0001cfc4 <RemoteConfig::HandleGet(void*, unsigned int)>:
   1cfc4:	e92d4070 	push	{r4, r5, r6, lr}
   1cfc8:	e24dd018 	sub	sp, sp, #24
   1cfcc:	e2515000 	subs	r5, r1, #0
   1cfd0:	e1a04000 	mov	r4, r0
   1cfd4:	e58d200c 	str	r2, [sp, #12]
   1cfd8:	e59f6118 	ldr	r6, [pc, #280]	; 1d0f8 <RemoteConfig::HandleGet(void*, unsigned int)+0x134>
   1cfdc:	1a000013 	bne	1d030 <RemoteConfig::HandleGet(void*, unsigned int)+0x6c>
   1cfe0:	e5961000 	ldr	r1, [r6]
   1cfe4:	e3a03fff 	mov	r3, #1020	; 0x3fc
   1cfe8:	e28d2010 	add	r2, sp, #16
   1cfec:	e2811005 	add	r1, r1, #5
   1cff0:	e58d3010 	str	r3, [sp, #16]
   1cff4:	eb00035f 	bl	1dd78 <RemoteConfig::GetIndex(void const*, unsigned int&)>
   1cff8:	e3500000 	cmp	r0, #0
   1cffc:	aa00001b 	bge	1d070 <RemoteConfig::HandleGet(void*, unsigned int)+0xac>
   1d000:	ebffedb8 	bl	186e8 <Network::Get()>
   1d004:	e59f30f0 	ldr	r3, [pc, #240]	; 1d0fc <RemoteConfig::HandleGet(void*, unsigned int)+0x138>
   1d008:	e59f20f0 	ldr	r2, [pc, #240]	; 1d100 <RemoteConfig::HandleGet(void*, unsigned int)+0x13c>
   1d00c:	e58d3004 	str	r3, [sp, #4]
   1d010:	e5943018 	ldr	r3, [r4, #24]
   1d014:	e58d3000 	str	r3, [sp]
   1d018:	e3a0300b 	mov	r3, #11
   1d01c:	e5941014 	ldr	r1, [r4, #20]
   1d020:	eb0065ef 	bl	367e4 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>
   1d024:	e3a0000c 	mov	r0, #12
   1d028:	e28dd018 	add	sp, sp, #24
   1d02c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d030:	e58d2010 	str	r2, [sp, #16]
   1d034:	e28d2010 	add	r2, sp, #16
   1d038:	e5865000 	str	r5, [r6]
   1d03c:	eb00034d 	bl	1dd78 <RemoteConfig::GetIndex(void const*, unsigned int&)>
   1d040:	e3500000 	cmp	r0, #0
   1d044:	aa000009 	bge	1d070 <RemoteConfig::HandleGet(void*, unsigned int)+0xac>
   1d048:	e3a0300b 	mov	r3, #11
   1d04c:	e28d100c 	add	r1, sp, #12
   1d050:	e28d0014 	add	r0, sp, #20
   1d054:	e58d3014 	str	r3, [sp, #20]
   1d058:	ebffd8d9 	bl	133c4 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>
   1d05c:	e59f109c 	ldr	r1, [pc, #156]	; 1d100 <RemoteConfig::HandleGet(void*, unsigned int)+0x13c>
   1d060:	e5902000 	ldr	r2, [r0]
   1d064:	e1a00005 	mov	r0, r5
   1d068:	ebffd0e5 	bl	11404 <memcpy@plt>
   1d06c:	eaffffec 	b	1d024 <RemoteConfig::HandleGet(void*, unsigned int)+0x60>
   1d070:	e3a0301c 	mov	r3, #28
   1d074:	e59f1088 	ldr	r1, [pc, #136]	; 1d104 <RemoteConfig::HandleGet(void*, unsigned int)+0x140>
   1d078:	e0030093 	mul	r3, r3, r0
   1d07c:	e0812003 	add	r2, r1, r3
   1d080:	e7913003 	ldr	r3, [r1, r3]
   1d084:	e5922004 	ldr	r2, [r2, #4]
   1d088:	e28d1010 	add	r1, sp, #16
   1d08c:	e3120001 	tst	r2, #1
   1d090:	e08400c2 	add	r0, r4, r2, asr #1
   1d094:	179420c2 	ldrne	r2, [r4, r2, asr #1]
   1d098:	17923003 	ldrne	r3, [r2, r3]
   1d09c:	e12fff33 	blx	r3
   1d0a0:	e3550000 	cmp	r5, #0
   1d0a4:	1a00000a 	bne	1d0d4 <RemoteConfig::HandleGet(void*, unsigned int)+0x110>
   1d0a8:	ebffed8e 	bl	186e8 <Network::Get()>
   1d0ac:	e59f3048 	ldr	r3, [pc, #72]	; 1d0fc <RemoteConfig::HandleGet(void*, unsigned int)+0x138>
   1d0b0:	e5962000 	ldr	r2, [r6]
   1d0b4:	e58d3004 	str	r3, [sp, #4]
   1d0b8:	e5943018 	ldr	r3, [r4, #24]
   1d0bc:	e58d3000 	str	r3, [sp]
   1d0c0:	e1dd31b0 	ldrh	r3, [sp, #16]
   1d0c4:	e5941014 	ldr	r1, [r4, #20]
   1d0c8:	eb0065c5 	bl	367e4 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>
   1d0cc:	e59d0010 	ldr	r0, [sp, #16]
   1d0d0:	eaffffd4 	b	1d028 <RemoteConfig::HandleGet(void*, unsigned int)+0x64>
   1d0d4:	e28d100c 	add	r1, sp, #12
   1d0d8:	e28d0010 	add	r0, sp, #16
   1d0dc:	ebffd8b8 	bl	133c4 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>
   1d0e0:	e5964000 	ldr	r4, [r6]
   1d0e4:	e1a01004 	mov	r1, r4
   1d0e8:	e5902000 	ldr	r2, [r0]
   1d0ec:	e1a00005 	mov	r0, r5
   1d0f0:	ebffd0c3 	bl	11404 <memcpy@plt>
   1d0f4:	eafffff4 	b	1d0cc <RemoteConfig::HandleGet(void*, unsigned int)+0x108>
   1d0f8:	0005c3e4 	.word	0x0005c3e4
   1d0fc:	00002905 	.word	0x00002905
   1d100:	000461c8 	.word	0x000461c8
   1d104:	000463b0 	.word	0x000463b0

0001d108 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
   1d108:	e92d4010 	push	{r4, lr}
   1d10c:	e24dd028 	sub	sp, sp, #40	; 0x28
   1d110:	e1a04001 	mov	r4, r1
   1d114:	ebfffded 	bl	1c8d0 <StoreRemoteConfig::Get()>
   1d118:	e1a01000 	mov	r1, r0
   1d11c:	e28d0004 	add	r0, sp, #4
   1d120:	ebfffc6e 	bl	1c2e0 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
   1d124:	e59f1018 	ldr	r1, [pc, #24]	; 1d144 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x3c>
   1d128:	e1a03004 	mov	r3, r4
   1d12c:	e3a02b01 	mov	r2, #1024	; 0x400
   1d130:	e5911000 	ldr	r1, [r1]
   1d134:	e28d0004 	add	r0, sp, #4
   1d138:	ebfffd44 	bl	1c650 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
   1d13c:	e28dd028 	add	sp, sp, #40	; 0x28
   1d140:	e8bd8010 	pop	{r4, pc}
   1d144:	0005c3e4 	.word	0x0005c3e4

0001d148 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
   1d148:	e92d4010 	push	{r4, lr}
   1d14c:	e24dd068 	sub	sp, sp, #104	; 0x68
   1d150:	e1a04001 	mov	r4, r1
   1d154:	ebffd236 	bl	11a34 <StoreNetwork::Get()>
   1d158:	e1a01000 	mov	r1, r0
   1d15c:	e28d0004 	add	r0, sp, #4
   1d160:	eb006b12 	bl	37db0 <NetworkParams::NetworkParams(NetworkParamsStore*)>
   1d164:	e59f1018 	ldr	r1, [pc, #24]	; 1d184 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x3c>
   1d168:	e1a03004 	mov	r3, r4
   1d16c:	e3a02b01 	mov	r2, #1024	; 0x400
   1d170:	e5911000 	ldr	r1, [r1]
   1d174:	e28d0004 	add	r0, sp, #4
   1d178:	eb006c44 	bl	38290 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
   1d17c:	e28dd068 	add	sp, sp, #104	; 0x68
   1d180:	e8bd8010 	pop	{r4, pc}
   1d184:	0005c3e4 	.word	0x0005c3e4

0001d188 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
   1d188:	e92d4010 	push	{r4, lr}
   1d18c:	e24dd090 	sub	sp, sp, #144	; 0x90
   1d190:	e1a04001 	mov	r4, r1
   1d194:	ebfffdd5 	bl	1c8f0 <StoreArtNet::Get()>
   1d198:	e1a01000 	mov	r1, r0
   1d19c:	e28d0004 	add	r0, sp, #4
   1d1a0:	eb0018d7 	bl	23504 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
   1d1a4:	e59f1018 	ldr	r1, [pc, #24]	; 1d1c4 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x3c>
   1d1a8:	e1a03004 	mov	r3, r4
   1d1ac:	e3a02b01 	mov	r2, #1024	; 0x400
   1d1b0:	e5911000 	ldr	r1, [r1]
   1d1b4:	e28d0004 	add	r0, sp, #4
   1d1b8:	eb001aea 	bl	23d68 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
   1d1bc:	e28dd090 	add	sp, sp, #144	; 0x90
   1d1c0:	e8bd8010 	pop	{r4, pc}
   1d1c4:	0005c3e4 	.word	0x0005c3e4

0001d1c8 <RemoteConfig::HandleGetE131Txt(unsigned int&)>:
   1d1c8:	e92d4010 	push	{r4, lr}
   1d1cc:	e24dd028 	sub	sp, sp, #40	; 0x28
   1d1d0:	e1a04001 	mov	r4, r1
   1d1d4:	ebfffdc9 	bl	1c900 <StoreE131::Get()>
   1d1d8:	e1a01000 	mov	r1, r0
   1d1dc:	e28d0004 	add	r0, sp, #4
   1d1e0:	eb001f27 	bl	24e84 <E131Params::E131Params(E131ParamsStore*)>
   1d1e4:	e59f1018 	ldr	r1, [pc, #24]	; 1d204 <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x3c>
   1d1e8:	e1a03004 	mov	r3, r4
   1d1ec:	e3a02b01 	mov	r2, #1024	; 0x400
   1d1f0:	e5911000 	ldr	r1, [r1]
   1d1f4:	e28d0004 	add	r0, sp, #4
   1d1f8:	eb002059 	bl	25364 <E131Params::Save(char*, unsigned int, unsigned int&)>
   1d1fc:	e28dd028 	add	sp, sp, #40	; 0x28
   1d200:	e8bd8010 	pop	{r4, pc}
   1d204:	0005c3e4 	.word	0x0005c3e4

0001d208 <RemoteConfig::HandleGetRdmDeviceTxt(unsigned int&)>:
   1d208:	e92d4010 	push	{r4, lr}
   1d20c:	e24dd030 	sub	sp, sp, #48	; 0x30
   1d210:	e1a04001 	mov	r4, r1
   1d214:	ebfffdc9 	bl	1c940 <StoreRDMDevice::Get()>
   1d218:	e1a01000 	mov	r1, r0
   1d21c:	e1a0000d 	mov	r0, sp
   1d220:	ebffdd3a 	bl	14710 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
   1d224:	e59f1018 	ldr	r1, [pc, #24]	; 1d244 <RemoteConfig::HandleGetRdmDeviceTxt(unsigned int&)+0x3c>
   1d228:	e1a03004 	mov	r3, r4
   1d22c:	e3a02b01 	mov	r2, #1024	; 0x400
   1d230:	e5911000 	ldr	r1, [r1]
   1d234:	e1a0000d 	mov	r0, sp
   1d238:	ebffde15 	bl	14a94 <RDMDeviceParams::Save(char*, unsigned int, unsigned int&)>
   1d23c:	e28dd030 	add	sp, sp, #48	; 0x30
   1d240:	e8bd8010 	pop	{r4, pc}
   1d244:	0005c3e4 	.word	0x0005c3e4

0001d248 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)>:
   1d248:	e92d4010 	push	{r4, lr}
   1d24c:	e24dd018 	sub	sp, sp, #24
   1d250:	e1a04001 	mov	r4, r1
   1d254:	ebfffdad 	bl	1c910 <StoreTLC59711::Get()>
   1d258:	e1a01000 	mov	r1, r0
   1d25c:	e28d0004 	add	r0, sp, #4
   1d260:	eb004b2c 	bl	2ff18 <TLC59711DmxParams::TLC59711DmxParams(TLC59711DmxParamsStore*)>
   1d264:	e28d0004 	add	r0, sp, #4
   1d268:	eb004b34 	bl	2ff40 <TLC59711DmxParams::Load()>
   1d26c:	e3500000 	cmp	r0, #0
   1d270:	0a000005 	beq	1d28c <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x44>
   1d274:	e59f1018 	ldr	r1, [pc, #24]	; 1d294 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x4c>
   1d278:	e1a03004 	mov	r3, r4
   1d27c:	e3a02b01 	mov	r2, #1024	; 0x400
   1d280:	e5911000 	ldr	r1, [r1]
   1d284:	e28d0004 	add	r0, sp, #4
   1d288:	eb004f53 	bl	30fdc <TLC59711DmxParams::Save(char*, unsigned int, unsigned int&)>
   1d28c:	e28dd018 	add	sp, sp, #24
   1d290:	e8bd8010 	pop	{r4, pc}
   1d294:	0005c3e4 	.word	0x0005c3e4

0001d298 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
   1d298:	e92d4010 	push	{r4, lr}
   1d29c:	e24dd028 	sub	sp, sp, #40	; 0x28
   1d2a0:	e1a04001 	mov	r4, r1
   1d2a4:	ebfffd8d 	bl	1c8e0 <StoreDisplayUdf::Get()>
   1d2a8:	e1a01000 	mov	r1, r0
   1d2ac:	e1a0000d 	mov	r0, sp
   1d2b0:	eb006c0b 	bl	382e4 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
   1d2b4:	e59f1018 	ldr	r1, [pc, #24]	; 1d2d4 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x3c>
   1d2b8:	e1a03004 	mov	r3, r4
   1d2bc:	e3a02b01 	mov	r2, #1024	; 0x400
   1d2c0:	e5911000 	ldr	r1, [r1]
   1d2c4:	e1a0000d 	mov	r0, sp
   1d2c8:	eb006cea 	bl	38678 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
   1d2cc:	e28dd028 	add	sp, sp, #40	; 0x28
   1d2d0:	e8bd8010 	pop	{r4, pc}
   1d2d4:	0005c3e4 	.word	0x0005c3e4

0001d2d8 <RemoteConfig::HandleGetSparkFunTxt(unsigned int&)>:
   1d2d8:	e92d4010 	push	{r4, lr}
   1d2dc:	e24dd028 	sub	sp, sp, #40	; 0x28
   1d2e0:	e1a04001 	mov	r4, r1
   1d2e4:	ebfffd8d 	bl	1c920 <StoreSparkFunDmx::Get()>
   1d2e8:	e1a01000 	mov	r1, r0
   1d2ec:	e28d000c 	add	r0, sp, #12
   1d2f0:	eb003733 	bl	2afc4 <SparkFunDmxParams::SparkFunDmxParams(SparkFunDmxParamsStore*)>
   1d2f4:	e59f1020 	ldr	r1, [pc, #32]	; 1d31c <RemoteConfig::HandleGetSparkFunTxt(unsigned int&)+0x44>
   1d2f8:	e3a030ff 	mov	r3, #255	; 0xff
   1d2fc:	e58d3000 	str	r3, [sp]
   1d300:	e3a02b01 	mov	r2, #1024	; 0x400
   1d304:	e1a03004 	mov	r3, r4
   1d308:	e5911000 	ldr	r1, [r1]
   1d30c:	e28d000c 	add	r0, sp, #12
   1d310:	eb00384a 	bl	2b440 <SparkFunDmxParams::Save(char*, unsigned int, unsigned int&, unsigned int)>
   1d314:	e28dd028 	add	sp, sp, #40	; 0x28
   1d318:	e8bd8010 	pop	{r4, pc}
   1d31c:	0005c3e4 	.word	0x0005c3e4

0001d320 <RemoteConfig::HandleGetMotorTxt(unsigned int, unsigned int&)>:
   1d320:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1d324:	e24dd0d4 	sub	sp, sp, #212	; 0xd4
   1d328:	e3a07000 	mov	r7, #0
   1d32c:	e1a06001 	mov	r6, r1
   1d330:	e1a04002 	mov	r4, r2
   1d334:	e58d7008 	str	r7, [sp, #8]
   1d338:	ebfffd78 	bl	1c920 <StoreSparkFunDmx::Get()>
   1d33c:	e59f5110 	ldr	r5, [pc, #272]	; 1d454 <RemoteConfig::HandleGetMotorTxt(unsigned int, unsigned int&)+0x134>
   1d340:	e1a01000 	mov	r1, r0
   1d344:	e28d0018 	add	r0, sp, #24
   1d348:	eb00371d 	bl	2afc4 <SparkFunDmxParams::SparkFunDmxParams(SparkFunDmxParamsStore*)>
   1d34c:	e28d3008 	add	r3, sp, #8
   1d350:	e3a02b01 	mov	r2, #1024	; 0x400
   1d354:	e5951000 	ldr	r1, [r5]
   1d358:	e28d0018 	add	r0, sp, #24
   1d35c:	e58d6000 	str	r6, [sp]
   1d360:	eb003836 	bl	2b440 <SparkFunDmxParams::Save(char*, unsigned int, unsigned int&, unsigned int)>
   1d364:	e58d700c 	str	r7, [sp, #12]
   1d368:	ebfffd70 	bl	1c930 <StoreMotors::Get()>
   1d36c:	e1a01000 	mov	r1, r0
   1d370:	e28d0090 	add	r0, sp, #144	; 0x90
   1d374:	eb003219 	bl	29be0 <ModeParams::ModeParams(ModeParamsStore*)>
   1d378:	e59d2008 	ldr	r2, [sp, #8]
   1d37c:	e5951000 	ldr	r1, [r5]
   1d380:	e28d300c 	add	r3, sp, #12
   1d384:	e58d3000 	str	r3, [sp]
   1d388:	e28d0090 	add	r0, sp, #144	; 0x90
   1d38c:	e2623b01 	rsb	r3, r2, #1024	; 0x400
   1d390:	e0812002 	add	r2, r1, r2
   1d394:	e1a01006 	mov	r1, r6
   1d398:	eb0033cf 	bl	2a2dc <ModeParams::Save(unsigned int, char*, unsigned int, unsigned int&)>
   1d39c:	e58d7010 	str	r7, [sp, #16]
   1d3a0:	ebfffd62 	bl	1c930 <StoreMotors::Get()>
   1d3a4:	e2501000 	subs	r1, r0, #0
   1d3a8:	12811004 	addne	r1, r1, #4
   1d3ac:	e28d0034 	add	r0, sp, #52	; 0x34
   1d3b0:	eb0038dc 	bl	2b728 <MotorParams::MotorParams(MotorParamsStore*)>
   1d3b4:	e1cd20d8 	ldrd	r2, [sp, #8]
   1d3b8:	e5951000 	ldr	r1, [r5]
   1d3bc:	e28d0034 	add	r0, sp, #52	; 0x34
   1d3c0:	e0822003 	add	r2, r2, r3
   1d3c4:	e28d3010 	add	r3, sp, #16
   1d3c8:	e58d3000 	str	r3, [sp]
   1d3cc:	e2623b01 	rsb	r3, r2, #1024	; 0x400
   1d3d0:	e0812002 	add	r2, r1, r2
   1d3d4:	e1a01006 	mov	r1, r6
   1d3d8:	eb003976 	bl	2b9b8 <MotorParams::Save(unsigned int, char*, unsigned int, unsigned int&)>
   1d3dc:	e3a03000 	mov	r3, #0
   1d3e0:	e58d3014 	str	r3, [sp, #20]
   1d3e4:	ebfffd51 	bl	1c930 <StoreMotors::Get()>
   1d3e8:	e2501000 	subs	r1, r0, #0
   1d3ec:	12811008 	addne	r1, r1, #8
   1d3f0:	e28d0060 	add	r0, sp, #96	; 0x60
   1d3f4:	eb003432 	bl	2a4c4 <L6470Params::L6470Params(L6470ParamsStore*)>
   1d3f8:	e1cd20d8 	ldrd	r2, [sp, #8]
   1d3fc:	e5951000 	ldr	r1, [r5]
   1d400:	e28d0060 	add	r0, sp, #96	; 0x60
   1d404:	e0822003 	add	r2, r2, r3
   1d408:	e59d3010 	ldr	r3, [sp, #16]
   1d40c:	e0822003 	add	r2, r2, r3
   1d410:	e28d3014 	add	r3, sp, #20
   1d414:	e58d3000 	str	r3, [sp]
   1d418:	e2623b01 	rsb	r3, r2, #1024	; 0x400
   1d41c:	e0812002 	add	r2, r1, r2
   1d420:	e1a01006 	mov	r1, r6
   1d424:	eb003564 	bl	2a9bc <L6470Params::Save(unsigned int, char*, unsigned int, unsigned int&)>
   1d428:	e1cd20d8 	ldrd	r2, [sp, #8]
   1d42c:	e28d0090 	add	r0, sp, #144	; 0x90
   1d430:	e0833002 	add	r3, r3, r2
   1d434:	e59d2010 	ldr	r2, [sp, #16]
   1d438:	e0833002 	add	r3, r3, r2
   1d43c:	e59d2014 	ldr	r2, [sp, #20]
   1d440:	e0833002 	add	r3, r3, r2
   1d444:	e5843000 	str	r3, [r4]
   1d448:	eb003212 	bl	29c98 <ModeParams::~ModeParams()>
   1d44c:	e28dd0d4 	add	sp, sp, #212	; 0xd4
   1d450:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1d454:	0005c3e4 	.word	0x0005c3e4

0001d458 <RemoteConfig::HandleSet(void*, unsigned int)>:
   1d458:	e92d407f 	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1d45c:	e2516000 	subs	r6, r1, #0
   1d460:	e1a04000 	mov	r4, r0
   1d464:	e58d2004 	str	r2, [sp, #4]
   1d468:	1a000013 	bne	1d4bc <RemoteConfig::HandleSet(void*, unsigned int)+0x64>
   1d46c:	e59f30b4 	ldr	r3, [pc, #180]	; 1d528 <RemoteConfig::HandleSet(void*, unsigned int)+0xd0>
   1d470:	e28d200c 	add	r2, sp, #12
   1d474:	e58d300c 	str	r3, [sp, #12]
   1d478:	e59f30ac 	ldr	r3, [pc, #172]	; 1d52c <RemoteConfig::HandleSet(void*, unsigned int)+0xd4>
   1d47c:	e5931000 	ldr	r1, [r3]
   1d480:	e2811001 	add	r1, r1, #1
   1d484:	eb00023b 	bl	1dd78 <RemoteConfig::GetIndex(void const*, unsigned int&)>
   1d488:	e3500000 	cmp	r0, #0
   1d48c:	ba00001c 	blt	1d504 <RemoteConfig::HandleSet(void*, unsigned int)+0xac>
   1d490:	e3a0201c 	mov	r2, #28
   1d494:	e59f3094 	ldr	r3, [pc, #148]	; 1d530 <RemoteConfig::HandleSet(void*, unsigned int)+0xd8>
   1d498:	e0233092 	mla	r3, r2, r0, r3
   1d49c:	e593200c 	ldr	r2, [r3, #12]
   1d4a0:	e5933008 	ldr	r3, [r3, #8]
   1d4a4:	e3120001 	tst	r2, #1
   1d4a8:	e08400c2 	add	r0, r4, r2, asr #1
   1d4ac:	179420c2 	ldrne	r2, [r4, r2, asr #1]
   1d4b0:	17923003 	ldrne	r3, [r2, r3]
   1d4b4:	e12fff33 	blx	r3
   1d4b8:	ea000011 	b	1d504 <RemoteConfig::HandleSet(void*, unsigned int)+0xac>
   1d4bc:	e3520b01 	cmp	r2, #1024	; 0x400
   1d4c0:	e1a05002 	mov	r5, r2
   1d4c4:	8a00000e 	bhi	1d504 <RemoteConfig::HandleSet(void*, unsigned int)+0xac>
   1d4c8:	ebfffcf7 	bl	1c8ac <PropertiesConfig::IsJSON()>
   1d4cc:	e3500000 	cmp	r0, #0
   1d4d0:	0a00000d 	beq	1d50c <RemoteConfig::HandleSet(void*, unsigned int)+0xb4>
   1d4d4:	e5d63000 	ldrb	r3, [r6]
   1d4d8:	e353007b 	cmp	r3, #123	; 0x7b
   1d4dc:	1a00000a 	bne	1d50c <RemoteConfig::HandleSet(void*, unsigned int)+0xb4>
   1d4e0:	e2451001 	sub	r1, r5, #1
   1d4e4:	e3a02000 	mov	r2, #0
   1d4e8:	e6ff1071 	uxth	r1, r1
   1d4ec:	e1a00006 	mov	r0, r6
   1d4f0:	eb007859 	bl	3b65c <properties::convert_json_file(char*, unsigned short, bool)>
   1d4f4:	e3500000 	cmp	r0, #0
   1d4f8:	c6ff0070 	uxthgt	r0, r0
   1d4fc:	c584001c 	strgt	r0, [r4, #28]
   1d500:	ca000002 	bgt	1d510 <RemoteConfig::HandleSet(void*, unsigned int)+0xb8>
   1d504:	e28dd010 	add	sp, sp, #16
   1d508:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d50c:	e584501c 	str	r5, [r4, #28]
   1d510:	e59f3014 	ldr	r3, [pc, #20]	; 1d52c <RemoteConfig::HandleSet(void*, unsigned int)+0xd4>
   1d514:	e28d2004 	add	r2, sp, #4
   1d518:	e2861001 	add	r1, r6, #1
   1d51c:	e5836000 	str	r6, [r3]
   1d520:	e1a00004 	mov	r0, r4
   1d524:	eaffffd6 	b	1d484 <RemoteConfig::HandleSet(void*, unsigned int)+0x2c>
   1d528:	000003ff 	.word	0x000003ff
   1d52c:	0005c3e4 	.word	0x0005c3e4
   1d530:	000463b0 	.word	0x000463b0

0001d534 <RemoteConfig::HandleSetRconfig()>:
   1d534:	e92d4010 	push	{r4, lr}
   1d538:	e24dd028 	sub	sp, sp, #40	; 0x28
   1d53c:	e1a04000 	mov	r4, r0
   1d540:	ebfffce2 	bl	1c8d0 <StoreRemoteConfig::Get()>
   1d544:	e1a01000 	mov	r1, r0
   1d548:	e28d0004 	add	r0, sp, #4
   1d54c:	ebfffb63 	bl	1c2e0 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
   1d550:	e59f3020 	ldr	r3, [pc, #32]	; 1d578 <RemoteConfig::HandleSetRconfig()+0x44>
   1d554:	e594201c 	ldr	r2, [r4, #28]
   1d558:	e28d0004 	add	r0, sp, #4
   1d55c:	e5931000 	ldr	r1, [r3]
   1d560:	ebfffb89 	bl	1c38c <RemoteConfigParams::Load(char const*, unsigned int)>
   1d564:	e1a01004 	mov	r1, r4
   1d568:	e28d0004 	add	r0, sp, #4
   1d56c:	ebfffc45 	bl	1c688 <RemoteConfigParams::Set(RemoteConfig*)>
   1d570:	e28dd028 	add	sp, sp, #40	; 0x28
   1d574:	e8bd8010 	pop	{r4, pc}
   1d578:	0005c3e4 	.word	0x0005c3e4

0001d57c <RemoteConfig::HandleSetNetworkTxt()>:
   1d57c:	e92d4010 	push	{r4, lr}
   1d580:	e24dd068 	sub	sp, sp, #104	; 0x68
   1d584:	e1a04000 	mov	r4, r0
   1d588:	ebffd129 	bl	11a34 <StoreNetwork::Get()>
   1d58c:	e1a01000 	mov	r1, r0
   1d590:	e28d0004 	add	r0, sp, #4
   1d594:	eb006a05 	bl	37db0 <NetworkParams::NetworkParams(NetworkParamsStore*)>
   1d598:	e59f3014 	ldr	r3, [pc, #20]	; 1d5b4 <RemoteConfig::HandleSetNetworkTxt()+0x38>
   1d59c:	e594201c 	ldr	r2, [r4, #28]
   1d5a0:	e28d0004 	add	r0, sp, #4
   1d5a4:	e5931000 	ldr	r1, [r3]
   1d5a8:	eb006a2f 	bl	37e6c <NetworkParams::Load(char const*, unsigned int)>
   1d5ac:	e28dd068 	add	sp, sp, #104	; 0x68
   1d5b0:	e8bd8010 	pop	{r4, pc}
   1d5b4:	0005c3e4 	.word	0x0005c3e4

0001d5b8 <RemoteConfig::HandleSetArtnetTxt()>:
   1d5b8:	e92d4010 	push	{r4, lr}
   1d5bc:	e24dd090 	sub	sp, sp, #144	; 0x90
   1d5c0:	e1a04000 	mov	r4, r0
   1d5c4:	ebfffcc9 	bl	1c8f0 <StoreArtNet::Get()>
   1d5c8:	e1a01000 	mov	r1, r0
   1d5cc:	e28d0004 	add	r0, sp, #4
   1d5d0:	eb0017cb 	bl	23504 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
   1d5d4:	e59f3014 	ldr	r3, [pc, #20]	; 1d5f0 <RemoteConfig::HandleSetArtnetTxt()+0x38>
   1d5d8:	e594201c 	ldr	r2, [r4, #28]
   1d5dc:	e28d0004 	add	r0, sp, #4
   1d5e0:	e5931000 	ldr	r1, [r3]
   1d5e4:	eb001806 	bl	23604 <ArtNetParams::Load(char const*, unsigned int)>
   1d5e8:	e28dd090 	add	sp, sp, #144	; 0x90
   1d5ec:	e8bd8010 	pop	{r4, pc}
   1d5f0:	0005c3e4 	.word	0x0005c3e4

0001d5f4 <RemoteConfig::HandleSetE131Txt()>:
   1d5f4:	e92d4010 	push	{r4, lr}
   1d5f8:	e24dd028 	sub	sp, sp, #40	; 0x28
   1d5fc:	e1a04000 	mov	r4, r0
   1d600:	ebfffcbe 	bl	1c900 <StoreE131::Get()>
   1d604:	e1a01000 	mov	r1, r0
   1d608:	e28d0004 	add	r0, sp, #4
   1d60c:	eb001e1c 	bl	24e84 <E131Params::E131Params(E131ParamsStore*)>
   1d610:	e59f3014 	ldr	r3, [pc, #20]	; 1d62c <RemoteConfig::HandleSetE131Txt()+0x38>
   1d614:	e594201c 	ldr	r2, [r4, #28]
   1d618:	e28d0004 	add	r0, sp, #4
   1d61c:	e5931000 	ldr	r1, [r3]
   1d620:	eb001e57 	bl	24f84 <E131Params::Load(char const*, unsigned int)>
   1d624:	e28dd028 	add	sp, sp, #40	; 0x28
   1d628:	e8bd8010 	pop	{r4, pc}
   1d62c:	0005c3e4 	.word	0x0005c3e4

0001d630 <RemoteConfig::HandleSetDevicesTxt()>:
   1d630:	e92d4010 	push	{r4, lr}
   1d634:	e24dd018 	sub	sp, sp, #24
   1d638:	e1a04000 	mov	r4, r0
   1d63c:	ebfffcb3 	bl	1c910 <StoreTLC59711::Get()>
   1d640:	e1a01000 	mov	r1, r0
   1d644:	e28d0004 	add	r0, sp, #4
   1d648:	eb004a32 	bl	2ff18 <TLC59711DmxParams::TLC59711DmxParams(TLC59711DmxParamsStore*)>
   1d64c:	e59f3014 	ldr	r3, [pc, #20]	; 1d668 <RemoteConfig::HandleSetDevicesTxt()+0x38>
   1d650:	e594201c 	ldr	r2, [r4, #28]
   1d654:	e28d0004 	add	r0, sp, #4
   1d658:	e5931000 	ldr	r1, [r3]
   1d65c:	eb004a5a 	bl	2ffcc <TLC59711DmxParams::Load(char const*, unsigned int)>
   1d660:	e28dd018 	add	sp, sp, #24
   1d664:	e8bd8010 	pop	{r4, pc}
   1d668:	0005c3e4 	.word	0x0005c3e4

0001d66c <RemoteConfig::HandleSetDisplayTxt()>:
   1d66c:	e92d4010 	push	{r4, lr}
   1d670:	e24dd028 	sub	sp, sp, #40	; 0x28
   1d674:	e1a04000 	mov	r4, r0
   1d678:	ebfffc98 	bl	1c8e0 <StoreDisplayUdf::Get()>
   1d67c:	e1a01000 	mov	r1, r0
   1d680:	e1a0000d 	mov	r0, sp
   1d684:	eb006b16 	bl	382e4 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
   1d688:	e59f3014 	ldr	r3, [pc, #20]	; 1d6a4 <RemoteConfig::HandleSetDisplayTxt()+0x38>
   1d68c:	e594201c 	ldr	r2, [r4, #28]
   1d690:	e1a0000d 	mov	r0, sp
   1d694:	e5931000 	ldr	r1, [r3]
   1d698:	eb006b3f 	bl	3839c <DisplayUdfParams::Load(char const*, unsigned int)>
   1d69c:	e28dd028 	add	sp, sp, #40	; 0x28
   1d6a0:	e8bd8010 	pop	{r4, pc}
   1d6a4:	0005c3e4 	.word	0x0005c3e4

0001d6a8 <RemoteConfig::HandleSetSparkFunTxt()>:
   1d6a8:	e92d4010 	push	{r4, lr}
   1d6ac:	e24dd020 	sub	sp, sp, #32
   1d6b0:	e1a04000 	mov	r4, r0
   1d6b4:	ebfffc99 	bl	1c920 <StoreSparkFunDmx::Get()>
   1d6b8:	e1a01000 	mov	r1, r0
   1d6bc:	e28d0004 	add	r0, sp, #4
   1d6c0:	eb00363f 	bl	2afc4 <SparkFunDmxParams::SparkFunDmxParams(SparkFunDmxParamsStore*)>
   1d6c4:	e59f3014 	ldr	r3, [pc, #20]	; 1d6e0 <RemoteConfig::HandleSetSparkFunTxt()+0x38>
   1d6c8:	e594201c 	ldr	r2, [r4, #28]
   1d6cc:	e28d0004 	add	r0, sp, #4
   1d6d0:	e5931000 	ldr	r1, [r3]
   1d6d4:	eb00366d 	bl	2b090 <SparkFunDmxParams::Load(char const*, unsigned int)>
   1d6d8:	e28dd020 	add	sp, sp, #32
   1d6dc:	e8bd8010 	pop	{r4, pc}
   1d6e0:	0005c3e4 	.word	0x0005c3e4

0001d6e4 <RemoteConfig::HandleSetMotorTxt(unsigned int)>:
   1d6e4:	e92d4070 	push	{r4, r5, r6, lr}
   1d6e8:	e24dd0b8 	sub	sp, sp, #184	; 0xb8
   1d6ec:	e1a05001 	mov	r5, r1
   1d6f0:	e1a06000 	mov	r6, r0
   1d6f4:	ebfffc89 	bl	1c920 <StoreSparkFunDmx::Get()>
   1d6f8:	e59f40a0 	ldr	r4, [pc, #160]	; 1d7a0 <RemoteConfig::HandleSetMotorTxt(unsigned int)+0xbc>
   1d6fc:	e1a01000 	mov	r1, r0
   1d700:	e1a0000d 	mov	r0, sp
   1d704:	eb00362e 	bl	2afc4 <SparkFunDmxParams::SparkFunDmxParams(SparkFunDmxParamsStore*)>
   1d708:	e596301c 	ldr	r3, [r6, #28]
   1d70c:	e5942000 	ldr	r2, [r4]
   1d710:	e1a01005 	mov	r1, r5
   1d714:	e1a0000d 	mov	r0, sp
   1d718:	eb00369e 	bl	2b198 <SparkFunDmxParams::Load(unsigned int, char const*, unsigned int)>
   1d71c:	ebfffc83 	bl	1c930 <StoreMotors::Get()>
   1d720:	e1a01000 	mov	r1, r0
   1d724:	e28d0078 	add	r0, sp, #120	; 0x78
   1d728:	eb00312c 	bl	29be0 <ModeParams::ModeParams(ModeParamsStore*)>
   1d72c:	e596301c 	ldr	r3, [r6, #28]
   1d730:	e5942000 	ldr	r2, [r4]
   1d734:	e1a01005 	mov	r1, r5
   1d738:	e28d0078 	add	r0, sp, #120	; 0x78
   1d73c:	eb003187 	bl	29d60 <ModeParams::Load(unsigned int, char const*, unsigned int)>
   1d740:	ebfffc7a 	bl	1c930 <StoreMotors::Get()>
   1d744:	e2501000 	subs	r1, r0, #0
   1d748:	12811004 	addne	r1, r1, #4
   1d74c:	e28d001c 	add	r0, sp, #28
   1d750:	eb0037f4 	bl	2b728 <MotorParams::MotorParams(MotorParamsStore*)>
   1d754:	e596301c 	ldr	r3, [r6, #28]
   1d758:	e5942000 	ldr	r2, [r4]
   1d75c:	e1a01005 	mov	r1, r5
   1d760:	e28d001c 	add	r0, sp, #28
   1d764:	eb003826 	bl	2b804 <MotorParams::Load(unsigned int, char const*, unsigned int)>
   1d768:	ebfffc70 	bl	1c930 <StoreMotors::Get()>
   1d76c:	e2501000 	subs	r1, r0, #0
   1d770:	12811008 	addne	r1, r1, #8
   1d774:	e28d0048 	add	r0, sp, #72	; 0x48
   1d778:	eb003351 	bl	2a4c4 <L6470Params::L6470Params(L6470ParamsStore*)>
   1d77c:	e596301c 	ldr	r3, [r6, #28]
   1d780:	e5942000 	ldr	r2, [r4]
   1d784:	e1a01005 	mov	r1, r5
   1d788:	e28d0048 	add	r0, sp, #72	; 0x48
   1d78c:	eb0033ac 	bl	2a644 <L6470Params::Load(unsigned int, char const*, unsigned int)>
   1d790:	e28d0078 	add	r0, sp, #120	; 0x78
   1d794:	eb00313f 	bl	29c98 <ModeParams::~ModeParams()>
   1d798:	e28dd0b8 	add	sp, sp, #184	; 0xb8
   1d79c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d7a0:	0005c3e4 	.word	0x0005c3e4

0001d7a4 <RemoteConfig::HandleSetRdmDeviceTxt()>:
   1d7a4:	e92d4010 	push	{r4, lr}
   1d7a8:	e24dd030 	sub	sp, sp, #48	; 0x30
   1d7ac:	e1a04000 	mov	r4, r0
   1d7b0:	ebfffc62 	bl	1c940 <StoreRDMDevice::Get()>
   1d7b4:	e1a01000 	mov	r1, r0
   1d7b8:	e1a0000d 	mov	r0, sp
   1d7bc:	ebffdbd3 	bl	14710 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
   1d7c0:	e59f3014 	ldr	r3, [pc, #20]	; 1d7dc <RemoteConfig::HandleSetRdmDeviceTxt()+0x38>
   1d7c4:	e594201c 	ldr	r2, [r4, #28]
   1d7c8:	e1a0000d 	mov	r0, sp
   1d7cc:	e5931000 	ldr	r1, [r3]
   1d7d0:	ebffdbff 	bl	147d4 <RDMDeviceParams::Load(char const*, unsigned int)>
   1d7d4:	e28dd030 	add	sp, sp, #48	; 0x30
   1d7d8:	e8bd8010 	pop	{r4, pc}
   1d7dc:	0005c3e4 	.word	0x0005c3e4

0001d7e0 <RemoteConfig::TftpExit()>:
   1d7e0:	e3a03006 	mov	r3, #6
   1d7e4:	e580301c 	str	r3, [r0, #28]
   1d7e8:	e59f300c 	ldr	r3, [pc, #12]	; 1d7fc <RemoteConfig::TftpExit()+0x1c>
   1d7ec:	e3a02030 	mov	r2, #48	; 0x30
   1d7f0:	e5933000 	ldr	r3, [r3]
   1d7f4:	e5c32006 	strb	r2, [r3, #6]
   1d7f8:	ea000000 	b	1d800 <RemoteConfig::HandleTftpSet()>
   1d7fc:	0005c3e4 	.word	0x0005c3e4

0001d800 <RemoteConfig::HandleTftpSet()>:
   1d800:	e590301c 	ldr	r3, [r0, #28]
   1d804:	e3530006 	cmp	r3, #6
   1d808:	112fff1e 	bxne	lr
   1d80c:	e59f3038 	ldr	r3, [pc, #56]	; 1d84c <RemoteConfig::HandleTftpSet()+0x4c>
   1d810:	e92d4010 	push	{r4, lr}
   1d814:	e1a04000 	mov	r4, r0
   1d818:	e5933000 	ldr	r3, [r3]
   1d81c:	e5d33006 	ldrb	r3, [r3, #6]
   1d820:	e3530030 	cmp	r3, #48	; 0x30
   1d824:	13a03001 	movne	r3, #1
   1d828:	03a03000 	moveq	r3, #0
   1d82c:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   1d830:	0a000002 	beq	1d840 <RemoteConfig::HandleTftpSet()+0x40>
   1d834:	ebffd26d 	bl	121f0 <Display::Get()>
   1d838:	e3a01000 	mov	r1, #0
   1d83c:	ebffd20f 	bl	12080 <Display::SetSleep(bool)>
   1d840:	e1a00004 	mov	r0, r4
   1d844:	e8bd4010 	pop	{r4, lr}
   1d848:	ea000027 	b	1d8ec <RemoteConfig::PlatformHandleTftpSet()>
   1d84c:	0005c3e4 	.word	0x0005c3e4

0001d850 <RemoteConfig::HandleTftpGet()>:
   1d850:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   1d854:	e1a04000 	mov	r4, r0
   1d858:	eb00002b 	bl	1d90c <RemoteConfig::PlatformHandleTftpGet()>
   1d85c:	e594301c 	ldr	r3, [r4, #28]
   1d860:	e3530005 	cmp	r3, #5
   1d864:	1a000013 	bne	1d8b8 <RemoteConfig::HandleTftpGet()+0x68>
   1d868:	e5d41024 	ldrb	r1, [r4, #36]	; 0x24
   1d86c:	e59f504c 	ldr	r5, [pc, #76]	; 1d8c0 <RemoteConfig::HandleTftpGet()+0x70>
   1d870:	e59f204c 	ldr	r2, [pc, #76]	; 1d8c4 <RemoteConfig::HandleTftpGet()+0x74>
   1d874:	e3510000 	cmp	r1, #0
   1d878:	e59f3048 	ldr	r3, [pc, #72]	; 1d8c8 <RemoteConfig::HandleTftpGet()+0x78>
   1d87c:	e59f1048 	ldr	r1, [pc, #72]	; 1d8cc <RemoteConfig::HandleTftpGet()+0x7c>
   1d880:	01a03002 	moveq	r3, r2
   1d884:	e5950000 	ldr	r0, [r5]
   1d888:	e59f2040 	ldr	r2, [pc, #64]	; 1d8d0 <RemoteConfig::HandleTftpGet()+0x80>
   1d88c:	ebffce79 	bl	11278 <snprintf@plt>
   1d890:	e1a06000 	mov	r6, r0
   1d894:	ebffeb93 	bl	186e8 <Network::Get()>
   1d898:	e59f3034 	ldr	r3, [pc, #52]	; 1d8d4 <RemoteConfig::HandleTftpGet()+0x84>
   1d89c:	e5952000 	ldr	r2, [r5]
   1d8a0:	e58d3004 	str	r3, [sp, #4]
   1d8a4:	e5943018 	ldr	r3, [r4, #24]
   1d8a8:	e5941014 	ldr	r1, [r4, #20]
   1d8ac:	e58d3000 	str	r3, [sp]
   1d8b0:	e6ff3076 	uxth	r3, r6
   1d8b4:	eb0063ca 	bl	367e4 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>
   1d8b8:	e28dd008 	add	sp, sp, #8
   1d8bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d8c0:	0005c3e4 	.word	0x0005c3e4
   1d8c4:	000461b8 	.word	0x000461b8
   1d8c8:	000461b5 	.word	0x000461b5
   1d8cc:	000003ff 	.word	0x000003ff
   1d8d0:	000461d4 	.word	0x000461d4
   1d8d4:	00002905 	.word	0x00002905

0001d8d8 <Network::GetIp() const [clone .isra.0]>:
   1d8d8:	e12fff1e 	bx	lr

0001d8dc <FirmwareVersion::GetPrint() [clone .isra.1]>:
   1d8dc:	e59f0000 	ldr	r0, [pc]	; 1d8e4 <FirmwareVersion::GetPrint() [clone .isra.1]+0x8>
   1d8e0:	e12fff1e 	bx	lr
   1d8e4:	0005f398 	.word	0x0005f398

0001d8e8 <Display::isSleep() const [clone .isra.2]>:
   1d8e8:	e12fff1e 	bx	lr

0001d8ec <RemoteConfig::PlatformHandleTftpSet()>:
   1d8ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1d8f0:	e28db000 	add	fp, sp, #0
   1d8f4:	e24dd00c 	sub	sp, sp, #12
   1d8f8:	e50b0008 	str	r0, [fp, #-8]
   1d8fc:	e1a00000 	nop			; (mov r0, r0)
   1d900:	e28bd000 	add	sp, fp, #0
   1d904:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1d908:	e12fff1e 	bx	lr

0001d90c <RemoteConfig::PlatformHandleTftpGet()>:
   1d90c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1d910:	e28db000 	add	fp, sp, #0
   1d914:	e24dd00c 	sub	sp, sp, #12
   1d918:	e50b0008 	str	r0, [fp, #-8]
   1d91c:	e1a00000 	nop			; (mov r0, r0)
   1d920:	e28bd000 	add	sp, fp, #0
   1d924:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1d928:	e12fff1e 	bx	lr

0001d92c <Network::Shutdown()>:
   1d92c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1d930:	e28db000 	add	fp, sp, #0
   1d934:	e24dd00c 	sub	sp, sp, #12
   1d938:	e50b0008 	str	r0, [fp, #-8]
   1d93c:	e1a00000 	nop			; (mov r0, r0)
   1d940:	e28bd000 	add	sp, fp, #0
   1d944:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1d948:	e12fff1e 	bx	lr

0001d94c <Display::Cls()>:
   1d94c:	e92d4800 	push	{fp, lr}
   1d950:	e28db004 	add	fp, sp, #4
   1d954:	e24dd008 	sub	sp, sp, #8
   1d958:	e50b0008 	str	r0, [fp, #-8]
   1d95c:	e51b3008 	ldr	r3, [fp, #-8]
   1d960:	e5933018 	ldr	r3, [r3, #24]
   1d964:	e3530000 	cmp	r3, #0
   1d968:	0a000009 	beq	1d994 <Display::Cls()+0x48>
   1d96c:	e51b3008 	ldr	r3, [fp, #-8]
   1d970:	e5932018 	ldr	r2, [r3, #24]
   1d974:	e51b3008 	ldr	r3, [fp, #-8]
   1d978:	e5933018 	ldr	r3, [r3, #24]
   1d97c:	e5933000 	ldr	r3, [r3]
   1d980:	e283300c 	add	r3, r3, #12
   1d984:	e5933000 	ldr	r3, [r3]
   1d988:	e1a00002 	mov	r0, r2
   1d98c:	e12fff33 	blx	r3
   1d990:	ea000000 	b	1d998 <Display::Cls()+0x4c>
   1d994:	e1a00000 	nop			; (mov r0, r0)
   1d998:	e24bd004 	sub	sp, fp, #4
   1d99c:	e8bd8800 	pop	{fp, pc}

0001d9a0 <RemoteConfig::HandleReboot()>:
   1d9a0:	e92d4800 	push	{fp, lr}
   1d9a4:	e28db004 	add	fp, sp, #4
   1d9a8:	e24dd008 	sub	sp, sp, #8
   1d9ac:	e50b0008 	str	r0, [fp, #-8]
   1d9b0:	e51b3008 	ldr	r3, [fp, #-8]
   1d9b4:	e5d3300e 	ldrb	r3, [r3, #14]
   1d9b8:	e2233001 	eor	r3, r3, #1
   1d9bc:	e6ef3073 	uxtb	r3, r3
   1d9c0:	e3530000 	cmp	r3, #0
   1d9c4:	1a000020 	bne	1da4c <RemoteConfig::HandleReboot()+0xac>
   1d9c8:	e51b3008 	ldr	r3, [fp, #-8]
   1d9cc:	e3a02001 	mov	r2, #1
   1d9d0:	e5c32011 	strb	r2, [r3, #17]
   1d9d4:	ebffd205 	bl	121f0 <Display::Get()>
   1d9d8:	e1a03000 	mov	r3, r0
   1d9dc:	e3a01000 	mov	r1, #0
   1d9e0:	e1a00003 	mov	r0, r3
   1d9e4:	ebffd1a5 	bl	12080 <Display::SetSleep(bool)>
   1d9e8:	ebffcf71 	bl	117b4 <ConfigStore::Get()>
   1d9ec:	e1a03000 	mov	r3, r0
   1d9f0:	e1a00003 	mov	r0, r3
   1d9f4:	eb0056aa 	bl	334a4 <ConfigStore::Flash()>
   1d9f8:	e1a03000 	mov	r3, r0
   1d9fc:	e3530000 	cmp	r3, #0
   1da00:	0a000000 	beq	1da08 <RemoteConfig::HandleReboot()+0x68>
   1da04:	eafffff7 	b	1d9e8 <RemoteConfig::HandleReboot()+0x48>
   1da08:	ebffeb36 	bl	186e8 <Network::Get()>
   1da0c:	e1a03000 	mov	r3, r0
   1da10:	e1a00003 	mov	r0, r3
   1da14:	ebffffc4 	bl	1d92c <Network::Shutdown()>
   1da18:	ebffd1f4 	bl	121f0 <Display::Get()>
   1da1c:	e1a03000 	mov	r3, r0
   1da20:	e1a00003 	mov	r0, r3
   1da24:	ebffffc8 	bl	1d94c <Display::Cls()>
   1da28:	ebffd1f0 	bl	121f0 <Display::Get()>
   1da2c:	e3e03000 	mvn	r3, #0
   1da30:	e59f2020 	ldr	r2, [pc, #32]	; 1da58 <RemoteConfig::HandleReboot()+0xb8>
   1da34:	e59f1020 	ldr	r1, [pc, #32]	; 1da5c <RemoteConfig::HandleReboot()+0xbc>
   1da38:	ebffd126 	bl	11ed8 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
   1da3c:	ebffceef 	bl	11600 <Hardware::Get()>
   1da40:	e1a03000 	mov	r3, r0
   1da44:	e1a00003 	mov	r0, r3
   1da48:	eb0088e8 	bl	3fdf0 <Hardware::Reboot()>
   1da4c:	e1a00000 	nop			; (mov r0, r0)
   1da50:	e24bd004 	sub	sp, fp, #4
   1da54:	e8bd8800 	pop	{fp, pc}
   1da58:	00004040 	.word	0x00004040
   1da5c:	00046240 	.word	0x00046240

0001da60 <RemoteConfig::HandleFactory()>:
   1da60:	e92d4800 	push	{fp, lr}
   1da64:	e28db004 	add	fp, sp, #4
   1da68:	e24dd010 	sub	sp, sp, #16
   1da6c:	e50b0010 	str	r0, [fp, #-16]
   1da70:	e3a03000 	mov	r3, #0
   1da74:	e50b3008 	str	r3, [fp, #-8]
   1da78:	e51b3008 	ldr	r3, [fp, #-8]
   1da7c:	e353001b 	cmp	r3, #27
   1da80:	8a000009 	bhi	1daac <RemoteConfig::HandleFactory()+0x4c>
   1da84:	ebffcf4a 	bl	117b4 <ConfigStore::Get()>
   1da88:	e1a02000 	mov	r2, r0
   1da8c:	e51b3008 	ldr	r3, [fp, #-8]
   1da90:	e1a01003 	mov	r1, r3
   1da94:	e1a00002 	mov	r0, r2
   1da98:	eb00556e 	bl	33058 <ConfigStore::ResetSetList(configstore::Store)>
   1da9c:	e51b3008 	ldr	r3, [fp, #-8]
   1daa0:	e2833001 	add	r3, r3, #1
   1daa4:	e50b3008 	str	r3, [fp, #-8]
   1daa8:	eafffff2 	b	1da78 <RemoteConfig::HandleFactory()+0x18>
   1daac:	e1a00000 	nop			; (mov r0, r0)
   1dab0:	e24bd004 	sub	sp, fp, #4
   1dab4:	e8bd8800 	pop	{fp, pc}

0001dab8 <RemoteConfig::HandleGetMotor0Txt(unsigned int&)>:
   1dab8:	e92d4800 	push	{fp, lr}
   1dabc:	e28db004 	add	fp, sp, #4
   1dac0:	e24dd008 	sub	sp, sp, #8
   1dac4:	e50b0008 	str	r0, [fp, #-8]
   1dac8:	e50b100c 	str	r1, [fp, #-12]
   1dacc:	e51b200c 	ldr	r2, [fp, #-12]
   1dad0:	e3a01000 	mov	r1, #0
   1dad4:	e51b0008 	ldr	r0, [fp, #-8]
   1dad8:	ebfffe10 	bl	1d320 <RemoteConfig::HandleGetMotorTxt(unsigned int, unsigned int&)>
   1dadc:	e1a00000 	nop			; (mov r0, r0)
   1dae0:	e24bd004 	sub	sp, fp, #4
   1dae4:	e8bd8800 	pop	{fp, pc}

0001dae8 <RemoteConfig::HandleGetMotor1Txt(unsigned int&)>:
   1dae8:	e92d4800 	push	{fp, lr}
   1daec:	e28db004 	add	fp, sp, #4
   1daf0:	e24dd008 	sub	sp, sp, #8
   1daf4:	e50b0008 	str	r0, [fp, #-8]
   1daf8:	e50b100c 	str	r1, [fp, #-12]
   1dafc:	e51b200c 	ldr	r2, [fp, #-12]
   1db00:	e3a01001 	mov	r1, #1
   1db04:	e51b0008 	ldr	r0, [fp, #-8]
   1db08:	ebfffe04 	bl	1d320 <RemoteConfig::HandleGetMotorTxt(unsigned int, unsigned int&)>
   1db0c:	e1a00000 	nop			; (mov r0, r0)
   1db10:	e24bd004 	sub	sp, fp, #4
   1db14:	e8bd8800 	pop	{fp, pc}

0001db18 <RemoteConfig::HandleGetMotor2Txt(unsigned int&)>:
   1db18:	e92d4800 	push	{fp, lr}
   1db1c:	e28db004 	add	fp, sp, #4
   1db20:	e24dd008 	sub	sp, sp, #8
   1db24:	e50b0008 	str	r0, [fp, #-8]
   1db28:	e50b100c 	str	r1, [fp, #-12]
   1db2c:	e51b200c 	ldr	r2, [fp, #-12]
   1db30:	e3a01002 	mov	r1, #2
   1db34:	e51b0008 	ldr	r0, [fp, #-8]
   1db38:	ebfffdf8 	bl	1d320 <RemoteConfig::HandleGetMotorTxt(unsigned int, unsigned int&)>
   1db3c:	e1a00000 	nop			; (mov r0, r0)
   1db40:	e24bd004 	sub	sp, fp, #4
   1db44:	e8bd8800 	pop	{fp, pc}

0001db48 <RemoteConfig::HandleGetMotor3Txt(unsigned int&)>:
   1db48:	e92d4800 	push	{fp, lr}
   1db4c:	e28db004 	add	fp, sp, #4
   1db50:	e24dd008 	sub	sp, sp, #8
   1db54:	e50b0008 	str	r0, [fp, #-8]
   1db58:	e50b100c 	str	r1, [fp, #-12]
   1db5c:	e51b200c 	ldr	r2, [fp, #-12]
   1db60:	e3a01003 	mov	r1, #3
   1db64:	e51b0008 	ldr	r0, [fp, #-8]
   1db68:	ebfffdec 	bl	1d320 <RemoteConfig::HandleGetMotorTxt(unsigned int, unsigned int&)>
   1db6c:	e1a00000 	nop			; (mov r0, r0)
   1db70:	e24bd004 	sub	sp, fp, #4
   1db74:	e8bd8800 	pop	{fp, pc}

0001db78 <RemoteConfig::HandleGetMotor4Txt(unsigned int&)>:
   1db78:	e92d4800 	push	{fp, lr}
   1db7c:	e28db004 	add	fp, sp, #4
   1db80:	e24dd008 	sub	sp, sp, #8
   1db84:	e50b0008 	str	r0, [fp, #-8]
   1db88:	e50b100c 	str	r1, [fp, #-12]
   1db8c:	e51b200c 	ldr	r2, [fp, #-12]
   1db90:	e3a01004 	mov	r1, #4
   1db94:	e51b0008 	ldr	r0, [fp, #-8]
   1db98:	ebfffde0 	bl	1d320 <RemoteConfig::HandleGetMotorTxt(unsigned int, unsigned int&)>
   1db9c:	e1a00000 	nop			; (mov r0, r0)
   1dba0:	e24bd004 	sub	sp, fp, #4
   1dba4:	e8bd8800 	pop	{fp, pc}

0001dba8 <RemoteConfig::HandleGetMotor5Txt(unsigned int&)>:
   1dba8:	e92d4800 	push	{fp, lr}
   1dbac:	e28db004 	add	fp, sp, #4
   1dbb0:	e24dd008 	sub	sp, sp, #8
   1dbb4:	e50b0008 	str	r0, [fp, #-8]
   1dbb8:	e50b100c 	str	r1, [fp, #-12]
   1dbbc:	e51b200c 	ldr	r2, [fp, #-12]
   1dbc0:	e3a01005 	mov	r1, #5
   1dbc4:	e51b0008 	ldr	r0, [fp, #-8]
   1dbc8:	ebfffdd4 	bl	1d320 <RemoteConfig::HandleGetMotorTxt(unsigned int, unsigned int&)>
   1dbcc:	e1a00000 	nop			; (mov r0, r0)
   1dbd0:	e24bd004 	sub	sp, fp, #4
   1dbd4:	e8bd8800 	pop	{fp, pc}

0001dbd8 <RemoteConfig::HandleGetMotor6Txt(unsigned int&)>:
   1dbd8:	e92d4800 	push	{fp, lr}
   1dbdc:	e28db004 	add	fp, sp, #4
   1dbe0:	e24dd008 	sub	sp, sp, #8
   1dbe4:	e50b0008 	str	r0, [fp, #-8]
   1dbe8:	e50b100c 	str	r1, [fp, #-12]
   1dbec:	e51b200c 	ldr	r2, [fp, #-12]
   1dbf0:	e3a01006 	mov	r1, #6
   1dbf4:	e51b0008 	ldr	r0, [fp, #-8]
   1dbf8:	ebfffdc8 	bl	1d320 <RemoteConfig::HandleGetMotorTxt(unsigned int, unsigned int&)>
   1dbfc:	e1a00000 	nop			; (mov r0, r0)
   1dc00:	e24bd004 	sub	sp, fp, #4
   1dc04:	e8bd8800 	pop	{fp, pc}

0001dc08 <RemoteConfig::HandleGetMotor7Txt(unsigned int&)>:
   1dc08:	e92d4800 	push	{fp, lr}
   1dc0c:	e28db004 	add	fp, sp, #4
   1dc10:	e24dd008 	sub	sp, sp, #8
   1dc14:	e50b0008 	str	r0, [fp, #-8]
   1dc18:	e50b100c 	str	r1, [fp, #-12]
   1dc1c:	e51b200c 	ldr	r2, [fp, #-12]
   1dc20:	e3a01007 	mov	r1, #7
   1dc24:	e51b0008 	ldr	r0, [fp, #-8]
   1dc28:	ebfffdbc 	bl	1d320 <RemoteConfig::HandleGetMotorTxt(unsigned int, unsigned int&)>
   1dc2c:	e1a00000 	nop			; (mov r0, r0)
   1dc30:	e24bd004 	sub	sp, fp, #4
   1dc34:	e8bd8800 	pop	{fp, pc}

0001dc38 <RemoteConfig::HandleSetMotor0Txt()>:
   1dc38:	e92d4800 	push	{fp, lr}
   1dc3c:	e28db004 	add	fp, sp, #4
   1dc40:	e24dd008 	sub	sp, sp, #8
   1dc44:	e50b0008 	str	r0, [fp, #-8]
   1dc48:	e3a01000 	mov	r1, #0
   1dc4c:	e51b0008 	ldr	r0, [fp, #-8]
   1dc50:	ebfffea3 	bl	1d6e4 <RemoteConfig::HandleSetMotorTxt(unsigned int)>
   1dc54:	e1a00000 	nop			; (mov r0, r0)
   1dc58:	e24bd004 	sub	sp, fp, #4
   1dc5c:	e8bd8800 	pop	{fp, pc}

0001dc60 <RemoteConfig::HandleSetMotor1Txt()>:
   1dc60:	e92d4800 	push	{fp, lr}
   1dc64:	e28db004 	add	fp, sp, #4
   1dc68:	e24dd008 	sub	sp, sp, #8
   1dc6c:	e50b0008 	str	r0, [fp, #-8]
   1dc70:	e3a01001 	mov	r1, #1
   1dc74:	e51b0008 	ldr	r0, [fp, #-8]
   1dc78:	ebfffe99 	bl	1d6e4 <RemoteConfig::HandleSetMotorTxt(unsigned int)>
   1dc7c:	e1a00000 	nop			; (mov r0, r0)
   1dc80:	e24bd004 	sub	sp, fp, #4
   1dc84:	e8bd8800 	pop	{fp, pc}

0001dc88 <RemoteConfig::HandleSetMotor2Txt()>:
   1dc88:	e92d4800 	push	{fp, lr}
   1dc8c:	e28db004 	add	fp, sp, #4
   1dc90:	e24dd008 	sub	sp, sp, #8
   1dc94:	e50b0008 	str	r0, [fp, #-8]
   1dc98:	e3a01002 	mov	r1, #2
   1dc9c:	e51b0008 	ldr	r0, [fp, #-8]
   1dca0:	ebfffe8f 	bl	1d6e4 <RemoteConfig::HandleSetMotorTxt(unsigned int)>
   1dca4:	e1a00000 	nop			; (mov r0, r0)
   1dca8:	e24bd004 	sub	sp, fp, #4
   1dcac:	e8bd8800 	pop	{fp, pc}

0001dcb0 <RemoteConfig::HandleSetMotor3Txt()>:
   1dcb0:	e92d4800 	push	{fp, lr}
   1dcb4:	e28db004 	add	fp, sp, #4
   1dcb8:	e24dd008 	sub	sp, sp, #8
   1dcbc:	e50b0008 	str	r0, [fp, #-8]
   1dcc0:	e3a01003 	mov	r1, #3
   1dcc4:	e51b0008 	ldr	r0, [fp, #-8]
   1dcc8:	ebfffe85 	bl	1d6e4 <RemoteConfig::HandleSetMotorTxt(unsigned int)>
   1dccc:	e1a00000 	nop			; (mov r0, r0)
   1dcd0:	e24bd004 	sub	sp, fp, #4
   1dcd4:	e8bd8800 	pop	{fp, pc}

0001dcd8 <RemoteConfig::HandleSetMotor4Txt()>:
   1dcd8:	e92d4800 	push	{fp, lr}
   1dcdc:	e28db004 	add	fp, sp, #4
   1dce0:	e24dd008 	sub	sp, sp, #8
   1dce4:	e50b0008 	str	r0, [fp, #-8]
   1dce8:	e3a01004 	mov	r1, #4
   1dcec:	e51b0008 	ldr	r0, [fp, #-8]
   1dcf0:	ebfffe7b 	bl	1d6e4 <RemoteConfig::HandleSetMotorTxt(unsigned int)>
   1dcf4:	e1a00000 	nop			; (mov r0, r0)
   1dcf8:	e24bd004 	sub	sp, fp, #4
   1dcfc:	e8bd8800 	pop	{fp, pc}

0001dd00 <RemoteConfig::HandleSetMotor5Txt()>:
   1dd00:	e92d4800 	push	{fp, lr}
   1dd04:	e28db004 	add	fp, sp, #4
   1dd08:	e24dd008 	sub	sp, sp, #8
   1dd0c:	e50b0008 	str	r0, [fp, #-8]
   1dd10:	e3a01005 	mov	r1, #5
   1dd14:	e51b0008 	ldr	r0, [fp, #-8]
   1dd18:	ebfffe71 	bl	1d6e4 <RemoteConfig::HandleSetMotorTxt(unsigned int)>
   1dd1c:	e1a00000 	nop			; (mov r0, r0)
   1dd20:	e24bd004 	sub	sp, fp, #4
   1dd24:	e8bd8800 	pop	{fp, pc}

0001dd28 <RemoteConfig::HandleSetMotor6Txt()>:
   1dd28:	e92d4800 	push	{fp, lr}
   1dd2c:	e28db004 	add	fp, sp, #4
   1dd30:	e24dd008 	sub	sp, sp, #8
   1dd34:	e50b0008 	str	r0, [fp, #-8]
   1dd38:	e3a01006 	mov	r1, #6
   1dd3c:	e51b0008 	ldr	r0, [fp, #-8]
   1dd40:	ebfffe67 	bl	1d6e4 <RemoteConfig::HandleSetMotorTxt(unsigned int)>
   1dd44:	e1a00000 	nop			; (mov r0, r0)
   1dd48:	e24bd004 	sub	sp, fp, #4
   1dd4c:	e8bd8800 	pop	{fp, pc}

0001dd50 <RemoteConfig::HandleSetMotor7Txt()>:
   1dd50:	e92d4800 	push	{fp, lr}
   1dd54:	e28db004 	add	fp, sp, #4
   1dd58:	e24dd008 	sub	sp, sp, #8
   1dd5c:	e50b0008 	str	r0, [fp, #-8]
   1dd60:	e3a01007 	mov	r1, #7
   1dd64:	e51b0008 	ldr	r0, [fp, #-8]
   1dd68:	ebfffe5d 	bl	1d6e4 <RemoteConfig::HandleSetMotorTxt(unsigned int)>
   1dd6c:	e1a00000 	nop			; (mov r0, r0)
   1dd70:	e24bd004 	sub	sp, fp, #4
   1dd74:	e8bd8800 	pop	{fp, pc}

0001dd78 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
   1dd78:	e92d4810 	push	{r4, fp, lr}
   1dd7c:	e28db008 	add	fp, sp, #8
   1dd80:	e24dd024 	sub	sp, sp, #36	; 0x24
   1dd84:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   1dd88:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   1dd8c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   1dd90:	e3a03000 	mov	r3, #0
   1dd94:	e50b3010 	str	r3, [fp, #-16]
   1dd98:	e51b3010 	ldr	r3, [fp, #-16]
   1dd9c:	e353000f 	cmp	r3, #15
   1dda0:	ca000028 	bgt	1de48 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xd0>
   1dda4:	e51b2010 	ldr	r2, [fp, #-16]
   1dda8:	e1a03002 	mov	r3, r2
   1ddac:	e1a03183 	lsl	r3, r3, #3
   1ddb0:	e0433002 	sub	r3, r3, r2
   1ddb4:	e1a03103 	lsl	r3, r3, #2
   1ddb8:	e59f2098 	ldr	r2, [pc, #152]	; 1de58 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xe0>
   1ddbc:	e0833002 	add	r3, r3, r2
   1ddc0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   1ddc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1ddc8:	e5934010 	ldr	r4, [r3, #16]
   1ddcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1ddd0:	e5d33014 	ldrb	r3, [r3, #20]
   1ddd4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   1ddd8:	e24b3018 	sub	r3, fp, #24
   1dddc:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   1dde0:	e1a00003 	mov	r0, r3
   1dde4:	ebffd576 	bl	133c4 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>
   1dde8:	e1a03000 	mov	r3, r0
   1ddec:	e5933000 	ldr	r3, [r3]
   1ddf0:	e1a02003 	mov	r2, r3
   1ddf4:	e1a01004 	mov	r1, r4
   1ddf8:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ddfc:	ebffcdad 	bl	114b8 <memcmp@plt>
   1de00:	e1a03000 	mov	r3, r0
   1de04:	e3530000 	cmp	r3, #0
   1de08:	03a03001 	moveq	r3, #1
   1de0c:	13a03000 	movne	r3, #0
   1de10:	e6ef3073 	uxtb	r3, r3
   1de14:	e3530000 	cmp	r3, #0
   1de18:	0a000006 	beq	1de38 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc0>
   1de1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1de20:	e5d33014 	ldrb	r3, [r3, #20]
   1de24:	e1a02003 	mov	r2, r3
   1de28:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1de2c:	e5832000 	str	r2, [r3]
   1de30:	e51b3010 	ldr	r3, [fp, #-16]
   1de34:	ea000004 	b	1de4c <RemoteConfig::GetIndex(void const*, unsigned int&)+0xd4>
   1de38:	e51b3010 	ldr	r3, [fp, #-16]
   1de3c:	e2833001 	add	r3, r3, #1
   1de40:	e50b3010 	str	r3, [fp, #-16]
   1de44:	eaffffd3 	b	1dd98 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x20>
   1de48:	e3e03000 	mvn	r3, #0
   1de4c:	e1a00003 	mov	r0, r3
   1de50:	e24bd008 	sub	sp, fp, #8
   1de54:	e8bd8810 	pop	{r4, fp, pc}
   1de58:	000463b0 	.word	0x000463b0

0001de5c <ArtNet4Handler::~ArtNet4Handler()>:
   1de5c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1de60:	e28db000 	add	fp, sp, #0
   1de64:	e24dd00c 	sub	sp, sp, #12
   1de68:	e50b0008 	str	r0, [fp, #-8]
   1de6c:	e59f2018 	ldr	r2, [pc, #24]	; 1de8c <ArtNet4Handler::~ArtNet4Handler()+0x30>
   1de70:	e51b3008 	ldr	r3, [fp, #-8]
   1de74:	e5832000 	str	r2, [r3]
   1de78:	e51b3008 	ldr	r3, [fp, #-8]
   1de7c:	e1a00003 	mov	r0, r3
   1de80:	e28bd000 	add	sp, fp, #0
   1de84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1de88:	e12fff1e 	bx	lr
   1de8c:	00046684 	.word	0x00046684

0001de90 <ArtNet4Handler::~ArtNet4Handler()>:
   1de90:	e92d4800 	push	{fp, lr}
   1de94:	e28db004 	add	fp, sp, #4
   1de98:	e24dd008 	sub	sp, sp, #8
   1de9c:	e50b0008 	str	r0, [fp, #-8]
   1dea0:	e51b0008 	ldr	r0, [fp, #-8]
   1dea4:	ebffffec 	bl	1de5c <ArtNet4Handler::~ArtNet4Handler()>
   1dea8:	e51b0008 	ldr	r0, [fp, #-8]
   1deac:	ebffcd15 	bl	11308 <operator delete(void*)@plt>
   1deb0:	e51b3008 	ldr	r3, [fp, #-8]
   1deb4:	e1a00003 	mov	r0, r3
   1deb8:	e24bd004 	sub	sp, fp, #4
   1debc:	e8bd8800 	pop	{fp, pc}

0001dec0 <ArtNetNode::GetOutput() const>:
   1dec0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1dec4:	e28db000 	add	fp, sp, #0
   1dec8:	e24dd00c 	sub	sp, sp, #12
   1decc:	e50b0008 	str	r0, [fp, #-8]
   1ded0:	e51b3008 	ldr	r3, [fp, #-8]
   1ded4:	e5933a50 	ldr	r3, [r3, #2640]	; 0xa50
   1ded8:	e1a00003 	mov	r0, r3
   1dedc:	e28bd000 	add	sp, fp, #0
   1dee0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1dee4:	e12fff1e 	bx	lr

0001dee8 <ArtNetNode::GetMergeMode(unsigned int) const>:
   1dee8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1deec:	e28db000 	add	fp, sp, #0
   1def0:	e24dd00c 	sub	sp, sp, #12
   1def4:	e50b0008 	str	r0, [fp, #-8]
   1def8:	e50b100c 	str	r1, [fp, #-12]
   1defc:	e51b2008 	ldr	r2, [fp, #-8]
   1df00:	e51b300c 	ldr	r3, [fp, #-12]
   1df04:	e1a03283 	lsl	r3, r3, #5
   1df08:	e0823003 	add	r3, r2, r3
   1df0c:	e5d330b2 	ldrb	r3, [r3, #178]	; 0xb2
   1df10:	e2033002 	and	r3, r3, #2
   1df14:	e3530000 	cmp	r3, #0
   1df18:	0a000001 	beq	1df24 <ArtNetNode::GetMergeMode(unsigned int) const+0x3c>
   1df1c:	e3a03001 	mov	r3, #1
   1df20:	ea000000 	b	1df28 <ArtNetNode::GetMergeMode(unsigned int) const+0x40>
   1df24:	e3a03000 	mov	r3, #0
   1df28:	e1a00003 	mov	r0, r3
   1df2c:	e28bd000 	add	sp, fp, #0
   1df30:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1df34:	e12fff1e 	bx	lr

0001df38 <ArtNetNode::GetDisableMergeTimeout() const>:
   1df38:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1df3c:	e28db000 	add	fp, sp, #0
   1df40:	e24dd00c 	sub	sp, sp, #12
   1df44:	e50b0008 	str	r0, [fp, #-8]
   1df48:	e51b3008 	ldr	r3, [fp, #-8]
   1df4c:	e5d3308c 	ldrb	r3, [r3, #140]	; 0x8c
   1df50:	e1a00003 	mov	r0, r3
   1df54:	e28bd000 	add	sp, fp, #0
   1df58:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1df5c:	e12fff1e 	bx	lr

0001df60 <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>:
   1df60:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1df64:	e28db000 	add	fp, sp, #0
   1df68:	e24dd00c 	sub	sp, sp, #12
   1df6c:	e50b0008 	str	r0, [fp, #-8]
   1df70:	e50b100c 	str	r1, [fp, #-12]
   1df74:	e51b3008 	ldr	r3, [fp, #-8]
   1df78:	e51b200c 	ldr	r2, [fp, #-12]
   1df7c:	e5832a60 	str	r2, [r3, #2656]	; 0xa60
   1df80:	e1a00000 	nop			; (mov r0, r0)
   1df84:	e28bd000 	add	sp, fp, #0
   1df88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1df8c:	e12fff1e 	bx	lr

0001df90 <ArtNetNode::GetPortProtocol(unsigned int) const>:
   1df90:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1df94:	e28db000 	add	fp, sp, #0
   1df98:	e24dd00c 	sub	sp, sp, #12
   1df9c:	e50b0008 	str	r0, [fp, #-8]
   1dfa0:	e50b100c 	str	r1, [fp, #-12]
   1dfa4:	e51b2008 	ldr	r2, [fp, #-8]
   1dfa8:	e51b300c 	ldr	r3, [fp, #-12]
   1dfac:	e1a03283 	lsl	r3, r3, #5
   1dfb0:	e0823003 	add	r3, r2, r3
   1dfb4:	e59330ac 	ldr	r3, [r3, #172]	; 0xac
   1dfb8:	e1a00003 	mov	r0, r3
   1dfbc:	e28bd000 	add	sp, fp, #0
   1dfc0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1dfc4:	e12fff1e 	bx	lr

0001dfc8 <ArtNetNode::IsMapUniverse0()>:
   1dfc8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1dfcc:	e28db000 	add	fp, sp, #0
   1dfd0:	e24dd00c 	sub	sp, sp, #12
   1dfd4:	e50b0008 	str	r0, [fp, #-8]
   1dfd8:	e51b3008 	ldr	r3, [fp, #-8]
   1dfdc:	e5d33070 	ldrb	r3, [r3, #112]	; 0x70
   1dfe0:	e1a00003 	mov	r0, r3
   1dfe4:	e28bd000 	add	sp, fp, #0
   1dfe8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1dfec:	e12fff1e 	bx	lr

0001dff0 <lightset::Data::Get()>:
   1dff0:	e92d4800 	push	{fp, lr}
   1dff4:	e28db004 	add	fp, sp, #4
   1dff8:	e59f3064 	ldr	r3, [pc, #100]	; 1e064 <lightset::Data::Get()+0x74>
   1dffc:	e5d33000 	ldrb	r3, [r3]
   1e000:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
   1e004:	e6ef3073 	uxtb	r3, r3
   1e008:	e2033001 	and	r3, r3, #1
   1e00c:	e3530000 	cmp	r3, #0
   1e010:	03a03001 	moveq	r3, #1
   1e014:	13a03000 	movne	r3, #0
   1e018:	e6ef3073 	uxtb	r3, r3
   1e01c:	e3530000 	cmp	r3, #0
   1e020:	0a00000c 	beq	1e058 <lightset::Data::Get()+0x68>
   1e024:	e59f0038 	ldr	r0, [pc, #56]	; 1e064 <lightset::Data::Get()+0x74>
   1e028:	ebffcd25 	bl	114c4 <__cxa_guard_acquire@plt>
   1e02c:	e1a03000 	mov	r3, r0
   1e030:	e3530000 	cmp	r3, #0
   1e034:	13a03001 	movne	r3, #1
   1e038:	03a03000 	moveq	r3, #0
   1e03c:	e6ef3073 	uxtb	r3, r3
   1e040:	e3530000 	cmp	r3, #0
   1e044:	0a000003 	beq	1e058 <lightset::Data::Get()+0x68>
   1e048:	e59f0018 	ldr	r0, [pc, #24]	; 1e068 <lightset::Data::Get()+0x78>
   1e04c:	eb000014 	bl	1e0a4 <lightset::Data::Data()>
   1e050:	e59f000c 	ldr	r0, [pc, #12]	; 1e064 <lightset::Data::Get()+0x74>
   1e054:	ebffcc7b 	bl	11248 <__cxa_guard_release@plt>
   1e058:	e59f3008 	ldr	r3, [pc, #8]	; 1e068 <lightset::Data::Get()+0x78>
   1e05c:	e1a00003 	mov	r0, r3
   1e060:	e8bd8800 	pop	{fp, pc}
   1e064:	0005dbf8 	.word	0x0005dbf8
   1e068:	0005c3e8 	.word	0x0005c3e8

0001e06c <lightset::Data::OutputClear(LightSet*, unsigned int)>:
   1e06c:	e92d4800 	push	{fp, lr}
   1e070:	e28db004 	add	fp, sp, #4
   1e074:	e24dd008 	sub	sp, sp, #8
   1e078:	e50b0008 	str	r0, [fp, #-8]
   1e07c:	e50b100c 	str	r1, [fp, #-12]
   1e080:	ebffffda 	bl	1dff0 <lightset::Data::Get()>
   1e084:	e1a03000 	mov	r3, r0
   1e088:	e51b200c 	ldr	r2, [fp, #-12]
   1e08c:	e51b1008 	ldr	r1, [fp, #-8]
   1e090:	e1a00003 	mov	r0, r3
   1e094:	eb000031 	bl	1e160 <lightset::Data::IOutputClear(LightSet*, unsigned int)>
   1e098:	e1a00000 	nop			; (mov r0, r0)
   1e09c:	e24bd004 	sub	sp, fp, #4
   1e0a0:	e8bd8800 	pop	{fp, pc}

0001e0a4 <lightset::Data::Data()>:
   1e0a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1e0a8:	e28db000 	add	fp, sp, #0
   1e0ac:	e24dd00c 	sub	sp, sp, #12
   1e0b0:	e50b0008 	str	r0, [fp, #-8]
   1e0b4:	e51b3008 	ldr	r3, [fp, #-8]
   1e0b8:	e1a00003 	mov	r0, r3
   1e0bc:	e28bd000 	add	sp, fp, #0
   1e0c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1e0c4:	e12fff1e 	bx	lr

0001e0c8 <lightset::Data::IOutput(LightSet*, unsigned int) const>:
   1e0c8:	e92d4810 	push	{r4, fp, lr}
   1e0cc:	e28db008 	add	fp, sp, #8
   1e0d0:	e24dd014 	sub	sp, sp, #20
   1e0d4:	e50b0010 	str	r0, [fp, #-16]
   1e0d8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1e0dc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   1e0e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1e0e4:	e5933000 	ldr	r3, [r3]
   1e0e8:	e2833010 	add	r3, r3, #16
   1e0ec:	e5934000 	ldr	r4, [r3]
   1e0f0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1e0f4:	e1a03002 	mov	r3, r2
   1e0f8:	e1a03083 	lsl	r3, r3, #1
   1e0fc:	e0833002 	add	r3, r3, r2
   1e100:	e1a03383 	lsl	r3, r3, #7
   1e104:	e0833002 	add	r3, r3, r2
   1e108:	e1a03103 	lsl	r3, r3, #2
   1e10c:	e2833b01 	add	r3, r3, #1024	; 0x400
   1e110:	e51b2010 	ldr	r2, [fp, #-16]
   1e114:	e0820003 	add	r0, r2, r3
   1e118:	e51b1010 	ldr	r1, [fp, #-16]
   1e11c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1e120:	e1a03002 	mov	r3, r2
   1e124:	e1a03083 	lsl	r3, r3, #1
   1e128:	e0833002 	add	r3, r3, r2
   1e12c:	e1a03383 	lsl	r3, r3, #7
   1e130:	e0833002 	add	r3, r3, r2
   1e134:	e1a03103 	lsl	r3, r3, #2
   1e138:	e0813003 	add	r3, r1, r3
   1e13c:	e2833c06 	add	r3, r3, #1536	; 0x600
   1e140:	e5933000 	ldr	r3, [r3]
   1e144:	e1a02000 	mov	r2, r0
   1e148:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   1e14c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   1e150:	e12fff34 	blx	r4
   1e154:	e1a00000 	nop			; (mov r0, r0)
   1e158:	e24bd008 	sub	sp, fp, #8
   1e15c:	e8bd8810 	pop	{r4, fp, pc}

0001e160 <lightset::Data::IOutputClear(LightSet*, unsigned int)>:
   1e160:	e92d4800 	push	{fp, lr}
   1e164:	e28db004 	add	fp, sp, #4
   1e168:	e24dd010 	sub	sp, sp, #16
   1e16c:	e50b0008 	str	r0, [fp, #-8]
   1e170:	e50b100c 	str	r1, [fp, #-12]
   1e174:	e50b2010 	str	r2, [fp, #-16]
   1e178:	e51b2010 	ldr	r2, [fp, #-16]
   1e17c:	e1a03002 	mov	r3, r2
   1e180:	e1a03083 	lsl	r3, r3, #1
   1e184:	e0833002 	add	r3, r3, r2
   1e188:	e1a03383 	lsl	r3, r3, #7
   1e18c:	e0833002 	add	r3, r3, r2
   1e190:	e1a03103 	lsl	r3, r3, #2
   1e194:	e2833b01 	add	r3, r3, #1024	; 0x400
   1e198:	e51b2008 	ldr	r2, [fp, #-8]
   1e19c:	e0823003 	add	r3, r2, r3
   1e1a0:	e3a02c02 	mov	r2, #512	; 0x200
   1e1a4:	e3a01000 	mov	r1, #0
   1e1a8:	e1a00003 	mov	r0, r3
   1e1ac:	ebffcc2e 	bl	1126c <memset@plt>
   1e1b0:	e51b1008 	ldr	r1, [fp, #-8]
   1e1b4:	e51b2010 	ldr	r2, [fp, #-16]
   1e1b8:	e1a03002 	mov	r3, r2
   1e1bc:	e1a03083 	lsl	r3, r3, #1
   1e1c0:	e0833002 	add	r3, r3, r2
   1e1c4:	e1a03383 	lsl	r3, r3, #7
   1e1c8:	e0833002 	add	r3, r3, r2
   1e1cc:	e1a03103 	lsl	r3, r3, #2
   1e1d0:	e0813003 	add	r3, r1, r3
   1e1d4:	e2833c06 	add	r3, r3, #1536	; 0x600
   1e1d8:	e3a02c02 	mov	r2, #512	; 0x200
   1e1dc:	e5832000 	str	r2, [r3]
   1e1e0:	e51b2010 	ldr	r2, [fp, #-16]
   1e1e4:	e51b100c 	ldr	r1, [fp, #-12]
   1e1e8:	e51b0008 	ldr	r0, [fp, #-8]
   1e1ec:	ebffffb5 	bl	1e0c8 <lightset::Data::IOutput(LightSet*, unsigned int) const>
   1e1f0:	e1a00000 	nop			; (mov r0, r0)
   1e1f4:	e24bd004 	sub	sp, fp, #4
   1e1f8:	e8bd8800 	pop	{fp, pc}

0001e1fc <E131Bridge::SetOutput(LightSet*)>:
   1e1fc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1e200:	e28db000 	add	fp, sp, #0
   1e204:	e24dd00c 	sub	sp, sp, #12
   1e208:	e50b0008 	str	r0, [fp, #-8]
   1e20c:	e50b100c 	str	r1, [fp, #-12]
   1e210:	e51b3008 	ldr	r3, [fp, #-8]
   1e214:	e51b200c 	ldr	r2, [fp, #-12]
   1e218:	e5832004 	str	r2, [r3, #4]
   1e21c:	e1a00000 	nop			; (mov r0, r0)
   1e220:	e28bd000 	add	sp, fp, #0
   1e224:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1e228:	e12fff1e 	bx	lr

0001e22c <E131Bridge::SetMergeMode(unsigned int, lightset::MergeMode)>:
   1e22c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1e230:	e28db000 	add	fp, sp, #0
   1e234:	e24dd014 	sub	sp, sp, #20
   1e238:	e50b0008 	str	r0, [fp, #-8]
   1e23c:	e50b100c 	str	r1, [fp, #-12]
   1e240:	e50b2010 	str	r2, [fp, #-16]
   1e244:	e51b1008 	ldr	r1, [fp, #-8]
   1e248:	e51b200c 	ldr	r2, [fp, #-12]
   1e24c:	e1a03002 	mov	r3, r2
   1e250:	e1a03203 	lsl	r3, r3, #4
   1e254:	e0833002 	add	r3, r3, r2
   1e258:	e1a03103 	lsl	r3, r3, #2
   1e25c:	e0813003 	add	r3, r1, r3
   1e260:	e2833d15 	add	r3, r3, #1344	; 0x540
   1e264:	e283300c 	add	r3, r3, #12
   1e268:	e51b2010 	ldr	r2, [fp, #-16]
   1e26c:	e5832000 	str	r2, [r3]
   1e270:	e1a00000 	nop			; (mov r0, r0)
   1e274:	e28bd000 	add	sp, fp, #0
   1e278:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1e27c:	e12fff1e 	bx	lr

0001e280 <E131Bridge::GetActiveOutputPorts() const>:
   1e280:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1e284:	e28db000 	add	fp, sp, #0
   1e288:	e24dd00c 	sub	sp, sp, #12
   1e28c:	e50b0008 	str	r0, [fp, #-8]
   1e290:	e51b3008 	ldr	r3, [fp, #-8]
   1e294:	e5d33507 	ldrb	r3, [r3, #1287]	; 0x507
   1e298:	e1a00003 	mov	r0, r3
   1e29c:	e28bd000 	add	sp, fp, #0
   1e2a0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1e2a4:	e12fff1e 	bx	lr

0001e2a8 <E131Bridge::IsTransmitting(unsigned int) const>:
   1e2a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1e2ac:	e28db000 	add	fp, sp, #0
   1e2b0:	e24dd00c 	sub	sp, sp, #12
   1e2b4:	e50b0008 	str	r0, [fp, #-8]
   1e2b8:	e50b100c 	str	r1, [fp, #-12]
   1e2bc:	e51b1008 	ldr	r1, [fp, #-8]
   1e2c0:	e51b200c 	ldr	r2, [fp, #-12]
   1e2c4:	e1a03002 	mov	r3, r2
   1e2c8:	e1a03203 	lsl	r3, r3, #4
   1e2cc:	e0833002 	add	r3, r3, r2
   1e2d0:	e1a03103 	lsl	r3, r3, #2
   1e2d4:	e0813003 	add	r3, r1, r3
   1e2d8:	e2833e55 	add	r3, r3, #1360	; 0x550
   1e2dc:	e2833002 	add	r3, r3, #2
   1e2e0:	e5d33000 	ldrb	r3, [r3]
   1e2e4:	e1a00003 	mov	r0, r3
   1e2e8:	e28bd000 	add	sp, fp, #0
   1e2ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1e2f0:	e12fff1e 	bx	lr

0001e2f4 <E131Bridge::IsMerging(unsigned int) const>:
   1e2f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1e2f8:	e28db000 	add	fp, sp, #0
   1e2fc:	e24dd00c 	sub	sp, sp, #12
   1e300:	e50b0008 	str	r0, [fp, #-8]
   1e304:	e50b100c 	str	r1, [fp, #-12]
   1e308:	e51b1008 	ldr	r1, [fp, #-8]
   1e30c:	e51b200c 	ldr	r2, [fp, #-12]
   1e310:	e1a03002 	mov	r3, r2
   1e314:	e1a03203 	lsl	r3, r3, #4
   1e318:	e0833002 	add	r3, r3, r2
   1e31c:	e1a03103 	lsl	r3, r3, #2
   1e320:	e0813003 	add	r3, r1, r3
   1e324:	e2833e55 	add	r3, r3, #1360	; 0x550
   1e328:	e2833001 	add	r3, r3, #1
   1e32c:	e5d33000 	ldrb	r3, [r3]
   1e330:	e1a00003 	mov	r0, r3
   1e334:	e28bd000 	add	sp, fp, #0
   1e338:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1e33c:	e12fff1e 	bx	lr

0001e340 <E131Bridge::IsStatusChanged()>:
   1e340:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1e344:	e28db000 	add	fp, sp, #0
   1e348:	e24dd00c 	sub	sp, sp, #12
   1e34c:	e50b0008 	str	r0, [fp, #-8]
   1e350:	e51b3008 	ldr	r3, [fp, #-8]
   1e354:	e5d334f4 	ldrb	r3, [r3, #1268]	; 0x4f4
   1e358:	e3530000 	cmp	r3, #0
   1e35c:	0a000004 	beq	1e374 <E131Bridge::IsStatusChanged()+0x34>
   1e360:	e51b3008 	ldr	r3, [fp, #-8]
   1e364:	e3a02000 	mov	r2, #0
   1e368:	e5c324f4 	strb	r2, [r3, #1268]	; 0x4f4
   1e36c:	e3a03001 	mov	r3, #1
   1e370:	ea000000 	b	1e378 <E131Bridge::IsStatusChanged()+0x38>
   1e374:	e3a03000 	mov	r3, #0
   1e378:	e1a00003 	mov	r0, r3
   1e37c:	e28bd000 	add	sp, fp, #0
   1e380:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1e384:	e12fff1e 	bx	lr

0001e388 <E131Bridge::SetDisableMergeTimeout(bool)>:
   1e388:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1e38c:	e28db000 	add	fp, sp, #0
   1e390:	e24dd00c 	sub	sp, sp, #12
   1e394:	e50b0008 	str	r0, [fp, #-8]
   1e398:	e1a03001 	mov	r3, r1
   1e39c:	e54b3009 	strb	r3, [fp, #-9]
   1e3a0:	e51b3008 	ldr	r3, [fp, #-8]
   1e3a4:	e55b2009 	ldrb	r2, [fp, #-9]
   1e3a8:	e5c324f5 	strb	r2, [r3, #1269]	; 0x4f5
   1e3ac:	e1a00000 	nop			; (mov r0, r0)
   1e3b0:	e28bd000 	add	sp, fp, #0
   1e3b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1e3b8:	e12fff1e 	bx	lr

0001e3bc <E131Bridge::SetEnableDataIndicator(bool)>:
   1e3bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1e3c0:	e28db000 	add	fp, sp, #0
   1e3c4:	e24dd00c 	sub	sp, sp, #12
   1e3c8:	e50b0008 	str	r0, [fp, #-8]
   1e3cc:	e1a03001 	mov	r3, r1
   1e3d0:	e54b3009 	strb	r3, [fp, #-9]
   1e3d4:	e51b3008 	ldr	r3, [fp, #-8]
   1e3d8:	e55b2009 	ldrb	r2, [fp, #-9]
   1e3dc:	e5c32008 	strb	r2, [r3, #8]
   1e3e0:	e1a00000 	nop			; (mov r0, r0)
   1e3e4:	e28bd000 	add	sp, fp, #0
   1e3e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1e3ec:	e12fff1e 	bx	lr

0001e3f0 <E131Bridge::Clear(unsigned int)>:
   1e3f0:	e92d4800 	push	{fp, lr}
   1e3f4:	e28db004 	add	fp, sp, #4
   1e3f8:	e24dd008 	sub	sp, sp, #8
   1e3fc:	e50b0008 	str	r0, [fp, #-8]
   1e400:	e50b100c 	str	r1, [fp, #-12]
   1e404:	e51b3008 	ldr	r3, [fp, #-8]
   1e408:	e5933004 	ldr	r3, [r3, #4]
   1e40c:	e51b100c 	ldr	r1, [fp, #-12]
   1e410:	e1a00003 	mov	r0, r3
   1e414:	ebffff14 	bl	1e06c <lightset::Data::OutputClear(LightSet*, unsigned int)>
   1e418:	e51b1008 	ldr	r1, [fp, #-8]
   1e41c:	e51b200c 	ldr	r2, [fp, #-12]
   1e420:	e1a03002 	mov	r3, r2
   1e424:	e1a03203 	lsl	r3, r3, #4
   1e428:	e0833002 	add	r3, r3, r2
   1e42c:	e1a03103 	lsl	r3, r3, #2
   1e430:	e0813003 	add	r3, r1, r3
   1e434:	e2833e51 	add	r3, r3, #1296	; 0x510
   1e438:	e2833002 	add	r3, r3, #2
   1e43c:	e5d33000 	ldrb	r3, [r3]
   1e440:	e3530000 	cmp	r3, #0
   1e444:	0a000022 	beq	1e4d4 <E131Bridge::Clear(unsigned int)+0xe4>
   1e448:	e51b1008 	ldr	r1, [fp, #-8]
   1e44c:	e51b200c 	ldr	r2, [fp, #-12]
   1e450:	e1a03002 	mov	r3, r2
   1e454:	e1a03203 	lsl	r3, r3, #4
   1e458:	e0833002 	add	r3, r3, r2
   1e45c:	e1a03103 	lsl	r3, r3, #2
   1e460:	e0813003 	add	r3, r1, r3
   1e464:	e2833e55 	add	r3, r3, #1360	; 0x550
   1e468:	e2833002 	add	r3, r3, #2
   1e46c:	e5d33000 	ldrb	r3, [r3]
   1e470:	e2233001 	eor	r3, r3, #1
   1e474:	e6ef3073 	uxtb	r3, r3
   1e478:	e3530000 	cmp	r3, #0
   1e47c:	0a000014 	beq	1e4d4 <E131Bridge::Clear(unsigned int)+0xe4>
   1e480:	e51b3008 	ldr	r3, [fp, #-8]
   1e484:	e5932004 	ldr	r2, [r3, #4]
   1e488:	e51b3008 	ldr	r3, [fp, #-8]
   1e48c:	e5933004 	ldr	r3, [r3, #4]
   1e490:	e5933000 	ldr	r3, [r3]
   1e494:	e2833008 	add	r3, r3, #8
   1e498:	e5933000 	ldr	r3, [r3]
   1e49c:	e51b100c 	ldr	r1, [fp, #-12]
   1e4a0:	e1a00002 	mov	r0, r2
   1e4a4:	e12fff33 	blx	r3
   1e4a8:	e51b1008 	ldr	r1, [fp, #-8]
   1e4ac:	e51b200c 	ldr	r2, [fp, #-12]
   1e4b0:	e1a03002 	mov	r3, r2
   1e4b4:	e1a03203 	lsl	r3, r3, #4
   1e4b8:	e0833002 	add	r3, r3, r2
   1e4bc:	e1a03103 	lsl	r3, r3, #2
   1e4c0:	e0813003 	add	r3, r1, r3
   1e4c4:	e2833e55 	add	r3, r3, #1360	; 0x550
   1e4c8:	e2833002 	add	r3, r3, #2
   1e4cc:	e3a02001 	mov	r2, #1
   1e4d0:	e5c32000 	strb	r2, [r3]
   1e4d4:	e51b3008 	ldr	r3, [fp, #-8]
   1e4d8:	e3a02000 	mov	r2, #0
   1e4dc:	e5c324f0 	strb	r2, [r3, #1264]	; 0x4f0
   1e4e0:	e1a00000 	nop			; (mov r0, r0)
   1e4e4:	e24bd004 	sub	sp, fp, #4
   1e4e8:	e8bd8800 	pop	{fp, pc}

0001e4ec <ArtNet4Node::IsStatusChanged()>:
   1e4ec:	e92d4800 	push	{fp, lr}
   1e4f0:	e28db004 	add	fp, sp, #4
   1e4f4:	e24dd008 	sub	sp, sp, #8
   1e4f8:	e50b0008 	str	r0, [fp, #-8]
   1e4fc:	e51b3008 	ldr	r3, [fp, #-8]
   1e500:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1e504:	e283300c 	add	r3, r3, #12
   1e508:	e1a00003 	mov	r0, r3
   1e50c:	ebffff8b 	bl	1e340 <E131Bridge::IsStatusChanged()>
   1e510:	e1a03000 	mov	r3, r0
   1e514:	e1a00003 	mov	r0, r3
   1e518:	e24bd004 	sub	sp, fp, #4
   1e51c:	e8bd8800 	pop	{fp, pc}

0001e520 <ArtNet4Node::SetLedBlinkMode(hardware::ledblink::Mode)>:
   1e520:	e92d4800 	push	{fp, lr}
   1e524:	e28db004 	add	fp, sp, #4
   1e528:	e24dd010 	sub	sp, sp, #16
   1e52c:	e50b0010 	str	r0, [fp, #-16]
   1e530:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1e534:	e51b3010 	ldr	r3, [fp, #-16]
   1e538:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1e53c:	e283300c 	add	r3, r3, #12
   1e540:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   1e544:	e3520002 	cmp	r2, #2
   1e548:	03a02001 	moveq	r2, #1
   1e54c:	13a02000 	movne	r2, #0
   1e550:	e6ef2072 	uxtb	r2, r2
   1e554:	e1a01002 	mov	r1, r2
   1e558:	e1a00003 	mov	r0, r3
   1e55c:	ebffff96 	bl	1e3bc <E131Bridge::SetEnableDataIndicator(bool)>
   1e560:	e3a03000 	mov	r3, #0
   1e564:	e50b3008 	str	r3, [fp, #-8]
   1e568:	e51b3008 	ldr	r3, [fp, #-8]
   1e56c:	e3530003 	cmp	r3, #3
   1e570:	8a00000c 	bhi	1e5a8 <ArtNet4Node::SetLedBlinkMode(hardware::ledblink::Mode)+0x88>
   1e574:	e51b3010 	ldr	r3, [fp, #-16]
   1e578:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1e57c:	e283300c 	add	r3, r3, #12
   1e580:	e51b1008 	ldr	r1, [fp, #-8]
   1e584:	e1a00003 	mov	r0, r3
   1e588:	ebffff46 	bl	1e2a8 <E131Bridge::IsTransmitting(unsigned int) const>
   1e58c:	e1a03000 	mov	r3, r0
   1e590:	e3530000 	cmp	r3, #0
   1e594:	1a000009 	bne	1e5c0 <ArtNet4Node::SetLedBlinkMode(hardware::ledblink::Mode)+0xa0>
   1e598:	e51b3008 	ldr	r3, [fp, #-8]
   1e59c:	e2833001 	add	r3, r3, #1
   1e5a0:	e50b3008 	str	r3, [fp, #-8]
   1e5a4:	eaffffef 	b	1e568 <ArtNet4Node::SetLedBlinkMode(hardware::ledblink::Mode)+0x48>
   1e5a8:	ebffcc14 	bl	11600 <Hardware::Get()>
   1e5ac:	e1a03000 	mov	r3, r0
   1e5b0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   1e5b4:	e1a00003 	mov	r0, r3
   1e5b8:	eb0082cd 	bl	3f0f4 <Hardware::SetMode(hardware::ledblink::Mode)>
   1e5bc:	ea000000 	b	1e5c4 <ArtNet4Node::SetLedBlinkMode(hardware::ledblink::Mode)+0xa4>
   1e5c0:	e1a00000 	nop			; (mov r0, r0)
   1e5c4:	e24bd004 	sub	sp, fp, #4
   1e5c8:	e8bd8800 	pop	{fp, pc}

0001e5cc <ArtNet4Handler::ArtNet4Handler()>:
   1e5cc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1e5d0:	e28db000 	add	fp, sp, #0
   1e5d4:	e24dd00c 	sub	sp, sp, #12
   1e5d8:	e50b0008 	str	r0, [fp, #-8]
   1e5dc:	e59f2018 	ldr	r2, [pc, #24]	; 1e5fc <ArtNet4Handler::ArtNet4Handler()+0x30>
   1e5e0:	e51b3008 	ldr	r3, [fp, #-8]
   1e5e4:	e5832000 	str	r2, [r3]
   1e5e8:	e51b3008 	ldr	r3, [fp, #-8]
   1e5ec:	e1a00003 	mov	r0, r3
   1e5f0:	e28bd000 	add	sp, fp, #0
   1e5f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1e5f8:	e12fff1e 	bx	lr
   1e5fc:	00046684 	.word	0x00046684

0001e600 <ArtNet4Node::ArtNet4Node()>:
   1e600:	e92d4800 	push	{fp, lr}
   1e604:	e28db004 	add	fp, sp, #4
   1e608:	e24dd008 	sub	sp, sp, #8
   1e60c:	e50b0008 	str	r0, [fp, #-8]
   1e610:	e51b3008 	ldr	r3, [fp, #-8]
   1e614:	e2833004 	add	r3, r3, #4
   1e618:	e1a00003 	mov	r0, r3
   1e61c:	eb0002ab 	bl	1f0d0 <ArtNetNode::ArtNetNode()>
   1e620:	e51b3008 	ldr	r3, [fp, #-8]
   1e624:	e1a00003 	mov	r0, r3
   1e628:	ebffffe7 	bl	1e5cc <ArtNet4Handler::ArtNet4Handler()>
   1e62c:	e59f2040 	ldr	r2, [pc, #64]	; 1e674 <ArtNet4Node::ArtNet4Node()+0x74>
   1e630:	e51b3008 	ldr	r3, [fp, #-8]
   1e634:	e5832000 	str	r2, [r3]
   1e638:	e51b3008 	ldr	r3, [fp, #-8]
   1e63c:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1e640:	e283300c 	add	r3, r3, #12
   1e644:	e1a00003 	mov	r0, r3
   1e648:	eb001c7c 	bl	25840 <E131Bridge::E131Bridge()>
   1e64c:	e51b3008 	ldr	r3, [fp, #-8]
   1e650:	e2833004 	add	r3, r3, #4
   1e654:	e51b2008 	ldr	r2, [fp, #-8]
   1e658:	e1a01002 	mov	r1, r2
   1e65c:	e1a00003 	mov	r0, r3
   1e660:	ebfffe3e 	bl	1df60 <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>
   1e664:	e51b3008 	ldr	r3, [fp, #-8]
   1e668:	e1a00003 	mov	r0, r3
   1e66c:	e24bd004 	sub	sp, fp, #4
   1e670:	e8bd8800 	pop	{fp, pc}
   1e674:	00046660 	.word	0x00046660

0001e678 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
   1e678:	e92d4800 	push	{fp, lr}
   1e67c:	e28db004 	add	fp, sp, #4
   1e680:	e24dd020 	sub	sp, sp, #32
   1e684:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1e688:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   1e68c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   1e690:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e694:	e2830004 	add	r0, r3, #4
   1e698:	e24b200e 	sub	r2, fp, #14
   1e69c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e6a0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   1e6a4:	eb0001fc 	bl	1ee9c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
   1e6a8:	e1a03000 	mov	r3, r0
   1e6ac:	e54b3005 	strb	r3, [fp, #-5]
   1e6b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e6b4:	e3530000 	cmp	r3, #0
   1e6b8:	0a00002d 	beq	1e774 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0xfc>
   1e6bc:	e55b3005 	ldrb	r3, [fp, #-5]
   1e6c0:	e3530000 	cmp	r3, #0
   1e6c4:	0a00002b 	beq	1e778 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x100>
   1e6c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e6cc:	e2833004 	add	r3, r3, #4
   1e6d0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   1e6d4:	e1a00003 	mov	r0, r3
   1e6d8:	ebfffe2c 	bl	1df90 <ArtNetNode::GetPortProtocol(unsigned int) const>
   1e6dc:	e50b000c 	str	r0, [fp, #-12]
   1e6e0:	e51b300c 	ldr	r3, [fp, #-12]
   1e6e4:	e3530001 	cmp	r3, #1
   1e6e8:	1a000022 	bne	1e778 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x100>
   1e6ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e6f0:	e2833004 	add	r3, r3, #4
   1e6f4:	e1a00003 	mov	r0, r3
   1e6f8:	ebfffe32 	bl	1dfc8 <ArtNetNode::IsMapUniverse0()>
   1e6fc:	e1a03000 	mov	r3, r0
   1e700:	e3530000 	cmp	r3, #0
   1e704:	0a000003 	beq	1e718 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0xa0>
   1e708:	e15b30be 	ldrh	r3, [fp, #-14]
   1e70c:	e2833001 	add	r3, r3, #1
   1e710:	e6ff3073 	uxth	r3, r3
   1e714:	e14b30be 	strh	r3, [fp, #-14]
   1e718:	e15b30be 	ldrh	r3, [fp, #-14]
   1e71c:	e3530000 	cmp	r3, #0
   1e720:	1a000006 	bne	1e740 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0xc8>
   1e724:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e728:	e2830004 	add	r0, r3, #4
   1e72c:	e3a03000 	mov	r3, #0
   1e730:	e3a02002 	mov	r2, #2
   1e734:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   1e738:	eb000c74 	bl	21910 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
   1e73c:	ea00000d 	b	1e778 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x100>
   1e740:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e744:	e2830ea6 	add	r0, r3, #2656	; 0xa60
   1e748:	e280000c 	add	r0, r0, #12
   1e74c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   1e750:	e3530001 	cmp	r3, #1
   1e754:	1a000001 	bne	1e760 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0xe8>
   1e758:	e3a02001 	mov	r2, #1
   1e75c:	ea000000 	b	1e764 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0xec>
   1e760:	e3a02000 	mov	r2, #0
   1e764:	e15b30be 	ldrh	r3, [fp, #-14]
   1e768:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   1e76c:	eb001d72 	bl	25d3c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
   1e770:	ea000000 	b	1e778 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x100>
   1e774:	e1a00000 	nop			; (mov r0, r0)
   1e778:	e24bd004 	sub	sp, fp, #4
   1e77c:	e8bd8800 	pop	{fp, pc}

0001e780 <ArtNet4Node::Start()>:
   1e780:	e92d4810 	push	{r4, fp, lr}
   1e784:	e28db008 	add	fp, sp, #8
   1e788:	e24dd024 	sub	sp, sp, #36	; 0x24
   1e78c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   1e790:	e3a03000 	mov	r3, #0
   1e794:	e50b3010 	str	r3, [fp, #-16]
   1e798:	e51b3010 	ldr	r3, [fp, #-16]
   1e79c:	e3530003 	cmp	r3, #3
   1e7a0:	8a000024 	bhi	1e838 <ArtNet4Node::Start()+0xb8>
   1e7a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e7a8:	e2830004 	add	r0, r3, #4
   1e7ac:	e24b201e 	sub	r2, fp, #30
   1e7b0:	e3a03001 	mov	r3, #1
   1e7b4:	e51b1010 	ldr	r1, [fp, #-16]
   1e7b8:	eb0001b7 	bl	1ee9c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
   1e7bc:	e1a03000 	mov	r3, r0
   1e7c0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   1e7c4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   1e7c8:	e3530000 	cmp	r3, #0
   1e7cc:	0a000015 	beq	1e828 <ArtNet4Node::Start()+0xa8>
   1e7d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e7d4:	e2833004 	add	r3, r3, #4
   1e7d8:	e51b1010 	ldr	r1, [fp, #-16]
   1e7dc:	e1a00003 	mov	r0, r3
   1e7e0:	ebfffdea 	bl	1df90 <ArtNetNode::GetPortProtocol(unsigned int) const>
   1e7e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1e7e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e7ec:	e3530001 	cmp	r3, #1
   1e7f0:	1a00000c 	bne	1e828 <ArtNet4Node::Start()+0xa8>
   1e7f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e7f8:	e2833004 	add	r3, r3, #4
   1e7fc:	e51b1010 	ldr	r1, [fp, #-16]
   1e800:	e1a00003 	mov	r0, r3
   1e804:	ebfffdb7 	bl	1dee8 <ArtNetNode::GetMergeMode(unsigned int) const>
   1e808:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
   1e80c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e810:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1e814:	e283300c 	add	r3, r3, #12
   1e818:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   1e81c:	e51b1010 	ldr	r1, [fp, #-16]
   1e820:	e1a00003 	mov	r0, r3
   1e824:	ebfffe80 	bl	1e22c <E131Bridge::SetMergeMode(unsigned int, lightset::MergeMode)>
   1e828:	e51b3010 	ldr	r3, [fp, #-16]
   1e82c:	e2833001 	add	r3, r3, #1
   1e830:	e50b3010 	str	r3, [fp, #-16]
   1e834:	eaffffd7 	b	1e798 <ArtNet4Node::Start()+0x18>
   1e838:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e83c:	e2834ea6 	add	r4, r3, #2656	; 0xa60
   1e840:	e284400c 	add	r4, r4, #12
   1e844:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e848:	e2833004 	add	r3, r3, #4
   1e84c:	e1a00003 	mov	r0, r3
   1e850:	ebfffdb8 	bl	1df38 <ArtNetNode::GetDisableMergeTimeout() const>
   1e854:	e1a03000 	mov	r3, r0
   1e858:	e1a01003 	mov	r1, r3
   1e85c:	e1a00004 	mov	r0, r4
   1e860:	ebfffec8 	bl	1e388 <E131Bridge::SetDisableMergeTimeout(bool)>
   1e864:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e868:	e2834ea6 	add	r4, r3, #2656	; 0xa60
   1e86c:	e284400c 	add	r4, r4, #12
   1e870:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e874:	e2833004 	add	r3, r3, #4
   1e878:	e1a00003 	mov	r0, r3
   1e87c:	ebfffd8f 	bl	1dec0 <ArtNetNode::GetOutput() const>
   1e880:	e1a03000 	mov	r3, r0
   1e884:	e1a01003 	mov	r1, r3
   1e888:	e1a00004 	mov	r0, r4
   1e88c:	ebfffe5a 	bl	1e1fc <E131Bridge::SetOutput(LightSet*)>
   1e890:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e894:	e2833004 	add	r3, r3, #4
   1e898:	e1a00003 	mov	r0, r3
   1e89c:	eb0002d4 	bl	1f3f4 <ArtNetNode::Start()>
   1e8a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e8a4:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1e8a8:	e283300c 	add	r3, r3, #12
   1e8ac:	e1a00003 	mov	r0, r3
   1e8b0:	eb001c6d 	bl	25a6c <E131Bridge::Start()>
   1e8b4:	e1a00000 	nop			; (mov r0, r0)
   1e8b8:	e24bd008 	sub	sp, fp, #8
   1e8bc:	e8bd8810 	pop	{r4, fp, pc}

0001e8c0 <ArtNet4Node::Stop()>:
   1e8c0:	e92d4800 	push	{fp, lr}
   1e8c4:	e28db004 	add	fp, sp, #4
   1e8c8:	e24dd008 	sub	sp, sp, #8
   1e8cc:	e50b0008 	str	r0, [fp, #-8]
   1e8d0:	e51b3008 	ldr	r3, [fp, #-8]
   1e8d4:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1e8d8:	e283300c 	add	r3, r3, #12
   1e8dc:	e1a00003 	mov	r0, r3
   1e8e0:	eb001c6d 	bl	25a9c <E131Bridge::Stop()>
   1e8e4:	e51b3008 	ldr	r3, [fp, #-8]
   1e8e8:	e2833004 	add	r3, r3, #4
   1e8ec:	e1a00003 	mov	r0, r3
   1e8f0:	eb000336 	bl	1f5d0 <ArtNetNode::Stop()>
   1e8f4:	e1a00000 	nop			; (mov r0, r0)
   1e8f8:	e24bd004 	sub	sp, fp, #4
   1e8fc:	e8bd8800 	pop	{fp, pc}

0001e900 <ArtNet4Node::Run()>:
   1e900:	e92d4800 	push	{fp, lr}
   1e904:	e28db004 	add	fp, sp, #4
   1e908:	e24dd008 	sub	sp, sp, #8
   1e90c:	e50b0008 	str	r0, [fp, #-8]
   1e910:	e51b3008 	ldr	r3, [fp, #-8]
   1e914:	e2833004 	add	r3, r3, #4
   1e918:	e1a00003 	mov	r0, r3
   1e91c:	eb0004da 	bl	1fc8c <ArtNetNode::Run()>
   1e920:	e51b3008 	ldr	r3, [fp, #-8]
   1e924:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1e928:	e283300c 	add	r3, r3, #12
   1e92c:	e1a00003 	mov	r0, r3
   1e930:	ebfffe52 	bl	1e280 <E131Bridge::GetActiveOutputPorts() const>
   1e934:	e1a03000 	mov	r3, r0
   1e938:	e3530000 	cmp	r3, #0
   1e93c:	13a03001 	movne	r3, #1
   1e940:	03a03000 	moveq	r3, #0
   1e944:	e6ef3073 	uxtb	r3, r3
   1e948:	e3530000 	cmp	r3, #0
   1e94c:	0a000004 	beq	1e964 <ArtNet4Node::Run()+0x64>
   1e950:	e51b3008 	ldr	r3, [fp, #-8]
   1e954:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1e958:	e283300c 	add	r3, r3, #12
   1e95c:	e1a00003 	mov	r0, r3
   1e960:	eb002363 	bl	276f4 <E131Bridge::Run()>
   1e964:	e1a00000 	nop			; (mov r0, r0)
   1e968:	e24bd004 	sub	sp, fp, #4
   1e96c:	e8bd8800 	pop	{fp, pc}

0001e970 <ArtNet4Node::HandleAddress(unsigned char)>:
   1e970:	e92d4800 	push	{fp, lr}
   1e974:	e28db004 	add	fp, sp, #4
   1e978:	e24dd010 	sub	sp, sp, #16
   1e97c:	e50b0010 	str	r0, [fp, #-16]
   1e980:	e1a03001 	mov	r3, r1
   1e984:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   1e988:	e3a03000 	mov	r3, #0
   1e98c:	e50b3008 	str	r3, [fp, #-8]
   1e990:	e51b3008 	ldr	r3, [fp, #-8]
   1e994:	e3530003 	cmp	r3, #3
   1e998:	8a000039 	bhi	1ea84 <ArtNet4Node::HandleAddress(unsigned char)+0x114>
   1e99c:	e51b3010 	ldr	r3, [fp, #-16]
   1e9a0:	e2830004 	add	r0, r3, #4
   1e9a4:	e24b200c 	sub	r2, fp, #12
   1e9a8:	e3a03001 	mov	r3, #1
   1e9ac:	e51b1008 	ldr	r1, [fp, #-8]
   1e9b0:	eb000139 	bl	1ee9c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
   1e9b4:	e1a03000 	mov	r3, r0
   1e9b8:	e54b3009 	strb	r3, [fp, #-9]
   1e9bc:	e55b3009 	ldrb	r3, [fp, #-9]
   1e9c0:	e3530000 	cmp	r3, #0
   1e9c4:	0a00002a 	beq	1ea74 <ArtNet4Node::HandleAddress(unsigned char)+0x104>
   1e9c8:	e51b3010 	ldr	r3, [fp, #-16]
   1e9cc:	e2833004 	add	r3, r3, #4
   1e9d0:	e1a00003 	mov	r0, r3
   1e9d4:	ebfffd7b 	bl	1dfc8 <ArtNetNode::IsMapUniverse0()>
   1e9d8:	e1a03000 	mov	r3, r0
   1e9dc:	e3530000 	cmp	r3, #0
   1e9e0:	0a000003 	beq	1e9f4 <ArtNet4Node::HandleAddress(unsigned char)+0x84>
   1e9e4:	e15b30bc 	ldrh	r3, [fp, #-12]
   1e9e8:	e2833001 	add	r3, r3, #1
   1e9ec:	e6ff3073 	uxth	r3, r3
   1e9f0:	e14b30bc 	strh	r3, [fp, #-12]
   1e9f4:	e15b30bc 	ldrh	r3, [fp, #-12]
   1e9f8:	e3530000 	cmp	r3, #0
   1e9fc:	0a00001b 	beq	1ea70 <ArtNet4Node::HandleAddress(unsigned char)+0x100>
   1ea00:	e51b3010 	ldr	r3, [fp, #-16]
   1ea04:	e2833004 	add	r3, r3, #4
   1ea08:	e51b1008 	ldr	r1, [fp, #-8]
   1ea0c:	e1a00003 	mov	r0, r3
   1ea10:	ebfffd5e 	bl	1df90 <ArtNetNode::GetPortProtocol(unsigned int) const>
   1ea14:	e1a03000 	mov	r3, r0
   1ea18:	e3530001 	cmp	r3, #1
   1ea1c:	03a03001 	moveq	r3, #1
   1ea20:	13a03000 	movne	r3, #0
   1ea24:	e6ef3073 	uxtb	r3, r3
   1ea28:	e3530000 	cmp	r3, #0
   1ea2c:	0a000007 	beq	1ea50 <ArtNet4Node::HandleAddress(unsigned char)+0xe0>
   1ea30:	e51b3010 	ldr	r3, [fp, #-16]
   1ea34:	e2830ea6 	add	r0, r3, #2656	; 0xa60
   1ea38:	e280000c 	add	r0, r0, #12
   1ea3c:	e15b30bc 	ldrh	r3, [fp, #-12]
   1ea40:	e3a02001 	mov	r2, #1
   1ea44:	e51b1008 	ldr	r1, [fp, #-8]
   1ea48:	eb001cbb 	bl	25d3c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
   1ea4c:	ea000008 	b	1ea74 <ArtNet4Node::HandleAddress(unsigned char)+0x104>
   1ea50:	e51b3010 	ldr	r3, [fp, #-16]
   1ea54:	e2830ea6 	add	r0, r3, #2656	; 0xa60
   1ea58:	e280000c 	add	r0, r0, #12
   1ea5c:	e15b30bc 	ldrh	r3, [fp, #-12]
   1ea60:	e3a02002 	mov	r2, #2
   1ea64:	e51b1008 	ldr	r1, [fp, #-8]
   1ea68:	eb001cb3 	bl	25d3c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
   1ea6c:	ea000000 	b	1ea74 <ArtNet4Node::HandleAddress(unsigned char)+0x104>
   1ea70:	e1a00000 	nop			; (mov r0, r0)
   1ea74:	e51b3008 	ldr	r3, [fp, #-8]
   1ea78:	e2833001 	add	r3, r3, #1
   1ea7c:	e50b3008 	str	r3, [fp, #-8]
   1ea80:	eaffffc2 	b	1e990 <ArtNet4Node::HandleAddress(unsigned char)+0x20>
   1ea84:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   1ea88:	e2033003 	and	r3, r3, #3
   1ea8c:	e54b300a 	strb	r3, [fp, #-10]
   1ea90:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   1ea94:	e3530013 	cmp	r3, #19
   1ea98:	ca000008 	bgt	1eac0 <ArtNet4Node::HandleAddress(unsigned char)+0x150>
   1ea9c:	e3530010 	cmp	r3, #16
   1eaa0:	aa000023 	bge	1eb34 <ArtNet4Node::HandleAddress(unsigned char)+0x1c4>
   1eaa4:	e3530003 	cmp	r3, #3
   1eaa8:	0a000013 	beq	1eafc <ArtNet4Node::HandleAddress(unsigned char)+0x18c>
   1eaac:	e3530004 	cmp	r3, #4
   1eab0:	0a000018 	beq	1eb18 <ArtNet4Node::HandleAddress(unsigned char)+0x1a8>
   1eab4:	e3530002 	cmp	r3, #2
   1eab8:	0a000008 	beq	1eae0 <ArtNet4Node::HandleAddress(unsigned char)+0x170>
   1eabc:	ea000041 	b	1ebc8 <ArtNet4Node::HandleAddress(unsigned char)+0x258>
   1eac0:	e3530050 	cmp	r3, #80	; 0x50
   1eac4:	ba00003f 	blt	1ebc8 <ArtNet4Node::HandleAddress(unsigned char)+0x258>
   1eac8:	e3530053 	cmp	r3, #83	; 0x53
   1eacc:	da000020 	ble	1eb54 <ArtNet4Node::HandleAddress(unsigned char)+0x1e4>
   1ead0:	e2433090 	sub	r3, r3, #144	; 0x90
   1ead4:	e3530003 	cmp	r3, #3
   1ead8:	8a00003a 	bhi	1ebc8 <ArtNet4Node::HandleAddress(unsigned char)+0x258>
   1eadc:	ea000024 	b	1eb74 <ArtNet4Node::HandleAddress(unsigned char)+0x204>
   1eae0:	e51b3010 	ldr	r3, [fp, #-16]
   1eae4:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1eae8:	e283300c 	add	r3, r3, #12
   1eaec:	e3a01001 	mov	r1, #1
   1eaf0:	e1a00003 	mov	r0, r3
   1eaf4:	ebfffe30 	bl	1e3bc <E131Bridge::SetEnableDataIndicator(bool)>
   1eaf8:	ea000035 	b	1ebd4 <ArtNet4Node::HandleAddress(unsigned char)+0x264>
   1eafc:	e51b3010 	ldr	r3, [fp, #-16]
   1eb00:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1eb04:	e283300c 	add	r3, r3, #12
   1eb08:	e3a01000 	mov	r1, #0
   1eb0c:	e1a00003 	mov	r0, r3
   1eb10:	ebfffe29 	bl	1e3bc <E131Bridge::SetEnableDataIndicator(bool)>
   1eb14:	ea00002e 	b	1ebd4 <ArtNet4Node::HandleAddress(unsigned char)+0x264>
   1eb18:	e51b3010 	ldr	r3, [fp, #-16]
   1eb1c:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1eb20:	e283300c 	add	r3, r3, #12
   1eb24:	e3a01000 	mov	r1, #0
   1eb28:	e1a00003 	mov	r0, r3
   1eb2c:	ebfffe22 	bl	1e3bc <E131Bridge::SetEnableDataIndicator(bool)>
   1eb30:	ea000027 	b	1ebd4 <ArtNet4Node::HandleAddress(unsigned char)+0x264>
   1eb34:	e51b3010 	ldr	r3, [fp, #-16]
   1eb38:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1eb3c:	e283300c 	add	r3, r3, #12
   1eb40:	e55b100a 	ldrb	r1, [fp, #-10]
   1eb44:	e3a02001 	mov	r2, #1
   1eb48:	e1a00003 	mov	r0, r3
   1eb4c:	ebfffdb6 	bl	1e22c <E131Bridge::SetMergeMode(unsigned int, lightset::MergeMode)>
   1eb50:	ea00001f 	b	1ebd4 <ArtNet4Node::HandleAddress(unsigned char)+0x264>
   1eb54:	e51b3010 	ldr	r3, [fp, #-16]
   1eb58:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1eb5c:	e283300c 	add	r3, r3, #12
   1eb60:	e55b100a 	ldrb	r1, [fp, #-10]
   1eb64:	e3a02000 	mov	r2, #0
   1eb68:	e1a00003 	mov	r0, r3
   1eb6c:	ebfffdae 	bl	1e22c <E131Bridge::SetMergeMode(unsigned int, lightset::MergeMode)>
   1eb70:	ea000017 	b	1ebd4 <ArtNet4Node::HandleAddress(unsigned char)+0x264>
   1eb74:	e51b3010 	ldr	r3, [fp, #-16]
   1eb78:	e2833004 	add	r3, r3, #4
   1eb7c:	e55b200a 	ldrb	r2, [fp, #-10]
   1eb80:	e1a01002 	mov	r1, r2
   1eb84:	e1a00003 	mov	r0, r3
   1eb88:	ebfffd00 	bl	1df90 <ArtNetNode::GetPortProtocol(unsigned int) const>
   1eb8c:	e1a03000 	mov	r3, r0
   1eb90:	e3530001 	cmp	r3, #1
   1eb94:	03a03001 	moveq	r3, #1
   1eb98:	13a03000 	movne	r3, #0
   1eb9c:	e6ef3073 	uxtb	r3, r3
   1eba0:	e3530000 	cmp	r3, #0
   1eba4:	0a000009 	beq	1ebd0 <ArtNet4Node::HandleAddress(unsigned char)+0x260>
   1eba8:	e51b3010 	ldr	r3, [fp, #-16]
   1ebac:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1ebb0:	e283300c 	add	r3, r3, #12
   1ebb4:	e55b200a 	ldrb	r2, [fp, #-10]
   1ebb8:	e1a01002 	mov	r1, r2
   1ebbc:	e1a00003 	mov	r0, r3
   1ebc0:	ebfffe0a 	bl	1e3f0 <E131Bridge::Clear(unsigned int)>
   1ebc4:	ea000001 	b	1ebd0 <ArtNet4Node::HandleAddress(unsigned char)+0x260>
   1ebc8:	e1a00000 	nop			; (mov r0, r0)
   1ebcc:	ea000000 	b	1ebd4 <ArtNet4Node::HandleAddress(unsigned char)+0x264>
   1ebd0:	e1a00000 	nop			; (mov r0, r0)
   1ebd4:	e1a00000 	nop			; (mov r0, r0)
   1ebd8:	e24bd004 	sub	sp, fp, #4
   1ebdc:	e8bd8800 	pop	{fp, pc}

0001ebe0 <ArtNet4Node::GetStatus(unsigned int)>:
   1ebe0:	e92d4800 	push	{fp, lr}
   1ebe4:	e28db004 	add	fp, sp, #4
   1ebe8:	e24dd010 	sub	sp, sp, #16
   1ebec:	e50b0010 	str	r0, [fp, #-16]
   1ebf0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   1ebf4:	e51b3010 	ldr	r3, [fp, #-16]
   1ebf8:	e2830ea6 	add	r0, r3, #2656	; 0xa60
   1ebfc:	e280000c 	add	r0, r0, #12
   1ec00:	e24b2008 	sub	r2, fp, #8
   1ec04:	e3a03001 	mov	r3, #1
   1ec08:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   1ec0c:	eb001d2d 	bl	260c8 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
   1ec10:	e1a03000 	mov	r3, r0
   1ec14:	e54b3005 	strb	r3, [fp, #-5]
   1ec18:	e55b3005 	ldrb	r3, [fp, #-5]
   1ec1c:	e3530000 	cmp	r3, #0
   1ec20:	0a000021 	beq	1ecac <ArtNet4Node::GetStatus(unsigned int)+0xcc>
   1ec24:	e3a03001 	mov	r3, #1
   1ec28:	e54b3006 	strb	r3, [fp, #-6]
   1ec2c:	e51b3010 	ldr	r3, [fp, #-16]
   1ec30:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1ec34:	e283300c 	add	r3, r3, #12
   1ec38:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   1ec3c:	e1a00003 	mov	r0, r3
   1ec40:	ebfffd98 	bl	1e2a8 <E131Bridge::IsTransmitting(unsigned int) const>
   1ec44:	e1a03000 	mov	r3, r0
   1ec48:	e3530000 	cmp	r3, #0
   1ec4c:	0a000001 	beq	1ec58 <ArtNet4Node::GetStatus(unsigned int)+0x78>
   1ec50:	e3a02080 	mov	r2, #128	; 0x80
   1ec54:	ea000000 	b	1ec5c <ArtNet4Node::GetStatus(unsigned int)+0x7c>
   1ec58:	e3a02000 	mov	r2, #0
   1ec5c:	e55b3006 	ldrb	r3, [fp, #-6]
   1ec60:	e1823003 	orr	r3, r2, r3
   1ec64:	e54b3006 	strb	r3, [fp, #-6]
   1ec68:	e51b3010 	ldr	r3, [fp, #-16]
   1ec6c:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1ec70:	e283300c 	add	r3, r3, #12
   1ec74:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   1ec78:	e1a00003 	mov	r0, r3
   1ec7c:	ebfffd9c 	bl	1e2f4 <E131Bridge::IsMerging(unsigned int) const>
   1ec80:	e1a03000 	mov	r3, r0
   1ec84:	e3530000 	cmp	r3, #0
   1ec88:	0a000001 	beq	1ec94 <ArtNet4Node::GetStatus(unsigned int)+0xb4>
   1ec8c:	e3a02008 	mov	r2, #8
   1ec90:	ea000000 	b	1ec98 <ArtNet4Node::GetStatus(unsigned int)+0xb8>
   1ec94:	e3a02000 	mov	r2, #0
   1ec98:	e55b3006 	ldrb	r3, [fp, #-6]
   1ec9c:	e1823003 	orr	r3, r2, r3
   1eca0:	e54b3006 	strb	r3, [fp, #-6]
   1eca4:	e55b3006 	ldrb	r3, [fp, #-6]
   1eca8:	ea000000 	b	1ecb0 <ArtNet4Node::GetStatus(unsigned int)+0xd0>
   1ecac:	e3a03000 	mov	r3, #0
   1ecb0:	e1a00003 	mov	r0, r3
   1ecb4:	e24bd004 	sub	sp, fp, #4
   1ecb8:	e8bd8800 	pop	{fp, pc}

0001ecbc <ArtNet4Node::Print()>:
   1ecbc:	e92d4800 	push	{fp, lr}
   1ecc0:	e28db004 	add	fp, sp, #4
   1ecc4:	e24dd008 	sub	sp, sp, #8
   1ecc8:	e50b0008 	str	r0, [fp, #-8]
   1eccc:	e51b3008 	ldr	r3, [fp, #-8]
   1ecd0:	e2833004 	add	r3, r3, #4
   1ecd4:	e1a00003 	mov	r0, r3
   1ecd8:	eb000762 	bl	20a68 <ArtNetNode::Print()>
   1ecdc:	e51b3008 	ldr	r3, [fp, #-8]
   1ece0:	e2833004 	add	r3, r3, #4
   1ece4:	e1a00003 	mov	r0, r3
   1ece8:	ebffcd55 	bl	12244 <ArtNetNode::GetActiveOutputPorts() const>
   1ecec:	e1a03000 	mov	r3, r0
   1ecf0:	e3530000 	cmp	r3, #0
   1ecf4:	13a03001 	movne	r3, #1
   1ecf8:	03a03000 	moveq	r3, #0
   1ecfc:	e6ef3073 	uxtb	r3, r3
   1ed00:	e3530000 	cmp	r3, #0
   1ed04:	0a00000d 	beq	1ed40 <ArtNet4Node::Print()+0x84>
   1ed08:	e51b3008 	ldr	r3, [fp, #-8]
   1ed0c:	e2833004 	add	r3, r3, #4
   1ed10:	e1a00003 	mov	r0, r3
   1ed14:	ebfffcab 	bl	1dfc8 <ArtNetNode::IsMapUniverse0()>
   1ed18:	e1a03000 	mov	r3, r0
   1ed1c:	e3530000 	cmp	r3, #0
   1ed20:	0a000001 	beq	1ed2c <ArtNet4Node::Print()+0x70>
   1ed24:	e59f0020 	ldr	r0, [pc, #32]	; 1ed4c <ArtNet4Node::Print()+0x90>
   1ed28:	ebffc93d 	bl	11224 <puts@plt>
   1ed2c:	e51b3008 	ldr	r3, [fp, #-8]
   1ed30:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1ed34:	e283300c 	add	r3, r3, #12
   1ed38:	e1a00003 	mov	r0, r3
   1ed3c:	eb001a26 	bl	255dc <E131Bridge::Print()>
   1ed40:	e1a00000 	nop			; (mov r0, r0)
   1ed44:	e24bd004 	sub	sp, fp, #4
   1ed48:	e8bd8800 	pop	{fp, pc}
   1ed4c:	0004663c 	.word	0x0004663c

0001ed50 <ArtNet4Node::~ArtNet4Node()>:
   1ed50:	e92d4800 	push	{fp, lr}
   1ed54:	e28db004 	add	fp, sp, #4
   1ed58:	e24dd008 	sub	sp, sp, #8
   1ed5c:	e50b0008 	str	r0, [fp, #-8]
   1ed60:	e59f2044 	ldr	r2, [pc, #68]	; 1edac <ArtNet4Node::~ArtNet4Node()+0x5c>
   1ed64:	e51b3008 	ldr	r3, [fp, #-8]
   1ed68:	e5832000 	str	r2, [r3]
   1ed6c:	e51b3008 	ldr	r3, [fp, #-8]
   1ed70:	e2833ea6 	add	r3, r3, #2656	; 0xa60
   1ed74:	e283300c 	add	r3, r3, #12
   1ed78:	e1a00003 	mov	r0, r3
   1ed7c:	eb001b31 	bl	25a48 <E131Bridge::~E131Bridge()>
   1ed80:	e51b3008 	ldr	r3, [fp, #-8]
   1ed84:	e1a00003 	mov	r0, r3
   1ed88:	ebfffc33 	bl	1de5c <ArtNet4Handler::~ArtNet4Handler()>
   1ed8c:	e51b3008 	ldr	r3, [fp, #-8]
   1ed90:	e2833004 	add	r3, r3, #4
   1ed94:	e1a00003 	mov	r0, r3
   1ed98:	eb00018c 	bl	1f3d0 <ArtNetNode::~ArtNetNode()>
   1ed9c:	e51b3008 	ldr	r3, [fp, #-8]
   1eda0:	e1a00003 	mov	r0, r3
   1eda4:	e24bd004 	sub	sp, fp, #4
   1eda8:	e8bd8800 	pop	{fp, pc}
   1edac:	00046660 	.word	0x00046660

0001edb0 <ArtNet4Node::~ArtNet4Node()>:
   1edb0:	e92d4800 	push	{fp, lr}
   1edb4:	e28db004 	add	fp, sp, #4
   1edb8:	e24dd008 	sub	sp, sp, #8
   1edbc:	e50b0008 	str	r0, [fp, #-8]
   1edc0:	e51b0008 	ldr	r0, [fp, #-8]
   1edc4:	ebffffe1 	bl	1ed50 <ArtNet4Node::~ArtNet4Node()>
   1edc8:	e51b0008 	ldr	r0, [fp, #-8]
   1edcc:	ebffc94d 	bl	11308 <operator delete(void*)@plt>
   1edd0:	e51b3008 	ldr	r3, [fp, #-8]
   1edd4:	e1a00003 	mov	r0, r3
   1edd8:	e24bd004 	sub	sp, fp, #4
   1eddc:	e8bd8800 	pop	{fp, pc}

0001ede0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&) const>:
   1ede0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1ede4:	e28db000 	add	fp, sp, #0
   1ede8:	e24dd014 	sub	sp, sp, #20
   1edec:	e50b0008 	str	r0, [fp, #-8]
   1edf0:	e50b100c 	str	r1, [fp, #-12]
   1edf4:	e50b2010 	str	r2, [fp, #-16]
   1edf8:	e51b2008 	ldr	r2, [fp, #-8]
   1edfc:	e51b300c 	ldr	r3, [fp, #-12]
   1ee00:	e2833011 	add	r3, r3, #17
   1ee04:	e1a03203 	lsl	r3, r3, #4
   1ee08:	e0823003 	add	r3, r2, r3
   1ee0c:	e5d33008 	ldrb	r3, [r3, #8]
   1ee10:	e3530000 	cmp	r3, #0
   1ee14:	0a00000a 	beq	1ee44 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&) const+0x64>
   1ee18:	e51b2008 	ldr	r2, [fp, #-8]
   1ee1c:	e51b300c 	ldr	r3, [fp, #-12]
   1ee20:	e2833011 	add	r3, r3, #17
   1ee24:	e1a03203 	lsl	r3, r3, #4
   1ee28:	e0823003 	add	r3, r2, r3
   1ee2c:	e2833004 	add	r3, r3, #4
   1ee30:	e1d320b0 	ldrh	r2, [r3]
   1ee34:	e51b3010 	ldr	r3, [fp, #-16]
   1ee38:	e1c320b0 	strh	r2, [r3]
   1ee3c:	e3a03001 	mov	r3, #1
   1ee40:	ea000011 	b	1ee8c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&) const+0xac>
   1ee44:	e51b2008 	ldr	r2, [fp, #-8]
   1ee48:	e51b300c 	ldr	r3, [fp, #-12]
   1ee4c:	e1a03283 	lsl	r3, r3, #5
   1ee50:	e0823003 	add	r3, r2, r3
   1ee54:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
   1ee58:	e3530000 	cmp	r3, #0
   1ee5c:	0a000009 	beq	1ee88 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&) const+0xa8>
   1ee60:	e51b2008 	ldr	r2, [fp, #-8]
   1ee64:	e51b300c 	ldr	r3, [fp, #-12]
   1ee68:	e1a03283 	lsl	r3, r3, #5
   1ee6c:	e0823003 	add	r3, r2, r3
   1ee70:	e2833094 	add	r3, r3, #148	; 0x94
   1ee74:	e1d320b0 	ldrh	r2, [r3]
   1ee78:	e51b3010 	ldr	r3, [fp, #-16]
   1ee7c:	e1c320b0 	strh	r2, [r3]
   1ee80:	e3a03001 	mov	r3, #1
   1ee84:	ea000000 	b	1ee8c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&) const+0xac>
   1ee88:	e3a03000 	mov	r3, #0
   1ee8c:	e1a00003 	mov	r0, r3
   1ee90:	e28bd000 	add	sp, fp, #0
   1ee94:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1ee98:	e12fff1e 	bx	lr

0001ee9c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
   1ee9c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1eea0:	e28db000 	add	fp, sp, #0
   1eea4:	e24dd014 	sub	sp, sp, #20
   1eea8:	e50b0008 	str	r0, [fp, #-8]
   1eeac:	e50b100c 	str	r1, [fp, #-12]
   1eeb0:	e50b2010 	str	r2, [fp, #-16]
   1eeb4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   1eeb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1eebc:	e3530000 	cmp	r3, #0
   1eec0:	1a00000f 	bne	1ef04 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x68>
   1eec4:	e51b2008 	ldr	r2, [fp, #-8]
   1eec8:	e51b300c 	ldr	r3, [fp, #-12]
   1eecc:	e2833011 	add	r3, r3, #17
   1eed0:	e1a03203 	lsl	r3, r3, #4
   1eed4:	e0823003 	add	r3, r2, r3
   1eed8:	e2833004 	add	r3, r3, #4
   1eedc:	e1d320b0 	ldrh	r2, [r3]
   1eee0:	e51b3010 	ldr	r3, [fp, #-16]
   1eee4:	e1c320b0 	strh	r2, [r3]
   1eee8:	e51b2008 	ldr	r2, [fp, #-8]
   1eeec:	e51b300c 	ldr	r3, [fp, #-12]
   1eef0:	e2833011 	add	r3, r3, #17
   1eef4:	e1a03203 	lsl	r3, r3, #4
   1eef8:	e0823003 	add	r3, r2, r3
   1eefc:	e5d33008 	ldrb	r3, [r3, #8]
   1ef00:	ea000011 	b	1ef4c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0xb0>
   1ef04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1ef08:	e3530001 	cmp	r3, #1
   1ef0c:	1a00000d 	bne	1ef48 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0xac>
   1ef10:	e51b2008 	ldr	r2, [fp, #-8]
   1ef14:	e51b300c 	ldr	r3, [fp, #-12]
   1ef18:	e1a03283 	lsl	r3, r3, #5
   1ef1c:	e0823003 	add	r3, r2, r3
   1ef20:	e2833094 	add	r3, r3, #148	; 0x94
   1ef24:	e1d320b0 	ldrh	r2, [r3]
   1ef28:	e51b3010 	ldr	r3, [fp, #-16]
   1ef2c:	e1c320b0 	strh	r2, [r3]
   1ef30:	e51b2008 	ldr	r2, [fp, #-8]
   1ef34:	e51b300c 	ldr	r3, [fp, #-12]
   1ef38:	e1a03283 	lsl	r3, r3, #5
   1ef3c:	e0823003 	add	r3, r2, r3
   1ef40:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
   1ef44:	ea000000 	b	1ef4c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0xb0>
   1ef48:	e3a03000 	mov	r3, #0
   1ef4c:	e1a00003 	mov	r0, r3
   1ef50:	e28bd000 	add	sp, fp, #0
   1ef54:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1ef58:	e12fff1e 	bx	lr

0001ef5c <Hardware::GetMode()>:
   1ef5c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1ef60:	e28db000 	add	fp, sp, #0
   1ef64:	e24dd00c 	sub	sp, sp, #12
   1ef68:	e50b0008 	str	r0, [fp, #-8]
   1ef6c:	e51b3008 	ldr	r3, [fp, #-8]
   1ef70:	e5933250 	ldr	r3, [r3, #592]	; 0x250
   1ef74:	e1a00003 	mov	r0, r3
   1ef78:	e28bd000 	add	sp, fp, #0
   1ef7c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1ef80:	e12fff1e 	bx	lr

0001ef84 <Network::GetBroadcastIp() const>:
   1ef84:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1ef88:	e28db000 	add	fp, sp, #0
   1ef8c:	e24dd00c 	sub	sp, sp, #12
   1ef90:	e50b0008 	str	r0, [fp, #-8]
   1ef94:	e51b3008 	ldr	r3, [fp, #-8]
   1ef98:	e5932010 	ldr	r2, [r3, #16]
   1ef9c:	e51b3008 	ldr	r3, [fp, #-8]
   1efa0:	e5933018 	ldr	r3, [r3, #24]
   1efa4:	e1e03003 	mvn	r3, r3
   1efa8:	e1823003 	orr	r3, r2, r3
   1efac:	e1a00003 	mov	r0, r3
   1efb0:	e28bd000 	add	sp, fp, #0
   1efb4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1efb8:	e12fff1e 	bx	lr

0001efbc <Network::IsDhcpCapable() const>:
   1efbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1efc0:	e28db000 	add	fp, sp, #0
   1efc4:	e24dd00c 	sub	sp, sp, #12
   1efc8:	e50b0008 	str	r0, [fp, #-8]
   1efcc:	e51b3008 	ldr	r3, [fp, #-8]
   1efd0:	e5d33000 	ldrb	r3, [r3]
   1efd4:	e1a00003 	mov	r0, r3
   1efd8:	e28bd000 	add	sp, fp, #0
   1efdc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1efe0:	e12fff1e 	bx	lr

0001efe4 <Network::IsDhcpUsed() const>:
   1efe4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1efe8:	e28db000 	add	fp, sp, #0
   1efec:	e24dd00c 	sub	sp, sp, #12
   1eff0:	e50b0008 	str	r0, [fp, #-8]
   1eff4:	e51b3008 	ldr	r3, [fp, #-8]
   1eff8:	e5d33001 	ldrb	r3, [r3, #1]
   1effc:	e1a00003 	mov	r0, r3
   1f000:	e28bd000 	add	sp, fp, #0
   1f004:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1f008:	e12fff1e 	bx	lr

0001f00c <lightset::Data::ClearLength(unsigned int)>:
   1f00c:	e92d4800 	push	{fp, lr}
   1f010:	e28db004 	add	fp, sp, #4
   1f014:	e24dd008 	sub	sp, sp, #8
   1f018:	e50b0008 	str	r0, [fp, #-8]
   1f01c:	ebfffbf3 	bl	1dff0 <lightset::Data::Get()>
   1f020:	e1a03000 	mov	r3, r0
   1f024:	e51b1008 	ldr	r1, [fp, #-8]
   1f028:	e1a00003 	mov	r0, r3
   1f02c:	eb000002 	bl	1f03c <lightset::Data::IClearLength(unsigned int)>
   1f030:	e1a00000 	nop			; (mov r0, r0)
   1f034:	e24bd004 	sub	sp, fp, #4
   1f038:	e8bd8800 	pop	{fp, pc}

0001f03c <lightset::Data::IClearLength(unsigned int)>:
   1f03c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1f040:	e28db000 	add	fp, sp, #0
   1f044:	e24dd00c 	sub	sp, sp, #12
   1f048:	e50b0008 	str	r0, [fp, #-8]
   1f04c:	e50b100c 	str	r1, [fp, #-12]
   1f050:	e51b1008 	ldr	r1, [fp, #-8]
   1f054:	e51b200c 	ldr	r2, [fp, #-12]
   1f058:	e1a03002 	mov	r3, r2
   1f05c:	e1a03083 	lsl	r3, r3, #1
   1f060:	e0833002 	add	r3, r3, r2
   1f064:	e1a03383 	lsl	r3, r3, #7
   1f068:	e0833002 	add	r3, r3, r2
   1f06c:	e1a03103 	lsl	r3, r3, #2
   1f070:	e0813003 	add	r3, r1, r3
   1f074:	e2833c06 	add	r3, r3, #1536	; 0x600
   1f078:	e3a02000 	mov	r2, #0
   1f07c:	e5832000 	str	r2, [r3]
   1f080:	e1a00000 	nop			; (mov r0, r0)
   1f084:	e28bd000 	add	sp, fp, #0
   1f088:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1f08c:	e12fff1e 	bx	lr

0001f090 <hal::panel_led_on(unsigned int)>:
   1f090:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1f094:	e28db000 	add	fp, sp, #0
   1f098:	e24dd00c 	sub	sp, sp, #12
   1f09c:	e50b0008 	str	r0, [fp, #-8]
   1f0a0:	e1a00000 	nop			; (mov r0, r0)
   1f0a4:	e28bd000 	add	sp, fp, #0
   1f0a8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1f0ac:	e12fff1e 	bx	lr

0001f0b0 <hal::panel_led_off(unsigned int)>:
   1f0b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1f0b4:	e28db000 	add	fp, sp, #0
   1f0b8:	e24dd00c 	sub	sp, sp, #12
   1f0bc:	e50b0008 	str	r0, [fp, #-8]
   1f0c0:	e1a00000 	nop			; (mov r0, r0)
   1f0c4:	e28bd000 	add	sp, fp, #0
   1f0c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1f0cc:	e12fff1e 	bx	lr

0001f0d0 <ArtNetNode::ArtNetNode()>:
   1f0d0:	e92d4800 	push	{fp, lr}
   1f0d4:	e28db004 	add	fp, sp, #4
   1f0d8:	e24dd010 	sub	sp, sp, #16
   1f0dc:	e50b0010 	str	r0, [fp, #-16]
   1f0e0:	e51b3010 	ldr	r3, [fp, #-16]
   1f0e4:	e3e02000 	mvn	r2, #0
   1f0e8:	e5832000 	str	r2, [r3]
   1f0ec:	e51b3010 	ldr	r3, [fp, #-16]
   1f0f0:	e3a02000 	mov	r2, #0
   1f0f4:	e5832a44 	str	r2, [r3, #2628]	; 0xa44
   1f0f8:	e51b3010 	ldr	r3, [fp, #-16]
   1f0fc:	e3a02000 	mov	r2, #0
   1f100:	e5832a48 	str	r2, [r3, #2632]	; 0xa48
   1f104:	e51b3010 	ldr	r3, [fp, #-16]
   1f108:	e3a02000 	mov	r2, #0
   1f10c:	e5c32a4c 	strb	r2, [r3, #2636]	; 0xa4c
   1f110:	e51b3010 	ldr	r3, [fp, #-16]
   1f114:	e3a02000 	mov	r2, #0
   1f118:	e5832a50 	str	r2, [r3, #2640]	; 0xa50
   1f11c:	e51b3010 	ldr	r3, [fp, #-16]
   1f120:	e3a02000 	mov	r2, #0
   1f124:	e5832a54 	str	r2, [r3, #2644]	; 0xa54
   1f128:	e51b3010 	ldr	r3, [fp, #-16]
   1f12c:	e3a02000 	mov	r2, #0
   1f130:	e5832a58 	str	r2, [r3, #2648]	; 0xa58
   1f134:	e51b3010 	ldr	r3, [fp, #-16]
   1f138:	e3a02000 	mov	r2, #0
   1f13c:	e5832a5c 	str	r2, [r3, #2652]	; 0xa5c
   1f140:	e51b3010 	ldr	r3, [fp, #-16]
   1f144:	e3a02000 	mov	r2, #0
   1f148:	e5832a60 	str	r2, [r3, #2656]	; 0xa60
   1f14c:	e51b3010 	ldr	r3, [fp, #-16]
   1f150:	e3a02000 	mov	r2, #0
   1f154:	e5832a64 	str	r2, [r3, #2660]	; 0xa64
   1f158:	e59f2268 	ldr	r2, [pc, #616]	; 1f3c8 <ArtNetNode::ArtNetNode()+0x2f8>
   1f15c:	e51b3010 	ldr	r3, [fp, #-16]
   1f160:	e5823000 	str	r3, [r2]
   1f164:	e51b3010 	ldr	r3, [fp, #-16]
   1f168:	e2833004 	add	r3, r3, #4
   1f16c:	e3a02070 	mov	r2, #112	; 0x70
   1f170:	e3a01000 	mov	r1, #0
   1f174:	e1a00003 	mov	r0, r3
   1f178:	ebffc83b 	bl	1126c <memset@plt>
   1f17c:	ebffe559 	bl	186e8 <Network::Get()>
   1f180:	e1a03000 	mov	r3, r0
   1f184:	e1a00003 	mov	r0, r3
   1f188:	ebffff7d 	bl	1ef84 <Network::GetBroadcastIp() const>
   1f18c:	e1a02000 	mov	r2, r0
   1f190:	e51b3010 	ldr	r3, [fp, #-16]
   1f194:	e5832004 	str	r2, [r3, #4]
   1f198:	e51b3010 	ldr	r3, [fp, #-16]
   1f19c:	e5932004 	ldr	r2, [r3, #4]
   1f1a0:	e51b3010 	ldr	r3, [fp, #-16]
   1f1a4:	e5832008 	str	r2, [r3, #8]
   1f1a8:	ebffe54e 	bl	186e8 <Network::Get()>
   1f1ac:	e1a02000 	mov	r2, r0
   1f1b0:	e51b3010 	ldr	r3, [fp, #-16]
   1f1b4:	e283300c 	add	r3, r3, #12
   1f1b8:	e1a01003 	mov	r1, r3
   1f1bc:	e1a00002 	mov	r0, r2
   1f1c0:	eb005c15 	bl	3621c <Network::MacAddressCopyTo(unsigned char*)>
   1f1c4:	e51b3010 	ldr	r3, [fp, #-16]
   1f1c8:	e3e0202f 	mvn	r2, #47	; 0x2f
   1f1cc:	e5c32067 	strb	r2, [r3, #103]	; 0x67
   1f1d0:	e51b3010 	ldr	r3, [fp, #-16]
   1f1d4:	e3a02018 	mov	r2, #24
   1f1d8:	e5c32068 	strb	r2, [r3, #104]	; 0x68
   1f1dc:	e51b3010 	ldr	r3, [fp, #-16]
   1f1e0:	e5d33068 	ldrb	r3, [r3, #104]	; 0x68
   1f1e4:	e1e03c83 	mvn	r3, r3, lsl #25
   1f1e8:	e1e03ca3 	mvn	r3, r3, lsr #25
   1f1ec:	e6ef2073 	uxtb	r2, r3
   1f1f0:	e51b3010 	ldr	r3, [fp, #-16]
   1f1f4:	e5c32068 	strb	r2, [r3, #104]	; 0x68
   1f1f8:	e51b3010 	ldr	r3, [fp, #-16]
   1f1fc:	e3a02020 	mov	r2, #32
   1f200:	e5c32069 	strb	r2, [r3, #105]	; 0x69
   1f204:	e51b3010 	ldr	r3, [fp, #-16]
   1f208:	e2833074 	add	r3, r3, #116	; 0x74
   1f20c:	e3a02020 	mov	r2, #32
   1f210:	e3a01000 	mov	r1, #0
   1f214:	e1a00003 	mov	r0, r3
   1f218:	ebffc813 	bl	1126c <memset@plt>
   1f21c:	e51b3010 	ldr	r3, [fp, #-16]
   1f220:	e3a02001 	mov	r2, #1
   1f224:	e5c32084 	strb	r2, [r3, #132]	; 0x84
   1f228:	e51b3010 	ldr	r3, [fp, #-16]
   1f22c:	e3a02001 	mov	r2, #1
   1f230:	e5c32085 	strb	r2, [r3, #133]	; 0x85
   1f234:	e3a03000 	mov	r3, #0
   1f238:	e50b3008 	str	r3, [fp, #-8]
   1f23c:	e51b3008 	ldr	r3, [fp, #-8]
   1f240:	e3530003 	cmp	r3, #3
   1f244:	8a000024 	bhi	1f2dc <ArtNetNode::ArtNetNode()+0x20c>
   1f248:	e51b3008 	ldr	r3, [fp, #-8]
   1f24c:	e1a03283 	lsl	r3, r3, #5
   1f250:	e2833090 	add	r3, r3, #144	; 0x90
   1f254:	e51b2010 	ldr	r2, [fp, #-16]
   1f258:	e0823003 	add	r3, r2, r3
   1f25c:	e2833004 	add	r3, r3, #4
   1f260:	e3a02020 	mov	r2, #32
   1f264:	e3a01000 	mov	r1, #0
   1f268:	e1a00003 	mov	r0, r3
   1f26c:	ebffc7fe 	bl	1126c <memset@plt>
   1f270:	e51b2010 	ldr	r2, [fp, #-16]
   1f274:	e51b3008 	ldr	r3, [fp, #-8]
   1f278:	e1a03283 	lsl	r3, r3, #5
   1f27c:	e0823003 	add	r3, r2, r3
   1f280:	e3e0203f 	mvn	r2, #63	; 0x3f
   1f284:	e5c320b3 	strb	r2, [r3, #179]	; 0xb3
   1f288:	e51b3008 	ldr	r3, [fp, #-8]
   1f28c:	e2833011 	add	r3, r3, #17
   1f290:	e1a03203 	lsl	r3, r3, #4
   1f294:	e51b2010 	ldr	r2, [fp, #-16]
   1f298:	e0823003 	add	r3, r2, r3
   1f29c:	e2833004 	add	r3, r3, #4
   1f2a0:	e3a02010 	mov	r2, #16
   1f2a4:	e3a01000 	mov	r1, #0
   1f2a8:	e1a00003 	mov	r0, r3
   1f2ac:	ebffc7ee 	bl	1126c <memset@plt>
   1f2b0:	e51b3010 	ldr	r3, [fp, #-16]
   1f2b4:	e5932004 	ldr	r2, [r3, #4]
   1f2b8:	e51b1010 	ldr	r1, [fp, #-16]
   1f2bc:	e51b3008 	ldr	r3, [fp, #-8]
   1f2c0:	e1a03203 	lsl	r3, r3, #4
   1f2c4:	e0813003 	add	r3, r1, r3
   1f2c8:	e583211c 	str	r2, [r3, #284]	; 0x11c
   1f2cc:	e51b3008 	ldr	r3, [fp, #-8]
   1f2d0:	e2833001 	add	r3, r3, #1
   1f2d4:	e50b3008 	str	r3, [fp, #-8]
   1f2d8:	eaffffd7 	b	1f23c <ArtNetNode::ArtNetNode()+0x16c>
   1f2dc:	e3a01000 	mov	r1, #0
   1f2e0:	e51b0010 	ldr	r0, [fp, #-16]
   1f2e4:	eb000127 	bl	1f788 <ArtNetNode::SetShortName(char const*)>
   1f2e8:	e3a01000 	mov	r1, #0
   1f2ec:	e51b0010 	ldr	r0, [fp, #-16]
   1f2f0:	eb00017e 	bl	1f8f0 <ArtNetNode::SetLongName(char const*)>
   1f2f4:	e51b3010 	ldr	r3, [fp, #-16]
   1f2f8:	e2833e92 	add	r3, r3, #2336	; 0x920
   1f2fc:	e283300d 	add	r3, r3, #13
   1f300:	e59f10c4 	ldr	r1, [pc, #196]	; 1f3cc <ArtNetNode::ArtNetNode()+0x2fc>
   1f304:	e1a02003 	mov	r2, r3
   1f308:	e1a03001 	mov	r3, r1
   1f30c:	e8b30003 	ldm	r3!, {r0, r1}
   1f310:	e5820000 	str	r0, [r2]
   1f314:	e5821004 	str	r1, [r2, #4]
   1f318:	e51b3010 	ldr	r3, [fp, #-16]
   1f31c:	e2832e93 	add	r2, r3, #2352	; 0x930
   1f320:	e2822005 	add	r2, r2, #5
   1f324:	e3a03000 	mov	r3, #0
   1f328:	e5c23000 	strb	r3, [r2]
   1f32c:	e3a03000 	mov	r3, #0
   1f330:	e1e03003 	mvn	r3, r3
   1f334:	e203307c 	and	r3, r3, #124	; 0x7c
   1f338:	e1e03003 	mvn	r3, r3
   1f33c:	e5c23001 	strb	r3, [r2, #1]
   1f340:	e51b3010 	ldr	r3, [fp, #-16]
   1f344:	e3a02000 	mov	r2, #0
   1f348:	e5c32937 	strb	r2, [r3, #2359]	; 0x937
   1f34c:	e51b3010 	ldr	r3, [fp, #-16]
   1f350:	e3a0200e 	mov	r2, #14
   1f354:	e5c32938 	strb	r2, [r3, #2360]	; 0x938
   1f358:	e51b3010 	ldr	r3, [fp, #-16]
   1f35c:	e3a02001 	mov	r2, #1
   1f360:	e5c32939 	strb	r2, [r3, #2361]	; 0x939
   1f364:	e51b3010 	ldr	r3, [fp, #-16]
   1f368:	e3a02000 	mov	r2, #0
   1f36c:	e5c3293b 	strb	r2, [r3, #2363]	; 0x93b
   1f370:	e51b3010 	ldr	r3, [fp, #-16]
   1f374:	e3a02000 	mov	r2, #0
   1f378:	e5c3293c 	strb	r2, [r3, #2364]	; 0x93c
   1f37c:	e51b3010 	ldr	r3, [fp, #-16]
   1f380:	e3a02000 	mov	r2, #0
   1f384:	e5c3293d 	strb	r2, [r3, #2365]	; 0x93d
   1f388:	e51b3010 	ldr	r3, [fp, #-16]
   1f38c:	e3a02000 	mov	r2, #0
   1f390:	e5c3293e 	strb	r2, [r3, #2366]	; 0x93e
   1f394:	e51b3010 	ldr	r3, [fp, #-16]
   1f398:	e3a02000 	mov	r2, #0
   1f39c:	e5c3293f 	strb	r2, [r3, #2367]	; 0x93f
   1f3a0:	e51b3010 	ldr	r3, [fp, #-16]
   1f3a4:	e3a02000 	mov	r2, #0
   1f3a8:	e5c32940 	strb	r2, [r3, #2368]	; 0x940
   1f3ac:	e51b3010 	ldr	r3, [fp, #-16]
   1f3b0:	e3a02000 	mov	r2, #0
   1f3b4:	e5c32941 	strb	r2, [r3, #2369]	; 0x941
   1f3b8:	e51b3010 	ldr	r3, [fp, #-16]
   1f3bc:	e1a00003 	mov	r0, r3
   1f3c0:	e24bd004 	sub	sp, fp, #4
   1f3c4:	e8bd8800 	pop	{fp, pc}
   1f3c8:	0005dbfc 	.word	0x0005dbfc
   1f3cc:	00046708 	.word	0x00046708

0001f3d0 <ArtNetNode::~ArtNetNode()>:
   1f3d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   1f3d4:	e28db000 	add	fp, sp, #0
   1f3d8:	e24dd00c 	sub	sp, sp, #12
   1f3dc:	e50b0008 	str	r0, [fp, #-8]
   1f3e0:	e51b3008 	ldr	r3, [fp, #-8]
   1f3e4:	e1a00003 	mov	r0, r3
   1f3e8:	e28bd000 	add	sp, fp, #0
   1f3ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   1f3f0:	e12fff1e 	bx	lr

0001f3f4 <ArtNetNode::Start()>:
   1f3f4:	e92d4810 	push	{r4, fp, lr}
   1f3f8:	e28db008 	add	fp, sp, #8
   1f3fc:	e24dd014 	sub	sp, sp, #20
   1f400:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1f404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f408:	e5d33068 	ldrb	r3, [r3, #104]	; 0x68
   1f40c:	e6af3073 	sxtb	r3, r3
   1f410:	e3c33002 	bic	r3, r3, #2
   1f414:	e6af4073 	sxtb	r4, r3
   1f418:	ebffe4b2 	bl	186e8 <Network::Get()>
   1f41c:	e1a03000 	mov	r3, r0
   1f420:	e1a00003 	mov	r0, r3
   1f424:	ebfffeee 	bl	1efe4 <Network::IsDhcpUsed() const>
   1f428:	e1a03000 	mov	r3, r0
   1f42c:	e3530000 	cmp	r3, #0
   1f430:	0a000001 	beq	1f43c <ArtNetNode::Start()+0x48>
   1f434:	e3a03002 	mov	r3, #2
   1f438:	ea000000 	b	1f440 <ArtNetNode::Start()+0x4c>
   1f43c:	e3a03000 	mov	r3, #0
   1f440:	e1833004 	orr	r3, r3, r4
   1f444:	e6af3073 	sxtb	r3, r3
   1f448:	e6ef2073 	uxtb	r2, r3
   1f44c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f450:	e5c32068 	strb	r2, [r3, #104]	; 0x68
   1f454:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f458:	e5d33068 	ldrb	r3, [r3, #104]	; 0x68
   1f45c:	e6af3073 	sxtb	r3, r3
   1f460:	e3c33004 	bic	r3, r3, #4
   1f464:	e6af4073 	sxtb	r4, r3
   1f468:	ebffe49e 	bl	186e8 <Network::Get()>
   1f46c:	e1a03000 	mov	r3, r0
   1f470:	e1a00003 	mov	r0, r3
   1f474:	ebfffed0 	bl	1efbc <Network::IsDhcpCapable() const>
   1f478:	e1a03000 	mov	r3, r0
   1f47c:	e3530000 	cmp	r3, #0
   1f480:	0a000001 	beq	1f48c <ArtNetNode::Start()+0x98>
   1f484:	e3a03004 	mov	r3, #4
   1f488:	ea000000 	b	1f490 <ArtNetNode::Start()+0x9c>
   1f48c:	e3a03000 	mov	r3, #0
   1f490:	e1833004 	orr	r3, r3, r4
   1f494:	e6af3073 	sxtb	r3, r3
   1f498:	e6ef2073 	uxtb	r2, r3
   1f49c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f4a0:	e5c32068 	strb	r2, [r3, #104]	; 0x68
   1f4a4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1f4a8:	eb000319 	bl	20114 <ArtNetNode::FillPollReply()>
   1f4ac:	ebffe48d 	bl	186e8 <Network::Get()>
   1f4b0:	e1a03000 	mov	r3, r0
   1f4b4:	e59f1110 	ldr	r1, [pc, #272]	; 1f5cc <ArtNetNode::Start()+0x1d8>
   1f4b8:	e1a00003 	mov	r0, r3
   1f4bc:	eb005a7c 	bl	35eb4 <Network::Begin(unsigned short)>
   1f4c0:	e1a02000 	mov	r2, r0
   1f4c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f4c8:	e5832000 	str	r2, [r3]
   1f4cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f4d0:	e3a02002 	mov	r2, #2
   1f4d4:	e5c32085 	strb	r2, [r3, #133]	; 0x85
   1f4d8:	e3a01000 	mov	r1, #0
   1f4dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1f4e0:	eb0003f8 	bl	204c8 <ArtNetNode::SendPollRelply(bool)>
   1f4e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f4e8:	e5933a58 	ldr	r3, [r3, #2648]	; 0xa58
   1f4ec:	e3530000 	cmp	r3, #0
   1f4f0:	0a00002b 	beq	1f5a4 <ArtNetNode::Start()+0x1b0>
   1f4f4:	e3a03000 	mov	r3, #0
   1f4f8:	e50b3010 	str	r3, [fp, #-16]
   1f4fc:	e51b3010 	ldr	r3, [fp, #-16]
   1f500:	e3530003 	cmp	r3, #3
   1f504:	8a000026 	bhi	1f5a4 <ArtNetNode::Start()+0x1b0>
   1f508:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f50c:	e51b3010 	ldr	r3, [fp, #-16]
   1f510:	e1a03283 	lsl	r3, r3, #5
   1f514:	e0823003 	add	r3, r2, r3
   1f518:	e5d330b3 	ldrb	r3, [r3, #179]	; 0xb3
   1f51c:	e6af3073 	sxtb	r3, r3
   1f520:	e6ef3073 	uxtb	r3, r3
   1f524:	e1a033a3 	lsr	r3, r3, #7
   1f528:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   1f52c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   1f530:	e2233001 	eor	r3, r3, #1
   1f534:	e6ef3073 	uxtb	r3, r3
   1f538:	e3530000 	cmp	r3, #0
   1f53c:	0a000009 	beq	1f568 <ArtNetNode::Start()+0x174>
   1f540:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f544:	e51b3010 	ldr	r3, [fp, #-16]
   1f548:	e1a03283 	lsl	r3, r3, #5
   1f54c:	e0823003 	add	r3, r2, r3
   1f550:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
   1f554:	e3530000 	cmp	r3, #0
   1f558:	0a000002 	beq	1f568 <ArtNetNode::Start()+0x174>
   1f55c:	e51b1010 	ldr	r1, [fp, #-16]
   1f560:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1f564:	eb0006df 	bl	210e8 <ArtNetNode::SendTod(unsigned int)>
   1f568:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f56c:	e51b3010 	ldr	r3, [fp, #-16]
   1f570:	e2833011 	add	r3, r3, #17
   1f574:	e1a03203 	lsl	r3, r3, #4
   1f578:	e0823003 	add	r3, r2, r3
   1f57c:	e5d33008 	ldrb	r3, [r3, #8]
   1f580:	e3530000 	cmp	r3, #0
   1f584:	0a000002 	beq	1f594 <ArtNetNode::Start()+0x1a0>
   1f588:	e51b1010 	ldr	r1, [fp, #-16]
   1f58c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   1f590:	eb000766 	bl	21330 <ArtNetNode::SendTodRequest(unsigned int)>
   1f594:	e51b3010 	ldr	r3, [fp, #-16]
   1f598:	e2833001 	add	r3, r3, #1
   1f59c:	e50b3010 	str	r3, [fp, #-16]
   1f5a0:	eaffffd5 	b	1f4fc <ArtNetNode::Start()+0x108>
   1f5a4:	ebffc815 	bl	11600 <Hardware::Get()>
   1f5a8:	e1a03000 	mov	r3, r0
   1f5ac:	e3a01002 	mov	r1, #2
   1f5b0:	e1a00003 	mov	r0, r3
   1f5b4:	eb007ece 	bl	3f0f4 <Hardware::SetMode(hardware::ledblink::Mode)>
   1f5b8:	e3a00000 	mov	r0, #0
   1f5bc:	ebfffeb3 	bl	1f090 <hal::panel_led_on(unsigned int)>
   1f5c0:	e1a00000 	nop			; (mov r0, r0)
   1f5c4:	e24bd008 	sub	sp, fp, #8
   1f5c8:	e8bd8810 	pop	{r4, fp, pc}
   1f5cc:	00001936 	.word	0x00001936

0001f5d0 <ArtNetNode::Stop()>:
   1f5d0:	e92d4800 	push	{fp, lr}
   1f5d4:	e28db004 	add	fp, sp, #4
   1f5d8:	e24dd010 	sub	sp, sp, #16
   1f5dc:	e50b0010 	str	r0, [fp, #-16]
   1f5e0:	e3a03000 	mov	r3, #0
   1f5e4:	e50b3008 	str	r3, [fp, #-8]
   1f5e8:	e51b3008 	ldr	r3, [fp, #-8]
   1f5ec:	e3530003 	cmp	r3, #3
   1f5f0:	8a000020 	bhi	1f678 <ArtNetNode::Stop()+0xa8>
   1f5f4:	e51b2010 	ldr	r2, [fp, #-16]
   1f5f8:	e51b3008 	ldr	r3, [fp, #-8]
   1f5fc:	e1a03283 	lsl	r3, r3, #5
   1f600:	e0823003 	add	r3, r2, r3
   1f604:	e59330ac 	ldr	r3, [r3, #172]	; 0xac
   1f608:	e3530000 	cmp	r3, #0
   1f60c:	1a000015 	bne	1f668 <ArtNetNode::Stop()+0x98>
   1f610:	e51b3010 	ldr	r3, [fp, #-16]
   1f614:	e5933a50 	ldr	r3, [r3, #2640]	; 0xa50
   1f618:	e3530000 	cmp	r3, #0
   1f61c:	0a000009 	beq	1f648 <ArtNetNode::Stop()+0x78>
   1f620:	e51b3010 	ldr	r3, [fp, #-16]
   1f624:	e5932a50 	ldr	r2, [r3, #2640]	; 0xa50
   1f628:	e51b3010 	ldr	r3, [fp, #-16]
   1f62c:	e5933a50 	ldr	r3, [r3, #2640]	; 0xa50
   1f630:	e5933000 	ldr	r3, [r3]
   1f634:	e283300c 	add	r3, r3, #12
   1f638:	e5933000 	ldr	r3, [r3]
   1f63c:	e51b1008 	ldr	r1, [fp, #-8]
   1f640:	e1a00002 	mov	r0, r2
   1f644:	e12fff33 	blx	r3
   1f648:	e51b0008 	ldr	r0, [fp, #-8]
   1f64c:	ebfffe6e 	bl	1f00c <lightset::Data::ClearLength(unsigned int)>
   1f650:	e51b2010 	ldr	r2, [fp, #-16]
   1f654:	e51b3008 	ldr	r3, [fp, #-8]
   1f658:	e1a03283 	lsl	r3, r3, #5
   1f65c:	e0823003 	add	r3, r2, r3
   1f660:	e3a02000 	mov	r2, #0
   1f664:	e5c320b1 	strb	r2, [r3, #177]	; 0xb1
   1f668:	e51b3008 	ldr	r3, [fp, #-8]
   1f66c:	e2833001 	add	r3, r3, #1
   1f670:	e50b3008 	str	r3, [fp, #-8]
   1f674:	eaffffdb 	b	1f5e8 <ArtNetNode::Stop()+0x18>
   1f678:	ebffc7e0 	bl	11600 <Hardware::Get()>
   1f67c:	e1a03000 	mov	r3, r0
   1f680:	e3a01000 	mov	r1, #0
   1f684:	e1a00003 	mov	r0, r3
   1f688:	eb007e99 	bl	3f0f4 <Hardware::SetMode(hardware::ledblink::Mode)>
   1f68c:	e3a00000 	mov	r0, #0
   1f690:	ebfffe86 	bl	1f0b0 <hal::panel_led_off(unsigned int)>
   1f694:	e51b3010 	ldr	r3, [fp, #-16]
   1f698:	e5d33067 	ldrb	r3, [r3, #103]	; 0x67
   1f69c:	e6af3073 	sxtb	r3, r3
   1f6a0:	e203303f 	and	r3, r3, #63	; 0x3f
   1f6a4:	e6af3073 	sxtb	r3, r3
   1f6a8:	e1e03c83 	mvn	r3, r3, lsl #25
   1f6ac:	e1e03ca3 	mvn	r3, r3, lsr #25
   1f6b0:	e6af3073 	sxtb	r3, r3
   1f6b4:	e6ef2073 	uxtb	r2, r3
   1f6b8:	e51b3010 	ldr	r3, [fp, #-16]
   1f6bc:	e5c32067 	strb	r2, [r3, #103]	; 0x67
   1f6c0:	e51b3010 	ldr	r3, [fp, #-16]
   1f6c4:	e3a02001 	mov	r2, #1
   1f6c8:	e5c32085 	strb	r2, [r3, #133]	; 0x85
   1f6cc:	e1a00000 	nop			; (mov r0, r0)
   1f6d0:	e24bd004 	sub	sp, fp, #4
   1f6d4:	e8bd8800 	pop	{fp, pc}

0001f6d8 <ArtNetNode::GetShortNameDefault(char*)>:
   1f6d8:	e92d4870 	push	{r4, r5, r6, fp, lr}
   1f6dc:	e28db010 	add	fp, sp, #16
   1f6e0:	e24dd01c 	sub	sp, sp, #28
   1f6e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1f6e8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   1f6ec:	ebffe3fd 	bl	186e8 <Network::Get()>
   1f6f0:	e1a03000 	mov	r3, r0
   1f6f4:	e1a00003 	mov	r0, r3
   1f6f8:	ebffe3f0 	bl	186c0 <Network::GetIp() const>
   1f6fc:	e1a03000 	mov	r3, r0
   1f700:	e6ef6073 	uxtb	r6, r3
   1f704:	ebffe3f7 	bl	186e8 <Network::Get()>
   1f708:	e1a03000 	mov	r3, r0
   1f70c:	e1a00003 	mov	r0, r3
   1f710:	ebffe3ea 	bl	186c0 <Network::GetIp() const>
   1f714:	e1a03000 	mov	r3, r0
   1f718:	e1a03423 	lsr	r3, r3, #8
   1f71c:	e6ef4073 	uxtb	r4, r3
   1f720:	ebffe3f0 	bl	186e8 <Network::Get()>
   1f724:	e1a03000 	mov	r3, r0
   1f728:	e1a00003 	mov	r0, r3
   1f72c:	ebffe3e3 	bl	186c0 <Network::GetIp() const>
   1f730:	e1a03000 	mov	r3, r0
   1f734:	e1a03823 	lsr	r3, r3, #16
   1f738:	e6ef5073 	uxtb	r5, r3
   1f73c:	ebffe3e9 	bl	186e8 <Network::Get()>
   1f740:	e1a03000 	mov	r3, r0
   1f744:	e1a00003 	mov	r0, r3
   1f748:	ebffe3dc 	bl	186c0 <Network::GetIp() const>
   1f74c:	e1a03000 	mov	r3, r0
   1f750:	e1a03c23 	lsr	r3, r3, #24
   1f754:	e6ef3073 	uxtb	r3, r3
   1f758:	e58d3008 	str	r3, [sp, #8]
   1f75c:	e58d5004 	str	r5, [sp, #4]
   1f760:	e58d4000 	str	r4, [sp]
   1f764:	e1a03006 	mov	r3, r6
   1f768:	e59f2014 	ldr	r2, [pc, #20]	; 1f784 <ArtNetNode::GetShortNameDefault(char*)+0xac>
   1f76c:	e3a01011 	mov	r1, #17
   1f770:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   1f774:	ebffc6bf 	bl	11278 <snprintf@plt>
   1f778:	e1a00000 	nop			; (mov r0, r0)
   1f77c:	e24bd010 	sub	sp, fp, #16
   1f780:	e8bd8870 	pop	{r4, r5, r6, fp, pc}
   1f784:	00046768 	.word	0x00046768

0001f788 <ArtNetNode::SetShortName(char const*)>:
   1f788:	e92d4800 	push	{fp, lr}
   1f78c:	e28db004 	add	fp, sp, #4
   1f790:	e24dd008 	sub	sp, sp, #8
   1f794:	e50b0008 	str	r0, [fp, #-8]
   1f798:	e50b100c 	str	r1, [fp, #-12]
   1f79c:	e51b300c 	ldr	r3, [fp, #-12]
   1f7a0:	e3530000 	cmp	r3, #0
   1f7a4:	1a000005 	bne	1f7c0 <ArtNetNode::SetShortName(char const*)+0x38>
   1f7a8:	e51b3008 	ldr	r3, [fp, #-8]
   1f7ac:	e2833014 	add	r3, r3, #20
   1f7b0:	e1a01003 	mov	r1, r3
   1f7b4:	e51b0008 	ldr	r0, [fp, #-8]
   1f7b8:	ebffffc6 	bl	1f6d8 <ArtNetNode::GetShortNameDefault(char*)>
   1f7bc:	ea000005 	b	1f7d8 <ArtNetNode::SetShortName(char const*)+0x50>
   1f7c0:	e51b3008 	ldr	r3, [fp, #-8]
   1f7c4:	e2833014 	add	r3, r3, #20
   1f7c8:	e3a02011 	mov	r2, #17
   1f7cc:	e51b100c 	ldr	r1, [fp, #-12]
   1f7d0:	e1a00003 	mov	r0, r3
   1f7d4:	ebffc731 	bl	114a0 <strncpy@plt>
   1f7d8:	e51b3008 	ldr	r3, [fp, #-8]
   1f7dc:	e3a02000 	mov	r2, #0
   1f7e0:	e5c32025 	strb	r2, [r3, #37]	; 0x25
   1f7e4:	e51b3008 	ldr	r3, [fp, #-8]
   1f7e8:	e2833d19 	add	r3, r3, #1600	; 0x640
   1f7ec:	e2833006 	add	r3, r3, #6
   1f7f0:	e51b2008 	ldr	r2, [fp, #-8]
   1f7f4:	e2821014 	add	r1, r2, #20
   1f7f8:	e3a02012 	mov	r2, #18
   1f7fc:	e1a00003 	mov	r0, r3
   1f800:	ebffc6ff 	bl	11404 <memcpy@plt>
   1f804:	e51b3008 	ldr	r3, [fp, #-8]
   1f808:	e5d33085 	ldrb	r3, [r3, #133]	; 0x85
   1f80c:	e3530002 	cmp	r3, #2
   1f810:	1a000012 	bne	1f860 <ArtNetNode::SetShortName(char const*)+0xd8>
   1f814:	e51b3008 	ldr	r3, [fp, #-8]
   1f818:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   1f81c:	e3530000 	cmp	r3, #0
   1f820:	0a00000a 	beq	1f850 <ArtNetNode::SetShortName(char const*)+0xc8>
   1f824:	e51b3008 	ldr	r3, [fp, #-8]
   1f828:	e5930a64 	ldr	r0, [r3, #2660]	; 0xa64
   1f82c:	e51b3008 	ldr	r3, [fp, #-8]
   1f830:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   1f834:	e5933000 	ldr	r3, [r3]
   1f838:	e283300c 	add	r3, r3, #12
   1f83c:	e5933000 	ldr	r3, [r3]
   1f840:	e51b2008 	ldr	r2, [fp, #-8]
   1f844:	e2822014 	add	r2, r2, #20
   1f848:	e1a01002 	mov	r1, r2
   1f84c:	e12fff33 	blx	r3
   1f850:	e51b3008 	ldr	r3, [fp, #-8]
   1f854:	e2833014 	add	r3, r3, #20
   1f858:	e1a00003 	mov	r0, r3
   1f85c:	ebffcf11 	bl	134a8 <artnet::display_shortname(char const*)>
   1f860:	e1a00000 	nop			; (mov r0, r0)
   1f864:	e24bd004 	sub	sp, fp, #4
   1f868:	e8bd8800 	pop	{fp, pc}

0001f86c <ArtNetNode::GetLongNameDefault(char*)>:
   1f86c:	e92d4800 	push	{fp, lr}
   1f870:	e28db004 	add	fp, sp, #4
   1f874:	e24dd028 	sub	sp, sp, #40	; 0x28
   1f878:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1f87c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   1f880:	ebffc75e 	bl	11600 <Hardware::Get()>
   1f884:	e1a02000 	mov	r2, r0
   1f888:	e24b300d 	sub	r3, fp, #13
   1f88c:	e1a01003 	mov	r1, r3
   1f890:	e1a00002 	mov	r0, r2
   1f894:	eb0080cf 	bl	3fbd8 <Hardware::GetBoardName(unsigned char&)>
   1f898:	e50b0008 	str	r0, [fp, #-8]
   1f89c:	ebffc757 	bl	11600 <Hardware::Get()>
   1f8a0:	e1a03000 	mov	r3, r0
   1f8a4:	e1a00003 	mov	r0, r3
   1f8a8:	ebffe397 	bl	1870c <Hardware::GetWebsiteUrl()>
   1f8ac:	e50b000c 	str	r0, [fp, #-12]
   1f8b0:	e51b300c 	ldr	r3, [fp, #-12]
   1f8b4:	e58d3008 	str	r3, [sp, #8]
   1f8b8:	e3a03004 	mov	r3, #4
   1f8bc:	e58d3004 	str	r3, [sp, #4]
   1f8c0:	e59f3020 	ldr	r3, [pc, #32]	; 1f8e8 <ArtNetNode::GetLongNameDefault(char*)+0x7c>
   1f8c4:	e58d3000 	str	r3, [sp]
   1f8c8:	e51b3008 	ldr	r3, [fp, #-8]
   1f8cc:	e59f2018 	ldr	r2, [pc, #24]	; 1f8ec <ArtNetNode::GetLongNameDefault(char*)+0x80>
   1f8d0:	e3a0103f 	mov	r1, #63	; 0x3f
   1f8d4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   1f8d8:	ebffc666 	bl	11278 <snprintf@plt>
   1f8dc:	e1a00000 	nop			; (mov r0, r0)
   1f8e0:	e24bd004 	sub	sp, fp, #4
   1f8e4:	e8bd8800 	pop	{fp, pc}
   1f8e8:	00046708 	.word	0x00046708
   1f8ec:	00046774 	.word	0x00046774

0001f8f0 <ArtNetNode::SetLongName(char const*)>:
   1f8f0:	e92d4800 	push	{fp, lr}
   1f8f4:	e28db004 	add	fp, sp, #4
   1f8f8:	e24dd008 	sub	sp, sp, #8
   1f8fc:	e50b0008 	str	r0, [fp, #-8]
   1f900:	e50b100c 	str	r1, [fp, #-12]
   1f904:	e51b300c 	ldr	r3, [fp, #-12]
   1f908:	e3530000 	cmp	r3, #0
   1f90c:	1a000005 	bne	1f928 <ArtNetNode::SetLongName(char const*)+0x38>
   1f910:	e51b3008 	ldr	r3, [fp, #-8]
   1f914:	e2833026 	add	r3, r3, #38	; 0x26
   1f918:	e1a01003 	mov	r1, r3
   1f91c:	e51b0008 	ldr	r0, [fp, #-8]
   1f920:	ebffffd1 	bl	1f86c <ArtNetNode::GetLongNameDefault(char*)>
   1f924:	ea000005 	b	1f940 <ArtNetNode::SetLongName(char const*)+0x50>
   1f928:	e51b3008 	ldr	r3, [fp, #-8]
   1f92c:	e2833026 	add	r3, r3, #38	; 0x26
   1f930:	e3a0203f 	mov	r2, #63	; 0x3f
   1f934:	e51b100c 	ldr	r1, [fp, #-12]
   1f938:	e1a00003 	mov	r0, r3
   1f93c:	ebffc6d7 	bl	114a0 <strncpy@plt>
   1f940:	e51b3008 	ldr	r3, [fp, #-8]
   1f944:	e3a02000 	mov	r2, #0
   1f948:	e5c32065 	strb	r2, [r3, #101]	; 0x65
   1f94c:	e51b3008 	ldr	r3, [fp, #-8]
   1f950:	e2833e65 	add	r3, r3, #1616	; 0x650
   1f954:	e2833008 	add	r3, r3, #8
   1f958:	e51b2008 	ldr	r2, [fp, #-8]
   1f95c:	e2821026 	add	r1, r2, #38	; 0x26
   1f960:	e3a02040 	mov	r2, #64	; 0x40
   1f964:	e1a00003 	mov	r0, r3
   1f968:	ebffc6a5 	bl	11404 <memcpy@plt>
   1f96c:	e51b3008 	ldr	r3, [fp, #-8]
   1f970:	e5d33085 	ldrb	r3, [r3, #133]	; 0x85
   1f974:	e3530002 	cmp	r3, #2
   1f978:	1a000012 	bne	1f9c8 <ArtNetNode::SetLongName(char const*)+0xd8>
   1f97c:	e51b3008 	ldr	r3, [fp, #-8]
   1f980:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   1f984:	e3530000 	cmp	r3, #0
   1f988:	0a00000a 	beq	1f9b8 <ArtNetNode::SetLongName(char const*)+0xc8>
   1f98c:	e51b3008 	ldr	r3, [fp, #-8]
   1f990:	e5930a64 	ldr	r0, [r3, #2660]	; 0xa64
   1f994:	e51b3008 	ldr	r3, [fp, #-8]
   1f998:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   1f99c:	e5933000 	ldr	r3, [r3]
   1f9a0:	e2833010 	add	r3, r3, #16
   1f9a4:	e5933000 	ldr	r3, [r3]
   1f9a8:	e51b2008 	ldr	r2, [fp, #-8]
   1f9ac:	e2822026 	add	r2, r2, #38	; 0x26
   1f9b0:	e1a01002 	mov	r1, r2
   1f9b4:	e12fff33 	blx	r3
   1f9b8:	e51b3008 	ldr	r3, [fp, #-8]
   1f9bc:	e2833026 	add	r3, r3, #38	; 0x26
   1f9c0:	e1a00003 	mov	r0, r3
   1f9c4:	ebffcecc 	bl	134fc <artnet::display_longname(char const*)>
   1f9c8:	e1a00000 	nop			; (mov r0, r0)
   1f9cc:	e24bd004 	sub	sp, fp, #4
   1f9d0:	e8bd8800 	pop	{fp, pc}

0001f9d4 <ArtNetNode::SetNetworkDataLossCondition()>:
   1f9d4:	e92d4800 	push	{fp, lr}
   1f9d8:	e28db004 	add	fp, sp, #4
   1f9dc:	e24dd018 	sub	sp, sp, #24
   1f9e0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   1f9e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f9e8:	e3a02000 	mov	r2, #0
   1f9ec:	e5c3208a 	strb	r2, [r3, #138]	; 0x8a
   1f9f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f9f4:	e3a02000 	mov	r2, #0
   1f9f8:	e5c32089 	strb	r2, [r3, #137]	; 0x89
   1f9fc:	e3a03000 	mov	r3, #0
   1fa00:	e50b3008 	str	r3, [fp, #-8]
   1fa04:	e3a03000 	mov	r3, #0
   1fa08:	e50b300c 	str	r3, [fp, #-12]
   1fa0c:	e51b300c 	ldr	r3, [fp, #-12]
   1fa10:	e3530003 	cmp	r3, #3
   1fa14:	8a000016 	bhi	1fa74 <ArtNetNode::SetNetworkDataLossCondition()+0xa0>
   1fa18:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fa1c:	e51b300c 	ldr	r3, [fp, #-12]
   1fa20:	e1a03283 	lsl	r3, r3, #5
   1fa24:	e0823003 	add	r3, r2, r3
   1fa28:	e59320a0 	ldr	r2, [r3, #160]	; 0xa0
   1fa2c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   1fa30:	e51b300c 	ldr	r3, [fp, #-12]
   1fa34:	e2833005 	add	r3, r3, #5
   1fa38:	e1a03283 	lsl	r3, r3, #5
   1fa3c:	e0813003 	add	r3, r1, r3
   1fa40:	e5933008 	ldr	r3, [r3, #8]
   1fa44:	e0823003 	add	r3, r2, r3
   1fa48:	e51b2008 	ldr	r2, [fp, #-8]
   1fa4c:	e0823003 	add	r3, r2, r3
   1fa50:	e50b3008 	str	r3, [fp, #-8]
   1fa54:	e51b3008 	ldr	r3, [fp, #-8]
   1fa58:	e3530000 	cmp	r3, #0
   1fa5c:	1a000003 	bne	1fa70 <ArtNetNode::SetNetworkDataLossCondition()+0x9c>
   1fa60:	e51b300c 	ldr	r3, [fp, #-12]
   1fa64:	e2833001 	add	r3, r3, #1
   1fa68:	e50b300c 	str	r3, [fp, #-12]
   1fa6c:	eaffffe6 	b	1fa0c <ArtNetNode::SetNetworkDataLossCondition()+0x38>
   1fa70:	e1a00000 	nop			; (mov r0, r0)
   1fa74:	e51b3008 	ldr	r3, [fp, #-8]
   1fa78:	e3530000 	cmp	r3, #0
   1fa7c:	0a000044 	beq	1fb94 <ArtNetNode::SetNetworkDataLossCondition()+0x1c0>
   1fa80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fa84:	e5d33069 	ldrb	r3, [r3, #105]	; 0x69
   1fa88:	e20330c0 	and	r3, r3, #192	; 0xc0
   1fa8c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   1fa90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1fa94:	e3530040 	cmp	r3, #64	; 0x40
   1fa98:	0a00000d 	beq	1fad4 <ArtNetNode::SetNetworkDataLossCondition()+0x100>
   1fa9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1faa0:	e3530040 	cmp	r3, #64	; 0x40
   1faa4:	ca000003 	bgt	1fab8 <ArtNetNode::SetNetworkDataLossCondition()+0xe4>
   1faa8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1faac:	e3530000 	cmp	r3, #0
   1fab0:	0a00001c 	beq	1fb28 <ArtNetNode::SetNetworkDataLossCondition()+0x154>
   1fab4:	ea00001b 	b	1fb28 <ArtNetNode::SetNetworkDataLossCondition()+0x154>
   1fab8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1fabc:	e3530080 	cmp	r3, #128	; 0x80
   1fac0:	0a00000e 	beq	1fb00 <ArtNetNode::SetNetworkDataLossCondition()+0x12c>
   1fac4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   1fac8:	e35300c0 	cmp	r3, #192	; 0xc0
   1facc:	0a000017 	beq	1fb30 <ArtNetNode::SetNetworkDataLossCondition()+0x15c>
   1fad0:	ea000014 	b	1fb28 <ArtNetNode::SetNetworkDataLossCondition()+0x154>
   1fad4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fad8:	e5932a50 	ldr	r2, [r3, #2640]	; 0xa50
   1fadc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fae0:	e5933a50 	ldr	r3, [r3, #2640]	; 0xa50
   1fae4:	e5933000 	ldr	r3, [r3]
   1fae8:	e2833014 	add	r3, r3, #20
   1faec:	e5933000 	ldr	r3, [r3]
   1faf0:	e3a01001 	mov	r1, #1
   1faf4:	e1a00002 	mov	r0, r2
   1faf8:	e12fff33 	blx	r3
   1fafc:	ea00000c 	b	1fb34 <ArtNetNode::SetNetworkDataLossCondition()+0x160>
   1fb00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fb04:	e5932a50 	ldr	r2, [r3, #2640]	; 0xa50
   1fb08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fb0c:	e5933a50 	ldr	r3, [r3, #2640]	; 0xa50
   1fb10:	e5933000 	ldr	r3, [r3]
   1fb14:	e2833018 	add	r3, r3, #24
   1fb18:	e5933000 	ldr	r3, [r3]
   1fb1c:	e1a00002 	mov	r0, r2
   1fb20:	e12fff33 	blx	r3
   1fb24:	ea000002 	b	1fb34 <ArtNetNode::SetNetworkDataLossCondition()+0x160>
   1fb28:	e1a00000 	nop			; (mov r0, r0)
   1fb2c:	ea000000 	b	1fb34 <ArtNetNode::SetNetworkDataLossCondition()+0x160>
   1fb30:	e1a00000 	nop			; (mov r0, r0)
   1fb34:	e3a03000 	mov	r3, #0
   1fb38:	e50b3010 	str	r3, [fp, #-16]
   1fb3c:	e51b3010 	ldr	r3, [fp, #-16]
   1fb40:	e3530003 	cmp	r3, #3
   1fb44:	8a000013 	bhi	1fb98 <ArtNetNode::SetNetworkDataLossCondition()+0x1c4>
   1fb48:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fb4c:	e51b3010 	ldr	r3, [fp, #-16]
   1fb50:	e1a03283 	lsl	r3, r3, #5
   1fb54:	e0823003 	add	r3, r2, r3
   1fb58:	e3a02000 	mov	r2, #0
   1fb5c:	e58320a0 	str	r2, [r3, #160]	; 0xa0
   1fb60:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fb64:	e51b3010 	ldr	r3, [fp, #-16]
   1fb68:	e2833005 	add	r3, r3, #5
   1fb6c:	e1a03283 	lsl	r3, r3, #5
   1fb70:	e0823003 	add	r3, r2, r3
   1fb74:	e3a02000 	mov	r2, #0
   1fb78:	e5832008 	str	r2, [r3, #8]
   1fb7c:	e51b0010 	ldr	r0, [fp, #-16]
   1fb80:	ebfffd21 	bl	1f00c <lightset::Data::ClearLength(unsigned int)>
   1fb84:	e51b3010 	ldr	r3, [fp, #-16]
   1fb88:	e2833001 	add	r3, r3, #1
   1fb8c:	e50b3010 	str	r3, [fp, #-16]
   1fb90:	eaffffe9 	b	1fb3c <ArtNetNode::SetNetworkDataLossCondition()+0x168>
   1fb94:	e1a00000 	nop			; (mov r0, r0)
   1fb98:	e24bd004 	sub	sp, fp, #4
   1fb9c:	e8bd8800 	pop	{fp, pc}

0001fba0 <ArtNetNode::GetType()>:
   1fba0:	e92d4800 	push	{fp, lr}
   1fba4:	e28db004 	add	fp, sp, #4
   1fba8:	e24dd010 	sub	sp, sp, #16
   1fbac:	e50b0010 	str	r0, [fp, #-16]
   1fbb0:	e51b3010 	ldr	r3, [fp, #-16]
   1fbb4:	e2833f55 	add	r3, r3, #340	; 0x154
   1fbb8:	e50b3008 	str	r3, [fp, #-8]
   1fbbc:	e51b3010 	ldr	r3, [fp, #-16]
   1fbc0:	e2833e62 	add	r3, r3, #1568	; 0x620
   1fbc4:	e2833004 	add	r3, r3, #4
   1fbc8:	e1d330b0 	ldrh	r3, [r3]
   1fbcc:	e353000b 	cmp	r3, #11
   1fbd0:	8a000003 	bhi	1fbe4 <ArtNetNode::GetType()+0x44>
   1fbd4:	e51b3010 	ldr	r3, [fp, #-16]
   1fbd8:	e3a02000 	mov	r2, #0
   1fbdc:	e5832628 	str	r2, [r3, #1576]	; 0x628
   1fbe0:	ea000026 	b	1fc80 <ArtNetNode::GetType()+0xe0>
   1fbe4:	e51b3008 	ldr	r3, [fp, #-8]
   1fbe8:	e283300a 	add	r3, r3, #10
   1fbec:	e5d33000 	ldrb	r3, [r3]
   1fbf0:	e3530000 	cmp	r3, #0
   1fbf4:	1a000004 	bne	1fc0c <ArtNetNode::GetType()+0x6c>
   1fbf8:	e51b3008 	ldr	r3, [fp, #-8]
   1fbfc:	e283300b 	add	r3, r3, #11
   1fc00:	e5d33000 	ldrb	r3, [r3]
   1fc04:	e353000e 	cmp	r3, #14
   1fc08:	0a000003 	beq	1fc1c <ArtNetNode::GetType()+0x7c>
   1fc0c:	e51b3010 	ldr	r3, [fp, #-16]
   1fc10:	e3a02000 	mov	r2, #0
   1fc14:	e5832628 	str	r2, [r3, #1576]	; 0x628
   1fc18:	ea000018 	b	1fc80 <ArtNetNode::GetType()+0xe0>
   1fc1c:	e3a02008 	mov	r2, #8
   1fc20:	e59f1060 	ldr	r1, [pc, #96]	; 1fc88 <ArtNetNode::GetType()+0xe8>
   1fc24:	e51b0008 	ldr	r0, [fp, #-8]
   1fc28:	ebffc622 	bl	114b8 <memcmp@plt>
   1fc2c:	e1a03000 	mov	r3, r0
   1fc30:	e3530000 	cmp	r3, #0
   1fc34:	1a00000e 	bne	1fc74 <ArtNetNode::GetType()+0xd4>
   1fc38:	e51b3008 	ldr	r3, [fp, #-8]
   1fc3c:	e2833009 	add	r3, r3, #9
   1fc40:	e5d33000 	ldrb	r3, [r3]
   1fc44:	e6ff3073 	uxth	r3, r3
   1fc48:	e1a03403 	lsl	r3, r3, #8
   1fc4c:	e6ff3073 	uxth	r3, r3
   1fc50:	e1a02003 	mov	r2, r3
   1fc54:	e51b3008 	ldr	r3, [fp, #-8]
   1fc58:	e2833008 	add	r3, r3, #8
   1fc5c:	e5d33000 	ldrb	r3, [r3]
   1fc60:	e0823003 	add	r3, r2, r3
   1fc64:	e1a02003 	mov	r2, r3
   1fc68:	e51b3010 	ldr	r3, [fp, #-16]
   1fc6c:	e5832628 	str	r2, [r3, #1576]	; 0x628
   1fc70:	ea000002 	b	1fc80 <ArtNetNode::GetType()+0xe0>
   1fc74:	e51b3010 	ldr	r3, [fp, #-16]
   1fc78:	e3a02000 	mov	r2, #0
   1fc7c:	e5832628 	str	r2, [r3, #1576]	; 0x628
   1fc80:	e24bd004 	sub	sp, fp, #4
   1fc84:	e8bd8800 	pop	{fp, pc}
   1fc88:	00046708 	.word	0x00046708

0001fc8c <ArtNetNode::Run()>:
   1fc8c:	e92d4800 	push	{fp, lr}
   1fc90:	e28db004 	add	fp, sp, #4
   1fc94:	e24dd018 	sub	sp, sp, #24
   1fc98:	e50b0010 	str	r0, [fp, #-16]
   1fc9c:	ebffe291 	bl	186e8 <Network::Get()>
   1fca0:	e1a0c000 	mov	ip, r0
   1fca4:	e51b3010 	ldr	r3, [fp, #-16]
   1fca8:	e5931000 	ldr	r1, [r3]
   1fcac:	e51b3010 	ldr	r3, [fp, #-16]
   1fcb0:	e2830f55 	add	r0, r3, #340	; 0x154
   1fcb4:	e51b3010 	ldr	r3, [fp, #-16]
   1fcb8:	e2833e62 	add	r3, r3, #1568	; 0x620
   1fcbc:	e24b200a 	sub	r2, fp, #10
   1fcc0:	e58d2004 	str	r2, [sp, #4]
   1fcc4:	e58d3000 	str	r3, [sp]
   1fcc8:	e59f343c 	ldr	r3, [pc, #1084]	; 2010c <ArtNetNode::Run()+0x480>
   1fccc:	e1a02000 	mov	r2, r0
   1fcd0:	e1a0000c 	mov	r0, ip
   1fcd4:	eb005a71 	bl	366a0 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)>
   1fcd8:	e1a03000 	mov	r3, r0
   1fcdc:	e14b30b6 	strh	r3, [fp, #-6]
   1fce0:	ebffc646 	bl	11600 <Hardware::Get()>
   1fce4:	e1a03000 	mov	r3, r0
   1fce8:	e1a00003 	mov	r0, r3
   1fcec:	eb008174 	bl	402c4 <Hardware::Millis()>
   1fcf0:	e1a02000 	mov	r2, r0
   1fcf4:	e51b3010 	ldr	r3, [fp, #-16]
   1fcf8:	e5832a44 	str	r2, [r3, #2628]	; 0xa44
   1fcfc:	e15b30b6 	ldrh	r3, [fp, #-6]
   1fd00:	e3530000 	cmp	r3, #0
   1fd04:	03a03001 	moveq	r3, #1
   1fd08:	13a03000 	movne	r3, #0
   1fd0c:	e6ef3073 	uxtb	r3, r3
   1fd10:	e3530000 	cmp	r3, #0
   1fd14:	0a00005e 	beq	1fe94 <ArtNetNode::Run()+0x208>
   1fd18:	e51b3010 	ldr	r3, [fp, #-16]
   1fd1c:	e5932a44 	ldr	r2, [r3, #2628]	; 0xa44
   1fd20:	e51b3010 	ldr	r3, [fp, #-16]
   1fd24:	e5933a48 	ldr	r3, [r3, #2632]	; 0xa48
   1fd28:	e0423003 	sub	r3, r2, r3
   1fd2c:	e59f23dc 	ldr	r2, [pc, #988]	; 20110 <ArtNetNode::Run()+0x484>
   1fd30:	e1530002 	cmp	r3, r2
   1fd34:	9a000003 	bls	1fd48 <ArtNetNode::Run()+0xbc>
   1fd38:	e51b0010 	ldr	r0, [fp, #-16]
   1fd3c:	ebffff24 	bl	1f9d4 <ArtNetNode::SetNetworkDataLossCondition()>
   1fd40:	e3a00000 	mov	r0, #0
   1fd44:	ebfffcd9 	bl	1f0b0 <hal::panel_led_off(unsigned int)>
   1fd48:	e51b3010 	ldr	r3, [fp, #-16]
   1fd4c:	e5d33086 	ldrb	r3, [r3, #134]	; 0x86
   1fd50:	e3530000 	cmp	r3, #0
   1fd54:	0a000016 	beq	1fdb4 <ArtNetNode::Run()+0x128>
   1fd58:	e51b3010 	ldr	r3, [fp, #-16]
   1fd5c:	e5d3308b 	ldrb	r3, [r3, #139]	; 0x8b
   1fd60:	e54b3007 	strb	r3, [fp, #-7]
   1fd64:	e51b3010 	ldr	r3, [fp, #-16]
   1fd68:	e5932a60 	ldr	r2, [r3, #2656]	; 0xa60
   1fd6c:	e51b3010 	ldr	r3, [fp, #-16]
   1fd70:	e5933a60 	ldr	r3, [r3, #2656]	; 0xa60
   1fd74:	e5933000 	ldr	r3, [r3]
   1fd78:	e2833014 	add	r3, r3, #20
   1fd7c:	e5933000 	ldr	r3, [r3]
   1fd80:	e1a00002 	mov	r0, r2
   1fd84:	e12fff33 	blx	r3
   1fd88:	e1a03000 	mov	r3, r0
   1fd8c:	e1a02003 	mov	r2, r3
   1fd90:	e55b3007 	ldrb	r3, [fp, #-7]
   1fd94:	e1823003 	orr	r3, r2, r3
   1fd98:	e54b3007 	strb	r3, [fp, #-7]
   1fd9c:	e55b3007 	ldrb	r3, [fp, #-7]
   1fda0:	e3530000 	cmp	r3, #0
   1fda4:	0a000002 	beq	1fdb4 <ArtNetNode::Run()+0x128>
   1fda8:	e3a01000 	mov	r1, #0
   1fdac:	e51b0010 	ldr	r0, [fp, #-16]
   1fdb0:	eb0001c4 	bl	204c8 <ArtNetNode::SendPollRelply(bool)>
   1fdb4:	e51b3010 	ldr	r3, [fp, #-16]
   1fdb8:	e5932a44 	ldr	r2, [r3, #2628]	; 0xa44
   1fdbc:	e51b3010 	ldr	r3, [fp, #-16]
   1fdc0:	e5933a48 	ldr	r3, [r3, #2632]	; 0xa48
   1fdc4:	e0423003 	sub	r3, r2, r3
   1fdc8:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   1fdcc:	3a000005 	bcc	1fde8 <ArtNetNode::Run()+0x15c>
   1fdd0:	e51b3010 	ldr	r3, [fp, #-16]
   1fdd4:	e5d3308d 	ldrb	r3, [r3, #141]	; 0x8d
   1fdd8:	e3c33002 	bic	r3, r3, #2
   1fddc:	e6ef2073 	uxtb	r2, r3
   1fde0:	e51b3010 	ldr	r3, [fp, #-16]
   1fde4:	e5c3208d 	strb	r2, [r3, #141]	; 0x8d
   1fde8:	e51b3010 	ldr	r3, [fp, #-16]
   1fdec:	e5d33067 	ldrb	r3, [r3, #103]	; 0x67
   1fdf0:	e20330c0 	and	r3, r3, #192	; 0xc0
   1fdf4:	e35300c0 	cmp	r3, #192	; 0xc0
   1fdf8:	1a000008 	bne	1fe20 <ArtNetNode::Run()+0x194>
   1fdfc:	ebffc5ff 	bl	11600 <Hardware::Get()>
   1fe00:	e1a03000 	mov	r3, r0
   1fe04:	e1a00003 	mov	r0, r3
   1fe08:	ebfffc53 	bl	1ef5c <Hardware::GetMode()>
   1fe0c:	e1a03000 	mov	r3, r0
   1fe10:	e3530004 	cmp	r3, #4
   1fe14:	0a000001 	beq	1fe20 <ArtNetNode::Run()+0x194>
   1fe18:	e3a03001 	mov	r3, #1
   1fe1c:	ea000000 	b	1fe24 <ArtNetNode::Run()+0x198>
   1fe20:	e3a03000 	mov	r3, #0
   1fe24:	e3530000 	cmp	r3, #0
   1fe28:	0a0000b4 	beq	20100 <ArtNetNode::Run()+0x474>
   1fe2c:	e51b3010 	ldr	r3, [fp, #-16]
   1fe30:	e5d3308d 	ldrb	r3, [r3, #141]	; 0x8d
   1fe34:	e3530000 	cmp	r3, #0
   1fe38:	0a00000a 	beq	1fe68 <ArtNetNode::Run()+0x1dc>
   1fe3c:	e51b3010 	ldr	r3, [fp, #-16]
   1fe40:	e5932a60 	ldr	r2, [r3, #2656]	; 0xa60
   1fe44:	e51b3010 	ldr	r3, [fp, #-16]
   1fe48:	e5933a60 	ldr	r3, [r3, #2656]	; 0xa60
   1fe4c:	e5933000 	ldr	r3, [r3]
   1fe50:	e2833018 	add	r3, r3, #24
   1fe54:	e5933000 	ldr	r3, [r3]
   1fe58:	e3a01003 	mov	r1, #3
   1fe5c:	e1a00002 	mov	r0, r2
   1fe60:	e12fff33 	blx	r3
   1fe64:	ea0000a5 	b	20100 <ArtNetNode::Run()+0x474>
   1fe68:	e51b3010 	ldr	r3, [fp, #-16]
   1fe6c:	e5932a60 	ldr	r2, [r3, #2656]	; 0xa60
   1fe70:	e51b3010 	ldr	r3, [fp, #-16]
   1fe74:	e5933a60 	ldr	r3, [r3, #2656]	; 0xa60
   1fe78:	e5933000 	ldr	r3, [r3]
   1fe7c:	e2833018 	add	r3, r3, #24
   1fe80:	e5933000 	ldr	r3, [r3]
   1fe84:	e3a01002 	mov	r1, #2
   1fe88:	e1a00002 	mov	r0, r2
   1fe8c:	e12fff33 	blx	r3
   1fe90:	ea00009b 	b	20104 <ArtNetNode::Run()+0x478>
   1fe94:	e51b3010 	ldr	r3, [fp, #-16]
   1fe98:	e2833e62 	add	r3, r3, #1568	; 0x620
   1fe9c:	e2833004 	add	r3, r3, #4
   1fea0:	e15b20b6 	ldrh	r2, [fp, #-6]
   1fea4:	e1c320b0 	strh	r2, [r3]
   1fea8:	e51b3010 	ldr	r3, [fp, #-16]
   1feac:	e5932a44 	ldr	r2, [r3, #2628]	; 0xa44
   1feb0:	e51b3010 	ldr	r3, [fp, #-16]
   1feb4:	e5832a48 	str	r2, [r3, #2632]	; 0xa48
   1feb8:	e51b3010 	ldr	r3, [fp, #-16]
   1febc:	e5d33089 	ldrb	r3, [r3, #137]	; 0x89
   1fec0:	e3530000 	cmp	r3, #0
   1fec4:	0a000009 	beq	1fef0 <ArtNetNode::Run()+0x264>
   1fec8:	e51b3010 	ldr	r3, [fp, #-16]
   1fecc:	e5932a44 	ldr	r2, [r3, #2628]	; 0xa44
   1fed0:	e51b3010 	ldr	r3, [fp, #-16]
   1fed4:	e5933080 	ldr	r3, [r3, #128]	; 0x80
   1fed8:	e0423003 	sub	r3, r2, r3
   1fedc:	e3530efa 	cmp	r3, #4000	; 0xfa0
   1fee0:	3a000002 	bcc	1fef0 <ArtNetNode::Run()+0x264>
   1fee4:	e51b3010 	ldr	r3, [fp, #-16]
   1fee8:	e3a02000 	mov	r2, #0
   1feec:	e5c32089 	strb	r2, [r3, #137]	; 0x89
   1fef0:	e51b0010 	ldr	r0, [fp, #-16]
   1fef4:	ebffff29 	bl	1fba0 <ArtNetNode::GetType()>
   1fef8:	e51b3010 	ldr	r3, [fp, #-16]
   1fefc:	e5933628 	ldr	r3, [r3, #1576]	; 0x628
   1ff00:	e3530902 	cmp	r3, #32768	; 0x8000
   1ff04:	0a00002a 	beq	1ffb4 <ArtNetNode::Run()+0x328>
   1ff08:	e3530902 	cmp	r3, #32768	; 0x8000
   1ff0c:	ca00000b 	bgt	1ff40 <ArtNetNode::Run()+0x2b4>
   1ff10:	e3530a05 	cmp	r3, #20480	; 0x5000
   1ff14:	0a00001a 	beq	1ff84 <ArtNetNode::Run()+0x2f8>
   1ff18:	e3530a05 	cmp	r3, #20480	; 0x5000
   1ff1c:	ca000002 	bgt	1ff2c <ArtNetNode::Run()+0x2a0>
   1ff20:	e3530a02 	cmp	r3, #8192	; 0x2000
   1ff24:	0a000013 	beq	1ff78 <ArtNetNode::Run()+0x2ec>
   1ff28:	ea000047 	b	2004c <ArtNetNode::Run()+0x3c0>
   1ff2c:	e3530c52 	cmp	r3, #20992	; 0x5200
   1ff30:	0a000016 	beq	1ff90 <ArtNetNode::Run()+0x304>
   1ff34:	e3530a06 	cmp	r3, #24576	; 0x6000
   1ff38:	0a000017 	beq	1ff9c <ArtNetNode::Run()+0x310>
   1ff3c:	ea000042 	b	2004c <ArtNetNode::Run()+0x3c0>
   1ff40:	e3530c83 	cmp	r3, #33536	; 0x8300
   1ff44:	0a00002f 	beq	20008 <ArtNetNode::Run()+0x37c>
   1ff48:	e3530c83 	cmp	r3, #33536	; 0x8300
   1ff4c:	ca000004 	bgt	1ff64 <ArtNetNode::Run()+0x2d8>
   1ff50:	e3530c81 	cmp	r3, #33024	; 0x8100
   1ff54:	0a00001d 	beq	1ffd0 <ArtNetNode::Run()+0x344>
   1ff58:	e3530c82 	cmp	r3, #33280	; 0x8200
   1ff5c:	0a000022 	beq	1ffec <ArtNetNode::Run()+0x360>
   1ff60:	ea000039 	b	2004c <ArtNetNode::Run()+0x3c0>
   1ff64:	e3530b26 	cmp	r3, #38912	; 0x9800
   1ff68:	0a00000e 	beq	1ffa8 <ArtNetNode::Run()+0x31c>
   1ff6c:	e3530b3e 	cmp	r3, #63488	; 0xf800
   1ff70:	0a00002b 	beq	20024 <ArtNetNode::Run()+0x398>
   1ff74:	ea000034 	b	2004c <ArtNetNode::Run()+0x3c0>
   1ff78:	e51b0010 	ldr	r0, [fp, #-16]
   1ff7c:	eb00021c 	bl	207f4 <ArtNetNode::HandlePoll()>
   1ff80:	ea000031 	b	2004c <ArtNetNode::Run()+0x3c0>
   1ff84:	e51b0010 	ldr	r0, [fp, #-16]
   1ff88:	eb0011f2 	bl	24758 <ArtNetNode::HandleDmx()>
   1ff8c:	ea00002e 	b	2004c <ArtNetNode::Run()+0x3c0>
   1ff90:	e51b0010 	ldr	r0, [fp, #-16]
   1ff94:	eb000c3e 	bl	23094 <ArtNetNode::HandleSync()>
   1ff98:	ea00002b 	b	2004c <ArtNetNode::Run()+0x3c0>
   1ff9c:	e51b0010 	ldr	r0, [fp, #-16]
   1ffa0:	eb000910 	bl	223e8 <ArtNetNode::HandleAddress()>
   1ffa4:	ea000028 	b	2004c <ArtNetNode::Run()+0x3c0>
   1ffa8:	e51b0010 	ldr	r0, [fp, #-16]
   1ffac:	eb000c80 	bl	231b4 <ArtNetNode::HandleTimeSync()>
   1ffb0:	ea000025 	b	2004c <ArtNetNode::Run()+0x3c0>
   1ffb4:	e51b3010 	ldr	r3, [fp, #-16]
   1ffb8:	e5933a58 	ldr	r3, [r3, #2648]	; 0xa58
   1ffbc:	e3530000 	cmp	r3, #0
   1ffc0:	0a00001a 	beq	20030 <ArtNetNode::Run()+0x3a4>
   1ffc4:	e51b0010 	ldr	r0, [fp, #-16]
   1ffc8:	eb0003ad 	bl	20e84 <ArtNetNode::HandleTodRequest()>
   1ffcc:	ea000017 	b	20030 <ArtNetNode::Run()+0x3a4>
   1ffd0:	e51b3010 	ldr	r3, [fp, #-16]
   1ffd4:	e5933a58 	ldr	r3, [r3, #2648]	; 0xa58
   1ffd8:	e3530000 	cmp	r3, #0
   1ffdc:	0a000015 	beq	20038 <ArtNetNode::Run()+0x3ac>
   1ffe0:	e51b0010 	ldr	r0, [fp, #-16]
   1ffe4:	eb0003e8 	bl	20f8c <ArtNetNode::HandleTodData()>
   1ffe8:	ea000012 	b	20038 <ArtNetNode::Run()+0x3ac>
   1ffec:	e51b3010 	ldr	r3, [fp, #-16]
   1fff0:	e5933a58 	ldr	r3, [r3, #2648]	; 0xa58
   1fff4:	e3530000 	cmp	r3, #0
   1fff8:	0a000010 	beq	20040 <ArtNetNode::Run()+0x3b4>
   1fffc:	e51b0010 	ldr	r0, [fp, #-16]
   20000:	eb000332 	bl	20cd0 <ArtNetNode::HandleTodControl()>
   20004:	ea00000d 	b	20040 <ArtNetNode::Run()+0x3b4>
   20008:	e51b3010 	ldr	r3, [fp, #-16]
   2000c:	e5933a58 	ldr	r3, [r3, #2648]	; 0xa58
   20010:	e3530000 	cmp	r3, #0
   20014:	0a00000b 	beq	20048 <ArtNetNode::Run()+0x3bc>
   20018:	e51b0010 	ldr	r0, [fp, #-16]
   2001c:	eb000550 	bl	21564 <ArtNetNode::HandleRdm()>
   20020:	ea000008 	b	20048 <ArtNetNode::Run()+0x3bc>
   20024:	e51b0010 	ldr	r0, [fp, #-16]
   20028:	eb000aea 	bl	22bd8 <ArtNetNode::HandleIpProg()>
   2002c:	ea000006 	b	2004c <ArtNetNode::Run()+0x3c0>
   20030:	e1a00000 	nop			; (mov r0, r0)
   20034:	ea000004 	b	2004c <ArtNetNode::Run()+0x3c0>
   20038:	e1a00000 	nop			; (mov r0, r0)
   2003c:	ea000002 	b	2004c <ArtNetNode::Run()+0x3c0>
   20040:	e1a00000 	nop			; (mov r0, r0)
   20044:	ea000000 	b	2004c <ArtNetNode::Run()+0x3c0>
   20048:	e1a00000 	nop			; (mov r0, r0)
   2004c:	e51b3010 	ldr	r3, [fp, #-16]
   20050:	e5d33067 	ldrb	r3, [r3, #103]	; 0x67
   20054:	e20330c0 	and	r3, r3, #192	; 0xc0
   20058:	e35300c0 	cmp	r3, #192	; 0xc0
   2005c:	1a000008 	bne	20084 <ArtNetNode::Run()+0x3f8>
   20060:	ebffc566 	bl	11600 <Hardware::Get()>
   20064:	e1a03000 	mov	r3, r0
   20068:	e1a00003 	mov	r0, r3
   2006c:	ebfffbba 	bl	1ef5c <Hardware::GetMode()>
   20070:	e1a03000 	mov	r3, r0
   20074:	e3530004 	cmp	r3, #4
   20078:	0a000001 	beq	20084 <ArtNetNode::Run()+0x3f8>
   2007c:	e3a03001 	mov	r3, #1
   20080:	ea000000 	b	20088 <ArtNetNode::Run()+0x3fc>
   20084:	e3a03000 	mov	r3, #0
   20088:	e3530000 	cmp	r3, #0
   2008c:	0a000018 	beq	200f4 <ArtNetNode::Run()+0x468>
   20090:	e51b3010 	ldr	r3, [fp, #-16]
   20094:	e5d3308d 	ldrb	r3, [r3, #141]	; 0x8d
   20098:	e3530000 	cmp	r3, #0
   2009c:	0a00000a 	beq	200cc <ArtNetNode::Run()+0x440>
   200a0:	e51b3010 	ldr	r3, [fp, #-16]
   200a4:	e5932a60 	ldr	r2, [r3, #2656]	; 0xa60
   200a8:	e51b3010 	ldr	r3, [fp, #-16]
   200ac:	e5933a60 	ldr	r3, [r3, #2656]	; 0xa60
   200b0:	e5933000 	ldr	r3, [r3]
   200b4:	e2833018 	add	r3, r3, #24
   200b8:	e5933000 	ldr	r3, [r3]
   200bc:	e3a01003 	mov	r1, #3
   200c0:	e1a00002 	mov	r0, r2
   200c4:	e12fff33 	blx	r3
   200c8:	ea000009 	b	200f4 <ArtNetNode::Run()+0x468>
   200cc:	e51b3010 	ldr	r3, [fp, #-16]
   200d0:	e5932a60 	ldr	r2, [r3, #2656]	; 0xa60
   200d4:	e51b3010 	ldr	r3, [fp, #-16]
   200d8:	e5933a60 	ldr	r3, [r3, #2656]	; 0xa60
   200dc:	e5933000 	ldr	r3, [r3]
   200e0:	e2833018 	add	r3, r3, #24
   200e4:	e5933000 	ldr	r3, [r3]
   200e8:	e3a01002 	mov	r1, #2
   200ec:	e1a00002 	mov	r0, r2
   200f0:	e12fff33 	blx	r3
   200f4:	e3a00000 	mov	r0, #0
   200f8:	ebfffbe4 	bl	1f090 <hal::panel_led_on(unsigned int)>
   200fc:	ea000000 	b	20104 <ArtNetNode::Run()+0x478>
   20100:	e1a00000 	nop			; (mov r0, r0)
   20104:	e24bd004 	sub	sp, fp, #4
   20108:	e8bd8800 	pop	{fp, pc}
   2010c:	000004cc 	.word	0x000004cc
   20110:	0000270f 	.word	0x0000270f

00020114 <ArtNetNode::FillPollReply()>:
   20114:	e92d4800 	push	{fp, lr}
   20118:	e28db004 	add	fp, sp, #4
   2011c:	e24dd008 	sub	sp, sp, #8
   20120:	e50b0008 	str	r0, [fp, #-8]
   20124:	e51b3008 	ldr	r3, [fp, #-8]
   20128:	e2833e62 	add	r3, r3, #1568	; 0x620
   2012c:	e283300c 	add	r3, r3, #12
   20130:	e3a020ef 	mov	r2, #239	; 0xef
   20134:	e3a01000 	mov	r1, #0
   20138:	e1a00003 	mov	r0, r3
   2013c:	ebffc44a 	bl	1126c <memset@plt>
   20140:	e51b3008 	ldr	r3, [fp, #-8]
   20144:	e2833e62 	add	r3, r3, #1568	; 0x620
   20148:	e283300c 	add	r3, r3, #12
   2014c:	e59f117c 	ldr	r1, [pc, #380]	; 202d0 <ArtNetNode::FillPollReply()+0x1bc>
   20150:	e1a02003 	mov	r2, r3
   20154:	e1a03001 	mov	r3, r1
   20158:	e8b30003 	ldm	r3!, {r0, r1}
   2015c:	e5820000 	str	r0, [r2]
   20160:	e5821004 	str	r1, [r2, #4]
   20164:	e51b3008 	ldr	r3, [fp, #-8]
   20168:	e2833e63 	add	r3, r3, #1584	; 0x630
   2016c:	e2833004 	add	r3, r3, #4
   20170:	e3a02c21 	mov	r2, #8448	; 0x2100
   20174:	e1c320b0 	strh	r2, [r3]
   20178:	ebffe15a 	bl	186e8 <Network::Get()>
   2017c:	e1a03000 	mov	r3, r0
   20180:	e1a00003 	mov	r0, r3
   20184:	ebffe14d 	bl	186c0 <Network::GetIp() const>
   20188:	e1a02000 	mov	r2, r0
   2018c:	e59f3140 	ldr	r3, [pc, #320]	; 202d4 <ArtNetNode::FillPollReply()+0x1c0>
   20190:	e5832000 	str	r2, [r3]
   20194:	e51b3008 	ldr	r3, [fp, #-8]
   20198:	e2833e63 	add	r3, r3, #1584	; 0x630
   2019c:	e2833006 	add	r3, r3, #6
   201a0:	e59f212c 	ldr	r2, [pc, #300]	; 202d4 <ArtNetNode::FillPollReply()+0x1c0>
   201a4:	e5922000 	ldr	r2, [r2]
   201a8:	e5832000 	str	r2, [r3]
   201ac:	e51b3008 	ldr	r3, [fp, #-8]
   201b0:	e2833e63 	add	r3, r3, #1584	; 0x630
   201b4:	e283300a 	add	r3, r3, #10
   201b8:	e59f2118 	ldr	r2, [pc, #280]	; 202d8 <ArtNetNode::FillPollReply()+0x1c4>
   201bc:	e1c320b0 	strh	r2, [r3]
   201c0:	e59f3114 	ldr	r3, [pc, #276]	; 202dc <ArtNetNode::FillPollReply()+0x1c8>
   201c4:	e5d32000 	ldrb	r2, [r3]
   201c8:	e51b3008 	ldr	r3, [fp, #-8]
   201cc:	e5c3263c 	strb	r2, [r3, #1596]	; 0x63c
   201d0:	e59f3104 	ldr	r3, [pc, #260]	; 202dc <ArtNetNode::FillPollReply()+0x1c8>
   201d4:	e5d32001 	ldrb	r2, [r3, #1]
   201d8:	e51b3008 	ldr	r3, [fp, #-8]
   201dc:	e5c3263d 	strb	r2, [r3, #1597]	; 0x63d
   201e0:	e59f30f8 	ldr	r3, [pc, #248]	; 202e0 <ArtNetNode::FillPollReply()+0x1cc>
   201e4:	e5d32000 	ldrb	r2, [r3]
   201e8:	e51b3008 	ldr	r3, [fp, #-8]
   201ec:	e5c32640 	strb	r2, [r3, #1600]	; 0x640
   201f0:	e59f30e8 	ldr	r3, [pc, #232]	; 202e0 <ArtNetNode::FillPollReply()+0x1cc>
   201f4:	e5d32001 	ldrb	r2, [r3, #1]
   201f8:	e51b3008 	ldr	r3, [fp, #-8]
   201fc:	e5c32641 	strb	r2, [r3, #1601]	; 0x641
   20200:	e59f30dc 	ldr	r3, [pc, #220]	; 202e4 <ArtNetNode::FillPollReply()+0x1d0>
   20204:	e5d32001 	ldrb	r2, [r3, #1]
   20208:	e51b3008 	ldr	r3, [fp, #-8]
   2020c:	e5c32644 	strb	r2, [r3, #1604]	; 0x644
   20210:	e59f30cc 	ldr	r3, [pc, #204]	; 202e4 <ArtNetNode::FillPollReply()+0x1d0>
   20214:	e5d32000 	ldrb	r2, [r3]
   20218:	e51b3008 	ldr	r3, [fp, #-8]
   2021c:	e5c32645 	strb	r2, [r3, #1605]	; 0x645
   20220:	e51b3008 	ldr	r3, [fp, #-8]
   20224:	e2833d19 	add	r3, r3, #1600	; 0x640
   20228:	e2833006 	add	r3, r3, #6
   2022c:	e51b2008 	ldr	r2, [fp, #-8]
   20230:	e2821014 	add	r1, r2, #20
   20234:	e3a02012 	mov	r2, #18
   20238:	e1a00003 	mov	r0, r3
   2023c:	ebffc470 	bl	11404 <memcpy@plt>
   20240:	e51b3008 	ldr	r3, [fp, #-8]
   20244:	e2833e65 	add	r3, r3, #1616	; 0x650
   20248:	e2833008 	add	r3, r3, #8
   2024c:	e51b2008 	ldr	r2, [fp, #-8]
   20250:	e2821026 	add	r1, r2, #38	; 0x26
   20254:	e3a02040 	mov	r2, #64	; 0x40
   20258:	e1a00003 	mov	r0, r3
   2025c:	ebffc468 	bl	11404 <memcpy@plt>
   20260:	e51b3008 	ldr	r3, [fp, #-8]
   20264:	e3a02000 	mov	r2, #0
   20268:	e5c326f4 	strb	r2, [r3, #1780]	; 0x6f4
   2026c:	e51b3008 	ldr	r3, [fp, #-8]
   20270:	e2833e6f 	add	r3, r3, #1776	; 0x6f0
   20274:	e2833005 	add	r3, r3, #5
   20278:	e51b2008 	ldr	r2, [fp, #-8]
   2027c:	e282100c 	add	r1, r2, #12
   20280:	e3a02006 	mov	r2, #6
   20284:	e1a00003 	mov	r0, r3
   20288:	ebffc45d 	bl	11404 <memcpy@plt>
   2028c:	e51b3008 	ldr	r3, [fp, #-8]
   20290:	e2833e6f 	add	r3, r3, #1776	; 0x6f0
   20294:	e283300b 	add	r3, r3, #11
   20298:	e59f2034 	ldr	r2, [pc, #52]	; 202d4 <ArtNetNode::FillPollReply()+0x1c0>
   2029c:	e5922000 	ldr	r2, [r2]
   202a0:	e5832000 	str	r2, [r3]
   202a4:	e51b3008 	ldr	r3, [fp, #-8]
   202a8:	e2833c07 	add	r3, r3, #1792	; 0x700
   202ac:	e2833006 	add	r3, r3, #6
   202b0:	e51b2008 	ldr	r2, [fp, #-8]
   202b4:	e282106a 	add	r1, r2, #106	; 0x6a
   202b8:	e3a02006 	mov	r2, #6
   202bc:	e1a00003 	mov	r0, r3
   202c0:	ebffc44f 	bl	11404 <memcpy@plt>
   202c4:	e1a00000 	nop			; (mov r0, r0)
   202c8:	e24bd004 	sub	sp, fp, #4
   202cc:	e8bd8800 	pop	{fp, pc}
   202d0:	000467ec 	.word	0x000467ec
   202d4:	0005dc00 	.word	0x0005dc00
   202d8:	00001936 	.word	0x00001936
   202dc:	00046db8 	.word	0x00046db8
   202e0:	00046dc0 	.word	0x00046dc0
   202e4:	00046dbc 	.word	0x00046dbc

000202e8 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int&, unsigned int&)>:
   202e8:	e92d4800 	push	{fp, lr}
   202ec:	e28db004 	add	fp, sp, #4
   202f0:	e24dd018 	sub	sp, sp, #24
   202f4:	e50b0010 	str	r0, [fp, #-16]
   202f8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   202fc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   20300:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   20304:	e51b2010 	ldr	r2, [fp, #-16]
   20308:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2030c:	e1a03283 	lsl	r3, r3, #5
   20310:	e0823003 	add	r3, r2, r3
   20314:	e59330ac 	ldr	r3, [r3, #172]	; 0xac
   20318:	e3530001 	cmp	r3, #1
   2031c:	1a00002a 	bne	203cc <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int&, unsigned int&)+0xe4>
   20320:	e3a03089 	mov	r3, #137	; 0x89
   20324:	e50b3008 	str	r3, [fp, #-8]
   20328:	e51b2010 	ldr	r2, [fp, #-16]
   2032c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20330:	e1a03283 	lsl	r3, r3, #5
   20334:	e0823003 	add	r3, r2, r3
   20338:	e5d330b2 	ldrb	r3, [r3, #178]	; 0xb2
   2033c:	e54b3009 	strb	r3, [fp, #-9]
   20340:	e55b3009 	ldrb	r3, [fp, #-9]
   20344:	e2033076 	and	r3, r3, #118	; 0x76
   20348:	e54b3009 	strb	r3, [fp, #-9]
   2034c:	e51b3010 	ldr	r3, [fp, #-16]
   20350:	e5932a60 	ldr	r2, [r3, #2656]	; 0xa60
   20354:	e51b3010 	ldr	r3, [fp, #-16]
   20358:	e5933a60 	ldr	r3, [r3, #2656]	; 0xa60
   2035c:	e5933000 	ldr	r3, [r3]
   20360:	e2833010 	add	r3, r3, #16
   20364:	e5933000 	ldr	r3, [r3]
   20368:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   2036c:	e1a00002 	mov	r0, r2
   20370:	e12fff33 	blx	r3
   20374:	e1a03000 	mov	r3, r0
   20378:	e3c33076 	bic	r3, r3, #118	; 0x76
   2037c:	e6ef2073 	uxtb	r2, r3
   20380:	e55b3009 	ldrb	r3, [fp, #-9]
   20384:	e1823003 	orr	r3, r2, r3
   20388:	e54b3009 	strb	r3, [fp, #-9]
   2038c:	e55b3009 	ldrb	r3, [fp, #-9]
   20390:	e2033001 	and	r3, r3, #1
   20394:	e3530000 	cmp	r3, #0
   20398:	1a000005 	bne	203b4 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int&, unsigned int&)+0xcc>
   2039c:	e51b2010 	ldr	r2, [fp, #-16]
   203a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   203a4:	e1a03283 	lsl	r3, r3, #5
   203a8:	e0823003 	add	r3, r2, r3
   203ac:	e3a02000 	mov	r2, #0
   203b0:	e58320ac 	str	r2, [r3, #172]	; 0xac
   203b4:	e51b2010 	ldr	r2, [fp, #-16]
   203b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   203bc:	e1a03283 	lsl	r3, r3, #5
   203c0:	e0823003 	add	r3, r2, r3
   203c4:	e55b2009 	ldrb	r2, [fp, #-9]
   203c8:	e5c320b2 	strb	r2, [r3, #178]	; 0xb2
   203cc:	e51b2010 	ldr	r2, [fp, #-16]
   203d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   203d4:	e1a03283 	lsl	r3, r3, #5
   203d8:	e0823003 	add	r3, r2, r3
   203dc:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
   203e0:	e3530000 	cmp	r3, #0
   203e4:	0a000035 	beq	204c0 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int&, unsigned int&)+0x1d8>
   203e8:	e51b2010 	ldr	r2, [fp, #-16]
   203ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   203f0:	e1a03283 	lsl	r3, r3, #5
   203f4:	e0823003 	add	r3, r2, r3
   203f8:	e5d33097 	ldrb	r3, [r3, #151]	; 0x97
   203fc:	e54b300a 	strb	r3, [fp, #-10]
   20400:	e55b300a 	ldrb	r3, [fp, #-10]
   20404:	e51b2010 	ldr	r2, [fp, #-16]
   20408:	e0823003 	add	r3, r2, r3
   2040c:	e5d336da 	ldrb	r3, [r3, #1754]	; 0x6da
   20410:	e55b200a 	ldrb	r2, [fp, #-10]
   20414:	e1e03c83 	mvn	r3, r3, lsl #25
   20418:	e1e03ca3 	mvn	r3, r3, lsr #25
   2041c:	e6ef1073 	uxtb	r1, r3
   20420:	e51b3010 	ldr	r3, [fp, #-16]
   20424:	e0833002 	add	r3, r3, r2
   20428:	e1a02001 	mov	r2, r1
   2042c:	e5c326da 	strb	r2, [r3, #1754]	; 0x6da
   20430:	e55b200a 	ldrb	r2, [fp, #-10]
   20434:	e51b1010 	ldr	r1, [fp, #-16]
   20438:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2043c:	e1a03283 	lsl	r3, r3, #5
   20440:	e0813003 	add	r3, r1, r3
   20444:	e5d310b2 	ldrb	r1, [r3, #178]	; 0xb2
   20448:	e51b3010 	ldr	r3, [fp, #-16]
   2044c:	e0833002 	add	r3, r3, r2
   20450:	e1a02001 	mov	r2, r1
   20454:	e5c326e2 	strb	r2, [r3, #1762]	; 0x6e2
   20458:	e55b200a 	ldrb	r2, [fp, #-10]
   2045c:	e51b1010 	ldr	r1, [fp, #-16]
   20460:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20464:	e1a03283 	lsl	r3, r3, #5
   20468:	e0813003 	add	r3, r1, r3
   2046c:	e5d310b3 	ldrb	r1, [r3, #179]	; 0xb3
   20470:	e51b3010 	ldr	r3, [fp, #-16]
   20474:	e0833002 	add	r3, r3, r2
   20478:	e1a02001 	mov	r2, r1
   2047c:	e5c32701 	strb	r2, [r3, #1793]	; 0x701
   20480:	e55b200a 	ldrb	r2, [fp, #-10]
   20484:	e51b1010 	ldr	r1, [fp, #-16]
   20488:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2048c:	e1a03283 	lsl	r3, r3, #5
   20490:	e0813003 	add	r3, r1, r3
   20494:	e5d31096 	ldrb	r1, [r3, #150]	; 0x96
   20498:	e51b3010 	ldr	r3, [fp, #-16]
   2049c:	e0833002 	add	r3, r3, r2
   204a0:	e1a02001 	mov	r2, r1
   204a4:	e5c326ea 	strb	r2, [r3, #1770]	; 0x6ea
   204a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   204ac:	e5933000 	ldr	r3, [r3]
   204b0:	e2832001 	add	r2, r3, #1
   204b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   204b8:	e5832000 	str	r2, [r3]
   204bc:	e1a00000 	nop			; (mov r0, r0)
   204c0:	e24bd004 	sub	sp, fp, #4
   204c4:	e8bd8800 	pop	{fp, pc}

000204c8 <ArtNetNode::SendPollRelply(bool)>:
   204c8:	e92d4800 	push	{fp, lr}
   204cc:	e28db004 	add	fp, sp, #4
   204d0:	e24dd040 	sub	sp, sp, #64	; 0x40
   204d4:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   204d8:	e1a03001 	mov	r3, r1
   204dc:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
   204e0:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
   204e4:	e2233001 	eor	r3, r3, #1
   204e8:	e6ef3073 	uxtb	r3, r3
   204ec:	e3530000 	cmp	r3, #0
   204f0:	0a000008 	beq	20518 <ArtNetNode::SendPollRelply(bool)+0x50>
   204f4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   204f8:	e5d33085 	ldrb	r3, [r3, #133]	; 0x85
   204fc:	e3530002 	cmp	r3, #2
   20500:	1a000004 	bne	20518 <ArtNetNode::SendPollRelply(bool)+0x50>
   20504:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   20508:	e5933074 	ldr	r3, [r3, #116]	; 0x74
   2050c:	e2832001 	add	r2, r3, #1
   20510:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   20514:	e5832074 	str	r2, [r3, #116]	; 0x74
   20518:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2051c:	e5d32067 	ldrb	r2, [r3, #103]	; 0x67
   20520:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   20524:	e5c32643 	strb	r2, [r3, #1603]	; 0x643
   20528:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2052c:	e5d32068 	ldrb	r2, [r3, #104]	; 0x68
   20530:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   20534:	e5c32700 	strb	r2, [r3, #1792]	; 0x700
   20538:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2053c:	e5d32069 	ldrb	r2, [r3, #105]	; 0x69
   20540:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   20544:	e5c32705 	strb	r2, [r3, #1797]	; 0x705
   20548:	e3a03000 	mov	r3, #0
   2054c:	e50b3008 	str	r3, [fp, #-8]
   20550:	e51b3008 	ldr	r3, [fp, #-8]
   20554:	e3530000 	cmp	r3, #0
   20558:	1a00009d 	bne	207d4 <ArtNetNode::SendPollRelply(bool)+0x30c>
   2055c:	e3a03000 	mov	r3, #0
   20560:	e50b300c 	str	r3, [fp, #-12]
   20564:	e51b300c 	ldr	r3, [fp, #-12]
   20568:	e3530003 	cmp	r3, #3
   2056c:	8a000018 	bhi	205d4 <ArtNetNode::SendPollRelply(bool)+0x10c>
   20570:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   20574:	e51b300c 	ldr	r3, [fp, #-12]
   20578:	e0823003 	add	r3, r2, r3
   2057c:	e2833e6d 	add	r3, r3, #1744	; 0x6d0
   20580:	e283300a 	add	r3, r3, #10
   20584:	e3a02000 	mov	r2, #0
   20588:	e5c32000 	strb	r2, [r3]
   2058c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   20590:	e51b300c 	ldr	r3, [fp, #-12]
   20594:	e0823003 	add	r3, r2, r3
   20598:	e2833e6e 	add	r3, r3, #1760	; 0x6e0
   2059c:	e2833006 	add	r3, r3, #6
   205a0:	e3a02000 	mov	r2, #0
   205a4:	e5c32000 	strb	r2, [r3]
   205a8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   205ac:	e51b300c 	ldr	r3, [fp, #-12]
   205b0:	e0823003 	add	r3, r2, r3
   205b4:	e2833e6e 	add	r3, r3, #1760	; 0x6e0
   205b8:	e283300a 	add	r3, r3, #10
   205bc:	e3a02000 	mov	r2, #0
   205c0:	e5c32000 	strb	r2, [r3]
   205c4:	e51b300c 	ldr	r3, [fp, #-12]
   205c8:	e2833001 	add	r3, r3, #1
   205cc:	e50b300c 	str	r3, [fp, #-12]
   205d0:	eaffffe3 	b	20564 <ArtNetNode::SendPollRelply(bool)+0x9c>
   205d4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   205d8:	e51b3008 	ldr	r3, [fp, #-8]
   205dc:	e0823003 	add	r3, r2, r3
   205e0:	e2833012 	add	r3, r3, #18
   205e4:	e5d32000 	ldrb	r2, [r3]
   205e8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   205ec:	e5c3263e 	strb	r2, [r3, #1598]	; 0x63e
   205f0:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   205f4:	e51b3008 	ldr	r3, [fp, #-8]
   205f8:	e0823003 	add	r3, r2, r3
   205fc:	e2833013 	add	r3, r3, #19
   20600:	e5d32000 	ldrb	r2, [r3]
   20604:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   20608:	e5c3263f 	strb	r2, [r3, #1599]	; 0x63f
   2060c:	e51b3008 	ldr	r3, [fp, #-8]
   20610:	e6ef3073 	uxtb	r3, r3
   20614:	e2833001 	add	r3, r3, #1
   20618:	e6ef2073 	uxtb	r2, r3
   2061c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   20620:	e5c326ff 	strb	r2, [r3, #1791]	; 0x6ff
   20624:	e51b3008 	ldr	r3, [fp, #-8]
   20628:	e1a03103 	lsl	r3, r3, #2
   2062c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   20630:	e3a03000 	mov	r3, #0
   20634:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   20638:	e3a03000 	mov	r3, #0
   2063c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   20640:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20644:	e50b3010 	str	r3, [fp, #-16]
   20648:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2064c:	e2833004 	add	r3, r3, #4
   20650:	e51b2010 	ldr	r2, [fp, #-16]
   20654:	e1520003 	cmp	r2, r3
   20658:	2a000025 	bcs	206f4 <ArtNetNode::SendPollRelply(bool)+0x22c>
   2065c:	e51b3010 	ldr	r3, [fp, #-16]
   20660:	e3530003 	cmp	r3, #3
   20664:	9a000019 	bls	206d0 <ArtNetNode::SendPollRelply(bool)+0x208>
   20668:	e51b2010 	ldr	r2, [fp, #-16]
   2066c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20670:	e0423003 	sub	r3, r2, r3
   20674:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   20678:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   2067c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20680:	e0823003 	add	r3, r2, r3
   20684:	e2833e6e 	add	r3, r3, #1760	; 0x6e0
   20688:	e2833002 	add	r3, r3, #2
   2068c:	e3a02000 	mov	r2, #0
   20690:	e5c32000 	strb	r2, [r3]
   20694:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   20698:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2069c:	e0823003 	add	r3, r2, r3
   206a0:	e2833c07 	add	r3, r3, #1792	; 0x700
   206a4:	e2833001 	add	r3, r3, #1
   206a8:	e3a02000 	mov	r2, #0
   206ac:	e5c32000 	strb	r2, [r3]
   206b0:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   206b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   206b8:	e0823003 	add	r3, r2, r3
   206bc:	e2833e6d 	add	r3, r3, #1744	; 0x6d0
   206c0:	e283300e 	add	r3, r3, #14
   206c4:	e3a02000 	mov	r2, #0
   206c8:	e5c32000 	strb	r2, [r3]
   206cc:	ea000004 	b	206e4 <ArtNetNode::SendPollRelply(bool)+0x21c>
   206d0:	e24b3020 	sub	r3, fp, #32
   206d4:	e24b2024 	sub	r2, fp, #36	; 0x24
   206d8:	e51b1010 	ldr	r1, [fp, #-16]
   206dc:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   206e0:	ebffff00 	bl	202e8 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int&, unsigned int&)>
   206e4:	e51b3010 	ldr	r3, [fp, #-16]
   206e8:	e2833001 	add	r3, r3, #1
   206ec:	e50b3010 	str	r3, [fp, #-16]
   206f0:	eaffffd4 	b	20648 <ArtNetNode::SendPollRelply(bool)+0x180>
   206f4:	e24b2020 	sub	r2, fp, #32
   206f8:	e24b3024 	sub	r3, fp, #36	; 0x24
   206fc:	e1a01002 	mov	r1, r2
   20700:	e1a00003 	mov	r0, r3
   20704:	eb0000a6 	bl	209a4 <unsigned int const& std::max<unsigned int>(unsigned int const&, unsigned int const&)>
   20708:	e1a03000 	mov	r3, r0
   2070c:	e5933000 	ldr	r3, [r3]
   20710:	e6ef2073 	uxtb	r2, r3
   20714:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   20718:	e5c326d9 	strb	r2, [r3, #1753]	; 0x6d9
   2071c:	ebffc3b7 	bl	11600 <Hardware::Get()>
   20720:	e1a02000 	mov	r2, r0
   20724:	e24b3025 	sub	r3, fp, #37	; 0x25
   20728:	e1a01003 	mov	r1, r3
   2072c:	e1a00002 	mov	r0, r2
   20730:	eb007cb8 	bl	3fa18 <Hardware::GetSysName(unsigned char&)>
   20734:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
   20738:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2073c:	e2830e69 	add	r0, r3, #1680	; 0x690
   20740:	e2800008 	add	r0, r0, #8
   20744:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   20748:	e5d33084 	ldrb	r3, [r3, #132]	; 0x84
   2074c:	e1a0c003 	mov	ip, r3
   20750:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   20754:	e5933074 	ldr	r3, [r3, #116]	; 0x74
   20758:	e1a02003 	mov	r2, r3
   2075c:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
   20760:	e1a01003 	mov	r1, r3
   20764:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   20768:	e58d3008 	str	r3, [sp, #8]
   2076c:	e58d1004 	str	r1, [sp, #4]
   20770:	e58d2000 	str	r2, [sp]
   20774:	e1a0300c 	mov	r3, ip
   20778:	e59f206c 	ldr	r2, [pc, #108]	; 207ec <ArtNetNode::SendPollRelply(bool)+0x324>
   2077c:	e3a01040 	mov	r1, #64	; 0x40
   20780:	ebffc2bc 	bl	11278 <snprintf@plt>
   20784:	ebffdfd7 	bl	186e8 <Network::Get()>
   20788:	e1a0c000 	mov	ip, r0
   2078c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   20790:	e5930000 	ldr	r0, [r3]
   20794:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   20798:	e2832e62 	add	r2, r3, #1568	; 0x620
   2079c:	e282200c 	add	r2, r2, #12
   207a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   207a4:	e5933004 	ldr	r3, [r3, #4]
   207a8:	e59f1040 	ldr	r1, [pc, #64]	; 207f0 <ArtNetNode::SendPollRelply(bool)+0x328>
   207ac:	e58d1004 	str	r1, [sp, #4]
   207b0:	e58d3000 	str	r3, [sp]
   207b4:	e3a030ef 	mov	r3, #239	; 0xef
   207b8:	e1a01000 	mov	r1, r0
   207bc:	e1a0000c 	mov	r0, ip
   207c0:	eb005807 	bl	367e4 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>
   207c4:	e51b3008 	ldr	r3, [fp, #-8]
   207c8:	e2833001 	add	r3, r3, #1
   207cc:	e50b3008 	str	r3, [fp, #-8]
   207d0:	eaffff5e 	b	20550 <ArtNetNode::SendPollRelply(bool)+0x88>
   207d4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   207d8:	e3a02000 	mov	r2, #0
   207dc:	e5c3208b 	strb	r2, [r3, #139]	; 0x8b
   207e0:	e1a00000 	nop			; (mov r0, r0)
   207e4:	e24bd004 	sub	sp, fp, #4
   207e8:	e8bd8800 	pop	{fp, pc}
   207ec:	00046860 	.word	0x00046860
   207f0:	00001936 	.word	0x00001936

000207f4 <ArtNetNode::HandlePoll()>:
   207f4:	e92d4800 	push	{fp, lr}
   207f8:	e28db004 	add	fp, sp, #4
   207fc:	e24dd010 	sub	sp, sp, #16
   20800:	e50b0010 	str	r0, [fp, #-16]
   20804:	e51b3010 	ldr	r3, [fp, #-16]
   20808:	e2833f55 	add	r3, r3, #340	; 0x154
   2080c:	e50b3008 	str	r3, [fp, #-8]
   20810:	e51b3008 	ldr	r3, [fp, #-8]
   20814:	e5d3300c 	ldrb	r3, [r3, #12]
   20818:	e2033002 	and	r3, r3, #2
   2081c:	e3530000 	cmp	r3, #0
   20820:	0a000003 	beq	20834 <ArtNetNode::HandlePoll()+0x40>
   20824:	e51b3010 	ldr	r3, [fp, #-16]
   20828:	e3a02001 	mov	r2, #1
   2082c:	e5c32086 	strb	r2, [r3, #134]	; 0x86
   20830:	ea000002 	b	20840 <ArtNetNode::HandlePoll()+0x4c>
   20834:	e51b3010 	ldr	r3, [fp, #-16]
   20838:	e3a02000 	mov	r2, #0
   2083c:	e5c32086 	strb	r2, [r3, #134]	; 0x86
   20840:	e51b3008 	ldr	r3, [fp, #-8]
   20844:	e5d3300c 	ldrb	r3, [r3, #12]
   20848:	e2033004 	and	r3, r3, #4
   2084c:	e3530000 	cmp	r3, #0
   20850:	0a000047 	beq	20974 <ArtNetNode::HandlePoll()+0x180>
   20854:	e51b3010 	ldr	r3, [fp, #-16]
   20858:	e3a02001 	mov	r2, #1
   2085c:	e5c32087 	strb	r2, [r3, #135]	; 0x87
   20860:	e51b3010 	ldr	r3, [fp, #-16]
   20864:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
   20868:	e3530000 	cmp	r3, #0
   2086c:	1a000004 	bne	20884 <ArtNetNode::HandlePoll()+0x90>
   20870:	e51b3010 	ldr	r3, [fp, #-16]
   20874:	e5932620 	ldr	r2, [r3, #1568]	; 0x620
   20878:	e51b3010 	ldr	r3, [fp, #-16]
   2087c:	e583207c 	str	r2, [r3, #124]	; 0x7c
   20880:	ea000012 	b	208d0 <ArtNetNode::HandlePoll()+0xdc>
   20884:	e51b3010 	ldr	r3, [fp, #-16]
   20888:	e5d33088 	ldrb	r3, [r3, #136]	; 0x88
   2088c:	e2233001 	eor	r3, r3, #1
   20890:	e6ef3073 	uxtb	r3, r3
   20894:	e3530000 	cmp	r3, #0
   20898:	0a00000c 	beq	208d0 <ArtNetNode::HandlePoll()+0xdc>
   2089c:	e51b3010 	ldr	r3, [fp, #-16]
   208a0:	e593207c 	ldr	r2, [r3, #124]	; 0x7c
   208a4:	e51b3010 	ldr	r3, [fp, #-16]
   208a8:	e5933620 	ldr	r3, [r3, #1568]	; 0x620
   208ac:	e1520003 	cmp	r2, r3
   208b0:	0a000006 	beq	208d0 <ArtNetNode::HandlePoll()+0xdc>
   208b4:	e51b3010 	ldr	r3, [fp, #-16]
   208b8:	e5932004 	ldr	r2, [r3, #4]
   208bc:	e51b3010 	ldr	r3, [fp, #-16]
   208c0:	e5832078 	str	r2, [r3, #120]	; 0x78
   208c4:	e51b3010 	ldr	r3, [fp, #-16]
   208c8:	e3a02001 	mov	r2, #1
   208cc:	e5c32088 	strb	r2, [r3, #136]	; 0x88
   208d0:	e51b3010 	ldr	r3, [fp, #-16]
   208d4:	e5d33088 	ldrb	r3, [r3, #136]	; 0x88
   208d8:	e3530000 	cmp	r3, #0
   208dc:	0a00000b 	beq	20910 <ArtNetNode::HandlePoll()+0x11c>
   208e0:	e51b3010 	ldr	r3, [fp, #-16]
   208e4:	e2832090 	add	r2, r3, #144	; 0x90
   208e8:	e51b3008 	ldr	r3, [fp, #-8]
   208ec:	e283300d 	add	r3, r3, #13
   208f0:	e1a01003 	mov	r1, r3
   208f4:	e1a00002 	mov	r0, r2
   208f8:	ebffcf5c 	bl	14670 <unsigned char const& std::min<unsigned char>(unsigned char const&, unsigned char const&)>
   208fc:	e1a03000 	mov	r3, r0
   20900:	e5d32000 	ldrb	r2, [r3]
   20904:	e51b3010 	ldr	r3, [fp, #-16]
   20908:	e5c32090 	strb	r2, [r3, #144]	; 0x90
   2090c:	ea000003 	b	20920 <ArtNetNode::HandlePoll()+0x12c>
   20910:	e51b3008 	ldr	r3, [fp, #-8]
   20914:	e5d3200d 	ldrb	r2, [r3, #13]
   20918:	e51b3010 	ldr	r3, [fp, #-16]
   2091c:	e5c32090 	strb	r2, [r3, #144]	; 0x90
   20920:	e51b3010 	ldr	r3, [fp, #-16]
   20924:	e5d33088 	ldrb	r3, [r3, #136]	; 0x88
   20928:	e2233001 	eor	r3, r3, #1
   2092c:	e6ef3073 	uxtb	r3, r3
   20930:	e3530000 	cmp	r3, #0
   20934:	0a000009 	beq	20960 <ArtNetNode::HandlePoll()+0x16c>
   20938:	e51b3008 	ldr	r3, [fp, #-8]
   2093c:	e5d3300c 	ldrb	r3, [r3, #12]
   20940:	e2033008 	and	r3, r3, #8
   20944:	e3530000 	cmp	r3, #0
   20948:	0a000004 	beq	20960 <ArtNetNode::HandlePoll()+0x16c>
   2094c:	e51b3010 	ldr	r3, [fp, #-16]
   20950:	e5932620 	ldr	r2, [r3, #1568]	; 0x620
   20954:	e51b3010 	ldr	r3, [fp, #-16]
   20958:	e5832078 	str	r2, [r3, #120]	; 0x78
   2095c:	ea00000a 	b	2098c <ArtNetNode::HandlePoll()+0x198>
   20960:	e51b3010 	ldr	r3, [fp, #-16]
   20964:	e5932004 	ldr	r2, [r3, #4]
   20968:	e51b3010 	ldr	r3, [fp, #-16]
   2096c:	e5832078 	str	r2, [r3, #120]	; 0x78
   20970:	ea000005 	b	2098c <ArtNetNode::HandlePoll()+0x198>
   20974:	e51b3010 	ldr	r3, [fp, #-16]
   20978:	e3a02000 	mov	r2, #0
   2097c:	e5c32087 	strb	r2, [r3, #135]	; 0x87
   20980:	e51b3010 	ldr	r3, [fp, #-16]
   20984:	e3a02000 	mov	r2, #0
   20988:	e5832078 	str	r2, [r3, #120]	; 0x78
   2098c:	e3a01001 	mov	r1, #1
   20990:	e51b0010 	ldr	r0, [fp, #-16]
   20994:	ebfffecb 	bl	204c8 <ArtNetNode::SendPollRelply(bool)>
   20998:	e1a00000 	nop			; (mov r0, r0)
   2099c:	e24bd004 	sub	sp, fp, #4
   209a0:	e8bd8800 	pop	{fp, pc}

000209a4 <unsigned int const& std::max<unsigned int>(unsigned int const&, unsigned int const&)>:
   209a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   209a8:	e28db000 	add	fp, sp, #0
   209ac:	e24dd00c 	sub	sp, sp, #12
   209b0:	e50b0008 	str	r0, [fp, #-8]
   209b4:	e50b100c 	str	r1, [fp, #-12]
   209b8:	e51b3008 	ldr	r3, [fp, #-8]
   209bc:	e5932000 	ldr	r2, [r3]
   209c0:	e51b300c 	ldr	r3, [fp, #-12]
   209c4:	e5933000 	ldr	r3, [r3]
   209c8:	e1520003 	cmp	r2, r3
   209cc:	2a000001 	bcs	209d8 <unsigned int const& std::max<unsigned int>(unsigned int const&, unsigned int const&)+0x34>
   209d0:	e51b300c 	ldr	r3, [fp, #-12]
   209d4:	ea000000 	b	209dc <unsigned int const& std::max<unsigned int>(unsigned int const&, unsigned int const&)+0x38>
   209d8:	e51b3008 	ldr	r3, [fp, #-8]
   209dc:	e1a00003 	mov	r0, r3
   209e0:	e28bd000 	add	sp, fp, #0
   209e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   209e8:	e12fff1e 	bx	lr

000209ec <artnet::get_protocol_mode(artnet::PortProtocol, bool)>:
   209ec:	e3510000 	cmp	r1, #0
   209f0:	159f3018 	ldrne	r3, [pc, #24]	; 20a10 <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x24>
   209f4:	059f2018 	ldreq	r2, [pc, #24]	; 20a14 <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x28>
   209f8:	159f2018 	ldrne	r2, [pc, #24]	; 20a18 <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x2c>
   209fc:	059f3018 	ldreq	r3, [pc, #24]	; 20a1c <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x30>
   20a00:	e3500000 	cmp	r0, #0
   20a04:	01a00002 	moveq	r0, r2
   20a08:	11a00003 	movne	r0, r3
   20a0c:	e12fff1e 	bx	lr
   20a10:	0004688f 	.word	0x0004688f
   20a14:	00046888 	.word	0x00046888
   20a18:	00046894 	.word	0x00046894
   20a1c:	0004689c 	.word	0x0004689c

00020a20 <lightset::get_merge_mode(lightset::MergeMode, bool)>:
   20a20:	e3510000 	cmp	r1, #0
   20a24:	159f3018 	ldrne	r3, [pc, #24]	; 20a44 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x24>
   20a28:	059f2018 	ldreq	r2, [pc, #24]	; 20a48 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x28>
   20a2c:	159f2018 	ldrne	r2, [pc, #24]	; 20a4c <lightset::get_merge_mode(lightset::MergeMode, bool)+0x2c>
   20a30:	059f3018 	ldreq	r3, [pc, #24]	; 20a50 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x30>
   20a34:	e3500000 	cmp	r0, #0
   20a38:	01a00002 	moveq	r0, r2
   20a3c:	11a00003 	movne	r0, r3
   20a40:	e12fff1e 	bx	lr
   20a44:	000468dc 	.word	0x000468dc
   20a48:	000468d8 	.word	0x000468d8
   20a4c:	000468e0 	.word	0x000468e0
   20a50:	000468e4 	.word	0x000468e4

00020a54 <ArtNetNode::GetRdm(unsigned int) const>:
   20a54:	e0801281 	add	r1, r0, r1, lsl #5
   20a58:	e5d100b3 	ldrb	r0, [r1, #179]	; 0xb3
   20a5c:	e2200080 	eor	r0, r0, #128	; 0x80
   20a60:	e1a003a0 	lsr	r0, r0, #7
   20a64:	e12fff1e 	bx	lr

00020a68 <ArtNetNode::Print()>:
   20a68:	e92d47ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   20a6c:	e1a05000 	mov	r5, r0
   20a70:	e3a02001 	mov	r2, #1
   20a74:	e3a01004 	mov	r1, #4
   20a78:	e59f00ec 	ldr	r0, [pc, #236]	; 20b6c <ArtNetNode::Print()+0x104>
   20a7c:	ebffc1dc 	bl	111f4 <printf@plt>
   20a80:	e59f30e8 	ldr	r3, [pc, #232]	; 20b70 <ArtNetNode::Print()+0x108>
   20a84:	e59f00e8 	ldr	r0, [pc, #232]	; 20b74 <ArtNetNode::Print()+0x10c>
   20a88:	e5d31000 	ldrb	r1, [r3]
   20a8c:	e5d32001 	ldrb	r2, [r3, #1]
   20a90:	ebffc1d7 	bl	111f4 <printf@plt>
   20a94:	e2851014 	add	r1, r5, #20
   20a98:	e59f00d8 	ldr	r0, [pc, #216]	; 20b78 <ArtNetNode::Print()+0x110>
   20a9c:	ebffc1d4 	bl	111f4 <printf@plt>
   20aa0:	e2851026 	add	r1, r5, #38	; 0x26
   20aa4:	e59f00d0 	ldr	r0, [pc, #208]	; 20b7c <ArtNetNode::Print()+0x114>
   20aa8:	ebffc1d1 	bl	111f4 <printf@plt>
   20aac:	e5d5308e 	ldrb	r3, [r5, #142]	; 0x8e
   20ab0:	e3530000 	cmp	r3, #0
   20ab4:	0a00002a 	beq	20b64 <ArtNetNode::Print()+0xfc>
   20ab8:	e59f00c0 	ldr	r0, [pc, #192]	; 20b80 <ArtNetNode::Print()+0x118>
   20abc:	ebffc1d8 	bl	11224 <puts@plt>
   20ac0:	e59f60bc 	ldr	r6, [pc, #188]	; 20b84 <ArtNetNode::Print()+0x11c>
   20ac4:	e59f70bc 	ldr	r7, [pc, #188]	; 20b88 <ArtNetNode::Print()+0x120>
   20ac8:	e59f80bc 	ldr	r8, [pc, #188]	; 20b8c <ArtNetNode::Print()+0x124>
   20acc:	e3a04000 	mov	r4, #0
   20ad0:	e3a03001 	mov	r3, #1
   20ad4:	e28d200e 	add	r2, sp, #14
   20ad8:	e1a01004 	mov	r1, r4
   20adc:	e1a00005 	mov	r0, r5
   20ae0:	ebfff8ed 	bl	1ee9c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
   20ae4:	e3500000 	cmp	r0, #0
   20ae8:	0a00001a 	beq	20b58 <ArtNetNode::Print()+0xf0>
   20aec:	e28530b2 	add	r3, r5, #178	; 0xb2
   20af0:	e3a01001 	mov	r1, #1
   20af4:	e7d30284 	ldrb	r0, [r3, r4, lsl #5]
   20af8:	e1dd90be 	ldrh	r9, [sp, #14]
   20afc:	e1a000a0 	lsr	r0, r0, #1
   20b00:	e0000001 	and	r0, r0, r1
   20b04:	ebffffc5 	bl	20a20 <lightset::get_merge_mode(lightset::MergeMode, bool)>
   20b08:	e3a01000 	mov	r1, #0
   20b0c:	e1a0a000 	mov	sl, r0
   20b10:	e1a00005 	mov	r0, r5
   20b14:	ebffffce 	bl	20a54 <ArtNetNode::GetRdm(unsigned int) const>
   20b18:	e1a0300a 	mov	r3, sl
   20b1c:	e1a02009 	mov	r2, r9
   20b20:	e1a01004 	mov	r1, r4
   20b24:	e3500000 	cmp	r0, #0
   20b28:	11a00006 	movne	r0, r6
   20b2c:	01a00007 	moveq	r0, r7
   20b30:	e58d0000 	str	r0, [sp]
   20b34:	e1a00008 	mov	r0, r8
   20b38:	ebffc1ad 	bl	111f4 <printf@plt>
   20b3c:	e28530ac 	add	r3, r5, #172	; 0xac
   20b40:	e3a01001 	mov	r1, #1
   20b44:	e7930284 	ldr	r0, [r3, r4, lsl #5]
   20b48:	ebffffa7 	bl	209ec <artnet::get_protocol_mode(artnet::PortProtocol, bool)>
   20b4c:	e1a01000 	mov	r1, r0
   20b50:	e59f0038 	ldr	r0, [pc, #56]	; 20b90 <ArtNetNode::Print()+0x128>
   20b54:	ebffc1a6 	bl	111f4 <printf@plt>
   20b58:	e2844001 	add	r4, r4, #1
   20b5c:	e3540004 	cmp	r4, #4
   20b60:	1affffda 	bne	20ad0 <ArtNetNode::Print()+0x68>
   20b64:	e28dd010 	add	sp, sp, #16
   20b68:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20b6c:	0004690c 	.word	0x0004690c
   20b70:	00046db8 	.word	0x00046db8
   20b74:	0004691d 	.word	0x0004691d
   20b78:	00046932 	.word	0x00046932
   20b7c:	00046944 	.word	0x00046944
   20b80:	00046cef 	.word	0x00046cef
   20b84:	00046908 	.word	0x00046908
   20b88:	00046164 	.word	0x00046164
   20b8c:	00046956 	.word	0x00046956
   20b90:	0004707d 	.word	0x0004707d

00020b94 <ArtNetNode::SetRmd(unsigned int, bool)>:
   20b94:	e92d4800 	push	{fp, lr}
   20b98:	e28db004 	add	fp, sp, #4
   20b9c:	e24dd018 	sub	sp, sp, #24
   20ba0:	e50b0010 	str	r0, [fp, #-16]
   20ba4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   20ba8:	e1a03002 	mov	r3, r2
   20bac:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   20bb0:	e51b2010 	ldr	r2, [fp, #-16]
   20bb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20bb8:	e1a03283 	lsl	r3, r3, #5
   20bbc:	e0823003 	add	r3, r2, r3
   20bc0:	e5d330b3 	ldrb	r3, [r3, #179]	; 0xb3
   20bc4:	e6af3073 	sxtb	r3, r3
   20bc8:	e1e03003 	mvn	r3, r3
   20bcc:	e6ef3073 	uxtb	r3, r3
   20bd0:	e1a033a3 	lsr	r3, r3, #7
   20bd4:	e54b3005 	strb	r3, [fp, #-5]
   20bd8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   20bdc:	e2233001 	eor	r3, r3, #1
   20be0:	e6ef3073 	uxtb	r3, r3
   20be4:	e3530000 	cmp	r3, #0
   20be8:	0a00000e 	beq	20c28 <ArtNetNode::SetRmd(unsigned int, bool)+0x94>
   20bec:	e51b2010 	ldr	r2, [fp, #-16]
   20bf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20bf4:	e1a03283 	lsl	r3, r3, #5
   20bf8:	e0823003 	add	r3, r2, r3
   20bfc:	e5d330b3 	ldrb	r3, [r3, #179]	; 0xb3
   20c00:	e1e03c83 	mvn	r3, r3, lsl #25
   20c04:	e1e03ca3 	mvn	r3, r3, lsr #25
   20c08:	e6ef1073 	uxtb	r1, r3
   20c0c:	e51b2010 	ldr	r2, [fp, #-16]
   20c10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20c14:	e1a03283 	lsl	r3, r3, #5
   20c18:	e0823003 	add	r3, r2, r3
   20c1c:	e1a02001 	mov	r2, r1
   20c20:	e5c320b3 	strb	r2, [r3, #179]	; 0xb3
   20c24:	ea00000c 	b	20c5c <ArtNetNode::SetRmd(unsigned int, bool)+0xc8>
   20c28:	e51b2010 	ldr	r2, [fp, #-16]
   20c2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20c30:	e1a03283 	lsl	r3, r3, #5
   20c34:	e0823003 	add	r3, r2, r3
   20c38:	e5d330b3 	ldrb	r3, [r3, #179]	; 0xb3
   20c3c:	e203307f 	and	r3, r3, #127	; 0x7f
   20c40:	e6ef1073 	uxtb	r1, r3
   20c44:	e51b2010 	ldr	r2, [fp, #-16]
   20c48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20c4c:	e1a03283 	lsl	r3, r3, #5
   20c50:	e0823003 	add	r3, r2, r3
   20c54:	e1a02001 	mov	r2, r1
   20c58:	e5c320b3 	strb	r2, [r3, #179]	; 0xb3
   20c5c:	e55b2005 	ldrb	r2, [fp, #-5]
   20c60:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   20c64:	e1520003 	cmp	r2, r3
   20c68:	0a000015 	beq	20cc4 <ArtNetNode::SetRmd(unsigned int, bool)+0x130>
   20c6c:	e51b3010 	ldr	r3, [fp, #-16]
   20c70:	e5d33085 	ldrb	r3, [r3, #133]	; 0x85
   20c74:	e3530002 	cmp	r3, #2
   20c78:	1a000011 	bne	20cc4 <ArtNetNode::SetRmd(unsigned int, bool)+0x130>
   20c7c:	e51b3010 	ldr	r3, [fp, #-16]
   20c80:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   20c84:	e3530000 	cmp	r3, #0
   20c88:	0a000009 	beq	20cb4 <ArtNetNode::SetRmd(unsigned int, bool)+0x120>
   20c8c:	e51b3010 	ldr	r3, [fp, #-16]
   20c90:	e5930a64 	ldr	r0, [r3, #2660]	; 0xa64
   20c94:	e51b3010 	ldr	r3, [fp, #-16]
   20c98:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   20c9c:	e5933000 	ldr	r3, [r3]
   20ca0:	e283302c 	add	r3, r3, #44	; 0x2c
   20ca4:	e5933000 	ldr	r3, [r3]
   20ca8:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
   20cac:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   20cb0:	e12fff33 	blx	r3
   20cb4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   20cb8:	e1a01003 	mov	r1, r3
   20cbc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   20cc0:	ebffca91 	bl	1370c <artnet::display_rdm_enabled(unsigned int, bool)>
   20cc4:	e1a00000 	nop			; (mov r0, r0)
   20cc8:	e24bd004 	sub	sp, fp, #4
   20ccc:	e8bd8800 	pop	{fp, pc}

00020cd0 <ArtNetNode::HandleTodControl()>:
   20cd0:	e92d4800 	push	{fp, lr}
   20cd4:	e28db004 	add	fp, sp, #4
   20cd8:	e24dd018 	sub	sp, sp, #24
   20cdc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   20ce0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20ce4:	e2833f55 	add	r3, r3, #340	; 0x154
   20ce8:	e50b300c 	str	r3, [fp, #-12]
   20cec:	e51b300c 	ldr	r3, [fp, #-12]
   20cf0:	e5d33015 	ldrb	r3, [r3, #21]
   20cf4:	e6ff3073 	uxth	r3, r3
   20cf8:	e1a03403 	lsl	r3, r3, #8
   20cfc:	e6ff3073 	uxth	r3, r3
   20d00:	e1a02003 	mov	r2, r3
   20d04:	e51b300c 	ldr	r3, [fp, #-12]
   20d08:	e5d33017 	ldrb	r3, [r3, #23]
   20d0c:	e1823003 	orr	r3, r2, r3
   20d10:	e50b3010 	str	r3, [fp, #-16]
   20d14:	e3a03000 	mov	r3, #0
   20d18:	e50b3008 	str	r3, [fp, #-8]
   20d1c:	e51b3008 	ldr	r3, [fp, #-8]
   20d20:	e3530003 	cmp	r3, #3
   20d24:	8a000053 	bhi	20e78 <ArtNetNode::HandleTodControl()+0x1a8>
   20d28:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   20d2c:	e51b3008 	ldr	r3, [fp, #-8]
   20d30:	e1a03283 	lsl	r3, r3, #5
   20d34:	e0823003 	add	r3, r2, r3
   20d38:	e2833094 	add	r3, r3, #148	; 0x94
   20d3c:	e1d330b0 	ldrh	r3, [r3]
   20d40:	e1a02003 	mov	r2, r3
   20d44:	e51b3010 	ldr	r3, [fp, #-16]
   20d48:	e1530002 	cmp	r3, r2
   20d4c:	1a000045 	bne	20e68 <ArtNetNode::HandleTodControl()+0x198>
   20d50:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   20d54:	e51b3008 	ldr	r3, [fp, #-8]
   20d58:	e1a03283 	lsl	r3, r3, #5
   20d5c:	e0823003 	add	r3, r2, r3
   20d60:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
   20d64:	e3530000 	cmp	r3, #0
   20d68:	0a00003e 	beq	20e68 <ArtNetNode::HandleTodControl()+0x198>
   20d6c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   20d70:	e51b3008 	ldr	r3, [fp, #-8]
   20d74:	e1a03283 	lsl	r3, r3, #5
   20d78:	e0823003 	add	r3, r2, r3
   20d7c:	e5d330b1 	ldrb	r3, [r3, #177]	; 0xb1
   20d80:	e3530000 	cmp	r3, #0
   20d84:	0a00000f 	beq	20dc8 <ArtNetNode::HandleTodControl()+0xf8>
   20d88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20d8c:	e5d33a4c 	ldrb	r3, [r3, #2636]	; 0xa4c
   20d90:	e2233001 	eor	r3, r3, #1
   20d94:	e6ef3073 	uxtb	r3, r3
   20d98:	e3530000 	cmp	r3, #0
   20d9c:	0a000009 	beq	20dc8 <ArtNetNode::HandleTodControl()+0xf8>
   20da0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20da4:	e5932a50 	ldr	r2, [r3, #2640]	; 0xa50
   20da8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20dac:	e5933a50 	ldr	r3, [r3, #2640]	; 0xa50
   20db0:	e5933000 	ldr	r3, [r3]
   20db4:	e283300c 	add	r3, r3, #12
   20db8:	e5933000 	ldr	r3, [r3]
   20dbc:	e51b1008 	ldr	r1, [fp, #-8]
   20dc0:	e1a00002 	mov	r0, r2
   20dc4:	e12fff33 	blx	r3
   20dc8:	e51b300c 	ldr	r3, [fp, #-12]
   20dcc:	e5d33016 	ldrb	r3, [r3, #22]
   20dd0:	e3530001 	cmp	r3, #1
   20dd4:	1a000009 	bne	20e00 <ArtNetNode::HandleTodControl()+0x130>
   20dd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20ddc:	e5932a58 	ldr	r2, [r3, #2648]	; 0xa58
   20de0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20de4:	e5933a58 	ldr	r3, [r3, #2648]	; 0xa58
   20de8:	e5933000 	ldr	r3, [r3]
   20dec:	e2833008 	add	r3, r3, #8
   20df0:	e5933000 	ldr	r3, [r3]
   20df4:	e51b1008 	ldr	r1, [fp, #-8]
   20df8:	e1a00002 	mov	r0, r2
   20dfc:	e12fff33 	blx	r3
   20e00:	e51b1008 	ldr	r1, [fp, #-8]
   20e04:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   20e08:	eb0000b6 	bl	210e8 <ArtNetNode::SendTod(unsigned int)>
   20e0c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   20e10:	e51b3008 	ldr	r3, [fp, #-8]
   20e14:	e1a03283 	lsl	r3, r3, #5
   20e18:	e0823003 	add	r3, r2, r3
   20e1c:	e5d330b1 	ldrb	r3, [r3, #177]	; 0xb1
   20e20:	e3530000 	cmp	r3, #0
   20e24:	0a00000f 	beq	20e68 <ArtNetNode::HandleTodControl()+0x198>
   20e28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20e2c:	e5d33a4c 	ldrb	r3, [r3, #2636]	; 0xa4c
   20e30:	e2233001 	eor	r3, r3, #1
   20e34:	e6ef3073 	uxtb	r3, r3
   20e38:	e3530000 	cmp	r3, #0
   20e3c:	0a000009 	beq	20e68 <ArtNetNode::HandleTodControl()+0x198>
   20e40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20e44:	e5932a50 	ldr	r2, [r3, #2640]	; 0xa50
   20e48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20e4c:	e5933a50 	ldr	r3, [r3, #2640]	; 0xa50
   20e50:	e5933000 	ldr	r3, [r3]
   20e54:	e2833008 	add	r3, r3, #8
   20e58:	e5933000 	ldr	r3, [r3]
   20e5c:	e51b1008 	ldr	r1, [fp, #-8]
   20e60:	e1a00002 	mov	r0, r2
   20e64:	e12fff33 	blx	r3
   20e68:	e51b3008 	ldr	r3, [fp, #-8]
   20e6c:	e2833001 	add	r3, r3, #1
   20e70:	e50b3008 	str	r3, [fp, #-8]
   20e74:	eaffffa8 	b	20d1c <ArtNetNode::HandleTodControl()+0x4c>
   20e78:	e1a00000 	nop			; (mov r0, r0)
   20e7c:	e24bd004 	sub	sp, fp, #4
   20e80:	e8bd8800 	pop	{fp, pc}

00020e84 <ArtNetNode::HandleTodRequest()>:
   20e84:	e92d4800 	push	{fp, lr}
   20e88:	e28db004 	add	fp, sp, #4
   20e8c:	e24dd020 	sub	sp, sp, #32
   20e90:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   20e94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   20e98:	e2833f55 	add	r3, r3, #340	; 0x154
   20e9c:	e50b3010 	str	r3, [fp, #-16]
   20ea0:	e51b3010 	ldr	r3, [fp, #-16]
   20ea4:	e5d33017 	ldrb	r3, [r3, #23]
   20ea8:	e203301f 	and	r3, r3, #31
   20eac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   20eb0:	e3a03000 	mov	r3, #0
   20eb4:	e50b3008 	str	r3, [fp, #-8]
   20eb8:	e51b2008 	ldr	r2, [fp, #-8]
   20ebc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20ec0:	e1520003 	cmp	r2, r3
   20ec4:	aa00002d 	bge	20f80 <ArtNetNode::HandleTodRequest()+0xfc>
   20ec8:	e51b3010 	ldr	r3, [fp, #-16]
   20ecc:	e5d33015 	ldrb	r3, [r3, #21]
   20ed0:	e6ff3073 	uxth	r3, r3
   20ed4:	e1a03403 	lsl	r3, r3, #8
   20ed8:	e6ff3073 	uxth	r3, r3
   20edc:	e1a01003 	mov	r1, r3
   20ee0:	e51b2010 	ldr	r2, [fp, #-16]
   20ee4:	e51b3008 	ldr	r3, [fp, #-8]
   20ee8:	e0823003 	add	r3, r2, r3
   20eec:	e2833018 	add	r3, r3, #24
   20ef0:	e5d33000 	ldrb	r3, [r3]
   20ef4:	e1813003 	orr	r3, r1, r3
   20ef8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   20efc:	e3a03000 	mov	r3, #0
   20f00:	e50b300c 	str	r3, [fp, #-12]
   20f04:	e51b300c 	ldr	r3, [fp, #-12]
   20f08:	e3530003 	cmp	r3, #3
   20f0c:	8a000017 	bhi	20f70 <ArtNetNode::HandleTodRequest()+0xec>
   20f10:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   20f14:	e51b300c 	ldr	r3, [fp, #-12]
   20f18:	e1a03283 	lsl	r3, r3, #5
   20f1c:	e0823003 	add	r3, r2, r3
   20f20:	e2833094 	add	r3, r3, #148	; 0x94
   20f24:	e1d330b0 	ldrh	r3, [r3]
   20f28:	e1a02003 	mov	r2, r3
   20f2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   20f30:	e1530002 	cmp	r3, r2
   20f34:	1a000009 	bne	20f60 <ArtNetNode::HandleTodRequest()+0xdc>
   20f38:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   20f3c:	e51b300c 	ldr	r3, [fp, #-12]
   20f40:	e1a03283 	lsl	r3, r3, #5
   20f44:	e0823003 	add	r3, r2, r3
   20f48:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
   20f4c:	e3530000 	cmp	r3, #0
   20f50:	0a000002 	beq	20f60 <ArtNetNode::HandleTodRequest()+0xdc>
   20f54:	e51b100c 	ldr	r1, [fp, #-12]
   20f58:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   20f5c:	eb000061 	bl	210e8 <ArtNetNode::SendTod(unsigned int)>
   20f60:	e51b300c 	ldr	r3, [fp, #-12]
   20f64:	e2833001 	add	r3, r3, #1
   20f68:	e50b300c 	str	r3, [fp, #-12]
   20f6c:	eaffffe4 	b	20f04 <ArtNetNode::HandleTodRequest()+0x80>
   20f70:	e51b3008 	ldr	r3, [fp, #-8]
   20f74:	e2833001 	add	r3, r3, #1
   20f78:	e50b3008 	str	r3, [fp, #-8]
   20f7c:	eaffffcd 	b	20eb8 <ArtNetNode::HandleTodRequest()+0x34>
   20f80:	e1a00000 	nop			; (mov r0, r0)
   20f84:	e24bd004 	sub	sp, fp, #4
   20f88:	e8bd8800 	pop	{fp, pc}

00020f8c <ArtNetNode::HandleTodData()>:
   20f8c:	e92d4800 	push	{fp, lr}
   20f90:	e28db004 	add	fp, sp, #4
   20f94:	e24dd020 	sub	sp, sp, #32
   20f98:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   20f9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   20fa0:	e2833f55 	add	r3, r3, #340	; 0x154
   20fa4:	e50b3010 	str	r3, [fp, #-16]
   20fa8:	e51b3010 	ldr	r3, [fp, #-16]
   20fac:	e5d3300c 	ldrb	r3, [r3, #12]
   20fb0:	e3530001 	cmp	r3, #1
   20fb4:	1a000048 	bne	210dc <ArtNetNode::HandleTodData()+0x150>
   20fb8:	e51b3010 	ldr	r3, [fp, #-16]
   20fbc:	e5d33015 	ldrb	r3, [r3, #21]
   20fc0:	e6ff3073 	uxth	r3, r3
   20fc4:	e1a03403 	lsl	r3, r3, #8
   20fc8:	e6ff3073 	uxth	r3, r3
   20fcc:	e1a02003 	mov	r2, r3
   20fd0:	e51b3010 	ldr	r3, [fp, #-16]
   20fd4:	e5d33017 	ldrb	r3, [r3, #23]
   20fd8:	e1823003 	orr	r3, r2, r3
   20fdc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   20fe0:	e3a03000 	mov	r3, #0
   20fe4:	e50b3008 	str	r3, [fp, #-8]
   20fe8:	e51b3008 	ldr	r3, [fp, #-8]
   20fec:	e3530003 	cmp	r3, #3
   20ff0:	8a00003a 	bhi	210e0 <ArtNetNode::HandleTodData()+0x154>
   20ff4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   20ff8:	e51b3008 	ldr	r3, [fp, #-8]
   20ffc:	e2833011 	add	r3, r3, #17
   21000:	e1a03203 	lsl	r3, r3, #4
   21004:	e0823003 	add	r3, r2, r3
   21008:	e5d33008 	ldrb	r3, [r3, #8]
   2100c:	e2233001 	eor	r3, r3, #1
   21010:	e6ef3073 	uxtb	r3, r3
   21014:	e3530000 	cmp	r3, #0
   21018:	1a00002a 	bne	210c8 <ArtNetNode::HandleTodData()+0x13c>
   2101c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   21020:	e51b3008 	ldr	r3, [fp, #-8]
   21024:	e2833011 	add	r3, r3, #17
   21028:	e1a03203 	lsl	r3, r3, #4
   2102c:	e0823003 	add	r3, r2, r3
   21030:	e2833004 	add	r3, r3, #4
   21034:	e1d330b0 	ldrh	r3, [r3]
   21038:	e1a02003 	mov	r2, r3
   2103c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   21040:	e1530002 	cmp	r3, r2
   21044:	1a000020 	bne	210cc <ArtNetNode::HandleTodData()+0x140>
   21048:	e3a03000 	mov	r3, #0
   2104c:	e50b300c 	str	r3, [fp, #-12]
   21050:	e51b3010 	ldr	r3, [fp, #-16]
   21054:	e5d3301b 	ldrb	r3, [r3, #27]
   21058:	e1a02003 	mov	r2, r3
   2105c:	e51b300c 	ldr	r3, [fp, #-12]
   21060:	e1530002 	cmp	r3, r2
   21064:	2a000018 	bcs	210cc <ArtNetNode::HandleTodData()+0x140>
   21068:	e51b200c 	ldr	r2, [fp, #-12]
   2106c:	e1a03002 	mov	r3, r2
   21070:	e1a03083 	lsl	r3, r3, #1
   21074:	e0833002 	add	r3, r3, r2
   21078:	e1a03083 	lsl	r3, r3, #1
   2107c:	e2833018 	add	r3, r3, #24
   21080:	e51b2010 	ldr	r2, [fp, #-16]
   21084:	e0823003 	add	r3, r2, r3
   21088:	e2833004 	add	r3, r3, #4
   2108c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   21090:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21094:	e5930a58 	ldr	r0, [r3, #2648]	; 0xa58
   21098:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2109c:	e5933a58 	ldr	r3, [r3, #2648]	; 0xa58
   210a0:	e5933000 	ldr	r3, [r3]
   210a4:	e2833018 	add	r3, r3, #24
   210a8:	e5933000 	ldr	r3, [r3]
   210ac:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   210b0:	e51b1008 	ldr	r1, [fp, #-8]
   210b4:	e12fff33 	blx	r3
   210b8:	e51b300c 	ldr	r3, [fp, #-12]
   210bc:	e2833001 	add	r3, r3, #1
   210c0:	e50b300c 	str	r3, [fp, #-12]
   210c4:	eaffffe1 	b	21050 <ArtNetNode::HandleTodData()+0xc4>
   210c8:	e1a00000 	nop			; (mov r0, r0)
   210cc:	e51b3008 	ldr	r3, [fp, #-8]
   210d0:	e2833001 	add	r3, r3, #1
   210d4:	e50b3008 	str	r3, [fp, #-8]
   210d8:	eaffffc2 	b	20fe8 <ArtNetNode::HandleTodData()+0x5c>
   210dc:	e1a00000 	nop			; (mov r0, r0)
   210e0:	e24bd004 	sub	sp, fp, #4
   210e4:	e8bd8800 	pop	{fp, pc}

000210e8 <ArtNetNode::SendTod(unsigned int)>:
   210e8:	e92d4800 	push	{fp, lr}
   210ec:	e28db004 	add	fp, sp, #4
   210f0:	e24dd020 	sub	sp, sp, #32
   210f4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   210f8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   210fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21100:	e2833f55 	add	r3, r3, #340	; 0x154
   21104:	e50b3008 	str	r3, [fp, #-8]
   21108:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2110c:	e1a03123 	lsr	r3, r3, #2
   21110:	e50b300c 	str	r3, [fp, #-12]
   21114:	e51b3008 	ldr	r3, [fp, #-8]
   21118:	e59f1208 	ldr	r1, [pc, #520]	; 21328 <ArtNetNode::SendTod(unsigned int)+0x240>
   2111c:	e1a02003 	mov	r2, r3
   21120:	e1a03001 	mov	r3, r1
   21124:	e8b30003 	ldm	r3!, {r0, r1}
   21128:	e5820000 	str	r0, [r2]
   2112c:	e5821004 	str	r1, [r2, #4]
   21130:	e51b2008 	ldr	r2, [fp, #-8]
   21134:	e3a03000 	mov	r3, #0
   21138:	e5c23008 	strb	r3, [r2, #8]
   2113c:	e3a03000 	mov	r3, #0
   21140:	e1e03003 	mvn	r3, r3
   21144:	e203307e 	and	r3, r3, #126	; 0x7e
   21148:	e1e03003 	mvn	r3, r3
   2114c:	e5c23009 	strb	r3, [r2, #9]
   21150:	e51b3008 	ldr	r3, [fp, #-8]
   21154:	e3a02000 	mov	r2, #0
   21158:	e5c3200a 	strb	r2, [r3, #10]
   2115c:	e51b3008 	ldr	r3, [fp, #-8]
   21160:	e3a0200e 	mov	r2, #14
   21164:	e5c3200b 	strb	r2, [r3, #11]
   21168:	e51b3008 	ldr	r3, [fp, #-8]
   2116c:	e3a02001 	mov	r2, #1
   21170:	e5c3200c 	strb	r2, [r3, #12]
   21174:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21178:	e5932a58 	ldr	r2, [r3, #2648]	; 0xa58
   2117c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21180:	e5933a58 	ldr	r3, [r3, #2648]	; 0xa58
   21184:	e5933000 	ldr	r3, [r3]
   21188:	e283300c 	add	r3, r3, #12
   2118c:	e5933000 	ldr	r3, [r3]
   21190:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   21194:	e1a00002 	mov	r0, r2
   21198:	e12fff33 	blx	r3
   2119c:	e1a03000 	mov	r3, r0
   211a0:	e54b300d 	strb	r3, [fp, #-13]
   211a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   211a8:	e6ef3073 	uxtb	r3, r3
   211ac:	e2033003 	and	r3, r3, #3
   211b0:	e6ef3073 	uxtb	r3, r3
   211b4:	e2833001 	add	r3, r3, #1
   211b8:	e6ef2073 	uxtb	r2, r3
   211bc:	e51b3008 	ldr	r3, [fp, #-8]
   211c0:	e5c3200d 	strb	r2, [r3, #13]
   211c4:	e51b3008 	ldr	r3, [fp, #-8]
   211c8:	e3a02000 	mov	r2, #0
   211cc:	e5c3200e 	strb	r2, [r3, #14]
   211d0:	e51b3008 	ldr	r3, [fp, #-8]
   211d4:	e3a02000 	mov	r2, #0
   211d8:	e5c3200f 	strb	r2, [r3, #15]
   211dc:	e51b3008 	ldr	r3, [fp, #-8]
   211e0:	e3a02000 	mov	r2, #0
   211e4:	e5c32010 	strb	r2, [r3, #16]
   211e8:	e51b3008 	ldr	r3, [fp, #-8]
   211ec:	e3a02000 	mov	r2, #0
   211f0:	e5c32011 	strb	r2, [r3, #17]
   211f4:	e51b3008 	ldr	r3, [fp, #-8]
   211f8:	e3a02000 	mov	r2, #0
   211fc:	e5c32012 	strb	r2, [r3, #18]
   21200:	e51b3008 	ldr	r3, [fp, #-8]
   21204:	e3a02000 	mov	r2, #0
   21208:	e5c32013 	strb	r2, [r3, #19]
   2120c:	e51b300c 	ldr	r3, [fp, #-12]
   21210:	e6ef3073 	uxtb	r3, r3
   21214:	e2833001 	add	r3, r3, #1
   21218:	e6ef2073 	uxtb	r2, r3
   2121c:	e51b3008 	ldr	r3, [fp, #-8]
   21220:	e5c32014 	strb	r2, [r3, #20]
   21224:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   21228:	e51b300c 	ldr	r3, [fp, #-12]
   2122c:	e0823003 	add	r3, r2, r3
   21230:	e2833012 	add	r3, r3, #18
   21234:	e5d32000 	ldrb	r2, [r3]
   21238:	e51b3008 	ldr	r3, [fp, #-8]
   2123c:	e5c32015 	strb	r2, [r3, #21]
   21240:	e51b3008 	ldr	r3, [fp, #-8]
   21244:	e3a02000 	mov	r2, #0
   21248:	e5c32016 	strb	r2, [r3, #22]
   2124c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   21250:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   21254:	e1a03283 	lsl	r3, r3, #5
   21258:	e0823003 	add	r3, r2, r3
   2125c:	e5d32096 	ldrb	r2, [r3, #150]	; 0x96
   21260:	e51b3008 	ldr	r3, [fp, #-8]
   21264:	e5c32017 	strb	r2, [r3, #23]
   21268:	e51b3008 	ldr	r3, [fp, #-8]
   2126c:	e3a02000 	mov	r2, #0
   21270:	e5c32018 	strb	r2, [r3, #24]
   21274:	e51b3008 	ldr	r3, [fp, #-8]
   21278:	e55b200d 	ldrb	r2, [fp, #-13]
   2127c:	e5c32019 	strb	r2, [r3, #25]
   21280:	e51b3008 	ldr	r3, [fp, #-8]
   21284:	e3a02000 	mov	r2, #0
   21288:	e5c3201a 	strb	r2, [r3, #26]
   2128c:	e51b3008 	ldr	r3, [fp, #-8]
   21290:	e55b200d 	ldrb	r2, [fp, #-13]
   21294:	e5c3201b 	strb	r2, [r3, #27]
   21298:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2129c:	e5930a58 	ldr	r0, [r3, #2648]	; 0xa58
   212a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   212a4:	e5933a58 	ldr	r3, [r3, #2648]	; 0xa58
   212a8:	e5933000 	ldr	r3, [r3]
   212ac:	e2833010 	add	r3, r3, #16
   212b0:	e5933000 	ldr	r3, [r3]
   212b4:	e51b2008 	ldr	r2, [fp, #-8]
   212b8:	e282201c 	add	r2, r2, #28
   212bc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   212c0:	e12fff33 	blx	r3
   212c4:	e55b200d 	ldrb	r2, [fp, #-13]
   212c8:	e1a03002 	mov	r3, r2
   212cc:	e1a03083 	lsl	r3, r3, #1
   212d0:	e0833002 	add	r3, r3, r2
   212d4:	e1a03083 	lsl	r3, r3, #1
   212d8:	e283301c 	add	r3, r3, #28
   212dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   212e0:	ebffdd00 	bl	186e8 <Network::Get()>
   212e4:	e1a0c000 	mov	ip, r0
   212e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   212ec:	e5931000 	ldr	r1, [r3]
   212f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   212f4:	e6ff0073 	uxth	r0, r3
   212f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   212fc:	e5933004 	ldr	r3, [r3, #4]
   21300:	e59f2024 	ldr	r2, [pc, #36]	; 2132c <ArtNetNode::SendTod(unsigned int)+0x244>
   21304:	e58d2004 	str	r2, [sp, #4]
   21308:	e58d3000 	str	r3, [sp]
   2130c:	e1a03000 	mov	r3, r0
   21310:	e51b2008 	ldr	r2, [fp, #-8]
   21314:	e1a0000c 	mov	r0, ip
   21318:	eb005531 	bl	367e4 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>
   2131c:	e1a00000 	nop			; (mov r0, r0)
   21320:	e24bd004 	sub	sp, fp, #4
   21324:	e8bd8800 	pop	{fp, pc}
   21328:	00046970 	.word	0x00046970
   2132c:	00001936 	.word	0x00001936

00021330 <ArtNetNode::SendTodRequest(unsigned int)>:
   21330:	e92d4800 	push	{fp, lr}
   21334:	e28db004 	add	fp, sp, #4
   21338:	e24dd020 	sub	sp, sp, #32
   2133c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   21340:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   21344:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21348:	e5932a58 	ldr	r2, [r3, #2648]	; 0xa58
   2134c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21350:	e5933a58 	ldr	r3, [r3, #2648]	; 0xa58
   21354:	e5933000 	ldr	r3, [r3]
   21358:	e2833014 	add	r3, r3, #20
   2135c:	e5933000 	ldr	r3, [r3]
   21360:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   21364:	e1a00002 	mov	r0, r2
   21368:	e12fff33 	blx	r3
   2136c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21370:	e2833f55 	add	r3, r3, #340	; 0x154
   21374:	e50b3008 	str	r3, [fp, #-8]
   21378:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2137c:	e1a03123 	lsr	r3, r3, #2
   21380:	e50b300c 	str	r3, [fp, #-12]
   21384:	e51b3008 	ldr	r3, [fp, #-8]
   21388:	e59f1144 	ldr	r1, [pc, #324]	; 214d4 <ArtNetNode::SendTodRequest(unsigned int)+0x1a4>
   2138c:	e1a02003 	mov	r2, r3
   21390:	e1a03001 	mov	r3, r1
   21394:	e8b30003 	ldm	r3!, {r0, r1}
   21398:	e5820000 	str	r0, [r2]
   2139c:	e5821004 	str	r1, [r2, #4]
   213a0:	e51b2008 	ldr	r2, [fp, #-8]
   213a4:	e3a03000 	mov	r3, #0
   213a8:	e5c23008 	strb	r3, [r2, #8]
   213ac:	e3a03000 	mov	r3, #0
   213b0:	e1e03c83 	mvn	r3, r3, lsl #25
   213b4:	e1e03ca3 	mvn	r3, r3, lsr #25
   213b8:	e5c23009 	strb	r3, [r2, #9]
   213bc:	e51b3008 	ldr	r3, [fp, #-8]
   213c0:	e3a02000 	mov	r2, #0
   213c4:	e5c3200a 	strb	r2, [r3, #10]
   213c8:	e51b3008 	ldr	r3, [fp, #-8]
   213cc:	e3a0200e 	mov	r2, #14
   213d0:	e5c3200b 	strb	r2, [r3, #11]
   213d4:	e51b3008 	ldr	r3, [fp, #-8]
   213d8:	e3a02000 	mov	r2, #0
   213dc:	e5c3200e 	strb	r2, [r3, #14]
   213e0:	e51b3008 	ldr	r3, [fp, #-8]
   213e4:	e3a02000 	mov	r2, #0
   213e8:	e5c3200f 	strb	r2, [r3, #15]
   213ec:	e51b3008 	ldr	r3, [fp, #-8]
   213f0:	e3a02000 	mov	r2, #0
   213f4:	e5c32010 	strb	r2, [r3, #16]
   213f8:	e51b3008 	ldr	r3, [fp, #-8]
   213fc:	e3a02000 	mov	r2, #0
   21400:	e5c32011 	strb	r2, [r3, #17]
   21404:	e51b3008 	ldr	r3, [fp, #-8]
   21408:	e3a02000 	mov	r2, #0
   2140c:	e5c32012 	strb	r2, [r3, #18]
   21410:	e51b3008 	ldr	r3, [fp, #-8]
   21414:	e3a02000 	mov	r2, #0
   21418:	e5c32013 	strb	r2, [r3, #19]
   2141c:	e51b3008 	ldr	r3, [fp, #-8]
   21420:	e3a02000 	mov	r2, #0
   21424:	e5c32014 	strb	r2, [r3, #20]
   21428:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2142c:	e51b300c 	ldr	r3, [fp, #-12]
   21430:	e0823003 	add	r3, r2, r3
   21434:	e2833012 	add	r3, r3, #18
   21438:	e5d32000 	ldrb	r2, [r3]
   2143c:	e51b3008 	ldr	r3, [fp, #-8]
   21440:	e5c32015 	strb	r2, [r3, #21]
   21444:	e51b3008 	ldr	r3, [fp, #-8]
   21448:	e3a02000 	mov	r2, #0
   2144c:	e5c32016 	strb	r2, [r3, #22]
   21450:	e51b3008 	ldr	r3, [fp, #-8]
   21454:	e3a02001 	mov	r2, #1
   21458:	e5c32017 	strb	r2, [r3, #23]
   2145c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   21460:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   21464:	e2833011 	add	r3, r3, #17
   21468:	e1a03203 	lsl	r3, r3, #4
   2146c:	e0823003 	add	r3, r2, r3
   21470:	e5d32006 	ldrb	r2, [r3, #6]
   21474:	e51b3008 	ldr	r3, [fp, #-8]
   21478:	e5c32018 	strb	r2, [r3, #24]
   2147c:	e51b3008 	ldr	r3, [fp, #-8]
   21480:	e5d33017 	ldrb	r3, [r3, #23]
   21484:	e2833018 	add	r3, r3, #24
   21488:	e50b3010 	str	r3, [fp, #-16]
   2148c:	ebffdc95 	bl	186e8 <Network::Get()>
   21490:	e1a0c000 	mov	ip, r0
   21494:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21498:	e5931000 	ldr	r1, [r3]
   2149c:	e51b3010 	ldr	r3, [fp, #-16]
   214a0:	e6ff0073 	uxth	r0, r3
   214a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   214a8:	e5933004 	ldr	r3, [r3, #4]
   214ac:	e59f2024 	ldr	r2, [pc, #36]	; 214d8 <ArtNetNode::SendTodRequest(unsigned int)+0x1a8>
   214b0:	e58d2004 	str	r2, [sp, #4]
   214b4:	e58d3000 	str	r3, [sp]
   214b8:	e1a03000 	mov	r3, r0
   214bc:	e51b2008 	ldr	r2, [fp, #-8]
   214c0:	e1a0000c 	mov	r0, ip
   214c4:	eb0054c6 	bl	367e4 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>
   214c8:	e1a00000 	nop			; (mov r0, r0)
   214cc:	e24bd004 	sub	sp, fp, #4
   214d0:	e8bd8800 	pop	{fp, pc}
   214d4:	00046970 	.word	0x00046970
   214d8:	00001936 	.word	0x00001936

000214dc <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)>:
   214dc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   214e0:	e28db000 	add	fp, sp, #0
   214e4:	e24dd014 	sub	sp, sp, #20
   214e8:	e50b0008 	str	r0, [fp, #-8]
   214ec:	e50b100c 	str	r1, [fp, #-12]
   214f0:	e1a03002 	mov	r3, r2
   214f4:	e54b300d 	strb	r3, [fp, #-13]
   214f8:	e51b3008 	ldr	r3, [fp, #-8]
   214fc:	e51b200c 	ldr	r2, [fp, #-12]
   21500:	e5832a58 	str	r2, [r3, #2648]	; 0xa58
   21504:	e51b3008 	ldr	r3, [fp, #-8]
   21508:	e5933a58 	ldr	r3, [r3, #2648]	; 0xa58
   2150c:	e3530000 	cmp	r3, #0
   21510:	0a000009 	beq	2153c <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)+0x60>
   21514:	e51b3008 	ldr	r3, [fp, #-8]
   21518:	e55b200d 	ldrb	r2, [fp, #-13]
   2151c:	e5c32a4c 	strb	r2, [r3, #2636]	; 0xa4c
   21520:	e51b3008 	ldr	r3, [fp, #-8]
   21524:	e5d33067 	ldrb	r3, [r3, #103]	; 0x67
   21528:	e3833002 	orr	r3, r3, #2
   2152c:	e6ef2073 	uxtb	r2, r3
   21530:	e51b3008 	ldr	r3, [fp, #-8]
   21534:	e5c32067 	strb	r2, [r3, #103]	; 0x67
   21538:	ea000005 	b	21554 <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)+0x78>
   2153c:	e51b3008 	ldr	r3, [fp, #-8]
   21540:	e5d33067 	ldrb	r3, [r3, #103]	; 0x67
   21544:	e3c33002 	bic	r3, r3, #2
   21548:	e6ef2073 	uxtb	r2, r3
   2154c:	e51b3008 	ldr	r3, [fp, #-8]
   21550:	e5c32067 	strb	r2, [r3, #103]	; 0x67
   21554:	e1a00000 	nop			; (mov r0, r0)
   21558:	e28bd000 	add	sp, fp, #0
   2155c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   21560:	e12fff1e 	bx	lr

00021564 <ArtNetNode::HandleRdm()>:
   21564:	e92d4800 	push	{fp, lr}
   21568:	e28db004 	add	fp, sp, #4
   2156c:	e24dd028 	sub	sp, sp, #40	; 0x28
   21570:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   21574:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21578:	e2833f55 	add	r3, r3, #340	; 0x154
   2157c:	e50b300c 	str	r3, [fp, #-12]
   21580:	e51b300c 	ldr	r3, [fp, #-12]
   21584:	e5d3300c 	ldrb	r3, [r3, #12]
   21588:	e3530001 	cmp	r3, #1
   2158c:	1a000054 	bne	216e4 <ArtNetNode::HandleRdm()+0x180>
   21590:	e51b300c 	ldr	r3, [fp, #-12]
   21594:	e5d33015 	ldrb	r3, [r3, #21]
   21598:	e6ff3073 	uxth	r3, r3
   2159c:	e1a03403 	lsl	r3, r3, #8
   215a0:	e6ff3073 	uxth	r3, r3
   215a4:	e1a02003 	mov	r2, r3
   215a8:	e51b300c 	ldr	r3, [fp, #-12]
   215ac:	e5d33017 	ldrb	r3, [r3, #23]
   215b0:	e1823003 	orr	r3, r2, r3
   215b4:	e50b3010 	str	r3, [fp, #-16]
   215b8:	e3a03000 	mov	r3, #0
   215bc:	e50b3008 	str	r3, [fp, #-8]
   215c0:	e51b3008 	ldr	r3, [fp, #-8]
   215c4:	e3530003 	cmp	r3, #3
   215c8:	8a000046 	bhi	216e8 <ArtNetNode::HandleRdm()+0x184>
   215cc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   215d0:	e51b3008 	ldr	r3, [fp, #-8]
   215d4:	e1a03283 	lsl	r3, r3, #5
   215d8:	e0823003 	add	r3, r2, r3
   215dc:	e2833094 	add	r3, r3, #148	; 0x94
   215e0:	e1d330b0 	ldrh	r3, [r3]
   215e4:	e1a02003 	mov	r2, r3
   215e8:	e51b3010 	ldr	r3, [fp, #-16]
   215ec:	e1530002 	cmp	r3, r2
   215f0:	1a000037 	bne	216d4 <ArtNetNode::HandleRdm()+0x170>
   215f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   215f8:	e51b3008 	ldr	r3, [fp, #-8]
   215fc:	e1a03283 	lsl	r3, r3, #5
   21600:	e0823003 	add	r3, r2, r3
   21604:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
   21608:	e3530000 	cmp	r3, #0
   2160c:	0a000030 	beq	216d4 <ArtNetNode::HandleRdm()+0x170>
   21610:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21614:	e5930a58 	ldr	r0, [r3, #2648]	; 0xa58
   21618:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2161c:	e5933a58 	ldr	r3, [r3, #2648]	; 0xa58
   21620:	e5933000 	ldr	r3, [r3]
   21624:	e283301c 	add	r3, r3, #28
   21628:	e5933000 	ldr	r3, [r3]
   2162c:	e51b200c 	ldr	r2, [fp, #-12]
   21630:	e2822018 	add	r2, r2, #24
   21634:	e51b1008 	ldr	r1, [fp, #-8]
   21638:	e12fff33 	blx	r3
   2163c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
   21640:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   21644:	e3530000 	cmp	r3, #0
   21648:	0a000021 	beq	216d4 <ArtNetNode::HandleRdm()+0x170>
   2164c:	e51b300c 	ldr	r3, [fp, #-12]
   21650:	e3a02001 	mov	r2, #1
   21654:	e5c3200c 	strb	r2, [r3, #12]
   21658:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2165c:	e2833002 	add	r3, r3, #2
   21660:	e5d33000 	ldrb	r3, [r3]
   21664:	e6ff3073 	uxth	r3, r3
   21668:	e2833001 	add	r3, r3, #1
   2166c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
   21670:	e51b300c 	ldr	r3, [fp, #-12]
   21674:	e2830018 	add	r0, r3, #24
   21678:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2167c:	e2833001 	add	r3, r3, #1
   21680:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
   21684:	e1a01003 	mov	r1, r3
   21688:	ebffbf5d 	bl	11404 <memcpy@plt>
   2168c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
   21690:	e2833018 	add	r3, r3, #24
   21694:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   21698:	ebffdc12 	bl	186e8 <Network::Get()>
   2169c:	e1a0c000 	mov	ip, r0
   216a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   216a4:	e5931000 	ldr	r1, [r3]
   216a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   216ac:	e6ff0073 	uxth	r0, r3
   216b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   216b4:	e5933620 	ldr	r3, [r3, #1568]	; 0x620
   216b8:	e59f2030 	ldr	r2, [pc, #48]	; 216f0 <ArtNetNode::HandleRdm()+0x18c>
   216bc:	e58d2004 	str	r2, [sp, #4]
   216c0:	e58d3000 	str	r3, [sp]
   216c4:	e1a03000 	mov	r3, r0
   216c8:	e51b200c 	ldr	r2, [fp, #-12]
   216cc:	e1a0000c 	mov	r0, ip
   216d0:	eb005443 	bl	367e4 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>
   216d4:	e51b3008 	ldr	r3, [fp, #-8]
   216d8:	e2833001 	add	r3, r3, #1
   216dc:	e50b3008 	str	r3, [fp, #-8]
   216e0:	eaffffb6 	b	215c0 <ArtNetNode::HandleRdm()+0x5c>
   216e4:	e1a00000 	nop			; (mov r0, r0)
   216e8:	e24bd004 	sub	sp, fp, #4
   216ec:	e8bd8800 	pop	{fp, pc}
   216f0:	00001936 	.word	0x00001936

000216f4 <ArtNetNode::SetRdmUID(unsigned char const*, bool)>:
   216f4:	e92d4800 	push	{fp, lr}
   216f8:	e28db004 	add	fp, sp, #4
   216fc:	e24dd010 	sub	sp, sp, #16
   21700:	e50b0008 	str	r0, [fp, #-8]
   21704:	e50b100c 	str	r1, [fp, #-12]
   21708:	e1a03002 	mov	r3, r2
   2170c:	e54b300d 	strb	r3, [fp, #-13]
   21710:	e51b3008 	ldr	r3, [fp, #-8]
   21714:	e283306a 	add	r3, r3, #106	; 0x6a
   21718:	e3a02006 	mov	r2, #6
   2171c:	e51b100c 	ldr	r1, [fp, #-12]
   21720:	e1a00003 	mov	r0, r3
   21724:	ebffbf36 	bl	11404 <memcpy@plt>
   21728:	e55b300d 	ldrb	r3, [fp, #-13]
   2172c:	e3530000 	cmp	r3, #0
   21730:	0a000006 	beq	21750 <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x5c>
   21734:	e51b3008 	ldr	r3, [fp, #-8]
   21738:	e5d33069 	ldrb	r3, [r3, #105]	; 0x69
   2173c:	e3833010 	orr	r3, r3, #16
   21740:	e6ef2073 	uxtb	r2, r3
   21744:	e51b3008 	ldr	r3, [fp, #-8]
   21748:	e5c32069 	strb	r2, [r3, #105]	; 0x69
   2174c:	ea000005 	b	21768 <ArtNetNode::SetRdmUID(unsigned char const*, bool)+0x74>
   21750:	e51b3008 	ldr	r3, [fp, #-8]
   21754:	e5d33069 	ldrb	r3, [r3, #105]	; 0x69
   21758:	e3c33010 	bic	r3, r3, #16
   2175c:	e6ef2073 	uxtb	r2, r3
   21760:	e51b3008 	ldr	r3, [fp, #-8]
   21764:	e5c32069 	strb	r2, [r3, #105]	; 0x69
   21768:	e1a00000 	nop			; (mov r0, r0)
   2176c:	e24bd004 	sub	sp, fp, #4
   21770:	e8bd8800 	pop	{fp, pc}

00021774 <artnet::make_port_address(unsigned int, unsigned int, unsigned int)>:
   21774:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   21778:	e28db000 	add	fp, sp, #0
   2177c:	e24dd01c 	sub	sp, sp, #28
   21780:	e50b0010 	str	r0, [fp, #-16]
   21784:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   21788:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   2178c:	e51b3010 	ldr	r3, [fp, #-16]
   21790:	e6ff3073 	uxth	r3, r3
   21794:	e1a03403 	lsl	r3, r3, #8
   21798:	e6ff3073 	uxth	r3, r3
   2179c:	e2033c7f 	and	r3, r3, #32512	; 0x7f00
   217a0:	e14b30b6 	strh	r3, [fp, #-6]
   217a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   217a8:	e6ff3073 	uxth	r3, r3
   217ac:	e1a03203 	lsl	r3, r3, #4
   217b0:	e6ff3073 	uxth	r3, r3
   217b4:	e6ef3073 	uxtb	r3, r3
   217b8:	e6ff2073 	uxth	r2, r3
   217bc:	e15b30b6 	ldrh	r3, [fp, #-6]
   217c0:	e1823003 	orr	r3, r2, r3
   217c4:	e14b30b6 	strh	r3, [fp, #-6]
   217c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   217cc:	e6ff3073 	uxth	r3, r3
   217d0:	e203300f 	and	r3, r3, #15
   217d4:	e6ff2073 	uxth	r2, r3
   217d8:	e15b30b6 	ldrh	r3, [fp, #-6]
   217dc:	e1823003 	orr	r3, r2, r3
   217e0:	e14b30b6 	strh	r3, [fp, #-6]
   217e4:	e15b30b6 	ldrh	r3, [fp, #-6]
   217e8:	e1a00003 	mov	r0, r3
   217ec:	e28bd000 	add	sp, fp, #0
   217f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   217f4:	e12fff1e 	bx	lr

000217f8 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
   217f8:	e92d4800 	push	{fp, lr}
   217fc:	e28db004 	add	fp, sp, #4
   21800:	e24dd010 	sub	sp, sp, #16
   21804:	e50b0008 	str	r0, [fp, #-8]
   21808:	e1a03001 	mov	r3, r1
   2180c:	e50b2010 	str	r2, [fp, #-16]
   21810:	e14b30ba 	strh	r3, [fp, #-10]
   21814:	e51b2008 	ldr	r2, [fp, #-8]
   21818:	e51b3010 	ldr	r3, [fp, #-16]
   2181c:	e0823003 	add	r3, r2, r3
   21820:	e2833012 	add	r3, r3, #18
   21824:	e5d33000 	ldrb	r3, [r3]
   21828:	e1a00003 	mov	r0, r3
   2182c:	e51b2008 	ldr	r2, [fp, #-8]
   21830:	e51b3010 	ldr	r3, [fp, #-16]
   21834:	e0823003 	add	r3, r2, r3
   21838:	e2833013 	add	r3, r3, #19
   2183c:	e5d33000 	ldrb	r3, [r3]
   21840:	e1a01003 	mov	r1, r3
   21844:	e15b30ba 	ldrh	r3, [fp, #-10]
   21848:	e1a02003 	mov	r2, r3
   2184c:	ebffffc8 	bl	21774 <artnet::make_port_address(unsigned int, unsigned int, unsigned int)>
   21850:	e1a03000 	mov	r3, r0
   21854:	e1a00003 	mov	r0, r3
   21858:	e24bd004 	sub	sp, fp, #4
   2185c:	e8bd8800 	pop	{fp, pc}

00021860 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
   21860:	e92d4800 	push	{fp, lr}
   21864:	e28db004 	add	fp, sp, #4
   21868:	e24dd018 	sub	sp, sp, #24
   2186c:	e50b0010 	str	r0, [fp, #-16]
   21870:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   21874:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   21878:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
   2187c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   21880:	e1a03123 	lsr	r3, r3, #2
   21884:	e50b3008 	str	r3, [fp, #-8]
   21888:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
   2188c:	e1a03443 	asr	r3, r3, #8
   21890:	e6ef3073 	uxtb	r3, r3
   21894:	e203307f 	and	r3, r3, #127	; 0x7f
   21898:	e6ef1073 	uxtb	r1, r3
   2189c:	e51b2010 	ldr	r2, [fp, #-16]
   218a0:	e51b3008 	ldr	r3, [fp, #-8]
   218a4:	e0823003 	add	r3, r2, r3
   218a8:	e2833012 	add	r3, r3, #18
   218ac:	e1a02001 	mov	r2, r1
   218b0:	e5c32000 	strb	r2, [r3]
   218b4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
   218b8:	e1a03243 	asr	r3, r3, #4
   218bc:	e6ef3073 	uxtb	r3, r3
   218c0:	e203300f 	and	r3, r3, #15
   218c4:	e6ef1073 	uxtb	r1, r3
   218c8:	e51b2010 	ldr	r2, [fp, #-16]
   218cc:	e51b3008 	ldr	r3, [fp, #-8]
   218d0:	e0823003 	add	r3, r2, r3
   218d4:	e2833013 	add	r3, r3, #19
   218d8:	e1a02001 	mov	r2, r1
   218dc:	e5c32000 	strb	r2, [r3]
   218e0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
   218e4:	e6ef3073 	uxtb	r3, r3
   218e8:	e203300f 	and	r3, r3, #15
   218ec:	e6ef3073 	uxtb	r3, r3
   218f0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   218f4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   218f8:	e51b0010 	ldr	r0, [fp, #-16]
   218fc:	eb000003 	bl	21910 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
   21900:	e1a03000 	mov	r3, r0
   21904:	e1a00003 	mov	r0, r3
   21908:	e24bd004 	sub	sp, fp, #4
   2190c:	e8bd8800 	pop	{fp, pc}

00021910 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
   21910:	e92d4800 	push	{fp, lr}
   21914:	e28db004 	add	fp, sp, #4
   21918:	e24dd028 	sub	sp, sp, #40	; 0x28
   2191c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   21920:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   21924:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   21928:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
   2192c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   21930:	e3530003 	cmp	r3, #3
   21934:	9a000001 	bls	21940 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x30>
   21938:	e3e03004 	mvn	r3, #4
   2193c:	ea0000c6 	b	21c5c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x34c>
   21940:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   21944:	e1a03123 	lsr	r3, r3, #2
   21948:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2194c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   21950:	e3530002 	cmp	r3, #2
   21954:	1a000014 	bne	219ac <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x9c>
   21958:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2195c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   21960:	e1a03283 	lsl	r3, r3, #5
   21964:	e0823003 	add	r3, r2, r3
   21968:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
   2196c:	e3530000 	cmp	r3, #0
   21970:	0a00000b 	beq	219a4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x94>
   21974:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   21978:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2197c:	e1a03283 	lsl	r3, r3, #5
   21980:	e0823003 	add	r3, r2, r3
   21984:	e3a02000 	mov	r2, #0
   21988:	e5c32098 	strb	r2, [r3, #152]	; 0x98
   2198c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21990:	e5d3308e 	ldrb	r3, [r3, #142]	; 0x8e
   21994:	e2433001 	sub	r3, r3, #1
   21998:	e6ef2073 	uxtb	r2, r3
   2199c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   219a0:	e5c3208e 	strb	r2, [r3, #142]	; 0x8e
   219a4:	e3a03000 	mov	r3, #0
   219a8:	ea0000ab 	b	21c5c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x34c>
   219ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   219b0:	e3530000 	cmp	r3, #0
   219b4:	1a000001 	bne	219c0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
   219b8:	e3e03002 	mvn	r3, #2
   219bc:	ea0000a6 	b	21c5c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x34c>
   219c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   219c4:	e3530001 	cmp	r3, #1
   219c8:	1a00007a 	bne	21bb8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x2a8>
   219cc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   219d0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   219d4:	e1a03283 	lsl	r3, r3, #5
   219d8:	e0823003 	add	r3, r2, r3
   219dc:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
   219e0:	e2233001 	eor	r3, r3, #1
   219e4:	e6ef3073 	uxtb	r3, r3
   219e8:	e3530000 	cmp	r3, #0
   219ec:	0a000005 	beq	21a08 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xf8>
   219f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   219f4:	e5d3308e 	ldrb	r3, [r3, #142]	; 0x8e
   219f8:	e2833001 	add	r3, r3, #1
   219fc:	e6ef2073 	uxtb	r2, r3
   21a00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21a04:	e5c3208e 	strb	r2, [r3, #142]	; 0x8e
   21a08:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   21a0c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   21a10:	e1a03283 	lsl	r3, r3, #5
   21a14:	e0823003 	add	r3, r2, r3
   21a18:	e3a02001 	mov	r2, #1
   21a1c:	e5c32098 	strb	r2, [r3, #152]	; 0x98
   21a20:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
   21a24:	e203300f 	and	r3, r3, #15
   21a28:	e6ef1073 	uxtb	r1, r3
   21a2c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   21a30:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   21a34:	e1a03283 	lsl	r3, r3, #5
   21a38:	e0823003 	add	r3, r2, r3
   21a3c:	e1a02001 	mov	r2, r1
   21a40:	e5c32096 	strb	r2, [r3, #150]	; 0x96
   21a44:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
   21a48:	e6ff3073 	uxth	r3, r3
   21a4c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   21a50:	e1a01003 	mov	r1, r3
   21a54:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   21a58:	ebffff66 	bl	217f8 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
   21a5c:	e1a03000 	mov	r3, r0
   21a60:	e1a01003 	mov	r1, r3
   21a64:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   21a68:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   21a6c:	e1a03283 	lsl	r3, r3, #5
   21a70:	e0823003 	add	r3, r2, r3
   21a74:	e2833094 	add	r3, r3, #148	; 0x94
   21a78:	e1c310b0 	strh	r1, [r3]
   21a7c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   21a80:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   21a84:	e2833011 	add	r3, r3, #17
   21a88:	e1a03203 	lsl	r3, r3, #4
   21a8c:	e0823003 	add	r3, r2, r3
   21a90:	e5d33008 	ldrb	r3, [r3, #8]
   21a94:	e3530000 	cmp	r3, #0
   21a98:	0a00000c 	beq	21ad0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x1c0>
   21a9c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   21aa0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   21aa4:	e2833011 	add	r3, r3, #17
   21aa8:	e1a03203 	lsl	r3, r3, #4
   21aac:	e0823003 	add	r3, r2, r3
   21ab0:	e3a02000 	mov	r2, #0
   21ab4:	e5c32008 	strb	r2, [r3, #8]
   21ab8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21abc:	e5d3308f 	ldrb	r3, [r3, #143]	; 0x8f
   21ac0:	e2433001 	sub	r3, r3, #1
   21ac4:	e6ef2073 	uxtb	r2, r3
   21ac8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21acc:	e5c3208f 	strb	r2, [r3, #143]	; 0x8f
   21ad0:	e3a03000 	mov	r3, #0
   21ad4:	e50b3008 	str	r3, [fp, #-8]
   21ad8:	e51b3008 	ldr	r3, [fp, #-8]
   21adc:	e3530000 	cmp	r3, #0
   21ae0:	1a000034 	bne	21bb8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x2a8>
   21ae4:	e51b3008 	ldr	r3, [fp, #-8]
   21ae8:	e1a03103 	lsl	r3, r3, #2
   21aec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   21af0:	e3a03000 	mov	r3, #0
   21af4:	e54b3009 	strb	r3, [fp, #-9]
   21af8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21afc:	e50b3010 	str	r3, [fp, #-16]
   21b00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21b04:	e2833004 	add	r3, r3, #4
   21b08:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   21b0c:	e24b301c 	sub	r3, fp, #28
   21b10:	e59f1150 	ldr	r1, [pc, #336]	; 21c68 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x358>
   21b14:	e1a00003 	mov	r0, r3
   21b18:	ebffc629 	bl	133c4 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>
   21b1c:	e1a03000 	mov	r3, r0
   21b20:	e5933000 	ldr	r3, [r3]
   21b24:	e51b2010 	ldr	r2, [fp, #-16]
   21b28:	e1520003 	cmp	r2, r3
   21b2c:	33a03001 	movcc	r3, #1
   21b30:	23a03000 	movcs	r3, #0
   21b34:	e6ef3073 	uxtb	r3, r3
   21b38:	e3530000 	cmp	r3, #0
   21b3c:	0a000019 	beq	21ba8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x298>
   21b40:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   21b44:	e51b3010 	ldr	r3, [fp, #-16]
   21b48:	e1a03283 	lsl	r3, r3, #5
   21b4c:	e0823003 	add	r3, r2, r3
   21b50:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
   21b54:	e3530000 	cmp	r3, #0
   21b58:	0a000008 	beq	21b80 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x270>
   21b5c:	e55b2009 	ldrb	r2, [fp, #-9]
   21b60:	e2823001 	add	r3, r2, #1
   21b64:	e54b3009 	strb	r3, [fp, #-9]
   21b68:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   21b6c:	e51b3010 	ldr	r3, [fp, #-16]
   21b70:	e1a03283 	lsl	r3, r3, #5
   21b74:	e0813003 	add	r3, r1, r3
   21b78:	e5c32097 	strb	r2, [r3, #151]	; 0x97
   21b7c:	ea000005 	b	21b98 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x288>
   21b80:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   21b84:	e51b3010 	ldr	r3, [fp, #-16]
   21b88:	e1a03283 	lsl	r3, r3, #5
   21b8c:	e0823003 	add	r3, r2, r3
   21b90:	e3e02000 	mvn	r2, #0
   21b94:	e5c32097 	strb	r2, [r3, #151]	; 0x97
   21b98:	e51b3010 	ldr	r3, [fp, #-16]
   21b9c:	e2833001 	add	r3, r3, #1
   21ba0:	e50b3010 	str	r3, [fp, #-16]
   21ba4:	eaffffd5 	b	21b00 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x1f0>
   21ba8:	e51b3008 	ldr	r3, [fp, #-8]
   21bac:	e2833001 	add	r3, r3, #1
   21bb0:	e50b3008 	str	r3, [fp, #-8]
   21bb4:	eaffffc7 	b	21ad8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x1c8>
   21bb8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21bbc:	e5933a60 	ldr	r3, [r3, #2656]	; 0xa60
   21bc0:	e3530000 	cmp	r3, #0
   21bc4:	0a00000d 	beq	21c00 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x2f0>
   21bc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21bcc:	e5d33085 	ldrb	r3, [r3, #133]	; 0x85
   21bd0:	e3530002 	cmp	r3, #2
   21bd4:	0a000009 	beq	21c00 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x2f0>
   21bd8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21bdc:	e5930a60 	ldr	r0, [r3, #2656]	; 0xa60
   21be0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21be4:	e5933a60 	ldr	r3, [r3, #2656]	; 0xa60
   21be8:	e5933000 	ldr	r3, [r3]
   21bec:	e2833008 	add	r3, r3, #8
   21bf0:	e5933000 	ldr	r3, [r3]
   21bf4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   21bf8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   21bfc:	e12fff33 	blx	r3
   21c00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21c04:	e5d33085 	ldrb	r3, [r3, #133]	; 0x85
   21c08:	e3530002 	cmp	r3, #2
   21c0c:	1a000011 	bne	21c58 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x348>
   21c10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21c14:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   21c18:	e3530000 	cmp	r3, #0
   21c1c:	0a000009 	beq	21c48 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x338>
   21c20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21c24:	e5930a64 	ldr	r0, [r3, #2660]	; 0xa64
   21c28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21c2c:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   21c30:	e5933000 	ldr	r3, [r3]
   21c34:	e2833014 	add	r3, r3, #20
   21c38:	e5933000 	ldr	r3, [r3]
   21c3c:	e55b2029 	ldrb	r2, [fp, #-41]	; 0xffffffd7
   21c40:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   21c44:	e12fff33 	blx	r3
   21c48:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
   21c4c:	e1a01003 	mov	r1, r3
   21c50:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
   21c54:	ebffc63d 	bl	13550 <artnet::display_universe_switch(unsigned int, unsigned char)>
   21c58:	e3a03000 	mov	r3, #0
   21c5c:	e1a00003 	mov	r0, r3
   21c60:	e24bd004 	sub	sp, fp, #4
   21c64:	e8bd8800 	pop	{fp, pc}
   21c68:	00046a4c 	.word	0x00046a4c

00021c6c <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
   21c6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   21c70:	e28db000 	add	fp, sp, #0
   21c74:	e24dd014 	sub	sp, sp, #20
   21c78:	e50b0008 	str	r0, [fp, #-8]
   21c7c:	e50b100c 	str	r1, [fp, #-12]
   21c80:	e50b2010 	str	r2, [fp, #-16]
   21c84:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   21c88:	e51b300c 	ldr	r3, [fp, #-12]
   21c8c:	e3530003 	cmp	r3, #3
   21c90:	9a000001 	bls	21c9c <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x30>
   21c94:	e3a03000 	mov	r3, #0
   21c98:	ea000015 	b	21cf4 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x88>
   21c9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   21ca0:	e3530000 	cmp	r3, #0
   21ca4:	1a000001 	bne	21cb0 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x44>
   21ca8:	e3a03000 	mov	r3, #0
   21cac:	ea000010 	b	21cf4 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x88>
   21cb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   21cb4:	e3530002 	cmp	r3, #2
   21cb8:	1a000001 	bne	21cc4 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x58>
   21cbc:	e3a03000 	mov	r3, #0
   21cc0:	ea00000b 	b	21cf4 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x88>
   21cc4:	e51b2008 	ldr	r2, [fp, #-8]
   21cc8:	e51b300c 	ldr	r3, [fp, #-12]
   21ccc:	e1a03283 	lsl	r3, r3, #5
   21cd0:	e0823003 	add	r3, r2, r3
   21cd4:	e5d32096 	ldrb	r2, [r3, #150]	; 0x96
   21cd8:	e51b3010 	ldr	r3, [fp, #-16]
   21cdc:	e5c32000 	strb	r2, [r3]
   21ce0:	e51b2008 	ldr	r2, [fp, #-8]
   21ce4:	e51b300c 	ldr	r3, [fp, #-12]
   21ce8:	e1a03283 	lsl	r3, r3, #5
   21cec:	e0823003 	add	r3, r2, r3
   21cf0:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
   21cf4:	e1a00003 	mov	r0, r3
   21cf8:	e28bd000 	add	sp, fp, #0
   21cfc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   21d00:	e12fff1e 	bx	lr

00021d04 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
   21d04:	e92d4800 	push	{fp, lr}
   21d08:	e28db004 	add	fp, sp, #4
   21d0c:	e24dd020 	sub	sp, sp, #32
   21d10:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   21d14:	e1a03001 	mov	r3, r1
   21d18:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   21d1c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   21d20:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   21d24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21d28:	e0823003 	add	r3, r2, r3
   21d2c:	e2833013 	add	r3, r3, #19
   21d30:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
   21d34:	e5c32000 	strb	r2, [r3]
   21d38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21d3c:	e1a03103 	lsl	r3, r3, #2
   21d40:	e50b300c 	str	r3, [fp, #-12]
   21d44:	e51b300c 	ldr	r3, [fp, #-12]
   21d48:	e2833004 	add	r3, r3, #4
   21d4c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   21d50:	e24b3014 	sub	r3, fp, #20
   21d54:	e1a01003 	mov	r1, r3
   21d58:	e59f00d0 	ldr	r0, [pc, #208]	; 21e30 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x12c>
   21d5c:	ebffc598 	bl	133c4 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>
   21d60:	e1a03000 	mov	r3, r0
   21d64:	e5933000 	ldr	r3, [r3]
   21d68:	e50b3010 	str	r3, [fp, #-16]
   21d6c:	e51b300c 	ldr	r3, [fp, #-12]
   21d70:	e50b3008 	str	r3, [fp, #-8]
   21d74:	e51b2008 	ldr	r2, [fp, #-8]
   21d78:	e51b3010 	ldr	r3, [fp, #-16]
   21d7c:	e1520003 	cmp	r2, r3
   21d80:	2a000015 	bcs	21ddc <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0xd8>
   21d84:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   21d88:	e51b3008 	ldr	r3, [fp, #-8]
   21d8c:	e1a03283 	lsl	r3, r3, #5
   21d90:	e0823003 	add	r3, r2, r3
   21d94:	e2833094 	add	r3, r3, #148	; 0x94
   21d98:	e1d330b0 	ldrh	r3, [r3]
   21d9c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   21da0:	e1a01003 	mov	r1, r3
   21da4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21da8:	ebfffe92 	bl	217f8 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
   21dac:	e1a03000 	mov	r3, r0
   21db0:	e1a01003 	mov	r1, r3
   21db4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   21db8:	e51b3008 	ldr	r3, [fp, #-8]
   21dbc:	e1a03283 	lsl	r3, r3, #5
   21dc0:	e0823003 	add	r3, r2, r3
   21dc4:	e2833094 	add	r3, r3, #148	; 0x94
   21dc8:	e1c310b0 	strh	r1, [r3]
   21dcc:	e51b3008 	ldr	r3, [fp, #-8]
   21dd0:	e2833001 	add	r3, r3, #1
   21dd4:	e50b3008 	str	r3, [fp, #-8]
   21dd8:	eaffffe5 	b	21d74 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x70>
   21ddc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21de0:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   21de4:	e3530000 	cmp	r3, #0
   21de8:	0a00000d 	beq	21e24 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x120>
   21dec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21df0:	e5d33085 	ldrb	r3, [r3, #133]	; 0x85
   21df4:	e3530002 	cmp	r3, #2
   21df8:	1a000009 	bne	21e24 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x120>
   21dfc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21e00:	e5930a64 	ldr	r0, [r3, #2660]	; 0xa64
   21e04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21e08:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   21e0c:	e5933000 	ldr	r3, [r3]
   21e10:	e283301c 	add	r3, r3, #28
   21e14:	e5933000 	ldr	r3, [r3]
   21e18:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
   21e1c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   21e20:	e12fff33 	blx	r3
   21e24:	e1a00000 	nop			; (mov r0, r0)
   21e28:	e24bd004 	sub	sp, fp, #4
   21e2c:	e8bd8800 	pop	{fp, pc}
   21e30:	00046a4c 	.word	0x00046a4c

00021e34 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
   21e34:	e92d4800 	push	{fp, lr}
   21e38:	e28db004 	add	fp, sp, #4
   21e3c:	e24dd020 	sub	sp, sp, #32
   21e40:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   21e44:	e1a03001 	mov	r3, r1
   21e48:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   21e4c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   21e50:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   21e54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21e58:	e0823003 	add	r3, r2, r3
   21e5c:	e2833012 	add	r3, r3, #18
   21e60:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
   21e64:	e5c32000 	strb	r2, [r3]
   21e68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   21e6c:	e1a03103 	lsl	r3, r3, #2
   21e70:	e50b300c 	str	r3, [fp, #-12]
   21e74:	e51b300c 	ldr	r3, [fp, #-12]
   21e78:	e2833004 	add	r3, r3, #4
   21e7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   21e80:	e24b3014 	sub	r3, fp, #20
   21e84:	e1a01003 	mov	r1, r3
   21e88:	e59f00d0 	ldr	r0, [pc, #208]	; 21f60 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x12c>
   21e8c:	ebffc54c 	bl	133c4 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>
   21e90:	e1a03000 	mov	r3, r0
   21e94:	e5933000 	ldr	r3, [r3]
   21e98:	e50b3010 	str	r3, [fp, #-16]
   21e9c:	e51b300c 	ldr	r3, [fp, #-12]
   21ea0:	e50b3008 	str	r3, [fp, #-8]
   21ea4:	e51b2008 	ldr	r2, [fp, #-8]
   21ea8:	e51b3010 	ldr	r3, [fp, #-16]
   21eac:	e1520003 	cmp	r2, r3
   21eb0:	2a000015 	bcs	21f0c <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0xd8>
   21eb4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   21eb8:	e51b3008 	ldr	r3, [fp, #-8]
   21ebc:	e1a03283 	lsl	r3, r3, #5
   21ec0:	e0823003 	add	r3, r2, r3
   21ec4:	e2833094 	add	r3, r3, #148	; 0x94
   21ec8:	e1d330b0 	ldrh	r3, [r3]
   21ecc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   21ed0:	e1a01003 	mov	r1, r3
   21ed4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21ed8:	ebfffe46 	bl	217f8 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
   21edc:	e1a03000 	mov	r3, r0
   21ee0:	e1a01003 	mov	r1, r3
   21ee4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   21ee8:	e51b3008 	ldr	r3, [fp, #-8]
   21eec:	e1a03283 	lsl	r3, r3, #5
   21ef0:	e0823003 	add	r3, r2, r3
   21ef4:	e2833094 	add	r3, r3, #148	; 0x94
   21ef8:	e1c310b0 	strh	r1, [r3]
   21efc:	e51b3008 	ldr	r3, [fp, #-8]
   21f00:	e2833001 	add	r3, r3, #1
   21f04:	e50b3008 	str	r3, [fp, #-8]
   21f08:	eaffffe5 	b	21ea4 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x70>
   21f0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21f10:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   21f14:	e3530000 	cmp	r3, #0
   21f18:	0a00000d 	beq	21f54 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x120>
   21f1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21f20:	e5d33085 	ldrb	r3, [r3, #133]	; 0x85
   21f24:	e3530002 	cmp	r3, #2
   21f28:	1a000009 	bne	21f54 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x120>
   21f2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21f30:	e5930a64 	ldr	r0, [r3, #2660]	; 0xa64
   21f34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21f38:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   21f3c:	e5933000 	ldr	r3, [r3]
   21f40:	e2833018 	add	r3, r3, #24
   21f44:	e5933000 	ldr	r3, [r3]
   21f48:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
   21f4c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   21f50:	e12fff33 	blx	r3
   21f54:	e1a00000 	nop			; (mov r0, r0)
   21f58:	e24bd004 	sub	sp, fp, #4
   21f5c:	e8bd8800 	pop	{fp, pc}
   21f60:	00046a4c 	.word	0x00046a4c

00021f64 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
   21f64:	e92d4800 	push	{fp, lr}
   21f68:	e28db004 	add	fp, sp, #4
   21f6c:	e24dd010 	sub	sp, sp, #16
   21f70:	e50b0008 	str	r0, [fp, #-8]
   21f74:	e50b100c 	str	r1, [fp, #-12]
   21f78:	e50b2010 	str	r2, [fp, #-16]
   21f7c:	e51b300c 	ldr	r3, [fp, #-12]
   21f80:	e3530003 	cmp	r3, #3
   21f84:	8a000039 	bhi	22070 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x10c>
   21f88:	e51b2008 	ldr	r2, [fp, #-8]
   21f8c:	e51b300c 	ldr	r3, [fp, #-12]
   21f90:	e1a03283 	lsl	r3, r3, #5
   21f94:	e0823003 	add	r3, r2, r3
   21f98:	e51b2010 	ldr	r2, [fp, #-16]
   21f9c:	e58320ac 	str	r2, [r3, #172]	; 0xac
   21fa0:	e51b3010 	ldr	r3, [fp, #-16]
   21fa4:	e3530001 	cmp	r3, #1
   21fa8:	1a00000d 	bne	21fe4 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x80>
   21fac:	e51b2008 	ldr	r2, [fp, #-8]
   21fb0:	e51b300c 	ldr	r3, [fp, #-12]
   21fb4:	e1a03283 	lsl	r3, r3, #5
   21fb8:	e0823003 	add	r3, r2, r3
   21fbc:	e5d330b2 	ldrb	r3, [r3, #178]	; 0xb2
   21fc0:	e3833001 	orr	r3, r3, #1
   21fc4:	e6ef1073 	uxtb	r1, r3
   21fc8:	e51b2008 	ldr	r2, [fp, #-8]
   21fcc:	e51b300c 	ldr	r3, [fp, #-12]
   21fd0:	e1a03283 	lsl	r3, r3, #5
   21fd4:	e0823003 	add	r3, r2, r3
   21fd8:	e1a02001 	mov	r2, r1
   21fdc:	e5c320b2 	strb	r2, [r3, #178]	; 0xb2
   21fe0:	ea00000c 	b	22018 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0xb4>
   21fe4:	e51b2008 	ldr	r2, [fp, #-8]
   21fe8:	e51b300c 	ldr	r3, [fp, #-12]
   21fec:	e1a03283 	lsl	r3, r3, #5
   21ff0:	e0823003 	add	r3, r2, r3
   21ff4:	e5d330b2 	ldrb	r3, [r3, #178]	; 0xb2
   21ff8:	e3c33001 	bic	r3, r3, #1
   21ffc:	e6ef1073 	uxtb	r1, r3
   22000:	e51b2008 	ldr	r2, [fp, #-8]
   22004:	e51b300c 	ldr	r3, [fp, #-12]
   22008:	e1a03283 	lsl	r3, r3, #5
   2200c:	e0823003 	add	r3, r2, r3
   22010:	e1a02001 	mov	r2, r1
   22014:	e5c320b2 	strb	r2, [r3, #178]	; 0xb2
   22018:	e51b3008 	ldr	r3, [fp, #-8]
   2201c:	e5d33085 	ldrb	r3, [r3, #133]	; 0x85
   22020:	e3530002 	cmp	r3, #2
   22024:	1a000012 	bne	22074 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x110>
   22028:	e51b3008 	ldr	r3, [fp, #-8]
   2202c:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   22030:	e3530000 	cmp	r3, #0
   22034:	0a000009 	beq	22060 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0xfc>
   22038:	e51b3008 	ldr	r3, [fp, #-8]
   2203c:	e5930a64 	ldr	r0, [r3, #2660]	; 0xa64
   22040:	e51b3008 	ldr	r3, [fp, #-8]
   22044:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   22048:	e5933000 	ldr	r3, [r3]
   2204c:	e2833028 	add	r3, r3, #40	; 0x28
   22050:	e5933000 	ldr	r3, [r3]
   22054:	e51b2010 	ldr	r2, [fp, #-16]
   22058:	e51b100c 	ldr	r1, [fp, #-12]
   2205c:	e12fff33 	blx	r3
   22060:	e51b1010 	ldr	r1, [fp, #-16]
   22064:	e51b000c 	ldr	r0, [fp, #-12]
   22068:	ebffc591 	bl	136b4 <artnet::display_port_protocol(unsigned int, artnet::PortProtocol)>
   2206c:	ea000000 	b	22074 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x110>
   22070:	e1a00000 	nop			; (mov r0, r0)
   22074:	e24bd004 	sub	sp, fp, #4
   22078:	e8bd8800 	pop	{fp, pc}

0002207c <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
   2207c:	e92d4800 	push	{fp, lr}
   22080:	e28db004 	add	fp, sp, #4
   22084:	e24dd010 	sub	sp, sp, #16
   22088:	e50b0008 	str	r0, [fp, #-8]
   2208c:	e50b100c 	str	r1, [fp, #-12]
   22090:	e50b2010 	str	r2, [fp, #-16]
   22094:	e51b300c 	ldr	r3, [fp, #-12]
   22098:	e3530003 	cmp	r3, #3
   2209c:	8a000033 	bhi	22170 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0xf4>
   220a0:	e51b3010 	ldr	r3, [fp, #-16]
   220a4:	e3530001 	cmp	r3, #1
   220a8:	1a00000d 	bne	220e4 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x68>
   220ac:	e51b2008 	ldr	r2, [fp, #-8]
   220b0:	e51b300c 	ldr	r3, [fp, #-12]
   220b4:	e1a03283 	lsl	r3, r3, #5
   220b8:	e0823003 	add	r3, r2, r3
   220bc:	e5d330b2 	ldrb	r3, [r3, #178]	; 0xb2
   220c0:	e3833002 	orr	r3, r3, #2
   220c4:	e6ef1073 	uxtb	r1, r3
   220c8:	e51b2008 	ldr	r2, [fp, #-8]
   220cc:	e51b300c 	ldr	r3, [fp, #-12]
   220d0:	e1a03283 	lsl	r3, r3, #5
   220d4:	e0823003 	add	r3, r2, r3
   220d8:	e1a02001 	mov	r2, r1
   220dc:	e5c320b2 	strb	r2, [r3, #178]	; 0xb2
   220e0:	ea00000c 	b	22118 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x9c>
   220e4:	e51b2008 	ldr	r2, [fp, #-8]
   220e8:	e51b300c 	ldr	r3, [fp, #-12]
   220ec:	e1a03283 	lsl	r3, r3, #5
   220f0:	e0823003 	add	r3, r2, r3
   220f4:	e5d330b2 	ldrb	r3, [r3, #178]	; 0xb2
   220f8:	e3c33002 	bic	r3, r3, #2
   220fc:	e6ef1073 	uxtb	r1, r3
   22100:	e51b2008 	ldr	r2, [fp, #-8]
   22104:	e51b300c 	ldr	r3, [fp, #-12]
   22108:	e1a03283 	lsl	r3, r3, #5
   2210c:	e0823003 	add	r3, r2, r3
   22110:	e1a02001 	mov	r2, r1
   22114:	e5c320b2 	strb	r2, [r3, #178]	; 0xb2
   22118:	e51b3008 	ldr	r3, [fp, #-8]
   2211c:	e5d33085 	ldrb	r3, [r3, #133]	; 0x85
   22120:	e3530002 	cmp	r3, #2
   22124:	1a000012 	bne	22174 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0xf8>
   22128:	e51b3008 	ldr	r3, [fp, #-8]
   2212c:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   22130:	e3530000 	cmp	r3, #0
   22134:	0a000009 	beq	22160 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0xe4>
   22138:	e51b3008 	ldr	r3, [fp, #-8]
   2213c:	e5930a64 	ldr	r0, [r3, #2660]	; 0xa64
   22140:	e51b3008 	ldr	r3, [fp, #-8]
   22144:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   22148:	e5933000 	ldr	r3, [r3]
   2214c:	e2833024 	add	r3, r3, #36	; 0x24
   22150:	e5933000 	ldr	r3, [r3]
   22154:	e51b2010 	ldr	r2, [fp, #-16]
   22158:	e51b100c 	ldr	r1, [fp, #-12]
   2215c:	e12fff33 	blx	r3
   22160:	e51b1010 	ldr	r1, [fp, #-16]
   22164:	e51b000c 	ldr	r0, [fp, #-12]
   22168:	ebffc53b 	bl	1365c <artnet::display_merge_mode(unsigned int, lightset::MergeMode)>
   2216c:	ea000000 	b	22174 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0xf8>
   22170:	e1a00000 	nop			; (mov r0, r0)
   22174:	e24bd004 	sub	sp, fp, #4
   22178:	e8bd8800 	pop	{fp, pc}

0002217c <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>:
   2217c:	e92d4800 	push	{fp, lr}
   22180:	e28db004 	add	fp, sp, #4
   22184:	e24dd010 	sub	sp, sp, #16
   22188:	e50b0010 	str	r0, [fp, #-16]
   2218c:	e1a03001 	mov	r3, r1
   22190:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   22194:	e51b3010 	ldr	r3, [fp, #-16]
   22198:	e5d33069 	ldrb	r3, [r3, #105]	; 0x69
   2219c:	e203303f 	and	r3, r3, #63	; 0x3f
   221a0:	e6ef2073 	uxtb	r2, r3
   221a4:	e51b3010 	ldr	r3, [fp, #-16]
   221a8:	e5c32069 	strb	r2, [r3, #105]	; 0x69
   221ac:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   221b0:	e2433008 	sub	r3, r3, #8
   221b4:	e3530004 	cmp	r3, #4
   221b8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   221bc:	ea000031 	b	22288 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x10c>
   221c0:	000221d4 	.word	0x000221d4
   221c4:	000221e8 	.word	0x000221e8
   221c8:	00022204 	.word	0x00022204
   221cc:	00022288 	.word	0x00022288
   221d0:	00022288 	.word	0x00022288
   221d4:	e51b3010 	ldr	r3, [fp, #-16]
   221d8:	e5d32069 	ldrb	r2, [r3, #105]	; 0x69
   221dc:	e51b3010 	ldr	r3, [fp, #-16]
   221e0:	e5c32069 	strb	r2, [r3, #105]	; 0x69
   221e4:	ea00000e 	b	22224 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0xa8>
   221e8:	e51b3010 	ldr	r3, [fp, #-16]
   221ec:	e5d33069 	ldrb	r3, [r3, #105]	; 0x69
   221f0:	e3833040 	orr	r3, r3, #64	; 0x40
   221f4:	e6ef2073 	uxtb	r2, r3
   221f8:	e51b3010 	ldr	r3, [fp, #-16]
   221fc:	e5c32069 	strb	r2, [r3, #105]	; 0x69
   22200:	ea000007 	b	22224 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0xa8>
   22204:	e51b3010 	ldr	r3, [fp, #-16]
   22208:	e5d33069 	ldrb	r3, [r3, #105]	; 0x69
   2220c:	e1e03c83 	mvn	r3, r3, lsl #25
   22210:	e1e03ca3 	mvn	r3, r3, lsr #25
   22214:	e6ef2073 	uxtb	r2, r3
   22218:	e51b3010 	ldr	r3, [fp, #-16]
   2221c:	e5c32069 	strb	r2, [r3, #105]	; 0x69
   22220:	e1a00000 	nop			; (mov r0, r0)
   22224:	e51b3010 	ldr	r3, [fp, #-16]
   22228:	e5d33085 	ldrb	r3, [r3, #133]	; 0x85
   2222c:	e3530002 	cmp	r3, #2
   22230:	1a000015 	bne	2228c <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x110>
   22234:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   22238:	e2033003 	and	r3, r3, #3
   2223c:	e54b3005 	strb	r3, [fp, #-5]
   22240:	e51b3010 	ldr	r3, [fp, #-16]
   22244:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   22248:	e3530000 	cmp	r3, #0
   2224c:	0a000009 	beq	22278 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0xfc>
   22250:	e51b3010 	ldr	r3, [fp, #-16]
   22254:	e5932a64 	ldr	r2, [r3, #2660]	; 0xa64
   22258:	e51b3010 	ldr	r3, [fp, #-16]
   2225c:	e5933a64 	ldr	r3, [r3, #2660]	; 0xa64
   22260:	e5933000 	ldr	r3, [r3]
   22264:	e2833008 	add	r3, r3, #8
   22268:	e5933000 	ldr	r3, [r3]
   2226c:	e55b1005 	ldrb	r1, [fp, #-5]
   22270:	e1a00002 	mov	r0, r2
   22274:	e12fff33 	blx	r3
   22278:	e55b3005 	ldrb	r3, [fp, #-5]
   2227c:	e1a00003 	mov	r0, r3
   22280:	ebffc538 	bl	13768 <artnet::display_failsafe(unsigned char)>
   22284:	ea000000 	b	2228c <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x110>
   22288:	e1a00000 	nop			; (mov r0, r0)
   2228c:	e24bd004 	sub	sp, fp, #4
   22290:	e8bd8800 	pop	{fp, pc}

00022294 <ArtNetNode::GetPortIndexInput(unsigned int, unsigned int, unsigned int&)>:
   22294:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   22298:	e28db000 	add	fp, sp, #0
   2229c:	e24dd01c 	sub	sp, sp, #28
   222a0:	e50b0010 	str	r0, [fp, #-16]
   222a4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   222a8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   222ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   222b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   222b4:	e1a03103 	lsl	r3, r3, #2
   222b8:	e50b3008 	str	r3, [fp, #-8]
   222bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   222c0:	e51b2008 	ldr	r2, [fp, #-8]
   222c4:	e5832000 	str	r2, [r3]
   222c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   222cc:	e5932000 	ldr	r2, [r3]
   222d0:	e51b3008 	ldr	r3, [fp, #-8]
   222d4:	e2833004 	add	r3, r3, #4
   222d8:	e1520003 	cmp	r2, r3
   222dc:	2a000012 	bcs	2232c <ArtNetNode::GetPortIndexInput(unsigned int, unsigned int, unsigned int&)+0x98>
   222e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   222e4:	e5933000 	ldr	r3, [r3]
   222e8:	e51b2010 	ldr	r2, [fp, #-16]
   222ec:	e2833011 	add	r3, r3, #17
   222f0:	e1a03203 	lsl	r3, r3, #4
   222f4:	e0823003 	add	r3, r2, r3
   222f8:	e5d33007 	ldrb	r3, [r3, #7]
   222fc:	e1a02003 	mov	r2, r3
   22300:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22304:	e1530002 	cmp	r3, r2
   22308:	1a000001 	bne	22314 <ArtNetNode::GetPortIndexInput(unsigned int, unsigned int, unsigned int&)+0x80>
   2230c:	e3a03001 	mov	r3, #1
   22310:	ea000006 	b	22330 <ArtNetNode::GetPortIndexInput(unsigned int, unsigned int, unsigned int&)+0x9c>
   22314:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22318:	e5933000 	ldr	r3, [r3]
   2231c:	e2832001 	add	r2, r3, #1
   22320:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22324:	e5832000 	str	r2, [r3]
   22328:	eaffffe6 	b	222c8 <ArtNetNode::GetPortIndexInput(unsigned int, unsigned int, unsigned int&)+0x34>
   2232c:	e3a03000 	mov	r3, #0
   22330:	e1a00003 	mov	r0, r3
   22334:	e28bd000 	add	sp, fp, #0
   22338:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2233c:	e12fff1e 	bx	lr

00022340 <ArtNetNode::GetPortIndexOutput(unsigned int, unsigned int, unsigned int&)>:
   22340:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   22344:	e28db000 	add	fp, sp, #0
   22348:	e24dd01c 	sub	sp, sp, #28
   2234c:	e50b0010 	str	r0, [fp, #-16]
   22350:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   22354:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   22358:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   2235c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22360:	e1a03103 	lsl	r3, r3, #2
   22364:	e50b3008 	str	r3, [fp, #-8]
   22368:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2236c:	e51b2008 	ldr	r2, [fp, #-8]
   22370:	e5832000 	str	r2, [r3]
   22374:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22378:	e5932000 	ldr	r2, [r3]
   2237c:	e51b3008 	ldr	r3, [fp, #-8]
   22380:	e2833004 	add	r3, r3, #4
   22384:	e1520003 	cmp	r2, r3
   22388:	2a000011 	bcs	223d4 <ArtNetNode::GetPortIndexOutput(unsigned int, unsigned int, unsigned int&)+0x94>
   2238c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   22390:	e5933000 	ldr	r3, [r3]
   22394:	e51b2010 	ldr	r2, [fp, #-16]
   22398:	e1a03283 	lsl	r3, r3, #5
   2239c:	e0823003 	add	r3, r2, r3
   223a0:	e5d33097 	ldrb	r3, [r3, #151]	; 0x97
   223a4:	e1a02003 	mov	r2, r3
   223a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   223ac:	e1530002 	cmp	r3, r2
   223b0:	1a000001 	bne	223bc <ArtNetNode::GetPortIndexOutput(unsigned int, unsigned int, unsigned int&)+0x7c>
   223b4:	e3a03001 	mov	r3, #1
   223b8:	ea000006 	b	223d8 <ArtNetNode::GetPortIndexOutput(unsigned int, unsigned int, unsigned int&)+0x98>
   223bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   223c0:	e5933000 	ldr	r3, [r3]
   223c4:	e2832001 	add	r2, r3, #1
   223c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   223cc:	e5832000 	str	r2, [r3]
   223d0:	eaffffe7 	b	22374 <ArtNetNode::GetPortIndexOutput(unsigned int, unsigned int, unsigned int&)+0x34>
   223d4:	e3a03000 	mov	r3, #0
   223d8:	e1a00003 	mov	r0, r3
   223dc:	e28bd000 	add	sp, fp, #0
   223e0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   223e4:	e12fff1e 	bx	lr

000223e8 <ArtNetNode::HandleAddress()>:
   223e8:	e92d4800 	push	{fp, lr}
   223ec:	e28db004 	add	fp, sp, #4
   223f0:	e24dd030 	sub	sp, sp, #48	; 0x30
   223f4:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   223f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   223fc:	e2833f55 	add	r3, r3, #340	; 0x154
   22400:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   22404:	e3e03000 	mvn	r3, #0
   22408:	e54b3005 	strb	r3, [fp, #-5]
   2240c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   22410:	e3a02001 	mov	r2, #1
   22414:	e5c32084 	strb	r2, [r3, #132]	; 0x84
   22418:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2241c:	e5d3300e 	ldrb	r3, [r3, #14]
   22420:	e3530000 	cmp	r3, #0
   22424:	0a000007 	beq	22448 <ArtNetNode::HandleAddress()+0x60>
   22428:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2242c:	e283300e 	add	r3, r3, #14
   22430:	e1a01003 	mov	r1, r3
   22434:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   22438:	ebfff4d2 	bl	1f788 <ArtNetNode::SetShortName(char const*)>
   2243c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   22440:	e3a02006 	mov	r2, #6
   22444:	e5c32084 	strb	r2, [r3, #132]	; 0x84
   22448:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2244c:	e5d33020 	ldrb	r3, [r3, #32]
   22450:	e3530000 	cmp	r3, #0
   22454:	0a000007 	beq	22478 <ArtNetNode::HandleAddress()+0x90>
   22458:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2245c:	e2833020 	add	r3, r3, #32
   22460:	e1a01003 	mov	r1, r3
   22464:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   22468:	ebfff520 	bl	1f8f0 <ArtNetNode::SetLongName(char const*)>
   2246c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   22470:	e3a02007 	mov	r2, #7
   22474:	e5c32084 	strb	r2, [r3, #132]	; 0x84
   22478:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2247c:	e5d3300d 	ldrb	r3, [r3, #13]
   22480:	e3530000 	cmp	r3, #0
   22484:	0a000003 	beq	22498 <ArtNetNode::HandleAddress()+0xb0>
   22488:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2248c:	e5d3300d 	ldrb	r3, [r3, #13]
   22490:	e2433001 	sub	r3, r3, #1
   22494:	ea000000 	b	2249c <ArtNetNode::HandleAddress()+0xb4>
   22498:	e3a03000 	mov	r3, #0
   2249c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   224a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   224a4:	e5d33068 	ldrb	r3, [r3, #104]	; 0x68
   224a8:	e3530000 	cmp	r3, #0
   224ac:	1a000004 	bne	224c4 <ArtNetNode::HandleAddress()+0xdc>
   224b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   224b4:	e3a01000 	mov	r1, #0
   224b8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   224bc:	ebfffe10 	bl	21d04 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
   224c0:	ea00000c 	b	224f8 <ArtNetNode::HandleAddress()+0x110>
   224c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   224c8:	e5d33068 	ldrb	r3, [r3, #104]	; 0x68
   224cc:	e6af3073 	sxtb	r3, r3
   224d0:	e3530000 	cmp	r3, #0
   224d4:	aa000007 	bge	224f8 <ArtNetNode::HandleAddress()+0x110>
   224d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   224dc:	e5d33068 	ldrb	r3, [r3, #104]	; 0x68
   224e0:	e203307f 	and	r3, r3, #127	; 0x7f
   224e4:	e6ef3073 	uxtb	r3, r3
   224e8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   224ec:	e1a01003 	mov	r1, r3
   224f0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   224f4:	ebfffe02 	bl	21d04 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
   224f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   224fc:	e5d3300c 	ldrb	r3, [r3, #12]
   22500:	e3530000 	cmp	r3, #0
   22504:	1a000004 	bne	2251c <ArtNetNode::HandleAddress()+0x134>
   22508:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2250c:	e3a01000 	mov	r1, #0
   22510:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   22514:	ebfffe46 	bl	21e34 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
   22518:	ea00000c 	b	22550 <ArtNetNode::HandleAddress()+0x168>
   2251c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22520:	e5d3300c 	ldrb	r3, [r3, #12]
   22524:	e6af3073 	sxtb	r3, r3
   22528:	e3530000 	cmp	r3, #0
   2252c:	aa000007 	bge	22550 <ArtNetNode::HandleAddress()+0x168>
   22530:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22534:	e5d3300c 	ldrb	r3, [r3, #12]
   22538:	e203307f 	and	r3, r3, #127	; 0x7f
   2253c:	e6ef3073 	uxtb	r3, r3
   22540:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   22544:	e1a01003 	mov	r1, r3
   22548:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   2254c:	ebfffe38 	bl	21e34 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
   22550:	e3a03000 	mov	r3, #0
   22554:	e50b300c 	str	r3, [fp, #-12]
   22558:	e59f15f8 	ldr	r1, [pc, #1528]	; 22b58 <ArtNetNode::HandleAddress()+0x770>
   2255c:	e59f05f8 	ldr	r0, [pc, #1528]	; 22b5c <ArtNetNode::HandleAddress()+0x774>
   22560:	ebffc397 	bl	133c4 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>
   22564:	e1a03000 	mov	r3, r0
   22568:	e5933000 	ldr	r3, [r3]
   2256c:	e51b200c 	ldr	r2, [fp, #-12]
   22570:	e1520003 	cmp	r2, r3
   22574:	33a03001 	movcc	r3, #1
   22578:	23a03000 	movcs	r3, #0
   2257c:	e6ef3073 	uxtb	r3, r3
   22580:	e3530000 	cmp	r3, #0
   22584:	0a000061 	beq	22710 <ArtNetNode::HandleAddress()+0x328>
   22588:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2258c:	e51b300c 	ldr	r3, [fp, #-12]
   22590:	e0823003 	add	r3, r2, r3
   22594:	e2833064 	add	r3, r3, #100	; 0x64
   22598:	e5d33000 	ldrb	r3, [r3]
   2259c:	e353007f 	cmp	r3, #127	; 0x7f
   225a0:	0a000027 	beq	22644 <ArtNetNode::HandleAddress()+0x25c>
   225a4:	e24b3024 	sub	r3, fp, #36	; 0x24
   225a8:	e51b200c 	ldr	r2, [fp, #-12]
   225ac:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   225b0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   225b4:	ebffff61 	bl	22340 <ArtNetNode::GetPortIndexOutput(unsigned int, unsigned int, unsigned int&)>
   225b8:	e1a03000 	mov	r3, r0
   225bc:	e3530000 	cmp	r3, #0
   225c0:	0a00001f 	beq	22644 <ArtNetNode::HandleAddress()+0x25c>
   225c4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   225c8:	e51b300c 	ldr	r3, [fp, #-12]
   225cc:	e0823003 	add	r3, r2, r3
   225d0:	e2833064 	add	r3, r3, #100	; 0x64
   225d4:	e5d33000 	ldrb	r3, [r3]
   225d8:	e3530000 	cmp	r3, #0
   225dc:	1a000005 	bne	225f8 <ArtNetNode::HandleAddress()+0x210>
   225e0:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   225e4:	e3a03001 	mov	r3, #1
   225e8:	e3a02001 	mov	r2, #1
   225ec:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   225f0:	ebfffcc6 	bl	21910 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
   225f4:	ea000012 	b	22644 <ArtNetNode::HandleAddress()+0x25c>
   225f8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   225fc:	e51b300c 	ldr	r3, [fp, #-12]
   22600:	e0823003 	add	r3, r2, r3
   22604:	e2833064 	add	r3, r3, #100	; 0x64
   22608:	e5d33000 	ldrb	r3, [r3]
   2260c:	e6af3073 	sxtb	r3, r3
   22610:	e3530000 	cmp	r3, #0
   22614:	aa00000a 	bge	22644 <ArtNetNode::HandleAddress()+0x25c>
   22618:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   2261c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   22620:	e51b300c 	ldr	r3, [fp, #-12]
   22624:	e0823003 	add	r3, r2, r3
   22628:	e2833064 	add	r3, r3, #100	; 0x64
   2262c:	e5d33000 	ldrb	r3, [r3]
   22630:	e203307f 	and	r3, r3, #127	; 0x7f
   22634:	e6ef3073 	uxtb	r3, r3
   22638:	e3a02001 	mov	r2, #1
   2263c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   22640:	ebfffcb2 	bl	21910 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
   22644:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   22648:	e51b300c 	ldr	r3, [fp, #-12]
   2264c:	e0823003 	add	r3, r2, r3
   22650:	e2833060 	add	r3, r3, #96	; 0x60
   22654:	e5d33000 	ldrb	r3, [r3]
   22658:	e353007f 	cmp	r3, #127	; 0x7f
   2265c:	0a000027 	beq	22700 <ArtNetNode::HandleAddress()+0x318>
   22660:	e24b3028 	sub	r3, fp, #40	; 0x28
   22664:	e51b200c 	ldr	r2, [fp, #-12]
   22668:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2266c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   22670:	ebffff07 	bl	22294 <ArtNetNode::GetPortIndexInput(unsigned int, unsigned int, unsigned int&)>
   22674:	e1a03000 	mov	r3, r0
   22678:	e3530000 	cmp	r3, #0
   2267c:	0a00001f 	beq	22700 <ArtNetNode::HandleAddress()+0x318>
   22680:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   22684:	e51b300c 	ldr	r3, [fp, #-12]
   22688:	e0823003 	add	r3, r2, r3
   2268c:	e2833060 	add	r3, r3, #96	; 0x60
   22690:	e5d33000 	ldrb	r3, [r3]
   22694:	e3530000 	cmp	r3, #0
   22698:	1a000005 	bne	226b4 <ArtNetNode::HandleAddress()+0x2cc>
   2269c:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   226a0:	e3a03001 	mov	r3, #1
   226a4:	e3a02000 	mov	r2, #0
   226a8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   226ac:	ebfffc97 	bl	21910 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
   226b0:	ea000012 	b	22700 <ArtNetNode::HandleAddress()+0x318>
   226b4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   226b8:	e51b300c 	ldr	r3, [fp, #-12]
   226bc:	e0823003 	add	r3, r2, r3
   226c0:	e2833060 	add	r3, r3, #96	; 0x60
   226c4:	e5d33000 	ldrb	r3, [r3]
   226c8:	e6af3073 	sxtb	r3, r3
   226cc:	e3530000 	cmp	r3, #0
   226d0:	aa00000a 	bge	22700 <ArtNetNode::HandleAddress()+0x318>
   226d4:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   226d8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   226dc:	e51b300c 	ldr	r3, [fp, #-12]
   226e0:	e0823003 	add	r3, r2, r3
   226e4:	e2833060 	add	r3, r3, #96	; 0x60
   226e8:	e5d33000 	ldrb	r3, [r3]
   226ec:	e203307f 	and	r3, r3, #127	; 0x7f
   226f0:	e6ef3073 	uxtb	r3, r3
   226f4:	e3a02000 	mov	r2, #0
   226f8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   226fc:	ebfffc83 	bl	21910 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
   22700:	e51b300c 	ldr	r3, [fp, #-12]
   22704:	e2833001 	add	r3, r3, #1
   22708:	e50b300c 	str	r3, [fp, #-12]
   2270c:	eaffff91 	b	22558 <ArtNetNode::HandleAddress()+0x170>
   22710:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22714:	e5d3306a 	ldrb	r3, [r3, #106]	; 0x6a
   22718:	e2032003 	and	r2, r3, #3
   2271c:	e24b3020 	sub	r3, fp, #32
   22720:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   22724:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   22728:	ebffff04 	bl	22340 <ArtNetNode::GetPortIndexOutput(unsigned int, unsigned int, unsigned int&)>
   2272c:	e1a03000 	mov	r3, r0
   22730:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   22734:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22738:	e5d3306a 	ldrb	r3, [r3, #106]	; 0x6a
   2273c:	e3530053 	cmp	r3, #83	; 0x53
   22740:	ca000019 	bgt	227ac <ArtNetNode::HandleAddress()+0x3c4>
   22744:	e3530050 	cmp	r3, #80	; 0x50
   22748:	aa000092 	bge	22998 <ArtNetNode::HandleAddress()+0x5b0>
   2274c:	e3530004 	cmp	r3, #4
   22750:	0a000071 	beq	2291c <ArtNetNode::HandleAddress()+0x534>
   22754:	e3530004 	cmp	r3, #4
   22758:	ca00000b 	bgt	2278c <ArtNetNode::HandleAddress()+0x3a4>
   2275c:	e3530001 	cmp	r3, #1
   22760:	0a000025 	beq	227fc <ArtNetNode::HandleAddress()+0x414>
   22764:	e3530001 	cmp	r3, #1
   22768:	ca000002 	bgt	22778 <ArtNetNode::HandleAddress()+0x390>
   2276c:	e3530000 	cmp	r3, #0
   22770:	0a0000af 	beq	22a34 <ArtNetNode::HandleAddress()+0x64c>
   22774:	ea0000b0 	b	22a3c <ArtNetNode::HandleAddress()+0x654>
   22778:	e3530002 	cmp	r3, #2
   2277c:	0a000046 	beq	2289c <ArtNetNode::HandleAddress()+0x4b4>
   22780:	e3530003 	cmp	r3, #3
   22784:	0a000052 	beq	228d4 <ArtNetNode::HandleAddress()+0x4ec>
   22788:	ea0000ab 	b	22a3c <ArtNetNode::HandleAddress()+0x654>
   2278c:	e3530008 	cmp	r3, #8
   22790:	ba0000a9 	blt	22a3c <ArtNetNode::HandleAddress()+0x654>
   22794:	e353000c 	cmp	r3, #12
   22798:	da000070 	ble	22960 <ArtNetNode::HandleAddress()+0x578>
   2279c:	e2433010 	sub	r3, r3, #16
   227a0:	e3530003 	cmp	r3, #3
   227a4:	8a0000a4 	bhi	22a3c <ArtNetNode::HandleAddress()+0x654>
   227a8:	ea000074 	b	22980 <ArtNetNode::HandleAddress()+0x598>
   227ac:	e3530093 	cmp	r3, #147	; 0x93
   227b0:	ca000009 	bgt	227dc <ArtNetNode::HandleAddress()+0x3f4>
   227b4:	e3530090 	cmp	r3, #144	; 0x90
   227b8:	aa000088 	bge	229e0 <ArtNetNode::HandleAddress()+0x5f8>
   227bc:	e3530060 	cmp	r3, #96	; 0x60
   227c0:	ba00009d 	blt	22a3c <ArtNetNode::HandleAddress()+0x654>
   227c4:	e3530063 	cmp	r3, #99	; 0x63
   227c8:	da000078 	ble	229b0 <ArtNetNode::HandleAddress()+0x5c8>
   227cc:	e2433070 	sub	r3, r3, #112	; 0x70
   227d0:	e3530003 	cmp	r3, #3
   227d4:	8a000098 	bhi	22a3c <ArtNetNode::HandleAddress()+0x654>
   227d8:	ea00007a 	b	229c8 <ArtNetNode::HandleAddress()+0x5e0>
   227dc:	e35300c0 	cmp	r3, #192	; 0xc0
   227e0:	ba000095 	blt	22a3c <ArtNetNode::HandleAddress()+0x654>
   227e4:	e35300c3 	cmp	r3, #195	; 0xc3
   227e8:	da000085 	ble	22a04 <ArtNetNode::HandleAddress()+0x61c>
   227ec:	e24330d0 	sub	r3, r3, #208	; 0xd0
   227f0:	e3530003 	cmp	r3, #3
   227f4:	8a000090 	bhi	22a3c <ArtNetNode::HandleAddress()+0x654>
   227f8:	ea000087 	b	22a1c <ArtNetNode::HandleAddress()+0x634>
   227fc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   22800:	e3a02000 	mov	r2, #0
   22804:	e5c3208a 	strb	r2, [r3, #138]	; 0x8a
   22808:	e3a03000 	mov	r3, #0
   2280c:	e50b3010 	str	r3, [fp, #-16]
   22810:	e51b3010 	ldr	r3, [fp, #-16]
   22814:	e3530003 	cmp	r3, #3
   22818:	8a00001d 	bhi	22894 <ArtNetNode::HandleAddress()+0x4ac>
   2281c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   22820:	e51b3010 	ldr	r3, [fp, #-16]
   22824:	e1a03283 	lsl	r3, r3, #5
   22828:	e0823003 	add	r3, r2, r3
   2282c:	e3a02000 	mov	r2, #0
   22830:	e58320a0 	str	r2, [r3, #160]	; 0xa0
   22834:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   22838:	e51b3010 	ldr	r3, [fp, #-16]
   2283c:	e2833005 	add	r3, r3, #5
   22840:	e1a03283 	lsl	r3, r3, #5
   22844:	e0823003 	add	r3, r2, r3
   22848:	e3a02000 	mov	r2, #0
   2284c:	e5832008 	str	r2, [r3, #8]
   22850:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   22854:	e51b3010 	ldr	r3, [fp, #-16]
   22858:	e1a03283 	lsl	r3, r3, #5
   2285c:	e0823003 	add	r3, r2, r3
   22860:	e5d330b2 	ldrb	r3, [r3, #178]	; 0xb2
   22864:	e3c33008 	bic	r3, r3, #8
   22868:	e6ef1073 	uxtb	r1, r3
   2286c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   22870:	e51b3010 	ldr	r3, [fp, #-16]
   22874:	e1a03283 	lsl	r3, r3, #5
   22878:	e0823003 	add	r3, r2, r3
   2287c:	e1a02001 	mov	r2, r1
   22880:	e5c320b2 	strb	r2, [r3, #178]	; 0xb2
   22884:	e51b3010 	ldr	r3, [fp, #-16]
   22888:	e2833001 	add	r3, r3, #1
   2288c:	e50b3010 	str	r3, [fp, #-16]
   22890:	eaffffde 	b	22810 <ArtNetNode::HandleAddress()+0x428>
   22894:	e1a00000 	nop			; (mov r0, r0)
   22898:	ea000068 	b	22a40 <ArtNetNode::HandleAddress()+0x658>
   2289c:	ebffbb57 	bl	11600 <Hardware::Get()>
   228a0:	e1a03000 	mov	r3, r0
   228a4:	e3a02000 	mov	r2, #0
   228a8:	e3a01002 	mov	r1, #2
   228ac:	e1a00003 	mov	r0, r3
   228b0:	eb0071fc 	bl	3f0a8 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
   228b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   228b8:	e5d33067 	ldrb	r3, [r3, #103]	; 0x67
   228bc:	e1e03d03 	mvn	r3, r3, lsl #26
   228c0:	e1e03d23 	mvn	r3, r3, lsr #26
   228c4:	e6ef2073 	uxtb	r2, r3
   228c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   228cc:	e5c32067 	strb	r2, [r3, #103]	; 0x67
   228d0:	ea00005a 	b	22a40 <ArtNetNode::HandleAddress()+0x658>
   228d4:	ebffbb49 	bl	11600 <Hardware::Get()>
   228d8:	e1a03000 	mov	r3, r0
   228dc:	e3a02001 	mov	r2, #1
   228e0:	e3a01000 	mov	r1, #0
   228e4:	e1a00003 	mov	r0, r3
   228e8:	eb0071ee 	bl	3f0a8 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
   228ec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   228f0:	e5d33067 	ldrb	r3, [r3, #103]	; 0x67
   228f4:	e6af3073 	sxtb	r3, r3
   228f8:	e203303f 	and	r3, r3, #63	; 0x3f
   228fc:	e6af3073 	sxtb	r3, r3
   22900:	e1e03c83 	mvn	r3, r3, lsl #25
   22904:	e1e03ca3 	mvn	r3, r3, lsr #25
   22908:	e6af3073 	sxtb	r3, r3
   2290c:	e6ef2073 	uxtb	r2, r3
   22910:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   22914:	e5c32067 	strb	r2, [r3, #103]	; 0x67
   22918:	ea000048 	b	22a40 <ArtNetNode::HandleAddress()+0x658>
   2291c:	ebffbb37 	bl	11600 <Hardware::Get()>
   22920:	e1a03000 	mov	r3, r0
   22924:	e3a02001 	mov	r2, #1
   22928:	e3a01004 	mov	r1, #4
   2292c:	e1a00003 	mov	r0, r3
   22930:	eb0071dc 	bl	3f0a8 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>
   22934:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   22938:	e5d33067 	ldrb	r3, [r3, #103]	; 0x67
   2293c:	e6af3073 	sxtb	r3, r3
   22940:	e203303f 	and	r3, r3, #63	; 0x3f
   22944:	e6af3073 	sxtb	r3, r3
   22948:	e3833040 	orr	r3, r3, #64	; 0x40
   2294c:	e6af3073 	sxtb	r3, r3
   22950:	e6ef2073 	uxtb	r2, r3
   22954:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   22958:	e5c32067 	strb	r2, [r3, #103]	; 0x67
   2295c:	ea000037 	b	22a40 <ArtNetNode::HandleAddress()+0x658>
   22960:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22964:	e5d3306a 	ldrb	r3, [r3, #106]	; 0x6a
   22968:	e203300f 	and	r3, r3, #15
   2296c:	e6ef3073 	uxtb	r3, r3
   22970:	e1a01003 	mov	r1, r3
   22974:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   22978:	ebfffdff 	bl	2217c <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
   2297c:	ea00002f 	b	22a40 <ArtNetNode::HandleAddress()+0x658>
   22980:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22984:	e3a02001 	mov	r2, #1
   22988:	e1a01003 	mov	r1, r3
   2298c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   22990:	ebfffdb9 	bl	2207c <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
   22994:	ea000029 	b	22a40 <ArtNetNode::HandleAddress()+0x658>
   22998:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2299c:	e3a02000 	mov	r2, #0
   229a0:	e1a01003 	mov	r1, r3
   229a4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   229a8:	ebfffdb3 	bl	2207c <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
   229ac:	ea000023 	b	22a40 <ArtNetNode::HandleAddress()+0x658>
   229b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   229b4:	e3a02000 	mov	r2, #0
   229b8:	e1a01003 	mov	r1, r3
   229bc:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   229c0:	ebfffd67 	bl	21f64 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
   229c4:	ea00001d 	b	22a40 <ArtNetNode::HandleAddress()+0x658>
   229c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   229cc:	e3a02001 	mov	r2, #1
   229d0:	e1a01003 	mov	r1, r3
   229d4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   229d8:	ebfffd61 	bl	21f64 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
   229dc:	ea000017 	b	22a40 <ArtNetNode::HandleAddress()+0x658>
   229e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   229e4:	e54b3005 	strb	r3, [fp, #-5]
   229e8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   229ec:	e5933a50 	ldr	r3, [r3, #2640]	; 0xa50
   229f0:	e55b2005 	ldrb	r2, [fp, #-5]
   229f4:	e1a01002 	mov	r1, r2
   229f8:	e1a00003 	mov	r0, r3
   229fc:	ebffed9a 	bl	1e06c <lightset::Data::OutputClear(LightSet*, unsigned int)>
   22a00:	ea00000e 	b	22a40 <ArtNetNode::HandleAddress()+0x658>
   22a04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22a08:	e3a02001 	mov	r2, #1
   22a0c:	e1a01003 	mov	r1, r3
   22a10:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   22a14:	ebfff85e 	bl	20b94 <ArtNetNode::SetRmd(unsigned int, bool)>
   22a18:	ea000008 	b	22a40 <ArtNetNode::HandleAddress()+0x658>
   22a1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22a20:	e3a02000 	mov	r2, #0
   22a24:	e1a01003 	mov	r1, r3
   22a28:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   22a2c:	ebfff858 	bl	20b94 <ArtNetNode::SetRmd(unsigned int, bool)>
   22a30:	ea000002 	b	22a40 <ArtNetNode::HandleAddress()+0x658>
   22a34:	e1a00000 	nop			; (mov r0, r0)
   22a38:	ea000000 	b	22a40 <ArtNetNode::HandleAddress()+0x658>
   22a3c:	e1a00000 	nop			; (mov r0, r0)
   22a40:	e55b3005 	ldrb	r3, [fp, #-5]
   22a44:	e3530003 	cmp	r3, #3
   22a48:	8a00002d 	bhi	22b04 <ArtNetNode::HandleAddress()+0x71c>
   22a4c:	e55b3005 	ldrb	r3, [fp, #-5]
   22a50:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   22a54:	e1a03283 	lsl	r3, r3, #5
   22a58:	e0823003 	add	r3, r2, r3
   22a5c:	e59330ac 	ldr	r3, [r3, #172]	; 0xac
   22a60:	e3530000 	cmp	r3, #0
   22a64:	1a000026 	bne	22b04 <ArtNetNode::HandleAddress()+0x71c>
   22a68:	e55b3005 	ldrb	r3, [fp, #-5]
   22a6c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   22a70:	e1a03283 	lsl	r3, r3, #5
   22a74:	e0823003 	add	r3, r2, r3
   22a78:	e5d330b1 	ldrb	r3, [r3, #177]	; 0xb1
   22a7c:	e2233001 	eor	r3, r3, #1
   22a80:	e6ef3073 	uxtb	r3, r3
   22a84:	e3530000 	cmp	r3, #0
   22a88:	0a00001d 	beq	22b04 <ArtNetNode::HandleAddress()+0x71c>
   22a8c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   22a90:	e5932a50 	ldr	r2, [r3, #2640]	; 0xa50
   22a94:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   22a98:	e5933a50 	ldr	r3, [r3, #2640]	; 0xa50
   22a9c:	e5933000 	ldr	r3, [r3]
   22aa0:	e2833008 	add	r3, r3, #8
   22aa4:	e5933000 	ldr	r3, [r3]
   22aa8:	e55b1005 	ldrb	r1, [fp, #-5]
   22aac:	e1a00002 	mov	r0, r2
   22ab0:	e12fff33 	blx	r3
   22ab4:	e55b3005 	ldrb	r3, [fp, #-5]
   22ab8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   22abc:	e1a03283 	lsl	r3, r3, #5
   22ac0:	e0823003 	add	r3, r2, r3
   22ac4:	e3a02001 	mov	r2, #1
   22ac8:	e5c320b1 	strb	r2, [r3, #177]	; 0xb1
   22acc:	e55b3005 	ldrb	r3, [fp, #-5]
   22ad0:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   22ad4:	e1a03283 	lsl	r3, r3, #5
   22ad8:	e0823003 	add	r3, r2, r3
   22adc:	e5d330b2 	ldrb	r3, [r3, #178]	; 0xb2
   22ae0:	e55b1005 	ldrb	r1, [fp, #-5]
   22ae4:	e1e03c83 	mvn	r3, r3, lsl #25
   22ae8:	e1e03ca3 	mvn	r3, r3, lsr #25
   22aec:	e6ef0073 	uxtb	r0, r3
   22af0:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   22af4:	e1a03281 	lsl	r3, r1, #5
   22af8:	e0823003 	add	r3, r2, r3
   22afc:	e1a02000 	mov	r2, r0
   22b00:	e5c320b2 	strb	r2, [r3, #178]	; 0xb2
   22b04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   22b08:	e5933a60 	ldr	r3, [r3, #2656]	; 0xa60
   22b0c:	e3530000 	cmp	r3, #0
   22b10:	0a00000a 	beq	22b40 <ArtNetNode::HandleAddress()+0x758>
   22b14:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   22b18:	e5930a60 	ldr	r0, [r3, #2656]	; 0xa60
   22b1c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   22b20:	e5933a60 	ldr	r3, [r3, #2656]	; 0xa60
   22b24:	e5933000 	ldr	r3, [r3]
   22b28:	e283300c 	add	r3, r3, #12
   22b2c:	e5933000 	ldr	r3, [r3]
   22b30:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   22b34:	e5d2206a 	ldrb	r2, [r2, #106]	; 0x6a
   22b38:	e1a01002 	mov	r1, r2
   22b3c:	e12fff33 	blx	r3
   22b40:	e3a01001 	mov	r1, #1
   22b44:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   22b48:	ebfff65e 	bl	204c8 <ArtNetNode::SendPollRelply(bool)>
   22b4c:	e1a00000 	nop			; (mov r0, r0)
   22b50:	e24bd004 	sub	sp, fp, #4
   22b54:	e8bd8800 	pop	{fp, pc}
   22b58:	00046a44 	.word	0x00046a44
   22b5c:	000469fc 	.word	0x000469fc

00022b60 <ArtNetParams::Dump()>:
   22b60:	e12fff1e 	bx	lr

00022b64 <Network::EnableDhcp()>:
   22b64:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   22b68:	e28db000 	add	fp, sp, #0
   22b6c:	e24dd00c 	sub	sp, sp, #12
   22b70:	e50b0008 	str	r0, [fp, #-8]
   22b74:	e3a03000 	mov	r3, #0
   22b78:	e1a00003 	mov	r0, r3
   22b7c:	e28bd000 	add	sp, fp, #0
   22b80:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   22b84:	e12fff1e 	bx	lr

00022b88 <Network::GetGatewayIp() const>:
   22b88:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   22b8c:	e28db000 	add	fp, sp, #0
   22b90:	e24dd00c 	sub	sp, sp, #12
   22b94:	e50b0008 	str	r0, [fp, #-8]
   22b98:	e51b3008 	ldr	r3, [fp, #-8]
   22b9c:	e5933014 	ldr	r3, [r3, #20]
   22ba0:	e1a00003 	mov	r0, r3
   22ba4:	e28bd000 	add	sp, fp, #0
   22ba8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   22bac:	e12fff1e 	bx	lr

00022bb0 <Network::GetNetmask() const>:
   22bb0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   22bb4:	e28db000 	add	fp, sp, #0
   22bb8:	e24dd00c 	sub	sp, sp, #12
   22bbc:	e50b0008 	str	r0, [fp, #-8]
   22bc0:	e51b3008 	ldr	r3, [fp, #-8]
   22bc4:	e5933018 	ldr	r3, [r3, #24]
   22bc8:	e1a00003 	mov	r0, r3
   22bcc:	e28bd000 	add	sp, fp, #0
   22bd0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   22bd4:	e12fff1e 	bx	lr

00022bd8 <ArtNetNode::HandleIpProg()>:
   22bd8:	e92d4810 	push	{r4, fp, lr}
   22bdc:	e28db008 	add	fp, sp, #8
   22be0:	e24dd024 	sub	sp, sp, #36	; 0x24
   22be4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   22be8:	ebffb9f3 	bl	113bc <getuid@plt>
   22bec:	e1a03000 	mov	r3, r0
   22bf0:	e3530000 	cmp	r3, #0
   22bf4:	13a03001 	movne	r3, #1
   22bf8:	03a03000 	moveq	r3, #0
   22bfc:	e6ef3073 	uxtb	r3, r3
   22c00:	e3530000 	cmp	r3, #0
   22c04:	1a00010f 	bne	23048 <ArtNetNode::HandleIpProg()+0x470>
   22c08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22c0c:	e2833f55 	add	r3, r3, #340	; 0x154
   22c10:	e50b3010 	str	r3, [fp, #-16]
   22c14:	e51b3010 	ldr	r3, [fp, #-16]
   22c18:	e5d3300e 	ldrb	r3, [r3, #14]
   22c1c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   22c20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22c24:	e2833f55 	add	r3, r3, #340	; 0x154
   22c28:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   22c2c:	ebffd6ad 	bl	186e8 <Network::Get()>
   22c30:	e1a03000 	mov	r3, r0
   22c34:	e1a00003 	mov	r0, r3
   22c38:	ebfff0e9 	bl	1efe4 <Network::IsDhcpUsed() const>
   22c3c:	e1a03000 	mov	r3, r0
   22c40:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   22c44:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   22c48:	e3a03000 	mov	r3, #0
   22c4c:	e5c23008 	strb	r3, [r2, #8]
   22c50:	e3a03000 	mov	r3, #0
   22c54:	e1e03003 	mvn	r3, r3
   22c58:	e2033006 	and	r3, r3, #6
   22c5c:	e1e03003 	mvn	r3, r3
   22c60:	e5c23009 	strb	r3, [r2, #9]
   22c64:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   22c68:	e20330c0 	and	r3, r3, #192	; 0xc0
   22c6c:	e35300c0 	cmp	r3, #192	; 0xc0
   22c70:	1a000003 	bne	22c84 <ArtNetNode::HandleIpProg()+0xac>
   22c74:	ebffd69b 	bl	186e8 <Network::Get()>
   22c78:	e1a03000 	mov	r3, r0
   22c7c:	e1a00003 	mov	r0, r3
   22c80:	ebffffb7 	bl	22b64 <Network::EnableDhcp()>
   22c84:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   22c88:	e2033088 	and	r3, r3, #136	; 0x88
   22c8c:	e3530088 	cmp	r3, #136	; 0x88
   22c90:	1a000004 	bne	22ca8 <ArtNetNode::HandleIpProg()+0xd0>
   22c94:	ebffd693 	bl	186e8 <Network::Get()>
   22c98:	e1a03000 	mov	r3, r0
   22c9c:	e3a01000 	mov	r1, #0
   22ca0:	e1a00003 	mov	r0, r3
   22ca4:	eb004dbb 	bl	36398 <Network::SetIp(unsigned int)>
   22ca8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   22cac:	e2033084 	and	r3, r3, #132	; 0x84
   22cb0:	e3530084 	cmp	r3, #132	; 0x84
   22cb4:	1a00000c 	bne	22cec <ArtNetNode::HandleIpProg()+0x114>
   22cb8:	e51b3010 	ldr	r3, [fp, #-16]
   22cbc:	e2833010 	add	r3, r3, #16
   22cc0:	e5933000 	ldr	r3, [r3]
   22cc4:	e1a02003 	mov	r2, r3
   22cc8:	e59f3384 	ldr	r3, [pc, #900]	; 23054 <ArtNetNode::HandleIpProg()+0x47c>
   22ccc:	e5832000 	str	r2, [r3]
   22cd0:	ebffd684 	bl	186e8 <Network::Get()>
   22cd4:	e1a02000 	mov	r2, r0
   22cd8:	e59f3374 	ldr	r3, [pc, #884]	; 23054 <ArtNetNode::HandleIpProg()+0x47c>
   22cdc:	e5933000 	ldr	r3, [r3]
   22ce0:	e1a01003 	mov	r1, r3
   22ce4:	e1a00002 	mov	r0, r2
   22ce8:	eb004daa 	bl	36398 <Network::SetIp(unsigned int)>
   22cec:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   22cf0:	e2033082 	and	r3, r3, #130	; 0x82
   22cf4:	e3530082 	cmp	r3, #130	; 0x82
   22cf8:	1a00000c 	bne	22d30 <ArtNetNode::HandleIpProg()+0x158>
   22cfc:	e51b3010 	ldr	r3, [fp, #-16]
   22d00:	e2833014 	add	r3, r3, #20
   22d04:	e5933000 	ldr	r3, [r3]
   22d08:	e1a02003 	mov	r2, r3
   22d0c:	e59f3340 	ldr	r3, [pc, #832]	; 23054 <ArtNetNode::HandleIpProg()+0x47c>
   22d10:	e5832000 	str	r2, [r3]
   22d14:	ebffd673 	bl	186e8 <Network::Get()>
   22d18:	e1a02000 	mov	r2, r0
   22d1c:	e59f3330 	ldr	r3, [pc, #816]	; 23054 <ArtNetNode::HandleIpProg()+0x47c>
   22d20:	e5933000 	ldr	r3, [r3]
   22d24:	e1a01003 	mov	r1, r3
   22d28:	e1a00002 	mov	r0, r2
   22d2c:	eb004e05 	bl	36548 <Network::SetNetmask(unsigned int)>
   22d30:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   22d34:	e2033090 	and	r3, r3, #144	; 0x90
   22d38:	e3530090 	cmp	r3, #144	; 0x90
   22d3c:	1a00000c 	bne	22d74 <ArtNetNode::HandleIpProg()+0x19c>
   22d40:	e51b3010 	ldr	r3, [fp, #-16]
   22d44:	e283301a 	add	r3, r3, #26
   22d48:	e5933000 	ldr	r3, [r3]
   22d4c:	e1a02003 	mov	r2, r3
   22d50:	e59f32fc 	ldr	r3, [pc, #764]	; 23054 <ArtNetNode::HandleIpProg()+0x47c>
   22d54:	e5832000 	str	r2, [r3]
   22d58:	ebffd662 	bl	186e8 <Network::Get()>
   22d5c:	e1a02000 	mov	r2, r0
   22d60:	e59f32ec 	ldr	r3, [pc, #748]	; 23054 <ArtNetNode::HandleIpProg()+0x47c>
   22d64:	e5933000 	ldr	r3, [r3]
   22d68:	e1a01003 	mov	r1, r3
   22d6c:	e1a00002 	mov	r0, r2
   22d70:	eb004e00 	bl	36578 <Network::SetGatewayIp(unsigned int)>
   22d74:	ebffd65b 	bl	186e8 <Network::Get()>
   22d78:	e1a03000 	mov	r3, r0
   22d7c:	e1a00003 	mov	r0, r3
   22d80:	ebfff097 	bl	1efe4 <Network::IsDhcpUsed() const>
   22d84:	e1a03000 	mov	r3, r0
   22d88:	e3530000 	cmp	r3, #0
   22d8c:	0a000003 	beq	22da0 <ArtNetNode::HandleIpProg()+0x1c8>
   22d90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22d94:	e3a02040 	mov	r2, #64	; 0x40
   22d98:	e5c3201a 	strb	r2, [r3, #26]
   22d9c:	ea000002 	b	22dac <ArtNetNode::HandleIpProg()+0x1d4>
   22da0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22da4:	e3a02000 	mov	r2, #0
   22da8:	e5c3201a 	strb	r2, [r3, #26]
   22dac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22db0:	e3a02000 	mov	r2, #0
   22db4:	e5c3201b 	strb	r2, [r3, #27]
   22db8:	ebffd64a 	bl	186e8 <Network::Get()>
   22dbc:	e1a03000 	mov	r3, r0
   22dc0:	e1a00003 	mov	r0, r3
   22dc4:	ebfff086 	bl	1efe4 <Network::IsDhcpUsed() const>
   22dc8:	e1a03000 	mov	r3, r0
   22dcc:	e1a02003 	mov	r2, r3
   22dd0:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   22dd4:	e1530002 	cmp	r3, r2
   22dd8:	13a03001 	movne	r3, #1
   22ddc:	03a03000 	moveq	r3, #0
   22de0:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
   22de4:	ebffd63f 	bl	186e8 <Network::Get()>
   22de8:	e1a03000 	mov	r3, r0
   22dec:	e1a00003 	mov	r0, r3
   22df0:	ebffd632 	bl	186c0 <Network::GetIp() const>
   22df4:	e1a02000 	mov	r2, r0
   22df8:	e59f3254 	ldr	r3, [pc, #596]	; 23054 <ArtNetNode::HandleIpProg()+0x47c>
   22dfc:	e5832000 	str	r2, [r3]
   22e00:	e55b401a 	ldrb	r4, [fp, #-26]	; 0xffffffe6
   22e04:	e51b3010 	ldr	r3, [fp, #-16]
   22e08:	e2833010 	add	r3, r3, #16
   22e0c:	e3a02004 	mov	r2, #4
   22e10:	e59f123c 	ldr	r1, [pc, #572]	; 23054 <ArtNetNode::HandleIpProg()+0x47c>
   22e14:	e1a00003 	mov	r0, r3
   22e18:	ebffb9a6 	bl	114b8 <memcmp@plt>
   22e1c:	e1a03000 	mov	r3, r0
   22e20:	e3530000 	cmp	r3, #0
   22e24:	13a03001 	movne	r3, #1
   22e28:	03a03000 	moveq	r3, #0
   22e2c:	e6ef3073 	uxtb	r3, r3
   22e30:	e1843003 	orr	r3, r4, r3
   22e34:	e3530000 	cmp	r3, #0
   22e38:	13a03001 	movne	r3, #1
   22e3c:	03a03000 	moveq	r3, #0
   22e40:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
   22e44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22e48:	e2833010 	add	r3, r3, #16
   22e4c:	e59f2200 	ldr	r2, [pc, #512]	; 23054 <ArtNetNode::HandleIpProg()+0x47c>
   22e50:	e5922000 	ldr	r2, [r2]
   22e54:	e5832000 	str	r2, [r3]
   22e58:	ebffd622 	bl	186e8 <Network::Get()>
   22e5c:	e1a03000 	mov	r3, r0
   22e60:	e1a00003 	mov	r0, r3
   22e64:	ebffff51 	bl	22bb0 <Network::GetNetmask() const>
   22e68:	e1a02000 	mov	r2, r0
   22e6c:	e59f31e0 	ldr	r3, [pc, #480]	; 23054 <ArtNetNode::HandleIpProg()+0x47c>
   22e70:	e5832000 	str	r2, [r3]
   22e74:	e55b401a 	ldrb	r4, [fp, #-26]	; 0xffffffe6
   22e78:	e51b3010 	ldr	r3, [fp, #-16]
   22e7c:	e2833014 	add	r3, r3, #20
   22e80:	e3a02004 	mov	r2, #4
   22e84:	e59f11c8 	ldr	r1, [pc, #456]	; 23054 <ArtNetNode::HandleIpProg()+0x47c>
   22e88:	e1a00003 	mov	r0, r3
   22e8c:	ebffb989 	bl	114b8 <memcmp@plt>
   22e90:	e1a03000 	mov	r3, r0
   22e94:	e3530000 	cmp	r3, #0
   22e98:	13a03001 	movne	r3, #1
   22e9c:	03a03000 	moveq	r3, #0
   22ea0:	e6ef3073 	uxtb	r3, r3
   22ea4:	e1843003 	orr	r3, r4, r3
   22ea8:	e3530000 	cmp	r3, #0
   22eac:	13a03001 	movne	r3, #1
   22eb0:	03a03000 	moveq	r3, #0
   22eb4:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
   22eb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22ebc:	e2833014 	add	r3, r3, #20
   22ec0:	e59f218c 	ldr	r2, [pc, #396]	; 23054 <ArtNetNode::HandleIpProg()+0x47c>
   22ec4:	e5922000 	ldr	r2, [r2]
   22ec8:	e5832000 	str	r2, [r3]
   22ecc:	ebffd605 	bl	186e8 <Network::Get()>
   22ed0:	e1a03000 	mov	r3, r0
   22ed4:	e1a00003 	mov	r0, r3
   22ed8:	ebffff2a 	bl	22b88 <Network::GetGatewayIp() const>
   22edc:	e1a02000 	mov	r2, r0
   22ee0:	e59f316c 	ldr	r3, [pc, #364]	; 23054 <ArtNetNode::HandleIpProg()+0x47c>
   22ee4:	e5832000 	str	r2, [r3]
   22ee8:	e55b401a 	ldrb	r4, [fp, #-26]	; 0xffffffe6
   22eec:	e51b3010 	ldr	r3, [fp, #-16]
   22ef0:	e283301a 	add	r3, r3, #26
   22ef4:	e3a02004 	mov	r2, #4
   22ef8:	e59f1154 	ldr	r1, [pc, #340]	; 23054 <ArtNetNode::HandleIpProg()+0x47c>
   22efc:	e1a00003 	mov	r0, r3
   22f00:	ebffb96c 	bl	114b8 <memcmp@plt>
   22f04:	e1a03000 	mov	r3, r0
   22f08:	e3530000 	cmp	r3, #0
   22f0c:	13a03001 	movne	r3, #1
   22f10:	03a03000 	moveq	r3, #0
   22f14:	e6ef3073 	uxtb	r3, r3
   22f18:	e1843003 	orr	r3, r4, r3
   22f1c:	e3530000 	cmp	r3, #0
   22f20:	13a03001 	movne	r3, #1
   22f24:	03a03000 	moveq	r3, #0
   22f28:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
   22f2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22f30:	e283301c 	add	r3, r3, #28
   22f34:	e59f2118 	ldr	r2, [pc, #280]	; 23054 <ArtNetNode::HandleIpProg()+0x47c>
   22f38:	e5922000 	ldr	r2, [r2]
   22f3c:	e5832000 	str	r2, [r3]
   22f40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22f44:	e3a02000 	mov	r2, #0
   22f48:	e5c32020 	strb	r2, [r3, #32]
   22f4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22f50:	e3a02000 	mov	r2, #0
   22f54:	e5c32021 	strb	r2, [r3, #33]	; 0x21
   22f58:	ebffd5e2 	bl	186e8 <Network::Get()>
   22f5c:	e1a0c000 	mov	ip, r0
   22f60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22f64:	e5931000 	ldr	r1, [r3]
   22f68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22f6c:	e2830f55 	add	r0, r3, #340	; 0x154
   22f70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22f74:	e5933620 	ldr	r3, [r3, #1568]	; 0x620
   22f78:	e59f20d8 	ldr	r2, [pc, #216]	; 23058 <ArtNetNode::HandleIpProg()+0x480>
   22f7c:	e58d2004 	str	r2, [sp, #4]
   22f80:	e58d3000 	str	r3, [sp]
   22f84:	e3a03022 	mov	r3, #34	; 0x22
   22f88:	e1a02000 	mov	r2, r0
   22f8c:	e1a0000c 	mov	r0, ip
   22f90:	eb004e13 	bl	367e4 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>
   22f94:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
   22f98:	e3530000 	cmp	r3, #0
   22f9c:	0a00002a 	beq	2304c <ArtNetNode::HandleIpProg()+0x474>
   22fa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22fa4:	e5d33068 	ldrb	r3, [r3, #104]	; 0x68
   22fa8:	e6af3073 	sxtb	r3, r3
   22fac:	e3c33002 	bic	r3, r3, #2
   22fb0:	e6af4073 	sxtb	r4, r3
   22fb4:	ebffd5cb 	bl	186e8 <Network::Get()>
   22fb8:	e1a03000 	mov	r3, r0
   22fbc:	e1a00003 	mov	r0, r3
   22fc0:	ebfff007 	bl	1efe4 <Network::IsDhcpUsed() const>
   22fc4:	e1a03000 	mov	r3, r0
   22fc8:	e3530000 	cmp	r3, #0
   22fcc:	0a000001 	beq	22fd8 <ArtNetNode::HandleIpProg()+0x400>
   22fd0:	e3a03002 	mov	r3, #2
   22fd4:	ea000000 	b	22fdc <ArtNetNode::HandleIpProg()+0x404>
   22fd8:	e3a03000 	mov	r3, #0
   22fdc:	e1833004 	orr	r3, r3, r4
   22fe0:	e6af3073 	sxtb	r3, r3
   22fe4:	e6ef2073 	uxtb	r2, r3
   22fe8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22fec:	e5c32068 	strb	r2, [r3, #104]	; 0x68
   22ff0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   22ff4:	e2833e63 	add	r3, r3, #1584	; 0x630
   22ff8:	e2833006 	add	r3, r3, #6
   22ffc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   23000:	e2822010 	add	r2, r2, #16
   23004:	e5922000 	ldr	r2, [r2]
   23008:	e5832000 	str	r2, [r3]
   2300c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   23010:	e2833e6f 	add	r3, r3, #1776	; 0x6f0
   23014:	e283300b 	add	r3, r3, #11
   23018:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2301c:	e2822010 	add	r2, r2, #16
   23020:	e5922000 	ldr	r2, [r2]
   23024:	e5832000 	str	r2, [r3]
   23028:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2302c:	e5d33086 	ldrb	r3, [r3, #134]	; 0x86
   23030:	e3530000 	cmp	r3, #0
   23034:	0a000004 	beq	2304c <ArtNetNode::HandleIpProg()+0x474>
   23038:	e3a01001 	mov	r1, #1
   2303c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   23040:	ebfff520 	bl	204c8 <ArtNetNode::SendPollRelply(bool)>
   23044:	ea000000 	b	2304c <ArtNetNode::HandleIpProg()+0x474>
   23048:	e1a00000 	nop			; (mov r0, r0)
   2304c:	e24bd008 	sub	sp, fp, #8
   23050:	e8bd8810 	pop	{r4, fp, pc}
   23054:	0005dc04 	.word	0x0005dc04
   23058:	00001936 	.word	0x00001936

0002305c <lightset::Data::Output(LightSet*, unsigned int)>:
   2305c:	e92d4800 	push	{fp, lr}
   23060:	e28db004 	add	fp, sp, #4
   23064:	e24dd008 	sub	sp, sp, #8
   23068:	e50b0008 	str	r0, [fp, #-8]
   2306c:	e50b100c 	str	r1, [fp, #-12]
   23070:	ebffebde 	bl	1dff0 <lightset::Data::Get()>
   23074:	e1a03000 	mov	r3, r0
   23078:	e51b200c 	ldr	r2, [fp, #-12]
   2307c:	e51b1008 	ldr	r1, [fp, #-8]
   23080:	e1a00003 	mov	r0, r3
   23084:	ebffec0f 	bl	1e0c8 <lightset::Data::IOutput(LightSet*, unsigned int) const>
   23088:	e1a00000 	nop			; (mov r0, r0)
   2308c:	e24bd004 	sub	sp, fp, #4
   23090:	e8bd8800 	pop	{fp, pc}

00023094 <ArtNetNode::HandleSync()>:
   23094:	e92d4800 	push	{fp, lr}
   23098:	e28db004 	add	fp, sp, #4
   2309c:	e24dd010 	sub	sp, sp, #16
   230a0:	e50b0010 	str	r0, [fp, #-16]
   230a4:	e51b3010 	ldr	r3, [fp, #-16]
   230a8:	e3a02001 	mov	r2, #1
   230ac:	e5c32089 	strb	r2, [r3, #137]	; 0x89
   230b0:	ebffb952 	bl	11600 <Hardware::Get()>
   230b4:	e1a03000 	mov	r3, r0
   230b8:	e1a00003 	mov	r0, r3
   230bc:	eb007480 	bl	402c4 <Hardware::Millis()>
   230c0:	e1a02000 	mov	r2, r0
   230c4:	e51b3010 	ldr	r3, [fp, #-16]
   230c8:	e5832080 	str	r2, [r3, #128]	; 0x80
   230cc:	e3a03000 	mov	r3, #0
   230d0:	e50b3008 	str	r3, [fp, #-8]
   230d4:	e51b3008 	ldr	r3, [fp, #-8]
   230d8:	e3530003 	cmp	r3, #3
   230dc:	8a000031 	bhi	231a8 <ArtNetNode::HandleSync()+0x114>
   230e0:	e51b2010 	ldr	r2, [fp, #-16]
   230e4:	e51b3008 	ldr	r3, [fp, #-8]
   230e8:	e1a03283 	lsl	r3, r3, #5
   230ec:	e0823003 	add	r3, r2, r3
   230f0:	e59330ac 	ldr	r3, [r3, #172]	; 0xac
   230f4:	e3530000 	cmp	r3, #0
   230f8:	1a000026 	bne	23198 <ArtNetNode::HandleSync()+0x104>
   230fc:	e51b2010 	ldr	r2, [fp, #-16]
   23100:	e51b3008 	ldr	r3, [fp, #-8]
   23104:	e1a03283 	lsl	r3, r3, #5
   23108:	e0823003 	add	r3, r2, r3
   2310c:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
   23110:	e3530000 	cmp	r3, #0
   23114:	0a00001f 	beq	23198 <ArtNetNode::HandleSync()+0x104>
   23118:	e51b3010 	ldr	r3, [fp, #-16]
   2311c:	e5933a50 	ldr	r3, [r3, #2640]	; 0xa50
   23120:	e51b1008 	ldr	r1, [fp, #-8]
   23124:	e1a00003 	mov	r0, r3
   23128:	ebffffcb 	bl	2305c <lightset::Data::Output(LightSet*, unsigned int)>
   2312c:	e51b2010 	ldr	r2, [fp, #-16]
   23130:	e51b3008 	ldr	r3, [fp, #-8]
   23134:	e1a03283 	lsl	r3, r3, #5
   23138:	e0823003 	add	r3, r2, r3
   2313c:	e5d330b1 	ldrb	r3, [r3, #177]	; 0xb1
   23140:	e2233001 	eor	r3, r3, #1
   23144:	e6ef3073 	uxtb	r3, r3
   23148:	e3530000 	cmp	r3, #0
   2314c:	0a00000f 	beq	23190 <ArtNetNode::HandleSync()+0xfc>
   23150:	e51b3010 	ldr	r3, [fp, #-16]
   23154:	e5932a50 	ldr	r2, [r3, #2640]	; 0xa50
   23158:	e51b3010 	ldr	r3, [fp, #-16]
   2315c:	e5933a50 	ldr	r3, [r3, #2640]	; 0xa50
   23160:	e5933000 	ldr	r3, [r3]
   23164:	e2833008 	add	r3, r3, #8
   23168:	e5933000 	ldr	r3, [r3]
   2316c:	e51b1008 	ldr	r1, [fp, #-8]
   23170:	e1a00002 	mov	r0, r2
   23174:	e12fff33 	blx	r3
   23178:	e51b2010 	ldr	r2, [fp, #-16]
   2317c:	e51b3008 	ldr	r3, [fp, #-8]
   23180:	e1a03283 	lsl	r3, r3, #5
   23184:	e0823003 	add	r3, r2, r3
   23188:	e3a02001 	mov	r2, #1
   2318c:	e5c320b1 	strb	r2, [r3, #177]	; 0xb1
   23190:	e51b0008 	ldr	r0, [fp, #-8]
   23194:	ebffef9c 	bl	1f00c <lightset::Data::ClearLength(unsigned int)>
   23198:	e51b3008 	ldr	r3, [fp, #-8]
   2319c:	e2833001 	add	r3, r3, #1
   231a0:	e50b3008 	str	r3, [fp, #-8]
   231a4:	eaffffca 	b	230d4 <ArtNetNode::HandleSync()+0x40>
   231a8:	e1a00000 	nop			; (mov r0, r0)
   231ac:	e24bd004 	sub	sp, fp, #4
   231b0:	e8bd8800 	pop	{fp, pc}

000231b4 <ArtNetNode::HandleTimeSync()>:
   231b4:	e92d4800 	push	{fp, lr}
   231b8:	e28db004 	add	fp, sp, #4
   231bc:	e24dd038 	sub	sp, sp, #56	; 0x38
   231c0:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
   231c4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   231c8:	e2833f55 	add	r3, r3, #340	; 0x154
   231cc:	e50b3008 	str	r3, [fp, #-8]
   231d0:	e51b3008 	ldr	r3, [fp, #-8]
   231d4:	e5d3300f 	ldrb	r3, [r3, #15]
   231d8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   231dc:	e51b3008 	ldr	r3, [fp, #-8]
   231e0:	e5d33010 	ldrb	r3, [r3, #16]
   231e4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
   231e8:	e51b3008 	ldr	r3, [fp, #-8]
   231ec:	e5d33011 	ldrb	r3, [r3, #17]
   231f0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   231f4:	e51b3008 	ldr	r3, [fp, #-8]
   231f8:	e5d33012 	ldrb	r3, [r3, #18]
   231fc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
   23200:	e51b3008 	ldr	r3, [fp, #-8]
   23204:	e5d33013 	ldrb	r3, [r3, #19]
   23208:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   2320c:	e51b3008 	ldr	r3, [fp, #-8]
   23210:	e5d33014 	ldrb	r3, [r3, #20]
   23214:	e1a03403 	lsl	r3, r3, #8
   23218:	e51b2008 	ldr	r2, [fp, #-8]
   2321c:	e5d22015 	ldrb	r2, [r2, #21]
   23220:	e0833002 	add	r3, r3, r2
   23224:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   23228:	ebffb8f4 	bl	11600 <Hardware::Get()>
   2322c:	e1a02000 	mov	r2, r0
   23230:	e24b3034 	sub	r3, fp, #52	; 0x34
   23234:	e1a01003 	mov	r1, r3
   23238:	e1a00002 	mov	r0, r2
   2323c:	eb0072a9 	bl	3fce8 <Hardware::SetTime(tm const*)>
   23240:	e1a00000 	nop			; (mov r0, r0)
   23244:	e24bd004 	sub	sp, fp, #4
   23248:	e8bd8800 	pop	{fp, pc}

0002324c <artnet::get_protocol_mode(artnet::PortProtocol, bool)>:
   2324c:	e3510000 	cmp	r1, #0
   23250:	159f3018 	ldrne	r3, [pc, #24]	; 23270 <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x24>
   23254:	059f2018 	ldreq	r2, [pc, #24]	; 23274 <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x28>
   23258:	159f2018 	ldrne	r2, [pc, #24]	; 23278 <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x2c>
   2325c:	059f3018 	ldreq	r3, [pc, #24]	; 2327c <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x30>
   23260:	e3500000 	cmp	r0, #0
   23264:	01a00002 	moveq	r0, r2
   23268:	11a00003 	movne	r0, r3
   2326c:	e12fff1e 	bx	lr
   23270:	0004688f 	.word	0x0004688f
   23274:	00046888 	.word	0x00046888
   23278:	00046894 	.word	0x00046894
   2327c:	0004689c 	.word	0x0004689c

00023280 <artnet::get_protocol_mode(unsigned int, bool)>:
   23280:	eafffff1 	b	2324c <artnet::get_protocol_mode(artnet::PortProtocol, bool)>

00023284 <lightset::get_merge_mode(char const*)>:
   23284:	e3500000 	cmp	r0, #0
   23288:	012fff1e 	bxeq	lr
   2328c:	e5d03000 	ldrb	r3, [r0]
   23290:	e3833020 	orr	r3, r3, #32
   23294:	e353006c 	cmp	r3, #108	; 0x6c
   23298:	1a000009 	bne	232c4 <lightset::get_merge_mode(char const*)+0x40>
   2329c:	e5d03001 	ldrb	r3, [r0, #1]
   232a0:	e3833020 	orr	r3, r3, #32
   232a4:	e3530074 	cmp	r3, #116	; 0x74
   232a8:	1a000005 	bne	232c4 <lightset::get_merge_mode(char const*)+0x40>
   232ac:	e5d00002 	ldrb	r0, [r0, #2]
   232b0:	e3800020 	orr	r0, r0, #32
   232b4:	e2400070 	sub	r0, r0, #112	; 0x70
   232b8:	e16f0f10 	clz	r0, r0
   232bc:	e1a002a0 	lsr	r0, r0, #5
   232c0:	e12fff1e 	bx	lr
   232c4:	e3a00000 	mov	r0, #0
   232c8:	e12fff1e 	bx	lr

000232cc <lightset::get_merge_mode(lightset::MergeMode, bool)>:
   232cc:	e3510000 	cmp	r1, #0
   232d0:	159f3018 	ldrne	r3, [pc, #24]	; 232f0 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x24>
   232d4:	059f2018 	ldreq	r2, [pc, #24]	; 232f4 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x28>
   232d8:	159f2018 	ldrne	r2, [pc, #24]	; 232f8 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x2c>
   232dc:	059f3018 	ldreq	r3, [pc, #24]	; 232fc <lightset::get_merge_mode(lightset::MergeMode, bool)+0x30>
   232e0:	e3500000 	cmp	r0, #0
   232e4:	01a00002 	moveq	r0, r2
   232e8:	11a00003 	movne	r0, r3
   232ec:	e12fff1e 	bx	lr
   232f0:	000468dc 	.word	0x000468dc
   232f4:	000468d8 	.word	0x000468d8
   232f8:	000468e0 	.word	0x000468e0
   232fc:	000468e4 	.word	0x000468e4

00023300 <lightset::get_merge_mode(unsigned int, bool)>:
   23300:	eafffff1 	b	232cc <lightset::get_merge_mode(lightset::MergeMode, bool)>

00023304 <lightset::get_direction(char const*)>:
   23304:	e3500000 	cmp	r0, #0
   23308:	0a000030 	beq	233d0 <lightset::get_direction(char const*)+0xcc>
   2330c:	e5d03000 	ldrb	r3, [r0]
   23310:	e3833020 	orr	r3, r3, #32
   23314:	e3530069 	cmp	r3, #105	; 0x69
   23318:	1a000010 	bne	23360 <lightset::get_direction(char const*)+0x5c>
   2331c:	e5d03001 	ldrb	r3, [r0, #1]
   23320:	e3833020 	orr	r3, r3, #32
   23324:	e353006e 	cmp	r3, #110	; 0x6e
   23328:	1a000028 	bne	233d0 <lightset::get_direction(char const*)+0xcc>
   2332c:	e5d03002 	ldrb	r3, [r0, #2]
   23330:	e3833020 	orr	r3, r3, #32
   23334:	e3530070 	cmp	r3, #112	; 0x70
   23338:	1a000024 	bne	233d0 <lightset::get_direction(char const*)+0xcc>
   2333c:	e5d03003 	ldrb	r3, [r0, #3]
   23340:	e3833020 	orr	r3, r3, #32
   23344:	e3530075 	cmp	r3, #117	; 0x75
   23348:	1a000020 	bne	233d0 <lightset::get_direction(char const*)+0xcc>
   2334c:	e5d00004 	ldrb	r0, [r0, #4]
   23350:	e3800020 	orr	r0, r0, #32
   23354:	e2500074 	subs	r0, r0, #116	; 0x74
   23358:	13a00001 	movne	r0, #1
   2335c:	e12fff1e 	bx	lr
   23360:	e3530064 	cmp	r3, #100	; 0x64
   23364:	1a000019 	bne	233d0 <lightset::get_direction(char const*)+0xcc>
   23368:	e5d03001 	ldrb	r3, [r0, #1]
   2336c:	e3833020 	orr	r3, r3, #32
   23370:	e3530069 	cmp	r3, #105	; 0x69
   23374:	1a000015 	bne	233d0 <lightset::get_direction(char const*)+0xcc>
   23378:	e5d03002 	ldrb	r3, [r0, #2]
   2337c:	e3833020 	orr	r3, r3, #32
   23380:	e3530073 	cmp	r3, #115	; 0x73
   23384:	1a000011 	bne	233d0 <lightset::get_direction(char const*)+0xcc>
   23388:	e5d03003 	ldrb	r3, [r0, #3]
   2338c:	e3833020 	orr	r3, r3, #32
   23390:	e3530061 	cmp	r3, #97	; 0x61
   23394:	1a00000d 	bne	233d0 <lightset::get_direction(char const*)+0xcc>
   23398:	e5d03004 	ldrb	r3, [r0, #4]
   2339c:	e3833020 	orr	r3, r3, #32
   233a0:	e3530062 	cmp	r3, #98	; 0x62
   233a4:	1a000009 	bne	233d0 <lightset::get_direction(char const*)+0xcc>
   233a8:	e5d03005 	ldrb	r3, [r0, #5]
   233ac:	e3833020 	orr	r3, r3, #32
   233b0:	e353006c 	cmp	r3, #108	; 0x6c
   233b4:	1a000005 	bne	233d0 <lightset::get_direction(char const*)+0xcc>
   233b8:	e5d03006 	ldrb	r3, [r0, #6]
   233bc:	e3833020 	orr	r3, r3, #32
   233c0:	e3530065 	cmp	r3, #101	; 0x65
   233c4:	13a00001 	movne	r0, #1
   233c8:	03a00002 	moveq	r0, #2
   233cc:	e12fff1e 	bx	lr
   233d0:	e3a00001 	mov	r0, #1
   233d4:	e12fff1e 	bx	lr

000233d8 <lightset::get_direction(lightset::PortDir)>:
   233d8:	e2502000 	subs	r2, r0, #0
   233dc:	0a000004 	beq	233f4 <lightset::get_direction(lightset::PortDir)+0x1c>
   233e0:	e59f3014 	ldr	r3, [pc, #20]	; 233fc <lightset::get_direction(lightset::PortDir)+0x24>
   233e4:	e3520002 	cmp	r2, #2
   233e8:	e59f0010 	ldr	r0, [pc, #16]	; 23400 <lightset::get_direction(lightset::PortDir)+0x28>
   233ec:	11a00003 	movne	r0, r3
   233f0:	e12fff1e 	bx	lr
   233f4:	e59f0008 	ldr	r0, [pc, #8]	; 23404 <lightset::get_direction(lightset::PortDir)+0x2c>
   233f8:	e12fff1e 	bx	lr
   233fc:	00046c9c 	.word	0x00046c9c
   23400:	00046ca9 	.word	0x00046ca9
   23404:	00046ca3 	.word	0x00046ca3

00023408 <lightset::get_failsafe(char const*)>:
   23408:	e92d4010 	push	{r4, lr}
   2340c:	e3a02004 	mov	r2, #4
   23410:	e59f106c 	ldr	r1, [pc, #108]	; 23484 <lightset::get_failsafe(char const*)+0x7c>
   23414:	e1a04000 	mov	r4, r0
   23418:	ebffb826 	bl	114b8 <memcmp@plt>
   2341c:	e3500000 	cmp	r0, #0
   23420:	08bd8010 	popeq	{r4, pc}
   23424:	e3a02003 	mov	r2, #3
   23428:	e59f1058 	ldr	r1, [pc, #88]	; 23488 <lightset::get_failsafe(char const*)+0x80>
   2342c:	e1a00004 	mov	r0, r4
   23430:	ebffb820 	bl	114b8 <memcmp@plt>
   23434:	e3500000 	cmp	r0, #0
   23438:	0a00000d 	beq	23474 <lightset::get_failsafe(char const*)+0x6c>
   2343c:	e3a02002 	mov	r2, #2
   23440:	e59f1044 	ldr	r1, [pc, #68]	; 2348c <lightset::get_failsafe(char const*)+0x84>
   23444:	e1a00004 	mov	r0, r4
   23448:	ebffb81a 	bl	114b8 <memcmp@plt>
   2344c:	e3500000 	cmp	r0, #0
   23450:	0a000009 	beq	2347c <lightset::get_failsafe(char const*)+0x74>
   23454:	e3a02008 	mov	r2, #8
   23458:	e59f1030 	ldr	r1, [pc, #48]	; 23490 <lightset::get_failsafe(char const*)+0x88>
   2345c:	e1a00004 	mov	r0, r4
   23460:	ebffb814 	bl	114b8 <memcmp@plt>
   23464:	e3500000 	cmp	r0, #0
   23468:	13a00000 	movne	r0, #0
   2346c:	03a00003 	moveq	r0, #3
   23470:	e8bd8010 	pop	{r4, pc}
   23474:	e3a00001 	mov	r0, #1
   23478:	e8bd8010 	pop	{r4, pc}
   2347c:	e3a00002 	mov	r0, #2
   23480:	e8bd8010 	pop	{r4, pc}
   23484:	00046cb1 	.word	0x00046cb1
   23488:	00046cb6 	.word	0x00046cb6
   2348c:	00046cba 	.word	0x00046cba
   23490:	00046cbd 	.word	0x00046cbd

00023494 <lightset::get_failsafe(lightset::FailSafe)>:
   23494:	e59f3004 	ldr	r3, [pc, #4]	; 234a0 <lightset::get_failsafe(lightset::FailSafe)+0xc>
   23498:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   2349c:	e12fff1e 	bx	lr
   234a0:	00046d04 	.word	0x00046d04

000234a4 <artnetparams::portdir_shif_right(unsigned int, unsigned int)>:
   234a4:	e1a01081 	lsl	r1, r1, #1
   234a8:	e1a00130 	lsr	r0, r0, r1
   234ac:	e2000003 	and	r0, r0, #3
   234b0:	e12fff1e 	bx	lr

000234b4 <artnetnode::convert_failsafe(lightset::FailSafe)>:
   234b4:	e2800008 	add	r0, r0, #8
   234b8:	e6ef0070 	uxtb	r0, r0
   234bc:	e12fff1e 	bx	lr

000234c0 <ArtNetNode::Get()>:
   234c0:	e59f3004 	ldr	r3, [pc, #4]	; 234cc <ArtNetNode::Get()+0xc>
   234c4:	e5930000 	ldr	r0, [r3]
   234c8:	e12fff1e 	bx	lr
   234cc:	0005dbfc 	.word	0x0005dbfc

000234d0 <int PropertiesBuilder::add_part<char const*>(char*, unsigned int, char const*, char const*, bool, unsigned int)>:
   234d0:	e5ddc004 	ldrb	ip, [sp, #4]
   234d4:	e58dc004 	str	ip, [sp, #4]
   234d8:	eaffe367 	b	1c27c <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)>

000234dc <artnetparams::portdir_shift_left(lightset::PortDir, unsigned int)>:
   234dc:	e1a01081 	lsl	r1, r1, #1
   234e0:	e2000003 	and	r0, r0, #3
   234e4:	e1a00110 	lsl	r0, r0, r1
   234e8:	e6ff0070 	uxth	r0, r0
   234ec:	e12fff1e 	bx	lr

000234f0 <artnetparams::portdir_clear(unsigned int)>:
   234f0:	e3a03003 	mov	r3, #3
   234f4:	e1a00080 	lsl	r0, r0, #1
   234f8:	e1e00013 	mvn	r0, r3, lsl r0
   234fc:	e6ff0070 	uxth	r0, r0
   23500:	e12fff1e 	bx	lr

00023504 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
   23504:	e92d4070 	push	{r4, r5, r6, lr}
   23508:	e3a02087 	mov	r2, #135	; 0x87
   2350c:	e1a04000 	mov	r4, r0
   23510:	e4801004 	str	r1, [r0], #4
   23514:	e3a01000 	mov	r1, #0
   23518:	ebffb753 	bl	1126c <memset@plt>
   2351c:	e3a03001 	mov	r3, #1
   23520:	e5c4306b 	strb	r3, [r4, #107]	; 0x6b
   23524:	e59f3044 	ldr	r3, [pc, #68]	; 23570 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x6c>
   23528:	e1c436bc 	strh	r3, [r4, #108]	; 0x6c
   2352c:	e3a03004 	mov	r3, #4
   23530:	e5c4306e 	strb	r3, [r4, #110]	; 0x6e
   23534:	e3a03055 	mov	r3, #85	; 0x55
   23538:	e5c43079 	strb	r3, [r4, #121]	; 0x79
   2353c:	e3a03000 	mov	r3, #0
   23540:	e5c4307a 	strb	r3, [r4, #122]	; 0x7a
   23544:	ebffffdd 	bl	234c0 <ArtNetNode::Get()>
   23548:	e2841010 	add	r1, r4, #16
   2354c:	e1a05000 	mov	r5, r0
   23550:	ebfff060 	bl	1f6d8 <ArtNetNode::GetShortNameDefault(char*)>
   23554:	e1a00005 	mov	r0, r5
   23558:	e2841022 	add	r1, r4, #34	; 0x22
   2355c:	ebfff0c2 	bl	1f86c <ArtNetNode::GetLongNameDefault(char*)>
   23560:	e3a03000 	mov	r3, #0
   23564:	e5c4300a 	strb	r3, [r4, #10]
   23568:	e1a00004 	mov	r0, r4
   2356c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23570:	00000302 	.word	0x00000302

00023574 <ArtNetParams::Load()>:
   23574:	e3a03000 	mov	r3, #0
   23578:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
   2357c:	e1a02000 	mov	r2, r0
   23580:	e5803004 	str	r3, [r0, #4]
   23584:	e1c036b2 	strh	r3, [r0, #98]	; 0x62
   23588:	e1a04000 	mov	r4, r0
   2358c:	e59f1068 	ldr	r1, [pc, #104]	; 235fc <ArtNetParams::Load()+0x88>
   23590:	e1a0000d 	mov	r0, sp
   23594:	eb006287 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   23598:	e59f1060 	ldr	r1, [pc, #96]	; 23600 <ArtNetParams::Load()+0x8c>
   2359c:	e1a0000d 	mov	r0, sp
   235a0:	eb0062a4 	bl	3c038 <ReadConfigFile::Read(char const*)>
   235a4:	e2505000 	subs	r5, r0, #0
   235a8:	e5940000 	ldr	r0, [r4]
   235ac:	0a00000a 	beq	235dc <ArtNetParams::Load()+0x68>
   235b0:	e3500000 	cmp	r0, #0
   235b4:	0a000003 	beq	235c8 <ArtNetParams::Load()+0x54>
   235b8:	e5903000 	ldr	r3, [r0]
   235bc:	e2841004 	add	r1, r4, #4
   235c0:	e5933008 	ldr	r3, [r3, #8]
   235c4:	e12fff33 	blx	r3
   235c8:	e1a0000d 	mov	r0, sp
   235cc:	eb00628a 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   235d0:	e1a00005 	mov	r0, r5
   235d4:	e28dd00c 	add	sp, sp, #12
   235d8:	e8bd8030 	pop	{r4, r5, pc}
   235dc:	e3500000 	cmp	r0, #0
   235e0:	0afffff8 	beq	235c8 <ArtNetParams::Load()+0x54>
   235e4:	e5903000 	ldr	r3, [r0]
   235e8:	e2841004 	add	r1, r4, #4
   235ec:	e3a05001 	mov	r5, #1
   235f0:	e593300c 	ldr	r3, [r3, #12]
   235f4:	e12fff33 	blx	r3
   235f8:	eafffff2 	b	235c8 <ArtNetParams::Load()+0x54>
   235fc:	00023a3c 	.word	0x00023a3c
   23600:	00046dfc 	.word	0x00046dfc

00023604 <ArtNetParams::Load(char const*, unsigned int)>:
   23604:	e5903000 	ldr	r3, [r0]
   23608:	e3530000 	cmp	r3, #0
   2360c:	012fff1e 	bxeq	lr
   23610:	e3a03000 	mov	r3, #0
   23614:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   23618:	e1a06002 	mov	r6, r2
   2361c:	e5803004 	str	r3, [r0, #4]
   23620:	e1c036b2 	strh	r3, [r0, #98]	; 0x62
   23624:	e1a05001 	mov	r5, r1
   23628:	e1a04000 	mov	r4, r0
   2362c:	e1a02000 	mov	r2, r0
   23630:	e59f1038 	ldr	r1, [pc, #56]	; 23670 <ArtNetParams::Load(char const*, unsigned int)+0x6c>
   23634:	e1a0000d 	mov	r0, sp
   23638:	eb00625e 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   2363c:	e1a02006 	mov	r2, r6
   23640:	e1a01005 	mov	r1, r5
   23644:	e1a0000d 	mov	r0, sp
   23648:	eb0062c5 	bl	3c164 <ReadConfigFile::Read(char const*, unsigned int)>
   2364c:	e1a01004 	mov	r1, r4
   23650:	e4910004 	ldr	r0, [r1], #4
   23654:	e5903000 	ldr	r3, [r0]
   23658:	e5933008 	ldr	r3, [r3, #8]
   2365c:	e12fff33 	blx	r3
   23660:	e1a0000d 	mov	r0, sp
   23664:	eb006264 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   23668:	e28dd008 	add	sp, sp, #8
   2366c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23670:	00023a3c 	.word	0x00023a3c

00023674 <ArtNetParams::SetBool(unsigned char, unsigned int)>:
   23674:	e5903004 	ldr	r3, [r0, #4]
   23678:	e3510000 	cmp	r1, #0
   2367c:	11833002 	orrne	r3, r3, r2
   23680:	01c33002 	biceq	r3, r3, r2
   23684:	e5803004 	str	r3, [r0, #4]
   23688:	e12fff1e 	bx	lr

0002368c <ArtNetParams::callbackFunction(char const*)>:
   2368c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23690:	e24dd054 	sub	sp, sp, #84	; 0x54
   23694:	e1a06001 	mov	r6, r1
   23698:	e3a03008 	mov	r3, #8
   2369c:	e58d300c 	str	r3, [sp, #12]
   236a0:	e1a04000 	mov	r4, r0
   236a4:	e28d300c 	add	r3, sp, #12
   236a8:	e28d2010 	add	r2, sp, #16
   236ac:	e59f1358 	ldr	r1, [pc, #856]	; 23a0c <ArtNetParams::callbackFunction(char const*)+0x380>
   236b0:	e1a00006 	mov	r0, r6
   236b4:	eb005fce 	bl	3b5f4 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
   236b8:	e3500000 	cmp	r0, #0
   236bc:	1a000009 	bne	236e8 <ArtNetParams::callbackFunction(char const*)+0x5c>
   236c0:	e28d0010 	add	r0, sp, #16
   236c4:	ebffff4f 	bl	23408 <lightset::get_failsafe(char const*)>
   236c8:	e5943004 	ldr	r3, [r4, #4]
   236cc:	e3500000 	cmp	r0, #0
   236d0:	03c33010 	biceq	r3, r3, #16
   236d4:	13833010 	orrne	r3, r3, #16
   236d8:	e5843004 	str	r3, [r4, #4]
   236dc:	e5c4000a 	strb	r0, [r4, #10]
   236e0:	e28dd054 	add	sp, sp, #84	; 0x54
   236e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   236e8:	e3a03011 	mov	r3, #17
   236ec:	e2845010 	add	r5, r4, #16
   236f0:	e58d300c 	str	r3, [sp, #12]
   236f4:	e1a02005 	mov	r2, r5
   236f8:	e28d300c 	add	r3, sp, #12
   236fc:	e59f130c 	ldr	r1, [pc, #780]	; 23a10 <ArtNetParams::callbackFunction(char const*)+0x384>
   23700:	e1a00006 	mov	r0, r6
   23704:	eb005fba 	bl	3b5f4 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
   23708:	e3500000 	cmp	r0, #0
   2370c:	1a00000e 	bne	2374c <ArtNetParams::callbackFunction(char const*)+0xc0>
   23710:	e59d300c 	ldr	r3, [sp, #12]
   23714:	e0843003 	add	r3, r4, r3
   23718:	e5c30010 	strb	r0, [r3, #16]
   2371c:	ebffff67 	bl	234c0 <ArtNetNode::Get()>
   23720:	e28d1010 	add	r1, sp, #16
   23724:	ebffefeb 	bl	1f6d8 <ArtNetNode::GetShortNameDefault(char*)>
   23728:	e28d1010 	add	r1, sp, #16
   2372c:	e1a00005 	mov	r0, r5
   23730:	ebffb751 	bl	1147c <strcmp@plt>
   23734:	e5943004 	ldr	r3, [r4, #4]
   23738:	e3500000 	cmp	r0, #0
   2373c:	03c33002 	biceq	r3, r3, #2
   23740:	13833002 	orrne	r3, r3, #2
   23744:	e5843004 	str	r3, [r4, #4]
   23748:	eaffffe4 	b	236e0 <ArtNetParams::callbackFunction(char const*)+0x54>
   2374c:	e3a0303f 	mov	r3, #63	; 0x3f
   23750:	e2845022 	add	r5, r4, #34	; 0x22
   23754:	e58d300c 	str	r3, [sp, #12]
   23758:	e1a02005 	mov	r2, r5
   2375c:	e28d300c 	add	r3, sp, #12
   23760:	e59f12ac 	ldr	r1, [pc, #684]	; 23a14 <ArtNetParams::callbackFunction(char const*)+0x388>
   23764:	e1a00006 	mov	r0, r6
   23768:	eb005fa1 	bl	3b5f4 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
   2376c:	e3500000 	cmp	r0, #0
   23770:	1a00000d 	bne	237ac <ArtNetParams::callbackFunction(char const*)+0x120>
   23774:	e59d300c 	ldr	r3, [sp, #12]
   23778:	e0843003 	add	r3, r4, r3
   2377c:	e5c30022 	strb	r0, [r3, #34]	; 0x22
   23780:	ebffff4e 	bl	234c0 <ArtNetNode::Get()>
   23784:	e28d1010 	add	r1, sp, #16
   23788:	ebfff037 	bl	1f86c <ArtNetNode::GetLongNameDefault(char*)>
   2378c:	e28d1010 	add	r1, sp, #16
   23790:	e1a00005 	mov	r0, r5
   23794:	ebffb738 	bl	1147c <strcmp@plt>
   23798:	e5943004 	ldr	r3, [r4, #4]
   2379c:	e3500000 	cmp	r0, #0
   237a0:	03c33001 	biceq	r3, r3, #1
   237a4:	13833001 	orrne	r3, r3, #1
   237a8:	eaffffe5 	b	23744 <ArtNetParams::callbackFunction(char const*)+0xb8>
   237ac:	e28d200b 	add	r2, sp, #11
   237b0:	e59f1260 	ldr	r1, [pc, #608]	; 23a18 <ArtNetParams::callbackFunction(char const*)+0x38c>
   237b4:	e1a00006 	mov	r0, r6
   237b8:	eb006121 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   237bc:	e3500000 	cmp	r0, #0
   237c0:	1a000006 	bne	237e0 <ArtNetParams::callbackFunction(char const*)+0x154>
   237c4:	e5dd200b 	ldrb	r2, [sp, #11]
   237c8:	e5943004 	ldr	r3, [r4, #4]
   237cc:	e3520000 	cmp	r2, #0
   237d0:	e5c42008 	strb	r2, [r4, #8]
   237d4:	13833004 	orrne	r3, r3, #4
   237d8:	03c33004 	biceq	r3, r3, #4
   237dc:	eaffffd8 	b	23744 <ArtNetParams::callbackFunction(char const*)+0xb8>
   237e0:	e28d200b 	add	r2, sp, #11
   237e4:	e59f1230 	ldr	r1, [pc, #560]	; 23a1c <ArtNetParams::callbackFunction(char const*)+0x390>
   237e8:	e1a00006 	mov	r0, r6
   237ec:	eb006114 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   237f0:	e3500000 	cmp	r0, #0
   237f4:	1a000006 	bne	23814 <ArtNetParams::callbackFunction(char const*)+0x188>
   237f8:	e5dd200b 	ldrb	r2, [sp, #11]
   237fc:	e5943004 	ldr	r3, [r4, #4]
   23800:	e3520000 	cmp	r2, #0
   23804:	e5c42009 	strb	r2, [r4, #9]
   23808:	13833008 	orrne	r3, r3, #8
   2380c:	03c33008 	biceq	r3, r3, #8
   23810:	eaffffcb 	b	23744 <ArtNetParams::callbackFunction(char const*)+0xb8>
   23814:	e59f8204 	ldr	r8, [pc, #516]	; 23a20 <ArtNetParams::callbackFunction(char const*)+0x394>
   23818:	e59fa204 	ldr	sl, [pc, #516]	; 23a24 <ArtNetParams::callbackFunction(char const*)+0x398>
   2381c:	e59fb204 	ldr	fp, [pc, #516]	; 23a28 <ArtNetParams::callbackFunction(char const*)+0x39c>
   23820:	e3a05000 	mov	r5, #0
   23824:	e28d200b 	add	r2, sp, #11
   23828:	e1a01008 	mov	r1, r8
   2382c:	e1a00006 	mov	r0, r6
   23830:	eb006103 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   23834:	e3500000 	cmp	r0, #0
   23838:	1a00000b 	bne	2386c <ArtNetParams::callbackFunction(char const*)+0x1e0>
   2383c:	e5dd000b 	ldrb	r0, [sp, #11]
   23840:	e3a03a02 	mov	r3, #8192	; 0x2000
   23844:	e5942004 	ldr	r2, [r4, #4]
   23848:	e350000f 	cmp	r0, #15
   2384c:	e1a03513 	lsl	r3, r3, r5
   23850:	e0841005 	add	r1, r4, r5
   23854:	82855001 	addhi	r5, r5, #1
   23858:	95c1006b 	strbls	r0, [r1, #107]	; 0x6b
   2385c:	91833002 	orrls	r3, r3, r2
   23860:	85c1506b 	strbhi	r5, [r1, #107]	; 0x6b
   23864:	81c23003 	bichi	r3, r2, r3
   23868:	eaffffb5 	b	23744 <ArtNetParams::callbackFunction(char const*)+0xb8>
   2386c:	e3a07012 	mov	r7, #18
   23870:	e59f11b4 	ldr	r1, [pc, #436]	; 23a2c <ArtNetParams::callbackFunction(char const*)+0x3a0>
   23874:	e0070597 	mul	r7, r7, r5
   23878:	e3a03003 	mov	r3, #3
   2387c:	e58d300c 	str	r3, [sp, #12]
   23880:	e28d2010 	add	r2, sp, #16
   23884:	e28d300c 	add	r3, sp, #12
   23888:	e0811007 	add	r1, r1, r7
   2388c:	e1a00006 	mov	r0, r6
   23890:	eb005f57 	bl	3b5f4 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
   23894:	e2502000 	subs	r2, r0, #0
   23898:	1a00000b 	bne	238cc <ArtNetParams::callbackFunction(char const*)+0x240>
   2389c:	e28d0010 	add	r0, sp, #16
   238a0:	ebfffe77 	bl	23284 <lightset::get_merge_mode(char const*)>
   238a4:	e3a03701 	mov	r3, #262144	; 0x40000
   238a8:	e5941004 	ldr	r1, [r4, #4]
   238ac:	e1a03513 	lsl	r3, r3, r5
   238b0:	e0845005 	add	r5, r4, r5
   238b4:	e3500001 	cmp	r0, #1
   238b8:	05c50070 	strbeq	r0, [r5, #112]	; 0x70
   238bc:	01833001 	orreq	r3, r3, r1
   238c0:	15c52070 	strbne	r2, [r5, #112]	; 0x70
   238c4:	11c13003 	bicne	r3, r1, r3
   238c8:	eaffff9d 	b	23744 <ArtNetParams::callbackFunction(char const*)+0xb8>
   238cc:	e3a09004 	mov	r9, #4
   238d0:	e28d300c 	add	r3, sp, #12
   238d4:	e28d2010 	add	r2, sp, #16
   238d8:	e08a1915 	add	r1, sl, r5, lsl r9
   238dc:	e1a00006 	mov	r0, r6
   238e0:	e58d900c 	str	r9, [sp, #12]
   238e4:	eb005f42 	bl	3b5f4 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
   238e8:	e2503000 	subs	r3, r0, #0
   238ec:	1a000011 	bne	23938 <ArtNetParams::callbackFunction(char const*)+0x2ac>
   238f0:	e1a02009 	mov	r2, r9
   238f4:	e59f1134 	ldr	r1, [pc, #308]	; 23a30 <ArtNetParams::callbackFunction(char const*)+0x3a4>
   238f8:	e28d0010 	add	r0, sp, #16
   238fc:	e58d3004 	str	r3, [sp, #4]
   23900:	ebffb6ec 	bl	114b8 <memcmp@plt>
   23904:	e3a01502 	mov	r1, #8388608	; 0x800000
   23908:	e5942004 	ldr	r2, [r4, #4]
   2390c:	e1a01511 	lsl	r1, r1, r5
   23910:	e59d3004 	ldr	r3, [sp, #4]
   23914:	e0845005 	add	r5, r4, r5
   23918:	e3500000 	cmp	r0, #0
   2391c:	03a03001 	moveq	r3, #1
   23920:	01822001 	orreq	r2, r2, r1
   23924:	11c22001 	bicne	r2, r2, r1
   23928:	05c53075 	strbeq	r3, [r5, #117]	; 0x75
   2392c:	15c53075 	strbne	r3, [r5, #117]	; 0x75
   23930:	e5842004 	str	r2, [r4, #4]
   23934:	eaffff69 	b	236e0 <ArtNetParams::callbackFunction(char const*)+0x54>
   23938:	e3a03007 	mov	r3, #7
   2393c:	e58d300c 	str	r3, [sp, #12]
   23940:	e28d2010 	add	r2, sp, #16
   23944:	e28d300c 	add	r3, sp, #12
   23948:	e08b1007 	add	r1, fp, r7
   2394c:	e1a00006 	mov	r0, r6
   23950:	eb005f27 	bl	3b5f4 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
   23954:	e3500000 	cmp	r0, #0
   23958:	1a000015 	bne	239b4 <ArtNetParams::callbackFunction(char const*)+0x328>
   2395c:	e28d0010 	add	r0, sp, #16
   23960:	ebfffe67 	bl	23304 <lightset::get_direction(char const*)>
   23964:	e1a02000 	mov	r2, r0
   23968:	e1a00005 	mov	r0, r5
   2396c:	ebfffedf 	bl	234f0 <artnetparams::portdir_clear(unsigned int)>
   23970:	e5943078 	ldr	r3, [r4, #120]	; 0x78
   23974:	e0003423 	and	r3, r0, r3, lsr #8
   23978:	e3520002 	cmp	r2, #2
   2397c:	e6ff3073 	uxth	r3, r3
   23980:	e5c43079 	strb	r3, [r4, #121]	; 0x79
   23984:	e1a01423 	lsr	r1, r3, #8
   23988:	e5c4107a 	strb	r1, [r4, #122]	; 0x7a
   2398c:	01a00002 	moveq	r0, r2
   23990:	e1a01005 	mov	r1, r5
   23994:	13a00001 	movne	r0, #1
   23998:	ebfffecf 	bl	234dc <artnetparams::portdir_shift_left(lightset::PortDir, unsigned int)>
   2399c:	e1830000 	orr	r0, r3, r0
   239a0:	e6ff0070 	uxth	r0, r0
   239a4:	e5c40079 	strb	r0, [r4, #121]	; 0x79
   239a8:	e1a00420 	lsr	r0, r0, #8
   239ac:	e5c4007a 	strb	r0, [r4, #122]	; 0x7a
   239b0:	eaffff4a 	b	236e0 <ArtNetParams::callbackFunction(char const*)+0x54>
   239b4:	e2855001 	add	r5, r5, #1
   239b8:	e3550004 	cmp	r5, #4
   239bc:	e2888010 	add	r8, r8, #16
   239c0:	1affff97 	bne	23824 <ArtNetParams::callbackFunction(char const*)+0x198>
   239c4:	e28d200b 	add	r2, sp, #11
   239c8:	e59f1064 	ldr	r1, [pc, #100]	; 23a34 <ArtNetParams::callbackFunction(char const*)+0x3a8>
   239cc:	e1a00006 	mov	r0, r6
   239d0:	eb00609b 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   239d4:	e3500000 	cmp	r0, #0
   239d8:	03a02302 	moveq	r2, #134217728	; 0x8000000
   239dc:	0a000006 	beq	239fc <ArtNetParams::callbackFunction(char const*)+0x370>
   239e0:	e28d200b 	add	r2, sp, #11
   239e4:	e59f104c 	ldr	r1, [pc, #76]	; 23a38 <ArtNetParams::callbackFunction(char const*)+0x3ac>
   239e8:	e1a00006 	mov	r0, r6
   239ec:	eb006094 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   239f0:	e3500000 	cmp	r0, #0
   239f4:	1affff39 	bne	236e0 <ArtNetParams::callbackFunction(char const*)+0x54>
   239f8:	e3a02a01 	mov	r2, #4096	; 0x1000
   239fc:	e5dd100b 	ldrb	r1, [sp, #11]
   23a00:	e1a00004 	mov	r0, r4
   23a04:	ebffff1a 	bl	23674 <ArtNetParams::SetBool(unsigned char, unsigned int)>
   23a08:	eaffff34 	b	236e0 <ArtNetParams::callbackFunction(char const*)+0x54>
   23a0c:	0004a59c 	.word	0x0004a59c
   23a10:	00046e20 	.word	0x00046e20
   23a14:	00046e2c 	.word	0x00046e2c
   23a18:	00046e08 	.word	0x00046e08
   23a1c:	00046e0c 	.word	0x00046e0c
   23a20:	0004a490 	.word	0x0004a490
   23a24:	00046ee0 	.word	0x00046ee0
   23a28:	0004a518 	.word	0x0004a518
   23a2c:	0004a4d0 	.word	0x0004a4d0
   23a30:	0004689c 	.word	0x0004689c
   23a34:	00046f20 	.word	0x00046f20
   23a38:	0004a584 	.word	0x0004a584

00023a3c <ArtNetParams::staticCallbackFunction(void*, char const*)>:
   23a3c:	eaffff12 	b	2368c <ArtNetParams::callbackFunction(char const*)>

00023a40 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
   23a40:	e3510000 	cmp	r1, #0
   23a44:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a48:	e1a04000 	mov	r4, r0
   23a4c:	e24dd01c 	sub	sp, sp, #28
   23a50:	e1a05002 	mov	r5, r2
   23a54:	e1a06003 	mov	r6, r3
   23a58:	e2800004 	add	r0, r0, #4
   23a5c:	0a00005d 	beq	23bd8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x198>
   23a60:	e3a02087 	mov	r2, #135	; 0x87
   23a64:	ebffb666 	bl	11404 <memcpy@plt>
   23a68:	e1a03006 	mov	r3, r6
   23a6c:	e1a02005 	mov	r2, r5
   23a70:	e59f12b0 	ldr	r1, [pc, #688]	; 23d28 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e8>
   23a74:	e28d000c 	add	r0, sp, #12
   23a78:	eb006089 	bl	3bca4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
   23a7c:	e3a01001 	mov	r1, #1
   23a80:	e5940004 	ldr	r0, [r4, #4]
   23a84:	eb000182 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23a88:	e3a05001 	mov	r5, #1
   23a8c:	e2842022 	add	r2, r4, #34	; 0x22
   23a90:	e58d5000 	str	r5, [sp]
   23a94:	e59f1290 	ldr	r1, [pc, #656]	; 23d2c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ec>
   23a98:	e59f9290 	ldr	r9, [pc, #656]	; 23d30 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f0>
   23a9c:	e59fa290 	ldr	sl, [pc, #656]	; 23d34 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f4>
   23aa0:	e284806b 	add	r8, r4, #107	; 0x6b
   23aa4:	e1a03000 	mov	r3, r0
   23aa8:	e28d000c 	add	r0, sp, #12
   23aac:	eb000129 	bl	23f58 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)>
   23ab0:	e3a01002 	mov	r1, #2
   23ab4:	e5940004 	ldr	r0, [r4, #4]
   23ab8:	eb000175 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23abc:	e2842010 	add	r2, r4, #16
   23ac0:	e58d5000 	str	r5, [sp]
   23ac4:	e59f126c 	ldr	r1, [pc, #620]	; 23d38 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f8>
   23ac8:	e1a03000 	mov	r3, r0
   23acc:	e28d000c 	add	r0, sp, #12
   23ad0:	eb000120 	bl	23f58 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)>
   23ad4:	e3a01004 	mov	r1, #4
   23ad8:	e5940004 	ldr	r0, [r4, #4]
   23adc:	eb00016c 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23ae0:	e5d42008 	ldrb	r2, [r4, #8]
   23ae4:	e58d5000 	str	r5, [sp]
   23ae8:	e59f124c 	ldr	r1, [pc, #588]	; 23d3c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2fc>
   23aec:	e1a03000 	mov	r3, r0
   23af0:	e28d000c 	add	r0, sp, #12
   23af4:	eb000131 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   23af8:	e3a01008 	mov	r1, #8
   23afc:	e5940004 	ldr	r0, [r4, #4]
   23b00:	eb000163 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23b04:	e5d42009 	ldrb	r2, [r4, #9]
   23b08:	e59f1230 	ldr	r1, [pc, #560]	; 23d40 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>
   23b0c:	e58d5000 	str	r5, [sp]
   23b10:	e1a03000 	mov	r3, r0
   23b14:	e28d000c 	add	r0, sp, #12
   23b18:	eb000128 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   23b1c:	e5d4000a 	ldrb	r0, [r4, #10]
   23b20:	ebfffe5b 	bl	23494 <lightset::get_failsafe(lightset::FailSafe)>
   23b24:	e3a01010 	mov	r1, #16
   23b28:	e1a06000 	mov	r6, r0
   23b2c:	e5940004 	ldr	r0, [r4, #4]
   23b30:	eb000157 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23b34:	e58d5000 	str	r5, [sp]
   23b38:	e1a02006 	mov	r2, r6
   23b3c:	e59f1200 	ldr	r1, [pc, #512]	; 23d44 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>
   23b40:	e3a05000 	mov	r5, #0
   23b44:	e1a06009 	mov	r6, r9
   23b48:	e1a03000 	mov	r3, r0
   23b4c:	e28d000c 	add	r0, sp, #12
   23b50:	eb000100 	bl	23f58 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)>
   23b54:	e5993000 	ldr	r3, [r9]
   23b58:	e1530005 	cmp	r3, r5
   23b5c:	9a000024 	bls	23bf4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1b4>
   23b60:	e3a01a02 	mov	r1, #8192	; 0x2000
   23b64:	e5940004 	ldr	r0, [r4, #4]
   23b68:	e1a01511 	lsl	r1, r1, r5
   23b6c:	eb000148 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23b70:	e4d8b001 	ldrb	fp, [r8], #1
   23b74:	e3a07001 	mov	r7, #1
   23b78:	e08a1205 	add	r1, sl, r5, lsl #4
   23b7c:	e1a0200b 	mov	r2, fp
   23b80:	e58d7000 	str	r7, [sp]
   23b84:	e1a03000 	mov	r3, r0
   23b88:	e28d000c 	add	r0, sp, #12
   23b8c:	eb00010b 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   23b90:	e5940078 	ldr	r0, [r4, #120]	; 0x78
   23b94:	e1a01005 	mov	r1, r5
   23b98:	e1a00420 	lsr	r0, r0, #8
   23b9c:	e6ff0070 	uxth	r0, r0
   23ba0:	ebfffe3f 	bl	234a4 <artnetparams::portdir_shif_right(unsigned int, unsigned int)>
   23ba4:	e1a01000 	mov	r1, r0
   23ba8:	ebfffe0a 	bl	233d8 <lightset::get_direction(lightset::PortDir)>
   23bac:	e58d7000 	str	r7, [sp]
   23bb0:	e0513007 	subs	r3, r1, r7
   23bb4:	e1a02000 	mov	r2, r0
   23bb8:	e59f1188 	ldr	r1, [pc, #392]	; 23d48 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x308>
   23bbc:	e3a00012 	mov	r0, #18
   23bc0:	13a03001 	movne	r3, #1
   23bc4:	e0211590 	mla	r1, r0, r5, r1
   23bc8:	e28d000c 	add	r0, sp, #12
   23bcc:	eb0000e1 	bl	23f58 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)>
   23bd0:	e0855007 	add	r5, r5, r7
   23bd4:	eaffffde 	b	23b54 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x114>
   23bd8:	e5943000 	ldr	r3, [r4]
   23bdc:	e1a01000 	mov	r1, r0
   23be0:	e1a00003 	mov	r0, r3
   23be4:	e5932000 	ldr	r2, [r3]
   23be8:	e592200c 	ldr	r2, [r2, #12]
   23bec:	e12fff32 	blx	r2
   23bf0:	eaffff9c 	b	23a68 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x28>
   23bf4:	e59f1150 	ldr	r1, [pc, #336]	; 23d4c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30c>
   23bf8:	e28d000c 	add	r0, sp, #12
   23bfc:	eb006092 	bl	3be4c <PropertiesBuilder::AddComment(char const*)>
   23c00:	e59f8148 	ldr	r8, [pc, #328]	; 23d50 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x310>
   23c04:	e2847070 	add	r7, r4, #112	; 0x70
   23c08:	e3a05000 	mov	r5, #0
   23c0c:	e3a0a701 	mov	sl, #262144	; 0x40000
   23c10:	e5963000 	ldr	r3, [r6]
   23c14:	e1530005 	cmp	r3, r5
   23c18:	9a000010 	bls	23c60 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x220>
   23c1c:	e4d70001 	ldrb	r0, [r7], #1
   23c20:	e3a01000 	mov	r1, #0
   23c24:	ebfffdb5 	bl	23300 <lightset::get_merge_mode(unsigned int, bool)>
   23c28:	e1a0151a 	lsl	r1, sl, r5
   23c2c:	e1a09000 	mov	r9, r0
   23c30:	e5940004 	ldr	r0, [r4, #4]
   23c34:	eb000116 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23c38:	e3a01012 	mov	r1, #18
   23c3c:	e3a03001 	mov	r3, #1
   23c40:	e58d3000 	str	r3, [sp]
   23c44:	e0218591 	mla	r1, r1, r5, r8
   23c48:	e1a02009 	mov	r2, r9
   23c4c:	e2855001 	add	r5, r5, #1
   23c50:	e1a03000 	mov	r3, r0
   23c54:	e28d000c 	add	r0, sp, #12
   23c58:	eb0000be 	bl	23f58 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)>
   23c5c:	eaffffeb 	b	23c10 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1d0>
   23c60:	e59f10ec 	ldr	r1, [pc, #236]	; 23d54 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x314>
   23c64:	e28d000c 	add	r0, sp, #12
   23c68:	eb006077 	bl	3be4c <PropertiesBuilder::AddComment(char const*)>
   23c6c:	e59f90e4 	ldr	r9, [pc, #228]	; 23d58 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x318>
   23c70:	e2848075 	add	r8, r4, #117	; 0x75
   23c74:	e3a05000 	mov	r5, #0
   23c78:	e3a0b502 	mov	fp, #8388608	; 0x800000
   23c7c:	e5963000 	ldr	r3, [r6]
   23c80:	e5947004 	ldr	r7, [r4, #4]
   23c84:	e1530005 	cmp	r3, r5
   23c88:	9a00000f 	bls	23ccc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x28c>
   23c8c:	e4d80001 	ldrb	r0, [r8], #1
   23c90:	e3a01000 	mov	r1, #0
   23c94:	ebfffd79 	bl	23280 <artnet::get_protocol_mode(unsigned int, bool)>
   23c98:	e1a0151b 	lsl	r1, fp, r5
   23c9c:	e1a0a000 	mov	sl, r0
   23ca0:	e1a00007 	mov	r0, r7
   23ca4:	eb0000fa 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23ca8:	e3a03001 	mov	r3, #1
   23cac:	e58d3000 	str	r3, [sp]
   23cb0:	e0891205 	add	r1, r9, r5, lsl #4
   23cb4:	e1a0200a 	mov	r2, sl
   23cb8:	e2855001 	add	r5, r5, #1
   23cbc:	e1a03000 	mov	r3, r0
   23cc0:	e28d000c 	add	r0, sp, #12
   23cc4:	eb0000a3 	bl	23f58 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)>
   23cc8:	eaffffeb 	b	23c7c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x23c>
   23ccc:	e3a01302 	mov	r1, #134217728	; 0x8000000
   23cd0:	e1a00007 	mov	r0, r7
   23cd4:	eb0000ee 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23cd8:	e59f107c 	ldr	r1, [pc, #124]	; 23d5c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x31c>
   23cdc:	e1a02000 	mov	r2, r0
   23ce0:	e28d000c 	add	r0, sp, #12
   23ce4:	ebffe15d 	bl	1c260 <PropertiesBuilder::Add(char const*, bool)>
   23ce8:	e59f1070 	ldr	r1, [pc, #112]	; 23d60 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x320>
   23cec:	e28d000c 	add	r0, sp, #12
   23cf0:	eb006055 	bl	3be4c <PropertiesBuilder::AddComment(char const*)>
   23cf4:	e5940004 	ldr	r0, [r4, #4]
   23cf8:	e3a01a01 	mov	r1, #4096	; 0x1000
   23cfc:	eb0000e4 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23d00:	e59f105c 	ldr	r1, [pc, #92]	; 23d64 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x324>
   23d04:	e1a02000 	mov	r2, r0
   23d08:	e28d000c 	add	r0, sp, #12
   23d0c:	ebffe153 	bl	1c260 <PropertiesBuilder::Add(char const*, bool)>
   23d10:	e28d000c 	add	r0, sp, #12
   23d14:	ebffc26d 	bl	146d0 <PropertiesBuilder::GetSize()>
   23d18:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
   23d1c:	e5830000 	str	r0, [r3]
   23d20:	e28dd01c 	add	sp, sp, #28
   23d24:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d28:	00046dfc 	.word	0x00046dfc
   23d2c:	00046e2c 	.word	0x00046e2c
   23d30:	0005dc08 	.word	0x0005dc08
   23d34:	0004a490 	.word	0x0004a490
   23d38:	00046e20 	.word	0x00046e20
   23d3c:	00046e08 	.word	0x00046e08
   23d40:	00046e0c 	.word	0x00046e0c
   23d44:	0004a59c 	.word	0x0004a59c
   23d48:	0004a518 	.word	0x0004a518
   23d4c:	00046cec 	.word	0x00046cec
   23d50:	0004a4d0 	.word	0x0004a4d0
   23d54:	00046cf7 	.word	0x00046cf7
   23d58:	00046ee0 	.word	0x00046ee0
   23d5c:	00046f20 	.word	0x00046f20
   23d60:	00046d01 	.word	0x00046d01
   23d64:	0004a584 	.word	0x0004a584

00023d68 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
   23d68:	e590c000 	ldr	ip, [r0]
   23d6c:	e35c0000 	cmp	ip, #0
   23d70:	1a000001 	bne	23d7c <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x14>
   23d74:	e583c000 	str	ip, [r3]
   23d78:	e12fff1e 	bx	lr
   23d7c:	e1a0c003 	mov	ip, r3
   23d80:	e92d4007 	push	{r0, r1, r2, lr}
   23d84:	e1a03002 	mov	r3, r2
   23d88:	e58dc000 	str	ip, [sp]
   23d8c:	e1a02001 	mov	r2, r1
   23d90:	e3a01000 	mov	r1, #0
   23d94:	ebffff29 	bl	23a40 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
   23d98:	e28dd00c 	add	sp, sp, #12
   23d9c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00023da0 <ArtNetParams::Set(unsigned int)>:
   23da0:	e3510004 	cmp	r1, #4
   23da4:	e92d4ff7 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23da8:	e1a04000 	mov	r4, r0
   23dac:	e1a06001 	mov	r6, r1
   23db0:	8a000007 	bhi	23dd4 <ArtNetParams::Set(unsigned int)+0x34>
   23db4:	e2613004 	rsb	r3, r1, #4
   23db8:	e59f0190 	ldr	r0, [pc, #400]	; 23f50 <ArtNetParams::Set(unsigned int)+0x1b0>
   23dbc:	e28d1004 	add	r1, sp, #4
   23dc0:	e58d3004 	str	r3, [sp, #4]
   23dc4:	ebffbd7e 	bl	133c4 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>
   23dc8:	e59f3184 	ldr	r3, [pc, #388]	; 23f54 <ArtNetParams::Set(unsigned int)+0x1b4>
   23dcc:	e5902000 	ldr	r2, [r0]
   23dd0:	e5832000 	str	r2, [r3]
   23dd4:	e5947004 	ldr	r7, [r4, #4]
   23dd8:	e3570000 	cmp	r7, #0
   23ddc:	0a000059 	beq	23f48 <ArtNetParams::Set(unsigned int)+0x1a8>
   23de0:	ebfffdb6 	bl	234c0 <ArtNetNode::Get()>
   23de4:	e3a01002 	mov	r1, #2
   23de8:	e1a05000 	mov	r5, r0
   23dec:	e1a00007 	mov	r0, r7
   23df0:	eb0000a7 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23df4:	e3500000 	cmp	r0, #0
   23df8:	0a000002 	beq	23e08 <ArtNetParams::Set(unsigned int)+0x68>
   23dfc:	e2841010 	add	r1, r4, #16
   23e00:	e1a00005 	mov	r0, r5
   23e04:	ebffee5f 	bl	1f788 <ArtNetNode::SetShortName(char const*)>
   23e08:	e3a01001 	mov	r1, #1
   23e0c:	e5940004 	ldr	r0, [r4, #4]
   23e10:	eb00009f 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23e14:	e3500000 	cmp	r0, #0
   23e18:	0a000002 	beq	23e28 <ArtNetParams::Set(unsigned int)+0x88>
   23e1c:	e2841022 	add	r1, r4, #34	; 0x22
   23e20:	e1a00005 	mov	r0, r5
   23e24:	ebffeeb1 	bl	1f8f0 <ArtNetNode::SetLongName(char const*)>
   23e28:	e3a01004 	mov	r1, #4
   23e2c:	e5940004 	ldr	r0, [r4, #4]
   23e30:	eb000097 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23e34:	e3500000 	cmp	r0, #0
   23e38:	0a000003 	beq	23e4c <ArtNetParams::Set(unsigned int)+0xac>
   23e3c:	e3a02000 	mov	r2, #0
   23e40:	e5d41008 	ldrb	r1, [r4, #8]
   23e44:	e1a00005 	mov	r0, r5
   23e48:	ebfff7f9 	bl	21e34 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
   23e4c:	e3a01008 	mov	r1, #8
   23e50:	e5940004 	ldr	r0, [r4, #4]
   23e54:	eb00008e 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23e58:	e3500000 	cmp	r0, #0
   23e5c:	0a000003 	beq	23e70 <ArtNetParams::Set(unsigned int)+0xd0>
   23e60:	e3a02000 	mov	r2, #0
   23e64:	e5d41009 	ldrb	r1, [r4, #9]
   23e68:	e1a00005 	mov	r0, r5
   23e6c:	ebfff7a4 	bl	21d04 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
   23e70:	e59f90dc 	ldr	r9, [pc, #220]	; 23f54 <ArtNetParams::Set(unsigned int)+0x1b4>
   23e74:	e1a07004 	mov	r7, r4
   23e78:	e3a0a502 	mov	sl, #8388608	; 0x800000
   23e7c:	e3a0b701 	mov	fp, #262144	; 0x40000
   23e80:	e5993000 	ldr	r3, [r9]
   23e84:	e0478004 	sub	r8, r7, r4
   23e88:	e1530008 	cmp	r3, r8
   23e8c:	9a000016 	bls	23eec <ArtNetParams::Set(unsigned int)+0x14c>
   23e90:	e3560003 	cmp	r6, #3
   23e94:	8a000014 	bhi	23eec <ArtNetParams::Set(unsigned int)+0x14c>
   23e98:	e1a0181a 	lsl	r1, sl, r8
   23e9c:	e5940004 	ldr	r0, [r4, #4]
   23ea0:	eb00007b 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23ea4:	e3500000 	cmp	r0, #0
   23ea8:	0a000003 	beq	23ebc <ArtNetParams::Set(unsigned int)+0x11c>
   23eac:	e5d72075 	ldrb	r2, [r7, #117]	; 0x75
   23eb0:	e1a01006 	mov	r1, r6
   23eb4:	e1a00005 	mov	r0, r5
   23eb8:	ebfff829 	bl	21f64 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
   23ebc:	e1a0181b 	lsl	r1, fp, r8
   23ec0:	e5940004 	ldr	r0, [r4, #4]
   23ec4:	eb000072 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23ec8:	e3500000 	cmp	r0, #0
   23ecc:	0a000003 	beq	23ee0 <ArtNetParams::Set(unsigned int)+0x140>
   23ed0:	e5d72070 	ldrb	r2, [r7, #112]	; 0x70
   23ed4:	e1a01006 	mov	r1, r6
   23ed8:	e1a00005 	mov	r0, r5
   23edc:	ebfff866 	bl	2207c <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
   23ee0:	e2877001 	add	r7, r7, #1
   23ee4:	e2866001 	add	r6, r6, #1
   23ee8:	eaffffe4 	b	23e80 <ArtNetParams::Set(unsigned int)+0xe0>
   23eec:	e5d4000a 	ldrb	r0, [r4, #10]
   23ef0:	ebfffd6f 	bl	234b4 <artnetnode::convert_failsafe(lightset::FailSafe)>
   23ef4:	e1a01000 	mov	r1, r0
   23ef8:	e1a00005 	mov	r0, r5
   23efc:	ebfff89e 	bl	2217c <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
   23f00:	e3a01302 	mov	r1, #134217728	; 0x8000000
   23f04:	e5940004 	ldr	r0, [r4, #4]
   23f08:	eb000061 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23f0c:	e3500000 	cmp	r0, #0
   23f10:	0a000002 	beq	23f20 <ArtNetParams::Set(unsigned int)+0x180>
   23f14:	e3a01001 	mov	r1, #1
   23f18:	e2850070 	add	r0, r5, #112	; 0x70
   23f1c:	eb000062 	bl	240ac <ArtNetNode::SetMapUniverse0(bool) [clone .isra.2]>
   23f20:	e3a01a01 	mov	r1, #4096	; 0x1000
   23f24:	e5940004 	ldr	r0, [r4, #4]
   23f28:	eb000059 	bl	24094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>
   23f2c:	e3500000 	cmp	r0, #0
   23f30:	0a000004 	beq	23f48 <ArtNetParams::Set(unsigned int)+0x1a8>
   23f34:	e3a01001 	mov	r1, #1
   23f38:	e285008c 	add	r0, r5, #140	; 0x8c
   23f3c:	e28dd00c 	add	sp, sp, #12
   23f40:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f44:	ea000056 	b	240a4 <ArtNetNode::SetDisableMergeTimeout(bool) [clone .isra.1]>
   23f48:	e28dd00c 	add	sp, sp, #12
   23f4c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f50:	00046c68 	.word	0x00046c68
   23f54:	0005dc08 	.word	0x0005dc08

00023f58 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)>:
   23f58:	e92d407f 	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   23f5c:	e1d0e0b6 	ldrh	lr, [r0, #6]
   23f60:	e1d050b4 	ldrh	r5, [r0, #4]
   23f64:	e15e0005 	cmp	lr, r5
   23f68:	3a000002 	bcc	23f78 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x20>
   23f6c:	e3a00000 	mov	r0, #0
   23f70:	e28dd010 	add	sp, sp, #16
   23f74:	e8bd8070 	pop	{r4, r5, r6, pc}
   23f78:	e1a0c003 	mov	ip, r3
   23f7c:	e59d6020 	ldr	r6, [sp, #32]
   23f80:	e1a03001 	mov	r3, r1
   23f84:	e5901000 	ldr	r1, [r0]
   23f88:	e045500e 	sub	r5, r5, lr
   23f8c:	e88d1004 	stm	sp, {r2, ip}
   23f90:	e58d6008 	str	r6, [sp, #8]
   23f94:	e1a02005 	mov	r2, r5
   23f98:	e081100e 	add	r1, r1, lr
   23f9c:	e1a04000 	mov	r4, r0
   23fa0:	ebfffd4a 	bl	234d0 <int PropertiesBuilder::add_part<char const*>(char*, unsigned int, char const*, char const*, bool, unsigned int)>
   23fa4:	e1550000 	cmp	r5, r0
   23fa8:	baffffef 	blt	23f6c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x14>
   23fac:	e1d430b6 	ldrh	r3, [r4, #6]
   23fb0:	e0833000 	add	r3, r3, r0
   23fb4:	e1c430b6 	strh	r3, [r4, #6]
   23fb8:	e3a00001 	mov	r0, #1
   23fbc:	eaffffeb 	b	23f70 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x18>

00023fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>:
   23fc0:	e92d407f 	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   23fc4:	e1d0e0b6 	ldrh	lr, [r0, #6]
   23fc8:	e1d050b4 	ldrh	r5, [r0, #4]
   23fcc:	e15e0005 	cmp	lr, r5
   23fd0:	3a000002 	bcc	23fe0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x20>
   23fd4:	e3a00000 	mov	r0, #0
   23fd8:	e28dd010 	add	sp, sp, #16
   23fdc:	e8bd8070 	pop	{r4, r5, r6, pc}
   23fe0:	e1a0c003 	mov	ip, r3
   23fe4:	e59d6020 	ldr	r6, [sp, #32]
   23fe8:	e1a03001 	mov	r3, r1
   23fec:	e5901000 	ldr	r1, [r0]
   23ff0:	e045500e 	sub	r5, r5, lr
   23ff4:	e88d1004 	stm	sp, {r2, ip}
   23ff8:	e58d6008 	str	r6, [sp, #8]
   23ffc:	e1a02005 	mov	r2, r5
   24000:	e081100e 	add	r1, r1, lr
   24004:	e1a04000 	mov	r4, r0
   24008:	eb000006 	bl	24028 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)>
   2400c:	e1550000 	cmp	r5, r0
   24010:	baffffef 	blt	23fd4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x14>
   24014:	e1d430b6 	ldrh	r3, [r4, #6]
   24018:	e0833000 	add	r3, r3, r0
   2401c:	e1c430b6 	strh	r3, [r4, #6]
   24020:	e3a00001 	mov	r0, #1
   24024:	eaffffeb 	b	23fd8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)+0x18>

00024028 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)>:
   24028:	e92d4010 	push	{r4, lr}
   2402c:	e1a0c001 	mov	ip, r1
   24030:	e5dd400c 	ldrb	r4, [sp, #12]
   24034:	e1a01002 	mov	r1, r2
   24038:	e1a0e003 	mov	lr, r3
   2403c:	e3540000 	cmp	r4, #0
   24040:	e5dd2008 	ldrb	r2, [sp, #8]
   24044:	e5d00008 	ldrb	r0, [r0, #8]
   24048:	1a000004 	bne	24060 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x38>
   2404c:	e3500000 	cmp	r0, #0
   24050:	1a000006 	bne	24070 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x48>
   24054:	e58d2008 	str	r2, [sp, #8]
   24058:	e59f2028 	ldr	r2, [pc, #40]	; 24088 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x60>
   2405c:	ea000006 	b	2407c <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x54>
   24060:	e3500000 	cmp	r0, #0
   24064:	058d2008 	streq	r2, [sp, #8]
   24068:	059f201c 	ldreq	r2, [pc, #28]	; 2408c <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x64>
   2406c:	0a000002 	beq	2407c <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x54>
   24070:	e58d2008 	str	r2, [sp, #8]
   24074:	e59f2014 	ldr	r2, [pc, #20]	; 24090 <int PropertiesBuilder::add_part<unsigned char>(char*, unsigned int, char const*, unsigned char, bool, unsigned int)+0x68>
   24078:	e1a0300e 	mov	r3, lr
   2407c:	e1a0000c 	mov	r0, ip
   24080:	e8bd4010 	pop	{r4, lr}
   24084:	eaffb47b 	b	11278 <snprintf@plt>
   24088:	00045d88 	.word	0x00045d88
   2408c:	00047f40 	.word	0x00047f40
   24090:	00045d7f 	.word	0x00045d7f

00024094 <ArtNetParams::isMaskSet(unsigned int) const [clone .isra.0]>:
   24094:	e1d13000 	bics	r3, r1, r0
   24098:	03a00001 	moveq	r0, #1
   2409c:	13a00000 	movne	r0, #0
   240a0:	e12fff1e 	bx	lr

000240a4 <ArtNetNode::SetDisableMergeTimeout(bool) [clone .isra.1]>:
   240a4:	e5c01000 	strb	r1, [r0]
   240a8:	e12fff1e 	bx	lr

000240ac <ArtNetNode::SetMapUniverse0(bool) [clone .isra.2]>:
   240ac:	e5c01000 	strb	r1, [r0]
   240b0:	e12fff1e 	bx	lr

000240b4 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
   240b4:	e92d4800 	push	{fp, lr}
   240b8:	e28db004 	add	fp, sp, #4
   240bc:	e24dd018 	sub	sp, sp, #24
   240c0:	e50b0008 	str	r0, [fp, #-8]
   240c4:	e50b100c 	str	r1, [fp, #-12]
   240c8:	e50b2010 	str	r2, [fp, #-16]
   240cc:	ebffe7c7 	bl	1dff0 <lightset::Data::Get()>
   240d0:	e3a03001 	mov	r3, #1
   240d4:	e58d3000 	str	r3, [sp]
   240d8:	e51b3010 	ldr	r3, [fp, #-16]
   240dc:	e51b200c 	ldr	r2, [fp, #-12]
   240e0:	e51b1008 	ldr	r1, [fp, #-8]
   240e4:	eb000034 	bl	241bc <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
   240e8:	e1a00000 	nop			; (mov r0, r0)
   240ec:	e24bd004 	sub	sp, fp, #4
   240f0:	e8bd8800 	pop	{fp, pc}

000240f4 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
   240f4:	e92d4800 	push	{fp, lr}
   240f8:	e28db004 	add	fp, sp, #4
   240fc:	e24dd018 	sub	sp, sp, #24
   24100:	e50b0008 	str	r0, [fp, #-8]
   24104:	e50b100c 	str	r1, [fp, #-12]
   24108:	e50b2010 	str	r2, [fp, #-16]
   2410c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   24110:	ebffe7b6 	bl	1dff0 <lightset::Data::Get()>
   24114:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   24118:	e58d3000 	str	r3, [sp]
   2411c:	e51b3010 	ldr	r3, [fp, #-16]
   24120:	e51b200c 	ldr	r2, [fp, #-12]
   24124:	e51b1008 	ldr	r1, [fp, #-8]
   24128:	eb000023 	bl	241bc <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
   2412c:	e1a00000 	nop			; (mov r0, r0)
   24130:	e24bd004 	sub	sp, fp, #4
   24134:	e8bd8800 	pop	{fp, pc}

00024138 <lightset::Data::SetSourceB(unsigned int, unsigned char const*, unsigned int)>:
   24138:	e92d4800 	push	{fp, lr}
   2413c:	e28db004 	add	fp, sp, #4
   24140:	e24dd018 	sub	sp, sp, #24
   24144:	e50b0008 	str	r0, [fp, #-8]
   24148:	e50b100c 	str	r1, [fp, #-12]
   2414c:	e50b2010 	str	r2, [fp, #-16]
   24150:	ebffe7a6 	bl	1dff0 <lightset::Data::Get()>
   24154:	e3a03001 	mov	r3, #1
   24158:	e58d3000 	str	r3, [sp]
   2415c:	e51b3010 	ldr	r3, [fp, #-16]
   24160:	e51b200c 	ldr	r2, [fp, #-12]
   24164:	e51b1008 	ldr	r1, [fp, #-8]
   24168:	eb00007c 	bl	24360 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
   2416c:	e1a00000 	nop			; (mov r0, r0)
   24170:	e24bd004 	sub	sp, fp, #4
   24174:	e8bd8800 	pop	{fp, pc}

00024178 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
   24178:	e92d4800 	push	{fp, lr}
   2417c:	e28db004 	add	fp, sp, #4
   24180:	e24dd018 	sub	sp, sp, #24
   24184:	e50b0008 	str	r0, [fp, #-8]
   24188:	e50b100c 	str	r1, [fp, #-12]
   2418c:	e50b2010 	str	r2, [fp, #-16]
   24190:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   24194:	ebffe795 	bl	1dff0 <lightset::Data::Get()>
   24198:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2419c:	e58d3000 	str	r3, [sp]
   241a0:	e51b3010 	ldr	r3, [fp, #-16]
   241a4:	e51b200c 	ldr	r2, [fp, #-12]
   241a8:	e51b1008 	ldr	r1, [fp, #-8]
   241ac:	eb00006b 	bl	24360 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
   241b0:	e1a00000 	nop			; (mov r0, r0)
   241b4:	e24bd004 	sub	sp, fp, #4
   241b8:	e8bd8800 	pop	{fp, pc}

000241bc <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
   241bc:	e92d4800 	push	{fp, lr}
   241c0:	e28db004 	add	fp, sp, #4
   241c4:	e24dd018 	sub	sp, sp, #24
   241c8:	e50b0010 	str	r0, [fp, #-16]
   241cc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   241d0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   241d4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   241d8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   241dc:	e1a03002 	mov	r3, r2
   241e0:	e1a03083 	lsl	r3, r3, #1
   241e4:	e0833002 	add	r3, r3, r2
   241e8:	e1a03383 	lsl	r3, r3, #7
   241ec:	e0833002 	add	r3, r3, r2
   241f0:	e1a03103 	lsl	r3, r3, #2
   241f4:	e51b2010 	ldr	r2, [fp, #-16]
   241f8:	e0823003 	add	r3, r2, r3
   241fc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   24200:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   24204:	e1a00003 	mov	r0, r3
   24208:	ebffb47d 	bl	11404 <memcpy@plt>
   2420c:	e51b1010 	ldr	r1, [fp, #-16]
   24210:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   24214:	e1a03002 	mov	r3, r2
   24218:	e1a03083 	lsl	r3, r3, #1
   2421c:	e0833002 	add	r3, r3, r2
   24220:	e1a03383 	lsl	r3, r3, #7
   24224:	e0833002 	add	r3, r3, r2
   24228:	e1a03103 	lsl	r3, r3, #2
   2422c:	e0813003 	add	r3, r1, r3
   24230:	e2833c06 	add	r3, r3, #1536	; 0x600
   24234:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   24238:	e5832000 	str	r2, [r3]
   2423c:	e59b3004 	ldr	r3, [fp, #4]
   24240:	e3530000 	cmp	r3, #0
   24244:	1a000033 	bne	24318 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x15c>
   24248:	e3a03000 	mov	r3, #0
   2424c:	e50b3008 	str	r3, [fp, #-8]
   24250:	e51b2008 	ldr	r2, [fp, #-8]
   24254:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   24258:	e1520003 	cmp	r2, r3
   2425c:	2a00003c 	bcs	24354 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x198>
   24260:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   24264:	e1a03002 	mov	r3, r2
   24268:	e1a03083 	lsl	r3, r3, #1
   2426c:	e0833002 	add	r3, r3, r2
   24270:	e1a03383 	lsl	r3, r3, #7
   24274:	e0833002 	add	r3, r3, r2
   24278:	e1a03103 	lsl	r3, r3, #2
   2427c:	e51b2008 	ldr	r2, [fp, #-8]
   24280:	e0833002 	add	r3, r3, r2
   24284:	e51b2010 	ldr	r2, [fp, #-16]
   24288:	e0820003 	add	r0, r2, r3
   2428c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   24290:	e1a03002 	mov	r3, r2
   24294:	e1a03083 	lsl	r3, r3, #1
   24298:	e0833002 	add	r3, r3, r2
   2429c:	e1a03383 	lsl	r3, r3, #7
   242a0:	e0833002 	add	r3, r3, r2
   242a4:	e1a03103 	lsl	r3, r3, #2
   242a8:	e51b2008 	ldr	r2, [fp, #-8]
   242ac:	e0833002 	add	r3, r3, r2
   242b0:	e2833c02 	add	r3, r3, #512	; 0x200
   242b4:	e51b2010 	ldr	r2, [fp, #-16]
   242b8:	e0823003 	add	r3, r2, r3
   242bc:	e1a01003 	mov	r1, r3
   242c0:	eb00028b 	bl	24cf4 <unsigned char const& std::max<unsigned char>(unsigned char const&, unsigned char const&)>
   242c4:	e1a03000 	mov	r3, r0
   242c8:	e5d33000 	ldrb	r3, [r3]
   242cc:	e54b3009 	strb	r3, [fp, #-9]
   242d0:	e51b1010 	ldr	r1, [fp, #-16]
   242d4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   242d8:	e1a03002 	mov	r3, r2
   242dc:	e1a03083 	lsl	r3, r3, #1
   242e0:	e0833002 	add	r3, r3, r2
   242e4:	e1a03383 	lsl	r3, r3, #7
   242e8:	e0833002 	add	r3, r3, r2
   242ec:	e1a03103 	lsl	r3, r3, #2
   242f0:	e0812003 	add	r2, r1, r3
   242f4:	e51b3008 	ldr	r3, [fp, #-8]
   242f8:	e0823003 	add	r3, r2, r3
   242fc:	e2833b01 	add	r3, r3, #1024	; 0x400
   24300:	e55b2009 	ldrb	r2, [fp, #-9]
   24304:	e5c32000 	strb	r2, [r3]
   24308:	e51b3008 	ldr	r3, [fp, #-8]
   2430c:	e2833001 	add	r3, r3, #1
   24310:	e50b3008 	str	r3, [fp, #-8]
   24314:	eaffffcd 	b	24250 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x94>
   24318:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2431c:	e1a03002 	mov	r3, r2
   24320:	e1a03083 	lsl	r3, r3, #1
   24324:	e0833002 	add	r3, r3, r2
   24328:	e1a03383 	lsl	r3, r3, #7
   2432c:	e0833002 	add	r3, r3, r2
   24330:	e1a03103 	lsl	r3, r3, #2
   24334:	e2833b01 	add	r3, r3, #1024	; 0x400
   24338:	e51b2010 	ldr	r2, [fp, #-16]
   2433c:	e0823003 	add	r3, r2, r3
   24340:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   24344:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   24348:	e1a00003 	mov	r0, r3
   2434c:	ebffb42c 	bl	11404 <memcpy@plt>
   24350:	ea000000 	b	24358 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x19c>
   24354:	e1a00000 	nop			; (mov r0, r0)
   24358:	e24bd004 	sub	sp, fp, #4
   2435c:	e8bd8800 	pop	{fp, pc}

00024360 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
   24360:	e92d4800 	push	{fp, lr}
   24364:	e28db004 	add	fp, sp, #4
   24368:	e24dd018 	sub	sp, sp, #24
   2436c:	e50b0010 	str	r0, [fp, #-16]
   24370:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   24374:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   24378:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   2437c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   24380:	e1a03002 	mov	r3, r2
   24384:	e1a03083 	lsl	r3, r3, #1
   24388:	e0833002 	add	r3, r3, r2
   2438c:	e1a03383 	lsl	r3, r3, #7
   24390:	e0833002 	add	r3, r3, r2
   24394:	e1a03103 	lsl	r3, r3, #2
   24398:	e2833c02 	add	r3, r3, #512	; 0x200
   2439c:	e51b2010 	ldr	r2, [fp, #-16]
   243a0:	e0823003 	add	r3, r2, r3
   243a4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   243a8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   243ac:	e1a00003 	mov	r0, r3
   243b0:	ebffb413 	bl	11404 <memcpy@plt>
   243b4:	e51b1010 	ldr	r1, [fp, #-16]
   243b8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   243bc:	e1a03002 	mov	r3, r2
   243c0:	e1a03083 	lsl	r3, r3, #1
   243c4:	e0833002 	add	r3, r3, r2
   243c8:	e1a03383 	lsl	r3, r3, #7
   243cc:	e0833002 	add	r3, r3, r2
   243d0:	e1a03103 	lsl	r3, r3, #2
   243d4:	e0813003 	add	r3, r1, r3
   243d8:	e2833c06 	add	r3, r3, #1536	; 0x600
   243dc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   243e0:	e5832000 	str	r2, [r3]
   243e4:	e59b3004 	ldr	r3, [fp, #4]
   243e8:	e3530000 	cmp	r3, #0
   243ec:	1a000033 	bne	244c0 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x160>
   243f0:	e3a03000 	mov	r3, #0
   243f4:	e50b3008 	str	r3, [fp, #-8]
   243f8:	e51b2008 	ldr	r2, [fp, #-8]
   243fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   24400:	e1520003 	cmp	r2, r3
   24404:	2a00003c 	bcs	244fc <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x19c>
   24408:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2440c:	e1a03002 	mov	r3, r2
   24410:	e1a03083 	lsl	r3, r3, #1
   24414:	e0833002 	add	r3, r3, r2
   24418:	e1a03383 	lsl	r3, r3, #7
   2441c:	e0833002 	add	r3, r3, r2
   24420:	e1a03103 	lsl	r3, r3, #2
   24424:	e51b2008 	ldr	r2, [fp, #-8]
   24428:	e0833002 	add	r3, r3, r2
   2442c:	e51b2010 	ldr	r2, [fp, #-16]
   24430:	e0820003 	add	r0, r2, r3
   24434:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   24438:	e1a03002 	mov	r3, r2
   2443c:	e1a03083 	lsl	r3, r3, #1
   24440:	e0833002 	add	r3, r3, r2
   24444:	e1a03383 	lsl	r3, r3, #7
   24448:	e0833002 	add	r3, r3, r2
   2444c:	e1a03103 	lsl	r3, r3, #2
   24450:	e51b2008 	ldr	r2, [fp, #-8]
   24454:	e0833002 	add	r3, r3, r2
   24458:	e2833c02 	add	r3, r3, #512	; 0x200
   2445c:	e51b2010 	ldr	r2, [fp, #-16]
   24460:	e0823003 	add	r3, r2, r3
   24464:	e1a01003 	mov	r1, r3
   24468:	eb000221 	bl	24cf4 <unsigned char const& std::max<unsigned char>(unsigned char const&, unsigned char const&)>
   2446c:	e1a03000 	mov	r3, r0
   24470:	e5d33000 	ldrb	r3, [r3]
   24474:	e54b3009 	strb	r3, [fp, #-9]
   24478:	e51b1010 	ldr	r1, [fp, #-16]
   2447c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   24480:	e1a03002 	mov	r3, r2
   24484:	e1a03083 	lsl	r3, r3, #1
   24488:	e0833002 	add	r3, r3, r2
   2448c:	e1a03383 	lsl	r3, r3, #7
   24490:	e0833002 	add	r3, r3, r2
   24494:	e1a03103 	lsl	r3, r3, #2
   24498:	e0812003 	add	r2, r1, r3
   2449c:	e51b3008 	ldr	r3, [fp, #-8]
   244a0:	e0823003 	add	r3, r2, r3
   244a4:	e2833b01 	add	r3, r3, #1024	; 0x400
   244a8:	e55b2009 	ldrb	r2, [fp, #-9]
   244ac:	e5c32000 	strb	r2, [r3]
   244b0:	e51b3008 	ldr	r3, [fp, #-8]
   244b4:	e2833001 	add	r3, r3, #1
   244b8:	e50b3008 	str	r3, [fp, #-8]
   244bc:	eaffffcd 	b	243f8 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x98>
   244c0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   244c4:	e1a03002 	mov	r3, r2
   244c8:	e1a03083 	lsl	r3, r3, #1
   244cc:	e0833002 	add	r3, r3, r2
   244d0:	e1a03383 	lsl	r3, r3, #7
   244d4:	e0833002 	add	r3, r3, r2
   244d8:	e1a03103 	lsl	r3, r3, #2
   244dc:	e2833b01 	add	r3, r3, #1024	; 0x400
   244e0:	e51b2010 	ldr	r2, [fp, #-16]
   244e4:	e0823003 	add	r3, r2, r3
   244e8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   244ec:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   244f0:	e1a00003 	mov	r0, r3
   244f4:	ebffb3c2 	bl	11404 <memcpy@plt>
   244f8:	ea000000 	b	24500 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x1a0>
   244fc:	e1a00000 	nop			; (mov r0, r0)
   24500:	e24bd004 	sub	sp, fp, #4
   24504:	e8bd8800 	pop	{fp, pc}

00024508 <ArtNetNode::UpdateMergeStatus(unsigned int)>:
   24508:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2450c:	e28db000 	add	fp, sp, #0
   24510:	e24dd00c 	sub	sp, sp, #12
   24514:	e50b0008 	str	r0, [fp, #-8]
   24518:	e50b100c 	str	r1, [fp, #-12]
   2451c:	e51b3008 	ldr	r3, [fp, #-8]
   24520:	e5d3308a 	ldrb	r3, [r3, #138]	; 0x8a
   24524:	e2233001 	eor	r3, r3, #1
   24528:	e6ef3073 	uxtb	r3, r3
   2452c:	e3530000 	cmp	r3, #0
   24530:	0a000005 	beq	2454c <ArtNetNode::UpdateMergeStatus(unsigned int)+0x44>
   24534:	e51b3008 	ldr	r3, [fp, #-8]
   24538:	e3a02001 	mov	r2, #1
   2453c:	e5c3208a 	strb	r2, [r3, #138]	; 0x8a
   24540:	e51b3008 	ldr	r3, [fp, #-8]
   24544:	e3a02001 	mov	r2, #1
   24548:	e5c3208b 	strb	r2, [r3, #139]	; 0x8b
   2454c:	e51b2008 	ldr	r2, [fp, #-8]
   24550:	e51b300c 	ldr	r3, [fp, #-12]
   24554:	e1a03283 	lsl	r3, r3, #5
   24558:	e0823003 	add	r3, r2, r3
   2455c:	e5d330b2 	ldrb	r3, [r3, #178]	; 0xb2
   24560:	e3833008 	orr	r3, r3, #8
   24564:	e6ef1073 	uxtb	r1, r3
   24568:	e51b2008 	ldr	r2, [fp, #-8]
   2456c:	e51b300c 	ldr	r3, [fp, #-12]
   24570:	e1a03283 	lsl	r3, r3, #5
   24574:	e0823003 	add	r3, r2, r3
   24578:	e1a02001 	mov	r2, r1
   2457c:	e5c320b2 	strb	r2, [r3, #178]	; 0xb2
   24580:	e1a00000 	nop			; (mov r0, r0)
   24584:	e28bd000 	add	sp, fp, #0
   24588:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2458c:	e12fff1e 	bx	lr

00024590 <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
   24590:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24594:	e28db000 	add	fp, sp, #0
   24598:	e24dd01c 	sub	sp, sp, #28
   2459c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   245a0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   245a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   245a8:	e5932a44 	ldr	r2, [r3, #2628]	; 0xa44
   245ac:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   245b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   245b4:	e1a03283 	lsl	r3, r3, #5
   245b8:	e0813003 	add	r3, r1, r3
   245bc:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
   245c0:	e0423003 	sub	r3, r2, r3
   245c4:	e50b3010 	str	r3, [fp, #-16]
   245c8:	e51b3010 	ldr	r3, [fp, #-16]
   245cc:	e59f2180 	ldr	r2, [pc, #384]	; 24754 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x1c4>
   245d0:	e1530002 	cmp	r3, r2
   245d4:	9a000012 	bls	24624 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x94>
   245d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   245dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   245e0:	e1a03283 	lsl	r3, r3, #5
   245e4:	e0823003 	add	r3, r2, r3
   245e8:	e3a02000 	mov	r2, #0
   245ec:	e58320a0 	str	r2, [r3, #160]	; 0xa0
   245f0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   245f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   245f8:	e1a03283 	lsl	r3, r3, #5
   245fc:	e0823003 	add	r3, r2, r3
   24600:	e5d330b2 	ldrb	r3, [r3, #178]	; 0xb2
   24604:	e3c33008 	bic	r3, r3, #8
   24608:	e6ef1073 	uxtb	r1, r3
   2460c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   24610:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   24614:	e1a03283 	lsl	r3, r3, #5
   24618:	e0823003 	add	r3, r2, r3
   2461c:	e1a02001 	mov	r2, r1
   24620:	e5c320b2 	strb	r2, [r3, #178]	; 0xb2
   24624:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   24628:	e5932a44 	ldr	r2, [r3, #2628]	; 0xa44
   2462c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   24630:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   24634:	e2833005 	add	r3, r3, #5
   24638:	e1a03283 	lsl	r3, r3, #5
   2463c:	e0813003 	add	r3, r1, r3
   24640:	e5933004 	ldr	r3, [r3, #4]
   24644:	e0423003 	sub	r3, r2, r3
   24648:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2464c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   24650:	e59f20fc 	ldr	r2, [pc, #252]	; 24754 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x1c4>
   24654:	e1530002 	cmp	r3, r2
   24658:	9a000013 	bls	246ac <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x11c>
   2465c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   24660:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   24664:	e2833005 	add	r3, r3, #5
   24668:	e1a03283 	lsl	r3, r3, #5
   2466c:	e0823003 	add	r3, r2, r3
   24670:	e3a02000 	mov	r2, #0
   24674:	e5832008 	str	r2, [r3, #8]
   24678:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2467c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   24680:	e1a03283 	lsl	r3, r3, #5
   24684:	e0823003 	add	r3, r2, r3
   24688:	e5d330b2 	ldrb	r3, [r3, #178]	; 0xb2
   2468c:	e3c33008 	bic	r3, r3, #8
   24690:	e6ef1073 	uxtb	r1, r3
   24694:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   24698:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2469c:	e1a03283 	lsl	r3, r3, #5
   246a0:	e0823003 	add	r3, r2, r3
   246a4:	e1a02001 	mov	r2, r1
   246a8:	e5c320b2 	strb	r2, [r3, #178]	; 0xb2
   246ac:	e3a03000 	mov	r3, #0
   246b0:	e54b3005 	strb	r3, [fp, #-5]
   246b4:	e3a03000 	mov	r3, #0
   246b8:	e50b300c 	str	r3, [fp, #-12]
   246bc:	e51b300c 	ldr	r3, [fp, #-12]
   246c0:	e3530003 	cmp	r3, #3
   246c4:	8a000013 	bhi	24718 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x188>
   246c8:	e55b2005 	ldrb	r2, [fp, #-5]
   246cc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   246d0:	e51b300c 	ldr	r3, [fp, #-12]
   246d4:	e1a03283 	lsl	r3, r3, #5
   246d8:	e0813003 	add	r3, r1, r3
   246dc:	e5d330b2 	ldrb	r3, [r3, #178]	; 0xb2
   246e0:	e2033008 	and	r3, r3, #8
   246e4:	e3530000 	cmp	r3, #0
   246e8:	13a03001 	movne	r3, #1
   246ec:	03a03000 	moveq	r3, #0
   246f0:	e6ef3073 	uxtb	r3, r3
   246f4:	e1823003 	orr	r3, r2, r3
   246f8:	e3530000 	cmp	r3, #0
   246fc:	13a03001 	movne	r3, #1
   24700:	03a03000 	moveq	r3, #0
   24704:	e54b3005 	strb	r3, [fp, #-5]
   24708:	e51b300c 	ldr	r3, [fp, #-12]
   2470c:	e2833001 	add	r3, r3, #1
   24710:	e50b300c 	str	r3, [fp, #-12]
   24714:	eaffffe8 	b	246bc <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x12c>
   24718:	e55b3005 	ldrb	r3, [fp, #-5]
   2471c:	e2233001 	eor	r3, r3, #1
   24720:	e6ef3073 	uxtb	r3, r3
   24724:	e3530000 	cmp	r3, #0
   24728:	0a000005 	beq	24744 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x1b4>
   2472c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   24730:	e3a02001 	mov	r2, #1
   24734:	e5c3208b 	strb	r2, [r3, #139]	; 0x8b
   24738:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2473c:	e3a02000 	mov	r2, #0
   24740:	e5c3208a 	strb	r2, [r3, #138]	; 0x8a
   24744:	e1a00000 	nop			; (mov r0, r0)
   24748:	e28bd000 	add	sp, fp, #0
   2474c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24750:	e12fff1e 	bx	lr
   24754:	00002710 	.word	0x00002710

00024758 <ArtNetNode::HandleDmx()>:
   24758:	e92d4800 	push	{fp, lr}
   2475c:	e28db004 	add	fp, sp, #4
   24760:	e24dd020 	sub	sp, sp, #32
   24764:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   24768:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2476c:	e2833f55 	add	r3, r3, #340	; 0x154
   24770:	e50b300c 	str	r3, [fp, #-12]
   24774:	e51b300c 	ldr	r3, [fp, #-12]
   24778:	e5d33010 	ldrb	r3, [r3, #16]
   2477c:	e1a03403 	lsl	r3, r3, #8
   24780:	e6bf2073 	sxth	r2, r3
   24784:	e51b300c 	ldr	r3, [fp, #-12]
   24788:	e5d33011 	ldrb	r3, [r3, #17]
   2478c:	e6bf3073 	sxth	r3, r3
   24790:	e1823003 	orr	r3, r2, r3
   24794:	e6bf3073 	sxth	r3, r3
   24798:	e6ff3073 	uxth	r3, r3
   2479c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
   247a0:	e24b301a 	sub	r3, fp, #26
   247a4:	e59f1544 	ldr	r1, [pc, #1348]	; 24cf0 <ArtNetNode::HandleDmx()+0x598>
   247a8:	e1a00003 	mov	r0, r3
   247ac:	ebffcfb1 	bl	18678 <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)>
   247b0:	e1a03000 	mov	r3, r0
   247b4:	e1d330b0 	ldrh	r3, [r3]
   247b8:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
   247bc:	e3a03000 	mov	r3, #0
   247c0:	e50b3008 	str	r3, [fp, #-8]
   247c4:	e51b3008 	ldr	r3, [fp, #-8]
   247c8:	e3530003 	cmp	r3, #3
   247cc:	8a000145 	bhi	24ce8 <ArtNetNode::HandleDmx()+0x590>
   247d0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   247d4:	e51b3008 	ldr	r3, [fp, #-8]
   247d8:	e1a03283 	lsl	r3, r3, #5
   247dc:	e0823003 	add	r3, r2, r3
   247e0:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
   247e4:	e3530000 	cmp	r3, #0
   247e8:	0a000139 	beq	24cd4 <ArtNetNode::HandleDmx()+0x57c>
   247ec:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   247f0:	e51b3008 	ldr	r3, [fp, #-8]
   247f4:	e1a03283 	lsl	r3, r3, #5
   247f8:	e0823003 	add	r3, r2, r3
   247fc:	e59330ac 	ldr	r3, [r3, #172]	; 0xac
   24800:	e3530000 	cmp	r3, #0
   24804:	1a000132 	bne	24cd4 <ArtNetNode::HandleDmx()+0x57c>
   24808:	e51b300c 	ldr	r3, [fp, #-12]
   2480c:	e5d3200e 	ldrb	r2, [r3, #14]
   24810:	e5d3300f 	ldrb	r3, [r3, #15]
   24814:	e1a03403 	lsl	r3, r3, #8
   24818:	e1833002 	orr	r3, r3, r2
   2481c:	e6ff2073 	uxth	r2, r3
   24820:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   24824:	e51b3008 	ldr	r3, [fp, #-8]
   24828:	e1a03283 	lsl	r3, r3, #5
   2482c:	e0813003 	add	r3, r1, r3
   24830:	e2833094 	add	r3, r3, #148	; 0x94
   24834:	e1d330b0 	ldrh	r3, [r3]
   24838:	e1520003 	cmp	r2, r3
   2483c:	1a000124 	bne	24cd4 <ArtNetNode::HandleDmx()+0x57c>
   24840:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   24844:	e51b3008 	ldr	r3, [fp, #-8]
   24848:	e1a03283 	lsl	r3, r3, #5
   2484c:	e0823003 	add	r3, r2, r3
   24850:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
   24854:	e50b3010 	str	r3, [fp, #-16]
   24858:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2485c:	e51b3008 	ldr	r3, [fp, #-8]
   24860:	e2833005 	add	r3, r3, #5
   24864:	e1a03283 	lsl	r3, r3, #5
   24868:	e0823003 	add	r3, r2, r3
   2486c:	e5933008 	ldr	r3, [r3, #8]
   24870:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   24874:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   24878:	e51b3008 	ldr	r3, [fp, #-8]
   2487c:	e1a03283 	lsl	r3, r3, #5
   24880:	e0823003 	add	r3, r2, r3
   24884:	e5d330b2 	ldrb	r3, [r3, #178]	; 0xb2
   24888:	e1e03c83 	mvn	r3, r3, lsl #25
   2488c:	e1e03ca3 	mvn	r3, r3, lsr #25
   24890:	e6ef1073 	uxtb	r1, r3
   24894:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   24898:	e51b3008 	ldr	r3, [fp, #-8]
   2489c:	e1a03283 	lsl	r3, r3, #5
   248a0:	e0823003 	add	r3, r2, r3
   248a4:	e1a02001 	mov	r2, r1
   248a8:	e5c320b2 	strb	r2, [r3, #178]	; 0xb2
   248ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   248b0:	e5d3308a 	ldrb	r3, [r3, #138]	; 0x8a
   248b4:	e3530000 	cmp	r3, #0
   248b8:	0a000008 	beq	248e0 <ArtNetNode::HandleDmx()+0x188>
   248bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   248c0:	e5d3308c 	ldrb	r3, [r3, #140]	; 0x8c
   248c4:	e2233001 	eor	r3, r3, #1
   248c8:	e6ef3073 	uxtb	r3, r3
   248cc:	e3530000 	cmp	r3, #0
   248d0:	0a000002 	beq	248e0 <ArtNetNode::HandleDmx()+0x188>
   248d4:	e51b1008 	ldr	r1, [fp, #-8]
   248d8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   248dc:	ebffff2b 	bl	24590 <ArtNetNode::CheckMergeTimeouts(unsigned int)>
   248e0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   248e4:	e51b3008 	ldr	r3, [fp, #-8]
   248e8:	e1a03283 	lsl	r3, r3, #5
   248ec:	e0823003 	add	r3, r2, r3
   248f0:	e5d330b2 	ldrb	r3, [r3, #178]	; 0xb2
   248f4:	e2033002 	and	r3, r3, #2
   248f8:	e3530000 	cmp	r3, #0
   248fc:	0a000001 	beq	24908 <ArtNetNode::HandleDmx()+0x1b0>
   24900:	e3a03001 	mov	r3, #1
   24904:	ea000000 	b	2490c <ArtNetNode::HandleDmx()+0x1b4>
   24908:	e3a03000 	mov	r3, #0
   2490c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   24910:	e51b3010 	ldr	r3, [fp, #-16]
   24914:	e3530000 	cmp	r3, #0
   24918:	1a000017 	bne	2497c <ArtNetNode::HandleDmx()+0x224>
   2491c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   24920:	e3530000 	cmp	r3, #0
   24924:	1a000014 	bne	2497c <ArtNetNode::HandleDmx()+0x224>
   24928:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2492c:	e5932620 	ldr	r2, [r3, #1568]	; 0x620
   24930:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   24934:	e51b3008 	ldr	r3, [fp, #-8]
   24938:	e1a03283 	lsl	r3, r3, #5
   2493c:	e0813003 	add	r3, r1, r3
   24940:	e58320a0 	str	r2, [r3, #160]	; 0xa0
   24944:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24948:	e5932a44 	ldr	r2, [r3, #2628]	; 0xa44
   2494c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   24950:	e51b3008 	ldr	r3, [fp, #-8]
   24954:	e1a03283 	lsl	r3, r3, #5
   24958:	e0813003 	add	r3, r1, r3
   2495c:	e583209c 	str	r2, [r3, #156]	; 0x9c
   24960:	e51b300c 	ldr	r3, [fp, #-12]
   24964:	e2833012 	add	r3, r3, #18
   24968:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
   2496c:	e1a01003 	mov	r1, r3
   24970:	e51b0008 	ldr	r0, [fp, #-8]
   24974:	ebfffdce 	bl	240b4 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
   24978:	ea0000a8 	b	24c20 <ArtNetNode::HandleDmx()+0x4c8>
   2497c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24980:	e5933620 	ldr	r3, [r3, #1568]	; 0x620
   24984:	e51b2010 	ldr	r2, [fp, #-16]
   24988:	e1520003 	cmp	r2, r3
   2498c:	1a000010 	bne	249d4 <ArtNetNode::HandleDmx()+0x27c>
   24990:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   24994:	e3530000 	cmp	r3, #0
   24998:	1a00000d 	bne	249d4 <ArtNetNode::HandleDmx()+0x27c>
   2499c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   249a0:	e5932a44 	ldr	r2, [r3, #2628]	; 0xa44
   249a4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   249a8:	e51b3008 	ldr	r3, [fp, #-8]
   249ac:	e1a03283 	lsl	r3, r3, #5
   249b0:	e0813003 	add	r3, r1, r3
   249b4:	e583209c 	str	r2, [r3, #156]	; 0x9c
   249b8:	e51b300c 	ldr	r3, [fp, #-12]
   249bc:	e2833012 	add	r3, r3, #18
   249c0:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
   249c4:	e1a01003 	mov	r1, r3
   249c8:	e51b0008 	ldr	r0, [fp, #-8]
   249cc:	ebfffdb8 	bl	240b4 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
   249d0:	ea000092 	b	24c20 <ArtNetNode::HandleDmx()+0x4c8>
   249d4:	e51b3010 	ldr	r3, [fp, #-16]
   249d8:	e3530000 	cmp	r3, #0
   249dc:	1a000013 	bne	24a30 <ArtNetNode::HandleDmx()+0x2d8>
   249e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   249e4:	e5933620 	ldr	r3, [r3, #1568]	; 0x620
   249e8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   249ec:	e1520003 	cmp	r2, r3
   249f0:	1a00000e 	bne	24a30 <ArtNetNode::HandleDmx()+0x2d8>
   249f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   249f8:	e5932a44 	ldr	r2, [r3, #2628]	; 0xa44
   249fc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   24a00:	e51b3008 	ldr	r3, [fp, #-8]
   24a04:	e2833005 	add	r3, r3, #5
   24a08:	e1a03283 	lsl	r3, r3, #5
   24a0c:	e0813003 	add	r3, r1, r3
   24a10:	e5832004 	str	r2, [r3, #4]
   24a14:	e51b300c 	ldr	r3, [fp, #-12]
   24a18:	e2833012 	add	r3, r3, #18
   24a1c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
   24a20:	e1a01003 	mov	r1, r3
   24a24:	e51b0008 	ldr	r0, [fp, #-8]
   24a28:	ebfffdc2 	bl	24138 <lightset::Data::SetSourceB(unsigned int, unsigned char const*, unsigned int)>
   24a2c:	ea00007b 	b	24c20 <ArtNetNode::HandleDmx()+0x4c8>
   24a30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24a34:	e5933620 	ldr	r3, [r3, #1568]	; 0x620
   24a38:	e51b2010 	ldr	r2, [fp, #-16]
   24a3c:	e1520003 	cmp	r2, r3
   24a40:	0a00001d 	beq	24abc <ArtNetNode::HandleDmx()+0x364>
   24a44:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   24a48:	e3530000 	cmp	r3, #0
   24a4c:	1a00001a 	bne	24abc <ArtNetNode::HandleDmx()+0x364>
   24a50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24a54:	e5932620 	ldr	r2, [r3, #1568]	; 0x620
   24a58:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   24a5c:	e51b3008 	ldr	r3, [fp, #-8]
   24a60:	e2833005 	add	r3, r3, #5
   24a64:	e1a03283 	lsl	r3, r3, #5
   24a68:	e0813003 	add	r3, r1, r3
   24a6c:	e5832008 	str	r2, [r3, #8]
   24a70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24a74:	e5932a44 	ldr	r2, [r3, #2628]	; 0xa44
   24a78:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   24a7c:	e51b3008 	ldr	r3, [fp, #-8]
   24a80:	e2833005 	add	r3, r3, #5
   24a84:	e1a03283 	lsl	r3, r3, #5
   24a88:	e0813003 	add	r3, r1, r3
   24a8c:	e5832004 	str	r2, [r3, #4]
   24a90:	e51b1008 	ldr	r1, [fp, #-8]
   24a94:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   24a98:	ebfffe9a 	bl	24508 <ArtNetNode::UpdateMergeStatus(unsigned int)>
   24a9c:	e51b300c 	ldr	r3, [fp, #-12]
   24aa0:	e2831012 	add	r1, r3, #18
   24aa4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
   24aa8:	e1a02003 	mov	r2, r3
   24aac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   24ab0:	e51b0008 	ldr	r0, [fp, #-8]
   24ab4:	ebfffdaf 	bl	24178 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
   24ab8:	ea000058 	b	24c20 <ArtNetNode::HandleDmx()+0x4c8>
   24abc:	e51b3010 	ldr	r3, [fp, #-16]
   24ac0:	e3530000 	cmp	r3, #0
   24ac4:	1a00001d 	bne	24b40 <ArtNetNode::HandleDmx()+0x3e8>
   24ac8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24acc:	e5933620 	ldr	r3, [r3, #1568]	; 0x620
   24ad0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   24ad4:	e1520003 	cmp	r2, r3
   24ad8:	0a000018 	beq	24b40 <ArtNetNode::HandleDmx()+0x3e8>
   24adc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24ae0:	e5932620 	ldr	r2, [r3, #1568]	; 0x620
   24ae4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   24ae8:	e51b3008 	ldr	r3, [fp, #-8]
   24aec:	e1a03283 	lsl	r3, r3, #5
   24af0:	e0813003 	add	r3, r1, r3
   24af4:	e58320a0 	str	r2, [r3, #160]	; 0xa0
   24af8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24afc:	e5932a44 	ldr	r2, [r3, #2628]	; 0xa44
   24b00:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   24b04:	e51b3008 	ldr	r3, [fp, #-8]
   24b08:	e1a03283 	lsl	r3, r3, #5
   24b0c:	e0813003 	add	r3, r1, r3
   24b10:	e583209c 	str	r2, [r3, #156]	; 0x9c
   24b14:	e51b1008 	ldr	r1, [fp, #-8]
   24b18:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   24b1c:	ebfffe79 	bl	24508 <ArtNetNode::UpdateMergeStatus(unsigned int)>
   24b20:	e51b300c 	ldr	r3, [fp, #-12]
   24b24:	e2831012 	add	r1, r3, #18
   24b28:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
   24b2c:	e1a02003 	mov	r2, r3
   24b30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   24b34:	e51b0008 	ldr	r0, [fp, #-8]
   24b38:	ebfffd6d 	bl	240f4 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
   24b3c:	ea000037 	b	24c20 <ArtNetNode::HandleDmx()+0x4c8>
   24b40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24b44:	e5933620 	ldr	r3, [r3, #1568]	; 0x620
   24b48:	e51b2010 	ldr	r2, [fp, #-16]
   24b4c:	e1520003 	cmp	r2, r3
   24b50:	1a000016 	bne	24bb0 <ArtNetNode::HandleDmx()+0x458>
   24b54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24b58:	e5933620 	ldr	r3, [r3, #1568]	; 0x620
   24b5c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   24b60:	e1520003 	cmp	r2, r3
   24b64:	0a000011 	beq	24bb0 <ArtNetNode::HandleDmx()+0x458>
   24b68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24b6c:	e5932a44 	ldr	r2, [r3, #2628]	; 0xa44
   24b70:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   24b74:	e51b3008 	ldr	r3, [fp, #-8]
   24b78:	e1a03283 	lsl	r3, r3, #5
   24b7c:	e0813003 	add	r3, r1, r3
   24b80:	e583209c 	str	r2, [r3, #156]	; 0x9c
   24b84:	e51b1008 	ldr	r1, [fp, #-8]
   24b88:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   24b8c:	ebfffe5d 	bl	24508 <ArtNetNode::UpdateMergeStatus(unsigned int)>
   24b90:	e51b300c 	ldr	r3, [fp, #-12]
   24b94:	e2831012 	add	r1, r3, #18
   24b98:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
   24b9c:	e1a02003 	mov	r2, r3
   24ba0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   24ba4:	e51b0008 	ldr	r0, [fp, #-8]
   24ba8:	ebfffd51 	bl	240f4 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
   24bac:	ea00001b 	b	24c20 <ArtNetNode::HandleDmx()+0x4c8>
   24bb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24bb4:	e5933620 	ldr	r3, [r3, #1568]	; 0x620
   24bb8:	e51b2010 	ldr	r2, [fp, #-16]
   24bbc:	e1520003 	cmp	r2, r3
   24bc0:	0a000047 	beq	24ce4 <ArtNetNode::HandleDmx()+0x58c>
   24bc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24bc8:	e5933620 	ldr	r3, [r3, #1568]	; 0x620
   24bcc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   24bd0:	e1520003 	cmp	r2, r3
   24bd4:	1a000042 	bne	24ce4 <ArtNetNode::HandleDmx()+0x58c>
   24bd8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24bdc:	e5932a44 	ldr	r2, [r3, #2628]	; 0xa44
   24be0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   24be4:	e51b3008 	ldr	r3, [fp, #-8]
   24be8:	e2833005 	add	r3, r3, #5
   24bec:	e1a03283 	lsl	r3, r3, #5
   24bf0:	e0813003 	add	r3, r1, r3
   24bf4:	e5832004 	str	r2, [r3, #4]
   24bf8:	e51b1008 	ldr	r1, [fp, #-8]
   24bfc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   24c00:	ebfffe40 	bl	24508 <ArtNetNode::UpdateMergeStatus(unsigned int)>
   24c04:	e51b300c 	ldr	r3, [fp, #-12]
   24c08:	e2831012 	add	r1, r3, #18
   24c0c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
   24c10:	e1a02003 	mov	r2, r3
   24c14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   24c18:	e51b0008 	ldr	r0, [fp, #-8]
   24c1c:	ebfffd55 	bl	24178 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
   24c20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24c24:	e5d33089 	ldrb	r3, [r3, #137]	; 0x89
   24c28:	e2233001 	eor	r3, r3, #1
   24c2c:	e6ef3073 	uxtb	r3, r3
   24c30:	e3530000 	cmp	r3, #0
   24c34:	0a000020 	beq	24cbc <ArtNetNode::HandleDmx()+0x564>
   24c38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24c3c:	e5933a50 	ldr	r3, [r3, #2640]	; 0xa50
   24c40:	e51b1008 	ldr	r1, [fp, #-8]
   24c44:	e1a00003 	mov	r0, r3
   24c48:	ebfff903 	bl	2305c <lightset::Data::Output(LightSet*, unsigned int)>
   24c4c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   24c50:	e51b3008 	ldr	r3, [fp, #-8]
   24c54:	e1a03283 	lsl	r3, r3, #5
   24c58:	e0823003 	add	r3, r2, r3
   24c5c:	e5d330b1 	ldrb	r3, [r3, #177]	; 0xb1
   24c60:	e2233001 	eor	r3, r3, #1
   24c64:	e6ef3073 	uxtb	r3, r3
   24c68:	e3530000 	cmp	r3, #0
   24c6c:	0a000012 	beq	24cbc <ArtNetNode::HandleDmx()+0x564>
   24c70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24c74:	e5932a50 	ldr	r2, [r3, #2640]	; 0xa50
   24c78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24c7c:	e5933a50 	ldr	r3, [r3, #2640]	; 0xa50
   24c80:	e5933000 	ldr	r3, [r3]
   24c84:	e2833008 	add	r3, r3, #8
   24c88:	e5933000 	ldr	r3, [r3]
   24c8c:	e51b1008 	ldr	r1, [fp, #-8]
   24c90:	e1a00002 	mov	r0, r2
   24c94:	e12fff33 	blx	r3
   24c98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24c9c:	e3a02001 	mov	r2, #1
   24ca0:	e5c3208b 	strb	r2, [r3, #139]	; 0x8b
   24ca4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   24ca8:	e51b3008 	ldr	r3, [fp, #-8]
   24cac:	e1a03283 	lsl	r3, r3, #5
   24cb0:	e0823003 	add	r3, r2, r3
   24cb4:	e3a02001 	mov	r2, #1
   24cb8:	e5c320b1 	strb	r2, [r3, #177]	; 0xb1
   24cbc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24cc0:	e5d3308d 	ldrb	r3, [r3, #141]	; 0x8d
   24cc4:	e3833002 	orr	r3, r3, #2
   24cc8:	e6ef2073 	uxtb	r2, r3
   24ccc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   24cd0:	e5c3208d 	strb	r2, [r3, #141]	; 0x8d
   24cd4:	e51b3008 	ldr	r3, [fp, #-8]
   24cd8:	e2833001 	add	r3, r3, #1
   24cdc:	e50b3008 	str	r3, [fp, #-8]
   24ce0:	eafffeb7 	b	247c4 <ArtNetNode::HandleDmx()+0x6c>
   24ce4:	e1a00000 	nop			; (mov r0, r0)
   24ce8:	e24bd004 	sub	sp, fp, #4
   24cec:	e8bd8800 	pop	{fp, pc}
   24cf0:	00046d32 	.word	0x00046d32

00024cf4 <unsigned char const& std::max<unsigned char>(unsigned char const&, unsigned char const&)>:
   24cf4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24cf8:	e28db000 	add	fp, sp, #0
   24cfc:	e24dd00c 	sub	sp, sp, #12
   24d00:	e50b0008 	str	r0, [fp, #-8]
   24d04:	e50b100c 	str	r1, [fp, #-12]
   24d08:	e51b3008 	ldr	r3, [fp, #-8]
   24d0c:	e5d32000 	ldrb	r2, [r3]
   24d10:	e51b300c 	ldr	r3, [fp, #-12]
   24d14:	e5d33000 	ldrb	r3, [r3]
   24d18:	e1520003 	cmp	r2, r3
   24d1c:	2a000001 	bcs	24d28 <unsigned char const& std::max<unsigned char>(unsigned char const&, unsigned char const&)+0x34>
   24d20:	e51b300c 	ldr	r3, [fp, #-12]
   24d24:	ea000000 	b	24d2c <unsigned char const& std::max<unsigned char>(unsigned char const&, unsigned char const&)+0x38>
   24d28:	e51b3008 	ldr	r3, [fp, #-8]
   24d2c:	e1a00003 	mov	r0, r3
   24d30:	e28bd000 	add	sp, fp, #0
   24d34:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24d38:	e12fff1e 	bx	lr

00024d3c <lightset::get_merge_mode(char const*)>:
   24d3c:	e3500000 	cmp	r0, #0
   24d40:	012fff1e 	bxeq	lr
   24d44:	e5d03000 	ldrb	r3, [r0]
   24d48:	e3833020 	orr	r3, r3, #32
   24d4c:	e353006c 	cmp	r3, #108	; 0x6c
   24d50:	1a000009 	bne	24d7c <lightset::get_merge_mode(char const*)+0x40>
   24d54:	e5d03001 	ldrb	r3, [r0, #1]
   24d58:	e3833020 	orr	r3, r3, #32
   24d5c:	e3530074 	cmp	r3, #116	; 0x74
   24d60:	1a000005 	bne	24d7c <lightset::get_merge_mode(char const*)+0x40>
   24d64:	e5d00002 	ldrb	r0, [r0, #2]
   24d68:	e3800020 	orr	r0, r0, #32
   24d6c:	e2400070 	sub	r0, r0, #112	; 0x70
   24d70:	e16f0f10 	clz	r0, r0
   24d74:	e1a002a0 	lsr	r0, r0, #5
   24d78:	e12fff1e 	bx	lr
   24d7c:	e3a00000 	mov	r0, #0
   24d80:	e12fff1e 	bx	lr

00024d84 <lightset::get_merge_mode(lightset::MergeMode, bool)>:
   24d84:	e3510000 	cmp	r1, #0
   24d88:	159f3018 	ldrne	r3, [pc, #24]	; 24da8 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x24>
   24d8c:	059f2018 	ldreq	r2, [pc, #24]	; 24dac <lightset::get_merge_mode(lightset::MergeMode, bool)+0x28>
   24d90:	159f2018 	ldrne	r2, [pc, #24]	; 24db0 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x2c>
   24d94:	059f3018 	ldreq	r3, [pc, #24]	; 24db4 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x30>
   24d98:	e3500000 	cmp	r0, #0
   24d9c:	01a00002 	moveq	r0, r2
   24da0:	11a00003 	movne	r0, r3
   24da4:	e12fff1e 	bx	lr
   24da8:	000468dc 	.word	0x000468dc
   24dac:	000468d8 	.word	0x000468d8
   24db0:	000468e0 	.word	0x000468e0
   24db4:	000468e4 	.word	0x000468e4

00024db8 <lightset::get_merge_mode(unsigned int, bool)>:
   24db8:	eafffff1 	b	24d84 <lightset::get_merge_mode(lightset::MergeMode, bool)>

00024dbc <lightset::get_failsafe(char const*)>:
   24dbc:	e92d4010 	push	{r4, lr}
   24dc0:	e3a02004 	mov	r2, #4
   24dc4:	e59f106c 	ldr	r1, [pc, #108]	; 24e38 <lightset::get_failsafe(char const*)+0x7c>
   24dc8:	e1a04000 	mov	r4, r0
   24dcc:	ebffb1b9 	bl	114b8 <memcmp@plt>
   24dd0:	e3500000 	cmp	r0, #0
   24dd4:	08bd8010 	popeq	{r4, pc}
   24dd8:	e3a02003 	mov	r2, #3
   24ddc:	e59f1058 	ldr	r1, [pc, #88]	; 24e3c <lightset::get_failsafe(char const*)+0x80>
   24de0:	e1a00004 	mov	r0, r4
   24de4:	ebffb1b3 	bl	114b8 <memcmp@plt>
   24de8:	e3500000 	cmp	r0, #0
   24dec:	0a00000d 	beq	24e28 <lightset::get_failsafe(char const*)+0x6c>
   24df0:	e3a02002 	mov	r2, #2
   24df4:	e59f1044 	ldr	r1, [pc, #68]	; 24e40 <lightset::get_failsafe(char const*)+0x84>
   24df8:	e1a00004 	mov	r0, r4
   24dfc:	ebffb1ad 	bl	114b8 <memcmp@plt>
   24e00:	e3500000 	cmp	r0, #0
   24e04:	0a000009 	beq	24e30 <lightset::get_failsafe(char const*)+0x74>
   24e08:	e3a02008 	mov	r2, #8
   24e0c:	e59f1030 	ldr	r1, [pc, #48]	; 24e44 <lightset::get_failsafe(char const*)+0x88>
   24e10:	e1a00004 	mov	r0, r4
   24e14:	ebffb1a7 	bl	114b8 <memcmp@plt>
   24e18:	e3500000 	cmp	r0, #0
   24e1c:	13a00000 	movne	r0, #0
   24e20:	03a00003 	moveq	r0, #3
   24e24:	e8bd8010 	pop	{r4, pc}
   24e28:	e3a00001 	mov	r0, #1
   24e2c:	e8bd8010 	pop	{r4, pc}
   24e30:	e3a00002 	mov	r0, #2
   24e34:	e8bd8010 	pop	{r4, pc}
   24e38:	00046cb1 	.word	0x00046cb1
   24e3c:	00046cb6 	.word	0x00046cb6
   24e40:	00046cba 	.word	0x00046cba
   24e44:	00046cbd 	.word	0x00046cbd

00024e48 <lightset::get_failsafe(lightset::FailSafe)>:
   24e48:	e59f3004 	ldr	r3, [pc, #4]	; 24e54 <lightset::get_failsafe(lightset::FailSafe)+0xc>
   24e4c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   24e50:	e12fff1e 	bx	lr
   24e54:	00046fbc 	.word	0x00046fbc

00024e58 <E131Bridge::SetPriority(unsigned char, unsigned int)>:
   24e58:	e2413001 	sub	r3, r1, #1
   24e5c:	e6ef3073 	uxtb	r3, r3
   24e60:	e35300c7 	cmp	r3, #199	; 0xc7
   24e64:	93a0300c 	movls	r3, #12
   24e68:	90220293 	mlals	r2, r3, r2, r0
   24e6c:	95c21629 	strbls	r1, [r2, #1577]	; 0x629
   24e70:	e12fff1e 	bx	lr

00024e74 <E131Bridge::Get()>:
   24e74:	e59f3004 	ldr	r3, [pc, #4]	; 24e80 <E131Bridge::Get()+0xc>
   24e78:	e5930000 	ldr	r0, [r3]
   24e7c:	e12fff1e 	bx	lr
   24e80:	0005dc10 	.word	0x0005dc10

00024e84 <E131Params::E131Params(E131ParamsStore*)>:
   24e84:	e92d4010 	push	{r4, lr}
   24e88:	e3a0201f 	mov	r2, #31
   24e8c:	e1a04000 	mov	r4, r0
   24e90:	e4801004 	str	r1, [r0], #4
   24e94:	e3a01000 	mov	r1, #0
   24e98:	ebffb0f3 	bl	1126c <memset@plt>
   24e9c:	e3a02001 	mov	r2, #1
   24ea0:	e5c4200b 	strb	r2, [r4, #11]
   24ea4:	e3a02002 	mov	r2, #2
   24ea8:	e1c420bd 	strh	r2, [r4, #13]
   24eac:	e3a02003 	mov	r2, #3
   24eb0:	e1c420bf 	strh	r2, [r4, #15]
   24eb4:	e3a02004 	mov	r2, #4
   24eb8:	e1c421b1 	strh	r2, [r4, #17]
   24ebc:	e59f1030 	ldr	r1, [pc, #48]	; 24ef4 <E131Params::E131Params(E131ParamsStore*)+0x70>
   24ec0:	e3a02064 	mov	r2, #100	; 0x64
   24ec4:	e3a03000 	mov	r3, #0
   24ec8:	e5c4201f 	strb	r2, [r4, #31]
   24ecc:	e5c42022 	strb	r2, [r4, #34]	; 0x22
   24ed0:	e3a02055 	mov	r2, #85	; 0x55
   24ed4:	e5c4300c 	strb	r3, [r4, #12]
   24ed8:	e1c412b0 	strh	r1, [r4, #32]
   24edc:	e5c4201d 	strb	r2, [r4, #29]
   24ee0:	e5c4301e 	strb	r3, [r4, #30]
   24ee4:	e5c43009 	strb	r3, [r4, #9]
   24ee8:	e5c4300a 	strb	r3, [r4, #10]
   24eec:	e1a00004 	mov	r0, r4
   24ef0:	e8bd8010 	pop	{r4, pc}
   24ef4:	00006464 	.word	0x00006464

00024ef8 <E131Params::Load()>:
   24ef8:	e3a03000 	mov	r3, #0
   24efc:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
   24f00:	e1a02000 	mov	r2, r0
   24f04:	e5803004 	str	r3, [r0, #4]
   24f08:	e1a04000 	mov	r4, r0
   24f0c:	e59f1068 	ldr	r1, [pc, #104]	; 24f7c <E131Params::Load()+0x84>
   24f10:	e1a0000d 	mov	r0, sp
   24f14:	eb005c27 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   24f18:	e59f1060 	ldr	r1, [pc, #96]	; 24f80 <E131Params::Load()+0x88>
   24f1c:	e1a0000d 	mov	r0, sp
   24f20:	eb005c44 	bl	3c038 <ReadConfigFile::Read(char const*)>
   24f24:	e2505000 	subs	r5, r0, #0
   24f28:	e5940000 	ldr	r0, [r4]
   24f2c:	0a00000a 	beq	24f5c <E131Params::Load()+0x64>
   24f30:	e3500000 	cmp	r0, #0
   24f34:	0a000003 	beq	24f48 <E131Params::Load()+0x50>
   24f38:	e5903000 	ldr	r3, [r0]
   24f3c:	e2841004 	add	r1, r4, #4
   24f40:	e5933008 	ldr	r3, [r3, #8]
   24f44:	e12fff33 	blx	r3
   24f48:	e1a0000d 	mov	r0, sp
   24f4c:	eb005c2a 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   24f50:	e1a00005 	mov	r0, r5
   24f54:	e28dd00c 	add	sp, sp, #12
   24f58:	e8bd8030 	pop	{r4, r5, pc}
   24f5c:	e3500000 	cmp	r0, #0
   24f60:	0afffff8 	beq	24f48 <E131Params::Load()+0x50>
   24f64:	e5903000 	ldr	r3, [r0]
   24f68:	e2841004 	add	r1, r4, #4
   24f6c:	e3a05001 	mov	r5, #1
   24f70:	e593300c 	ldr	r3, [r3, #12]
   24f74:	e12fff33 	blx	r3
   24f78:	eafffff2 	b	24f48 <E131Params::Load()+0x50>
   24f7c:	00025180 	.word	0x00025180
   24f80:	000472b8 	.word	0x000472b8

00024f84 <E131Params::Load(char const*, unsigned int)>:
   24f84:	e5903000 	ldr	r3, [r0]
   24f88:	e3530000 	cmp	r3, #0
   24f8c:	012fff1e 	bxeq	lr
   24f90:	e3a03000 	mov	r3, #0
   24f94:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   24f98:	e1a06002 	mov	r6, r2
   24f9c:	e5803004 	str	r3, [r0, #4]
   24fa0:	e1a05001 	mov	r5, r1
   24fa4:	e1a04000 	mov	r4, r0
   24fa8:	e1a02000 	mov	r2, r0
   24fac:	e59f1038 	ldr	r1, [pc, #56]	; 24fec <E131Params::Load(char const*, unsigned int)+0x68>
   24fb0:	e1a0000d 	mov	r0, sp
   24fb4:	eb005bff 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   24fb8:	e1a02006 	mov	r2, r6
   24fbc:	e1a01005 	mov	r1, r5
   24fc0:	e1a0000d 	mov	r0, sp
   24fc4:	eb005c66 	bl	3c164 <ReadConfigFile::Read(char const*, unsigned int)>
   24fc8:	e1a01004 	mov	r1, r4
   24fcc:	e4910004 	ldr	r0, [r1], #4
   24fd0:	e5903000 	ldr	r3, [r0]
   24fd4:	e5933008 	ldr	r3, [r3, #8]
   24fd8:	e12fff33 	blx	r3
   24fdc:	e1a0000d 	mov	r0, sp
   24fe0:	eb005c05 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   24fe4:	e28dd008 	add	sp, sp, #8
   24fe8:	e8bd8070 	pop	{r4, r5, r6, pc}
   24fec:	00025180 	.word	0x00025180

00024ff0 <E131Params::callbackFunction(char const*)>:
   24ff0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   24ff4:	e24dd01c 	sub	sp, sp, #28
   24ff8:	e1a06001 	mov	r6, r1
   24ffc:	e3a03008 	mov	r3, #8
   25000:	e58d3004 	str	r3, [sp, #4]
   25004:	e1a05000 	mov	r5, r0
   25008:	e28d3004 	add	r3, sp, #4
   2500c:	e28d2008 	add	r2, sp, #8
   25010:	e59f1154 	ldr	r1, [pc, #340]	; 2516c <E131Params::callbackFunction(char const*)+0x17c>
   25014:	e1a00006 	mov	r0, r6
   25018:	eb005975 	bl	3b5f4 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
   2501c:	e3500000 	cmp	r0, #0
   25020:	1a00000b 	bne	25054 <E131Params::callbackFunction(char const*)+0x64>
   25024:	e28d0008 	add	r0, sp, #8
   25028:	ebffff63 	bl	24dbc <lightset::get_failsafe(char const*)>
   2502c:	e5953004 	ldr	r3, [r5, #4]
   25030:	e3500000 	cmp	r0, #0
   25034:	03c33001 	biceq	r3, r3, #1
   25038:	13833001 	orrne	r3, r3, #1
   2503c:	e5853004 	str	r3, [r5, #4]
   25040:	e3a03000 	mov	r3, #0
   25044:	e5c50009 	strb	r0, [r5, #9]
   25048:	e5c5300a 	strb	r3, [r5, #10]
   2504c:	e28dd01c 	add	sp, sp, #28
   25050:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   25054:	e59f7114 	ldr	r7, [pc, #276]	; 25170 <E131Params::callbackFunction(char const*)+0x180>
   25058:	e59f9114 	ldr	r9, [pc, #276]	; 25174 <E131Params::callbackFunction(char const*)+0x184>
   2505c:	e3a04000 	mov	r4, #0
   25060:	e3a08003 	mov	r8, #3
   25064:	e28d2002 	add	r2, sp, #2
   25068:	e1a01007 	mov	r1, r7
   2506c:	e1a00006 	mov	r0, r6
   25070:	eb005947 	bl	3b594 <Sscan::Uint16(char const*, char const*, unsigned short&)>
   25074:	e3500000 	cmp	r0, #0
   25078:	1a000015 	bne	250d4 <E131Params::callbackFunction(char const*)+0xe4>
   2507c:	e1dd10b2 	ldrh	r1, [sp, #2]
   25080:	e59fc0f0 	ldr	ip, [pc, #240]	; 25178 <E131Params::callbackFunction(char const*)+0x188>
   25084:	e3a02010 	mov	r2, #16
   25088:	e2413001 	sub	r3, r1, #1
   2508c:	e1a02412 	lsl	r2, r2, r4
   25090:	e6ff3073 	uxth	r3, r3
   25094:	e153000c 	cmp	r3, ip
   25098:	e1a03084 	lsl	r3, r4, #1
   2509c:	82844001 	addhi	r4, r4, #1
   250a0:	e5950004 	ldr	r0, [r5, #4]
   250a4:	e0853003 	add	r3, r5, r3
   250a8:	86ff4074 	uxthhi	r4, r4
   250ac:	85c3400b 	strbhi	r4, [r3, #11]
   250b0:	95c3100b 	strbls	r1, [r3, #11]
   250b4:	81a04424 	lsrhi	r4, r4, #8
   250b8:	81c02002 	bichi	r2, r0, r2
   250bc:	91a01421 	lsrls	r1, r1, #8
   250c0:	91802002 	orrls	r2, r0, r2
   250c4:	85c3400c 	strbhi	r4, [r3, #12]
   250c8:	95c3100c 	strbls	r1, [r3, #12]
   250cc:	e5852004 	str	r2, [r5, #4]
   250d0:	eaffffdd 	b	2504c <E131Params::callbackFunction(char const*)+0x5c>
   250d4:	e3a01012 	mov	r1, #18
   250d8:	e28d3004 	add	r3, sp, #4
   250dc:	e0219491 	mla	r1, r1, r4, r9
   250e0:	e28d2008 	add	r2, sp, #8
   250e4:	e1a00006 	mov	r0, r6
   250e8:	e58d8004 	str	r8, [sp, #4]
   250ec:	eb005940 	bl	3b5f4 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
   250f0:	e2501000 	subs	r1, r0, #0
   250f4:	1a00000c 	bne	2512c <E131Params::callbackFunction(char const*)+0x13c>
   250f8:	e28d0008 	add	r0, sp, #8
   250fc:	ebffff0e 	bl	24d3c <lightset::get_merge_mode(char const*)>
   25100:	e3a03c01 	mov	r3, #256	; 0x100
   25104:	e5952004 	ldr	r2, [r5, #4]
   25108:	e1a03413 	lsl	r3, r3, r4
   2510c:	e0854004 	add	r4, r5, r4
   25110:	e3500001 	cmp	r0, #1
   25114:	01833002 	orreq	r3, r3, r2
   25118:	11c23003 	bicne	r3, r2, r3
   2511c:	05c40014 	strbeq	r0, [r4, #20]
   25120:	15c41014 	strbne	r1, [r4, #20]
   25124:	e5853004 	str	r3, [r5, #4]
   25128:	eaffffc7 	b	2504c <E131Params::callbackFunction(char const*)+0x5c>
   2512c:	e2844001 	add	r4, r4, #1
   25130:	e3540004 	cmp	r4, #4
   25134:	e2877010 	add	r7, r7, #16
   25138:	1affffc9 	bne	25064 <E131Params::callbackFunction(char const*)+0x74>
   2513c:	e28d2001 	add	r2, sp, #1
   25140:	e59f1034 	ldr	r1, [pc, #52]	; 2517c <E131Params::callbackFunction(char const*)+0x18c>
   25144:	e1a00006 	mov	r0, r6
   25148:	eb005abd 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   2514c:	e3500000 	cmp	r0, #0
   25150:	1affffbd 	bne	2504c <E131Params::callbackFunction(char const*)+0x5c>
   25154:	e5dd2001 	ldrb	r2, [sp, #1]
   25158:	e5953004 	ldr	r3, [r5, #4]
   2515c:	e3520000 	cmp	r2, #0
   25160:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   25164:	03c33a02 	biceq	r3, r3, #8192	; 0x2000
   25168:	eaffffed 	b	25124 <E131Params::callbackFunction(char const*)+0x134>
   2516c:	0004a59c 	.word	0x0004a59c
   25170:	0004a490 	.word	0x0004a490
   25174:	0004a4d0 	.word	0x0004a4d0
   25178:	0000f9fe 	.word	0x0000f9fe
   2517c:	0004a584 	.word	0x0004a584

00025180 <E131Params::staticCallbackFunction(void*, char const*)>:
   25180:	eaffff9a 	b	24ff0 <E131Params::callbackFunction(char const*)>

00025184 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>:
   25184:	e3510000 	cmp	r1, #0
   25188:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2518c:	e280c004 	add	ip, r0, #4
   25190:	e24dd018 	sub	sp, sp, #24
   25194:	e1a04000 	mov	r4, r0
   25198:	e1a05002 	mov	r5, r2
   2519c:	e1a06003 	mov	r6, r3
   251a0:	0a000027 	beq	25244 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xc0>
   251a4:	e1a0000c 	mov	r0, ip
   251a8:	e281301c 	add	r3, r1, #28
   251ac:	e4912004 	ldr	r2, [r1], #4
   251b0:	e1510003 	cmp	r1, r3
   251b4:	e4802004 	str	r2, [r0], #4
   251b8:	1afffffb 	bne	251ac <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x28>
   251bc:	e1d130b0 	ldrh	r3, [r1]
   251c0:	e1c030b0 	strh	r3, [r0]
   251c4:	e5d13002 	ldrb	r3, [r1, #2]
   251c8:	e5c03002 	strb	r3, [r0, #2]
   251cc:	e1a02005 	mov	r2, r5
   251d0:	e1a03006 	mov	r3, r6
   251d4:	e59f1168 	ldr	r1, [pc, #360]	; 25344 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1c0>
   251d8:	e28d000c 	add	r0, sp, #12
   251dc:	eb005ab0 	bl	3bca4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
   251e0:	e59f9160 	ldr	r9, [pc, #352]	; 25348 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1c4>
   251e4:	e59fa160 	ldr	sl, [pc, #352]	; 2534c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1c8>
   251e8:	e3a05000 	mov	r5, #0
   251ec:	e1a07009 	mov	r7, r9
   251f0:	e5993000 	ldr	r3, [r9]
   251f4:	e5948004 	ldr	r8, [r4, #4]
   251f8:	e1530005 	cmp	r3, r5
   251fc:	9a000016 	bls	2525c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xd8>
   25200:	e0843085 	add	r3, r4, r5, lsl #1
   25204:	e3a01010 	mov	r1, #16
   25208:	e5d3200c 	ldrb	r2, [r3, #12]
   2520c:	e5d3600b 	ldrb	r6, [r3, #11]
   25210:	e1a01511 	lsl	r1, r1, r5
   25214:	e1a00008 	mov	r0, r8
   25218:	e1866402 	orr	r6, r6, r2, lsl #8
   2521c:	eb0000dd 	bl	25598 <E131Params::isMaskSet(unsigned int) const [clone .isra.2]>
   25220:	e3a03001 	mov	r3, #1
   25224:	e58d3000 	str	r3, [sp]
   25228:	e08a1205 	add	r1, sl, r5, lsl #4
   2522c:	e1a02006 	mov	r2, r6
   25230:	e2855001 	add	r5, r5, #1
   25234:	e1a03000 	mov	r3, r0
   25238:	e28d000c 	add	r0, sp, #12
   2523c:	eb00009c 	bl	254b4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)>
   25240:	eaffffea 	b	251f0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x6c>
   25244:	e5900000 	ldr	r0, [r0]
   25248:	e1a0100c 	mov	r1, ip
   2524c:	e5903000 	ldr	r3, [r0]
   25250:	e593300c 	ldr	r3, [r3, #12]
   25254:	e12fff33 	blx	r3
   25258:	eaffffdb 	b	251cc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x48>
   2525c:	e5940008 	ldr	r0, [r4, #8]
   25260:	e2846014 	add	r6, r4, #20
   25264:	e3a0ac01 	mov	sl, #256	; 0x100
   25268:	e1a00420 	lsr	r0, r0, #8
   2526c:	e6ff0070 	uxth	r0, r0
   25270:	ebfffef4 	bl	24e48 <lightset::get_failsafe(lightset::FailSafe)>
   25274:	e3a01001 	mov	r1, #1
   25278:	e1a05000 	mov	r5, r0
   2527c:	e1a00008 	mov	r0, r8
   25280:	eb0000c4 	bl	25598 <E131Params::isMaskSet(unsigned int) const [clone .isra.2]>
   25284:	e3a03001 	mov	r3, #1
   25288:	e1a02005 	mov	r2, r5
   2528c:	e58d3000 	str	r3, [sp]
   25290:	e59f10b8 	ldr	r1, [pc, #184]	; 25350 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1cc>
   25294:	e59f80b8 	ldr	r8, [pc, #184]	; 25354 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d0>
   25298:	e3a05000 	mov	r5, #0
   2529c:	e1a03000 	mov	r3, r0
   252a0:	e28d000c 	add	r0, sp, #12
   252a4:	ebfffb2b 	bl	23f58 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)>
   252a8:	e59f10a8 	ldr	r1, [pc, #168]	; 25358 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d4>
   252ac:	e28d000c 	add	r0, sp, #12
   252b0:	eb005ae5 	bl	3be4c <PropertiesBuilder::AddComment(char const*)>
   252b4:	e5973000 	ldr	r3, [r7]
   252b8:	e1530005 	cmp	r3, r5
   252bc:	9a000010 	bls	25304 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x180>
   252c0:	e4d60001 	ldrb	r0, [r6], #1
   252c4:	e3a01000 	mov	r1, #0
   252c8:	ebfffeba 	bl	24db8 <lightset::get_merge_mode(unsigned int, bool)>
   252cc:	e1a0151a 	lsl	r1, sl, r5
   252d0:	e1a09000 	mov	r9, r0
   252d4:	e5940004 	ldr	r0, [r4, #4]
   252d8:	eb0000ae 	bl	25598 <E131Params::isMaskSet(unsigned int) const [clone .isra.2]>
   252dc:	e3a01012 	mov	r1, #18
   252e0:	e3a03001 	mov	r3, #1
   252e4:	e58d3000 	str	r3, [sp]
   252e8:	e0218591 	mla	r1, r1, r5, r8
   252ec:	e1a02009 	mov	r2, r9
   252f0:	e2855001 	add	r5, r5, #1
   252f4:	e1a03000 	mov	r3, r0
   252f8:	e28d000c 	add	r0, sp, #12
   252fc:	ebfffb15 	bl	23f58 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)>
   25300:	eaffffeb 	b	252b4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x130>
   25304:	e59f1050 	ldr	r1, [pc, #80]	; 2535c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d8>
   25308:	e28d000c 	add	r0, sp, #12
   2530c:	eb005ace 	bl	3be4c <PropertiesBuilder::AddComment(char const*)>
   25310:	e5940004 	ldr	r0, [r4, #4]
   25314:	e3a01a02 	mov	r1, #8192	; 0x2000
   25318:	eb00009e 	bl	25598 <E131Params::isMaskSet(unsigned int) const [clone .isra.2]>
   2531c:	e59f103c 	ldr	r1, [pc, #60]	; 25360 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1dc>
   25320:	e1a02000 	mov	r2, r0
   25324:	e28d000c 	add	r0, sp, #12
   25328:	ebffdbcc 	bl	1c260 <PropertiesBuilder::Add(char const*, bool)>
   2532c:	e28d000c 	add	r0, sp, #12
   25330:	ebffbce6 	bl	146d0 <PropertiesBuilder::GetSize()>
   25334:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   25338:	e5830000 	str	r0, [r3]
   2533c:	e28dd018 	add	sp, sp, #24
   25340:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25344:	000472b8 	.word	0x000472b8
   25348:	0005dc0c 	.word	0x0005dc0c
   2534c:	0004a490 	.word	0x0004a490
   25350:	0004a59c 	.word	0x0004a59c
   25354:	0004a4d0 	.word	0x0004a4d0
   25358:	00046cec 	.word	0x00046cec
   2535c:	00046d01 	.word	0x00046d01
   25360:	0004a584 	.word	0x0004a584

00025364 <E131Params::Save(char*, unsigned int, unsigned int&)>:
   25364:	e590c000 	ldr	ip, [r0]
   25368:	e35c0000 	cmp	ip, #0
   2536c:	1a000001 	bne	25378 <E131Params::Save(char*, unsigned int, unsigned int&)+0x14>
   25370:	e583c000 	str	ip, [r3]
   25374:	e12fff1e 	bx	lr
   25378:	e1a0c003 	mov	ip, r3
   2537c:	e92d4007 	push	{r0, r1, r2, lr}
   25380:	e1a03002 	mov	r3, r2
   25384:	e58dc000 	str	ip, [sp]
   25388:	e1a02001 	mov	r2, r1
   2538c:	e3a01000 	mov	r1, #0
   25390:	ebffff7b 	bl	25184 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>
   25394:	e28dd00c 	add	sp, sp, #12
   25398:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002539c <E131Params::Set(unsigned int)>:
   2539c:	e3510004 	cmp	r1, #4
   253a0:	e92d4ff7 	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   253a4:	e1a04000 	mov	r4, r0
   253a8:	e1a05001 	mov	r5, r1
   253ac:	8a000007 	bhi	253d0 <E131Params::Set(unsigned int)+0x34>
   253b0:	e2613004 	rsb	r3, r1, #4
   253b4:	e59f00f0 	ldr	r0, [pc, #240]	; 254ac <E131Params::Set(unsigned int)+0x110>
   253b8:	e28d1004 	add	r1, sp, #4
   253bc:	e58d3004 	str	r3, [sp, #4]
   253c0:	ebffb7ff 	bl	133c4 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>
   253c4:	e59f30e4 	ldr	r3, [pc, #228]	; 254b0 <E131Params::Set(unsigned int)+0x114>
   253c8:	e5902000 	ldr	r2, [r0]
   253cc:	e5832000 	str	r2, [r3]
   253d0:	e5943004 	ldr	r3, [r4, #4]
   253d4:	e3530000 	cmp	r3, #0
   253d8:	0a000031 	beq	254a4 <E131Params::Set(unsigned int)+0x108>
   253dc:	ebfffea4 	bl	24e74 <E131Bridge::Get()>
   253e0:	e59f90c8 	ldr	r9, [pc, #200]	; 254b0 <E131Params::Set(unsigned int)+0x114>
   253e4:	e1a06004 	mov	r6, r4
   253e8:	e3a0ac01 	mov	sl, #256	; 0x100
   253ec:	e3a0b801 	mov	fp, #65536	; 0x10000
   253f0:	e1a07000 	mov	r7, r0
   253f4:	e5993000 	ldr	r3, [r9]
   253f8:	e0468004 	sub	r8, r6, r4
   253fc:	e1530008 	cmp	r3, r8
   25400:	9a000016 	bls	25460 <E131Params::Set(unsigned int)+0xc4>
   25404:	e3550003 	cmp	r5, #3
   25408:	8a000014 	bhi	25460 <E131Params::Set(unsigned int)+0xc4>
   2540c:	e1a0181a 	lsl	r1, sl, r8
   25410:	e5940004 	ldr	r0, [r4, #4]
   25414:	eb00005f 	bl	25598 <E131Params::isMaskSet(unsigned int) const [clone .isra.2]>
   25418:	e3500000 	cmp	r0, #0
   2541c:	0a000003 	beq	25430 <E131Params::Set(unsigned int)+0x94>
   25420:	e5d62014 	ldrb	r2, [r6, #20]
   25424:	e1a01005 	mov	r1, r5
   25428:	e1a00007 	mov	r0, r7
   2542c:	ebffe37e 	bl	1e22c <E131Bridge::SetMergeMode(unsigned int, lightset::MergeMode)>
   25430:	e1a0181b 	lsl	r1, fp, r8
   25434:	e5940004 	ldr	r0, [r4, #4]
   25438:	eb000056 	bl	25598 <E131Params::isMaskSet(unsigned int) const [clone .isra.2]>
   2543c:	e3500000 	cmp	r0, #0
   25440:	0a000003 	beq	25454 <E131Params::Set(unsigned int)+0xb8>
   25444:	e1a02008 	mov	r2, r8
   25448:	e5d6101f 	ldrb	r1, [r6, #31]
   2544c:	e1a00007 	mov	r0, r7
   25450:	ebfffe80 	bl	24e58 <E131Bridge::SetPriority(unsigned char, unsigned int)>
   25454:	e2866001 	add	r6, r6, #1
   25458:	e2855001 	add	r5, r5, #1
   2545c:	eaffffe4 	b	253f4 <E131Params::Set(unsigned int)+0x58>
   25460:	e5941008 	ldr	r1, [r4, #8]
   25464:	e2870c05 	add	r0, r7, #1280	; 0x500
   25468:	e280000c 	add	r0, r0, #12
   2546c:	e1a01421 	lsr	r1, r1, #8
   25470:	e6ff1071 	uxth	r1, r1
   25474:	eb000043 	bl	25588 <E131Bridge::SetFailSafe(lightset::FailSafe) [clone .isra.0]>
   25478:	e3a01a02 	mov	r1, #8192	; 0x2000
   2547c:	e5940004 	ldr	r0, [r4, #4]
   25480:	eb000044 	bl	25598 <E131Params::isMaskSet(unsigned int) const [clone .isra.2]>
   25484:	e3500000 	cmp	r0, #0
   25488:	0a000005 	beq	254a4 <E131Params::Set(unsigned int)+0x108>
   2548c:	e2870e4f 	add	r0, r7, #1264	; 0x4f0
   25490:	e3a01001 	mov	r1, #1
   25494:	e2800005 	add	r0, r0, #5
   25498:	e28dd00c 	add	sp, sp, #12
   2549c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   254a0:	ea00003a 	b	25590 <E131Bridge::SetDisableMergeTimeout(bool) [clone .isra.1]>
   254a4:	e28dd00c 	add	sp, sp, #12
   254a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   254ac:	00046fb8 	.word	0x00046fb8
   254b0:	0005dc0c 	.word	0x0005dc0c

000254b4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)>:
   254b4:	e92d407f 	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   254b8:	e1d0e0b6 	ldrh	lr, [r0, #6]
   254bc:	e1d050b4 	ldrh	r5, [r0, #4]
   254c0:	e15e0005 	cmp	lr, r5
   254c4:	3a000002 	bcc	254d4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x20>
   254c8:	e3a00000 	mov	r0, #0
   254cc:	e28dd010 	add	sp, sp, #16
   254d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   254d4:	e1a0c003 	mov	ip, r3
   254d8:	e59d6020 	ldr	r6, [sp, #32]
   254dc:	e1a03001 	mov	r3, r1
   254e0:	e5901000 	ldr	r1, [r0]
   254e4:	e045500e 	sub	r5, r5, lr
   254e8:	e88d1004 	stm	sp, {r2, ip}
   254ec:	e58d6008 	str	r6, [sp, #8]
   254f0:	e1a02005 	mov	r2, r5
   254f4:	e081100e 	add	r1, r1, lr
   254f8:	e1a04000 	mov	r4, r0
   254fc:	eb000006 	bl	2551c <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)>
   25500:	e1550000 	cmp	r5, r0
   25504:	baffffef 	blt	254c8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x14>
   25508:	e1d430b6 	ldrh	r3, [r4, #6]
   2550c:	e0833000 	add	r3, r3, r0
   25510:	e1c430b6 	strh	r3, [r4, #6]
   25514:	e3a00001 	mov	r0, #1
   25518:	eaffffeb 	b	254cc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x18>

0002551c <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)>:
   2551c:	e92d4010 	push	{r4, lr}
   25520:	e1a0c001 	mov	ip, r1
   25524:	e5dd400c 	ldrb	r4, [sp, #12]
   25528:	e1a01002 	mov	r1, r2
   2552c:	e1a0e003 	mov	lr, r3
   25530:	e3540000 	cmp	r4, #0
   25534:	e1dd20b8 	ldrh	r2, [sp, #8]
   25538:	e5d00008 	ldrb	r0, [r0, #8]
   2553c:	1a000004 	bne	25554 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x38>
   25540:	e3500000 	cmp	r0, #0
   25544:	1a000006 	bne	25564 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x48>
   25548:	e58d2008 	str	r2, [sp, #8]
   2554c:	e59f2028 	ldr	r2, [pc, #40]	; 2557c <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x60>
   25550:	ea000006 	b	25570 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x54>
   25554:	e3500000 	cmp	r0, #0
   25558:	058d2008 	streq	r2, [sp, #8]
   2555c:	059f201c 	ldreq	r2, [pc, #28]	; 25580 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x64>
   25560:	0a000002 	beq	25570 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x54>
   25564:	e58d2008 	str	r2, [sp, #8]
   25568:	e59f2014 	ldr	r2, [pc, #20]	; 25584 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x68>
   2556c:	e1a0300e 	mov	r3, lr
   25570:	e1a0000c 	mov	r0, ip
   25574:	e8bd4010 	pop	{r4, lr}
   25578:	eaffaf3e 	b	11278 <snprintf@plt>
   2557c:	00045d88 	.word	0x00045d88
   25580:	00047f40 	.word	0x00047f40
   25584:	00045d7f 	.word	0x00045d7f

00025588 <E131Bridge::SetFailSafe(lightset::FailSafe) [clone .isra.0]>:
   25588:	e5801000 	str	r1, [r0]
   2558c:	e12fff1e 	bx	lr

00025590 <E131Bridge::SetDisableMergeTimeout(bool) [clone .isra.1]>:
   25590:	e5c01000 	strb	r1, [r0]
   25594:	e12fff1e 	bx	lr

00025598 <E131Params::isMaskSet(unsigned int) const [clone .isra.2]>:
   25598:	e1d13000 	bics	r3, r1, r0
   2559c:	03a00001 	moveq	r0, #1
   255a0:	13a00000 	movne	r0, #0
   255a4:	e12fff1e 	bx	lr

000255a8 <lightset::get_merge_mode(lightset::MergeMode, bool)>:
   255a8:	e3510000 	cmp	r1, #0
   255ac:	159f3018 	ldrne	r3, [pc, #24]	; 255cc <lightset::get_merge_mode(lightset::MergeMode, bool)+0x24>
   255b0:	059f2018 	ldreq	r2, [pc, #24]	; 255d0 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x28>
   255b4:	159f2018 	ldrne	r2, [pc, #24]	; 255d4 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x2c>
   255b8:	059f3018 	ldreq	r3, [pc, #24]	; 255d8 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x30>
   255bc:	e3500000 	cmp	r0, #0
   255c0:	01a00002 	moveq	r0, r2
   255c4:	11a00003 	movne	r0, r3
   255c8:	e12fff1e 	bx	lr
   255cc:	000468dc 	.word	0x000468dc
   255d0:	000468d8 	.word	0x000468d8
   255d4:	000468e0 	.word	0x000468e0
   255d8:	000468e4 	.word	0x000468e4

000255dc <E131Bridge::Print()>:
   255dc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   255e0:	e24dd034 	sub	sp, sp, #52	; 0x34
   255e4:	e28d1008 	add	r1, sp, #8
   255e8:	e1a05000 	mov	r5, r0
   255ec:	e3a04000 	mov	r4, #0
   255f0:	e2800020 	add	r0, r0, #32
   255f4:	e5cd402c 	strb	r4, [sp, #44]	; 0x2c
   255f8:	ebffaf3f 	bl	112fc <uuid_unparse@plt>
   255fc:	e59f00ac 	ldr	r0, [pc, #172]	; 256b0 <E131Bridge::Print()+0xd4>
   25600:	ebffaf07 	bl	11224 <puts@plt>
   25604:	e59f30a8 	ldr	r3, [pc, #168]	; 256b4 <E131Bridge::Print()+0xd8>
   25608:	e59f00a8 	ldr	r0, [pc, #168]	; 256b8 <E131Bridge::Print()+0xdc>
   2560c:	e5d31000 	ldrb	r1, [r3]
   25610:	e5d32001 	ldrb	r2, [r3, #1]
   25614:	ebffaef6 	bl	111f4 <printf@plt>
   25618:	e28d1008 	add	r1, sp, #8
   2561c:	e59f0098 	ldr	r0, [pc, #152]	; 256bc <E131Bridge::Print()+0xe0>
   25620:	ebffaef3 	bl	111f4 <printf@plt>
   25624:	e5d53507 	ldrb	r3, [r5, #1287]	; 0x507
   25628:	e1530004 	cmp	r3, r4
   2562c:	0a000018 	beq	25694 <E131Bridge::Print()+0xb8>
   25630:	e59f0088 	ldr	r0, [pc, #136]	; 256c0 <E131Bridge::Print()+0xe4>
   25634:	ebffaefa 	bl	11224 <puts@plt>
   25638:	e2856d15 	add	r6, r5, #1344	; 0x540
   2563c:	e59f7080 	ldr	r7, [pc, #128]	; 256c4 <E131Bridge::Print()+0xe8>
   25640:	e286600c 	add	r6, r6, #12
   25644:	e3a03001 	mov	r3, #1
   25648:	e28d2006 	add	r2, sp, #6
   2564c:	e1a01004 	mov	r1, r4
   25650:	e1a00005 	mov	r0, r5
   25654:	eb00029b 	bl	260c8 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
   25658:	e3500000 	cmp	r0, #0
   2565c:	0a000009 	beq	25688 <E131Bridge::Print()+0xac>
   25660:	e3a03044 	mov	r3, #68	; 0x44
   25664:	e3a01001 	mov	r1, #1
   25668:	e0030493 	mul	r3, r3, r4
   2566c:	e7960003 	ldr	r0, [r6, r3]
   25670:	ebffffcc 	bl	255a8 <lightset::get_merge_mode(lightset::MergeMode, bool)>
   25674:	e1dd20b6 	ldrh	r2, [sp, #6]
   25678:	e1a01004 	mov	r1, r4
   2567c:	e1a03000 	mov	r3, r0
   25680:	e1a00007 	mov	r0, r7
   25684:	ebffaeda 	bl	111f4 <printf@plt>
   25688:	e2844001 	add	r4, r4, #1
   2568c:	e3540004 	cmp	r4, #4
   25690:	1affffeb 	bne	25644 <E131Bridge::Print()+0x68>
   25694:	e5d534f6 	ldrb	r3, [r5, #1270]	; 0x4f6
   25698:	e3530000 	cmp	r3, #0
   2569c:	0a000001 	beq	256a8 <E131Bridge::Print()+0xcc>
   256a0:	e59f0020 	ldr	r0, [pc, #32]	; 256c8 <E131Bridge::Print()+0xec>
   256a4:	ebffaede 	bl	11224 <puts@plt>
   256a8:	e28dd034 	add	sp, sp, #52	; 0x34
   256ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   256b0:	00047058 	.word	0x00047058
   256b4:	0004731c 	.word	0x0004731c
   256b8:	0004705f 	.word	0x0004705f
   256bc:	00047072 	.word	0x00047072
   256c0:	00046cef 	.word	0x00046cef
   256c4:	00047082 	.word	0x00047082
   256c8:	00047097 	.word	0x00047097

000256cc <network::convert_to_uint(unsigned char, unsigned char, unsigned char, unsigned char)>:
   256cc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   256d0:	e28db000 	add	fp, sp, #0
   256d4:	e24dd00c 	sub	sp, sp, #12
   256d8:	e1a0c000 	mov	ip, r0
   256dc:	e1a00001 	mov	r0, r1
   256e0:	e1a01002 	mov	r1, r2
   256e4:	e1a02003 	mov	r2, r3
   256e8:	e1a0300c 	mov	r3, ip
   256ec:	e54b3005 	strb	r3, [fp, #-5]
   256f0:	e1a03000 	mov	r3, r0
   256f4:	e54b3006 	strb	r3, [fp, #-6]
   256f8:	e1a03001 	mov	r3, r1
   256fc:	e54b3007 	strb	r3, [fp, #-7]
   25700:	e1a03002 	mov	r3, r2
   25704:	e54b3008 	strb	r3, [fp, #-8]
   25708:	e55b2005 	ldrb	r2, [fp, #-5]
   2570c:	e55b3006 	ldrb	r3, [fp, #-6]
   25710:	e1a03403 	lsl	r3, r3, #8
   25714:	e1822003 	orr	r2, r2, r3
   25718:	e55b3007 	ldrb	r3, [fp, #-7]
   2571c:	e1a03803 	lsl	r3, r3, #16
   25720:	e1822003 	orr	r2, r2, r3
   25724:	e55b3008 	ldrb	r3, [fp, #-8]
   25728:	e1a03c03 	lsl	r3, r3, #24
   2572c:	e1823003 	orr	r3, r2, r3
   25730:	e1a00003 	mov	r0, r3
   25734:	e28bd000 	add	sp, fp, #0
   25738:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2573c:	e12fff1e 	bx	lr

00025740 <Network::GetHostName() const>:
   25740:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   25744:	e28db000 	add	fp, sp, #0
   25748:	e24dd00c 	sub	sp, sp, #12
   2574c:	e50b0008 	str	r0, [fp, #-8]
   25750:	e51b3008 	ldr	r3, [fp, #-8]
   25754:	e283301c 	add	r3, r3, #28
   25758:	e1a00003 	mov	r0, r3
   2575c:	e28bd000 	add	sp, fp, #0
   25760:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   25764:	e12fff1e 	bx	lr

00025768 <e131::universe_to_multicast_ip(unsigned short)>:
   25768:	e92d4800 	push	{fp, lr}
   2576c:	e28db004 	add	fp, sp, #4
   25770:	e24dd008 	sub	sp, sp, #8
   25774:	e1a03000 	mov	r3, r0
   25778:	e14b30b6 	strh	r3, [fp, #-6]
   2577c:	e3a03000 	mov	r3, #0
   25780:	e3a02000 	mov	r2, #0
   25784:	e3a010ff 	mov	r1, #255	; 0xff
   25788:	e3a000ef 	mov	r0, #239	; 0xef
   2578c:	ebffffce 	bl	256cc <network::convert_to_uint(unsigned char, unsigned char, unsigned char, unsigned char)>
   25790:	e1a02000 	mov	r2, r0
   25794:	e15b30b6 	ldrh	r3, [fp, #-6]
   25798:	e1a03c03 	lsl	r3, r3, #24
   2579c:	e1822003 	orr	r2, r2, r3
   257a0:	e15b30b6 	ldrh	r3, [fp, #-6]
   257a4:	e1a03403 	lsl	r3, r3, #8
   257a8:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
   257ac:	e1823003 	orr	r3, r2, r3
   257b0:	e1a00003 	mov	r0, r3
   257b4:	e24bd004 	sub	sp, fp, #4
   257b8:	e8bd8800 	pop	{fp, pc}

000257bc <E131Bridge::SetSourceName(char const*)>:
   257bc:	e92d4800 	push	{fp, lr}
   257c0:	e28db004 	add	fp, sp, #4
   257c4:	e24dd008 	sub	sp, sp, #8
   257c8:	e50b0008 	str	r0, [fp, #-8]
   257cc:	e50b100c 	str	r1, [fp, #-12]
   257d0:	e51b3008 	ldr	r3, [fp, #-8]
   257d4:	e2833030 	add	r3, r3, #48	; 0x30
   257d8:	e3a0203f 	mov	r2, #63	; 0x3f
   257dc:	e51b100c 	ldr	r1, [fp, #-12]
   257e0:	e1a00003 	mov	r0, r3
   257e4:	ebffaf2d 	bl	114a0 <strncpy@plt>
   257e8:	e51b3008 	ldr	r3, [fp, #-8]
   257ec:	e3a02000 	mov	r2, #0
   257f0:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
   257f4:	e1a00000 	nop			; (mov r0, r0)
   257f8:	e24bd004 	sub	sp, fp, #4
   257fc:	e8bd8800 	pop	{fp, pc}

00025800 <hal::panel_led_on(unsigned int)>:
   25800:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   25804:	e28db000 	add	fp, sp, #0
   25808:	e24dd00c 	sub	sp, sp, #12
   2580c:	e50b0008 	str	r0, [fp, #-8]
   25810:	e1a00000 	nop			; (mov r0, r0)
   25814:	e28bd000 	add	sp, fp, #0
   25818:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2581c:	e12fff1e 	bx	lr

00025820 <hal::panel_led_off(unsigned int)>:
   25820:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   25824:	e28db000 	add	fp, sp, #0
   25828:	e24dd00c 	sub	sp, sp, #12
   2582c:	e50b0008 	str	r0, [fp, #-8]
   25830:	e1a00000 	nop			; (mov r0, r0)
   25834:	e28bd000 	add	sp, fp, #0
   25838:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2583c:	e12fff1e 	bx	lr

00025840 <E131Bridge::E131Bridge()>:
   25840:	e92d4810 	push	{r4, fp, lr}
   25844:	e28db008 	add	fp, sp, #8
   25848:	e24dd05c 	sub	sp, sp, #92	; 0x5c
   2584c:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
   25850:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   25854:	e3e02000 	mvn	r2, #0
   25858:	e5832000 	str	r2, [r3]
   2585c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   25860:	e3a02000 	mov	r2, #0
   25864:	e5832004 	str	r2, [r3, #4]
   25868:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2586c:	e3a02001 	mov	r2, #1
   25870:	e5c32008 	strb	r2, [r3, #8]
   25874:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   25878:	e3a02000 	mov	r2, #0
   2587c:	e583200c 	str	r2, [r3, #12]
   25880:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   25884:	e3a02000 	mov	r2, #0
   25888:	e5832010 	str	r2, [r3, #16]
   2588c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   25890:	e3a02000 	mov	r2, #0
   25894:	e5832014 	str	r2, [r3, #20]
   25898:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2589c:	e3a02000 	mov	r2, #0
   258a0:	e5832018 	str	r2, [r3, #24]
   258a4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   258a8:	e3a02000 	mov	r2, #0
   258ac:	e583201c 	str	r2, [r3, #28]
   258b0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   258b4:	e3a02000 	mov	r2, #0
   258b8:	e5832070 	str	r2, [r3, #112]	; 0x70
   258bc:	e59f217c 	ldr	r2, [pc, #380]	; 25a40 <E131Bridge::E131Bridge()+0x200>
   258c0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   258c4:	e5823000 	str	r3, [r2]
   258c8:	e3a03000 	mov	r3, #0
   258cc:	e50b3010 	str	r3, [fp, #-16]
   258d0:	e51b3010 	ldr	r3, [fp, #-16]
   258d4:	e3530003 	cmp	r3, #3
   258d8:	8a000026 	bhi	25978 <E131Bridge::E131Bridge()+0x138>
   258dc:	e51b2010 	ldr	r2, [fp, #-16]
   258e0:	e1a03002 	mov	r3, r2
   258e4:	e1a03203 	lsl	r3, r3, #4
   258e8:	e0833002 	add	r3, r3, r2
   258ec:	e1a03103 	lsl	r3, r3, #2
   258f0:	e2833e51 	add	r3, r3, #1296	; 0x510
   258f4:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
   258f8:	e0823003 	add	r3, r2, r3
   258fc:	e3a02044 	mov	r2, #68	; 0x44
   25900:	e3a01000 	mov	r1, #0
   25904:	e1a00003 	mov	r0, r3
   25908:	ebffae57 	bl	1126c <memset@plt>
   2590c:	e51b2010 	ldr	r2, [fp, #-16]
   25910:	e1a03002 	mov	r3, r2
   25914:	e1a03083 	lsl	r3, r3, #1
   25918:	e0833002 	add	r3, r3, r2
   2591c:	e1a03103 	lsl	r3, r3, #2
   25920:	e2833e62 	add	r3, r3, #1568	; 0x620
   25924:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
   25928:	e0823003 	add	r3, r2, r3
   2592c:	e3a0200c 	mov	r2, #12
   25930:	e3a01000 	mov	r1, #0
   25934:	e1a00003 	mov	r0, r3
   25938:	ebffae4b 	bl	1126c <memset@plt>
   2593c:	e51b1058 	ldr	r1, [fp, #-88]	; 0xffffffa8
   25940:	e51b2010 	ldr	r2, [fp, #-16]
   25944:	e1a03002 	mov	r3, r2
   25948:	e1a03083 	lsl	r3, r3, #1
   2594c:	e0833002 	add	r3, r3, r2
   25950:	e1a03103 	lsl	r3, r3, #2
   25954:	e0813003 	add	r3, r1, r3
   25958:	e2833e62 	add	r3, r3, #1568	; 0x620
   2595c:	e2833009 	add	r3, r3, #9
   25960:	e3a02064 	mov	r2, #100	; 0x64
   25964:	e5c32000 	strb	r2, [r3]
   25968:	e51b3010 	ldr	r3, [fp, #-16]
   2596c:	e2833001 	add	r3, r3, #1
   25970:	e50b3010 	str	r3, [fp, #-16]
   25974:	eaffffd5 	b	258d0 <E131Bridge::E131Bridge()+0x90>
   25978:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2597c:	e2833e4f 	add	r3, r3, #1264	; 0x4f0
   25980:	e3a02020 	mov	r2, #32
   25984:	e3a01000 	mov	r1, #0
   25988:	e1a00003 	mov	r0, r3
   2598c:	ebffae36 	bl	1126c <memset@plt>
   25990:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   25994:	e3a02001 	mov	r2, #1
   25998:	e5c32508 	strb	r2, [r3, #1288]	; 0x508
   2599c:	ebffcb51 	bl	186e8 <Network::Get()>
   259a0:	e1a03000 	mov	r3, r0
   259a4:	e1a00003 	mov	r0, r3
   259a8:	ebffff64 	bl	25740 <Network::GetHostName() const>
   259ac:	e1a04000 	mov	r4, r0
   259b0:	ebffaf12 	bl	11600 <Hardware::Get()>
   259b4:	e1a02000 	mov	r2, r0
   259b8:	e24b3011 	sub	r3, fp, #17
   259bc:	e1a01003 	mov	r1, r3
   259c0:	e1a00002 	mov	r0, r2
   259c4:	eb006883 	bl	3fbd8 <Hardware::GetBoardName(unsigned char&)>
   259c8:	e1a03000 	mov	r3, r0
   259cc:	e24b0054 	sub	r0, fp, #84	; 0x54
   259d0:	e58d3000 	str	r3, [sp]
   259d4:	e1a03004 	mov	r3, r4
   259d8:	e59f2064 	ldr	r2, [pc, #100]	; 25a44 <E131Bridge::E131Bridge()+0x204>
   259dc:	e3a01040 	mov	r1, #64	; 0x40
   259e0:	ebffae24 	bl	11278 <snprintf@plt>
   259e4:	e24b3054 	sub	r3, fp, #84	; 0x54
   259e8:	e1a01003 	mov	r1, r3
   259ec:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
   259f0:	ebffff71 	bl	257bc <E131Bridge::SetSourceName(char const*)>
   259f4:	ebffcb3b 	bl	186e8 <Network::Get()>
   259f8:	e1a03000 	mov	r3, r0
   259fc:	e3a01d57 	mov	r1, #5568	; 0x15c0
   25a00:	e1a00003 	mov	r0, r3
   25a04:	eb00412a 	bl	35eb4 <Network::Begin(unsigned short)>
   25a08:	e1a02000 	mov	r2, r0
   25a0c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   25a10:	e5832000 	str	r2, [r3]
   25a14:	ebffaef9 	bl	11600 <Hardware::Get()>
   25a18:	e1a02000 	mov	r2, r0
   25a1c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   25a20:	e2833020 	add	r3, r3, #32
   25a24:	e1a01003 	mov	r1, r3
   25a28:	e1a00002 	mov	r0, r2
   25a2c:	eb006a3f 	bl	40330 <Hardware::GetUuid(unsigned char*)>
   25a30:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   25a34:	e1a00003 	mov	r0, r3
   25a38:	e24bd008 	sub	sp, fp, #8
   25a3c:	e8bd8810 	pop	{r4, fp, pc}
   25a40:	0005dc10 	.word	0x0005dc10
   25a44:	0004716c 	.word	0x0004716c

00025a48 <E131Bridge::~E131Bridge()>:
   25a48:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   25a4c:	e28db000 	add	fp, sp, #0
   25a50:	e24dd00c 	sub	sp, sp, #12
   25a54:	e50b0008 	str	r0, [fp, #-8]
   25a58:	e51b3008 	ldr	r3, [fp, #-8]
   25a5c:	e1a00003 	mov	r0, r3
   25a60:	e28bd000 	add	sp, fp, #0
   25a64:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   25a68:	e12fff1e 	bx	lr

00025a6c <E131Bridge::Start()>:
   25a6c:	e92d4800 	push	{fp, lr}
   25a70:	e28db004 	add	fp, sp, #4
   25a74:	e24dd008 	sub	sp, sp, #8
   25a78:	e50b0008 	str	r0, [fp, #-8]
   25a7c:	ebffaedf 	bl	11600 <Hardware::Get()>
   25a80:	e1a03000 	mov	r3, r0
   25a84:	e3a01002 	mov	r1, #2
   25a88:	e1a00003 	mov	r0, r3
   25a8c:	eb006598 	bl	3f0f4 <Hardware::SetMode(hardware::ledblink::Mode)>
   25a90:	e1a00000 	nop			; (mov r0, r0)
   25a94:	e24bd004 	sub	sp, fp, #4
   25a98:	e8bd8800 	pop	{fp, pc}

00025a9c <E131Bridge::Stop()>:
   25a9c:	e92d4800 	push	{fp, lr}
   25aa0:	e28db004 	add	fp, sp, #4
   25aa4:	e24dd010 	sub	sp, sp, #16
   25aa8:	e50b0010 	str	r0, [fp, #-16]
   25aac:	e51b3010 	ldr	r3, [fp, #-16]
   25ab0:	e3a02001 	mov	r2, #1
   25ab4:	e5c324f0 	strb	r2, [r3, #1264]	; 0x4f0
   25ab8:	e3a03000 	mov	r3, #0
   25abc:	e50b3008 	str	r3, [fp, #-8]
   25ac0:	e51b3008 	ldr	r3, [fp, #-8]
   25ac4:	e3530003 	cmp	r3, #3
   25ac8:	8a00001d 	bhi	25b44 <E131Bridge::Stop()+0xa8>
   25acc:	e51b3010 	ldr	r3, [fp, #-16]
   25ad0:	e5933004 	ldr	r3, [r3, #4]
   25ad4:	e3530000 	cmp	r3, #0
   25ad8:	0a000009 	beq	25b04 <E131Bridge::Stop()+0x68>
   25adc:	e51b3010 	ldr	r3, [fp, #-16]
   25ae0:	e5932004 	ldr	r2, [r3, #4]
   25ae4:	e51b3010 	ldr	r3, [fp, #-16]
   25ae8:	e5933004 	ldr	r3, [r3, #4]
   25aec:	e5933000 	ldr	r3, [r3]
   25af0:	e283300c 	add	r3, r3, #12
   25af4:	e5933000 	ldr	r3, [r3]
   25af8:	e51b1008 	ldr	r1, [fp, #-8]
   25afc:	e1a00002 	mov	r0, r2
   25b00:	e12fff33 	blx	r3
   25b04:	e51b0008 	ldr	r0, [fp, #-8]
   25b08:	ebffe53f 	bl	1f00c <lightset::Data::ClearLength(unsigned int)>
   25b0c:	e51b1010 	ldr	r1, [fp, #-16]
   25b10:	e51b2008 	ldr	r2, [fp, #-8]
   25b14:	e1a03002 	mov	r3, r2
   25b18:	e1a03203 	lsl	r3, r3, #4
   25b1c:	e0833002 	add	r3, r3, r2
   25b20:	e1a03103 	lsl	r3, r3, #2
   25b24:	e0813003 	add	r3, r1, r3
   25b28:	e2833e55 	add	r3, r3, #1360	; 0x550
   25b2c:	e3a02000 	mov	r2, #0
   25b30:	e5c32000 	strb	r2, [r3]
   25b34:	e51b3008 	ldr	r3, [fp, #-8]
   25b38:	e2833001 	add	r3, r3, #1
   25b3c:	e50b3008 	str	r3, [fp, #-8]
   25b40:	eaffffde 	b	25ac0 <E131Bridge::Stop()+0x24>
   25b44:	ebffaead 	bl	11600 <Hardware::Get()>
   25b48:	e1a03000 	mov	r3, r0
   25b4c:	e3a01000 	mov	r1, #0
   25b50:	e1a00003 	mov	r0, r3
   25b54:	eb006566 	bl	3f0f4 <Hardware::SetMode(hardware::ledblink::Mode)>
   25b58:	e1a00000 	nop			; (mov r0, r0)
   25b5c:	e24bd004 	sub	sp, fp, #4
   25b60:	e8bd8800 	pop	{fp, pc}

00025b64 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
   25b64:	e92d4830 	push	{r4, r5, fp, lr}
   25b68:	e28db00c 	add	fp, sp, #12
   25b6c:	e24dd010 	sub	sp, sp, #16
   25b70:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   25b74:	e1a00001 	mov	r0, r1
   25b78:	e1a01002 	mov	r1, r2
   25b7c:	e1a02003 	mov	r2, r3
   25b80:	e1a03000 	mov	r3, r0
   25b84:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   25b88:	e1a03001 	mov	r3, r1
   25b8c:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
   25b90:	e1a03002 	mov	r3, r2
   25b94:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
   25b98:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   25b9c:	e3530000 	cmp	r3, #0
   25ba0:	0a000004 	beq	25bb8 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x54>
   25ba4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25ba8:	e2833c05 	add	r3, r3, #1280	; 0x500
   25bac:	e2833002 	add	r3, r3, #2
   25bb0:	e50b3010 	str	r3, [fp, #-16]
   25bb4:	ea000006 	b	25bd4 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x70>
   25bb8:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
   25bbc:	e3530000 	cmp	r3, #0
   25bc0:	0a000026 	beq	25c60 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xfc>
   25bc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25bc8:	e2833c05 	add	r3, r3, #1280	; 0x500
   25bcc:	e2833004 	add	r3, r3, #4
   25bd0:	e50b3010 	str	r3, [fp, #-16]
   25bd4:	e51b3010 	ldr	r3, [fp, #-16]
   25bd8:	e1d330b0 	ldrh	r3, [r3]
   25bdc:	e3530000 	cmp	r3, #0
   25be0:	1a000003 	bne	25bf4 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x90>
   25be4:	e51b3010 	ldr	r3, [fp, #-16]
   25be8:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
   25bec:	e1c320b0 	strh	r2, [r3]
   25bf0:	ea00000d 	b	25c2c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xc8>
   25bf4:	e51b3010 	ldr	r3, [fp, #-16]
   25bf8:	e1d330b0 	ldrh	r3, [r3]
   25bfc:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
   25c00:	e1520003 	cmp	r2, r3
   25c04:	0a000017 	beq	25c68 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x104>
   25c08:	e51b3010 	ldr	r3, [fp, #-16]
   25c0c:	e1d330b0 	ldrh	r3, [r3]
   25c10:	e1a02003 	mov	r2, r3
   25c14:	e3a01004 	mov	r1, #4
   25c18:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   25c1c:	eb000014 	bl	25c74 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
   25c20:	e51b3010 	ldr	r3, [fp, #-16]
   25c24:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
   25c28:	e1c320b0 	strh	r2, [r3]
   25c2c:	ebffcaad 	bl	186e8 <Network::Get()>
   25c30:	e1a05000 	mov	r5, r0
   25c34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25c38:	e5934000 	ldr	r4, [r3]
   25c3c:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
   25c40:	e1a00003 	mov	r0, r3
   25c44:	ebfffec7 	bl	25768 <e131::universe_to_multicast_ip(unsigned short)>
   25c48:	e1a03000 	mov	r3, r0
   25c4c:	e1a02003 	mov	r2, r3
   25c50:	e1a01004 	mov	r1, r4
   25c54:	e1a00005 	mov	r0, r5
   25c58:	eb004252 	bl	365a8 <Network::JoinGroup(int, unsigned int)>
   25c5c:	ea000002 	b	25c6c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x108>
   25c60:	e1a00000 	nop			; (mov r0, r0)
   25c64:	ea000000 	b	25c6c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x108>
   25c68:	e1a00000 	nop			; (mov r0, r0)
   25c6c:	e24bd00c 	sub	sp, fp, #12
   25c70:	e8bd8830 	pop	{r4, r5, fp, pc}

00025c74 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
   25c74:	e92d4830 	push	{r4, r5, fp, lr}
   25c78:	e28db00c 	add	fp, sp, #12
   25c7c:	e24dd018 	sub	sp, sp, #24
   25c80:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   25c84:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   25c88:	e1a03002 	mov	r3, r2
   25c8c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
   25c90:	e3a03000 	mov	r3, #0
   25c94:	e50b3010 	str	r3, [fp, #-16]
   25c98:	e51b3010 	ldr	r3, [fp, #-16]
   25c9c:	e3530003 	cmp	r3, #3
   25ca0:	8a000015 	bhi	25cfc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x88>
   25ca4:	e51b2010 	ldr	r2, [fp, #-16]
   25ca8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25cac:	e1520003 	cmp	r2, r3
   25cb0:	0a00000c 	beq	25ce8 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x74>
   25cb4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   25cb8:	e51b2010 	ldr	r2, [fp, #-16]
   25cbc:	e1a03002 	mov	r3, r2
   25cc0:	e1a03203 	lsl	r3, r3, #4
   25cc4:	e0833002 	add	r3, r3, r2
   25cc8:	e1a03103 	lsl	r3, r3, #2
   25ccc:	e0813003 	add	r3, r1, r3
   25cd0:	e2833e51 	add	r3, r3, #1296	; 0x510
   25cd4:	e1d330b0 	ldrh	r3, [r3]
   25cd8:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
   25cdc:	e1520003 	cmp	r2, r3
   25ce0:	0a000012 	beq	25d30 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xbc>
   25ce4:	ea000000 	b	25cec <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x78>
   25ce8:	e1a00000 	nop			; (mov r0, r0)
   25cec:	e51b3010 	ldr	r3, [fp, #-16]
   25cf0:	e2833001 	add	r3, r3, #1
   25cf4:	e50b3010 	str	r3, [fp, #-16]
   25cf8:	eaffffe6 	b	25c98 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x24>
   25cfc:	ebffca79 	bl	186e8 <Network::Get()>
   25d00:	e1a05000 	mov	r5, r0
   25d04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25d08:	e5934000 	ldr	r4, [r3]
   25d0c:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   25d10:	e1a00003 	mov	r0, r3
   25d14:	ebfffe93 	bl	25768 <e131::universe_to_multicast_ip(unsigned short)>
   25d18:	e1a03000 	mov	r3, r0
   25d1c:	e1a02003 	mov	r2, r3
   25d20:	e1a01004 	mov	r1, r4
   25d24:	e1a00005 	mov	r0, r5
   25d28:	eb00423d 	bl	36624 <Network::LeaveGroup(int, unsigned int)>
   25d2c:	ea000000 	b	25d34 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xc0>
   25d30:	e1a00000 	nop			; (mov r0, r0)
   25d34:	e24bd00c 	sub	sp, fp, #12
   25d38:	e8bd8830 	pop	{r4, r5, fp, pc}

00025d3c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
   25d3c:	e92d4830 	push	{r4, r5, fp, lr}
   25d40:	e28db00c 	add	fp, sp, #12
   25d44:	e24dd010 	sub	sp, sp, #16
   25d48:	e50b0010 	str	r0, [fp, #-16]
   25d4c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   25d50:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   25d54:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
   25d58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25d5c:	e3530000 	cmp	r3, #0
   25d60:	1a000044 	bne	25e78 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x13c>
   25d64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25d68:	e3530003 	cmp	r3, #3
   25d6c:	8a000041 	bhi	25e78 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x13c>
   25d70:	e51b1010 	ldr	r1, [fp, #-16]
   25d74:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   25d78:	e1a03002 	mov	r3, r2
   25d7c:	e1a03083 	lsl	r3, r3, #1
   25d80:	e0833002 	add	r3, r3, r2
   25d84:	e1a03103 	lsl	r3, r3, #2
   25d88:	e0813003 	add	r3, r1, r3
   25d8c:	e2833e62 	add	r3, r3, #1568	; 0x620
   25d90:	e2833002 	add	r3, r3, #2
   25d94:	e5d33000 	ldrb	r3, [r3]
   25d98:	e3530000 	cmp	r3, #0
   25d9c:	0a00000c 	beq	25dd4 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
   25da0:	e51b1010 	ldr	r1, [fp, #-16]
   25da4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   25da8:	e1a03002 	mov	r3, r2
   25dac:	e1a03083 	lsl	r3, r3, #1
   25db0:	e0833002 	add	r3, r3, r2
   25db4:	e1a03103 	lsl	r3, r3, #2
   25db8:	e0813003 	add	r3, r1, r3
   25dbc:	e2833e62 	add	r3, r3, #1568	; 0x620
   25dc0:	e1d330b0 	ldrh	r3, [r3]
   25dc4:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
   25dc8:	e1520003 	cmp	r2, r3
   25dcc:	1a000011 	bne	25e18 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xdc>
   25dd0:	ea0000ba 	b	260c0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x384>
   25dd4:	e51b3010 	ldr	r3, [fp, #-16]
   25dd8:	e5d33506 	ldrb	r3, [r3, #1286]	; 0x506
   25ddc:	e2833001 	add	r3, r3, #1
   25de0:	e6ef2073 	uxtb	r2, r3
   25de4:	e51b3010 	ldr	r3, [fp, #-16]
   25de8:	e5c32506 	strb	r2, [r3, #1286]	; 0x506
   25dec:	e51b1010 	ldr	r1, [fp, #-16]
   25df0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   25df4:	e1a03002 	mov	r3, r2
   25df8:	e1a03083 	lsl	r3, r3, #1
   25dfc:	e0833002 	add	r3, r3, r2
   25e00:	e1a03103 	lsl	r3, r3, #2
   25e04:	e0813003 	add	r3, r1, r3
   25e08:	e2833e62 	add	r3, r3, #1568	; 0x620
   25e0c:	e2833002 	add	r3, r3, #2
   25e10:	e3a02001 	mov	r2, #1
   25e14:	e5c32000 	strb	r2, [r3]
   25e18:	e51b1010 	ldr	r1, [fp, #-16]
   25e1c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   25e20:	e1a03002 	mov	r3, r2
   25e24:	e1a03083 	lsl	r3, r3, #1
   25e28:	e0833002 	add	r3, r3, r2
   25e2c:	e1a03103 	lsl	r3, r3, #2
   25e30:	e0813003 	add	r3, r1, r3
   25e34:	e2833e62 	add	r3, r3, #1568	; 0x620
   25e38:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
   25e3c:	e1c320b0 	strh	r2, [r3]
   25e40:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
   25e44:	e1a00003 	mov	r0, r3
   25e48:	ebfffe46 	bl	25768 <e131::universe_to_multicast_ip(unsigned short)>
   25e4c:	e51b1010 	ldr	r1, [fp, #-16]
   25e50:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   25e54:	e1a03002 	mov	r3, r2
   25e58:	e1a03083 	lsl	r3, r3, #1
   25e5c:	e0833002 	add	r3, r3, r2
   25e60:	e1a03103 	lsl	r3, r3, #2
   25e64:	e0813003 	add	r3, r1, r3
   25e68:	e2833e62 	add	r3, r3, #1568	; 0x620
   25e6c:	e2833004 	add	r3, r3, #4
   25e70:	e5830000 	str	r0, [r3]
   25e74:	ea000091 	b	260c0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x384>
   25e78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25e7c:	e3530002 	cmp	r3, #2
   25e80:	1a000045 	bne	25f9c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x260>
   25e84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25e88:	e3530003 	cmp	r3, #3
   25e8c:	8a000021 	bhi	25f18 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1dc>
   25e90:	e51b1010 	ldr	r1, [fp, #-16]
   25e94:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   25e98:	e1a03002 	mov	r3, r2
   25e9c:	e1a03203 	lsl	r3, r3, #4
   25ea0:	e0833002 	add	r3, r3, r2
   25ea4:	e1a03103 	lsl	r3, r3, #2
   25ea8:	e0813003 	add	r3, r1, r3
   25eac:	e2833e51 	add	r3, r3, #1296	; 0x510
   25eb0:	e2833002 	add	r3, r3, #2
   25eb4:	e5d33000 	ldrb	r3, [r3]
   25eb8:	e3530000 	cmp	r3, #0
   25ebc:	0a000015 	beq	25f18 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1dc>
   25ec0:	e51b1010 	ldr	r1, [fp, #-16]
   25ec4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   25ec8:	e1a03002 	mov	r3, r2
   25ecc:	e1a03203 	lsl	r3, r3, #4
   25ed0:	e0833002 	add	r3, r3, r2
   25ed4:	e1a03103 	lsl	r3, r3, #2
   25ed8:	e0813003 	add	r3, r1, r3
   25edc:	e2833e51 	add	r3, r3, #1296	; 0x510
   25ee0:	e2833002 	add	r3, r3, #2
   25ee4:	e3a02000 	mov	r2, #0
   25ee8:	e5c32000 	strb	r2, [r3]
   25eec:	e51b3010 	ldr	r3, [fp, #-16]
   25ef0:	e5d33507 	ldrb	r3, [r3, #1287]	; 0x507
   25ef4:	e2433001 	sub	r3, r3, #1
   25ef8:	e6ef2073 	uxtb	r2, r3
   25efc:	e51b3010 	ldr	r3, [fp, #-16]
   25f00:	e5c32507 	strb	r2, [r3, #1287]	; 0x507
   25f04:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
   25f08:	e1a02003 	mov	r2, r3
   25f0c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   25f10:	e51b0010 	ldr	r0, [fp, #-16]
   25f14:	ebffff56 	bl	25c74 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
   25f18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25f1c:	e3530003 	cmp	r3, #3
   25f20:	8a000063 	bhi	260b4 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x378>
   25f24:	e51b1010 	ldr	r1, [fp, #-16]
   25f28:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   25f2c:	e1a03002 	mov	r3, r2
   25f30:	e1a03083 	lsl	r3, r3, #1
   25f34:	e0833002 	add	r3, r3, r2
   25f38:	e1a03103 	lsl	r3, r3, #2
   25f3c:	e0813003 	add	r3, r1, r3
   25f40:	e2833e62 	add	r3, r3, #1568	; 0x620
   25f44:	e2833002 	add	r3, r3, #2
   25f48:	e5d33000 	ldrb	r3, [r3]
   25f4c:	e3530000 	cmp	r3, #0
   25f50:	0a000057 	beq	260b4 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x378>
   25f54:	e51b1010 	ldr	r1, [fp, #-16]
   25f58:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   25f5c:	e1a03002 	mov	r3, r2
   25f60:	e1a03083 	lsl	r3, r3, #1
   25f64:	e0833002 	add	r3, r3, r2
   25f68:	e1a03103 	lsl	r3, r3, #2
   25f6c:	e0813003 	add	r3, r1, r3
   25f70:	e2833e62 	add	r3, r3, #1568	; 0x620
   25f74:	e2833002 	add	r3, r3, #2
   25f78:	e3a02000 	mov	r2, #0
   25f7c:	e5c32000 	strb	r2, [r3]
   25f80:	e51b3010 	ldr	r3, [fp, #-16]
   25f84:	e5d33506 	ldrb	r3, [r3, #1286]	; 0x506
   25f88:	e2433001 	sub	r3, r3, #1
   25f8c:	e6ef2073 	uxtb	r2, r3
   25f90:	e51b3010 	ldr	r3, [fp, #-16]
   25f94:	e5c32506 	strb	r2, [r3, #1286]	; 0x506
   25f98:	ea000045 	b	260b4 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x378>
   25f9c:	e51b1010 	ldr	r1, [fp, #-16]
   25fa0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   25fa4:	e1a03002 	mov	r3, r2
   25fa8:	e1a03203 	lsl	r3, r3, #4
   25fac:	e0833002 	add	r3, r3, r2
   25fb0:	e1a03103 	lsl	r3, r3, #2
   25fb4:	e0813003 	add	r3, r1, r3
   25fb8:	e2833e51 	add	r3, r3, #1296	; 0x510
   25fbc:	e2833002 	add	r3, r3, #2
   25fc0:	e5d33000 	ldrb	r3, [r3]
   25fc4:	e3530000 	cmp	r3, #0
   25fc8:	0a000011 	beq	26014 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x2d8>
   25fcc:	e51b1010 	ldr	r1, [fp, #-16]
   25fd0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   25fd4:	e1a03002 	mov	r3, r2
   25fd8:	e1a03203 	lsl	r3, r3, #4
   25fdc:	e0833002 	add	r3, r3, r2
   25fe0:	e1a03103 	lsl	r3, r3, #2
   25fe4:	e0813003 	add	r3, r1, r3
   25fe8:	e2833e51 	add	r3, r3, #1296	; 0x510
   25fec:	e1d330b0 	ldrh	r3, [r3]
   25ff0:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
   25ff4:	e1520003 	cmp	r2, r3
   25ff8:	0a00002f 	beq	260bc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x380>
   25ffc:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
   26000:	e1a02003 	mov	r2, r3
   26004:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   26008:	e51b0010 	ldr	r0, [fp, #-16]
   2600c:	ebffff18 	bl	25c74 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
   26010:	ea000010 	b	26058 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x31c>
   26014:	e51b3010 	ldr	r3, [fp, #-16]
   26018:	e5d33507 	ldrb	r3, [r3, #1287]	; 0x507
   2601c:	e2833001 	add	r3, r3, #1
   26020:	e6ef2073 	uxtb	r2, r3
   26024:	e51b3010 	ldr	r3, [fp, #-16]
   26028:	e5c32507 	strb	r2, [r3, #1287]	; 0x507
   2602c:	e51b1010 	ldr	r1, [fp, #-16]
   26030:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   26034:	e1a03002 	mov	r3, r2
   26038:	e1a03203 	lsl	r3, r3, #4
   2603c:	e0833002 	add	r3, r3, r2
   26040:	e1a03103 	lsl	r3, r3, #2
   26044:	e0813003 	add	r3, r1, r3
   26048:	e2833e51 	add	r3, r3, #1296	; 0x510
   2604c:	e2833002 	add	r3, r3, #2
   26050:	e3a02001 	mov	r2, #1
   26054:	e5c32000 	strb	r2, [r3]
   26058:	ebffc9a2 	bl	186e8 <Network::Get()>
   2605c:	e1a05000 	mov	r5, r0
   26060:	e51b3010 	ldr	r3, [fp, #-16]
   26064:	e5934000 	ldr	r4, [r3]
   26068:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
   2606c:	e1a00003 	mov	r0, r3
   26070:	ebfffdbc 	bl	25768 <e131::universe_to_multicast_ip(unsigned short)>
   26074:	e1a03000 	mov	r3, r0
   26078:	e1a02003 	mov	r2, r3
   2607c:	e1a01004 	mov	r1, r4
   26080:	e1a00005 	mov	r0, r5
   26084:	eb004147 	bl	365a8 <Network::JoinGroup(int, unsigned int)>
   26088:	e51b1010 	ldr	r1, [fp, #-16]
   2608c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   26090:	e1a03002 	mov	r3, r2
   26094:	e1a03203 	lsl	r3, r3, #4
   26098:	e0833002 	add	r3, r3, r2
   2609c:	e1a03103 	lsl	r3, r3, #2
   260a0:	e0813003 	add	r3, r1, r3
   260a4:	e2833e51 	add	r3, r3, #1296	; 0x510
   260a8:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
   260ac:	e1c320b0 	strh	r2, [r3]
   260b0:	ea000002 	b	260c0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x384>
   260b4:	e1a00000 	nop			; (mov r0, r0)
   260b8:	ea000000 	b	260c0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x384>
   260bc:	e1a00000 	nop			; (mov r0, r0)
   260c0:	e24bd00c 	sub	sp, fp, #12
   260c4:	e8bd8830 	pop	{r4, r5, fp, pc}

000260c8 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
   260c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   260cc:	e28db000 	add	fp, sp, #0
   260d0:	e24dd014 	sub	sp, sp, #20
   260d4:	e50b0008 	str	r0, [fp, #-8]
   260d8:	e50b100c 	str	r1, [fp, #-12]
   260dc:	e50b2010 	str	r2, [fp, #-16]
   260e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   260e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   260e8:	e3530000 	cmp	r3, #0
   260ec:	1a00001a 	bne	2615c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x94>
   260f0:	e51b300c 	ldr	r3, [fp, #-12]
   260f4:	e3530003 	cmp	r3, #3
   260f8:	8a000015 	bhi	26154 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x8c>
   260fc:	e51b1008 	ldr	r1, [fp, #-8]
   26100:	e51b200c 	ldr	r2, [fp, #-12]
   26104:	e1a03002 	mov	r3, r2
   26108:	e1a03083 	lsl	r3, r3, #1
   2610c:	e0833002 	add	r3, r3, r2
   26110:	e1a03103 	lsl	r3, r3, #2
   26114:	e0813003 	add	r3, r1, r3
   26118:	e2833e62 	add	r3, r3, #1568	; 0x620
   2611c:	e1d320b0 	ldrh	r2, [r3]
   26120:	e51b3010 	ldr	r3, [fp, #-16]
   26124:	e1c320b0 	strh	r2, [r3]
   26128:	e51b1008 	ldr	r1, [fp, #-8]
   2612c:	e51b200c 	ldr	r2, [fp, #-12]
   26130:	e1a03002 	mov	r3, r2
   26134:	e1a03083 	lsl	r3, r3, #1
   26138:	e0833002 	add	r3, r3, r2
   2613c:	e1a03103 	lsl	r3, r3, #2
   26140:	e0813003 	add	r3, r1, r3
   26144:	e2833e62 	add	r3, r3, #1568	; 0x620
   26148:	e2833002 	add	r3, r3, #2
   2614c:	e5d33000 	ldrb	r3, [r3]
   26150:	ea000016 	b	261b0 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0xe8>
   26154:	e3a03000 	mov	r3, #0
   26158:	ea000014 	b	261b0 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0xe8>
   2615c:	e51b1008 	ldr	r1, [fp, #-8]
   26160:	e51b200c 	ldr	r2, [fp, #-12]
   26164:	e1a03002 	mov	r3, r2
   26168:	e1a03203 	lsl	r3, r3, #4
   2616c:	e0833002 	add	r3, r3, r2
   26170:	e1a03103 	lsl	r3, r3, #2
   26174:	e0813003 	add	r3, r1, r3
   26178:	e2833e51 	add	r3, r3, #1296	; 0x510
   2617c:	e1d320b0 	ldrh	r2, [r3]
   26180:	e51b3010 	ldr	r3, [fp, #-16]
   26184:	e1c320b0 	strh	r2, [r3]
   26188:	e51b1008 	ldr	r1, [fp, #-8]
   2618c:	e51b200c 	ldr	r2, [fp, #-12]
   26190:	e1a03002 	mov	r3, r2
   26194:	e1a03203 	lsl	r3, r3, #4
   26198:	e0833002 	add	r3, r3, r2
   2619c:	e1a03103 	lsl	r3, r3, #2
   261a0:	e0813003 	add	r3, r1, r3
   261a4:	e2833e51 	add	r3, r3, #1296	; 0x510
   261a8:	e2833002 	add	r3, r3, #2
   261ac:	e5d33000 	ldrb	r3, [r3]
   261b0:	e1a00003 	mov	r0, r3
   261b4:	e28bd000 	add	sp, fp, #0
   261b8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   261bc:	e12fff1e 	bx	lr

000261c0 <E131Bridge::UpdateMergeStatus(unsigned int)>:
   261c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   261c4:	e28db000 	add	fp, sp, #0
   261c8:	e24dd00c 	sub	sp, sp, #12
   261cc:	e50b0008 	str	r0, [fp, #-8]
   261d0:	e50b100c 	str	r1, [fp, #-12]
   261d4:	e51b3008 	ldr	r3, [fp, #-8]
   261d8:	e5d334f1 	ldrb	r3, [r3, #1265]	; 0x4f1
   261dc:	e2233001 	eor	r3, r3, #1
   261e0:	e6ef3073 	uxtb	r3, r3
   261e4:	e3530000 	cmp	r3, #0
   261e8:	0a000005 	beq	26204 <E131Bridge::UpdateMergeStatus(unsigned int)+0x44>
   261ec:	e51b3008 	ldr	r3, [fp, #-8]
   261f0:	e3a02001 	mov	r2, #1
   261f4:	e5c324f1 	strb	r2, [r3, #1265]	; 0x4f1
   261f8:	e51b3008 	ldr	r3, [fp, #-8]
   261fc:	e3a02001 	mov	r2, #1
   26200:	e5c324f4 	strb	r2, [r3, #1268]	; 0x4f4
   26204:	e51b1008 	ldr	r1, [fp, #-8]
   26208:	e51b200c 	ldr	r2, [fp, #-12]
   2620c:	e1a03002 	mov	r3, r2
   26210:	e1a03203 	lsl	r3, r3, #4
   26214:	e0833002 	add	r3, r3, r2
   26218:	e1a03103 	lsl	r3, r3, #2
   2621c:	e0813003 	add	r3, r1, r3
   26220:	e2833e55 	add	r3, r3, #1360	; 0x550
   26224:	e2833001 	add	r3, r3, #1
   26228:	e3a02001 	mov	r2, #1
   2622c:	e5c32000 	strb	r2, [r3]
   26230:	e1a00000 	nop			; (mov r0, r0)
   26234:	e28bd000 	add	sp, fp, #0
   26238:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2623c:	e12fff1e 	bx	lr

00026240 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
   26240:	e92d4800 	push	{fp, lr}
   26244:	e28db004 	add	fp, sp, #4
   26248:	e24dd018 	sub	sp, sp, #24
   2624c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   26250:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   26254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26258:	e593100c 	ldr	r1, [r3, #12]
   2625c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   26260:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   26264:	e1a03002 	mov	r3, r2
   26268:	e1a03203 	lsl	r3, r3, #4
   2626c:	e0833002 	add	r3, r3, r2
   26270:	e1a03103 	lsl	r3, r3, #2
   26274:	e0803003 	add	r3, r0, r3
   26278:	e2833e51 	add	r3, r3, #1296	; 0x510
   2627c:	e2833004 	add	r3, r3, #4
   26280:	e5933000 	ldr	r3, [r3]
   26284:	e0413003 	sub	r3, r1, r3
   26288:	e50b3010 	str	r3, [fp, #-16]
   2628c:	e51b3010 	ldr	r3, [fp, #-16]
   26290:	e59f21fc 	ldr	r2, [pc, #508]	; 26494 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x254>
   26294:	e1530002 	cmp	r3, r2
   26298:	9a000023 	bls	2632c <E131Bridge::CheckMergeTimeouts(unsigned int)+0xec>
   2629c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   262a0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   262a4:	e1a03002 	mov	r3, r2
   262a8:	e1a03203 	lsl	r3, r3, #4
   262ac:	e0833002 	add	r3, r3, r2
   262b0:	e1a03103 	lsl	r3, r3, #2
   262b4:	e0813003 	add	r3, r1, r3
   262b8:	e2833e51 	add	r3, r3, #1296	; 0x510
   262bc:	e2833008 	add	r3, r3, #8
   262c0:	e3a02000 	mov	r2, #0
   262c4:	e5832000 	str	r2, [r3]
   262c8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   262cc:	e1a03002 	mov	r3, r2
   262d0:	e1a03203 	lsl	r3, r3, #4
   262d4:	e0833002 	add	r3, r3, r2
   262d8:	e1a03103 	lsl	r3, r3, #2
   262dc:	e2833e51 	add	r3, r3, #1296	; 0x510
   262e0:	e2833008 	add	r3, r3, #8
   262e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   262e8:	e0823003 	add	r3, r2, r3
   262ec:	e2833004 	add	r3, r3, #4
   262f0:	e3a02010 	mov	r2, #16
   262f4:	e3a01000 	mov	r1, #0
   262f8:	e1a00003 	mov	r0, r3
   262fc:	ebffabda 	bl	1126c <memset@plt>
   26300:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   26304:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   26308:	e1a03002 	mov	r3, r2
   2630c:	e1a03203 	lsl	r3, r3, #4
   26310:	e0833002 	add	r3, r3, r2
   26314:	e1a03103 	lsl	r3, r3, #2
   26318:	e0813003 	add	r3, r1, r3
   2631c:	e2833e55 	add	r3, r3, #1360	; 0x550
   26320:	e2833001 	add	r3, r3, #1
   26324:	e3a02000 	mov	r2, #0
   26328:	e5c32000 	strb	r2, [r3]
   2632c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26330:	e593100c 	ldr	r1, [r3, #12]
   26334:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   26338:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2633c:	e1a03002 	mov	r3, r2
   26340:	e1a03203 	lsl	r3, r3, #4
   26344:	e0833002 	add	r3, r3, r2
   26348:	e1a03103 	lsl	r3, r3, #2
   2634c:	e0803003 	add	r3, r0, r3
   26350:	e2833e53 	add	r3, r3, #1328	; 0x530
   26354:	e5933000 	ldr	r3, [r3]
   26358:	e0413003 	sub	r3, r1, r3
   2635c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   26360:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26364:	e59f2128 	ldr	r2, [pc, #296]	; 26494 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x254>
   26368:	e1530002 	cmp	r3, r2
   2636c:	9a000022 	bls	263fc <E131Bridge::CheckMergeTimeouts(unsigned int)+0x1bc>
   26370:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   26374:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   26378:	e1a03002 	mov	r3, r2
   2637c:	e1a03203 	lsl	r3, r3, #4
   26380:	e0833002 	add	r3, r3, r2
   26384:	e1a03103 	lsl	r3, r3, #2
   26388:	e0813003 	add	r3, r1, r3
   2638c:	e2833e53 	add	r3, r3, #1328	; 0x530
   26390:	e2833004 	add	r3, r3, #4
   26394:	e3a02000 	mov	r2, #0
   26398:	e5832000 	str	r2, [r3]
   2639c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   263a0:	e1a03002 	mov	r3, r2
   263a4:	e1a03203 	lsl	r3, r3, #4
   263a8:	e0833002 	add	r3, r3, r2
   263ac:	e1a03103 	lsl	r3, r3, #2
   263b0:	e2833e53 	add	r3, r3, #1328	; 0x530
   263b4:	e2833008 	add	r3, r3, #8
   263b8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   263bc:	e0823003 	add	r3, r2, r3
   263c0:	e3a02010 	mov	r2, #16
   263c4:	e3a01000 	mov	r1, #0
   263c8:	e1a00003 	mov	r0, r3
   263cc:	ebffaba6 	bl	1126c <memset@plt>
   263d0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   263d4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   263d8:	e1a03002 	mov	r3, r2
   263dc:	e1a03203 	lsl	r3, r3, #4
   263e0:	e0833002 	add	r3, r3, r2
   263e4:	e1a03103 	lsl	r3, r3, #2
   263e8:	e0813003 	add	r3, r1, r3
   263ec:	e2833e55 	add	r3, r3, #1360	; 0x550
   263f0:	e2833001 	add	r3, r3, #1
   263f4:	e3a02000 	mov	r2, #0
   263f8:	e5c32000 	strb	r2, [r3]
   263fc:	e3a03000 	mov	r3, #0
   26400:	e54b3005 	strb	r3, [fp, #-5]
   26404:	e3a03000 	mov	r3, #0
   26408:	e50b300c 	str	r3, [fp, #-12]
   2640c:	e51b300c 	ldr	r3, [fp, #-12]
   26410:	e3530003 	cmp	r3, #3
   26414:	8a000010 	bhi	2645c <E131Bridge::CheckMergeTimeouts(unsigned int)+0x21c>
   26418:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2641c:	e51b200c 	ldr	r2, [fp, #-12]
   26420:	e1a03002 	mov	r3, r2
   26424:	e1a03203 	lsl	r3, r3, #4
   26428:	e0833002 	add	r3, r3, r2
   2642c:	e1a03103 	lsl	r3, r3, #2
   26430:	e0813003 	add	r3, r1, r3
   26434:	e2833e55 	add	r3, r3, #1360	; 0x550
   26438:	e2833001 	add	r3, r3, #1
   2643c:	e5d32000 	ldrb	r2, [r3]
   26440:	e55b3005 	ldrb	r3, [fp, #-5]
   26444:	e1823003 	orr	r3, r2, r3
   26448:	e54b3005 	strb	r3, [fp, #-5]
   2644c:	e51b300c 	ldr	r3, [fp, #-12]
   26450:	e2833001 	add	r3, r3, #1
   26454:	e50b300c 	str	r3, [fp, #-12]
   26458:	eaffffeb 	b	2640c <E131Bridge::CheckMergeTimeouts(unsigned int)+0x1cc>
   2645c:	e55b3005 	ldrb	r3, [fp, #-5]
   26460:	e2233001 	eor	r3, r3, #1
   26464:	e6ef3073 	uxtb	r3, r3
   26468:	e3530000 	cmp	r3, #0
   2646c:	0a000005 	beq	26488 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x248>
   26470:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26474:	e3a02001 	mov	r2, #1
   26478:	e5c324f4 	strb	r2, [r3, #1268]	; 0x4f4
   2647c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26480:	e3a02000 	mov	r2, #0
   26484:	e5c324f1 	strb	r2, [r3, #1265]	; 0x4f1
   26488:	e1a00000 	nop			; (mov r0, r0)
   2648c:	e24bd004 	sub	sp, fp, #4
   26490:	e8bd8800 	pop	{fp, pc}
   26494:	00002710 	.word	0x00002710

00026498 <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
   26498:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2649c:	e28db000 	add	fp, sp, #0
   264a0:	e24dd014 	sub	sp, sp, #20
   264a4:	e50b0010 	str	r0, [fp, #-16]
   264a8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   264ac:	e51b3010 	ldr	r3, [fp, #-16]
   264b0:	e593100c 	ldr	r1, [r3, #12]
   264b4:	e51b0010 	ldr	r0, [fp, #-16]
   264b8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   264bc:	e1a03002 	mov	r3, r2
   264c0:	e1a03203 	lsl	r3, r3, #4
   264c4:	e0833002 	add	r3, r3, r2
   264c8:	e1a03103 	lsl	r3, r3, #2
   264cc:	e0803003 	add	r3, r0, r3
   264d0:	e2833e51 	add	r3, r3, #1296	; 0x510
   264d4:	e2833004 	add	r3, r3, #4
   264d8:	e5933000 	ldr	r3, [r3]
   264dc:	e0413003 	sub	r3, r1, r3
   264e0:	e50b3008 	str	r3, [fp, #-8]
   264e4:	e51b3010 	ldr	r3, [fp, #-16]
   264e8:	e593100c 	ldr	r1, [r3, #12]
   264ec:	e51b0010 	ldr	r0, [fp, #-16]
   264f0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   264f4:	e1a03002 	mov	r3, r2
   264f8:	e1a03203 	lsl	r3, r3, #4
   264fc:	e0833002 	add	r3, r3, r2
   26500:	e1a03103 	lsl	r3, r3, #2
   26504:	e0803003 	add	r3, r0, r3
   26508:	e2833e53 	add	r3, r3, #1328	; 0x530
   2650c:	e5933000 	ldr	r3, [r3]
   26510:	e0413003 	sub	r3, r1, r3
   26514:	e50b300c 	str	r3, [fp, #-12]
   26518:	e51b1010 	ldr	r1, [fp, #-16]
   2651c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   26520:	e1a03002 	mov	r3, r2
   26524:	e1a03203 	lsl	r3, r3, #4
   26528:	e0833002 	add	r3, r3, r2
   2652c:	e1a03103 	lsl	r3, r3, #2
   26530:	e0813003 	add	r3, r1, r3
   26534:	e2833e51 	add	r3, r3, #1296	; 0x510
   26538:	e2833008 	add	r3, r3, #8
   2653c:	e5933000 	ldr	r3, [r3]
   26540:	e3530000 	cmp	r3, #0
   26544:	0a000017 	beq	265a8 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x110>
   26548:	e51b1010 	ldr	r1, [fp, #-16]
   2654c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   26550:	e1a03002 	mov	r3, r2
   26554:	e1a03203 	lsl	r3, r3, #4
   26558:	e0833002 	add	r3, r3, r2
   2655c:	e1a03103 	lsl	r3, r3, #2
   26560:	e0813003 	add	r3, r1, r3
   26564:	e2833e53 	add	r3, r3, #1328	; 0x530
   26568:	e2833004 	add	r3, r3, #4
   2656c:	e5933000 	ldr	r3, [r3]
   26570:	e3530000 	cmp	r3, #0
   26574:	0a00000b 	beq	265a8 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x110>
   26578:	e51b3008 	ldr	r3, [fp, #-8]
   2657c:	e59f2128 	ldr	r2, [pc, #296]	; 266ac <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x214>
   26580:	e1530002 	cmp	r3, r2
   26584:	9a000003 	bls	26598 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x100>
   26588:	e51b300c 	ldr	r3, [fp, #-12]
   2658c:	e59f2118 	ldr	r2, [pc, #280]	; 266ac <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x214>
   26590:	e1530002 	cmp	r3, r2
   26594:	8a000001 	bhi	265a0 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x108>
   26598:	e3a03000 	mov	r3, #0
   2659c:	ea00003e 	b	2669c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x204>
   265a0:	e3a03001 	mov	r3, #1
   265a4:	ea00003c 	b	2669c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x204>
   265a8:	e51b1010 	ldr	r1, [fp, #-16]
   265ac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   265b0:	e1a03002 	mov	r3, r2
   265b4:	e1a03203 	lsl	r3, r3, #4
   265b8:	e0833002 	add	r3, r3, r2
   265bc:	e1a03103 	lsl	r3, r3, #2
   265c0:	e0813003 	add	r3, r1, r3
   265c4:	e2833e51 	add	r3, r3, #1296	; 0x510
   265c8:	e2833008 	add	r3, r3, #8
   265cc:	e5933000 	ldr	r3, [r3]
   265d0:	e3530000 	cmp	r3, #0
   265d4:	0a000011 	beq	26620 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x188>
   265d8:	e51b1010 	ldr	r1, [fp, #-16]
   265dc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   265e0:	e1a03002 	mov	r3, r2
   265e4:	e1a03203 	lsl	r3, r3, #4
   265e8:	e0833002 	add	r3, r3, r2
   265ec:	e1a03103 	lsl	r3, r3, #2
   265f0:	e0813003 	add	r3, r1, r3
   265f4:	e2833e53 	add	r3, r3, #1328	; 0x530
   265f8:	e2833004 	add	r3, r3, #4
   265fc:	e5933000 	ldr	r3, [r3]
   26600:	e3530000 	cmp	r3, #0
   26604:	1a000005 	bne	26620 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x188>
   26608:	e51b3008 	ldr	r3, [fp, #-8]
   2660c:	e59f209c 	ldr	r2, [pc, #156]	; 266b0 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x218>
   26610:	e1530002 	cmp	r3, r2
   26614:	9a00001f 	bls	26698 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x200>
   26618:	e3a03001 	mov	r3, #1
   2661c:	ea00001e 	b	2669c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x204>
   26620:	e51b1010 	ldr	r1, [fp, #-16]
   26624:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   26628:	e1a03002 	mov	r3, r2
   2662c:	e1a03203 	lsl	r3, r3, #4
   26630:	e0833002 	add	r3, r3, r2
   26634:	e1a03103 	lsl	r3, r3, #2
   26638:	e0813003 	add	r3, r1, r3
   2663c:	e2833e51 	add	r3, r3, #1296	; 0x510
   26640:	e2833008 	add	r3, r3, #8
   26644:	e5933000 	ldr	r3, [r3]
   26648:	e3530000 	cmp	r3, #0
   2664c:	1a000011 	bne	26698 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x200>
   26650:	e51b1010 	ldr	r1, [fp, #-16]
   26654:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   26658:	e1a03002 	mov	r3, r2
   2665c:	e1a03203 	lsl	r3, r3, #4
   26660:	e0833002 	add	r3, r3, r2
   26664:	e1a03103 	lsl	r3, r3, #2
   26668:	e0813003 	add	r3, r1, r3
   2666c:	e2833e53 	add	r3, r3, #1328	; 0x530
   26670:	e2833004 	add	r3, r3, #4
   26674:	e5933000 	ldr	r3, [r3]
   26678:	e3530000 	cmp	r3, #0
   2667c:	0a000005 	beq	26698 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x200>
   26680:	e51b300c 	ldr	r3, [fp, #-12]
   26684:	e59f2024 	ldr	r2, [pc, #36]	; 266b0 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x218>
   26688:	e1530002 	cmp	r3, r2
   2668c:	9a000001 	bls	26698 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x200>
   26690:	e3a03001 	mov	r3, #1
   26694:	ea000000 	b	2669c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x204>
   26698:	e3a03000 	mov	r3, #0
   2669c:	e1a00003 	mov	r0, r3
   266a0:	e28bd000 	add	sp, fp, #0
   266a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   266a8:	e12fff1e 	bx	lr
   266ac:	0000270f 	.word	0x0000270f
   266b0:	00002710 	.word	0x00002710

000266b4 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
   266b4:	e92d4800 	push	{fp, lr}
   266b8:	e28db004 	add	fp, sp, #4
   266bc:	e24dd008 	sub	sp, sp, #8
   266c0:	e50b0008 	str	r0, [fp, #-8]
   266c4:	e50b100c 	str	r1, [fp, #-12]
   266c8:	e51b300c 	ldr	r3, [fp, #-12]
   266cc:	e5932004 	ldr	r2, [r3, #4]
   266d0:	e51b3008 	ldr	r3, [fp, #-8]
   266d4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
   266d8:	e1520003 	cmp	r2, r3
   266dc:	0a000001 	beq	266e8 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x34>
   266e0:	e3a03000 	mov	r3, #0
   266e4:	ea00000c 	b	2671c <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x68>
   266e8:	e51b300c 	ldr	r3, [fp, #-12]
   266ec:	e2830008 	add	r0, r3, #8
   266f0:	e51b3008 	ldr	r3, [fp, #-8]
   266f4:	e283308e 	add	r3, r3, #142	; 0x8e
   266f8:	e3a02010 	mov	r2, #16
   266fc:	e1a01003 	mov	r1, r3
   26700:	ebffab6c 	bl	114b8 <memcmp@plt>
   26704:	e1a03000 	mov	r3, r0
   26708:	e3530000 	cmp	r3, #0
   2670c:	0a000001 	beq	26718 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x64>
   26710:	e3a03000 	mov	r3, #0
   26714:	ea000000 	b	2671c <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x68>
   26718:	e3a03001 	mov	r3, #1
   2671c:	e1a00003 	mov	r0, r3
   26720:	e24bd004 	sub	sp, fp, #4
   26724:	e8bd8800 	pop	{fp, pc}

00026728 <E131Bridge::HandleDmx()>:
   26728:	e92d4800 	push	{fp, lr}
   2672c:	e28db004 	add	fp, sp, #4
   26730:	e24dd028 	sub	sp, sp, #40	; 0x28
   26734:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   26738:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2673c:	e28330f6 	add	r3, r3, #246	; 0xf6
   26740:	e50b300c 	str	r3, [fp, #-12]
   26744:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26748:	e5d320f3 	ldrb	r2, [r3, #243]	; 0xf3
   2674c:	e5d330f4 	ldrb	r3, [r3, #244]	; 0xf4
   26750:	e1a03403 	lsl	r3, r3, #8
   26754:	e1833002 	orr	r3, r3, r2
   26758:	e6ff3073 	uxth	r3, r3
   2675c:	e6bf3fb3 	rev16	r3, r3
   26760:	e6ff3073 	uxth	r3, r3
   26764:	e2433001 	sub	r3, r3, #1
   26768:	e50b3010 	str	r3, [fp, #-16]
   2676c:	e3a03000 	mov	r3, #0
   26770:	e50b3008 	str	r3, [fp, #-8]
   26774:	e51b3008 	ldr	r3, [fp, #-8]
   26778:	e3530003 	cmp	r3, #3
   2677c:	8a000237 	bhi	27060 <E131Bridge::HandleDmx()+0x938>
   26780:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   26784:	e51b2008 	ldr	r2, [fp, #-8]
   26788:	e1a03002 	mov	r3, r2
   2678c:	e1a03203 	lsl	r3, r3, #4
   26790:	e0833002 	add	r3, r3, r2
   26794:	e1a03103 	lsl	r3, r3, #2
   26798:	e0813003 	add	r3, r1, r3
   2679c:	e2833e51 	add	r3, r3, #1296	; 0x510
   267a0:	e2833002 	add	r3, r3, #2
   267a4:	e5d33000 	ldrb	r3, [r3]
   267a8:	e2233001 	eor	r3, r3, #1
   267ac:	e6ef3073 	uxtb	r3, r3
   267b0:	e3530000 	cmp	r3, #0
   267b4:	1a00021a 	bne	27024 <E131Bridge::HandleDmx()+0x8fc>
   267b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   267bc:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
   267c0:	e1a03423 	lsr	r3, r3, #8
   267c4:	e6ff1073 	uxth	r1, r3
   267c8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   267cc:	e51b2008 	ldr	r2, [fp, #-8]
   267d0:	e1a03002 	mov	r3, r2
   267d4:	e1a03203 	lsl	r3, r3, #4
   267d8:	e0833002 	add	r3, r3, r2
   267dc:	e1a03103 	lsl	r3, r3, #2
   267e0:	e0803003 	add	r3, r0, r3
   267e4:	e2833e51 	add	r3, r3, #1296	; 0x510
   267e8:	e1d330b0 	ldrh	r3, [r3]
   267ec:	e6bf3fb3 	rev16	r3, r3
   267f0:	e6ff3073 	uxth	r3, r3
   267f4:	e1510003 	cmp	r1, r3
   267f8:	1a00020b 	bne	2702c <E131Bridge::HandleDmx()+0x904>
   267fc:	e51b2008 	ldr	r2, [fp, #-8]
   26800:	e1a03002 	mov	r3, r2
   26804:	e1a03203 	lsl	r3, r3, #4
   26808:	e0833002 	add	r3, r3, r2
   2680c:	e1a03103 	lsl	r3, r3, #2
   26810:	e2833e51 	add	r3, r3, #1296	; 0x510
   26814:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   26818:	e0823003 	add	r3, r2, r3
   2681c:	e2833004 	add	r3, r3, #4
   26820:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   26824:	e51b2008 	ldr	r2, [fp, #-8]
   26828:	e1a03002 	mov	r3, r2
   2682c:	e1a03203 	lsl	r3, r3, #4
   26830:	e0833002 	add	r3, r3, r2
   26834:	e1a03103 	lsl	r3, r3, #2
   26838:	e2833e53 	add	r3, r3, #1328	; 0x530
   2683c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   26840:	e0823003 	add	r3, r2, r3
   26844:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   26848:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2684c:	e5933004 	ldr	r3, [r3, #4]
   26850:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   26854:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26858:	e5933004 	ldr	r3, [r3, #4]
   2685c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   26860:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   26864:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   26868:	ebffff91 	bl	266b4 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
   2686c:	e1a03000 	mov	r3, r0
   26870:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
   26874:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   26878:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   2687c:	ebffff8c 	bl	266b4 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
   26880:	e1a03000 	mov	r3, r0
   26884:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
   26888:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2688c:	e3530000 	cmp	r3, #0
   26890:	0a000011 	beq	268dc <E131Bridge::HandleDmx()+0x1b4>
   26894:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26898:	e5d320e7 	ldrb	r2, [r3, #231]	; 0xe7
   2689c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   268a0:	e5d33018 	ldrb	r3, [r3, #24]
   268a4:	e0423003 	sub	r3, r2, r3
   268a8:	e6ef3073 	uxtb	r3, r3
   268ac:	e54b3023 	strb	r3, [fp, #-35]	; 0xffffffdd
   268b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   268b4:	e5d320e7 	ldrb	r2, [r3, #231]	; 0xe7
   268b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   268bc:	e5c32018 	strb	r2, [r3, #24]
   268c0:	e15b32d3 	ldrsb	r3, [fp, #-35]	; 0xffffffdd
   268c4:	e3530000 	cmp	r3, #0
   268c8:	ca000017 	bgt	2692c <E131Bridge::HandleDmx()+0x204>
   268cc:	e15b32d3 	ldrsb	r3, [fp, #-35]	; 0xffffffdd
   268d0:	e3730013 	cmn	r3, #19
   268d4:	ba000014 	blt	2692c <E131Bridge::HandleDmx()+0x204>
   268d8:	ea0001dc 	b	27050 <E131Bridge::HandleDmx()+0x928>
   268dc:	e55b3022 	ldrb	r3, [fp, #-34]	; 0xffffffde
   268e0:	e3530000 	cmp	r3, #0
   268e4:	0a000010 	beq	2692c <E131Bridge::HandleDmx()+0x204>
   268e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   268ec:	e5d320e7 	ldrb	r2, [r3, #231]	; 0xe7
   268f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   268f4:	e5d33018 	ldrb	r3, [r3, #24]
   268f8:	e0423003 	sub	r3, r2, r3
   268fc:	e6ef3073 	uxtb	r3, r3
   26900:	e54b3024 	strb	r3, [fp, #-36]	; 0xffffffdc
   26904:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26908:	e5d320e7 	ldrb	r2, [r3, #231]	; 0xe7
   2690c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26910:	e5c32018 	strb	r2, [r3, #24]
   26914:	e15b32d4 	ldrsb	r3, [fp, #-36]	; 0xffffffdc
   26918:	e3530000 	cmp	r3, #0
   2691c:	ca000002 	bgt	2692c <E131Bridge::HandleDmx()+0x204>
   26920:	e15b32d4 	ldrsb	r3, [fp, #-36]	; 0xffffffdc
   26924:	e3730013 	cmn	r3, #19
   26928:	aa0001c1 	bge	27034 <E131Bridge::HandleDmx()+0x90c>
   2692c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26930:	e5d330e8 	ldrb	r3, [r3, #232]	; 0xe8
   26934:	e6af3073 	sxtb	r3, r3
   26938:	e3530000 	cmp	r3, #0
   2693c:	ba0001be 	blt	2703c <E131Bridge::HandleDmx()+0x914>
   26940:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26944:	e5d330e8 	ldrb	r3, [r3, #232]	; 0xe8
   26948:	e2033040 	and	r3, r3, #64	; 0x40
   2694c:	e3530000 	cmp	r3, #0
   26950:	0a00000b 	beq	26984 <E131Bridge::HandleDmx()+0x25c>
   26954:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   26958:	e3530000 	cmp	r3, #0
   2695c:	1a000002 	bne	2696c <E131Bridge::HandleDmx()+0x244>
   26960:	e55b3022 	ldrb	r3, [fp, #-34]	; 0xffffffde
   26964:	e3530000 	cmp	r3, #0
   26968:	0a0001b5 	beq	27044 <E131Bridge::HandleDmx()+0x91c>
   2696c:	e55b2022 	ldrb	r2, [fp, #-34]	; 0xffffffde
   26970:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   26974:	e1a01003 	mov	r1, r3
   26978:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   2697c:	eb0001ba 	bl	2706c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
   26980:	ea0001af 	b	27044 <E131Bridge::HandleDmx()+0x91c>
   26984:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26988:	e5d334f1 	ldrb	r3, [r3, #1265]	; 0x4f1
   2698c:	e3530000 	cmp	r3, #0
   26990:	0a000008 	beq	269b8 <E131Bridge::HandleDmx()+0x290>
   26994:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26998:	e5d334f5 	ldrb	r3, [r3, #1269]	; 0x4f5
   2699c:	e2233001 	eor	r3, r3, #1
   269a0:	e6ef3073 	uxtb	r3, r3
   269a4:	e3530000 	cmp	r3, #0
   269a8:	0a000002 	beq	269b8 <E131Bridge::HandleDmx()+0x290>
   269ac:	e51b1008 	ldr	r1, [fp, #-8]
   269b0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   269b4:	ebfffe21 	bl	26240 <E131Bridge::CheckMergeTimeouts(unsigned int)>
   269b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   269bc:	e5d320e4 	ldrb	r2, [r3, #228]	; 0xe4
   269c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   269c4:	e5d33508 	ldrb	r3, [r3, #1288]	; 0x508
   269c8:	e1520003 	cmp	r2, r3
   269cc:	2a00000c 	bcs	26a04 <E131Bridge::HandleDmx()+0x2dc>
   269d0:	e51b1008 	ldr	r1, [fp, #-8]
   269d4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   269d8:	ebfffeae 	bl	26498 <E131Bridge::IsPriorityTimeOut(unsigned int) const>
   269dc:	e1a03000 	mov	r3, r0
   269e0:	e2233001 	eor	r3, r3, #1
   269e4:	e6ef3073 	uxtb	r3, r3
   269e8:	e3530000 	cmp	r3, #0
   269ec:	1a000196 	bne	2704c <E131Bridge::HandleDmx()+0x924>
   269f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   269f4:	e5d320e4 	ldrb	r2, [r3, #228]	; 0xe4
   269f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   269fc:	e5c32508 	strb	r2, [r3, #1288]	; 0x508
   26a00:	ea000022 	b	26a90 <E131Bridge::HandleDmx()+0x368>
   26a04:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26a08:	e5d320e4 	ldrb	r2, [r3, #228]	; 0xe4
   26a0c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26a10:	e5d33508 	ldrb	r3, [r3, #1288]	; 0x508
   26a14:	e1520003 	cmp	r2, r3
   26a18:	9a00001c 	bls	26a90 <E131Bridge::HandleDmx()+0x368>
   26a1c:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   26a20:	e51b2008 	ldr	r2, [fp, #-8]
   26a24:	e1a03002 	mov	r3, r2
   26a28:	e1a03203 	lsl	r3, r3, #4
   26a2c:	e0833002 	add	r3, r3, r2
   26a30:	e1a03103 	lsl	r3, r3, #2
   26a34:	e0813003 	add	r3, r1, r3
   26a38:	e2833e51 	add	r3, r3, #1296	; 0x510
   26a3c:	e2833008 	add	r3, r3, #8
   26a40:	e3a02000 	mov	r2, #0
   26a44:	e5832000 	str	r2, [r3]
   26a48:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   26a4c:	e51b2008 	ldr	r2, [fp, #-8]
   26a50:	e1a03002 	mov	r3, r2
   26a54:	e1a03203 	lsl	r3, r3, #4
   26a58:	e0833002 	add	r3, r3, r2
   26a5c:	e1a03103 	lsl	r3, r3, #2
   26a60:	e0813003 	add	r3, r1, r3
   26a64:	e2833e53 	add	r3, r3, #1328	; 0x530
   26a68:	e2833004 	add	r3, r3, #4
   26a6c:	e3a02000 	mov	r2, #0
   26a70:	e5832000 	str	r2, [r3]
   26a74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26a78:	e3a02000 	mov	r2, #0
   26a7c:	e5c324f1 	strb	r2, [r3, #1265]	; 0x4f1
   26a80:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26a84:	e5d320e4 	ldrb	r2, [r3, #228]	; 0xe4
   26a88:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26a8c:	e5c32508 	strb	r2, [r3, #1288]	; 0x508
   26a90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26a94:	e3530000 	cmp	r3, #0
   26a98:	1a00001a 	bne	26b08 <E131Bridge::HandleDmx()+0x3e0>
   26a9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   26aa0:	e3530000 	cmp	r3, #0
   26aa4:	1a000017 	bne	26b08 <E131Bridge::HandleDmx()+0x3e0>
   26aa8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26aac:	e5932074 	ldr	r2, [r3, #116]	; 0x74
   26ab0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26ab4:	e5832004 	str	r2, [r3, #4]
   26ab8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26abc:	e5d320e7 	ldrb	r2, [r3, #231]	; 0xe7
   26ac0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26ac4:	e5c32018 	strb	r2, [r3, #24]
   26ac8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26acc:	e2830008 	add	r0, r3, #8
   26ad0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26ad4:	e283308e 	add	r3, r3, #142	; 0x8e
   26ad8:	e3a02010 	mov	r2, #16
   26adc:	e1a01003 	mov	r1, r3
   26ae0:	ebffaa47 	bl	11404 <memcpy@plt>
   26ae4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26ae8:	e593200c 	ldr	r2, [r3, #12]
   26aec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26af0:	e5832000 	str	r2, [r3]
   26af4:	e51b2010 	ldr	r2, [fp, #-16]
   26af8:	e51b100c 	ldr	r1, [fp, #-12]
   26afc:	e51b0008 	ldr	r0, [fp, #-8]
   26b00:	ebfff56b 	bl	240b4 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
   26b04:	ea0000c6 	b	26e24 <E131Bridge::HandleDmx()+0x6fc>
   26b08:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   26b0c:	e3530000 	cmp	r3, #0
   26b10:	0a00000f 	beq	26b54 <E131Bridge::HandleDmx()+0x42c>
   26b14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   26b18:	e3530000 	cmp	r3, #0
   26b1c:	1a00000c 	bne	26b54 <E131Bridge::HandleDmx()+0x42c>
   26b20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26b24:	e5d320e7 	ldrb	r2, [r3, #231]	; 0xe7
   26b28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26b2c:	e5c32018 	strb	r2, [r3, #24]
   26b30:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26b34:	e593200c 	ldr	r2, [r3, #12]
   26b38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26b3c:	e5832000 	str	r2, [r3]
   26b40:	e51b2010 	ldr	r2, [fp, #-16]
   26b44:	e51b100c 	ldr	r1, [fp, #-12]
   26b48:	e51b0008 	ldr	r0, [fp, #-8]
   26b4c:	ebfff558 	bl	240b4 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
   26b50:	ea0000b3 	b	26e24 <E131Bridge::HandleDmx()+0x6fc>
   26b54:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26b58:	e3530000 	cmp	r3, #0
   26b5c:	1a00000f 	bne	26ba0 <E131Bridge::HandleDmx()+0x478>
   26b60:	e55b3022 	ldrb	r3, [fp, #-34]	; 0xffffffde
   26b64:	e3530000 	cmp	r3, #0
   26b68:	0a00000c 	beq	26ba0 <E131Bridge::HandleDmx()+0x478>
   26b6c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26b70:	e5d320e7 	ldrb	r2, [r3, #231]	; 0xe7
   26b74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26b78:	e5c32018 	strb	r2, [r3, #24]
   26b7c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26b80:	e593200c 	ldr	r2, [r3, #12]
   26b84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26b88:	e5832000 	str	r2, [r3]
   26b8c:	e51b2010 	ldr	r2, [fp, #-16]
   26b90:	e51b100c 	ldr	r1, [fp, #-12]
   26b94:	e51b0008 	ldr	r0, [fp, #-8]
   26b98:	ebfff566 	bl	24138 <lightset::Data::SetSourceB(unsigned int, unsigned char const*, unsigned int)>
   26b9c:	ea0000a0 	b	26e24 <E131Bridge::HandleDmx()+0x6fc>
   26ba0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   26ba4:	e2233001 	eor	r3, r3, #1
   26ba8:	e6ef3073 	uxtb	r3, r3
   26bac:	e3530000 	cmp	r3, #0
   26bb0:	0a000027 	beq	26c54 <E131Bridge::HandleDmx()+0x52c>
   26bb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   26bb8:	e3530000 	cmp	r3, #0
   26bbc:	1a000024 	bne	26c54 <E131Bridge::HandleDmx()+0x52c>
   26bc0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26bc4:	e5932074 	ldr	r2, [r3, #116]	; 0x74
   26bc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26bcc:	e5832004 	str	r2, [r3, #4]
   26bd0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26bd4:	e5d320e7 	ldrb	r2, [r3, #231]	; 0xe7
   26bd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26bdc:	e5c32018 	strb	r2, [r3, #24]
   26be0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26be4:	e2830008 	add	r0, r3, #8
   26be8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26bec:	e283308e 	add	r3, r3, #142	; 0x8e
   26bf0:	e3a02010 	mov	r2, #16
   26bf4:	e1a01003 	mov	r1, r3
   26bf8:	ebffaa01 	bl	11404 <memcpy@plt>
   26bfc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26c00:	e593200c 	ldr	r2, [r3, #12]
   26c04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26c08:	e5832000 	str	r2, [r3]
   26c0c:	e51b1008 	ldr	r1, [fp, #-8]
   26c10:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   26c14:	ebfffd69 	bl	261c0 <E131Bridge::UpdateMergeStatus(unsigned int)>
   26c18:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   26c1c:	e51b2008 	ldr	r2, [fp, #-8]
   26c20:	e1a03002 	mov	r3, r2
   26c24:	e1a03203 	lsl	r3, r3, #4
   26c28:	e0833002 	add	r3, r3, r2
   26c2c:	e1a03103 	lsl	r3, r3, #2
   26c30:	e0813003 	add	r3, r1, r3
   26c34:	e2833d15 	add	r3, r3, #1344	; 0x540
   26c38:	e283300c 	add	r3, r3, #12
   26c3c:	e5933000 	ldr	r3, [r3]
   26c40:	e51b2010 	ldr	r2, [fp, #-16]
   26c44:	e51b100c 	ldr	r1, [fp, #-12]
   26c48:	e51b0008 	ldr	r0, [fp, #-8]
   26c4c:	ebfff549 	bl	24178 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
   26c50:	ea000073 	b	26e24 <E131Bridge::HandleDmx()+0x6fc>
   26c54:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26c58:	e3530000 	cmp	r3, #0
   26c5c:	1a000029 	bne	26d08 <E131Bridge::HandleDmx()+0x5e0>
   26c60:	e55b3022 	ldrb	r3, [fp, #-34]	; 0xffffffde
   26c64:	e2233001 	eor	r3, r3, #1
   26c68:	e6ef3073 	uxtb	r3, r3
   26c6c:	e3530000 	cmp	r3, #0
   26c70:	0a000024 	beq	26d08 <E131Bridge::HandleDmx()+0x5e0>
   26c74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26c78:	e5932074 	ldr	r2, [r3, #116]	; 0x74
   26c7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26c80:	e5832004 	str	r2, [r3, #4]
   26c84:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26c88:	e5d320e7 	ldrb	r2, [r3, #231]	; 0xe7
   26c8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26c90:	e5c32018 	strb	r2, [r3, #24]
   26c94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26c98:	e2830008 	add	r0, r3, #8
   26c9c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26ca0:	e283308e 	add	r3, r3, #142	; 0x8e
   26ca4:	e3a02010 	mov	r2, #16
   26ca8:	e1a01003 	mov	r1, r3
   26cac:	ebffa9d4 	bl	11404 <memcpy@plt>
   26cb0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26cb4:	e593200c 	ldr	r2, [r3, #12]
   26cb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26cbc:	e5832000 	str	r2, [r3]
   26cc0:	e51b1008 	ldr	r1, [fp, #-8]
   26cc4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   26cc8:	ebfffd3c 	bl	261c0 <E131Bridge::UpdateMergeStatus(unsigned int)>
   26ccc:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   26cd0:	e51b2008 	ldr	r2, [fp, #-8]
   26cd4:	e1a03002 	mov	r3, r2
   26cd8:	e1a03203 	lsl	r3, r3, #4
   26cdc:	e0833002 	add	r3, r3, r2
   26ce0:	e1a03103 	lsl	r3, r3, #2
   26ce4:	e0813003 	add	r3, r1, r3
   26ce8:	e2833d15 	add	r3, r3, #1344	; 0x540
   26cec:	e283300c 	add	r3, r3, #12
   26cf0:	e5933000 	ldr	r3, [r3]
   26cf4:	e51b2010 	ldr	r2, [fp, #-16]
   26cf8:	e51b100c 	ldr	r1, [fp, #-12]
   26cfc:	e51b0008 	ldr	r0, [fp, #-8]
   26d00:	ebfff4fb 	bl	240f4 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
   26d04:	ea000046 	b	26e24 <E131Bridge::HandleDmx()+0x6fc>
   26d08:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   26d0c:	e3530000 	cmp	r3, #0
   26d10:	0a00001e 	beq	26d90 <E131Bridge::HandleDmx()+0x668>
   26d14:	e55b3022 	ldrb	r3, [fp, #-34]	; 0xffffffde
   26d18:	e2233001 	eor	r3, r3, #1
   26d1c:	e6ef3073 	uxtb	r3, r3
   26d20:	e3530000 	cmp	r3, #0
   26d24:	0a000019 	beq	26d90 <E131Bridge::HandleDmx()+0x668>
   26d28:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26d2c:	e5d320e7 	ldrb	r2, [r3, #231]	; 0xe7
   26d30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26d34:	e5c32018 	strb	r2, [r3, #24]
   26d38:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26d3c:	e593200c 	ldr	r2, [r3, #12]
   26d40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26d44:	e5832000 	str	r2, [r3]
   26d48:	e51b1008 	ldr	r1, [fp, #-8]
   26d4c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   26d50:	ebfffd1a 	bl	261c0 <E131Bridge::UpdateMergeStatus(unsigned int)>
   26d54:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   26d58:	e51b2008 	ldr	r2, [fp, #-8]
   26d5c:	e1a03002 	mov	r3, r2
   26d60:	e1a03203 	lsl	r3, r3, #4
   26d64:	e0833002 	add	r3, r3, r2
   26d68:	e1a03103 	lsl	r3, r3, #2
   26d6c:	e0813003 	add	r3, r1, r3
   26d70:	e2833d15 	add	r3, r3, #1344	; 0x540
   26d74:	e283300c 	add	r3, r3, #12
   26d78:	e5933000 	ldr	r3, [r3]
   26d7c:	e51b2010 	ldr	r2, [fp, #-16]
   26d80:	e51b100c 	ldr	r1, [fp, #-12]
   26d84:	e51b0008 	ldr	r0, [fp, #-8]
   26d88:	ebfff4d9 	bl	240f4 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
   26d8c:	ea000024 	b	26e24 <E131Bridge::HandleDmx()+0x6fc>
   26d90:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   26d94:	e2233001 	eor	r3, r3, #1
   26d98:	e6ef3073 	uxtb	r3, r3
   26d9c:	e3530000 	cmp	r3, #0
   26da0:	0a00001c 	beq	26e18 <E131Bridge::HandleDmx()+0x6f0>
   26da4:	e55b3022 	ldrb	r3, [fp, #-34]	; 0xffffffde
   26da8:	e3530000 	cmp	r3, #0
   26dac:	0a000019 	beq	26e18 <E131Bridge::HandleDmx()+0x6f0>
   26db0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26db4:	e5d320e7 	ldrb	r2, [r3, #231]	; 0xe7
   26db8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26dbc:	e5c32018 	strb	r2, [r3, #24]
   26dc0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26dc4:	e593200c 	ldr	r2, [r3, #12]
   26dc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26dcc:	e5832000 	str	r2, [r3]
   26dd0:	e51b1008 	ldr	r1, [fp, #-8]
   26dd4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   26dd8:	ebfffcf8 	bl	261c0 <E131Bridge::UpdateMergeStatus(unsigned int)>
   26ddc:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   26de0:	e51b2008 	ldr	r2, [fp, #-8]
   26de4:	e1a03002 	mov	r3, r2
   26de8:	e1a03203 	lsl	r3, r3, #4
   26dec:	e0833002 	add	r3, r3, r2
   26df0:	e1a03103 	lsl	r3, r3, #2
   26df4:	e0813003 	add	r3, r1, r3
   26df8:	e2833d15 	add	r3, r3, #1344	; 0x540
   26dfc:	e283300c 	add	r3, r3, #12
   26e00:	e5933000 	ldr	r3, [r3]
   26e04:	e51b2010 	ldr	r2, [fp, #-16]
   26e08:	e51b100c 	ldr	r1, [fp, #-12]
   26e0c:	e51b0008 	ldr	r0, [fp, #-8]
   26e10:	ebfff4d8 	bl	24178 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
   26e14:	ea000002 	b	26e24 <E131Bridge::HandleDmx()+0x6fc>
   26e18:	e59f0248 	ldr	r0, [pc, #584]	; 27068 <E131Bridge::HandleDmx()+0x940>
   26e1c:	ebffa900 	bl	11224 <puts@plt>
   26e20:	ea00008e 	b	27060 <E131Bridge::HandleDmx()+0x938>
   26e24:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26e28:	e5d330e8 	ldrb	r3, [r3, #232]	; 0xe8
   26e2c:	e2033020 	and	r3, r3, #32
   26e30:	e3530000 	cmp	r3, #0
   26e34:	1a00003b 	bne	26f28 <E131Bridge::HandleDmx()+0x800>
   26e38:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26e3c:	e59330e4 	ldr	r3, [r3, #228]	; 0xe4
   26e40:	e1a03423 	lsr	r3, r3, #8
   26e44:	e6ff3073 	uxth	r3, r3
   26e48:	e3530000 	cmp	r3, #0
   26e4c:	0a000038 	beq	26f34 <E131Bridge::HandleDmx()+0x80c>
   26e50:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26e54:	e5d334f3 	ldrb	r3, [r3, #1267]	; 0x4f3
   26e58:	e2233001 	eor	r3, r3, #1
   26e5c:	e6ef3073 	uxtb	r3, r3
   26e60:	e3530000 	cmp	r3, #0
   26e64:	0a000032 	beq	26f34 <E131Bridge::HandleDmx()+0x80c>
   26e68:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   26e6c:	e2233001 	eor	r3, r3, #1
   26e70:	e6ef3073 	uxtb	r3, r3
   26e74:	e3530000 	cmp	r3, #0
   26e78:	0a000019 	beq	26ee4 <E131Bridge::HandleDmx()+0x7bc>
   26e7c:	e55b3022 	ldrb	r3, [fp, #-34]	; 0xffffffde
   26e80:	e2233001 	eor	r3, r3, #1
   26e84:	e6ef3073 	uxtb	r3, r3
   26e88:	e3530000 	cmp	r3, #0
   26e8c:	0a000014 	beq	26ee4 <E131Bridge::HandleDmx()+0x7bc>
   26e90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26e94:	e5933004 	ldr	r3, [r3, #4]
   26e98:	e3530000 	cmp	r3, #0
   26e9c:	13a03001 	movne	r3, #1
   26ea0:	03a03000 	moveq	r3, #0
   26ea4:	e6ef1073 	uxtb	r1, r3
   26ea8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26eac:	e5933004 	ldr	r3, [r3, #4]
   26eb0:	e3530000 	cmp	r3, #0
   26eb4:	13a03001 	movne	r3, #1
   26eb8:	03a03000 	moveq	r3, #0
   26ebc:	e6ef2073 	uxtb	r2, r3
   26ec0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26ec4:	e59330e4 	ldr	r3, [r3, #228]	; 0xe4
   26ec8:	e1a03423 	lsr	r3, r3, #8
   26ecc:	e6ff3073 	uxth	r3, r3
   26ed0:	e6bf3fb3 	rev16	r3, r3
   26ed4:	e6ff3073 	uxth	r3, r3
   26ed8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   26edc:	ebfffb20 	bl	25b64 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
   26ee0:	ea000009 	b	26f0c <E131Bridge::HandleDmx()+0x7e4>
   26ee4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26ee8:	e59330e4 	ldr	r3, [r3, #228]	; 0xe4
   26eec:	e1a03423 	lsr	r3, r3, #8
   26ef0:	e6ff3073 	uxth	r3, r3
   26ef4:	e6bf3fb3 	rev16	r3, r3
   26ef8:	e6ff3073 	uxth	r3, r3
   26efc:	e55b2022 	ldrb	r2, [fp, #-34]	; 0xffffffde
   26f00:	e55b1021 	ldrb	r1, [fp, #-33]	; 0xffffffdf
   26f04:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   26f08:	ebfffb15 	bl	25b64 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
   26f0c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26f10:	e3a02001 	mov	r2, #1
   26f14:	e5c324f3 	strb	r2, [r3, #1267]	; 0x4f3
   26f18:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26f1c:	e3a02001 	mov	r2, #1
   26f20:	e5c324f2 	strb	r2, [r3, #1266]	; 0x4f2
   26f24:	ea000002 	b	26f34 <E131Bridge::HandleDmx()+0x80c>
   26f28:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26f2c:	e3a02000 	mov	r2, #0
   26f30:	e5c324f3 	strb	r2, [r3, #1267]	; 0x4f3
   26f34:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26f38:	e5d334f2 	ldrb	r3, [r3, #1266]	; 0x4f2
   26f3c:	e2233001 	eor	r3, r3, #1
   26f40:	e6ef3073 	uxtb	r3, r3
   26f44:	e3530000 	cmp	r3, #0
   26f48:	1a000003 	bne	26f5c <E131Bridge::HandleDmx()+0x834>
   26f4c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26f50:	e5d334f6 	ldrb	r3, [r3, #1270]	; 0x4f6
   26f54:	e3530000 	cmp	r3, #0
   26f58:	0a00002a 	beq	27008 <E131Bridge::HandleDmx()+0x8e0>
   26f5c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26f60:	e5933004 	ldr	r3, [r3, #4]
   26f64:	e51b1008 	ldr	r1, [fp, #-8]
   26f68:	e1a00003 	mov	r0, r3
   26f6c:	ebfff03a 	bl	2305c <lightset::Data::Output(LightSet*, unsigned int)>
   26f70:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   26f74:	e51b2008 	ldr	r2, [fp, #-8]
   26f78:	e1a03002 	mov	r3, r2
   26f7c:	e1a03203 	lsl	r3, r3, #4
   26f80:	e0833002 	add	r3, r3, r2
   26f84:	e1a03103 	lsl	r3, r3, #2
   26f88:	e0813003 	add	r3, r1, r3
   26f8c:	e2833e55 	add	r3, r3, #1360	; 0x550
   26f90:	e2833002 	add	r3, r3, #2
   26f94:	e5d33000 	ldrb	r3, [r3]
   26f98:	e2233001 	eor	r3, r3, #1
   26f9c:	e6ef3073 	uxtb	r3, r3
   26fa0:	e3530000 	cmp	r3, #0
   26fa4:	0a000017 	beq	27008 <E131Bridge::HandleDmx()+0x8e0>
   26fa8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26fac:	e5932004 	ldr	r2, [r3, #4]
   26fb0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26fb4:	e5933004 	ldr	r3, [r3, #4]
   26fb8:	e5933000 	ldr	r3, [r3]
   26fbc:	e2833008 	add	r3, r3, #8
   26fc0:	e5933000 	ldr	r3, [r3]
   26fc4:	e51b1008 	ldr	r1, [fp, #-8]
   26fc8:	e1a00002 	mov	r0, r2
   26fcc:	e12fff33 	blx	r3
   26fd0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26fd4:	e3a02001 	mov	r2, #1
   26fd8:	e5c324f4 	strb	r2, [r3, #1268]	; 0x4f4
   26fdc:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   26fe0:	e51b2008 	ldr	r2, [fp, #-8]
   26fe4:	e1a03002 	mov	r3, r2
   26fe8:	e1a03203 	lsl	r3, r3, #4
   26fec:	e0833002 	add	r3, r3, r2
   26ff0:	e1a03103 	lsl	r3, r3, #2
   26ff4:	e0813003 	add	r3, r1, r3
   26ff8:	e2833e55 	add	r3, r3, #1360	; 0x550
   26ffc:	e2833002 	add	r3, r3, #2
   27000:	e3a02001 	mov	r2, #1
   27004:	e5c32000 	strb	r2, [r3]
   27008:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2700c:	e5d33509 	ldrb	r3, [r3, #1289]	; 0x509
   27010:	e3833002 	orr	r3, r3, #2
   27014:	e6ef2073 	uxtb	r2, r3
   27018:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2701c:	e5c32509 	strb	r2, [r3, #1289]	; 0x509
   27020:	ea00000a 	b	27050 <E131Bridge::HandleDmx()+0x928>
   27024:	e1a00000 	nop			; (mov r0, r0)
   27028:	ea000008 	b	27050 <E131Bridge::HandleDmx()+0x928>
   2702c:	e1a00000 	nop			; (mov r0, r0)
   27030:	ea000006 	b	27050 <E131Bridge::HandleDmx()+0x928>
   27034:	e1a00000 	nop			; (mov r0, r0)
   27038:	ea000004 	b	27050 <E131Bridge::HandleDmx()+0x928>
   2703c:	e1a00000 	nop			; (mov r0, r0)
   27040:	ea000002 	b	27050 <E131Bridge::HandleDmx()+0x928>
   27044:	e1a00000 	nop			; (mov r0, r0)
   27048:	ea000000 	b	27050 <E131Bridge::HandleDmx()+0x928>
   2704c:	e1a00000 	nop			; (mov r0, r0)
   27050:	e51b3008 	ldr	r3, [fp, #-8]
   27054:	e2833001 	add	r3, r3, #1
   27058:	e50b3008 	str	r3, [fp, #-8]
   2705c:	eafffdc4 	b	26774 <E131Bridge::HandleDmx()+0x4c>
   27060:	e24bd004 	sub	sp, fp, #4
   27064:	e8bd8800 	pop	{fp, pc}
   27068:	00047178 	.word	0x00047178

0002706c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
   2706c:	e92d4800 	push	{fp, lr}
   27070:	e28db004 	add	fp, sp, #4
   27074:	e24dd018 	sub	sp, sp, #24
   27078:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2707c:	e1a03001 	mov	r3, r1
   27080:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   27084:	e1a03002 	mov	r3, r2
   27088:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
   2708c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27090:	e3a02001 	mov	r2, #1
   27094:	e5c324f4 	strb	r2, [r3, #1268]	; 0x4f4
   27098:	e3a03000 	mov	r3, #0
   2709c:	e54b3005 	strb	r3, [fp, #-5]
   270a0:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   270a4:	e3530000 	cmp	r3, #0
   270a8:	0a00007b 	beq	2729c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x230>
   270ac:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
   270b0:	e3530000 	cmp	r3, #0
   270b4:	0a000078 	beq	2729c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x230>
   270b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   270bc:	e3a02001 	mov	r2, #1
   270c0:	e5c324f0 	strb	r2, [r3, #1264]	; 0x4f0
   270c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   270c8:	e3a02000 	mov	r2, #0
   270cc:	e5c324f1 	strb	r2, [r3, #1265]	; 0x4f1
   270d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   270d4:	e3a02000 	mov	r2, #0
   270d8:	e5c324f2 	strb	r2, [r3, #1266]	; 0x4f2
   270dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   270e0:	e3a02000 	mov	r2, #0
   270e4:	e5c324f3 	strb	r2, [r3, #1267]	; 0x4f3
   270e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   270ec:	e3a02001 	mov	r2, #1
   270f0:	e5c32508 	strb	r2, [r3, #1288]	; 0x508
   270f4:	e3a03000 	mov	r3, #0
   270f8:	e50b300c 	str	r3, [fp, #-12]
   270fc:	e51b300c 	ldr	r3, [fp, #-12]
   27100:	e3530003 	cmp	r3, #3
   27104:	8a0000fd 	bhi	27500 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x494>
   27108:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2710c:	e51b200c 	ldr	r2, [fp, #-12]
   27110:	e1a03002 	mov	r3, r2
   27114:	e1a03203 	lsl	r3, r3, #4
   27118:	e0833002 	add	r3, r3, r2
   2711c:	e1a03103 	lsl	r3, r3, #2
   27120:	e0813003 	add	r3, r1, r3
   27124:	e2833e55 	add	r3, r3, #1360	; 0x550
   27128:	e2833002 	add	r3, r3, #2
   2712c:	e5d33000 	ldrb	r3, [r3]
   27130:	e3530000 	cmp	r3, #0
   27134:	0a000054 	beq	2728c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x220>
   27138:	e3a03001 	mov	r3, #1
   2713c:	e54b3005 	strb	r3, [fp, #-5]
   27140:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   27144:	e51b200c 	ldr	r2, [fp, #-12]
   27148:	e1a03002 	mov	r3, r2
   2714c:	e1a03203 	lsl	r3, r3, #4
   27150:	e0833002 	add	r3, r3, r2
   27154:	e1a03103 	lsl	r3, r3, #2
   27158:	e0813003 	add	r3, r1, r3
   2715c:	e2833e51 	add	r3, r3, #1296	; 0x510
   27160:	e2833008 	add	r3, r3, #8
   27164:	e3a02000 	mov	r2, #0
   27168:	e5832000 	str	r2, [r3]
   2716c:	e51b200c 	ldr	r2, [fp, #-12]
   27170:	e1a03002 	mov	r3, r2
   27174:	e1a03203 	lsl	r3, r3, #4
   27178:	e0833002 	add	r3, r3, r2
   2717c:	e1a03103 	lsl	r3, r3, #2
   27180:	e2833e51 	add	r3, r3, #1296	; 0x510
   27184:	e2833008 	add	r3, r3, #8
   27188:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2718c:	e0823003 	add	r3, r2, r3
   27190:	e2833004 	add	r3, r3, #4
   27194:	e3a02010 	mov	r2, #16
   27198:	e3a01000 	mov	r1, #0
   2719c:	e1a00003 	mov	r0, r3
   271a0:	ebffa831 	bl	1126c <memset@plt>
   271a4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   271a8:	e51b200c 	ldr	r2, [fp, #-12]
   271ac:	e1a03002 	mov	r3, r2
   271b0:	e1a03203 	lsl	r3, r3, #4
   271b4:	e0833002 	add	r3, r3, r2
   271b8:	e1a03103 	lsl	r3, r3, #2
   271bc:	e0813003 	add	r3, r1, r3
   271c0:	e2833e53 	add	r3, r3, #1328	; 0x530
   271c4:	e2833004 	add	r3, r3, #4
   271c8:	e3a02000 	mov	r2, #0
   271cc:	e5832000 	str	r2, [r3]
   271d0:	e51b200c 	ldr	r2, [fp, #-12]
   271d4:	e1a03002 	mov	r3, r2
   271d8:	e1a03203 	lsl	r3, r3, #4
   271dc:	e0833002 	add	r3, r3, r2
   271e0:	e1a03103 	lsl	r3, r3, #2
   271e4:	e2833e53 	add	r3, r3, #1328	; 0x530
   271e8:	e2833008 	add	r3, r3, #8
   271ec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   271f0:	e0823003 	add	r3, r2, r3
   271f4:	e3a02010 	mov	r2, #16
   271f8:	e3a01000 	mov	r1, #0
   271fc:	e1a00003 	mov	r0, r3
   27200:	ebffa819 	bl	1126c <memset@plt>
   27204:	e51b000c 	ldr	r0, [fp, #-12]
   27208:	ebffdf7f 	bl	1f00c <lightset::Data::ClearLength(unsigned int)>
   2720c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   27210:	e51b200c 	ldr	r2, [fp, #-12]
   27214:	e1a03002 	mov	r3, r2
   27218:	e1a03203 	lsl	r3, r3, #4
   2721c:	e0833002 	add	r3, r3, r2
   27220:	e1a03103 	lsl	r3, r3, #2
   27224:	e0813003 	add	r3, r1, r3
   27228:	e2833e55 	add	r3, r3, #1360	; 0x550
   2722c:	e3a02000 	mov	r2, #0
   27230:	e5c32000 	strb	r2, [r3]
   27234:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   27238:	e51b200c 	ldr	r2, [fp, #-12]
   2723c:	e1a03002 	mov	r3, r2
   27240:	e1a03203 	lsl	r3, r3, #4
   27244:	e0833002 	add	r3, r3, r2
   27248:	e1a03103 	lsl	r3, r3, #2
   2724c:	e0813003 	add	r3, r1, r3
   27250:	e2833e55 	add	r3, r3, #1360	; 0x550
   27254:	e2833002 	add	r3, r3, #2
   27258:	e3a02000 	mov	r2, #0
   2725c:	e5c32000 	strb	r2, [r3]
   27260:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   27264:	e51b200c 	ldr	r2, [fp, #-12]
   27268:	e1a03002 	mov	r3, r2
   2726c:	e1a03203 	lsl	r3, r3, #4
   27270:	e0833002 	add	r3, r3, r2
   27274:	e1a03103 	lsl	r3, r3, #2
   27278:	e0813003 	add	r3, r1, r3
   2727c:	e2833e55 	add	r3, r3, #1360	; 0x550
   27280:	e2833001 	add	r3, r3, #1
   27284:	e3a02000 	mov	r2, #0
   27288:	e5c32000 	strb	r2, [r3]
   2728c:	e51b300c 	ldr	r3, [fp, #-12]
   27290:	e2833001 	add	r3, r3, #1
   27294:	e50b300c 	str	r3, [fp, #-12]
   27298:	eaffff97 	b	270fc <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
   2729c:	e3a03000 	mov	r3, #0
   272a0:	e50b3010 	str	r3, [fp, #-16]
   272a4:	e51b3010 	ldr	r3, [fp, #-16]
   272a8:	e3530003 	cmp	r3, #3
   272ac:	8a000094 	bhi	27504 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x498>
   272b0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   272b4:	e51b2010 	ldr	r2, [fp, #-16]
   272b8:	e1a03002 	mov	r3, r2
   272bc:	e1a03203 	lsl	r3, r3, #4
   272c0:	e0833002 	add	r3, r3, r2
   272c4:	e1a03103 	lsl	r3, r3, #2
   272c8:	e0813003 	add	r3, r1, r3
   272cc:	e2833e55 	add	r3, r3, #1360	; 0x550
   272d0:	e2833002 	add	r3, r3, #2
   272d4:	e5d33000 	ldrb	r3, [r3]
   272d8:	e3530000 	cmp	r3, #0
   272dc:	0a000083 	beq	274f0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x484>
   272e0:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   272e4:	e3530000 	cmp	r3, #0
   272e8:	0a00002f 	beq	273ac <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x340>
   272ec:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   272f0:	e51b2010 	ldr	r2, [fp, #-16]
   272f4:	e1a03002 	mov	r3, r2
   272f8:	e1a03203 	lsl	r3, r3, #4
   272fc:	e0833002 	add	r3, r3, r2
   27300:	e1a03103 	lsl	r3, r3, #2
   27304:	e0813003 	add	r3, r1, r3
   27308:	e2833e51 	add	r3, r3, #1296	; 0x510
   2730c:	e2833008 	add	r3, r3, #8
   27310:	e5933000 	ldr	r3, [r3]
   27314:	e3530000 	cmp	r3, #0
   27318:	0a000023 	beq	273ac <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x340>
   2731c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   27320:	e51b2010 	ldr	r2, [fp, #-16]
   27324:	e1a03002 	mov	r3, r2
   27328:	e1a03203 	lsl	r3, r3, #4
   2732c:	e0833002 	add	r3, r3, r2
   27330:	e1a03103 	lsl	r3, r3, #2
   27334:	e0813003 	add	r3, r1, r3
   27338:	e2833e51 	add	r3, r3, #1296	; 0x510
   2733c:	e2833008 	add	r3, r3, #8
   27340:	e3a02000 	mov	r2, #0
   27344:	e5832000 	str	r2, [r3]
   27348:	e51b2010 	ldr	r2, [fp, #-16]
   2734c:	e1a03002 	mov	r3, r2
   27350:	e1a03203 	lsl	r3, r3, #4
   27354:	e0833002 	add	r3, r3, r2
   27358:	e1a03103 	lsl	r3, r3, #2
   2735c:	e2833e51 	add	r3, r3, #1296	; 0x510
   27360:	e2833008 	add	r3, r3, #8
   27364:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   27368:	e0823003 	add	r3, r2, r3
   2736c:	e2833004 	add	r3, r3, #4
   27370:	e3a02010 	mov	r2, #16
   27374:	e3a01000 	mov	r1, #0
   27378:	e1a00003 	mov	r0, r3
   2737c:	ebffa7ba 	bl	1126c <memset@plt>
   27380:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   27384:	e51b2010 	ldr	r2, [fp, #-16]
   27388:	e1a03002 	mov	r3, r2
   2738c:	e1a03203 	lsl	r3, r3, #4
   27390:	e0833002 	add	r3, r3, r2
   27394:	e1a03103 	lsl	r3, r3, #2
   27398:	e0813003 	add	r3, r1, r3
   2739c:	e2833e55 	add	r3, r3, #1360	; 0x550
   273a0:	e2833001 	add	r3, r3, #1
   273a4:	e3a02000 	mov	r2, #0
   273a8:	e5c32000 	strb	r2, [r3]
   273ac:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
   273b0:	e3530000 	cmp	r3, #0
   273b4:	0a00002e 	beq	27474 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x408>
   273b8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   273bc:	e51b2010 	ldr	r2, [fp, #-16]
   273c0:	e1a03002 	mov	r3, r2
   273c4:	e1a03203 	lsl	r3, r3, #4
   273c8:	e0833002 	add	r3, r3, r2
   273cc:	e1a03103 	lsl	r3, r3, #2
   273d0:	e0813003 	add	r3, r1, r3
   273d4:	e2833e53 	add	r3, r3, #1328	; 0x530
   273d8:	e2833004 	add	r3, r3, #4
   273dc:	e5933000 	ldr	r3, [r3]
   273e0:	e3530000 	cmp	r3, #0
   273e4:	0a000022 	beq	27474 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x408>
   273e8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   273ec:	e51b2010 	ldr	r2, [fp, #-16]
   273f0:	e1a03002 	mov	r3, r2
   273f4:	e1a03203 	lsl	r3, r3, #4
   273f8:	e0833002 	add	r3, r3, r2
   273fc:	e1a03103 	lsl	r3, r3, #2
   27400:	e0813003 	add	r3, r1, r3
   27404:	e2833e53 	add	r3, r3, #1328	; 0x530
   27408:	e2833004 	add	r3, r3, #4
   2740c:	e3a02000 	mov	r2, #0
   27410:	e5832000 	str	r2, [r3]
   27414:	e51b2010 	ldr	r2, [fp, #-16]
   27418:	e1a03002 	mov	r3, r2
   2741c:	e1a03203 	lsl	r3, r3, #4
   27420:	e0833002 	add	r3, r3, r2
   27424:	e1a03103 	lsl	r3, r3, #2
   27428:	e2833e53 	add	r3, r3, #1328	; 0x530
   2742c:	e2833008 	add	r3, r3, #8
   27430:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   27434:	e0823003 	add	r3, r2, r3
   27438:	e3a02010 	mov	r2, #16
   2743c:	e3a01000 	mov	r1, #0
   27440:	e1a00003 	mov	r0, r3
   27444:	ebffa788 	bl	1126c <memset@plt>
   27448:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2744c:	e51b2010 	ldr	r2, [fp, #-16]
   27450:	e1a03002 	mov	r3, r2
   27454:	e1a03203 	lsl	r3, r3, #4
   27458:	e0833002 	add	r3, r3, r2
   2745c:	e1a03103 	lsl	r3, r3, #2
   27460:	e0813003 	add	r3, r1, r3
   27464:	e2833e55 	add	r3, r3, #1360	; 0x550
   27468:	e2833001 	add	r3, r3, #1
   2746c:	e3a02000 	mov	r2, #0
   27470:	e5c32000 	strb	r2, [r3]
   27474:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27478:	e5d334f1 	ldrb	r3, [r3, #1265]	; 0x4f1
   2747c:	e2233001 	eor	r3, r3, #1
   27480:	e6ef3073 	uxtb	r3, r3
   27484:	e3530000 	cmp	r3, #0
   27488:	0a000018 	beq	274f0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x484>
   2748c:	e3a03001 	mov	r3, #1
   27490:	e54b3005 	strb	r3, [fp, #-5]
   27494:	e51b0010 	ldr	r0, [fp, #-16]
   27498:	ebffdedb 	bl	1f00c <lightset::Data::ClearLength(unsigned int)>
   2749c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   274a0:	e51b2010 	ldr	r2, [fp, #-16]
   274a4:	e1a03002 	mov	r3, r2
   274a8:	e1a03203 	lsl	r3, r3, #4
   274ac:	e0833002 	add	r3, r3, r2
   274b0:	e1a03103 	lsl	r3, r3, #2
   274b4:	e0813003 	add	r3, r1, r3
   274b8:	e2833e55 	add	r3, r3, #1360	; 0x550
   274bc:	e3a02000 	mov	r2, #0
   274c0:	e5c32000 	strb	r2, [r3]
   274c4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   274c8:	e51b2010 	ldr	r2, [fp, #-16]
   274cc:	e1a03002 	mov	r3, r2
   274d0:	e1a03203 	lsl	r3, r3, #4
   274d4:	e0833002 	add	r3, r3, r2
   274d8:	e1a03103 	lsl	r3, r3, #2
   274dc:	e0813003 	add	r3, r1, r3
   274e0:	e2833e55 	add	r3, r3, #1360	; 0x550
   274e4:	e2833002 	add	r3, r3, #2
   274e8:	e3a02000 	mov	r2, #0
   274ec:	e5c32000 	strb	r2, [r3]
   274f0:	e51b3010 	ldr	r3, [fp, #-16]
   274f4:	e2833001 	add	r3, r3, #1
   274f8:	e50b3010 	str	r3, [fp, #-16]
   274fc:	eaffff68 	b	272a4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x238>
   27500:	e1a00000 	nop			; (mov r0, r0)
   27504:	e55b3005 	ldrb	r3, [fp, #-5]
   27508:	e3530000 	cmp	r3, #0
   2750c:	0a00001d 	beq	27588 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x51c>
   27510:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27514:	e593350c 	ldr	r3, [r3, #1292]	; 0x50c
   27518:	e3530001 	cmp	r3, #1
   2751c:	0a000004 	beq	27534 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x4c8>
   27520:	e3530002 	cmp	r3, #2
   27524:	0a00000d 	beq	27560 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x4f4>
   27528:	e3530000 	cmp	r3, #0
   2752c:	1a000015 	bne	27588 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x51c>
   27530:	ea000014 	b	27588 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x51c>
   27534:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27538:	e5932004 	ldr	r2, [r3, #4]
   2753c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27540:	e5933004 	ldr	r3, [r3, #4]
   27544:	e5933000 	ldr	r3, [r3]
   27548:	e2833014 	add	r3, r3, #20
   2754c:	e5933000 	ldr	r3, [r3]
   27550:	e3a01001 	mov	r1, #1
   27554:	e1a00002 	mov	r0, r2
   27558:	e12fff33 	blx	r3
   2755c:	ea000009 	b	27588 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x51c>
   27560:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27564:	e5932004 	ldr	r2, [r3, #4]
   27568:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2756c:	e5933004 	ldr	r3, [r3, #4]
   27570:	e5933000 	ldr	r3, [r3]
   27574:	e2833018 	add	r3, r3, #24
   27578:	e5933000 	ldr	r3, [r3]
   2757c:	e1a00002 	mov	r0, r2
   27580:	e12fff33 	blx	r3
   27584:	eaffffff 	b	27588 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x51c>
   27588:	ebffa81c 	bl	11600 <Hardware::Get()>
   2758c:	e1a03000 	mov	r3, r0
   27590:	e3a01002 	mov	r1, #2
   27594:	e1a00003 	mov	r0, r3
   27598:	eb005ed5 	bl	3f0f4 <Hardware::SetMode(hardware::ledblink::Mode)>
   2759c:	e3a00000 	mov	r0, #0
   275a0:	ebfff89e 	bl	25820 <hal::panel_led_off(unsigned int)>
   275a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   275a8:	e5d33509 	ldrb	r3, [r3, #1289]	; 0x509
   275ac:	e3c33002 	bic	r3, r3, #2
   275b0:	e6ef2073 	uxtb	r2, r3
   275b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   275b8:	e5c32509 	strb	r2, [r3, #1289]	; 0x509
   275bc:	e1a00000 	nop			; (mov r0, r0)
   275c0:	e24bd004 	sub	sp, fp, #4
   275c4:	e8bd8800 	pop	{fp, pc}

000275c8 <E131Bridge::IsValidRoot()>:
   275c8:	e92d4800 	push	{fp, lr}
   275cc:	e28db004 	add	fp, sp, #4
   275d0:	e24dd008 	sub	sp, sp, #8
   275d4:	e50b0008 	str	r0, [fp, #-8]
   275d8:	e51b3008 	ldr	r3, [fp, #-8]
   275dc:	e283307c 	add	r3, r3, #124	; 0x7c
   275e0:	e3a0200c 	mov	r2, #12
   275e4:	e59f1068 	ldr	r1, [pc, #104]	; 27654 <E131Bridge::IsValidRoot()+0x8c>
   275e8:	e1a00003 	mov	r0, r3
   275ec:	ebffa7b1 	bl	114b8 <memcmp@plt>
   275f0:	e1a03000 	mov	r3, r0
   275f4:	e3530000 	cmp	r3, #0
   275f8:	0a000001 	beq	27604 <E131Bridge::IsValidRoot()+0x3c>
   275fc:	e3a03000 	mov	r3, #0
   27600:	ea000010 	b	27648 <E131Bridge::IsValidRoot()+0x80>
   27604:	e51b3008 	ldr	r3, [fp, #-8]
   27608:	e1d328ba 	ldrh	r2, [r3, #138]	; 0x8a
   2760c:	e1d338bc 	ldrh	r3, [r3, #140]	; 0x8c
   27610:	e1a03803 	lsl	r3, r3, #16
   27614:	e1833002 	orr	r3, r3, r2
   27618:	e3530301 	cmp	r3, #67108864	; 0x4000000
   2761c:	0a000008 	beq	27644 <E131Bridge::IsValidRoot()+0x7c>
   27620:	e51b3008 	ldr	r3, [fp, #-8]
   27624:	e1d328ba 	ldrh	r2, [r3, #138]	; 0x8a
   27628:	e1d338bc 	ldrh	r3, [r3, #140]	; 0x8c
   2762c:	e1a03803 	lsl	r3, r3, #16
   27630:	e1833002 	orr	r3, r3, r2
   27634:	e3530302 	cmp	r3, #134217728	; 0x8000000
   27638:	0a000001 	beq	27644 <E131Bridge::IsValidRoot()+0x7c>
   2763c:	e3a03000 	mov	r3, #0
   27640:	ea000000 	b	27648 <E131Bridge::IsValidRoot()+0x80>
   27644:	e3a03001 	mov	r3, #1
   27648:	e1a00003 	mov	r0, r3
   2764c:	e24bd004 	sub	sp, fp, #4
   27650:	e8bd8800 	pop	{fp, pc}
   27654:	00047310 	.word	0x00047310

00027658 <E131Bridge::IsValidDataPacket()>:
   27658:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2765c:	e28db000 	add	fp, sp, #0
   27660:	e24dd00c 	sub	sp, sp, #12
   27664:	e50b0008 	str	r0, [fp, #-8]
   27668:	e51b3008 	ldr	r3, [fp, #-8]
   2766c:	e5d330ed 	ldrb	r3, [r3, #237]	; 0xed
   27670:	e3530002 	cmp	r3, #2
   27674:	0a000001 	beq	27680 <E131Bridge::IsValidDataPacket()+0x28>
   27678:	e3a03000 	mov	r3, #0
   2767c:	ea000018 	b	276e4 <E131Bridge::IsValidDataPacket()+0x8c>
   27680:	e51b3008 	ldr	r3, [fp, #-8]
   27684:	e5d330ee 	ldrb	r3, [r3, #238]	; 0xee
   27688:	e35300a1 	cmp	r3, #161	; 0xa1
   2768c:	0a000001 	beq	27698 <E131Bridge::IsValidDataPacket()+0x40>
   27690:	e3a03000 	mov	r3, #0
   27694:	ea000012 	b	276e4 <E131Bridge::IsValidDataPacket()+0x8c>
   27698:	e51b3008 	ldr	r3, [fp, #-8]
   2769c:	e5d320ef 	ldrb	r2, [r3, #239]	; 0xef
   276a0:	e5d330f0 	ldrb	r3, [r3, #240]	; 0xf0
   276a4:	e1a03403 	lsl	r3, r3, #8
   276a8:	e1833002 	orr	r3, r3, r2
   276ac:	e6ff3073 	uxth	r3, r3
   276b0:	e3530000 	cmp	r3, #0
   276b4:	0a000001 	beq	276c0 <E131Bridge::IsValidDataPacket()+0x68>
   276b8:	e3a03000 	mov	r3, #0
   276bc:	ea000008 	b	276e4 <E131Bridge::IsValidDataPacket()+0x8c>
   276c0:	e51b3008 	ldr	r3, [fp, #-8]
   276c4:	e59330f0 	ldr	r3, [r3, #240]	; 0xf0
   276c8:	e1a03423 	lsr	r3, r3, #8
   276cc:	e6ff3073 	uxth	r3, r3
   276d0:	e3530c01 	cmp	r3, #256	; 0x100
   276d4:	0a000001 	beq	276e0 <E131Bridge::IsValidDataPacket()+0x88>
   276d8:	e3a03000 	mov	r3, #0
   276dc:	ea000000 	b	276e4 <E131Bridge::IsValidDataPacket()+0x8c>
   276e0:	e3a03001 	mov	r3, #1
   276e4:	e1a00003 	mov	r0, r3
   276e8:	e28bd000 	add	sp, fp, #0
   276ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   276f0:	e12fff1e 	bx	lr

000276f4 <E131Bridge::Run()>:
   276f4:	e92d4800 	push	{fp, lr}
   276f8:	e28db004 	add	fp, sp, #4
   276fc:	e24dd020 	sub	sp, sp, #32
   27700:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   27704:	ebffc3f7 	bl	186e8 <Network::Get()>
   27708:	e1a0c000 	mov	ip, r0
   2770c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27710:	e5931000 	ldr	r1, [r3]
   27714:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27718:	e2830078 	add	r0, r3, #120	; 0x78
   2771c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27720:	e2833074 	add	r3, r3, #116	; 0x74
   27724:	e24b2012 	sub	r2, fp, #18
   27728:	e58d2004 	str	r2, [sp, #4]
   2772c:	e58d3000 	str	r3, [sp]
   27730:	e59f3354 	ldr	r3, [pc, #852]	; 27a8c <E131Bridge::Run()+0x398>
   27734:	e1a02000 	mov	r2, r0
   27738:	e1a0000c 	mov	r0, ip
   2773c:	eb003bd7 	bl	366a0 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)>
   27740:	e1a03000 	mov	r3, r0
   27744:	e14b30b8 	strh	r3, [fp, #-8]
   27748:	ebffa7ac 	bl	11600 <Hardware::Get()>
   2774c:	e1a03000 	mov	r3, r0
   27750:	e1a00003 	mov	r0, r3
   27754:	eb0062da 	bl	402c4 <Hardware::Millis()>
   27758:	e1a02000 	mov	r2, r0
   2775c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27760:	e583200c 	str	r2, [r3, #12]
   27764:	e15b30b8 	ldrh	r3, [fp, #-8]
   27768:	e3530000 	cmp	r3, #0
   2776c:	03a03001 	moveq	r3, #1
   27770:	13a03000 	movne	r3, #0
   27774:	e6ef3073 	uxtb	r3, r3
   27778:	e3530000 	cmp	r3, #0
   2777c:	0a000046 	beq	2789c <E131Bridge::Run()+0x1a8>
   27780:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27784:	e5d33507 	ldrb	r3, [r3, #1287]	; 0x507
   27788:	e3530000 	cmp	r3, #0
   2778c:	0a000022 	beq	2781c <E131Bridge::Run()+0x128>
   27790:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27794:	e593200c 	ldr	r2, [r3, #12]
   27798:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2779c:	e5933010 	ldr	r3, [r3, #16]
   277a0:	e0423003 	sub	r3, r2, r3
   277a4:	e59f22e4 	ldr	r2, [pc, #740]	; 27a90 <E131Bridge::Run()+0x39c>
   277a8:	e1530002 	cmp	r3, r2
   277ac:	9a00000d 	bls	277e8 <E131Bridge::Run()+0xf4>
   277b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   277b4:	e5933004 	ldr	r3, [r3, #4]
   277b8:	e3530000 	cmp	r3, #0
   277bc:	0a000009 	beq	277e8 <E131Bridge::Run()+0xf4>
   277c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   277c4:	e5d334f0 	ldrb	r3, [r3, #1264]	; 0x4f0
   277c8:	e2233001 	eor	r3, r3, #1
   277cc:	e6ef3073 	uxtb	r3, r3
   277d0:	e3530000 	cmp	r3, #0
   277d4:	0a000003 	beq	277e8 <E131Bridge::Run()+0xf4>
   277d8:	e3a02001 	mov	r2, #1
   277dc:	e3a01001 	mov	r1, #1
   277e0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   277e4:	ebfffe20 	bl	2706c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
   277e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   277ec:	e593200c 	ldr	r2, [r3, #12]
   277f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   277f4:	e5933010 	ldr	r3, [r3, #16]
   277f8:	e0423003 	sub	r3, r2, r3
   277fc:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   27800:	3a000005 	bcc	2781c <E131Bridge::Run()+0x128>
   27804:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27808:	e5d33509 	ldrb	r3, [r3, #1289]	; 0x509
   2780c:	e3c33002 	bic	r3, r3, #2
   27810:	e6ef2073 	uxtb	r2, r3
   27814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27818:	e5c32509 	strb	r2, [r3, #1289]	; 0x509
   2781c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27820:	e5d33008 	ldrb	r3, [r3, #8]
   27824:	e3530000 	cmp	r3, #0
   27828:	0a000008 	beq	27850 <E131Bridge::Run()+0x15c>
   2782c:	ebffa773 	bl	11600 <Hardware::Get()>
   27830:	e1a03000 	mov	r3, r0
   27834:	e1a00003 	mov	r0, r3
   27838:	ebffddc7 	bl	1ef5c <Hardware::GetMode()>
   2783c:	e1a03000 	mov	r3, r0
   27840:	e3530004 	cmp	r3, #4
   27844:	0a000001 	beq	27850 <E131Bridge::Run()+0x15c>
   27848:	e3a03001 	mov	r3, #1
   2784c:	ea000000 	b	27854 <E131Bridge::Run()+0x160>
   27850:	e3a03000 	mov	r3, #0
   27854:	e3530000 	cmp	r3, #0
   27858:	0a000086 	beq	27a78 <E131Bridge::Run()+0x384>
   2785c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27860:	e5d33509 	ldrb	r3, [r3, #1289]	; 0x509
   27864:	e3530000 	cmp	r3, #0
   27868:	0a000005 	beq	27884 <E131Bridge::Run()+0x190>
   2786c:	ebffa763 	bl	11600 <Hardware::Get()>
   27870:	e1a03000 	mov	r3, r0
   27874:	e3a01003 	mov	r1, #3
   27878:	e1a00003 	mov	r0, r3
   2787c:	eb005e1c 	bl	3f0f4 <Hardware::SetMode(hardware::ledblink::Mode)>
   27880:	ea00007c 	b	27a78 <E131Bridge::Run()+0x384>
   27884:	ebffa75d 	bl	11600 <Hardware::Get()>
   27888:	e1a03000 	mov	r3, r0
   2788c:	e3a01002 	mov	r1, #2
   27890:	e1a00003 	mov	r0, r3
   27894:	eb005e16 	bl	3f0f4 <Hardware::SetMode(hardware::ledblink::Mode)>
   27898:	ea000076 	b	27a78 <E131Bridge::Run()+0x384>
   2789c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   278a0:	ebffff48 	bl	275c8 <E131Bridge::IsValidRoot()>
   278a4:	e1a03000 	mov	r3, r0
   278a8:	e2233001 	eor	r3, r3, #1
   278ac:	e6ef3073 	uxtb	r3, r3
   278b0:	e3530000 	cmp	r3, #0
   278b4:	13a03001 	movne	r3, #1
   278b8:	03a03000 	moveq	r3, #0
   278bc:	e6ef3073 	uxtb	r3, r3
   278c0:	e3530000 	cmp	r3, #0
   278c4:	1a00006d 	bne	27a80 <E131Bridge::Run()+0x38c>
   278c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   278cc:	e3a02000 	mov	r2, #0
   278d0:	e5c324f0 	strb	r2, [r3, #1264]	; 0x4f0
   278d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   278d8:	e593200c 	ldr	r2, [r3, #12]
   278dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   278e0:	e5832010 	str	r2, [r3, #16]
   278e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   278e8:	e5d334f2 	ldrb	r3, [r3, #1266]	; 0x4f2
   278ec:	e3530000 	cmp	r3, #0
   278f0:	0a000010 	beq	27938 <E131Bridge::Run()+0x244>
   278f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   278f8:	e5d334f3 	ldrb	r3, [r3, #1267]	; 0x4f3
   278fc:	e2233001 	eor	r3, r3, #1
   27900:	e6ef3073 	uxtb	r3, r3
   27904:	e3530000 	cmp	r3, #0
   27908:	0a00000a 	beq	27938 <E131Bridge::Run()+0x244>
   2790c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27910:	e593200c 	ldr	r2, [r3, #12]
   27914:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27918:	e59334f8 	ldr	r3, [r3, #1272]	; 0x4f8
   2791c:	e0423003 	sub	r3, r2, r3
   27920:	e59f2168 	ldr	r2, [pc, #360]	; 27a90 <E131Bridge::Run()+0x39c>
   27924:	e1530002 	cmp	r3, r2
   27928:	9a000002 	bls	27938 <E131Bridge::Run()+0x244>
   2792c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27930:	e3a02000 	mov	r2, #0
   27934:	e5c324f2 	strb	r2, [r3, #1266]	; 0x4f2
   27938:	e3a03000 	mov	r3, #0
   2793c:	e54b3005 	strb	r3, [fp, #-5]
   27940:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27944:	e5933004 	ldr	r3, [r3, #4]
   27948:	e3530000 	cmp	r3, #0
   2794c:	0a000021 	beq	279d8 <E131Bridge::Run()+0x2e4>
   27950:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27954:	e1d328ba 	ldrh	r2, [r3, #138]	; 0x8a
   27958:	e1d338bc 	ldrh	r3, [r3, #140]	; 0x8c
   2795c:	e1a03803 	lsl	r3, r3, #16
   27960:	e1833002 	orr	r3, r3, r2
   27964:	e6bf3f33 	rev	r3, r3
   27968:	e50b300c 	str	r3, [fp, #-12]
   2796c:	e51b300c 	ldr	r3, [fp, #-12]
   27970:	e3530004 	cmp	r3, #4
   27974:	1a000009 	bne	279a0 <E131Bridge::Run()+0x2ac>
   27978:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2797c:	ebffff35 	bl	27658 <E131Bridge::IsValidDataPacket()>
   27980:	e1a03000 	mov	r3, r0
   27984:	e3530000 	cmp	r3, #0
   27988:	0a000012 	beq	279d8 <E131Bridge::Run()+0x2e4>
   2798c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   27990:	ebfffb64 	bl	26728 <E131Bridge::HandleDmx()>
   27994:	e3a03001 	mov	r3, #1
   27998:	e54b3005 	strb	r3, [fp, #-5]
   2799c:	ea00000d 	b	279d8 <E131Bridge::Run()+0x2e4>
   279a0:	e51b300c 	ldr	r3, [fp, #-12]
   279a4:	e3530008 	cmp	r3, #8
   279a8:	1a00000a 	bne	279d8 <E131Bridge::Run()+0x2e4>
   279ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   279b0:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
   279b4:	e6bf3f33 	rev	r3, r3
   279b8:	e50b3010 	str	r3, [fp, #-16]
   279bc:	e51b3010 	ldr	r3, [fp, #-16]
   279c0:	e3530001 	cmp	r3, #1
   279c4:	1a000003 	bne	279d8 <E131Bridge::Run()+0x2e4>
   279c8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   279cc:	eb000030 	bl	27a94 <E131Bridge::HandleSynchronization()>
   279d0:	e3a03001 	mov	r3, #1
   279d4:	e54b3005 	strb	r3, [fp, #-5]
   279d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   279dc:	e5d33008 	ldrb	r3, [r3, #8]
   279e0:	e3530000 	cmp	r3, #0
   279e4:	0a000008 	beq	27a0c <E131Bridge::Run()+0x318>
   279e8:	ebffa704 	bl	11600 <Hardware::Get()>
   279ec:	e1a03000 	mov	r3, r0
   279f0:	e1a00003 	mov	r0, r3
   279f4:	ebffdd58 	bl	1ef5c <Hardware::GetMode()>
   279f8:	e1a03000 	mov	r3, r0
   279fc:	e3530004 	cmp	r3, #4
   27a00:	0a000001 	beq	27a0c <E131Bridge::Run()+0x318>
   27a04:	e3a03001 	mov	r3, #1
   27a08:	ea000000 	b	27a10 <E131Bridge::Run()+0x31c>
   27a0c:	e3a03000 	mov	r3, #0
   27a10:	e3530000 	cmp	r3, #0
   27a14:	0a00000e 	beq	27a54 <E131Bridge::Run()+0x360>
   27a18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27a1c:	e5d33509 	ldrb	r3, [r3, #1289]	; 0x509
   27a20:	e3530000 	cmp	r3, #0
   27a24:	0a000005 	beq	27a40 <E131Bridge::Run()+0x34c>
   27a28:	ebffa6f4 	bl	11600 <Hardware::Get()>
   27a2c:	e1a03000 	mov	r3, r0
   27a30:	e3a01003 	mov	r1, #3
   27a34:	e1a00003 	mov	r0, r3
   27a38:	eb005dad 	bl	3f0f4 <Hardware::SetMode(hardware::ledblink::Mode)>
   27a3c:	ea000004 	b	27a54 <E131Bridge::Run()+0x360>
   27a40:	ebffa6ee 	bl	11600 <Hardware::Get()>
   27a44:	e1a03000 	mov	r3, r0
   27a48:	e3a01002 	mov	r1, #2
   27a4c:	e1a00003 	mov	r0, r3
   27a50:	eb005da7 	bl	3f0f4 <Hardware::SetMode(hardware::ledblink::Mode)>
   27a54:	e55b3005 	ldrb	r3, [fp, #-5]
   27a58:	e3530000 	cmp	r3, #0
   27a5c:	0a000002 	beq	27a6c <E131Bridge::Run()+0x378>
   27a60:	e3a00000 	mov	r0, #0
   27a64:	ebfff765 	bl	25800 <hal::panel_led_on(unsigned int)>
   27a68:	ea000005 	b	27a84 <E131Bridge::Run()+0x390>
   27a6c:	e3a00000 	mov	r0, #0
   27a70:	ebfff76a 	bl	25820 <hal::panel_led_off(unsigned int)>
   27a74:	ea000002 	b	27a84 <E131Bridge::Run()+0x390>
   27a78:	e1a00000 	nop			; (mov r0, r0)
   27a7c:	ea000000 	b	27a84 <E131Bridge::Run()+0x390>
   27a80:	e1a00000 	nop			; (mov r0, r0)
   27a84:	e24bd004 	sub	sp, fp, #4
   27a88:	e8bd8800 	pop	{fp, pc}
   27a8c:	00000478 	.word	0x00000478
   27a90:	000009c3 	.word	0x000009c3

00027a94 <E131Bridge::HandleSynchronization()>:
   27a94:	e92d4800 	push	{fp, lr}
   27a98:	e28db004 	add	fp, sp, #4
   27a9c:	e24dd010 	sub	sp, sp, #16
   27aa0:	e50b0010 	str	r0, [fp, #-16]
   27aa4:	e51b3010 	ldr	r3, [fp, #-16]
   27aa8:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
   27aac:	e1a03423 	lsr	r3, r3, #8
   27ab0:	e6ff3073 	uxth	r3, r3
   27ab4:	e6bf3fb3 	rev16	r3, r3
   27ab8:	e14b30ba 	strh	r3, [fp, #-10]
   27abc:	e51b3010 	ldr	r3, [fp, #-16]
   27ac0:	e2833c05 	add	r3, r3, #1280	; 0x500
   27ac4:	e2833002 	add	r3, r3, #2
   27ac8:	e1d330b0 	ldrh	r3, [r3]
   27acc:	e15b20ba 	ldrh	r2, [fp, #-10]
   27ad0:	e1520003 	cmp	r2, r3
   27ad4:	0a00000c 	beq	27b0c <E131Bridge::HandleSynchronization()+0x78>
   27ad8:	e51b3010 	ldr	r3, [fp, #-16]
   27adc:	e2833c05 	add	r3, r3, #1280	; 0x500
   27ae0:	e2833004 	add	r3, r3, #4
   27ae4:	e1d330b0 	ldrh	r3, [r3]
   27ae8:	e15b20ba 	ldrh	r2, [fp, #-10]
   27aec:	e1520003 	cmp	r2, r3
   27af0:	0a000005 	beq	27b0c <E131Bridge::HandleSynchronization()+0x78>
   27af4:	ebffa6c1 	bl	11600 <Hardware::Get()>
   27af8:	e1a03000 	mov	r3, r0
   27afc:	e3a01002 	mov	r1, #2
   27b00:	e1a00003 	mov	r0, r3
   27b04:	eb005d7a 	bl	3f0f4 <Hardware::SetMode(hardware::ledblink::Mode)>
   27b08:	ea00004f 	b	27c4c <E131Bridge::HandleSynchronization()+0x1b8>
   27b0c:	e51b3010 	ldr	r3, [fp, #-16]
   27b10:	e593200c 	ldr	r2, [r3, #12]
   27b14:	e51b3010 	ldr	r3, [fp, #-16]
   27b18:	e58324f8 	str	r2, [r3, #1272]	; 0x4f8
   27b1c:	e3a03000 	mov	r3, #0
   27b20:	e50b3008 	str	r3, [fp, #-8]
   27b24:	e51b3008 	ldr	r3, [fp, #-8]
   27b28:	e3530003 	cmp	r3, #3
   27b2c:	8a000039 	bhi	27c18 <E131Bridge::HandleSynchronization()+0x184>
   27b30:	e51b1010 	ldr	r1, [fp, #-16]
   27b34:	e51b2008 	ldr	r2, [fp, #-8]
   27b38:	e1a03002 	mov	r3, r2
   27b3c:	e1a03203 	lsl	r3, r3, #4
   27b40:	e0833002 	add	r3, r3, r2
   27b44:	e1a03103 	lsl	r3, r3, #2
   27b48:	e0813003 	add	r3, r1, r3
   27b4c:	e2833e51 	add	r3, r3, #1296	; 0x510
   27b50:	e2833002 	add	r3, r3, #2
   27b54:	e5d33000 	ldrb	r3, [r3]
   27b58:	e3530000 	cmp	r3, #0
   27b5c:	0a000029 	beq	27c08 <E131Bridge::HandleSynchronization()+0x174>
   27b60:	e51b3010 	ldr	r3, [fp, #-16]
   27b64:	e5933004 	ldr	r3, [r3, #4]
   27b68:	e51b1008 	ldr	r1, [fp, #-8]
   27b6c:	e1a00003 	mov	r0, r3
   27b70:	ebffed39 	bl	2305c <lightset::Data::Output(LightSet*, unsigned int)>
   27b74:	e51b1010 	ldr	r1, [fp, #-16]
   27b78:	e51b2008 	ldr	r2, [fp, #-8]
   27b7c:	e1a03002 	mov	r3, r2
   27b80:	e1a03203 	lsl	r3, r3, #4
   27b84:	e0833002 	add	r3, r3, r2
   27b88:	e1a03103 	lsl	r3, r3, #2
   27b8c:	e0813003 	add	r3, r1, r3
   27b90:	e2833e55 	add	r3, r3, #1360	; 0x550
   27b94:	e2833002 	add	r3, r3, #2
   27b98:	e5d33000 	ldrb	r3, [r3]
   27b9c:	e2233001 	eor	r3, r3, #1
   27ba0:	e6ef3073 	uxtb	r3, r3
   27ba4:	e3530000 	cmp	r3, #0
   27ba8:	0a000014 	beq	27c00 <E131Bridge::HandleSynchronization()+0x16c>
   27bac:	e51b3010 	ldr	r3, [fp, #-16]
   27bb0:	e5932004 	ldr	r2, [r3, #4]
   27bb4:	e51b3010 	ldr	r3, [fp, #-16]
   27bb8:	e5933004 	ldr	r3, [r3, #4]
   27bbc:	e5933000 	ldr	r3, [r3]
   27bc0:	e2833008 	add	r3, r3, #8
   27bc4:	e5933000 	ldr	r3, [r3]
   27bc8:	e51b1008 	ldr	r1, [fp, #-8]
   27bcc:	e1a00002 	mov	r0, r2
   27bd0:	e12fff33 	blx	r3
   27bd4:	e51b1010 	ldr	r1, [fp, #-16]
   27bd8:	e51b2008 	ldr	r2, [fp, #-8]
   27bdc:	e1a03002 	mov	r3, r2
   27be0:	e1a03203 	lsl	r3, r3, #4
   27be4:	e0833002 	add	r3, r3, r2
   27be8:	e1a03103 	lsl	r3, r3, #2
   27bec:	e0813003 	add	r3, r1, r3
   27bf0:	e2833e55 	add	r3, r3, #1360	; 0x550
   27bf4:	e2833002 	add	r3, r3, #2
   27bf8:	e3a02001 	mov	r2, #1
   27bfc:	e5c32000 	strb	r2, [r3]
   27c00:	e51b0008 	ldr	r0, [fp, #-8]
   27c04:	ebffdd00 	bl	1f00c <lightset::Data::ClearLength(unsigned int)>
   27c08:	e51b3008 	ldr	r3, [fp, #-8]
   27c0c:	e2833001 	add	r3, r3, #1
   27c10:	e50b3008 	str	r3, [fp, #-8]
   27c14:	eaffffc2 	b	27b24 <E131Bridge::HandleSynchronization()+0x90>
   27c18:	e51b3010 	ldr	r3, [fp, #-16]
   27c1c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
   27c20:	e3530000 	cmp	r3, #0
   27c24:	0a000008 	beq	27c4c <E131Bridge::HandleSynchronization()+0x1b8>
   27c28:	e51b3010 	ldr	r3, [fp, #-16]
   27c2c:	e5932070 	ldr	r2, [r3, #112]	; 0x70
   27c30:	e51b3010 	ldr	r3, [fp, #-16]
   27c34:	e5933070 	ldr	r3, [r3, #112]	; 0x70
   27c38:	e5933000 	ldr	r3, [r3]
   27c3c:	e2833008 	add	r3, r3, #8
   27c40:	e5933000 	ldr	r3, [r3]
   27c44:	e1a00002 	mov	r0, r2
   27c48:	e12fff33 	blx	r3
   27c4c:	e24bd004 	sub	sp, fp, #4
   27c50:	e8bd8800 	pop	{fp, pc}

00027c54 <LightSet::LightSet()>:
   27c54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   27c58:	e28db000 	add	fp, sp, #0
   27c5c:	e24dd00c 	sub	sp, sp, #12
   27c60:	e50b0008 	str	r0, [fp, #-8]
   27c64:	e59f2018 	ldr	r2, [pc, #24]	; 27c84 <LightSet::LightSet()+0x30>
   27c68:	e51b3008 	ldr	r3, [fp, #-8]
   27c6c:	e5832000 	str	r2, [r3]
   27c70:	e51b3008 	ldr	r3, [fp, #-8]
   27c74:	e1a00003 	mov	r0, r3
   27c78:	e28bd000 	add	sp, fp, #0
   27c7c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   27c80:	e12fff1e 	bx	lr
   27c84:	0004a5c0 	.word	0x0004a5c0

00027c88 <LightSet::~LightSet()>:
   27c88:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   27c8c:	e28db000 	add	fp, sp, #0
   27c90:	e24dd00c 	sub	sp, sp, #12
   27c94:	e50b0008 	str	r0, [fp, #-8]
   27c98:	e59f2018 	ldr	r2, [pc, #24]	; 27cb8 <LightSet::~LightSet()+0x30>
   27c9c:	e51b3008 	ldr	r3, [fp, #-8]
   27ca0:	e5832000 	str	r2, [r3]
   27ca4:	e51b3008 	ldr	r3, [fp, #-8]
   27ca8:	e1a00003 	mov	r0, r3
   27cac:	e28bd000 	add	sp, fp, #0
   27cb0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   27cb4:	e12fff1e 	bx	lr
   27cb8:	0004a5c0 	.word	0x0004a5c0

00027cbc <LightSet::~LightSet()>:
   27cbc:	e92d4800 	push	{fp, lr}
   27cc0:	e28db004 	add	fp, sp, #4
   27cc4:	e24dd008 	sub	sp, sp, #8
   27cc8:	e50b0008 	str	r0, [fp, #-8]
   27ccc:	e51b0008 	ldr	r0, [fp, #-8]
   27cd0:	ebffffec 	bl	27c88 <LightSet::~LightSet()>
   27cd4:	e51b0008 	ldr	r0, [fp, #-8]
   27cd8:	ebffa58a 	bl	11308 <operator delete(void*)@plt>
   27cdc:	e51b3008 	ldr	r3, [fp, #-8]
   27ce0:	e1a00003 	mov	r0, r3
   27ce4:	e24bd004 	sub	sp, fp, #4
   27ce8:	e8bd8800 	pop	{fp, pc}

00027cec <LightSet::Blackout(bool)>:
   27cec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   27cf0:	e28db000 	add	fp, sp, #0
   27cf4:	e24dd00c 	sub	sp, sp, #12
   27cf8:	e50b0008 	str	r0, [fp, #-8]
   27cfc:	e1a03001 	mov	r3, r1
   27d00:	e54b3009 	strb	r3, [fp, #-9]
   27d04:	e1a00000 	nop			; (mov r0, r0)
   27d08:	e28bd000 	add	sp, fp, #0
   27d0c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   27d10:	e12fff1e 	bx	lr

00027d14 <LightSet::FullOn()>:
   27d14:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   27d18:	e28db000 	add	fp, sp, #0
   27d1c:	e24dd00c 	sub	sp, sp, #12
   27d20:	e50b0008 	str	r0, [fp, #-8]
   27d24:	e1a00000 	nop			; (mov r0, r0)
   27d28:	e28bd000 	add	sp, fp, #0
   27d2c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   27d30:	e12fff1e 	bx	lr

00027d34 <ModeParams::GetDmxMode() const>:
   27d34:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   27d38:	e28db000 	add	fp, sp, #0
   27d3c:	e24dd00c 	sub	sp, sp, #12
   27d40:	e50b0008 	str	r0, [fp, #-8]
   27d44:	e51b3008 	ldr	r3, [fp, #-8]
   27d48:	e5d33008 	ldrb	r3, [r3, #8]
   27d4c:	e6ff3073 	uxth	r3, r3
   27d50:	e1a00003 	mov	r0, r3
   27d54:	e28bd000 	add	sp, fp, #0
   27d58:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   27d5c:	e12fff1e 	bx	lr

00027d60 <ModeParams::GetDmxStartAddress() const>:
   27d60:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   27d64:	e28db000 	add	fp, sp, #0
   27d68:	e24dd00c 	sub	sp, sp, #12
   27d6c:	e50b0008 	str	r0, [fp, #-8]
   27d70:	e51b3008 	ldr	r3, [fp, #-8]
   27d74:	e5933008 	ldr	r3, [r3, #8]
   27d78:	e1a03423 	lsr	r3, r3, #8
   27d7c:	e6ff3073 	uxth	r3, r3
   27d80:	e1a00003 	mov	r0, r3
   27d84:	e28bd000 	add	sp, fp, #0
   27d88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   27d8c:	e12fff1e 	bx	lr

00027d90 <L6470DmxModes::GetMode()>:
   27d90:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   27d94:	e28db000 	add	fp, sp, #0
   27d98:	e24dd00c 	sub	sp, sp, #12
   27d9c:	e50b0008 	str	r0, [fp, #-8]
   27da0:	e51b3008 	ldr	r3, [fp, #-8]
   27da4:	e5933004 	ldr	r3, [r3, #4]
   27da8:	e1a00003 	mov	r0, r3
   27dac:	e28bd000 	add	sp, fp, #0
   27db0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   27db4:	e12fff1e 	bx	lr

00027db8 <L6470DmxModes::GetDmxStartAddress()>:
   27db8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   27dbc:	e28db000 	add	fp, sp, #0
   27dc0:	e24dd00c 	sub	sp, sp, #12
   27dc4:	e50b0008 	str	r0, [fp, #-8]
   27dc8:	e51b3008 	ldr	r3, [fp, #-8]
   27dcc:	e1d330b8 	ldrh	r3, [r3, #8]
   27dd0:	e1a00003 	mov	r0, r3
   27dd4:	e28bd000 	add	sp, fp, #0
   27dd8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   27ddc:	e12fff1e 	bx	lr

00027de0 <L6470DmxModes::SetDmxStartAddress(unsigned short)>:
   27de0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   27de4:	e28db000 	add	fp, sp, #0
   27de8:	e24dd00c 	sub	sp, sp, #12
   27dec:	e50b0008 	str	r0, [fp, #-8]
   27df0:	e1a03001 	mov	r3, r1
   27df4:	e14b30ba 	strh	r3, [fp, #-10]
   27df8:	e51b3008 	ldr	r3, [fp, #-8]
   27dfc:	e15b20ba 	ldrh	r2, [fp, #-10]
   27e00:	e1c320b8 	strh	r2, [r3, #8]
   27e04:	e1a00000 	nop			; (mov r0, r0)
   27e08:	e28bd000 	add	sp, fp, #0
   27e0c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   27e10:	e12fff1e 	bx	lr

00027e14 <L6470DmxModes::GetDmxFootPrint()>:
   27e14:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   27e18:	e28db000 	add	fp, sp, #0
   27e1c:	e24dd00c 	sub	sp, sp, #12
   27e20:	e50b0008 	str	r0, [fp, #-8]
   27e24:	e51b3008 	ldr	r3, [fp, #-8]
   27e28:	e1d331b0 	ldrh	r3, [r3, #16]
   27e2c:	e1a00003 	mov	r0, r3
   27e30:	e28bd000 	add	sp, fp, #0
   27e34:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   27e38:	e12fff1e 	bx	lr

00027e3c <AutoDriver::setMotorNumber(unsigned int)>:
   27e3c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   27e40:	e28db000 	add	fp, sp, #0
   27e44:	e24dd00c 	sub	sp, sp, #12
   27e48:	e50b0008 	str	r0, [fp, #-8]
   27e4c:	e50b100c 	str	r1, [fp, #-12]
   27e50:	e51b3008 	ldr	r3, [fp, #-8]
   27e54:	e51b200c 	ldr	r2, [fp, #-12]
   27e58:	e5832004 	str	r2, [r3, #4]
   27e5c:	e1a00000 	nop			; (mov r0, r0)
   27e60:	e28bd000 	add	sp, fp, #0
   27e64:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   27e68:	e12fff1e 	bx	lr

00027e6c <SparkFunDmx::GetDmxStartAddress()>:
   27e6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   27e70:	e28db000 	add	fp, sp, #0
   27e74:	e24dd00c 	sub	sp, sp, #12
   27e78:	e50b0008 	str	r0, [fp, #-8]
   27e7c:	e51b3008 	ldr	r3, [fp, #-8]
   27e80:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
   27e84:	e1a00003 	mov	r0, r3
   27e88:	e28bd000 	add	sp, fp, #0
   27e8c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   27e90:	e12fff1e 	bx	lr

00027e94 <SparkFunDmx::GetDmxFootprint()>:
   27e94:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   27e98:	e28db000 	add	fp, sp, #0
   27e9c:	e24dd00c 	sub	sp, sp, #12
   27ea0:	e50b0008 	str	r0, [fp, #-8]
   27ea4:	e51b3008 	ldr	r3, [fp, #-8]
   27ea8:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
   27eac:	e1a00003 	mov	r0, r3
   27eb0:	e28bd000 	add	sp, fp, #0
   27eb4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   27eb8:	e12fff1e 	bx	lr

00027ebc <udelay>:
   27ebc:	e92d4800 	push	{fp, lr}
   27ec0:	e28db004 	add	fp, sp, #4
   27ec4:	e24dd008 	sub	sp, sp, #8
   27ec8:	e50b0008 	str	r0, [fp, #-8]
   27ecc:	e51b3008 	ldr	r3, [fp, #-8]
   27ed0:	e1a02003 	mov	r2, r3
   27ed4:	e3a03000 	mov	r3, #0
   27ed8:	e1a00002 	mov	r0, r2
   27edc:	e1a01003 	mov	r1, r3
   27ee0:	eb0065ea 	bl	41690 <bcm2835_delayMicroseconds>
   27ee4:	e1a00000 	nop			; (mov r0, r0)
   27ee8:	e24bd004 	sub	sp, fp, #4
   27eec:	e8bd8800 	pop	{fp, pc}

00027ef0 <SparkFunDmx::SparkFunDmx()>:
   27ef0:	e92d4800 	push	{fp, lr}
   27ef4:	e28db004 	add	fp, sp, #4
   27ef8:	e24dd010 	sub	sp, sp, #16
   27efc:	e50b0010 	str	r0, [fp, #-16]
   27f00:	e51b3010 	ldr	r3, [fp, #-16]
   27f04:	e1a00003 	mov	r0, r3
   27f08:	ebffff51 	bl	27c54 <LightSet::LightSet()>
   27f0c:	e59f21cc 	ldr	r2, [pc, #460]	; 280e0 <SparkFunDmx::SparkFunDmx()+0x1f0>
   27f10:	e51b3010 	ldr	r3, [fp, #-16]
   27f14:	e5832000 	str	r2, [r3]
   27f18:	e51b3010 	ldr	r3, [fp, #-16]
   27f1c:	e3e02000 	mvn	r2, #0
   27f20:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
   27f24:	e51b3010 	ldr	r3, [fp, #-16]
   27f28:	e3a02000 	mov	r2, #0
   27f2c:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
   27f30:	e51b3010 	ldr	r3, [fp, #-16]
   27f34:	e3a02000 	mov	r2, #0
   27f38:	e58320bc 	str	r2, [r3, #188]	; 0xbc
   27f3c:	e3a0303e 	mov	r3, #62	; 0x3e
   27f40:	e59f219c 	ldr	r2, [pc, #412]	; 280e4 <SparkFunDmx::SparkFunDmx()+0x1f4>
   27f44:	e59f119c 	ldr	r1, [pc, #412]	; 280e8 <SparkFunDmx::SparkFunDmx()+0x1f8>
   27f48:	e59f019c 	ldr	r0, [pc, #412]	; 280ec <SparkFunDmx::SparkFunDmx()+0x1fc>
   27f4c:	ebffa4a8 	bl	111f4 <printf@plt>
   27f50:	e51b3010 	ldr	r3, [fp, #-16]
   27f54:	e3a02000 	mov	r2, #0
   27f58:	e5c320a4 	strb	r2, [r3, #164]	; 0xa4
   27f5c:	e51b3010 	ldr	r3, [fp, #-16]
   27f60:	e3a0201b 	mov	r2, #27
   27f64:	e5c320a5 	strb	r2, [r3, #165]	; 0xa5
   27f68:	e51b3010 	ldr	r3, [fp, #-16]
   27f6c:	e3a02011 	mov	r2, #17
   27f70:	e5c320a6 	strb	r2, [r3, #166]	; 0xa6
   27f74:	e51b3010 	ldr	r3, [fp, #-16]
   27f78:	e3a02000 	mov	r2, #0
   27f7c:	e5c320a7 	strb	r2, [r3, #167]	; 0xa7
   27f80:	e51b3010 	ldr	r3, [fp, #-16]
   27f84:	e3a02000 	mov	r2, #0
   27f88:	e5c320a8 	strb	r2, [r3, #168]	; 0xa8
   27f8c:	e51b3010 	ldr	r3, [fp, #-16]
   27f90:	e3a02000 	mov	r2, #0
   27f94:	e5c320a9 	strb	r2, [r3, #169]	; 0xa9
   27f98:	e51b3010 	ldr	r3, [fp, #-16]
   27f9c:	e3a02000 	mov	r2, #0
   27fa0:	e5c320aa 	strb	r2, [r3, #170]	; 0xaa
   27fa4:	e51b3010 	ldr	r3, [fp, #-16]
   27fa8:	e3a02000 	mov	r2, #0
   27fac:	e5c320ab 	strb	r2, [r3, #171]	; 0xab
   27fb0:	e51b3010 	ldr	r3, [fp, #-16]
   27fb4:	e3a0201b 	mov	r2, #27
   27fb8:	e5c320ac 	strb	r2, [r3, #172]	; 0xac
   27fbc:	e51b3010 	ldr	r3, [fp, #-16]
   27fc0:	e3a02011 	mov	r2, #17
   27fc4:	e5c320ad 	strb	r2, [r3, #173]	; 0xad
   27fc8:	e51b3010 	ldr	r3, [fp, #-16]
   27fcc:	e3a02000 	mov	r2, #0
   27fd0:	e5c320ae 	strb	r2, [r3, #174]	; 0xae
   27fd4:	e51b3010 	ldr	r3, [fp, #-16]
   27fd8:	e3a02000 	mov	r2, #0
   27fdc:	e5c320af 	strb	r2, [r3, #175]	; 0xaf
   27fe0:	e51b3010 	ldr	r3, [fp, #-16]
   27fe4:	e3a02000 	mov	r2, #0
   27fe8:	e5c320b0 	strb	r2, [r3, #176]	; 0xb0
   27fec:	e51b3010 	ldr	r3, [fp, #-16]
   27ff0:	e3a02000 	mov	r2, #0
   27ff4:	e5c320b1 	strb	r2, [r3, #177]	; 0xb1
   27ff8:	e51b3010 	ldr	r3, [fp, #-16]
   27ffc:	e3a02007 	mov	r2, #7
   28000:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
   28004:	e51b3010 	ldr	r3, [fp, #-16]
   28008:	e3a02000 	mov	r2, #0
   2800c:	e1c32bb4 	strh	r2, [r3, #180]	; 0xb4
   28010:	e3a03000 	mov	r3, #0
   28014:	e50b3008 	str	r3, [fp, #-8]
   28018:	e51b3008 	ldr	r3, [fp, #-8]
   2801c:	e3530007 	cmp	r3, #7
   28020:	ca000025 	bgt	280bc <SparkFunDmx::SparkFunDmx()+0x1cc>
   28024:	e51b2010 	ldr	r2, [fp, #-16]
   28028:	e51b3008 	ldr	r3, [fp, #-8]
   2802c:	e1a03103 	lsl	r3, r3, #2
   28030:	e0823003 	add	r3, r2, r3
   28034:	e3a02000 	mov	r2, #0
   28038:	e5832004 	str	r2, [r3, #4]
   2803c:	e51b2010 	ldr	r2, [fp, #-16]
   28040:	e51b3008 	ldr	r3, [fp, #-8]
   28044:	e2833008 	add	r3, r3, #8
   28048:	e1a03103 	lsl	r3, r3, #2
   2804c:	e0823003 	add	r3, r2, r3
   28050:	e3a02000 	mov	r2, #0
   28054:	e5832004 	str	r2, [r3, #4]
   28058:	e51b2010 	ldr	r2, [fp, #-16]
   2805c:	e51b3008 	ldr	r3, [fp, #-8]
   28060:	e2833010 	add	r3, r3, #16
   28064:	e1a03103 	lsl	r3, r3, #2
   28068:	e0823003 	add	r3, r2, r3
   2806c:	e3a02000 	mov	r2, #0
   28070:	e5832004 	str	r2, [r3, #4]
   28074:	e51b2010 	ldr	r2, [fp, #-16]
   28078:	e51b3008 	ldr	r3, [fp, #-8]
   2807c:	e2833018 	add	r3, r3, #24
   28080:	e1a03103 	lsl	r3, r3, #2
   28084:	e0823003 	add	r3, r2, r3
   28088:	e3a02000 	mov	r2, #0
   2808c:	e5832004 	str	r2, [r3, #4]
   28090:	e51b2010 	ldr	r2, [fp, #-16]
   28094:	e51b3008 	ldr	r3, [fp, #-8]
   28098:	e2833020 	add	r3, r3, #32
   2809c:	e1a03103 	lsl	r3, r3, #2
   280a0:	e0823003 	add	r3, r2, r3
   280a4:	e3a02000 	mov	r2, #0
   280a8:	e5832004 	str	r2, [r3, #4]
   280ac:	e51b3008 	ldr	r3, [fp, #-8]
   280b0:	e2833001 	add	r3, r3, #1
   280b4:	e50b3008 	str	r3, [fp, #-8]
   280b8:	eaffffd6 	b	28018 <SparkFunDmx::SparkFunDmx()+0x128>
   280bc:	e3a0305d 	mov	r3, #93	; 0x5d
   280c0:	e59f201c 	ldr	r2, [pc, #28]	; 280e4 <SparkFunDmx::SparkFunDmx()+0x1f4>
   280c4:	e59f101c 	ldr	r1, [pc, #28]	; 280e8 <SparkFunDmx::SparkFunDmx()+0x1f8>
   280c8:	e59f0020 	ldr	r0, [pc, #32]	; 280f0 <SparkFunDmx::SparkFunDmx()+0x200>
   280cc:	ebffa448 	bl	111f4 <printf@plt>
   280d0:	e51b3010 	ldr	r3, [fp, #-16]
   280d4:	e1a00003 	mov	r0, r3
   280d8:	e24bd004 	sub	sp, fp, #4
   280dc:	e8bd8800 	pop	{fp, pc}
   280e0:	000477a0 	.word	0x000477a0
   280e4:	000477d0 	.word	0x000477d0
   280e8:	00047338 	.word	0x00047338
   280ec:	0004734c 	.word	0x0004734c
   280f0:	0004735c 	.word	0x0004735c

000280f4 <SparkFunDmx::~SparkFunDmx()>:
   280f4:	e92d4810 	push	{r4, fp, lr}
   280f8:	e28db008 	add	fp, sp, #8
   280fc:	e24dd014 	sub	sp, sp, #20
   28100:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   28104:	e59f2288 	ldr	r2, [pc, #648]	; 28394 <SparkFunDmx::~SparkFunDmx()+0x2a0>
   28108:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2810c:	e5832000 	str	r2, [r3]
   28110:	e3a03061 	mov	r3, #97	; 0x61
   28114:	e59f227c 	ldr	r2, [pc, #636]	; 28398 <SparkFunDmx::~SparkFunDmx()+0x2a4>
   28118:	e59f127c 	ldr	r1, [pc, #636]	; 2839c <SparkFunDmx::~SparkFunDmx()+0x2a8>
   2811c:	e59f027c 	ldr	r0, [pc, #636]	; 283a0 <SparkFunDmx::~SparkFunDmx()+0x2ac>
   28120:	ebffa433 	bl	111f4 <printf@plt>
   28124:	e3a03000 	mov	r3, #0
   28128:	e50b3010 	str	r3, [fp, #-16]
   2812c:	e51b3010 	ldr	r3, [fp, #-16]
   28130:	e3530007 	cmp	r3, #7
   28134:	ca00008a 	bgt	28364 <SparkFunDmx::~SparkFunDmx()+0x270>
   28138:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2813c:	e51b3010 	ldr	r3, [fp, #-16]
   28140:	e1a03103 	lsl	r3, r3, #2
   28144:	e0823003 	add	r3, r2, r3
   28148:	e5933004 	ldr	r3, [r3, #4]
   2814c:	e3530000 	cmp	r3, #0
   28150:	0a00001b 	beq	281c4 <SparkFunDmx::~SparkFunDmx()+0xd0>
   28154:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28158:	e51b3010 	ldr	r3, [fp, #-16]
   2815c:	e1a03103 	lsl	r3, r3, #2
   28160:	e0823003 	add	r3, r2, r3
   28164:	e5933004 	ldr	r3, [r3, #4]
   28168:	e3530000 	cmp	r3, #0
   2816c:	0a00000e 	beq	281ac <SparkFunDmx::~SparkFunDmx()+0xb8>
   28170:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28174:	e51b3010 	ldr	r3, [fp, #-16]
   28178:	e1a03103 	lsl	r3, r3, #2
   2817c:	e0823003 	add	r3, r2, r3
   28180:	e5931004 	ldr	r1, [r3, #4]
   28184:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28188:	e51b3010 	ldr	r3, [fp, #-16]
   2818c:	e1a03103 	lsl	r3, r3, #2
   28190:	e0823003 	add	r3, r2, r3
   28194:	e5933004 	ldr	r3, [r3, #4]
   28198:	e5933000 	ldr	r3, [r3]
   2819c:	e2833004 	add	r3, r3, #4
   281a0:	e5933000 	ldr	r3, [r3]
   281a4:	e1a00001 	mov	r0, r1
   281a8:	e12fff33 	blx	r3
   281ac:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   281b0:	e51b3010 	ldr	r3, [fp, #-16]
   281b4:	e1a03103 	lsl	r3, r3, #2
   281b8:	e0823003 	add	r3, r2, r3
   281bc:	e3a02000 	mov	r2, #0
   281c0:	e5832004 	str	r2, [r3, #4]
   281c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   281c8:	e51b3010 	ldr	r3, [fp, #-16]
   281cc:	e2833008 	add	r3, r3, #8
   281d0:	e1a03103 	lsl	r3, r3, #2
   281d4:	e0823003 	add	r3, r2, r3
   281d8:	e5933004 	ldr	r3, [r3, #4]
   281dc:	e3530000 	cmp	r3, #0
   281e0:	0a00000e 	beq	28220 <SparkFunDmx::~SparkFunDmx()+0x12c>
   281e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   281e8:	e51b3010 	ldr	r3, [fp, #-16]
   281ec:	e2833008 	add	r3, r3, #8
   281f0:	e1a03103 	lsl	r3, r3, #2
   281f4:	e0823003 	add	r3, r2, r3
   281f8:	e5933004 	ldr	r3, [r3, #4]
   281fc:	e1a00003 	mov	r0, r3
   28200:	ebffa440 	bl	11308 <operator delete(void*)@plt>
   28204:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28208:	e51b3010 	ldr	r3, [fp, #-16]
   2820c:	e2833008 	add	r3, r3, #8
   28210:	e1a03103 	lsl	r3, r3, #2
   28214:	e0823003 	add	r3, r2, r3
   28218:	e3a02000 	mov	r2, #0
   2821c:	e5832004 	str	r2, [r3, #4]
   28220:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28224:	e51b3010 	ldr	r3, [fp, #-16]
   28228:	e2833010 	add	r3, r3, #16
   2822c:	e1a03103 	lsl	r3, r3, #2
   28230:	e0823003 	add	r3, r2, r3
   28234:	e5933004 	ldr	r3, [r3, #4]
   28238:	e3530000 	cmp	r3, #0
   2823c:	0a000012 	beq	2828c <SparkFunDmx::~SparkFunDmx()+0x198>
   28240:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28244:	e51b3010 	ldr	r3, [fp, #-16]
   28248:	e2833010 	add	r3, r3, #16
   2824c:	e1a03103 	lsl	r3, r3, #2
   28250:	e0823003 	add	r3, r2, r3
   28254:	e5934004 	ldr	r4, [r3, #4]
   28258:	e3540000 	cmp	r4, #0
   2825c:	0a000003 	beq	28270 <SparkFunDmx::~SparkFunDmx()+0x17c>
   28260:	e1a00004 	mov	r0, r4
   28264:	eb00068b 	bl	29c98 <ModeParams::~ModeParams()>
   28268:	e1a00004 	mov	r0, r4
   2826c:	ebffa425 	bl	11308 <operator delete(void*)@plt>
   28270:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28274:	e51b3010 	ldr	r3, [fp, #-16]
   28278:	e2833010 	add	r3, r3, #16
   2827c:	e1a03103 	lsl	r3, r3, #2
   28280:	e0823003 	add	r3, r2, r3
   28284:	e3a02000 	mov	r2, #0
   28288:	e5832004 	str	r2, [r3, #4]
   2828c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28290:	e51b3010 	ldr	r3, [fp, #-16]
   28294:	e2833018 	add	r3, r3, #24
   28298:	e1a03103 	lsl	r3, r3, #2
   2829c:	e0823003 	add	r3, r2, r3
   282a0:	e5933004 	ldr	r3, [r3, #4]
   282a4:	e3530000 	cmp	r3, #0
   282a8:	0a000012 	beq	282f8 <SparkFunDmx::~SparkFunDmx()+0x204>
   282ac:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   282b0:	e51b3010 	ldr	r3, [fp, #-16]
   282b4:	e2833018 	add	r3, r3, #24
   282b8:	e1a03103 	lsl	r3, r3, #2
   282bc:	e0823003 	add	r3, r2, r3
   282c0:	e5934004 	ldr	r4, [r3, #4]
   282c4:	e3540000 	cmp	r4, #0
   282c8:	0a000003 	beq	282dc <SparkFunDmx::~SparkFunDmx()+0x1e8>
   282cc:	e1a00004 	mov	r0, r4
   282d0:	eb000f41 	bl	2bfdc <L6470DmxModes::~L6470DmxModes()>
   282d4:	e1a00004 	mov	r0, r4
   282d8:	ebffa40a 	bl	11308 <operator delete(void*)@plt>
   282dc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   282e0:	e51b3010 	ldr	r3, [fp, #-16]
   282e4:	e2833018 	add	r3, r3, #24
   282e8:	e1a03103 	lsl	r3, r3, #2
   282ec:	e0823003 	add	r3, r2, r3
   282f0:	e3a02000 	mov	r2, #0
   282f4:	e5832004 	str	r2, [r3, #4]
   282f8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   282fc:	e51b3010 	ldr	r3, [fp, #-16]
   28300:	e2833020 	add	r3, r3, #32
   28304:	e1a03103 	lsl	r3, r3, #2
   28308:	e0823003 	add	r3, r2, r3
   2830c:	e5933004 	ldr	r3, [r3, #4]
   28310:	e3530000 	cmp	r3, #0
   28314:	0a00000e 	beq	28354 <SparkFunDmx::~SparkFunDmx()+0x260>
   28318:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2831c:	e51b3010 	ldr	r3, [fp, #-16]
   28320:	e2833020 	add	r3, r3, #32
   28324:	e1a03103 	lsl	r3, r3, #2
   28328:	e0823003 	add	r3, r2, r3
   2832c:	e5933004 	ldr	r3, [r3, #4]
   28330:	e1a00003 	mov	r0, r3
   28334:	ebffa3f3 	bl	11308 <operator delete(void*)@plt>
   28338:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2833c:	e51b3010 	ldr	r3, [fp, #-16]
   28340:	e2833020 	add	r3, r3, #32
   28344:	e1a03103 	lsl	r3, r3, #2
   28348:	e0823003 	add	r3, r2, r3
   2834c:	e3a02000 	mov	r2, #0
   28350:	e5832004 	str	r2, [r3, #4]
   28354:	e51b3010 	ldr	r3, [fp, #-16]
   28358:	e2833001 	add	r3, r3, #1
   2835c:	e50b3010 	str	r3, [fp, #-16]
   28360:	eaffff71 	b	2812c <SparkFunDmx::~SparkFunDmx()+0x38>
   28364:	e3a0307e 	mov	r3, #126	; 0x7e
   28368:	e59f2028 	ldr	r2, [pc, #40]	; 28398 <SparkFunDmx::~SparkFunDmx()+0x2a4>
   2836c:	e59f1028 	ldr	r1, [pc, #40]	; 2839c <SparkFunDmx::~SparkFunDmx()+0x2a8>
   28370:	e59f002c 	ldr	r0, [pc, #44]	; 283a4 <SparkFunDmx::~SparkFunDmx()+0x2b0>
   28374:	ebffa39e 	bl	111f4 <printf@plt>
   28378:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2837c:	e1a00003 	mov	r0, r3
   28380:	ebfffe40 	bl	27c88 <LightSet::~LightSet()>
   28384:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28388:	e1a00003 	mov	r0, r3
   2838c:	e24bd008 	sub	sp, fp, #8
   28390:	e8bd8810 	pop	{r4, fp, pc}
   28394:	000477a0 	.word	0x000477a0
   28398:	000477dc 	.word	0x000477dc
   2839c:	00047338 	.word	0x00047338
   283a0:	0004734c 	.word	0x0004734c
   283a4:	0004735c 	.word	0x0004735c

000283a8 <SparkFunDmx::~SparkFunDmx()>:
   283a8:	e92d4800 	push	{fp, lr}
   283ac:	e28db004 	add	fp, sp, #4
   283b0:	e24dd008 	sub	sp, sp, #8
   283b4:	e50b0008 	str	r0, [fp, #-8]
   283b8:	e51b0008 	ldr	r0, [fp, #-8]
   283bc:	ebffff4c 	bl	280f4 <SparkFunDmx::~SparkFunDmx()>
   283c0:	e51b0008 	ldr	r0, [fp, #-8]
   283c4:	ebffa3cf 	bl	11308 <operator delete(void*)@plt>
   283c8:	e51b3008 	ldr	r3, [fp, #-8]
   283cc:	e1a00003 	mov	r0, r3
   283d0:	e24bd004 	sub	sp, fp, #4
   283d4:	e8bd8800 	pop	{fp, pc}

000283d8 <SparkFunDmx::Start(unsigned int)>:
   283d8:	e92d4800 	push	{fp, lr}
   283dc:	e28db004 	add	fp, sp, #4
   283e0:	e24dd010 	sub	sp, sp, #16
   283e4:	e50b0010 	str	r0, [fp, #-16]
   283e8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   283ec:	e3a03082 	mov	r3, #130	; 0x82
   283f0:	e59f208c 	ldr	r2, [pc, #140]	; 28484 <SparkFunDmx::Start(unsigned int)+0xac>
   283f4:	e59f108c 	ldr	r1, [pc, #140]	; 28488 <SparkFunDmx::Start(unsigned int)+0xb0>
   283f8:	e59f008c 	ldr	r0, [pc, #140]	; 2848c <SparkFunDmx::Start(unsigned int)+0xb4>
   283fc:	ebffa37c 	bl	111f4 <printf@plt>
   28400:	e3a03000 	mov	r3, #0
   28404:	e50b3008 	str	r3, [fp, #-8]
   28408:	e51b3008 	ldr	r3, [fp, #-8]
   2840c:	e3530007 	cmp	r3, #7
   28410:	ca000013 	bgt	28464 <SparkFunDmx::Start(unsigned int)+0x8c>
   28414:	e51b2010 	ldr	r2, [fp, #-16]
   28418:	e51b3008 	ldr	r3, [fp, #-8]
   2841c:	e2833018 	add	r3, r3, #24
   28420:	e1a03103 	lsl	r3, r3, #2
   28424:	e0823003 	add	r3, r2, r3
   28428:	e5933004 	ldr	r3, [r3, #4]
   2842c:	e3530000 	cmp	r3, #0
   28430:	0a000007 	beq	28454 <SparkFunDmx::Start(unsigned int)+0x7c>
   28434:	e51b2010 	ldr	r2, [fp, #-16]
   28438:	e51b3008 	ldr	r3, [fp, #-8]
   2843c:	e2833018 	add	r3, r3, #24
   28440:	e1a03103 	lsl	r3, r3, #2
   28444:	e0823003 	add	r3, r2, r3
   28448:	e5933004 	ldr	r3, [r3, #4]
   2844c:	e1a00003 	mov	r0, r3
   28450:	eb000f4c 	bl	2c188 <L6470DmxModes::Start()>
   28454:	e51b3008 	ldr	r3, [fp, #-8]
   28458:	e2833001 	add	r3, r3, #1
   2845c:	e50b3008 	str	r3, [fp, #-8]
   28460:	eaffffe8 	b	28408 <SparkFunDmx::Start(unsigned int)+0x30>
   28464:	e3a0308a 	mov	r3, #138	; 0x8a
   28468:	e59f2014 	ldr	r2, [pc, #20]	; 28484 <SparkFunDmx::Start(unsigned int)+0xac>
   2846c:	e59f1014 	ldr	r1, [pc, #20]	; 28488 <SparkFunDmx::Start(unsigned int)+0xb0>
   28470:	e59f0018 	ldr	r0, [pc, #24]	; 28490 <SparkFunDmx::Start(unsigned int)+0xb8>
   28474:	ebffa35e 	bl	111f4 <printf@plt>
   28478:	e1a00000 	nop			; (mov r0, r0)
   2847c:	e24bd004 	sub	sp, fp, #4
   28480:	e8bd8800 	pop	{fp, pc}
   28484:	000477ec 	.word	0x000477ec
   28488:	00047338 	.word	0x00047338
   2848c:	0004734c 	.word	0x0004734c
   28490:	0004735c 	.word	0x0004735c

00028494 <SparkFunDmx::Stop(unsigned int)>:
   28494:	e92d4800 	push	{fp, lr}
   28498:	e28db004 	add	fp, sp, #4
   2849c:	e24dd010 	sub	sp, sp, #16
   284a0:	e50b0010 	str	r0, [fp, #-16]
   284a4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   284a8:	e3a0308e 	mov	r3, #142	; 0x8e
   284ac:	e59f208c 	ldr	r2, [pc, #140]	; 28540 <SparkFunDmx::Stop(unsigned int)+0xac>
   284b0:	e59f108c 	ldr	r1, [pc, #140]	; 28544 <SparkFunDmx::Stop(unsigned int)+0xb0>
   284b4:	e59f008c 	ldr	r0, [pc, #140]	; 28548 <SparkFunDmx::Stop(unsigned int)+0xb4>
   284b8:	ebffa34d 	bl	111f4 <printf@plt>
   284bc:	e3a03000 	mov	r3, #0
   284c0:	e50b3008 	str	r3, [fp, #-8]
   284c4:	e51b3008 	ldr	r3, [fp, #-8]
   284c8:	e3530007 	cmp	r3, #7
   284cc:	ca000013 	bgt	28520 <SparkFunDmx::Stop(unsigned int)+0x8c>
   284d0:	e51b2010 	ldr	r2, [fp, #-16]
   284d4:	e51b3008 	ldr	r3, [fp, #-8]
   284d8:	e2833018 	add	r3, r3, #24
   284dc:	e1a03103 	lsl	r3, r3, #2
   284e0:	e0823003 	add	r3, r2, r3
   284e4:	e5933004 	ldr	r3, [r3, #4]
   284e8:	e3530000 	cmp	r3, #0
   284ec:	0a000007 	beq	28510 <SparkFunDmx::Stop(unsigned int)+0x7c>
   284f0:	e51b2010 	ldr	r2, [fp, #-16]
   284f4:	e51b3008 	ldr	r3, [fp, #-8]
   284f8:	e2833018 	add	r3, r3, #24
   284fc:	e1a03103 	lsl	r3, r3, #2
   28500:	e0823003 	add	r3, r2, r3
   28504:	e5933004 	ldr	r3, [r3, #4]
   28508:	e1a00003 	mov	r0, r3
   2850c:	eb000f35 	bl	2c1e8 <L6470DmxModes::Stop()>
   28510:	e51b3008 	ldr	r3, [fp, #-8]
   28514:	e2833001 	add	r3, r3, #1
   28518:	e50b3008 	str	r3, [fp, #-8]
   2851c:	eaffffe8 	b	284c4 <SparkFunDmx::Stop(unsigned int)+0x30>
   28520:	e3a03096 	mov	r3, #150	; 0x96
   28524:	e59f2014 	ldr	r2, [pc, #20]	; 28540 <SparkFunDmx::Stop(unsigned int)+0xac>
   28528:	e59f1014 	ldr	r1, [pc, #20]	; 28544 <SparkFunDmx::Stop(unsigned int)+0xb0>
   2852c:	e59f0018 	ldr	r0, [pc, #24]	; 2854c <SparkFunDmx::Stop(unsigned int)+0xb8>
   28530:	ebffa32f 	bl	111f4 <printf@plt>
   28534:	e1a00000 	nop			; (mov r0, r0)
   28538:	e24bd004 	sub	sp, fp, #4
   2853c:	e8bd8800 	pop	{fp, pc}
   28540:	000477f4 	.word	0x000477f4
   28544:	00047338 	.word	0x00047338
   28548:	0004734c 	.word	0x0004734c
   2854c:	0004735c 	.word	0x0004735c

00028550 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)>:
   28550:	e92d4810 	push	{r4, fp, lr}
   28554:	e28db008 	add	fp, sp, #8
   28558:	e24dd094 	sub	sp, sp, #148	; 0x94
   2855c:	e50b0088 	str	r0, [fp, #-136]	; 0xffffff78
   28560:	e50b108c 	str	r1, [fp, #-140]	; 0xffffff74
   28564:	e3a0309a 	mov	r3, #154	; 0x9a
   28568:	e59f2ec8 	ldr	r2, [pc, #3784]	; 29438 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xee8>
   2856c:	e59f1ec8 	ldr	r1, [pc, #3784]	; 2943c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xeec>
   28570:	e59f0ec8 	ldr	r0, [pc, #3784]	; 29440 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xef0>
   28574:	ebffa31e 	bl	111f4 <printf@plt>
   28578:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   2857c:	e3a02000 	mov	r2, #0
   28580:	e5c320a7 	strb	r2, [r3, #167]	; 0xa7
   28584:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28588:	e3a02000 	mov	r2, #0
   2858c:	e5c320a8 	strb	r2, [r3, #168]	; 0xa8
   28590:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28594:	e3a02000 	mov	r2, #0
   28598:	e5c320a9 	strb	r2, [r3, #169]	; 0xa9
   2859c:	e51b308c 	ldr	r3, [fp, #-140]	; 0xffffff74
   285a0:	e3530000 	cmp	r3, #0
   285a4:	0a000002 	beq	285b4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x64>
   285a8:	e51b308c 	ldr	r3, [fp, #-140]	; 0xffffff74
   285ac:	e5933000 	ldr	r3, [r3]
   285b0:	ea000000 	b	285b8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x68>
   285b4:	e3a03000 	mov	r3, #0
   285b8:	e24b2050 	sub	r2, fp, #80	; 0x50
   285bc:	e1a01003 	mov	r1, r3
   285c0:	e1a00002 	mov	r0, r2
   285c4:	eb000a7e 	bl	2afc4 <SparkFunDmxParams::SparkFunDmxParams(SparkFunDmxParamsStore*)>
   285c8:	e24b3050 	sub	r3, fp, #80	; 0x50
   285cc:	e1a00003 	mov	r0, r3
   285d0:	eb000a8b 	bl	2b004 <SparkFunDmxParams::Load()>
   285d4:	e1a03000 	mov	r3, r0
   285d8:	e3530000 	cmp	r3, #0
   285dc:	0a000007 	beq	28600 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xb0>
   285e0:	e24b3050 	sub	r3, fp, #80	; 0x50
   285e4:	e3a010ff 	mov	r1, #255	; 0xff
   285e8:	e1a00003 	mov	r0, r3
   285ec:	eb000be3 	bl	2b580 <SparkFunDmxParams::Dump(unsigned int)>
   285f0:	e24b3050 	sub	r3, fp, #80	; 0x50
   285f4:	e51b1088 	ldr	r1, [fp, #-136]	; 0xffffff78
   285f8:	e1a00003 	mov	r0, r3
   285fc:	eb000b9f 	bl	2b480 <SparkFunDmxParams::SetGlobal(SparkFunDmx*)>
   28600:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28604:	e5d330a9 	ldrb	r3, [r3, #169]	; 0xa9
   28608:	e3530000 	cmp	r3, #0
   2860c:	0a000004 	beq	28624 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xd4>
   28610:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28614:	e5d330a6 	ldrb	r3, [r3, #166]	; 0xa6
   28618:	e3a01000 	mov	r1, #0
   2861c:	e1a00003 	mov	r0, r3
   28620:	eb00612a 	bl	40ad0 <bcm2835_gpio_fsel>
   28624:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28628:	e5d330a5 	ldrb	r3, [r3, #165]	; 0xa5
   2862c:	e3a01001 	mov	r1, #1
   28630:	e1a00003 	mov	r0, r3
   28634:	eb006125 	bl	40ad0 <bcm2835_gpio_fsel>
   28638:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   2863c:	e5d330a5 	ldrb	r3, [r3, #165]	; 0xa5
   28640:	e1a00003 	mov	r0, r3
   28644:	eb006152 	bl	40b94 <bcm2835_gpio_set>
   28648:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   2864c:	e5d330a5 	ldrb	r3, [r3, #165]	; 0xa5
   28650:	e1a00003 	mov	r0, r3
   28654:	eb006169 	bl	40c00 <bcm2835_gpio_clr>
   28658:	e59f0de4 	ldr	r0, [pc, #3556]	; 29444 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xef4>
   2865c:	ebfffe16 	bl	27ebc <udelay>
   28660:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28664:	e5d330a5 	ldrb	r3, [r3, #165]	; 0xa5
   28668:	e1a00003 	mov	r0, r3
   2866c:	eb006148 	bl	40b94 <bcm2835_gpio_set>
   28670:	e59f0dcc 	ldr	r0, [pc, #3532]	; 29444 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xef4>
   28674:	ebfffe10 	bl	27ebc <udelay>
   28678:	eb006499 	bl	418e4 <bcm2835_spi_begin>
   2867c:	e3a03000 	mov	r3, #0
   28680:	e50b3010 	str	r3, [fp, #-16]
   28684:	e51b3010 	ldr	r3, [fp, #-16]
   28688:	e3530007 	cmp	r3, #7
   2868c:	8a00008d 	bhi	288c8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x378>
   28690:	e51b1010 	ldr	r1, [fp, #-16]
   28694:	e59f0dac 	ldr	r0, [pc, #3500]	; 29448 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xef8>
   28698:	ebffa2d5 	bl	111f4 <printf@plt>
   2869c:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   286a0:	e3a02000 	mov	r2, #0
   286a4:	e5c320ae 	strb	r2, [r3, #174]	; 0xae
   286a8:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   286ac:	e3a02000 	mov	r2, #0
   286b0:	e5c320af 	strb	r2, [r3, #175]	; 0xaf
   286b4:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   286b8:	e3a02000 	mov	r2, #0
   286bc:	e5c320b0 	strb	r2, [r3, #176]	; 0xb0
   286c0:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   286c4:	e3a02000 	mov	r2, #0
   286c8:	e5c320b1 	strb	r2, [r3, #177]	; 0xb1
   286cc:	e24b3050 	sub	r3, fp, #80	; 0x50
   286d0:	e51b1010 	ldr	r1, [fp, #-16]
   286d4:	e1a00003 	mov	r0, r3
   286d8:	eb000a87 	bl	2b0fc <SparkFunDmxParams::Load(unsigned int)>
   286dc:	e1a03000 	mov	r3, r0
   286e0:	e3530000 	cmp	r3, #0
   286e4:	0a00006e 	beq	288a4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x354>
   286e8:	e24b3050 	sub	r3, fp, #80	; 0x50
   286ec:	e51b1088 	ldr	r1, [fp, #-136]	; 0xffffff78
   286f0:	e1a00003 	mov	r0, r3
   286f4:	eb000b7d 	bl	2b4f0 <SparkFunDmxParams::SetLocal(SparkFunDmx*)>
   286f8:	e24b3050 	sub	r3, fp, #80	; 0x50
   286fc:	e51b1010 	ldr	r1, [fp, #-16]
   28700:	e1a00003 	mov	r0, r3
   28704:	eb000b9d 	bl	2b580 <SparkFunDmxParams::Dump(unsigned int)>
   28708:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   2870c:	e5d330ae 	ldrb	r3, [r3, #174]	; 0xae
   28710:	e3530000 	cmp	r3, #0
   28714:	0a000067 	beq	288b8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x368>
   28718:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   2871c:	e5d330aa 	ldrb	r3, [r3, #170]	; 0xaa
   28720:	e3530007 	cmp	r3, #7
   28724:	8a000063 	bhi	288b8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x368>
   28728:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   2872c:	e5d330af 	ldrb	r3, [r3, #175]	; 0xaf
   28730:	e3530000 	cmp	r3, #0
   28734:	0a000002 	beq	28744 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x1f4>
   28738:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   2873c:	e5d330ab 	ldrb	r3, [r3, #171]	; 0xab
   28740:	ea000001 	b	2874c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x1fc>
   28744:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28748:	e5d330a4 	ldrb	r3, [r3, #164]	; 0xa4
   2874c:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
   28750:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28754:	e5d330b0 	ldrb	r3, [r3, #176]	; 0xb0
   28758:	e3530000 	cmp	r3, #0
   2875c:	0a000002 	beq	2876c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x21c>
   28760:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28764:	e5d330ac 	ldrb	r3, [r3, #172]	; 0xac
   28768:	ea000001 	b	28774 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x224>
   2876c:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28770:	e5d330a5 	ldrb	r3, [r3, #165]	; 0xa5
   28774:	e54b3026 	strb	r3, [fp, #-38]	; 0xffffffda
   28778:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   2877c:	e5d330b1 	ldrb	r3, [r3, #177]	; 0xb1
   28780:	e3530000 	cmp	r3, #0
   28784:	0a000002 	beq	28794 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x244>
   28788:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   2878c:	e5d330ad 	ldrb	r3, [r3, #173]	; 0xad
   28790:	ea000001 	b	2879c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x24c>
   28794:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28798:	e5d330a6 	ldrb	r3, [r3, #166]	; 0xa6
   2879c:	e54b3027 	strb	r3, [fp, #-39]	; 0xffffffd9
   287a0:	e55b1025 	ldrb	r1, [fp, #-37]	; 0xffffffdb
   287a4:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   287a8:	e5d330af 	ldrb	r3, [r3, #175]	; 0xaf
   287ac:	e1a04003 	mov	r4, r3
   287b0:	e55b0026 	ldrb	r0, [fp, #-38]	; 0xffffffda
   287b4:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   287b8:	e5d330b0 	ldrb	r3, [r3, #176]	; 0xb0
   287bc:	e1a0c003 	mov	ip, r3
   287c0:	e55b3027 	ldrb	r3, [fp, #-39]	; 0xffffffd9
   287c4:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   287c8:	e5d220b1 	ldrb	r2, [r2, #177]	; 0xb1
   287cc:	e1a0e002 	mov	lr, r2
   287d0:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   287d4:	e5d220a9 	ldrb	r2, [r2, #169]	; 0xa9
   287d8:	e58d200c 	str	r2, [sp, #12]
   287dc:	e58de008 	str	lr, [sp, #8]
   287e0:	e58d3004 	str	r3, [sp, #4]
   287e4:	e58dc000 	str	ip, [sp]
   287e8:	e1a03000 	mov	r3, r0
   287ec:	e1a02004 	mov	r2, r4
   287f0:	e59f0c54 	ldr	r0, [pc, #3156]	; 2944c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xefc>
   287f4:	ebffa27e 	bl	111f4 <printf@plt>
   287f8:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   287fc:	e5d330a9 	ldrb	r3, [r3, #169]	; 0xa9
   28800:	e3530000 	cmp	r3, #0
   28804:	1a000003 	bne	28818 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x2c8>
   28808:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   2880c:	e5d330b1 	ldrb	r3, [r3, #177]	; 0xb1
   28810:	e3530000 	cmp	r3, #0
   28814:	0a000012 	beq	28864 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x314>
   28818:	e3a00010 	mov	r0, #16
   2881c:	ebffa247 	bl	11140 <operator new(unsigned int)@plt>
   28820:	e1a03000 	mov	r3, r0
   28824:	e1a04003 	mov	r4, r3
   28828:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   2882c:	e5d310aa 	ldrb	r1, [r3, #170]	; 0xaa
   28830:	e55b0026 	ldrb	r0, [fp, #-38]	; 0xffffffda
   28834:	e55b2025 	ldrb	r2, [fp, #-37]	; 0xffffffdb
   28838:	e55b3027 	ldrb	r3, [fp, #-39]	; 0xffffffd9
   2883c:	e58d3000 	str	r3, [sp]
   28840:	e1a03000 	mov	r3, r0
   28844:	e1a00004 	mov	r0, r4
   28848:	eb0016f6 	bl	2e428 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char, unsigned char)>
   2884c:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28850:	e51b3010 	ldr	r3, [fp, #-16]
   28854:	e1a03103 	lsl	r3, r3, #2
   28858:	e0823003 	add	r3, r2, r3
   2885c:	e5834004 	str	r4, [r3, #4]
   28860:	ea000014 	b	288b8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x368>
   28864:	e3a00010 	mov	r0, #16
   28868:	ebffa234 	bl	11140 <operator new(unsigned int)@plt>
   2886c:	e1a03000 	mov	r3, r0
   28870:	e1a04003 	mov	r4, r3
   28874:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28878:	e5d310aa 	ldrb	r1, [r3, #170]	; 0xaa
   2887c:	e55b3026 	ldrb	r3, [fp, #-38]	; 0xffffffda
   28880:	e55b2025 	ldrb	r2, [fp, #-37]	; 0xffffffdb
   28884:	e1a00004 	mov	r0, r4
   28888:	eb001715 	bl	2e4e4 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char)>
   2888c:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28890:	e51b3010 	ldr	r3, [fp, #-16]
   28894:	e1a03103 	lsl	r3, r3, #2
   28898:	e0823003 	add	r3, r2, r3
   2889c:	e5834004 	str	r4, [r3, #4]
   288a0:	ea000004 	b	288b8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x368>
   288a4:	e51b3010 	ldr	r3, [fp, #-16]
   288a8:	e2833030 	add	r3, r3, #48	; 0x30
   288ac:	e1a01003 	mov	r1, r3
   288b0:	e59f0b98 	ldr	r0, [pc, #2968]	; 29450 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf00>
   288b4:	ebffa24e 	bl	111f4 <printf@plt>
   288b8:	e51b3010 	ldr	r3, [fp, #-16]
   288bc:	e2833001 	add	r3, r3, #1
   288c0:	e50b3010 	str	r3, [fp, #-16]
   288c4:	eaffff6e 	b	28684 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x134>
   288c8:	eb001803 	bl	2e8dc <AutoDriver::getNumBoards()>
   288cc:	e1a03000 	mov	r3, r0
   288d0:	e1a01003 	mov	r1, r3
   288d4:	e59f0b78 	ldr	r0, [pc, #2936]	; 29454 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf04>
   288d8:	ebffa245 	bl	111f4 <printf@plt>
   288dc:	e3a03000 	mov	r3, #0
   288e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   288e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   288e8:	e3530007 	cmp	r3, #7
   288ec:	8a00024e 	bhi	2922c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xcdc>
   288f0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   288f4:	e59f0b5c 	ldr	r0, [pc, #2908]	; 29458 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf08>
   288f8:	ebffa23d 	bl	111f4 <printf@plt>
   288fc:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28900:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28904:	e1a03103 	lsl	r3, r3, #2
   28908:	e0823003 	add	r3, r2, r3
   2890c:	e5933004 	ldr	r3, [r3, #4]
   28910:	e3530000 	cmp	r3, #0
   28914:	0a00023d 	beq	29210 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xcc0>
   28918:	e3a00040 	mov	r0, #64	; 0x40
   2891c:	ebffa207 	bl	11140 <operator new(unsigned int)@plt>
   28920:	e1a03000 	mov	r3, r0
   28924:	e1a04003 	mov	r4, r3
   28928:	e51b308c 	ldr	r3, [fp, #-140]	; 0xffffff74
   2892c:	e3530000 	cmp	r3, #0
   28930:	0a000002 	beq	28940 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x3f0>
   28934:	e51b308c 	ldr	r3, [fp, #-140]	; 0xffffff74
   28938:	e5933004 	ldr	r3, [r3, #4]
   2893c:	ea000000 	b	28944 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x3f4>
   28940:	e3a03000 	mov	r3, #0
   28944:	e1a01003 	mov	r1, r3
   28948:	e1a00004 	mov	r0, r4
   2894c:	eb0004a3 	bl	29be0 <ModeParams::ModeParams(ModeParamsStore*)>
   28950:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28954:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28958:	e2833010 	add	r3, r3, #16
   2895c:	e1a03103 	lsl	r3, r3, #2
   28960:	e0823003 	add	r3, r2, r3
   28964:	e5834004 	str	r4, [r3, #4]
   28968:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   2896c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28970:	e2833010 	add	r3, r3, #16
   28974:	e1a03103 	lsl	r3, r3, #2
   28978:	e0823003 	add	r3, r2, r3
   2897c:	e5933004 	ldr	r3, [r3, #4]
   28980:	e3530000 	cmp	r3, #0
   28984:	1a000004 	bne	2899c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x44c>
   28988:	e59f3acc 	ldr	r3, [pc, #2764]	; 2945c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf0c>
   2898c:	e3a020ec 	mov	r2, #236	; 0xec
   28990:	e59f1aa4 	ldr	r1, [pc, #2724]	; 2943c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xeec>
   28994:	e59f0ac4 	ldr	r0, [pc, #2756]	; 29460 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf10>
   28998:	ebffa25d 	bl	11314 <__assert_fail@plt>
   2899c:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   289a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   289a4:	e2833010 	add	r3, r3, #16
   289a8:	e1a03103 	lsl	r3, r3, #2
   289ac:	e0823003 	add	r3, r2, r3
   289b0:	e5933004 	ldr	r3, [r3, #4]
   289b4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   289b8:	e1a00003 	mov	r0, r3
   289bc:	eb0004c0 	bl	29cc4 <ModeParams::Load(unsigned int)>
   289c0:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   289c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   289c8:	e2833010 	add	r3, r3, #16
   289cc:	e1a03103 	lsl	r3, r3, #2
   289d0:	e0823003 	add	r3, r2, r3
   289d4:	e5933004 	ldr	r3, [r3, #4]
   289d8:	e1a00003 	mov	r0, r3
   289dc:	eb00064b 	bl	2a310 <ModeParams::Dump()>
   289e0:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   289e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   289e8:	e2833010 	add	r3, r3, #16
   289ec:	e1a03103 	lsl	r3, r3, #2
   289f0:	e0823003 	add	r3, r2, r3
   289f4:	e5933004 	ldr	r3, [r3, #4]
   289f8:	e1a00003 	mov	r0, r3
   289fc:	ebfffccc 	bl	27d34 <ModeParams::GetDmxMode() const>
   28a00:	e1a03000 	mov	r3, r0
   28a04:	e1a02003 	mov	r2, r3
   28a08:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28a0c:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
   28a10:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28a14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28a18:	e2833010 	add	r3, r3, #16
   28a1c:	e1a03103 	lsl	r3, r3, #2
   28a20:	e0823003 	add	r3, r2, r3
   28a24:	e5933004 	ldr	r3, [r3, #4]
   28a28:	e1a00003 	mov	r0, r3
   28a2c:	ebfffccb 	bl	27d60 <ModeParams::GetDmxStartAddress() const>
   28a30:	e1a03000 	mov	r3, r0
   28a34:	e1a02003 	mov	r2, r3
   28a38:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28a3c:	e1c32bb4 	strh	r2, [r3, #180]	; 0xb4
   28a40:	e59f0a1c 	ldr	r0, [pc, #2588]	; 29464 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf14>
   28a44:	ebffa1f6 	bl	11224 <puts@plt>
   28a48:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28a4c:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
   28a50:	e1a04003 	mov	r4, r3
   28a54:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28a58:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
   28a5c:	e1a00003 	mov	r0, r3
   28a60:	eb000da0 	bl	2c0e8 <L6470DmxModes::GetDmxFootPrintMode(unsigned int)>
   28a64:	e1a03000 	mov	r3, r0
   28a68:	e1a02003 	mov	r2, r3
   28a6c:	e1a01004 	mov	r1, r4
   28a70:	e59f09f0 	ldr	r0, [pc, #2544]	; 29468 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf18>
   28a74:	ebffa1de 	bl	111f4 <printf@plt>
   28a78:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28a7c:	e1d33bb4 	ldrh	r3, [r3, #180]	; 0xb4
   28a80:	e1a01003 	mov	r1, r3
   28a84:	e59f09e0 	ldr	r0, [pc, #2528]	; 2946c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf1c>
   28a88:	ebffa1d9 	bl	111f4 <printf@plt>
   28a8c:	e59f09dc 	ldr	r0, [pc, #2524]	; 29470 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf20>
   28a90:	ebffa1e3 	bl	11224 <puts@plt>
   28a94:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28a98:	e1d33bb4 	ldrh	r3, [r3, #180]	; 0xb4
   28a9c:	e3530c02 	cmp	r3, #512	; 0x200
   28aa0:	8a000008 	bhi	28ac8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x578>
   28aa4:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28aa8:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
   28aac:	e1a00003 	mov	r0, r3
   28ab0:	eb000d8c 	bl	2c0e8 <L6470DmxModes::GetDmxFootPrintMode(unsigned int)>
   28ab4:	e1a03000 	mov	r3, r0
   28ab8:	e3530000 	cmp	r3, #0
   28abc:	0a000001 	beq	28ac8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x578>
   28ac0:	e3a03001 	mov	r3, #1
   28ac4:	ea000000 	b	28acc <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x57c>
   28ac8:	e3a03000 	mov	r3, #0
   28acc:	e3530000 	cmp	r3, #0
   28ad0:	0a0001ab 	beq	29184 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xc34>
   28ad4:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28adc:	e1a03103 	lsl	r3, r3, #2
   28ae0:	e0823003 	add	r3, r2, r3
   28ae4:	e5933004 	ldr	r3, [r3, #4]
   28ae8:	e1a00003 	mov	r0, r3
   28aec:	eb0017a8 	bl	2e994 <AutoDriver::IsConnected()>
   28af0:	e1a03000 	mov	r3, r0
   28af4:	e3530000 	cmp	r3, #0
   28af8:	0a000181 	beq	29104 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xbb4>
   28afc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   28b00:	e59f096c 	ldr	r0, [pc, #2412]	; 29474 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf24>
   28b04:	ebffa1ba 	bl	111f4 <printf@plt>
   28b08:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28b0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28b10:	e1a03103 	lsl	r3, r3, #2
   28b14:	e0823003 	add	r3, r2, r3
   28b18:	e5933004 	ldr	r3, [r3, #4]
   28b1c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   28b20:	e1a00003 	mov	r0, r3
   28b24:	ebfffcc4 	bl	27e3c <AutoDriver::setMotorNumber(unsigned int)>
   28b28:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28b2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28b30:	e1a03103 	lsl	r3, r3, #2
   28b34:	e0823003 	add	r3, r2, r3
   28b38:	e5933004 	ldr	r3, [r3, #4]
   28b3c:	e1a00003 	mov	r0, r3
   28b40:	eb001855 	bl	2ec9c <L6470::Dump()>
   28b44:	e3a0002c 	mov	r0, #44	; 0x2c
   28b48:	ebffa17c 	bl	11140 <operator new(unsigned int)@plt>
   28b4c:	e1a03000 	mov	r3, r0
   28b50:	e1a04003 	mov	r4, r3
   28b54:	e51b308c 	ldr	r3, [fp, #-140]	; 0xffffff74
   28b58:	e3530000 	cmp	r3, #0
   28b5c:	0a000002 	beq	28b6c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x61c>
   28b60:	e51b308c 	ldr	r3, [fp, #-140]	; 0xffffff74
   28b64:	e5933008 	ldr	r3, [r3, #8]
   28b68:	ea000000 	b	28b70 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x620>
   28b6c:	e3a03000 	mov	r3, #0
   28b70:	e1a01003 	mov	r1, r3
   28b74:	e1a00004 	mov	r0, r4
   28b78:	eb000aea 	bl	2b728 <MotorParams::MotorParams(MotorParamsStore*)>
   28b7c:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28b80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28b84:	e2833008 	add	r3, r3, #8
   28b88:	e1a03103 	lsl	r3, r3, #2
   28b8c:	e0823003 	add	r3, r2, r3
   28b90:	e5834004 	str	r4, [r3, #4]
   28b94:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28b98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28b9c:	e2833008 	add	r3, r3, #8
   28ba0:	e1a03103 	lsl	r3, r3, #2
   28ba4:	e0823003 	add	r3, r2, r3
   28ba8:	e5933004 	ldr	r3, [r3, #4]
   28bac:	e3530000 	cmp	r3, #0
   28bb0:	1a000004 	bne	28bc8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x678>
   28bb4:	e59f38a0 	ldr	r3, [pc, #2208]	; 2945c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf0c>
   28bb8:	e59f28b8 	ldr	r2, [pc, #2232]	; 29478 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf28>
   28bbc:	e59f1878 	ldr	r1, [pc, #2168]	; 2943c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xeec>
   28bc0:	e59f08b4 	ldr	r0, [pc, #2228]	; 2947c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf2c>
   28bc4:	ebffa1d2 	bl	11314 <__assert_fail@plt>
   28bc8:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28bcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28bd0:	e2833008 	add	r3, r3, #8
   28bd4:	e1a03103 	lsl	r3, r3, #2
   28bd8:	e0823003 	add	r3, r2, r3
   28bdc:	e5933004 	ldr	r3, [r3, #4]
   28be0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   28be4:	e1a00003 	mov	r0, r3
   28be8:	eb000ade 	bl	2b768 <MotorParams::Load(unsigned int)>
   28bec:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28bf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28bf4:	e2833008 	add	r3, r3, #8
   28bf8:	e1a03103 	lsl	r3, r3, #2
   28bfc:	e0823003 	add	r3, r2, r3
   28c00:	e5933004 	ldr	r3, [r3, #4]
   28c04:	e1a00003 	mov	r0, r3
   28c08:	eb000bc9 	bl	2bb34 <MotorParams::Dump()>
   28c0c:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28c10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28c14:	e2833008 	add	r3, r3, #8
   28c18:	e1a03103 	lsl	r3, r3, #2
   28c1c:	e0823003 	add	r3, r2, r3
   28c20:	e5930004 	ldr	r0, [r3, #4]
   28c24:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28c28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28c2c:	e1a03103 	lsl	r3, r3, #2
   28c30:	e0823003 	add	r3, r2, r3
   28c34:	e5933004 	ldr	r3, [r3, #4]
   28c38:	e1a01003 	mov	r1, r3
   28c3c:	eb000bae 	bl	2bafc <MotorParams::Set(L6470*)>
   28c40:	e51b308c 	ldr	r3, [fp, #-140]	; 0xffffff74
   28c44:	e3530000 	cmp	r3, #0
   28c48:	0a000002 	beq	28c58 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x708>
   28c4c:	e51b308c 	ldr	r3, [fp, #-140]	; 0xffffff74
   28c50:	e593300c 	ldr	r3, [r3, #12]
   28c54:	ea000000 	b	28c5c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x70c>
   28c58:	e3a03000 	mov	r3, #0
   28c5c:	e24b2084 	sub	r2, fp, #132	; 0x84
   28c60:	e1a01003 	mov	r1, r3
   28c64:	e1a00002 	mov	r0, r2
   28c68:	eb000615 	bl	2a4c4 <L6470Params::L6470Params(L6470ParamsStore*)>
   28c6c:	e24b3084 	sub	r3, fp, #132	; 0x84
   28c70:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   28c74:	e1a00003 	mov	r0, r3
   28c78:	eb00062a 	bl	2a528 <L6470Params::Load(unsigned int)>
   28c7c:	e24b3084 	sub	r3, fp, #132	; 0x84
   28c80:	e1a00003 	mov	r0, r3
   28c84:	eb00089f 	bl	2af08 <L6470Params::Dump()>
   28c88:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28c8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28c90:	e1a03103 	lsl	r3, r3, #2
   28c94:	e0823003 	add	r3, r2, r3
   28c98:	e5932004 	ldr	r2, [r3, #4]
   28c9c:	e24b3084 	sub	r3, fp, #132	; 0x84
   28ca0:	e1a01002 	mov	r1, r2
   28ca4:	e1a00003 	mov	r0, r3
   28ca8:	eb00082b 	bl	2ad5c <L6470Params::Set(L6470*)>
   28cac:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28cb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28cb4:	e1a03103 	lsl	r3, r3, #2
   28cb8:	e0823003 	add	r3, r2, r3
   28cbc:	e5933004 	ldr	r3, [r3, #4]
   28cc0:	e1a00003 	mov	r0, r3
   28cc4:	eb0017f4 	bl	2ec9c <L6470::Dump()>
   28cc8:	e3a00018 	mov	r0, #24
   28ccc:	ebffa11b 	bl	11140 <operator new(unsigned int)@plt>
   28cd0:	e1a03000 	mov	r3, r0
   28cd4:	e1a04003 	mov	r4, r3
   28cd8:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28cdc:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
   28ce0:	e1a0e003 	mov	lr, r3
   28ce4:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28ce8:	e1d30bb4 	ldrh	r0, [r3, #180]	; 0xb4
   28cec:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28cf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28cf4:	e1a03103 	lsl	r3, r3, #2
   28cf8:	e0823003 	add	r3, r2, r3
   28cfc:	e593c004 	ldr	ip, [r3, #4]
   28d00:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28d04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28d08:	e2833008 	add	r3, r3, #8
   28d0c:	e1a03103 	lsl	r3, r3, #2
   28d10:	e0823003 	add	r3, r2, r3
   28d14:	e5932004 	ldr	r2, [r3, #4]
   28d18:	e51b1088 	ldr	r1, [fp, #-136]	; 0xffffff78
   28d1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28d20:	e2833010 	add	r3, r3, #16
   28d24:	e1a03103 	lsl	r3, r3, #2
   28d28:	e0813003 	add	r3, r1, r3
   28d2c:	e5933004 	ldr	r3, [r3, #4]
   28d30:	e58d3004 	str	r3, [sp, #4]
   28d34:	e58d2000 	str	r2, [sp]
   28d38:	e1a0300c 	mov	r3, ip
   28d3c:	e1a02000 	mov	r2, r0
   28d40:	e1a0100e 	mov	r1, lr
   28d44:	e1a00004 	mov	r0, r4
   28d48:	eb000be2 	bl	2bcd8 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)>
   28d4c:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28d50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28d54:	e2833018 	add	r3, r3, #24
   28d58:	e1a03103 	lsl	r3, r3, #2
   28d5c:	e0823003 	add	r3, r2, r3
   28d60:	e5834004 	str	r4, [r3, #4]
   28d64:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28d68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28d6c:	e2833018 	add	r3, r3, #24
   28d70:	e1a03103 	lsl	r3, r3, #2
   28d74:	e0823003 	add	r3, r2, r3
   28d78:	e5933004 	ldr	r3, [r3, #4]
   28d7c:	e3530000 	cmp	r3, #0
   28d80:	1a000004 	bne	28d98 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x848>
   28d84:	e59f36d0 	ldr	r3, [pc, #1744]	; 2945c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf0c>
   28d88:	e59f26f0 	ldr	r2, [pc, #1776]	; 29480 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf30>
   28d8c:	e59f16a8 	ldr	r1, [pc, #1704]	; 2943c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xeec>
   28d90:	e59f06ec 	ldr	r0, [pc, #1772]	; 29484 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf34>
   28d94:	ebffa15e 	bl	11314 <__assert_fail@plt>
   28d98:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28d9c:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
   28da0:	e59f26e0 	ldr	r2, [pc, #1760]	; 29488 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf38>
   28da4:	e1530002 	cmp	r3, r2
   28da8:	1a000018 	bne	28e10 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x8c0>
   28dac:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28db0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28db4:	e2833018 	add	r3, r3, #24
   28db8:	e1a03103 	lsl	r3, r3, #2
   28dbc:	e0823003 	add	r3, r2, r3
   28dc0:	e5933004 	ldr	r3, [r3, #4]
   28dc4:	e1a00003 	mov	r0, r3
   28dc8:	ebfffbfa 	bl	27db8 <L6470DmxModes::GetDmxStartAddress()>
   28dcc:	e1a03000 	mov	r3, r0
   28dd0:	e1a02003 	mov	r2, r3
   28dd4:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28dd8:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
   28ddc:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28de0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28de4:	e2833018 	add	r3, r3, #24
   28de8:	e1a03103 	lsl	r3, r3, #2
   28dec:	e0823003 	add	r3, r2, r3
   28df0:	e5933004 	ldr	r3, [r3, #4]
   28df4:	e1a00003 	mov	r0, r3
   28df8:	ebfffc05 	bl	27e14 <L6470DmxModes::GetDmxFootPrint()>
   28dfc:	e1a03000 	mov	r3, r0
   28e00:	e1a02003 	mov	r2, r3
   28e04:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28e08:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
   28e0c:	ea000035 	b	28ee8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x998>
   28e10:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28e14:	e1d32bb6 	ldrh	r2, [r3, #182]	; 0xb6
   28e18:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28e1c:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
   28e20:	e0823003 	add	r3, r2, r3
   28e24:	e6ff3073 	uxth	r3, r3
   28e28:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
   28e2c:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28e30:	e28340b6 	add	r4, r3, #182	; 0xb6
   28e34:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28e38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28e3c:	e2833018 	add	r3, r3, #24
   28e40:	e1a03103 	lsl	r3, r3, #2
   28e44:	e0823003 	add	r3, r2, r3
   28e48:	e5933004 	ldr	r3, [r3, #4]
   28e4c:	e1a00003 	mov	r0, r3
   28e50:	ebfffbd8 	bl	27db8 <L6470DmxModes::GetDmxStartAddress()>
   28e54:	e1a03000 	mov	r3, r0
   28e58:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
   28e5c:	e24b3034 	sub	r3, fp, #52	; 0x34
   28e60:	e1a01003 	mov	r1, r3
   28e64:	e1a00004 	mov	r0, r4
   28e68:	ebffbe02 	bl	18678 <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)>
   28e6c:	e1a03000 	mov	r3, r0
   28e70:	e1d320b0 	ldrh	r2, [r3]
   28e74:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28e78:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
   28e7c:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28e80:	e1d34bb4 	ldrh	r4, [r3, #180]	; 0xb4
   28e84:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28e88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28e8c:	e2833018 	add	r3, r3, #24
   28e90:	e1a03103 	lsl	r3, r3, #2
   28e94:	e0823003 	add	r3, r2, r3
   28e98:	e5933004 	ldr	r3, [r3, #4]
   28e9c:	e1a00003 	mov	r0, r3
   28ea0:	ebfffbdb 	bl	27e14 <L6470DmxModes::GetDmxFootPrint()>
   28ea4:	e1a03000 	mov	r3, r0
   28ea8:	e0843003 	add	r3, r4, r3
   28eac:	e6ff3073 	uxth	r3, r3
   28eb0:	e14b35b4 	strh	r3, [fp, #-84]	; 0xffffffac
   28eb4:	e24b2054 	sub	r2, fp, #84	; 0x54
   28eb8:	e24b3052 	sub	r3, fp, #82	; 0x52
   28ebc:	e1a01002 	mov	r1, r2
   28ec0:	e1a00003 	mov	r0, r3
   28ec4:	eb000312 	bl	29b14 <unsigned short const& std::max<unsigned short>(unsigned short const&, unsigned short const&)>
   28ec8:	e1a03000 	mov	r3, r0
   28ecc:	e1d320b0 	ldrh	r2, [r3]
   28ed0:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28ed4:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
   28ed8:	e0423003 	sub	r3, r2, r3
   28edc:	e6ff2073 	uxth	r2, r3
   28ee0:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28ee4:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
   28ee8:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28eec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28ef0:	e2833018 	add	r3, r3, #24
   28ef4:	e1a03103 	lsl	r3, r3, #2
   28ef8:	e0823003 	add	r3, r2, r3
   28efc:	e5933004 	ldr	r3, [r3, #4]
   28f00:	e1a00003 	mov	r0, r3
   28f04:	ebfffba1 	bl	27d90 <L6470DmxModes::GetMode()>
   28f08:	e1a03000 	mov	r3, r0
   28f0c:	e1a04003 	mov	r4, r3
   28f10:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28f14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28f18:	e2833018 	add	r3, r3, #24
   28f1c:	e1a03103 	lsl	r3, r3, #2
   28f20:	e0823003 	add	r3, r2, r3
   28f24:	e5933004 	ldr	r3, [r3, #4]
   28f28:	e1a00003 	mov	r0, r3
   28f2c:	ebfffba1 	bl	27db8 <L6470DmxModes::GetDmxStartAddress()>
   28f30:	e1a03000 	mov	r3, r0
   28f34:	e1a02003 	mov	r2, r3
   28f38:	e1a01004 	mov	r1, r4
   28f3c:	e59f0548 	ldr	r0, [pc, #1352]	; 2948c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf3c>
   28f40:	ebffa0ab 	bl	111f4 <printf@plt>
   28f44:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28f48:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
   28f4c:	e1a01003 	mov	r1, r3
   28f50:	e51b3088 	ldr	r3, [fp, #-136]	; 0xffffff78
   28f54:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
   28f58:	e1a02003 	mov	r2, r3
   28f5c:	e59f052c 	ldr	r0, [pc, #1324]	; 29490 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf40>
   28f60:	ebffa0a3 	bl	111f4 <printf@plt>
   28f64:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28f68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28f6c:	e2833018 	add	r3, r3, #24
   28f70:	e1a03103 	lsl	r3, r3, #2
   28f74:	e0823003 	add	r3, r2, r3
   28f78:	e5933004 	ldr	r3, [r3, #4]
   28f7c:	e1a00003 	mov	r0, r3
   28f80:	ebfffba3 	bl	27e14 <L6470DmxModes::GetDmxFootPrint()>
   28f84:	e1a03000 	mov	r3, r0
   28f88:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
   28f8c:	e24b3032 	sub	r3, fp, #50	; 0x32
   28f90:	e1a01003 	mov	r1, r3
   28f94:	e59f04f8 	ldr	r0, [pc, #1272]	; 29494 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf44>
   28f98:	ebffbdb6 	bl	18678 <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)>
   28f9c:	e1a03000 	mov	r3, r0
   28fa0:	e1d330b0 	ldrh	r3, [r3]
   28fa4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   28fa8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   28fac:	e1a01003 	mov	r1, r3
   28fb0:	e59f04e0 	ldr	r0, [pc, #1248]	; 29498 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf48>
   28fb4:	ebffa08e 	bl	111f4 <printf@plt>
   28fb8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   28fbc:	e373022e 	cmn	r3, #-536870910	; 0xe0000002
   28fc0:	8a000002 	bhi	28fd0 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xa80>
   28fc4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   28fc8:	e1a03103 	lsl	r3, r3, #2
   28fcc:	ea000000 	b	28fd4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xa84>
   28fd0:	e3e03000 	mvn	r3, #0
   28fd4:	e1a00003 	mov	r0, r3
   28fd8:	ebffa0b2 	bl	112a8 <operator new[](unsigned int)@plt>
   28fdc:	e1a03000 	mov	r3, r0
   28fe0:	e1a01003 	mov	r1, r3
   28fe4:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   28fe8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28fec:	e2833020 	add	r3, r3, #32
   28ff0:	e1a03103 	lsl	r3, r3, #2
   28ff4:	e0823003 	add	r3, r2, r3
   28ff8:	e5831004 	str	r1, [r3, #4]
   28ffc:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   29000:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29004:	e2833020 	add	r3, r3, #32
   29008:	e1a03103 	lsl	r3, r3, #2
   2900c:	e0823003 	add	r3, r2, r3
   29010:	e5933004 	ldr	r3, [r3, #4]
   29014:	e3530000 	cmp	r3, #0
   29018:	1a000004 	bne	29030 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xae0>
   2901c:	e59f3438 	ldr	r3, [pc, #1080]	; 2945c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf0c>
   29020:	e59f2474 	ldr	r2, [pc, #1140]	; 2949c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf4c>
   29024:	e59f1410 	ldr	r1, [pc, #1040]	; 2943c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xeec>
   29028:	e59f0470 	ldr	r0, [pc, #1136]	; 294a0 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf50>
   2902c:	ebffa0b8 	bl	11314 <__assert_fail@plt>
   29030:	e3a03000 	mov	r3, #0
   29034:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   29038:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2903c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   29040:	e1520003 	cmp	r2, r3
   29044:	2a00006d 	bcs	29200 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xcb0>
   29048:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   2904c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29050:	e2833010 	add	r3, r3, #16
   29054:	e1a03103 	lsl	r3, r3, #2
   29058:	e0823003 	add	r3, r2, r3
   2905c:	e5930004 	ldr	r0, [r3, #4]
   29060:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   29064:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29068:	e2833020 	add	r3, r3, #32
   2906c:	e1a03103 	lsl	r3, r3, #2
   29070:	e0823003 	add	r3, r2, r3
   29074:	e5932004 	ldr	r2, [r3, #4]
   29078:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2907c:	e1a03103 	lsl	r3, r3, #2
   29080:	e0823003 	add	r3, r2, r3
   29084:	e1a02003 	mov	r2, r3
   29088:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2908c:	eb0004a0 	bl	2a314 <ModeParams::GetSlotInfo(unsigned int, lightset::SlotInfo&)>
   29090:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   29094:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29098:	e2833020 	add	r3, r3, #32
   2909c:	e1a03103 	lsl	r3, r3, #2
   290a0:	e0823003 	add	r3, r2, r3
   290a4:	e5932004 	ldr	r2, [r3, #4]
   290a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   290ac:	e1a03103 	lsl	r3, r3, #2
   290b0:	e0823003 	add	r3, r2, r3
   290b4:	e5d33002 	ldrb	r3, [r3, #2]
   290b8:	e1a01003 	mov	r1, r3
   290bc:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   290c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   290c4:	e2833020 	add	r3, r3, #32
   290c8:	e1a03103 	lsl	r3, r3, #2
   290cc:	e0823003 	add	r3, r2, r3
   290d0:	e5932004 	ldr	r2, [r3, #4]
   290d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   290d8:	e1a03103 	lsl	r3, r3, #2
   290dc:	e0823003 	add	r3, r2, r3
   290e0:	e1d330b0 	ldrh	r3, [r3]
   290e4:	e1a02001 	mov	r2, r1
   290e8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   290ec:	e59f03b0 	ldr	r0, [pc, #944]	; 294a4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf54>
   290f0:	ebffa03f 	bl	111f4 <printf@plt>
   290f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   290f8:	e2833001 	add	r3, r3, #1
   290fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   29100:	eaffffcc 	b	29038 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xae8>
   29104:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   29108:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2910c:	e1a03103 	lsl	r3, r3, #2
   29110:	e0823003 	add	r3, r2, r3
   29114:	e5933004 	ldr	r3, [r3, #4]
   29118:	e3530000 	cmp	r3, #0
   2911c:	0a00000e 	beq	2915c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xc0c>
   29120:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   29124:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29128:	e1a03103 	lsl	r3, r3, #2
   2912c:	e0823003 	add	r3, r2, r3
   29130:	e5931004 	ldr	r1, [r3, #4]
   29134:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   29138:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2913c:	e1a03103 	lsl	r3, r3, #2
   29140:	e0823003 	add	r3, r2, r3
   29144:	e5933004 	ldr	r3, [r3, #4]
   29148:	e5933000 	ldr	r3, [r3]
   2914c:	e2833004 	add	r3, r3, #4
   29150:	e5933000 	ldr	r3, [r3]
   29154:	e1a00001 	mov	r0, r1
   29158:	e12fff33 	blx	r3
   2915c:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   29160:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29164:	e1a03103 	lsl	r3, r3, #2
   29168:	e0823003 	add	r3, r2, r3
   2916c:	e3a02000 	mov	r2, #0
   29170:	e5832004 	str	r2, [r3, #4]
   29174:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   29178:	e59f0328 	ldr	r0, [pc, #808]	; 294a8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf58>
   2917c:	ebffa01c 	bl	111f4 <printf@plt>
   29180:	ea00001e 	b	29200 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xcb0>
   29184:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   29188:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2918c:	e1a03103 	lsl	r3, r3, #2
   29190:	e0823003 	add	r3, r2, r3
   29194:	e5933004 	ldr	r3, [r3, #4]
   29198:	e3530000 	cmp	r3, #0
   2919c:	0a00000e 	beq	291dc <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xc8c>
   291a0:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   291a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   291a8:	e1a03103 	lsl	r3, r3, #2
   291ac:	e0823003 	add	r3, r2, r3
   291b0:	e5931004 	ldr	r1, [r3, #4]
   291b4:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   291b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   291bc:	e1a03103 	lsl	r3, r3, #2
   291c0:	e0823003 	add	r3, r2, r3
   291c4:	e5933004 	ldr	r3, [r3, #4]
   291c8:	e5933000 	ldr	r3, [r3]
   291cc:	e2833004 	add	r3, r3, #4
   291d0:	e5933000 	ldr	r3, [r3]
   291d4:	e1a00001 	mov	r0, r1
   291d8:	e12fff33 	blx	r3
   291dc:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   291e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   291e4:	e1a03103 	lsl	r3, r3, #2
   291e8:	e0823003 	add	r3, r2, r3
   291ec:	e3a02000 	mov	r2, #0
   291f0:	e5832004 	str	r2, [r3, #4]
   291f4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   291f8:	e59f02ac 	ldr	r0, [pc, #684]	; 294ac <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf5c>
   291fc:	ebff9ffc 	bl	111f4 <printf@plt>
   29200:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   29204:	e59f02a4 	ldr	r0, [pc, #676]	; 294b0 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf60>
   29208:	ebff9ff9 	bl	111f4 <printf@plt>
   2920c:	ea000002 	b	2921c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xccc>
   29210:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   29214:	e59f0298 	ldr	r0, [pc, #664]	; 294b4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf64>
   29218:	ebff9ff5 	bl	111f4 <printf@plt>
   2921c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29220:	e2833001 	add	r3, r3, #1
   29224:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   29228:	eafffdad 	b	288e4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0x394>
   2922c:	e59f0284 	ldr	r0, [pc, #644]	; 294b8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf68>
   29230:	ebff9ffb 	bl	11224 <puts@plt>
   29234:	e3a03000 	mov	r3, #0
   29238:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   2923c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29240:	e3530007 	cmp	r3, #7
   29244:	8a000016 	bhi	292a4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xd54>
   29248:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   2924c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29250:	e2833018 	add	r3, r3, #24
   29254:	e1a03103 	lsl	r3, r3, #2
   29258:	e0823003 	add	r3, r2, r3
   2925c:	e5933004 	ldr	r3, [r3, #4]
   29260:	e3530000 	cmp	r3, #0
   29264:	0a00000a 	beq	29294 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xd44>
   29268:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   2926c:	e59f0248 	ldr	r0, [pc, #584]	; 294bc <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf6c>
   29270:	ebff9fdf 	bl	111f4 <printf@plt>
   29274:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   29278:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2927c:	e2833018 	add	r3, r3, #24
   29280:	e1a03103 	lsl	r3, r3, #2
   29284:	e0823003 	add	r3, r2, r3
   29288:	e5933004 	ldr	r3, [r3, #4]
   2928c:	e1a00003 	mov	r0, r3
   29290:	eb000b74 	bl	2c068 <L6470DmxModes::InitSwitch()>
   29294:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29298:	e2833001 	add	r3, r3, #1
   2929c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   292a0:	eaffffe5 	b	2923c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xcec>
   292a4:	e59f0214 	ldr	r0, [pc, #532]	; 294c0 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf70>
   292a8:	ebff9fdd 	bl	11224 <puts@plt>
   292ac:	e3a03000 	mov	r3, #0
   292b0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   292b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   292b8:	e3530007 	cmp	r3, #7
   292bc:	8a000037 	bhi	293a0 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe50>
   292c0:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   292c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   292c8:	e1a03103 	lsl	r3, r3, #2
   292cc:	e0823003 	add	r3, r2, r3
   292d0:	e5933004 	ldr	r3, [r3, #4]
   292d4:	e3530000 	cmp	r3, #0
   292d8:	0a00002c 	beq	29390 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe40>
   292dc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   292e0:	e59f01d4 	ldr	r0, [pc, #468]	; 294bc <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf6c>
   292e4:	ebff9fc2 	bl	111f4 <printf@plt>
   292e8:	ebffa0c4 	bl	11600 <Hardware::Get()>
   292ec:	e1a03000 	mov	r3, r0
   292f0:	e1a00003 	mov	r0, r3
   292f4:	eb005bf2 	bl	402c4 <Hardware::Millis()>
   292f8:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   292fc:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   29300:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29304:	e1a03103 	lsl	r3, r3, #2
   29308:	e0823003 	add	r3, r2, r3
   2930c:	e5931004 	ldr	r1, [r3, #4]
   29310:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   29314:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29318:	e1a03103 	lsl	r3, r3, #2
   2931c:	e0823003 	add	r3, r2, r3
   29320:	e5933004 	ldr	r3, [r3, #4]
   29324:	e5933000 	ldr	r3, [r3]
   29328:	e2833008 	add	r3, r3, #8
   2932c:	e5933000 	ldr	r3, [r3]
   29330:	e1a00001 	mov	r0, r1
   29334:	e12fff33 	blx	r3
   29338:	e1a03000 	mov	r3, r0
   2933c:	e3530000 	cmp	r3, #0
   29340:	13a03001 	movne	r3, #1
   29344:	03a03000 	moveq	r3, #0
   29348:	e6ef3073 	uxtb	r3, r3
   2934c:	e3530000 	cmp	r3, #0
   29350:	0a00000e 	beq	29390 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe40>
   29354:	ebffa0a9 	bl	11600 <Hardware::Get()>
   29358:	e1a03000 	mov	r3, r0
   2935c:	e1a00003 	mov	r0, r3
   29360:	eb005bd7 	bl	402c4 <Hardware::Millis()>
   29364:	e1a02000 	mov	r2, r0
   29368:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2936c:	e0423003 	sub	r3, r2, r3
   29370:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   29374:	83a03001 	movhi	r3, #1
   29378:	93a03000 	movls	r3, #0
   2937c:	e6ef3073 	uxtb	r3, r3
   29380:	e3530000 	cmp	r3, #0
   29384:	0affffdc 	beq	292fc <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xdac>
   29388:	e59f0134 	ldr	r0, [pc, #308]	; 294c4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf74>
   2938c:	ebff9fa4 	bl	11224 <puts@plt>
   29390:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29394:	e2833001 	add	r3, r3, #1
   29398:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   2939c:	eaffffc4 	b	292b4 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xd64>
   293a0:	e59f0120 	ldr	r0, [pc, #288]	; 294c8 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf78>
   293a4:	ebff9f9e 	bl	11224 <puts@plt>
   293a8:	e3a03000 	mov	r3, #0
   293ac:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   293b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   293b4:	e3530007 	cmp	r3, #7
   293b8:	8a000016 	bhi	29418 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xec8>
   293bc:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   293c0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   293c4:	e2833018 	add	r3, r3, #24
   293c8:	e1a03103 	lsl	r3, r3, #2
   293cc:	e0823003 	add	r3, r2, r3
   293d0:	e5933004 	ldr	r3, [r3, #4]
   293d4:	e3530000 	cmp	r3, #0
   293d8:	0a00000a 	beq	29408 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xeb8>
   293dc:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   293e0:	e59f00d4 	ldr	r0, [pc, #212]	; 294bc <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf6c>
   293e4:	ebff9f82 	bl	111f4 <printf@plt>
   293e8:	e51b2088 	ldr	r2, [fp, #-136]	; 0xffffff78
   293ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   293f0:	e2833018 	add	r3, r3, #24
   293f4:	e1a03103 	lsl	r3, r3, #2
   293f8:	e0823003 	add	r3, r2, r3
   293fc:	e5933004 	ldr	r3, [r3, #4]
   29400:	e1a00003 	mov	r0, r3
   29404:	eb000b27 	bl	2c0a8 <L6470DmxModes::InitPos()>
   29408:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2940c:	e2833001 	add	r3, r3, #1
   29410:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   29414:	eaffffe5 	b	293b0 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xe60>
   29418:	e59f30ac 	ldr	r3, [pc, #172]	; 294cc <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf7c>
   2941c:	e59f2014 	ldr	r2, [pc, #20]	; 29438 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xee8>
   29420:	e59f1014 	ldr	r1, [pc, #20]	; 2943c <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xeec>
   29424:	e59f00a4 	ldr	r0, [pc, #164]	; 294d0 <SparkFunDmx::ReadConfigFiles(TSparkFunStores*)+0xf80>
   29428:	ebff9f71 	bl	111f4 <printf@plt>
   2942c:	e1a00000 	nop			; (mov r0, r0)
   29430:	e24bd008 	sub	sp, fp, #8
   29434:	e8bd8810 	pop	{r4, fp, pc}
   29438:	000477fc 	.word	0x000477fc
   2943c:	00047338 	.word	0x00047338
   29440:	0004734c 	.word	0x0004734c
   29444:	00002710 	.word	0x00002710
   29448:	0004736c 	.word	0x0004736c
   2944c:	00047384 	.word	0x00047384
   29450:	00047410 	.word	0x00047410
   29454:	0004743c 	.word	0x0004743c
   29458:	0004744c 	.word	0x0004744c
   2945c:	0004780c 	.word	0x0004780c
   29460:	0004745c 	.word	0x0004745c
   29464:	00047478 	.word	0x00047478
   29468:	00047498 	.word	0x00047498
   2946c:	000474bc 	.word	0x000474bc
   29470:	000474d8 	.word	0x000474d8
   29474:	000474f8 	.word	0x000474f8
   29478:	00000101 	.word	0x00000101
   2947c:	00047510 	.word	0x00047510
   29480:	0000010e 	.word	0x0000010e
   29484:	00047530 	.word	0x00047530
   29488:	0000ffff 	.word	0x0000ffff
   2948c:	00047550 	.word	0x00047550
   29490:	00047578 	.word	0x00047578
   29494:	00047334 	.word	0x00047334
   29498:	000475a0 	.word	0x000475a0
   2949c:	00000123 	.word	0x00000123
   294a0:	000475b4 	.word	0x000475b4
   294a4:	000475d0 	.word	0x000475d0
   294a8:	000475e4 	.word	0x000475e4
   294ac:	0004762c 	.word	0x0004762c
   294b0:	00047664 	.word	0x00047664
   294b4:	00047688 	.word	0x00047688
   294b8:	0004769c 	.word	0x0004769c
   294bc:	000476ac 	.word	0x000476ac
   294c0:	000476b8 	.word	0x000476b8
   294c4:	000476c4 	.word	0x000476c4
   294c8:	000476d0 	.word	0x000476d0
   294cc:	0000015b 	.word	0x0000015b
   294d0:	0004735c 	.word	0x0004735c

000294d4 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
   294d4:	e92d4800 	push	{fp, lr}
   294d8:	e28db004 	add	fp, sp, #4
   294dc:	e24dd028 	sub	sp, sp, #40	; 0x28
   294e0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   294e4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   294e8:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   294ec:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   294f0:	e59f3234 	ldr	r3, [pc, #564]	; 2972c <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x258>
   294f4:	e59f2234 	ldr	r2, [pc, #564]	; 29730 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x25c>
   294f8:	e59f1234 	ldr	r1, [pc, #564]	; 29734 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x260>
   294fc:	e59f0234 	ldr	r0, [pc, #564]	; 29738 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x264>
   29500:	ebff9f3b 	bl	111f4 <printf@plt>
   29504:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   29508:	e3530000 	cmp	r3, #0
   2950c:	1a000004 	bne	29524 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x50>
   29510:	e59f3224 	ldr	r3, [pc, #548]	; 2973c <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x268>
   29514:	e3a02e16 	mov	r2, #352	; 0x160
   29518:	e59f1214 	ldr	r1, [pc, #532]	; 29734 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x260>
   2951c:	e59f021c 	ldr	r0, [pc, #540]	; 29740 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x26c>
   29520:	ebff9f7b 	bl	11314 <__assert_fail@plt>
   29524:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   29528:	e3530c02 	cmp	r3, #512	; 0x200
   2952c:	9a000004 	bls	29544 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x70>
   29530:	e59f3204 	ldr	r3, [pc, #516]	; 2973c <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x268>
   29534:	e59f2208 	ldr	r2, [pc, #520]	; 29744 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x270>
   29538:	e59f11f4 	ldr	r1, [pc, #500]	; 29734 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x260>
   2953c:	e59f0204 	ldr	r0, [pc, #516]	; 29748 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x274>
   29540:	ebff9f73 	bl	11314 <__assert_fail@plt>
   29544:	e3a03000 	mov	r3, #0
   29548:	e50b3008 	str	r3, [fp, #-8]
   2954c:	e51b3008 	ldr	r3, [fp, #-8]
   29550:	e3530007 	cmp	r3, #7
   29554:	8a000038 	bhi	2963c <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x168>
   29558:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2955c:	e51b3008 	ldr	r3, [fp, #-8]
   29560:	e2833018 	add	r3, r3, #24
   29564:	e1a03103 	lsl	r3, r3, #2
   29568:	e0823003 	add	r3, r2, r3
   2956c:	e5933004 	ldr	r3, [r3, #4]
   29570:	e3530000 	cmp	r3, #0
   29574:	0a00001f 	beq	295f8 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x124>
   29578:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2957c:	e51b3008 	ldr	r3, [fp, #-8]
   29580:	e2833018 	add	r3, r3, #24
   29584:	e1a03103 	lsl	r3, r3, #2
   29588:	e0823003 	add	r3, r2, r3
   2958c:	e5933004 	ldr	r3, [r3, #4]
   29590:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   29594:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   29598:	e1a00003 	mov	r0, r3
   2959c:	eb000b83 	bl	2c3b0 <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)>
   295a0:	e1a03000 	mov	r3, r0
   295a4:	e1a01003 	mov	r1, r3
   295a8:	e24b2018 	sub	r2, fp, #24
   295ac:	e51b3008 	ldr	r3, [fp, #-8]
   295b0:	e0823003 	add	r3, r2, r3
   295b4:	e1a02001 	mov	r2, r1
   295b8:	e5c32000 	strb	r2, [r3]
   295bc:	e24b2018 	sub	r2, fp, #24
   295c0:	e51b3008 	ldr	r3, [fp, #-8]
   295c4:	e0823003 	add	r3, r2, r3
   295c8:	e5d33000 	ldrb	r3, [r3]
   295cc:	e3530000 	cmp	r3, #0
   295d0:	0a00000d 	beq	2960c <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x138>
   295d4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   295d8:	e51b3008 	ldr	r3, [fp, #-8]
   295dc:	e2833018 	add	r3, r3, #24
   295e0:	e1a03103 	lsl	r3, r3, #2
   295e4:	e0823003 	add	r3, r2, r3
   295e8:	e5933004 	ldr	r3, [r3, #4]
   295ec:	e1a00003 	mov	r0, r3
   295f0:	eb000b16 	bl	2c250 <L6470DmxModes::HandleBusy()>
   295f4:	ea000004 	b	2960c <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x138>
   295f8:	e24b2018 	sub	r2, fp, #24
   295fc:	e51b3008 	ldr	r3, [fp, #-8]
   29600:	e0823003 	add	r3, r2, r3
   29604:	e3a02000 	mov	r2, #0
   29608:	e5c32000 	strb	r2, [r3]
   2960c:	e24b2018 	sub	r2, fp, #24
   29610:	e51b3008 	ldr	r3, [fp, #-8]
   29614:	e0823003 	add	r3, r2, r3
   29618:	e5d33000 	ldrb	r3, [r3]
   2961c:	e1a02003 	mov	r2, r3
   29620:	e51b1008 	ldr	r1, [fp, #-8]
   29624:	e59f0120 	ldr	r0, [pc, #288]	; 2974c <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x278>
   29628:	ebff9ef1 	bl	111f4 <printf@plt>
   2962c:	e51b3008 	ldr	r3, [fp, #-8]
   29630:	e2833001 	add	r3, r3, #1
   29634:	e50b3008 	str	r3, [fp, #-8]
   29638:	eaffffc3 	b	2954c <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x78>
   2963c:	e3a03000 	mov	r3, #0
   29640:	e50b300c 	str	r3, [fp, #-12]
   29644:	e51b300c 	ldr	r3, [fp, #-12]
   29648:	e3530007 	cmp	r3, #7
   2964c:	8a000015 	bhi	296a8 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x1d4>
   29650:	e24b2018 	sub	r2, fp, #24
   29654:	e51b300c 	ldr	r3, [fp, #-12]
   29658:	e0823003 	add	r3, r2, r3
   2965c:	e5d33000 	ldrb	r3, [r3]
   29660:	e3530000 	cmp	r3, #0
   29664:	0a00000b 	beq	29698 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x1c4>
   29668:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2966c:	e51b300c 	ldr	r3, [fp, #-12]
   29670:	e2833018 	add	r3, r3, #24
   29674:	e1a03103 	lsl	r3, r3, #2
   29678:	e0823003 	add	r3, r2, r3
   2967c:	e5933004 	ldr	r3, [r3, #4]
   29680:	e1a00003 	mov	r0, r3
   29684:	eb000b01 	bl	2c290 <L6470DmxModes::BusyCheck()>
   29688:	e1a03000 	mov	r3, r0
   2968c:	e3530000 	cmp	r3, #0
   29690:	0a000000 	beq	29698 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x1c4>
   29694:	eafffff3 	b	29668 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x194>
   29698:	e51b300c 	ldr	r3, [fp, #-12]
   2969c:	e2833001 	add	r3, r3, #1
   296a0:	e50b300c 	str	r3, [fp, #-12]
   296a4:	eaffffe6 	b	29644 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x170>
   296a8:	e3a03000 	mov	r3, #0
   296ac:	e50b3010 	str	r3, [fp, #-16]
   296b0:	e51b3010 	ldr	r3, [fp, #-16]
   296b4:	e3530007 	cmp	r3, #7
   296b8:	ca000013 	bgt	2970c <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x238>
   296bc:	e24b2018 	sub	r2, fp, #24
   296c0:	e51b3010 	ldr	r3, [fp, #-16]
   296c4:	e0823003 	add	r3, r2, r3
   296c8:	e5d33000 	ldrb	r3, [r3]
   296cc:	e3530000 	cmp	r3, #0
   296d0:	0a000009 	beq	296fc <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x228>
   296d4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   296d8:	e51b3010 	ldr	r3, [fp, #-16]
   296dc:	e2833018 	add	r3, r3, #24
   296e0:	e1a03103 	lsl	r3, r3, #2
   296e4:	e0823003 	add	r3, r2, r3
   296e8:	e5933004 	ldr	r3, [r3, #4]
   296ec:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   296f0:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   296f4:	e1a00003 	mov	r0, r3
   296f8:	eb000b52 	bl	2c448 <L6470DmxModes::DmxData(unsigned char const*, unsigned int)>
   296fc:	e51b3010 	ldr	r3, [fp, #-16]
   29700:	e2833001 	add	r3, r3, #1
   29704:	e50b3010 	str	r3, [fp, #-16]
   29708:	eaffffe8 	b	296b0 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x1dc>
   2970c:	e59f303c 	ldr	r3, [pc, #60]	; 29750 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x27c>
   29710:	e59f2018 	ldr	r2, [pc, #24]	; 29730 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x25c>
   29714:	e59f1018 	ldr	r1, [pc, #24]	; 29734 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x260>
   29718:	e59f0034 	ldr	r0, [pc, #52]	; 29754 <SparkFunDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x280>
   2971c:	ebff9eb4 	bl	111f4 <printf@plt>
   29720:	e1a00000 	nop			; (mov r0, r0)
   29724:	e24bd004 	sub	sp, fp, #4
   29728:	e8bd8800 	pop	{fp, pc}
   2972c:	0000015f 	.word	0x0000015f
   29730:	00047840 	.word	0x00047840
   29734:	00047338 	.word	0x00047338
   29738:	0004734c 	.word	0x0004734c
   2973c:	00047848 	.word	0x00047848
   29740:	000476dc 	.word	0x000476dc
   29744:	00000161 	.word	0x00000161
   29748:	000476f0 	.word	0x000476f0
   2974c:	00047718 	.word	0x00047718
   29750:	00000181 	.word	0x00000181
   29754:	0004735c 	.word	0x0004735c

00029758 <SparkFunDmx::SetDmxStartAddress(unsigned short)>:
   29758:	e92d4800 	push	{fp, lr}
   2975c:	e28db004 	add	fp, sp, #4
   29760:	e24dd010 	sub	sp, sp, #16
   29764:	e50b0010 	str	r0, [fp, #-16]
   29768:	e1a03001 	mov	r3, r1
   2976c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   29770:	e59f3158 	ldr	r3, [pc, #344]	; 298d0 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x178>
   29774:	e59f2158 	ldr	r2, [pc, #344]	; 298d4 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x17c>
   29778:	e59f1158 	ldr	r1, [pc, #344]	; 298d8 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x180>
   2977c:	e59f0158 	ldr	r0, [pc, #344]	; 298dc <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x184>
   29780:	ebff9e9b 	bl	111f4 <printf@plt>
   29784:	e51b3010 	ldr	r3, [fp, #-16]
   29788:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
   2978c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
   29790:	e1520003 	cmp	r2, r3
   29794:	1a000001 	bne	297a0 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x48>
   29798:	e3a03001 	mov	r3, #1
   2979c:	ea000048 	b	298c4 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x16c>
   297a0:	e3a03000 	mov	r3, #0
   297a4:	e50b3008 	str	r3, [fp, #-8]
   297a8:	e51b3008 	ldr	r3, [fp, #-8]
   297ac:	e3530007 	cmp	r3, #7
   297b0:	8a00003a 	bhi	298a0 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x148>
   297b4:	e51b2010 	ldr	r2, [fp, #-16]
   297b8:	e51b3008 	ldr	r3, [fp, #-8]
   297bc:	e2833018 	add	r3, r3, #24
   297c0:	e1a03103 	lsl	r3, r3, #2
   297c4:	e0823003 	add	r3, r2, r3
   297c8:	e5933004 	ldr	r3, [r3, #4]
   297cc:	e3530000 	cmp	r3, #0
   297d0:	0a00002e 	beq	29890 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x138>
   297d4:	e51b2010 	ldr	r2, [fp, #-16]
   297d8:	e51b3008 	ldr	r3, [fp, #-8]
   297dc:	e2833018 	add	r3, r3, #24
   297e0:	e1a03103 	lsl	r3, r3, #2
   297e4:	e0823003 	add	r3, r2, r3
   297e8:	e5933004 	ldr	r3, [r3, #4]
   297ec:	e1a00003 	mov	r0, r3
   297f0:	ebfff970 	bl	27db8 <L6470DmxModes::GetDmxStartAddress()>
   297f4:	e1a03000 	mov	r3, r0
   297f8:	e14b30ba 	strh	r3, [fp, #-10]
   297fc:	e51b3010 	ldr	r3, [fp, #-16]
   29800:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
   29804:	e15b20ba 	ldrh	r2, [fp, #-10]
   29808:	e0423003 	sub	r3, r2, r3
   2980c:	e6ff2073 	uxth	r2, r3
   29810:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   29814:	e0823003 	add	r3, r2, r3
   29818:	e14b30bc 	strh	r3, [fp, #-12]
   2981c:	e15b20ba 	ldrh	r2, [fp, #-10]
   29820:	e15b30bc 	ldrh	r3, [fp, #-12]
   29824:	e51b1008 	ldr	r1, [fp, #-8]
   29828:	e59f00b0 	ldr	r0, [pc, #176]	; 298e0 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x188>
   2982c:	ebff9e70 	bl	111f4 <printf@plt>
   29830:	e51b2010 	ldr	r2, [fp, #-16]
   29834:	e51b3008 	ldr	r3, [fp, #-8]
   29838:	e2833018 	add	r3, r3, #24
   2983c:	e1a03103 	lsl	r3, r3, #2
   29840:	e0823003 	add	r3, r2, r3
   29844:	e5933004 	ldr	r3, [r3, #4]
   29848:	e15b20bc 	ldrh	r2, [fp, #-12]
   2984c:	e1a01002 	mov	r1, r2
   29850:	e1a00003 	mov	r0, r3
   29854:	ebfff961 	bl	27de0 <L6470DmxModes::SetDmxStartAddress(unsigned short)>
   29858:	e51b3010 	ldr	r3, [fp, #-16]
   2985c:	e59330bc 	ldr	r3, [r3, #188]	; 0xbc
   29860:	e3530000 	cmp	r3, #0
   29864:	0a000009 	beq	29890 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x138>
   29868:	e51b3010 	ldr	r3, [fp, #-16]
   2986c:	e59300bc 	ldr	r0, [r3, #188]	; 0xbc
   29870:	e51b3010 	ldr	r3, [fp, #-16]
   29874:	e59330bc 	ldr	r3, [r3, #188]	; 0xbc
   29878:	e5933000 	ldr	r3, [r3]
   2987c:	e2833008 	add	r3, r3, #8
   29880:	e5933000 	ldr	r3, [r3]
   29884:	e15b20bc 	ldrh	r2, [fp, #-12]
   29888:	e51b1008 	ldr	r1, [fp, #-8]
   2988c:	e12fff33 	blx	r3
   29890:	e51b3008 	ldr	r3, [fp, #-8]
   29894:	e2833001 	add	r3, r3, #1
   29898:	e50b3008 	str	r3, [fp, #-8]
   2989c:	eaffffc1 	b	297a8 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x50>
   298a0:	e51b3010 	ldr	r3, [fp, #-16]
   298a4:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
   298a8:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
   298ac:	e3a03f67 	mov	r3, #412	; 0x19c
   298b0:	e59f201c 	ldr	r2, [pc, #28]	; 298d4 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x17c>
   298b4:	e59f101c 	ldr	r1, [pc, #28]	; 298d8 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x180>
   298b8:	e59f0024 	ldr	r0, [pc, #36]	; 298e4 <SparkFunDmx::SetDmxStartAddress(unsigned short)+0x18c>
   298bc:	ebff9e4c 	bl	111f4 <printf@plt>
   298c0:	e3a03001 	mov	r3, #1
   298c4:	e1a00003 	mov	r0, r3
   298c8:	e24bd004 	sub	sp, fp, #4
   298cc:	e8bd8800 	pop	{fp, pc}
   298d0:	00000185 	.word	0x00000185
   298d4:	00047890 	.word	0x00047890
   298d8:	00047338 	.word	0x00047338
   298dc:	0004734c 	.word	0x0004734c
   298e0:	00047734 	.word	0x00047734
   298e4:	0004735c 	.word	0x0004735c

000298e8 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
   298e8:	e92d4810 	push	{r4, fp, lr}
   298ec:	e28db008 	add	fp, sp, #8
   298f0:	e24dd01c 	sub	sp, sp, #28
   298f4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   298f8:	e1a03001 	mov	r3, r1
   298fc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   29900:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
   29904:	e59f31f0 	ldr	r3, [pc, #496]	; 29afc <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x214>
   29908:	e59f21f0 	ldr	r2, [pc, #496]	; 29b00 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x218>
   2990c:	e59f11f0 	ldr	r1, [pc, #496]	; 29b04 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x21c>
   29910:	e59f01f0 	ldr	r0, [pc, #496]	; 29b08 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x220>
   29914:	ebff9e36 	bl	111f4 <printf@plt>
   29918:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2991c:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
   29920:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
   29924:	e1520003 	cmp	r2, r3
   29928:	9a000006 	bls	29948 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x60>
   2992c:	e3a03f69 	mov	r3, #420	; 0x1a4
   29930:	e59f21c8 	ldr	r2, [pc, #456]	; 29b00 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x218>
   29934:	e59f11c8 	ldr	r1, [pc, #456]	; 29b04 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x21c>
   29938:	e59f01cc 	ldr	r0, [pc, #460]	; 29b0c <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x224>
   2993c:	ebff9e2c 	bl	111f4 <printf@plt>
   29940:	e3a03000 	mov	r3, #0
   29944:	ea000069 	b	29af0 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x208>
   29948:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2994c:	e1d32bb6 	ldrh	r2, [r3, #182]	; 0xb6
   29950:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
   29954:	e0823003 	add	r3, r2, r3
   29958:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   2995c:	e3a03000 	mov	r3, #0
   29960:	e50b3010 	str	r3, [fp, #-16]
   29964:	e51b3010 	ldr	r3, [fp, #-16]
   29968:	e3530007 	cmp	r3, #7
   2996c:	8a00005e 	bhi	29aec <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x204>
   29970:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   29974:	e51b3010 	ldr	r3, [fp, #-16]
   29978:	e2833018 	add	r3, r3, #24
   2997c:	e1a03103 	lsl	r3, r3, #2
   29980:	e0823003 	add	r3, r2, r3
   29984:	e5933004 	ldr	r3, [r3, #4]
   29988:	e3530000 	cmp	r3, #0
   2998c:	0a000052 	beq	29adc <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x1f4>
   29990:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   29994:	e51b3010 	ldr	r3, [fp, #-16]
   29998:	e2833020 	add	r3, r3, #32
   2999c:	e1a03103 	lsl	r3, r3, #2
   299a0:	e0823003 	add	r3, r2, r3
   299a4:	e5933004 	ldr	r3, [r3, #4]
   299a8:	e3530000 	cmp	r3, #0
   299ac:	0a00004a 	beq	29adc <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x1f4>
   299b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   299b4:	e51b3010 	ldr	r3, [fp, #-16]
   299b8:	e2833018 	add	r3, r3, #24
   299bc:	e1a03103 	lsl	r3, r3, #2
   299c0:	e0823003 	add	r3, r2, r3
   299c4:	e5933004 	ldr	r3, [r3, #4]
   299c8:	e1a00003 	mov	r0, r3
   299cc:	ebfff8f9 	bl	27db8 <L6470DmxModes::GetDmxStartAddress()>
   299d0:	e1a03000 	mov	r3, r0
   299d4:	e1a02003 	mov	r2, r3
   299d8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   299dc:	e0433002 	sub	r3, r3, r2
   299e0:	e6ff3073 	uxth	r3, r3
   299e4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
   299e8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   299ec:	e51b3010 	ldr	r3, [fp, #-16]
   299f0:	e2833018 	add	r3, r3, #24
   299f4:	e1a03103 	lsl	r3, r3, #2
   299f8:	e0823003 	add	r3, r2, r3
   299fc:	e5933004 	ldr	r3, [r3, #4]
   29a00:	e1a00003 	mov	r0, r3
   29a04:	ebfff8eb 	bl	27db8 <L6470DmxModes::GetDmxStartAddress()>
   29a08:	e1a03000 	mov	r3, r0
   29a0c:	e1a02003 	mov	r2, r3
   29a10:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   29a14:	e1530002 	cmp	r3, r2
   29a18:	3a00000d 	bcc	29a54 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x16c>
   29a1c:	e15b41f4 	ldrsh	r4, [fp, #-20]	; 0xffffffec
   29a20:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   29a24:	e51b3010 	ldr	r3, [fp, #-16]
   29a28:	e2833018 	add	r3, r3, #24
   29a2c:	e1a03103 	lsl	r3, r3, #2
   29a30:	e0823003 	add	r3, r2, r3
   29a34:	e5933004 	ldr	r3, [r3, #4]
   29a38:	e1a00003 	mov	r0, r3
   29a3c:	ebfff8f4 	bl	27e14 <L6470DmxModes::GetDmxFootPrint()>
   29a40:	e1a03000 	mov	r3, r0
   29a44:	e1540003 	cmp	r4, r3
   29a48:	aa000001 	bge	29a54 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x16c>
   29a4c:	e3a03001 	mov	r3, #1
   29a50:	ea000000 	b	29a58 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x170>
   29a54:	e3a03000 	mov	r3, #0
   29a58:	e3530000 	cmp	r3, #0
   29a5c:	0a00001e 	beq	29adc <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x1f4>
   29a60:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   29a64:	e51b3010 	ldr	r3, [fp, #-16]
   29a68:	e2833020 	add	r3, r3, #32
   29a6c:	e1a03103 	lsl	r3, r3, #2
   29a70:	e0823003 	add	r3, r2, r3
   29a74:	e5932004 	ldr	r2, [r3, #4]
   29a78:	e15b31f4 	ldrsh	r3, [fp, #-20]	; 0xffffffec
   29a7c:	e1a03103 	lsl	r3, r3, #2
   29a80:	e0823003 	add	r3, r2, r3
   29a84:	e5d32002 	ldrb	r2, [r3, #2]
   29a88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29a8c:	e5c32002 	strb	r2, [r3, #2]
   29a90:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   29a94:	e51b3010 	ldr	r3, [fp, #-16]
   29a98:	e2833020 	add	r3, r3, #32
   29a9c:	e1a03103 	lsl	r3, r3, #2
   29aa0:	e0823003 	add	r3, r2, r3
   29aa4:	e5932004 	ldr	r2, [r3, #4]
   29aa8:	e15b31f4 	ldrsh	r3, [fp, #-20]	; 0xffffffec
   29aac:	e1a03103 	lsl	r3, r3, #2
   29ab0:	e0823003 	add	r3, r2, r3
   29ab4:	e1d320b0 	ldrh	r2, [r3]
   29ab8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29abc:	e1c320b0 	strh	r2, [r3]
   29ac0:	e59f3048 	ldr	r3, [pc, #72]	; 29b10 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x228>
   29ac4:	e59f2034 	ldr	r2, [pc, #52]	; 29b00 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x218>
   29ac8:	e59f1034 	ldr	r1, [pc, #52]	; 29b04 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x21c>
   29acc:	e59f0038 	ldr	r0, [pc, #56]	; 29b0c <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x224>
   29ad0:	ebff9dc7 	bl	111f4 <printf@plt>
   29ad4:	e3a03001 	mov	r3, #1
   29ad8:	ea000004 	b	29af0 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x208>
   29adc:	e51b3010 	ldr	r3, [fp, #-16]
   29ae0:	e2833001 	add	r3, r3, #1
   29ae4:	e50b3010 	str	r3, [fp, #-16]
   29ae8:	eaffff9d 	b	29964 <SparkFunDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x7c>
   29aec:	e3a03000 	mov	r3, #0
   29af0:	e1a00003 	mov	r0, r3
   29af4:	e24bd008 	sub	sp, fp, #8
   29af8:	e8bd8810 	pop	{r4, fp, pc}
   29afc:	000001a1 	.word	0x000001a1
   29b00:	000478a4 	.word	0x000478a4
   29b04:	00047338 	.word	0x00047338
   29b08:	00047778 	.word	0x00047778
   29b0c:	00047788 	.word	0x00047788
   29b10:	000001b3 	.word	0x000001b3

00029b14 <unsigned short const& std::max<unsigned short>(unsigned short const&, unsigned short const&)>:
   29b14:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   29b18:	e28db000 	add	fp, sp, #0
   29b1c:	e24dd00c 	sub	sp, sp, #12
   29b20:	e50b0008 	str	r0, [fp, #-8]
   29b24:	e50b100c 	str	r1, [fp, #-12]
   29b28:	e51b3008 	ldr	r3, [fp, #-8]
   29b2c:	e1d320b0 	ldrh	r2, [r3]
   29b30:	e51b300c 	ldr	r3, [fp, #-12]
   29b34:	e1d330b0 	ldrh	r3, [r3]
   29b38:	e1520003 	cmp	r2, r3
   29b3c:	2a000001 	bcs	29b48 <unsigned short const& std::max<unsigned short>(unsigned short const&, unsigned short const&)+0x34>
   29b40:	e51b300c 	ldr	r3, [fp, #-12]
   29b44:	ea000000 	b	29b4c <unsigned short const& std::max<unsigned short>(unsigned short const&, unsigned short const&)+0x38>
   29b48:	e51b3008 	ldr	r3, [fp, #-8]
   29b4c:	e1a00003 	mov	r0, r3
   29b50:	e28bd000 	add	sp, fp, #0
   29b54:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   29b58:	e12fff1e 	bx	lr

00029b5c <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)>:
   29b5c:	e92d401f 	push	{r0, r1, r2, r3, r4, lr}
   29b60:	e1a0c001 	mov	ip, r1
   29b64:	e5dd4018 	ldrb	r4, [sp, #24]
   29b68:	e1a01002 	mov	r1, r2
   29b6c:	e1a0e003 	mov	lr, r3
   29b70:	e3540000 	cmp	r4, #0
   29b74:	e59d201c 	ldr	r2, [sp, #28]
   29b78:	e5d00008 	ldrb	r0, [r0, #8]
   29b7c:	eeb70ac0 	vcvt.f64.f32	d0, s0
   29b80:	1a000005 	bne	29b9c <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x40>
   29b84:	e3500000 	cmp	r0, #0
   29b88:	1a000005 	bne	29ba4 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x48>
   29b8c:	e58d2000 	str	r2, [sp]
   29b90:	ed8d0b02 	vstr	d0, [sp, #8]
   29b94:	e59f2038 	ldr	r2, [pc, #56]	; 29bd4 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x78>
   29b98:	ea000005 	b	29bb4 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x58>
   29b9c:	e3500000 	cmp	r0, #0
   29ba0:	0a000007 	beq	29bc4 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x68>
   29ba4:	ed8d0b02 	vstr	d0, [sp, #8]
   29ba8:	e58d2000 	str	r2, [sp]
   29bac:	e59f2024 	ldr	r2, [pc, #36]	; 29bd8 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x7c>
   29bb0:	e1a0300e 	mov	r3, lr
   29bb4:	e1a0000c 	mov	r0, ip
   29bb8:	ebff9dae 	bl	11278 <snprintf@plt>
   29bbc:	e28dd010 	add	sp, sp, #16
   29bc0:	e8bd8010 	pop	{r4, pc}
   29bc4:	e58d2000 	str	r2, [sp]
   29bc8:	ed8d0b02 	vstr	d0, [sp, #8]
   29bcc:	e59f2008 	ldr	r2, [pc, #8]	; 29bdc <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x80>
   29bd0:	eafffff7 	b	29bb4 <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)+0x58>
   29bd4:	000478dd 	.word	0x000478dd
   29bd8:	000478d2 	.word	0x000478d2
   29bdc:	000478de 	.word	0x000478de

00029be0 <ModeParams::ModeParams(ModeParamsStore*)>:
   29be0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29be4:	e3a02028 	mov	r2, #40	; 0x28
   29be8:	e1a04000 	mov	r4, r0
   29bec:	e4801004 	str	r1, [r0], #4
   29bf0:	e3a01000 	mov	r1, #0
   29bf4:	ebff9d9c 	bl	1126c <memset@plt>
   29bf8:	e3a03007 	mov	r3, #7
   29bfc:	e5c43008 	strb	r3, [r4, #8]
   29c00:	e3e03000 	mvn	r3, #0
   29c04:	e5c43009 	strb	r3, [r4, #9]
   29c08:	e5c4300a 	strb	r3, [r4, #10]
   29c0c:	e3a03000 	mov	r3, #0
   29c10:	e5c4300f 	strb	r3, [r4, #15]
   29c14:	e5c43010 	strb	r3, [r4, #16]
   29c18:	e5c43011 	strb	r3, [r4, #17]
   29c1c:	e5c43012 	strb	r3, [r4, #18]
   29c20:	e5c43013 	strb	r3, [r4, #19]
   29c24:	e5c43014 	strb	r3, [r4, #20]
   29c28:	e5c43015 	strb	r3, [r4, #21]
   29c2c:	e5c43016 	strb	r3, [r4, #22]
   29c30:	e3a03001 	mov	r3, #1
   29c34:	e5c4301b 	strb	r3, [r4, #27]
   29c38:	e3a00010 	mov	r0, #16
   29c3c:	ebff9d99 	bl	112a8 <operator new[](unsigned int)@plt>
   29c40:	e284501c 	add	r5, r4, #28
   29c44:	e284202c 	add	r2, r4, #44	; 0x2c
   29c48:	e1a06000 	mov	r6, r0
   29c4c:	e1a03000 	mov	r3, r0
   29c50:	e4951004 	ldr	r1, [r5], #4
   29c54:	e1550002 	cmp	r5, r2
   29c58:	e4831004 	str	r1, [r3], #4
   29c5c:	1afffffb 	bne	29c50 <ModeParams::ModeParams(ModeParamsStore*)+0x70>
   29c60:	e3a0000c 	mov	r0, #12
   29c64:	ebff9d35 	bl	11140 <operator new(unsigned int)@plt>
   29c68:	e1a01006 	mov	r1, r6
   29c6c:	e3a02004 	mov	r2, #4
   29c70:	e1a07000 	mov	r7, r0
   29c74:	eb004e9f 	bl	3d6f8 <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)>
   29c78:	e584703c 	str	r7, [r4, #60]	; 0x3c
   29c7c:	e3a02010 	mov	r2, #16
   29c80:	e59f100c 	ldr	r1, [pc, #12]	; 29c94 <ModeParams::ModeParams(ModeParamsStore*)+0xb4>
   29c84:	e1a00005 	mov	r0, r5
   29c88:	ebff9e04 	bl	114a0 <strncpy@plt>
   29c8c:	e1a00004 	mov	r0, r4
   29c90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29c94:	00047b70 	.word	0x00047b70

00029c98 <ModeParams::~ModeParams()>:
   29c98:	e92d4070 	push	{r4, r5, r6, lr}
   29c9c:	e1a05000 	mov	r5, r0
   29ca0:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
   29ca4:	e3540000 	cmp	r4, #0
   29ca8:	0a000003 	beq	29cbc <ModeParams::~ModeParams()+0x24>
   29cac:	e1a00004 	mov	r0, r4
   29cb0:	eb004edf 	bl	3d834 <DmxSlotInfo::~DmxSlotInfo()>
   29cb4:	e1a00004 	mov	r0, r4
   29cb8:	ebff9d92 	bl	11308 <operator delete(void*)@plt>
   29cbc:	e1a00005 	mov	r0, r5
   29cc0:	e8bd8070 	pop	{r4, r5, r6, pc}

00029cc4 <ModeParams::Load(unsigned int)>:
   29cc4:	e2813030 	add	r3, r1, #48	; 0x30
   29cc8:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   29ccc:	e1a02000 	mov	r2, r0
   29cd0:	e5c03031 	strb	r3, [r0, #49]	; 0x31
   29cd4:	e3a03000 	mov	r3, #0
   29cd8:	e1a04000 	mov	r4, r0
   29cdc:	e5803004 	str	r3, [r0, #4]
   29ce0:	e1a05001 	mov	r5, r1
   29ce4:	e1a0000d 	mov	r0, sp
   29ce8:	e59f106c 	ldr	r1, [pc, #108]	; 29d5c <ModeParams::Load(unsigned int)+0x98>
   29cec:	eb0048b1 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   29cf0:	e284102c 	add	r1, r4, #44	; 0x2c
   29cf4:	e1a0000d 	mov	r0, sp
   29cf8:	eb0048ce 	bl	3c038 <ReadConfigFile::Read(char const*)>
   29cfc:	e2506000 	subs	r6, r0, #0
   29d00:	e5940000 	ldr	r0, [r4]
   29d04:	0a00000b 	beq	29d38 <ModeParams::Load(unsigned int)+0x74>
   29d08:	e3500000 	cmp	r0, #0
   29d0c:	0a000004 	beq	29d24 <ModeParams::Load(unsigned int)+0x60>
   29d10:	e5903000 	ldr	r3, [r0]
   29d14:	e2842004 	add	r2, r4, #4
   29d18:	e1a01005 	mov	r1, r5
   29d1c:	e5933008 	ldr	r3, [r3, #8]
   29d20:	e12fff33 	blx	r3
   29d24:	e1a0000d 	mov	r0, sp
   29d28:	eb0048b3 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   29d2c:	e1a00006 	mov	r0, r6
   29d30:	e28dd008 	add	sp, sp, #8
   29d34:	e8bd8070 	pop	{r4, r5, r6, pc}
   29d38:	e3500000 	cmp	r0, #0
   29d3c:	0afffff8 	beq	29d24 <ModeParams::Load(unsigned int)+0x60>
   29d40:	e5903000 	ldr	r3, [r0]
   29d44:	e2842004 	add	r2, r4, #4
   29d48:	e1a01005 	mov	r1, r5
   29d4c:	e593300c 	ldr	r3, [r3, #12]
   29d50:	e12fff33 	blx	r3
   29d54:	e3a06001 	mov	r6, #1
   29d58:	eafffff1 	b	29d24 <ModeParams::Load(unsigned int)+0x60>
   29d5c:	0002a33c 	.word	0x0002a33c

00029d60 <ModeParams::Load(unsigned int, char const*, unsigned int)>:
   29d60:	e590c000 	ldr	ip, [r0]
   29d64:	e35c0000 	cmp	ip, #0
   29d68:	012fff1e 	bxeq	lr
   29d6c:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29d70:	e1a07003 	mov	r7, r3
   29d74:	e3a03000 	mov	r3, #0
   29d78:	e5803004 	str	r3, [r0, #4]
   29d7c:	e1a06002 	mov	r6, r2
   29d80:	e1a05001 	mov	r5, r1
   29d84:	e1a04000 	mov	r4, r0
   29d88:	e1a02000 	mov	r2, r0
   29d8c:	e59f103c 	ldr	r1, [pc, #60]	; 29dd0 <ModeParams::Load(unsigned int, char const*, unsigned int)+0x70>
   29d90:	e1a0000d 	mov	r0, sp
   29d94:	eb004887 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   29d98:	e1a02007 	mov	r2, r7
   29d9c:	e1a01006 	mov	r1, r6
   29da0:	e1a0000d 	mov	r0, sp
   29da4:	eb0048ee 	bl	3c164 <ReadConfigFile::Read(char const*, unsigned int)>
   29da8:	e1a02004 	mov	r2, r4
   29dac:	e1a01005 	mov	r1, r5
   29db0:	e4920004 	ldr	r0, [r2], #4
   29db4:	e5903000 	ldr	r3, [r0]
   29db8:	e5933008 	ldr	r3, [r3, #8]
   29dbc:	e12fff33 	blx	r3
   29dc0:	e1a0000d 	mov	r0, sp
   29dc4:	eb00488c 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   29dc8:	e28dd00c 	add	sp, sp, #12
   29dcc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   29dd0:	0002a33c 	.word	0x0002a33c

00029dd4 <ModeParams::callbackFunction(char const*)>:
   29dd4:	e92d4070 	push	{r4, r5, r6, lr}
   29dd8:	e1a05001 	mov	r5, r1
   29ddc:	e24dd090 	sub	sp, sp, #144	; 0x90
   29de0:	e1a04000 	mov	r4, r0
   29de4:	e28d2001 	add	r2, sp, #1
   29de8:	e59f128c 	ldr	r1, [pc, #652]	; 2a07c <ModeParams::callbackFunction(char const*)+0x2a8>
   29dec:	e1a00005 	mov	r0, r5
   29df0:	eb004793 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   29df4:	e3500000 	cmp	r0, #0
   29df8:	1a000007 	bne	29e1c <ModeParams::callbackFunction(char const*)+0x48>
   29dfc:	e5dd3001 	ldrb	r3, [sp, #1]
   29e00:	e3530006 	cmp	r3, #6
   29e04:	95c43008 	strbls	r3, [r4, #8]
   29e08:	95943004 	ldrls	r3, [r4, #4]
   29e0c:	93833001 	orrls	r3, r3, #1
   29e10:	9a000010 	bls	29e58 <ModeParams::callbackFunction(char const*)+0x84>
   29e14:	e28dd090 	add	sp, sp, #144	; 0x90
   29e18:	e8bd8070 	pop	{r4, r5, r6, pc}
   29e1c:	e28d2002 	add	r2, sp, #2
   29e20:	e59f1258 	ldr	r1, [pc, #600]	; 2a080 <ModeParams::callbackFunction(char const*)+0x2ac>
   29e24:	e1a00005 	mov	r0, r5
   29e28:	eb0045d9 	bl	3b594 <Sscan::Uint16(char const*, char const*, unsigned short&)>
   29e2c:	e3500000 	cmp	r0, #0
   29e30:	1a00000a 	bne	29e60 <ModeParams::callbackFunction(char const*)+0x8c>
   29e34:	e1dd30b2 	ldrh	r3, [sp, #2]
   29e38:	e2432001 	sub	r2, r3, #1
   29e3c:	e3520c02 	cmp	r2, #512	; 0x200
   29e40:	2afffff3 	bcs	29e14 <ModeParams::callbackFunction(char const*)+0x40>
   29e44:	e5c43009 	strb	r3, [r4, #9]
   29e48:	e1a03423 	lsr	r3, r3, #8
   29e4c:	e5c4300a 	strb	r3, [r4, #10]
   29e50:	e5943004 	ldr	r3, [r4, #4]
   29e54:	e3833002 	orr	r3, r3, #2
   29e58:	e5843004 	str	r3, [r4, #4]
   29e5c:	eaffffec 	b	29e14 <ModeParams::callbackFunction(char const*)+0x40>
   29e60:	e3a0307f 	mov	r3, #127	; 0x7f
   29e64:	e58d3008 	str	r3, [sp, #8]
   29e68:	e28d2010 	add	r2, sp, #16
   29e6c:	e28d3008 	add	r3, sp, #8
   29e70:	e59f120c 	ldr	r1, [pc, #524]	; 2a084 <ModeParams::callbackFunction(char const*)+0x2b0>
   29e74:	e1a00005 	mov	r0, r5
   29e78:	eb0045dd 	bl	3b5f4 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
   29e7c:	e3500000 	cmp	r0, #0
   29e80:	1a00000c 	bne	29eb8 <ModeParams::callbackFunction(char const*)+0xe4>
   29e84:	e59d3008 	ldr	r3, [sp, #8]
   29e88:	e28d2090 	add	r2, sp, #144	; 0x90
   29e8c:	e0823003 	add	r3, r2, r3
   29e90:	e58d000c 	str	r0, [sp, #12]
   29e94:	e5430080 	strb	r0, [r3, #-128]	; 0xffffff80
   29e98:	e28d200c 	add	r2, sp, #12
   29e9c:	e28d1010 	add	r1, sp, #16
   29ea0:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
   29ea4:	eb004e87 	bl	3d8c8 <DmxSlotInfo::FromString(char const*, unsigned int&)>
   29ea8:	e59d200c 	ldr	r2, [sp, #12]
   29eac:	e5943004 	ldr	r3, [r4, #4]
   29eb0:	e1833e02 	orr	r3, r3, r2, lsl #28
   29eb4:	e5843004 	str	r3, [r4, #4]
   29eb8:	e28d200c 	add	r2, sp, #12
   29ebc:	e59f11c4 	ldr	r1, [pc, #452]	; 2a088 <ModeParams::callbackFunction(char const*)+0x2b4>
   29ec0:	e1a00005 	mov	r0, r5
   29ec4:	eb0047f8 	bl	3beac <Sscan::Uint32(char const*, char const*, unsigned int&)>
   29ec8:	e3500000 	cmp	r0, #0
   29ecc:	1a00000a 	bne	29efc <ModeParams::callbackFunction(char const*)+0x128>
   29ed0:	e5dd300c 	ldrb	r3, [sp, #12]
   29ed4:	e5c4300b 	strb	r3, [r4, #11]
   29ed8:	e5dd300d 	ldrb	r3, [sp, #13]
   29edc:	e5c4300c 	strb	r3, [r4, #12]
   29ee0:	e5dd300e 	ldrb	r3, [sp, #14]
   29ee4:	e5c4300d 	strb	r3, [r4, #13]
   29ee8:	e5dd300f 	ldrb	r3, [sp, #15]
   29eec:	e5c4300e 	strb	r3, [r4, #14]
   29ef0:	e5943004 	ldr	r3, [r4, #4]
   29ef4:	e3833004 	orr	r3, r3, #4
   29ef8:	eaffffd6 	b	29e58 <ModeParams::callbackFunction(char const*)+0x84>
   29efc:	e3a03005 	mov	r3, #5
   29f00:	e58d3008 	str	r3, [sp, #8]
   29f04:	e28d2010 	add	r2, sp, #16
   29f08:	e28d3008 	add	r3, sp, #8
   29f0c:	e59f1178 	ldr	r1, [pc, #376]	; 2a08c <ModeParams::callbackFunction(char const*)+0x2b8>
   29f10:	e1a00005 	mov	r0, r5
   29f14:	eb0045b6 	bl	3b5f4 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
   29f18:	e3500000 	cmp	r0, #0
   29f1c:	1a000009 	bne	29f48 <ModeParams::callbackFunction(char const*)+0x174>
   29f20:	e59d2008 	ldr	r2, [sp, #8]
   29f24:	e3520004 	cmp	r2, #4
   29f28:	1a000027 	bne	29fcc <ModeParams::callbackFunction(char const*)+0x1f8>
   29f2c:	e59f115c 	ldr	r1, [pc, #348]	; 2a090 <ModeParams::callbackFunction(char const*)+0x2bc>
   29f30:	e28d0010 	add	r0, sp, #16
   29f34:	ebff9d5f 	bl	114b8 <memcmp@plt>
   29f38:	e3500000 	cmp	r0, #0
   29f3c:	03a03008 	moveq	r3, #8
   29f40:	05c4300f 	strbeq	r3, [r4, #15]
   29f44:	0a000028 	beq	29fec <ModeParams::callbackFunction(char const*)+0x218>
   29f48:	e3a03007 	mov	r3, #7
   29f4c:	e58d3008 	str	r3, [sp, #8]
   29f50:	e28d2010 	add	r2, sp, #16
   29f54:	e28d3008 	add	r3, sp, #8
   29f58:	e59f1134 	ldr	r1, [pc, #308]	; 2a094 <ModeParams::callbackFunction(char const*)+0x2c0>
   29f5c:	e1a00005 	mov	r0, r5
   29f60:	eb0045a3 	bl	3b5f4 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
   29f64:	e3500000 	cmp	r0, #0
   29f68:	1a000025 	bne	2a004 <ModeParams::callbackFunction(char const*)+0x230>
   29f6c:	e59d6008 	ldr	r6, [sp, #8]
   29f70:	e3560007 	cmp	r6, #7
   29f74:	1affffa6 	bne	29e14 <ModeParams::callbackFunction(char const*)+0x40>
   29f78:	e1a02006 	mov	r2, r6
   29f7c:	e59f1114 	ldr	r1, [pc, #276]	; 2a098 <ModeParams::callbackFunction(char const*)+0x2c4>
   29f80:	e28d0010 	add	r0, sp, #16
   29f84:	ebff9d4b 	bl	114b8 <memcmp@plt>
   29f88:	e3500000 	cmp	r0, #0
   29f8c:	03a03001 	moveq	r3, #1
   29f90:	05c43013 	strbeq	r3, [r4, #19]
   29f94:	0a000006 	beq	29fb4 <ModeParams::callbackFunction(char const*)+0x1e0>
   29f98:	e1a02006 	mov	r2, r6
   29f9c:	e59f10f8 	ldr	r1, [pc, #248]	; 2a09c <ModeParams::callbackFunction(char const*)+0x2c8>
   29fa0:	e28d0010 	add	r0, sp, #16
   29fa4:	ebff9d43 	bl	114b8 <memcmp@plt>
   29fa8:	e3500000 	cmp	r0, #0
   29fac:	1a000014 	bne	2a004 <ModeParams::callbackFunction(char const*)+0x230>
   29fb0:	e5c40013 	strb	r0, [r4, #19]
   29fb4:	e5943004 	ldr	r3, [r4, #4]
   29fb8:	e5c40014 	strb	r0, [r4, #20]
   29fbc:	e5c40015 	strb	r0, [r4, #21]
   29fc0:	e5c40016 	strb	r0, [r4, #22]
   29fc4:	e3833010 	orr	r3, r3, #16
   29fc8:	eaffffa2 	b	29e58 <ModeParams::callbackFunction(char const*)+0x84>
   29fcc:	e3520005 	cmp	r2, #5
   29fd0:	1affffdc 	bne	29f48 <ModeParams::callbackFunction(char const*)+0x174>
   29fd4:	e59f10c4 	ldr	r1, [pc, #196]	; 2a0a0 <ModeParams::callbackFunction(char const*)+0x2cc>
   29fd8:	e28d0010 	add	r0, sp, #16
   29fdc:	ebff9d35 	bl	114b8 <memcmp@plt>
   29fe0:	e3500000 	cmp	r0, #0
   29fe4:	1affffd7 	bne	29f48 <ModeParams::callbackFunction(char const*)+0x174>
   29fe8:	e5c4000f 	strb	r0, [r4, #15]
   29fec:	e5943004 	ldr	r3, [r4, #4]
   29ff0:	e5c40010 	strb	r0, [r4, #16]
   29ff4:	e5c40011 	strb	r0, [r4, #17]
   29ff8:	e5c40012 	strb	r0, [r4, #18]
   29ffc:	e3833008 	orr	r3, r3, #8
   2a000:	eaffff94 	b	29e58 <ModeParams::callbackFunction(char const*)+0x84>
   2a004:	e28d2004 	add	r2, sp, #4
   2a008:	e59f1094 	ldr	r1, [pc, #148]	; 2a0a4 <ModeParams::callbackFunction(char const*)+0x2d0>
   2a00c:	e1a00005 	mov	r0, r5
   2a010:	eb004921 	bl	3c49c <Sscan::Float(char const*, char const*, float&)>
   2a014:	e3500000 	cmp	r0, #0
   2a018:	1a00000a 	bne	2a048 <ModeParams::callbackFunction(char const*)+0x274>
   2a01c:	e59d3004 	ldr	r3, [sp, #4]
   2a020:	e5c43017 	strb	r3, [r4, #23]
   2a024:	e1a02423 	lsr	r2, r3, #8
   2a028:	e5c42018 	strb	r2, [r4, #24]
   2a02c:	e1a02823 	lsr	r2, r3, #16
   2a030:	e1a03c23 	lsr	r3, r3, #24
   2a034:	e5c4301a 	strb	r3, [r4, #26]
   2a038:	e5943004 	ldr	r3, [r4, #4]
   2a03c:	e5c42019 	strb	r2, [r4, #25]
   2a040:	e3833020 	orr	r3, r3, #32
   2a044:	eaffff83 	b	29e58 <ModeParams::callbackFunction(char const*)+0x84>
   2a048:	e28d2001 	add	r2, sp, #1
   2a04c:	e59f1054 	ldr	r1, [pc, #84]	; 2a0a8 <ModeParams::callbackFunction(char const*)+0x2d4>
   2a050:	e1a00005 	mov	r0, r5
   2a054:	eb0046fa 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   2a058:	e3500000 	cmp	r0, #0
   2a05c:	1affff6c 	bne	29e14 <ModeParams::callbackFunction(char const*)+0x40>
   2a060:	e5dd3001 	ldrb	r3, [sp, #1]
   2a064:	e3530000 	cmp	r3, #0
   2a068:	1affff69 	bne	29e14 <ModeParams::callbackFunction(char const*)+0x40>
   2a06c:	e5c4301b 	strb	r3, [r4, #27]
   2a070:	e5943004 	ldr	r3, [r4, #4]
   2a074:	e3833040 	orr	r3, r3, #64	; 0x40
   2a078:	eaffff76 	b	29e58 <ModeParams::callbackFunction(char const*)+0x84>
   2a07c:	00047ad8 	.word	0x00047ad8
   2a080:	0004a560 	.word	0x0004a560
   2a084:	0004a574 	.word	0x0004a574
   2a088:	00047ae4 	.word	0x00047ae4
   2a08c:	00047af4 	.word	0x00047af4
   2a090:	000478e7 	.word	0x000478e7
   2a094:	00047b04 	.word	0x00047b04
   2a098:	000478f2 	.word	0x000478f2
   2a09c:	000478fa 	.word	0x000478fa
   2a0a0:	000478ec 	.word	0x000478ec
   2a0a4:	00047b14 	.word	0x00047b14
   2a0a8:	00047b24 	.word	0x00047b24

0002a0ac <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)>:
   2a0ac:	e92d4070 	push	{r4, r5, r6, lr}
   2a0b0:	e3520000 	cmp	r2, #0
   2a0b4:	e1a05003 	mov	r5, r3
   2a0b8:	e2813030 	add	r3, r1, #48	; 0x30
   2a0bc:	e5c03031 	strb	r3, [r0, #49]	; 0x31
   2a0c0:	e24dd018 	sub	sp, sp, #24
   2a0c4:	e1a04000 	mov	r4, r0
   2a0c8:	e2803004 	add	r3, r0, #4
   2a0cc:	0a000070 	beq	2a294 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x1e8>
   2a0d0:	e2821028 	add	r1, r2, #40	; 0x28
   2a0d4:	e4920004 	ldr	r0, [r2], #4
   2a0d8:	e1520001 	cmp	r2, r1
   2a0dc:	e4830004 	str	r0, [r3], #4
   2a0e0:	1afffffb 	bne	2a0d4 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x28>
   2a0e4:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   2a0e8:	e1a02005 	mov	r2, r5
   2a0ec:	e284102c 	add	r1, r4, #44	; 0x2c
   2a0f0:	e28d000c 	add	r0, sp, #12
   2a0f4:	eb0046ea 	bl	3bca4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
   2a0f8:	e5940004 	ldr	r0, [r4, #4]
   2a0fc:	e3a01001 	mov	r1, #1
   2a100:	eb0000d9 	bl	2a46c <ModeParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2a104:	e3a05001 	mov	r5, #1
   2a108:	e5d42008 	ldrb	r2, [r4, #8]
   2a10c:	e58d5000 	str	r5, [sp]
   2a110:	e59f1194 	ldr	r1, [pc, #404]	; 2a2ac <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x200>
   2a114:	e1a03000 	mov	r3, r0
   2a118:	e28d000c 	add	r0, sp, #12
   2a11c:	ebffe7a7 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   2a120:	e5940004 	ldr	r0, [r4, #4]
   2a124:	e3a01002 	mov	r1, #2
   2a128:	eb0000cf 	bl	2a46c <ModeParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2a12c:	e5942008 	ldr	r2, [r4, #8]
   2a130:	e58d5000 	str	r5, [sp]
   2a134:	e59f1174 	ldr	r1, [pc, #372]	; 2a2b0 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x204>
   2a138:	e1a02422 	lsr	r2, r2, #8
   2a13c:	e6ff2072 	uxth	r2, r2
   2a140:	e1a03000 	mov	r3, r0
   2a144:	e28d000c 	add	r0, sp, #12
   2a148:	ebffecd9 	bl	254b4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)>
   2a14c:	e5946004 	ldr	r6, [r4, #4]
   2a150:	e594003c 	ldr	r0, [r4, #60]	; 0x3c
   2a154:	e1a06e26 	lsr	r6, r6, #28
   2a158:	e1a01006 	mov	r1, r6
   2a15c:	eb004e30 	bl	3da24 <DmxSlotInfo::ToString(unsigned int)>
   2a160:	e2963000 	adds	r3, r6, #0
   2a164:	13a03001 	movne	r3, #1
   2a168:	e58d5000 	str	r5, [sp]
   2a16c:	e59f1140 	ldr	r1, [pc, #320]	; 2a2b4 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x208>
   2a170:	e1a02000 	mov	r2, r0
   2a174:	e28d000c 	add	r0, sp, #12
   2a178:	ebffe776 	bl	23f58 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)>
   2a17c:	e5940004 	ldr	r0, [r4, #4]
   2a180:	e3a01004 	mov	r1, #4
   2a184:	eb0000b8 	bl	2a46c <ModeParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2a188:	e594100c 	ldr	r1, [r4, #12]
   2a18c:	e5d4200b 	ldrb	r2, [r4, #11]
   2a190:	e58d5000 	str	r5, [sp]
   2a194:	e1822401 	orr	r2, r2, r1, lsl #8
   2a198:	e59f1118 	ldr	r1, [pc, #280]	; 2a2b8 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x20c>
   2a19c:	e1a03000 	mov	r3, r0
   2a1a0:	e28d000c 	add	r0, sp, #12
   2a1a4:	eb000065 	bl	2a340 <bool PropertiesBuilder::Add<unsigned int>(char const*, unsigned int, bool, unsigned int)>
   2a1a8:	e5946010 	ldr	r6, [r4, #16]
   2a1ac:	e5d4200f 	ldrb	r2, [r4, #15]
   2a1b0:	e59f3104 	ldr	r3, [pc, #260]	; 2a2bc <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x210>
   2a1b4:	e5940004 	ldr	r0, [r4, #4]
   2a1b8:	e1822406 	orr	r2, r2, r6, lsl #8
   2a1bc:	e3520008 	cmp	r2, #8
   2a1c0:	e3a01008 	mov	r1, #8
   2a1c4:	e59f60f4 	ldr	r6, [pc, #244]	; 2a2c0 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x214>
   2a1c8:	11a06003 	movne	r6, r3
   2a1cc:	eb0000a6 	bl	2a46c <ModeParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2a1d0:	e1a02006 	mov	r2, r6
   2a1d4:	e58d5000 	str	r5, [sp]
   2a1d8:	e59f10e4 	ldr	r1, [pc, #228]	; 2a2c4 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x218>
   2a1dc:	e1a03000 	mov	r3, r0
   2a1e0:	e28d000c 	add	r0, sp, #12
   2a1e4:	ebffe75b 	bl	23f58 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)>
   2a1e8:	e5946014 	ldr	r6, [r4, #20]
   2a1ec:	e5d42013 	ldrb	r2, [r4, #19]
   2a1f0:	e59f30d0 	ldr	r3, [pc, #208]	; 2a2c8 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x21c>
   2a1f4:	e5940004 	ldr	r0, [r4, #4]
   2a1f8:	e1822406 	orr	r2, r2, r6, lsl #8
   2a1fc:	e1520005 	cmp	r2, r5
   2a200:	e3a01010 	mov	r1, #16
   2a204:	e59f60c0 	ldr	r6, [pc, #192]	; 2a2cc <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x220>
   2a208:	11a06003 	movne	r6, r3
   2a20c:	eb000096 	bl	2a46c <ModeParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2a210:	e1a02006 	mov	r2, r6
   2a214:	e58d5000 	str	r5, [sp]
   2a218:	e59f10b0 	ldr	r1, [pc, #176]	; 2a2d0 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x224>
   2a21c:	e1a03000 	mov	r3, r0
   2a220:	e28d000c 	add	r0, sp, #12
   2a224:	ebffe74b 	bl	23f58 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)>
   2a228:	e5940004 	ldr	r0, [r4, #4]
   2a22c:	e3a01020 	mov	r1, #32
   2a230:	eb00008d 	bl	2a46c <ModeParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2a234:	e594c018 	ldr	ip, [r4, #24]
   2a238:	e5d41017 	ldrb	r1, [r4, #23]
   2a23c:	e1a03005 	mov	r3, r5
   2a240:	e181140c 	orr	r1, r1, ip, lsl #8
   2a244:	ee001a10 	vmov	s0, r1
   2a248:	e59f1084 	ldr	r1, [pc, #132]	; 2a2d4 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x228>
   2a24c:	e1a02000 	mov	r2, r0
   2a250:	e28d000c 	add	r0, sp, #12
   2a254:	eb000053 	bl	2a3a8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)>
   2a258:	e5940004 	ldr	r0, [r4, #4]
   2a25c:	e3a01040 	mov	r1, #64	; 0x40
   2a260:	eb000081 	bl	2a46c <ModeParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2a264:	e5d4201b 	ldrb	r2, [r4, #27]
   2a268:	e59f1068 	ldr	r1, [pc, #104]	; 2a2d8 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x22c>
   2a26c:	e58d5000 	str	r5, [sp]
   2a270:	e1a03000 	mov	r3, r0
   2a274:	e28d000c 	add	r0, sp, #12
   2a278:	ebffc92d 	bl	1c734 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)>
   2a27c:	e28d000c 	add	r0, sp, #12
   2a280:	ebffa912 	bl	146d0 <PropertiesBuilder::GetSize()>
   2a284:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
   2a288:	e5830000 	str	r0, [r3]
   2a28c:	e28dd018 	add	sp, sp, #24
   2a290:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a294:	e5900000 	ldr	r0, [r0]
   2a298:	e5902000 	ldr	r2, [r0]
   2a29c:	e592600c 	ldr	r6, [r2, #12]
   2a2a0:	e1a02003 	mov	r2, r3
   2a2a4:	e12fff36 	blx	r6
   2a2a8:	eaffff8d 	b	2a0e4 <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)+0x38>
   2a2ac:	00047ad8 	.word	0x00047ad8
   2a2b0:	0004a560 	.word	0x0004a560
   2a2b4:	0004a574 	.word	0x0004a574
   2a2b8:	00047ae4 	.word	0x00047ae4
   2a2bc:	000478ec 	.word	0x000478ec
   2a2c0:	000478e7 	.word	0x000478e7
   2a2c4:	00047af4 	.word	0x00047af4
   2a2c8:	000478fa 	.word	0x000478fa
   2a2cc:	000478f2 	.word	0x000478f2
   2a2d0:	00047b04 	.word	0x00047b04
   2a2d4:	00047b14 	.word	0x00047b14
   2a2d8:	00047b24 	.word	0x00047b24

0002a2dc <ModeParams::Save(unsigned int, char*, unsigned int, unsigned int&)>:
   2a2dc:	e92d4007 	push	{r0, r1, r2, lr}
   2a2e0:	e590c000 	ldr	ip, [r0]
   2a2e4:	e59de010 	ldr	lr, [sp, #16]
   2a2e8:	e35c0000 	cmp	ip, #0
   2a2ec:	058ec000 	streq	ip, [lr]
   2a2f0:	0a000004 	beq	2a308 <ModeParams::Save(unsigned int, char*, unsigned int, unsigned int&)+0x2c>
   2a2f4:	e1a0c003 	mov	ip, r3
   2a2f8:	e1a03002 	mov	r3, r2
   2a2fc:	e88d5000 	stm	sp, {ip, lr}
   2a300:	e3a02000 	mov	r2, #0
   2a304:	ebffff68 	bl	2a0ac <ModeParams::Builder(unsigned int, TModeParams const*, char*, unsigned int, unsigned int&)>
   2a308:	e28dd00c 	add	sp, sp, #12
   2a30c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002a310 <ModeParams::Dump()>:
   2a310:	e12fff1e 	bx	lr

0002a314 <ModeParams::GetSlotInfo(unsigned int, lightset::SlotInfo&)>:
   2a314:	e3510003 	cmp	r1, #3
   2a318:	90800101 	addls	r0, r0, r1, lsl #2
   2a31c:	83a03000 	movhi	r3, #0
   2a320:	95d0301e 	ldrbls	r3, [r0, #30]
   2a324:	85c23002 	strbhi	r3, [r2, #2]
   2a328:	83e03000 	mvnhi	r3, #0
   2a32c:	95c23002 	strbls	r3, [r2, #2]
   2a330:	91d031bc 	ldrhls	r3, [r0, #28]
   2a334:	e1c230b0 	strh	r3, [r2]
   2a338:	e12fff1e 	bx	lr

0002a33c <ModeParams::staticCallbackFunction(void*, char const*)>:
   2a33c:	eafffea4 	b	29dd4 <ModeParams::callbackFunction(char const*)>

0002a340 <bool PropertiesBuilder::Add<unsigned int>(char const*, unsigned int, bool, unsigned int)>:
   2a340:	e92d407f 	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2a344:	e1d0e0b6 	ldrh	lr, [r0, #6]
   2a348:	e1d050b4 	ldrh	r5, [r0, #4]
   2a34c:	e15e0005 	cmp	lr, r5
   2a350:	3a000002 	bcc	2a360 <bool PropertiesBuilder::Add<unsigned int>(char const*, unsigned int, bool, unsigned int)+0x20>
   2a354:	e3a00000 	mov	r0, #0
   2a358:	e28dd010 	add	sp, sp, #16
   2a35c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a360:	e1a0c003 	mov	ip, r3
   2a364:	e59d6020 	ldr	r6, [sp, #32]
   2a368:	e1a03001 	mov	r3, r1
   2a36c:	e5901000 	ldr	r1, [r0]
   2a370:	e045500e 	sub	r5, r5, lr
   2a374:	e88d1004 	stm	sp, {r2, ip}
   2a378:	e58d6008 	str	r6, [sp, #8]
   2a37c:	e1a02005 	mov	r2, r5
   2a380:	e081100e 	add	r1, r1, lr
   2a384:	e1a04000 	mov	r4, r0
   2a388:	eb00001e 	bl	2a408 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)>
   2a38c:	e1550000 	cmp	r5, r0
   2a390:	baffffef 	blt	2a354 <bool PropertiesBuilder::Add<unsigned int>(char const*, unsigned int, bool, unsigned int)+0x14>
   2a394:	e1d430b6 	ldrh	r3, [r4, #6]
   2a398:	e0833000 	add	r3, r3, r0
   2a39c:	e1c430b6 	strh	r3, [r4, #6]
   2a3a0:	e3a00001 	mov	r0, #1
   2a3a4:	eaffffeb 	b	2a358 <bool PropertiesBuilder::Add<unsigned int>(char const*, unsigned int, bool, unsigned int)+0x18>

0002a3a8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)>:
   2a3a8:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
   2a3ac:	e1d0c0b6 	ldrh	ip, [r0, #6]
   2a3b0:	e1d050b4 	ldrh	r5, [r0, #4]
   2a3b4:	e15c0005 	cmp	ip, r5
   2a3b8:	3a000002 	bcc	2a3c8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)+0x20>
   2a3bc:	e3a00000 	mov	r0, #0
   2a3c0:	e28dd00c 	add	sp, sp, #12
   2a3c4:	e8bd8030 	pop	{r4, r5, pc}
   2a3c8:	e1a0e003 	mov	lr, r3
   2a3cc:	e1a03001 	mov	r3, r1
   2a3d0:	e5901000 	ldr	r1, [r0]
   2a3d4:	e045500c 	sub	r5, r5, ip
   2a3d8:	e88d4004 	stm	sp, {r2, lr}
   2a3dc:	e081100c 	add	r1, r1, ip
   2a3e0:	e1a02005 	mov	r2, r5
   2a3e4:	e1a04000 	mov	r4, r0
   2a3e8:	ebfffddb 	bl	29b5c <int PropertiesBuilder::add_part<float>(char*, unsigned int, char const*, float, bool, unsigned int)>
   2a3ec:	e1550000 	cmp	r5, r0
   2a3f0:	bafffff1 	blt	2a3bc <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)+0x14>
   2a3f4:	e1d430b6 	ldrh	r3, [r4, #6]
   2a3f8:	e0833000 	add	r3, r3, r0
   2a3fc:	e1c430b6 	strh	r3, [r4, #6]
   2a400:	e3a00001 	mov	r0, #1
   2a404:	eaffffed 	b	2a3c0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)+0x18>

0002a408 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)>:
   2a408:	e92d4030 	push	{r4, r5, lr}
   2a40c:	e1a0c001 	mov	ip, r1
   2a410:	e5dd5010 	ldrb	r5, [sp, #16]
   2a414:	e1a01002 	mov	r1, r2
   2a418:	e1a0e003 	mov	lr, r3
   2a41c:	e3550000 	cmp	r5, #0
   2a420:	e59d400c 	ldr	r4, [sp, #12]
   2a424:	e5d02008 	ldrb	r2, [r0, #8]
   2a428:	1a000003 	bne	2a43c <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x34>
   2a42c:	e3520000 	cmp	r2, #0
   2a430:	1a000004 	bne	2a448 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x40>
   2a434:	e59f2024 	ldr	r2, [pc, #36]	; 2a460 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x58>
   2a438:	ea000005 	b	2a454 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x4c>
   2a43c:	e3520000 	cmp	r2, #0
   2a440:	059f201c 	ldreq	r2, [pc, #28]	; 2a464 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x5c>
   2a444:	0a000002 	beq	2a454 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x4c>
   2a448:	e59f2018 	ldr	r2, [pc, #24]	; 2a468 <int PropertiesBuilder::add_part<unsigned int>(char*, unsigned int, char const*, unsigned int, bool, unsigned int)+0x60>
   2a44c:	e1a0300e 	mov	r3, lr
   2a450:	e58d400c 	str	r4, [sp, #12]
   2a454:	e1a0000c 	mov	r0, ip
   2a458:	e8bd4030 	pop	{r4, r5, lr}
   2a45c:	eaff9b85 	b	11278 <snprintf@plt>
   2a460:	00045d88 	.word	0x00045d88
   2a464:	00047f40 	.word	0x00047f40
   2a468:	00045d7f 	.word	0x00045d7f

0002a46c <ModeParams::isMaskSet(unsigned int) const [clone .isra.0]>:
   2a46c:	e1d13000 	bics	r3, r1, r0
   2a470:	03a00001 	moveq	r0, #1
   2a474:	13a00000 	movne	r0, #0
   2a478:	e12fff1e 	bx	lr

0002a47c <L6470Params::isMaskSet(unsigned int)>:
   2a47c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2a480:	e28db000 	add	fp, sp, #0
   2a484:	e24dd00c 	sub	sp, sp, #12
   2a488:	e50b0008 	str	r0, [fp, #-8]
   2a48c:	e50b100c 	str	r1, [fp, #-12]
   2a490:	e51b3008 	ldr	r3, [fp, #-8]
   2a494:	e5932004 	ldr	r2, [r3, #4]
   2a498:	e51b300c 	ldr	r3, [fp, #-12]
   2a49c:	e0033002 	and	r3, r3, r2
   2a4a0:	e51b200c 	ldr	r2, [fp, #-12]
   2a4a4:	e1520003 	cmp	r2, r3
   2a4a8:	03a03001 	moveq	r3, #1
   2a4ac:	13a03000 	movne	r3, #0
   2a4b0:	e6ef3073 	uxtb	r3, r3
   2a4b4:	e1a00003 	mov	r0, r3
   2a4b8:	e28bd000 	add	sp, fp, #0
   2a4bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2a4c0:	e12fff1e 	bx	lr

0002a4c4 <L6470Params::L6470Params(L6470ParamsStore*)>:
   2a4c4:	e92d4800 	push	{fp, lr}
   2a4c8:	e28db004 	add	fp, sp, #4
   2a4cc:	e24dd008 	sub	sp, sp, #8
   2a4d0:	e50b0008 	str	r0, [fp, #-8]
   2a4d4:	e50b100c 	str	r1, [fp, #-12]
   2a4d8:	e51b3008 	ldr	r3, [fp, #-8]
   2a4dc:	e51b200c 	ldr	r2, [fp, #-12]
   2a4e0:	e5832000 	str	r2, [r3]
   2a4e4:	e51b3008 	ldr	r3, [fp, #-8]
   2a4e8:	e2833004 	add	r3, r3, #4
   2a4ec:	e3a02019 	mov	r2, #25
   2a4f0:	e3a01000 	mov	r1, #0
   2a4f4:	e1a00003 	mov	r0, r3
   2a4f8:	ebff9b5b 	bl	1126c <memset@plt>
   2a4fc:	e51b3008 	ldr	r3, [fp, #-8]
   2a500:	e283301d 	add	r3, r3, #29
   2a504:	e3a02010 	mov	r2, #16
   2a508:	e59f1014 	ldr	r1, [pc, #20]	; 2a524 <L6470Params::L6470Params(L6470ParamsStore*)+0x60>
   2a50c:	e1a00003 	mov	r0, r3
   2a510:	ebff9be2 	bl	114a0 <strncpy@plt>
   2a514:	e51b3008 	ldr	r3, [fp, #-8]
   2a518:	e1a00003 	mov	r0, r3
   2a51c:	e24bd004 	sub	sp, fp, #4
   2a520:	e8bd8800 	pop	{fp, pc}
   2a524:	00047b70 	.word	0x00047b70

0002a528 <L6470Params::Load(unsigned int)>:
   2a528:	e92d4810 	push	{r4, fp, lr}
   2a52c:	e28db008 	add	fp, sp, #8
   2a530:	e24dd014 	sub	sp, sp, #20
   2a534:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2a538:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   2a53c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a540:	e6ef3073 	uxtb	r3, r3
   2a544:	e2833030 	add	r3, r3, #48	; 0x30
   2a548:	e6ef2073 	uxtb	r2, r3
   2a54c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a550:	e5c32022 	strb	r2, [r3, #34]	; 0x22
   2a554:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a558:	e3a02000 	mov	r2, #0
   2a55c:	e5832004 	str	r2, [r3, #4]
   2a560:	e24b3014 	sub	r3, fp, #20
   2a564:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2a568:	e59f10d0 	ldr	r1, [pc, #208]	; 2a640 <L6470Params::Load(unsigned int)+0x118>
   2a56c:	e1a00003 	mov	r0, r3
   2a570:	eb004690 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   2a574:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a578:	e283201d 	add	r2, r3, #29
   2a57c:	e24b3014 	sub	r3, fp, #20
   2a580:	e1a01002 	mov	r1, r2
   2a584:	e1a00003 	mov	r0, r3
   2a588:	eb0046aa 	bl	3c038 <ReadConfigFile::Read(char const*)>
   2a58c:	e1a03000 	mov	r3, r0
   2a590:	e3530000 	cmp	r3, #0
   2a594:	0a00000f 	beq	2a5d8 <L6470Params::Load(unsigned int)+0xb0>
   2a598:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a59c:	e5933000 	ldr	r3, [r3]
   2a5a0:	e3530000 	cmp	r3, #0
   2a5a4:	0a00001d 	beq	2a620 <L6470Params::Load(unsigned int)+0xf8>
   2a5a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a5ac:	e5930000 	ldr	r0, [r3]
   2a5b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a5b4:	e5933000 	ldr	r3, [r3]
   2a5b8:	e5933000 	ldr	r3, [r3]
   2a5bc:	e2833008 	add	r3, r3, #8
   2a5c0:	e5933000 	ldr	r3, [r3]
   2a5c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2a5c8:	e2822004 	add	r2, r2, #4
   2a5cc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   2a5d0:	e12fff33 	blx	r3
   2a5d4:	ea000011 	b	2a620 <L6470Params::Load(unsigned int)+0xf8>
   2a5d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a5dc:	e5933000 	ldr	r3, [r3]
   2a5e0:	e3530000 	cmp	r3, #0
   2a5e4:	0a00000b 	beq	2a618 <L6470Params::Load(unsigned int)+0xf0>
   2a5e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a5ec:	e5930000 	ldr	r0, [r3]
   2a5f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a5f4:	e5933000 	ldr	r3, [r3]
   2a5f8:	e5933000 	ldr	r3, [r3]
   2a5fc:	e283300c 	add	r3, r3, #12
   2a600:	e5933000 	ldr	r3, [r3]
   2a604:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2a608:	e2822004 	add	r2, r2, #4
   2a60c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   2a610:	e12fff33 	blx	r3
   2a614:	ea000001 	b	2a620 <L6470Params::Load(unsigned int)+0xf8>
   2a618:	e3a04000 	mov	r4, #0
   2a61c:	ea000000 	b	2a624 <L6470Params::Load(unsigned int)+0xfc>
   2a620:	e3a04001 	mov	r4, #1
   2a624:	e24b3014 	sub	r3, fp, #20
   2a628:	e1a00003 	mov	r0, r3
   2a62c:	eb004672 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   2a630:	e1a03004 	mov	r3, r4
   2a634:	e1a00003 	mov	r0, r3
   2a638:	e24bd008 	sub	sp, fp, #8
   2a63c:	e8bd8810 	pop	{r4, fp, pc}
   2a640:	0002af28 	.word	0x0002af28

0002a644 <L6470Params::Load(unsigned int, char const*, unsigned int)>:
   2a644:	e92d4800 	push	{fp, lr}
   2a648:	e28db004 	add	fp, sp, #4
   2a64c:	e24dd018 	sub	sp, sp, #24
   2a650:	e50b0010 	str	r0, [fp, #-16]
   2a654:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2a658:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   2a65c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   2a660:	e51b3010 	ldr	r3, [fp, #-16]
   2a664:	e5933000 	ldr	r3, [r3]
   2a668:	e3530000 	cmp	r3, #0
   2a66c:	0a00001b 	beq	2a6e0 <L6470Params::Load(unsigned int, char const*, unsigned int)+0x9c>
   2a670:	e51b3010 	ldr	r3, [fp, #-16]
   2a674:	e3a02000 	mov	r2, #0
   2a678:	e5832004 	str	r2, [r3, #4]
   2a67c:	e24b300c 	sub	r3, fp, #12
   2a680:	e51b2010 	ldr	r2, [fp, #-16]
   2a684:	e59f1060 	ldr	r1, [pc, #96]	; 2a6ec <L6470Params::Load(unsigned int, char const*, unsigned int)+0xa8>
   2a688:	e1a00003 	mov	r0, r3
   2a68c:	eb004649 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   2a690:	e24b300c 	sub	r3, fp, #12
   2a694:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2a698:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2a69c:	e1a00003 	mov	r0, r3
   2a6a0:	eb0046af 	bl	3c164 <ReadConfigFile::Read(char const*, unsigned int)>
   2a6a4:	e51b3010 	ldr	r3, [fp, #-16]
   2a6a8:	e5930000 	ldr	r0, [r3]
   2a6ac:	e51b3010 	ldr	r3, [fp, #-16]
   2a6b0:	e5933000 	ldr	r3, [r3]
   2a6b4:	e5933000 	ldr	r3, [r3]
   2a6b8:	e2833008 	add	r3, r3, #8
   2a6bc:	e5933000 	ldr	r3, [r3]
   2a6c0:	e51b2010 	ldr	r2, [fp, #-16]
   2a6c4:	e2822004 	add	r2, r2, #4
   2a6c8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   2a6cc:	e12fff33 	blx	r3
   2a6d0:	e24b300c 	sub	r3, fp, #12
   2a6d4:	e1a00003 	mov	r0, r3
   2a6d8:	eb004647 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   2a6dc:	ea000000 	b	2a6e4 <L6470Params::Load(unsigned int, char const*, unsigned int)+0xa0>
   2a6e0:	e1a00000 	nop			; (mov r0, r0)
   2a6e4:	e24bd004 	sub	sp, fp, #4
   2a6e8:	e8bd8800 	pop	{fp, pc}
   2a6ec:	0002af28 	.word	0x0002af28

0002a6f0 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)>:
   2a6f0:	e92d4810 	push	{r4, fp, lr}
   2a6f4:	ed2d8b02 	vpush	{d8}
   2a6f8:	e28db010 	add	fp, sp, #16
   2a6fc:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   2a700:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   2a704:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
   2a708:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
   2a70c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   2a710:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2a714:	e6ef3073 	uxtb	r3, r3
   2a718:	e2833030 	add	r3, r3, #48	; 0x30
   2a71c:	e6ef2073 	uxtb	r2, r3
   2a720:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a724:	e5c32022 	strb	r2, [r3, #34]	; 0x22
   2a728:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a72c:	e3530000 	cmp	r3, #0
   2a730:	0a000006 	beq	2a750 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x60>
   2a734:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a738:	e2833004 	add	r3, r3, #4
   2a73c:	e3a02019 	mov	r2, #25
   2a740:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   2a744:	e1a00003 	mov	r0, r3
   2a748:	ebff9b2d 	bl	11404 <memcpy@plt>
   2a74c:	ea00000a 	b	2a77c <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x8c>
   2a750:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a754:	e5930000 	ldr	r0, [r3]
   2a758:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a75c:	e5933000 	ldr	r3, [r3]
   2a760:	e5933000 	ldr	r3, [r3]
   2a764:	e283300c 	add	r3, r3, #12
   2a768:	e5933000 	ldr	r3, [r3]
   2a76c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   2a770:	e2822004 	add	r2, r2, #4
   2a774:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
   2a778:	e12fff33 	blx	r3
   2a77c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a780:	e283101d 	add	r1, r3, #29
   2a784:	e24b0020 	sub	r0, fp, #32
   2a788:	e59b3004 	ldr	r3, [fp, #4]
   2a78c:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   2a790:	eb004543 	bl	3bca4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
   2a794:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a798:	ed938a02 	vldr	s16, [r3, #8]
   2a79c:	e3a01001 	mov	r1, #1
   2a7a0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a7a4:	ebffff34 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2a7a8:	e1a03000 	mov	r3, r0
   2a7ac:	e1a02003 	mov	r2, r3
   2a7b0:	e24b0020 	sub	r0, fp, #32
   2a7b4:	e3a03001 	mov	r3, #1
   2a7b8:	eeb00a48 	vmov.f32	s0, s16
   2a7bc:	e59f11d4 	ldr	r1, [pc, #468]	; 2a998 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x2a8>
   2a7c0:	ebfffef8 	bl	2a3a8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)>
   2a7c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a7c8:	ed938a03 	vldr	s16, [r3, #12]
   2a7cc:	e3a01002 	mov	r1, #2
   2a7d0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a7d4:	ebffff28 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2a7d8:	e1a03000 	mov	r3, r0
   2a7dc:	e1a02003 	mov	r2, r3
   2a7e0:	e24b0020 	sub	r0, fp, #32
   2a7e4:	e3a03001 	mov	r3, #1
   2a7e8:	eeb00a48 	vmov.f32	s0, s16
   2a7ec:	e59f11a8 	ldr	r1, [pc, #424]	; 2a99c <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x2ac>
   2a7f0:	ebfffeec 	bl	2a3a8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)>
   2a7f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a7f8:	ed938a04 	vldr	s16, [r3, #16]
   2a7fc:	e3a01004 	mov	r1, #4
   2a800:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a804:	ebffff1c 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2a808:	e1a03000 	mov	r3, r0
   2a80c:	e1a02003 	mov	r2, r3
   2a810:	e24b0020 	sub	r0, fp, #32
   2a814:	e3a03001 	mov	r3, #1
   2a818:	eeb00a48 	vmov.f32	s0, s16
   2a81c:	e59f117c 	ldr	r1, [pc, #380]	; 2a9a0 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x2b0>
   2a820:	ebfffee0 	bl	2a3a8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)>
   2a824:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a828:	ed938a05 	vldr	s16, [r3, #20]
   2a82c:	e3a01008 	mov	r1, #8
   2a830:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a834:	ebffff10 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2a838:	e1a03000 	mov	r3, r0
   2a83c:	e1a02003 	mov	r2, r3
   2a840:	e24b0020 	sub	r0, fp, #32
   2a844:	e3a03001 	mov	r3, #1
   2a848:	eeb00a48 	vmov.f32	s0, s16
   2a84c:	e59f1150 	ldr	r1, [pc, #336]	; 2a9a4 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x2b4>
   2a850:	ebfffed4 	bl	2a3a8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)>
   2a854:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a858:	e5d34018 	ldrb	r4, [r3, #24]
   2a85c:	e3a01010 	mov	r1, #16
   2a860:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a864:	ebffff04 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2a868:	e1a03000 	mov	r3, r0
   2a86c:	e1a02003 	mov	r2, r3
   2a870:	e24b0020 	sub	r0, fp, #32
   2a874:	e3a03001 	mov	r3, #1
   2a878:	e58d3000 	str	r3, [sp]
   2a87c:	e1a03002 	mov	r3, r2
   2a880:	e1a02004 	mov	r2, r4
   2a884:	e59f111c 	ldr	r1, [pc, #284]	; 2a9a8 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x2b8>
   2a888:	ebffe5cc 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   2a88c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a890:	e5d34019 	ldrb	r4, [r3, #25]
   2a894:	e3a01020 	mov	r1, #32
   2a898:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a89c:	ebfffef6 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2a8a0:	e1a03000 	mov	r3, r0
   2a8a4:	e1a02003 	mov	r2, r3
   2a8a8:	e24b0020 	sub	r0, fp, #32
   2a8ac:	e3a03001 	mov	r3, #1
   2a8b0:	e58d3000 	str	r3, [sp]
   2a8b4:	e1a03002 	mov	r3, r2
   2a8b8:	e1a02004 	mov	r2, r4
   2a8bc:	e59f10e8 	ldr	r1, [pc, #232]	; 2a9ac <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x2bc>
   2a8c0:	ebffe5be 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   2a8c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a8c8:	e5d3401a 	ldrb	r4, [r3, #26]
   2a8cc:	e3a01040 	mov	r1, #64	; 0x40
   2a8d0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a8d4:	ebfffee8 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2a8d8:	e1a03000 	mov	r3, r0
   2a8dc:	e1a02003 	mov	r2, r3
   2a8e0:	e24b0020 	sub	r0, fp, #32
   2a8e4:	e3a03001 	mov	r3, #1
   2a8e8:	e58d3000 	str	r3, [sp]
   2a8ec:	e1a03002 	mov	r3, r2
   2a8f0:	e1a02004 	mov	r2, r4
   2a8f4:	e59f10b4 	ldr	r1, [pc, #180]	; 2a9b0 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x2c0>
   2a8f8:	ebffe5b0 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   2a8fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a900:	e5d3401b 	ldrb	r4, [r3, #27]
   2a904:	e3a01080 	mov	r1, #128	; 0x80
   2a908:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a90c:	ebfffeda 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2a910:	e1a03000 	mov	r3, r0
   2a914:	e1a02003 	mov	r2, r3
   2a918:	e24b0020 	sub	r0, fp, #32
   2a91c:	e3a03001 	mov	r3, #1
   2a920:	e58d3000 	str	r3, [sp]
   2a924:	e1a03002 	mov	r3, r2
   2a928:	e1a02004 	mov	r2, r4
   2a92c:	e59f1080 	ldr	r1, [pc, #128]	; 2a9b4 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x2c4>
   2a930:	ebffe5a2 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   2a934:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a938:	e5d3401c 	ldrb	r4, [r3, #28]
   2a93c:	e3a01c01 	mov	r1, #256	; 0x100
   2a940:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   2a944:	ebfffecc 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2a948:	e1a03000 	mov	r3, r0
   2a94c:	e1a02003 	mov	r2, r3
   2a950:	e24b0020 	sub	r0, fp, #32
   2a954:	e3a03001 	mov	r3, #1
   2a958:	e58d3000 	str	r3, [sp]
   2a95c:	e1a03002 	mov	r3, r2
   2a960:	e1a02004 	mov	r2, r4
   2a964:	e59f104c 	ldr	r1, [pc, #76]	; 2a9b8 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)+0x2c8>
   2a968:	ebffe594 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   2a96c:	e24b3020 	sub	r3, fp, #32
   2a970:	e1a00003 	mov	r0, r3
   2a974:	ebffa755 	bl	146d0 <PropertiesBuilder::GetSize()>
   2a978:	e1a03000 	mov	r3, r0
   2a97c:	e1a02003 	mov	r2, r3
   2a980:	e59b3008 	ldr	r3, [fp, #8]
   2a984:	e5832000 	str	r2, [r3]
   2a988:	e1a00000 	nop			; (mov r0, r0)
   2a98c:	e24bd010 	sub	sp, fp, #16
   2a990:	ecbd8b02 	vpop	{d8}
   2a994:	e8bd8810 	pop	{r4, fp, pc}
   2a998:	00047944 	.word	0x00047944
   2a99c:	00047954 	.word	0x00047954
   2a9a0:	00047964 	.word	0x00047964
   2a9a4:	00047970 	.word	0x00047970
   2a9a8:	0004797c 	.word	0x0004797c
   2a9ac:	0004798c 	.word	0x0004798c
   2a9b0:	0004799c 	.word	0x0004799c
   2a9b4:	000479ac 	.word	0x000479ac
   2a9b8:	000479bc 	.word	0x000479bc

0002a9bc <L6470Params::Save(unsigned int, char*, unsigned int, unsigned int&)>:
   2a9bc:	e92d4800 	push	{fp, lr}
   2a9c0:	e28db004 	add	fp, sp, #4
   2a9c4:	e24dd018 	sub	sp, sp, #24
   2a9c8:	e50b0008 	str	r0, [fp, #-8]
   2a9cc:	e50b100c 	str	r1, [fp, #-12]
   2a9d0:	e50b2010 	str	r2, [fp, #-16]
   2a9d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2a9d8:	e51b3008 	ldr	r3, [fp, #-8]
   2a9dc:	e5933000 	ldr	r3, [r3]
   2a9e0:	e3530000 	cmp	r3, #0
   2a9e4:	1a000003 	bne	2a9f8 <L6470Params::Save(unsigned int, char*, unsigned int, unsigned int&)+0x3c>
   2a9e8:	e59b3004 	ldr	r3, [fp, #4]
   2a9ec:	e3a02000 	mov	r2, #0
   2a9f0:	e5832000 	str	r2, [r3]
   2a9f4:	ea000009 	b	2aa20 <L6470Params::Save(unsigned int, char*, unsigned int, unsigned int&)+0x64>
   2a9f8:	e59b3004 	ldr	r3, [fp, #4]
   2a9fc:	e58d3004 	str	r3, [sp, #4]
   2aa00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2aa04:	e58d3000 	str	r3, [sp]
   2aa08:	e51b3010 	ldr	r3, [fp, #-16]
   2aa0c:	e3a02000 	mov	r2, #0
   2aa10:	e51b100c 	ldr	r1, [fp, #-12]
   2aa14:	e51b0008 	ldr	r0, [fp, #-8]
   2aa18:	ebffff34 	bl	2a6f0 <L6470Params::Builder(unsigned int, TL6470Params const*, char*, unsigned int, unsigned int&)>
   2aa1c:	e1a00000 	nop			; (mov r0, r0)
   2aa20:	e24bd004 	sub	sp, fp, #4
   2aa24:	e8bd8800 	pop	{fp, pc}

0002aa28 <L6470Params::callbackFunction(char const*)>:
   2aa28:	e92d4800 	push	{fp, lr}
   2aa2c:	e28db004 	add	fp, sp, #4
   2aa30:	e24dd010 	sub	sp, sp, #16
   2aa34:	e50b0010 	str	r0, [fp, #-16]
   2aa38:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2aa3c:	e24b300c 	sub	r3, fp, #12
   2aa40:	e1a02003 	mov	r2, r3
   2aa44:	e59f12ec 	ldr	r1, [pc, #748]	; 2ad38 <L6470Params::callbackFunction(char const*)+0x310>
   2aa48:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2aa4c:	eb004692 	bl	3c49c <Sscan::Float(char const*, char const*, float&)>
   2aa50:	e1a03000 	mov	r3, r0
   2aa54:	e3530000 	cmp	r3, #0
   2aa58:	03a03001 	moveq	r3, #1
   2aa5c:	13a03000 	movne	r3, #0
   2aa60:	e6ef3073 	uxtb	r3, r3
   2aa64:	e3530000 	cmp	r3, #0
   2aa68:	0a000008 	beq	2aa90 <L6470Params::callbackFunction(char const*)+0x68>
   2aa6c:	e51b200c 	ldr	r2, [fp, #-12]
   2aa70:	e51b3010 	ldr	r3, [fp, #-16]
   2aa74:	e5832008 	str	r2, [r3, #8]
   2aa78:	e51b3010 	ldr	r3, [fp, #-16]
   2aa7c:	e5933004 	ldr	r3, [r3, #4]
   2aa80:	e3832001 	orr	r2, r3, #1
   2aa84:	e51b3010 	ldr	r3, [fp, #-16]
   2aa88:	e5832004 	str	r2, [r3, #4]
   2aa8c:	ea0000a7 	b	2ad30 <L6470Params::callbackFunction(char const*)+0x308>
   2aa90:	e24b300c 	sub	r3, fp, #12
   2aa94:	e1a02003 	mov	r2, r3
   2aa98:	e59f129c 	ldr	r1, [pc, #668]	; 2ad3c <L6470Params::callbackFunction(char const*)+0x314>
   2aa9c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2aaa0:	eb00467d 	bl	3c49c <Sscan::Float(char const*, char const*, float&)>
   2aaa4:	e1a03000 	mov	r3, r0
   2aaa8:	e3530000 	cmp	r3, #0
   2aaac:	03a03001 	moveq	r3, #1
   2aab0:	13a03000 	movne	r3, #0
   2aab4:	e6ef3073 	uxtb	r3, r3
   2aab8:	e3530000 	cmp	r3, #0
   2aabc:	0a000008 	beq	2aae4 <L6470Params::callbackFunction(char const*)+0xbc>
   2aac0:	e51b200c 	ldr	r2, [fp, #-12]
   2aac4:	e51b3010 	ldr	r3, [fp, #-16]
   2aac8:	e583200c 	str	r2, [r3, #12]
   2aacc:	e51b3010 	ldr	r3, [fp, #-16]
   2aad0:	e5933004 	ldr	r3, [r3, #4]
   2aad4:	e3832002 	orr	r2, r3, #2
   2aad8:	e51b3010 	ldr	r3, [fp, #-16]
   2aadc:	e5832004 	str	r2, [r3, #4]
   2aae0:	ea000092 	b	2ad30 <L6470Params::callbackFunction(char const*)+0x308>
   2aae4:	e24b300c 	sub	r3, fp, #12
   2aae8:	e1a02003 	mov	r2, r3
   2aaec:	e59f124c 	ldr	r1, [pc, #588]	; 2ad40 <L6470Params::callbackFunction(char const*)+0x318>
   2aaf0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2aaf4:	eb004668 	bl	3c49c <Sscan::Float(char const*, char const*, float&)>
   2aaf8:	e1a03000 	mov	r3, r0
   2aafc:	e3530000 	cmp	r3, #0
   2ab00:	03a03001 	moveq	r3, #1
   2ab04:	13a03000 	movne	r3, #0
   2ab08:	e6ef3073 	uxtb	r3, r3
   2ab0c:	e3530000 	cmp	r3, #0
   2ab10:	0a000008 	beq	2ab38 <L6470Params::callbackFunction(char const*)+0x110>
   2ab14:	e51b200c 	ldr	r2, [fp, #-12]
   2ab18:	e51b3010 	ldr	r3, [fp, #-16]
   2ab1c:	e5832010 	str	r2, [r3, #16]
   2ab20:	e51b3010 	ldr	r3, [fp, #-16]
   2ab24:	e5933004 	ldr	r3, [r3, #4]
   2ab28:	e3832004 	orr	r2, r3, #4
   2ab2c:	e51b3010 	ldr	r3, [fp, #-16]
   2ab30:	e5832004 	str	r2, [r3, #4]
   2ab34:	ea00007d 	b	2ad30 <L6470Params::callbackFunction(char const*)+0x308>
   2ab38:	e24b300c 	sub	r3, fp, #12
   2ab3c:	e1a02003 	mov	r2, r3
   2ab40:	e59f11fc 	ldr	r1, [pc, #508]	; 2ad44 <L6470Params::callbackFunction(char const*)+0x31c>
   2ab44:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2ab48:	eb004653 	bl	3c49c <Sscan::Float(char const*, char const*, float&)>
   2ab4c:	e1a03000 	mov	r3, r0
   2ab50:	e3530000 	cmp	r3, #0
   2ab54:	03a03001 	moveq	r3, #1
   2ab58:	13a03000 	movne	r3, #0
   2ab5c:	e6ef3073 	uxtb	r3, r3
   2ab60:	e3530000 	cmp	r3, #0
   2ab64:	0a000008 	beq	2ab8c <L6470Params::callbackFunction(char const*)+0x164>
   2ab68:	e51b200c 	ldr	r2, [fp, #-12]
   2ab6c:	e51b3010 	ldr	r3, [fp, #-16]
   2ab70:	e5832014 	str	r2, [r3, #20]
   2ab74:	e51b3010 	ldr	r3, [fp, #-16]
   2ab78:	e5933004 	ldr	r3, [r3, #4]
   2ab7c:	e3832008 	orr	r2, r3, #8
   2ab80:	e51b3010 	ldr	r3, [fp, #-16]
   2ab84:	e5832004 	str	r2, [r3, #4]
   2ab88:	ea000068 	b	2ad30 <L6470Params::callbackFunction(char const*)+0x308>
   2ab8c:	e24b3005 	sub	r3, fp, #5
   2ab90:	e1a02003 	mov	r2, r3
   2ab94:	e59f11ac 	ldr	r1, [pc, #428]	; 2ad48 <L6470Params::callbackFunction(char const*)+0x320>
   2ab98:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2ab9c:	eb004428 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   2aba0:	e1a03000 	mov	r3, r0
   2aba4:	e3530000 	cmp	r3, #0
   2aba8:	03a03001 	moveq	r3, #1
   2abac:	13a03000 	movne	r3, #0
   2abb0:	e6ef3073 	uxtb	r3, r3
   2abb4:	e3530000 	cmp	r3, #0
   2abb8:	0a000008 	beq	2abe0 <L6470Params::callbackFunction(char const*)+0x1b8>
   2abbc:	e55b2005 	ldrb	r2, [fp, #-5]
   2abc0:	e51b3010 	ldr	r3, [fp, #-16]
   2abc4:	e5c32018 	strb	r2, [r3, #24]
   2abc8:	e51b3010 	ldr	r3, [fp, #-16]
   2abcc:	e5933004 	ldr	r3, [r3, #4]
   2abd0:	e3832010 	orr	r2, r3, #16
   2abd4:	e51b3010 	ldr	r3, [fp, #-16]
   2abd8:	e5832004 	str	r2, [r3, #4]
   2abdc:	ea000053 	b	2ad30 <L6470Params::callbackFunction(char const*)+0x308>
   2abe0:	e24b3005 	sub	r3, fp, #5
   2abe4:	e1a02003 	mov	r2, r3
   2abe8:	e59f115c 	ldr	r1, [pc, #348]	; 2ad4c <L6470Params::callbackFunction(char const*)+0x324>
   2abec:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2abf0:	eb004413 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   2abf4:	e1a03000 	mov	r3, r0
   2abf8:	e3530000 	cmp	r3, #0
   2abfc:	03a03001 	moveq	r3, #1
   2ac00:	13a03000 	movne	r3, #0
   2ac04:	e6ef3073 	uxtb	r3, r3
   2ac08:	e3530000 	cmp	r3, #0
   2ac0c:	0a000008 	beq	2ac34 <L6470Params::callbackFunction(char const*)+0x20c>
   2ac10:	e55b2005 	ldrb	r2, [fp, #-5]
   2ac14:	e51b3010 	ldr	r3, [fp, #-16]
   2ac18:	e5c32019 	strb	r2, [r3, #25]
   2ac1c:	e51b3010 	ldr	r3, [fp, #-16]
   2ac20:	e5933004 	ldr	r3, [r3, #4]
   2ac24:	e3832020 	orr	r2, r3, #32
   2ac28:	e51b3010 	ldr	r3, [fp, #-16]
   2ac2c:	e5832004 	str	r2, [r3, #4]
   2ac30:	ea00003e 	b	2ad30 <L6470Params::callbackFunction(char const*)+0x308>
   2ac34:	e24b3005 	sub	r3, fp, #5
   2ac38:	e1a02003 	mov	r2, r3
   2ac3c:	e59f110c 	ldr	r1, [pc, #268]	; 2ad50 <L6470Params::callbackFunction(char const*)+0x328>
   2ac40:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2ac44:	eb0043fe 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   2ac48:	e1a03000 	mov	r3, r0
   2ac4c:	e3530000 	cmp	r3, #0
   2ac50:	03a03001 	moveq	r3, #1
   2ac54:	13a03000 	movne	r3, #0
   2ac58:	e6ef3073 	uxtb	r3, r3
   2ac5c:	e3530000 	cmp	r3, #0
   2ac60:	0a000008 	beq	2ac88 <L6470Params::callbackFunction(char const*)+0x260>
   2ac64:	e55b2005 	ldrb	r2, [fp, #-5]
   2ac68:	e51b3010 	ldr	r3, [fp, #-16]
   2ac6c:	e5c3201a 	strb	r2, [r3, #26]
   2ac70:	e51b3010 	ldr	r3, [fp, #-16]
   2ac74:	e5933004 	ldr	r3, [r3, #4]
   2ac78:	e3832040 	orr	r2, r3, #64	; 0x40
   2ac7c:	e51b3010 	ldr	r3, [fp, #-16]
   2ac80:	e5832004 	str	r2, [r3, #4]
   2ac84:	ea000029 	b	2ad30 <L6470Params::callbackFunction(char const*)+0x308>
   2ac88:	e24b3005 	sub	r3, fp, #5
   2ac8c:	e1a02003 	mov	r2, r3
   2ac90:	e59f10bc 	ldr	r1, [pc, #188]	; 2ad54 <L6470Params::callbackFunction(char const*)+0x32c>
   2ac94:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2ac98:	eb0043e9 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   2ac9c:	e1a03000 	mov	r3, r0
   2aca0:	e3530000 	cmp	r3, #0
   2aca4:	03a03001 	moveq	r3, #1
   2aca8:	13a03000 	movne	r3, #0
   2acac:	e6ef3073 	uxtb	r3, r3
   2acb0:	e3530000 	cmp	r3, #0
   2acb4:	0a000008 	beq	2acdc <L6470Params::callbackFunction(char const*)+0x2b4>
   2acb8:	e55b2005 	ldrb	r2, [fp, #-5]
   2acbc:	e51b3010 	ldr	r3, [fp, #-16]
   2acc0:	e5c3201b 	strb	r2, [r3, #27]
   2acc4:	e51b3010 	ldr	r3, [fp, #-16]
   2acc8:	e5933004 	ldr	r3, [r3, #4]
   2accc:	e3832080 	orr	r2, r3, #128	; 0x80
   2acd0:	e51b3010 	ldr	r3, [fp, #-16]
   2acd4:	e5832004 	str	r2, [r3, #4]
   2acd8:	ea000014 	b	2ad30 <L6470Params::callbackFunction(char const*)+0x308>
   2acdc:	e24b3005 	sub	r3, fp, #5
   2ace0:	e1a02003 	mov	r2, r3
   2ace4:	e59f106c 	ldr	r1, [pc, #108]	; 2ad58 <L6470Params::callbackFunction(char const*)+0x330>
   2ace8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2acec:	eb0043d4 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   2acf0:	e1a03000 	mov	r3, r0
   2acf4:	e3530000 	cmp	r3, #0
   2acf8:	03a03001 	moveq	r3, #1
   2acfc:	13a03000 	movne	r3, #0
   2ad00:	e6ef3073 	uxtb	r3, r3
   2ad04:	e3530000 	cmp	r3, #0
   2ad08:	0a000008 	beq	2ad30 <L6470Params::callbackFunction(char const*)+0x308>
   2ad0c:	e55b2005 	ldrb	r2, [fp, #-5]
   2ad10:	e51b3010 	ldr	r3, [fp, #-16]
   2ad14:	e5c3201c 	strb	r2, [r3, #28]
   2ad18:	e51b3010 	ldr	r3, [fp, #-16]
   2ad1c:	e5933004 	ldr	r3, [r3, #4]
   2ad20:	e3832c01 	orr	r2, r3, #256	; 0x100
   2ad24:	e51b3010 	ldr	r3, [fp, #-16]
   2ad28:	e5832004 	str	r2, [r3, #4]
   2ad2c:	e1a00000 	nop			; (mov r0, r0)
   2ad30:	e24bd004 	sub	sp, fp, #4
   2ad34:	e8bd8800 	pop	{fp, pc}
   2ad38:	00047944 	.word	0x00047944
   2ad3c:	00047954 	.word	0x00047954
   2ad40:	00047964 	.word	0x00047964
   2ad44:	00047970 	.word	0x00047970
   2ad48:	0004797c 	.word	0x0004797c
   2ad4c:	0004798c 	.word	0x0004798c
   2ad50:	0004799c 	.word	0x0004799c
   2ad54:	000479ac 	.word	0x000479ac
   2ad58:	000479bc 	.word	0x000479bc

0002ad5c <L6470Params::Set(L6470*)>:
   2ad5c:	e92d4800 	push	{fp, lr}
   2ad60:	e28db004 	add	fp, sp, #4
   2ad64:	e24dd008 	sub	sp, sp, #8
   2ad68:	e50b0008 	str	r0, [fp, #-8]
   2ad6c:	e50b100c 	str	r1, [fp, #-12]
   2ad70:	e3a01001 	mov	r1, #1
   2ad74:	e51b0008 	ldr	r0, [fp, #-8]
   2ad78:	ebfffdbf 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2ad7c:	e1a03000 	mov	r3, r0
   2ad80:	e3530000 	cmp	r3, #0
   2ad84:	0a000004 	beq	2ad9c <L6470Params::Set(L6470*)+0x40>
   2ad88:	e51b3008 	ldr	r3, [fp, #-8]
   2ad8c:	edd37a02 	vldr	s15, [r3, #8]
   2ad90:	eeb00a67 	vmov.f32	s0, s15
   2ad94:	e51b000c 	ldr	r0, [fp, #-12]
   2ad98:	eb000b6e 	bl	2db58 <L6470::setMinSpeed(float)>
   2ad9c:	e3a01002 	mov	r1, #2
   2ada0:	e51b0008 	ldr	r0, [fp, #-8]
   2ada4:	ebfffdb4 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2ada8:	e1a03000 	mov	r3, r0
   2adac:	e3530000 	cmp	r3, #0
   2adb0:	0a000004 	beq	2adc8 <L6470Params::Set(L6470*)+0x6c>
   2adb4:	e51b3008 	ldr	r3, [fp, #-8]
   2adb8:	edd37a03 	vldr	s15, [r3, #12]
   2adbc:	eeb00a67 	vmov.f32	s0, s15
   2adc0:	e51b000c 	ldr	r0, [fp, #-12]
   2adc4:	eb000b44 	bl	2dadc <L6470::setMaxSpeed(float)>
   2adc8:	e3a01004 	mov	r1, #4
   2adcc:	e51b0008 	ldr	r0, [fp, #-8]
   2add0:	ebfffda9 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2add4:	e1a03000 	mov	r3, r0
   2add8:	e3530000 	cmp	r3, #0
   2addc:	0a000004 	beq	2adf4 <L6470Params::Set(L6470*)+0x98>
   2ade0:	e51b3008 	ldr	r3, [fp, #-8]
   2ade4:	edd37a04 	vldr	s15, [r3, #16]
   2ade8:	eeb00a67 	vmov.f32	s0, s15
   2adec:	e51b000c 	ldr	r0, [fp, #-12]
   2adf0:	eb000b9f 	bl	2dc74 <L6470::setAcc(float)>
   2adf4:	e3a01008 	mov	r1, #8
   2adf8:	e51b0008 	ldr	r0, [fp, #-8]
   2adfc:	ebfffd9e 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2ae00:	e1a03000 	mov	r3, r0
   2ae04:	e3530000 	cmp	r3, #0
   2ae08:	0a000004 	beq	2ae20 <L6470Params::Set(L6470*)+0xc4>
   2ae0c:	e51b3008 	ldr	r3, [fp, #-8]
   2ae10:	edd37a05 	vldr	s15, [r3, #20]
   2ae14:	eeb00a67 	vmov.f32	s0, s15
   2ae18:	e51b000c 	ldr	r0, [fp, #-12]
   2ae1c:	eb000bb3 	bl	2dcf0 <L6470::setDec(float)>
   2ae20:	e3a01010 	mov	r1, #16
   2ae24:	e51b0008 	ldr	r0, [fp, #-8]
   2ae28:	ebfffd93 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2ae2c:	e1a03000 	mov	r3, r0
   2ae30:	e3530000 	cmp	r3, #0
   2ae34:	0a000004 	beq	2ae4c <L6470Params::Set(L6470*)+0xf0>
   2ae38:	e51b3008 	ldr	r3, [fp, #-8]
   2ae3c:	e5d33018 	ldrb	r3, [r3, #24]
   2ae40:	e1a01003 	mov	r1, r3
   2ae44:	e51b000c 	ldr	r0, [fp, #-12]
   2ae48:	eb000d23 	bl	2e2dc <L6470::setHoldKVAL(unsigned char)>
   2ae4c:	e3a01020 	mov	r1, #32
   2ae50:	e51b0008 	ldr	r0, [fp, #-8]
   2ae54:	ebfffd88 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2ae58:	e1a03000 	mov	r3, r0
   2ae5c:	e3530000 	cmp	r3, #0
   2ae60:	0a000004 	beq	2ae78 <L6470Params::Set(L6470*)+0x11c>
   2ae64:	e51b3008 	ldr	r3, [fp, #-8]
   2ae68:	e5d33019 	ldrb	r3, [r3, #25]
   2ae6c:	e1a01003 	mov	r1, r3
   2ae70:	e51b000c 	ldr	r0, [fp, #-12]
   2ae74:	eb000cfe 	bl	2e274 <L6470::setRunKVAL(unsigned char)>
   2ae78:	e3a01040 	mov	r1, #64	; 0x40
   2ae7c:	e51b0008 	ldr	r0, [fp, #-8]
   2ae80:	ebfffd7d 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2ae84:	e1a03000 	mov	r3, r0
   2ae88:	e3530000 	cmp	r3, #0
   2ae8c:	0a000004 	beq	2aea4 <L6470Params::Set(L6470*)+0x148>
   2ae90:	e51b3008 	ldr	r3, [fp, #-8]
   2ae94:	e5d3301a 	ldrb	r3, [r3, #26]
   2ae98:	e1a01003 	mov	r1, r3
   2ae9c:	e51b000c 	ldr	r0, [fp, #-12]
   2aea0:	eb000cbf 	bl	2e1a4 <L6470::setAccKVAL(unsigned char)>
   2aea4:	e3a01080 	mov	r1, #128	; 0x80
   2aea8:	e51b0008 	ldr	r0, [fp, #-8]
   2aeac:	ebfffd72 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2aeb0:	e1a03000 	mov	r3, r0
   2aeb4:	e3530000 	cmp	r3, #0
   2aeb8:	0a000004 	beq	2aed0 <L6470Params::Set(L6470*)+0x174>
   2aebc:	e51b3008 	ldr	r3, [fp, #-8]
   2aec0:	e5d3301b 	ldrb	r3, [r3, #27]
   2aec4:	e1a01003 	mov	r1, r3
   2aec8:	e51b000c 	ldr	r0, [fp, #-12]
   2aecc:	eb000cce 	bl	2e20c <L6470::setDecKVAL(unsigned char)>
   2aed0:	e3a01c01 	mov	r1, #256	; 0x100
   2aed4:	e51b0008 	ldr	r0, [fp, #-8]
   2aed8:	ebfffd67 	bl	2a47c <L6470Params::isMaskSet(unsigned int)>
   2aedc:	e1a03000 	mov	r3, r0
   2aee0:	e3530000 	cmp	r3, #0
   2aee4:	0a000004 	beq	2aefc <L6470Params::Set(L6470*)+0x1a0>
   2aee8:	e51b3008 	ldr	r3, [fp, #-8]
   2aeec:	e5d3301c 	ldrb	r3, [r3, #28]
   2aef0:	e1a01003 	mov	r1, r3
   2aef4:	e51b000c 	ldr	r0, [fp, #-12]
   2aef8:	eb000ed5 	bl	2ea54 <L6470::setMicroSteps(unsigned int)>
   2aefc:	e1a00000 	nop			; (mov r0, r0)
   2af00:	e24bd004 	sub	sp, fp, #4
   2af04:	e8bd8800 	pop	{fp, pc}

0002af08 <L6470Params::Dump()>:
   2af08:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2af0c:	e28db000 	add	fp, sp, #0
   2af10:	e24dd00c 	sub	sp, sp, #12
   2af14:	e50b0008 	str	r0, [fp, #-8]
   2af18:	e1a00000 	nop			; (mov r0, r0)
   2af1c:	e28bd000 	add	sp, fp, #0
   2af20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2af24:	e12fff1e 	bx	lr

0002af28 <L6470Params::staticCallbackFunction(void*, char const*)>:
   2af28:	e92d4800 	push	{fp, lr}
   2af2c:	e28db004 	add	fp, sp, #4
   2af30:	e24dd008 	sub	sp, sp, #8
   2af34:	e50b0008 	str	r0, [fp, #-8]
   2af38:	e50b100c 	str	r1, [fp, #-12]
   2af3c:	e51b100c 	ldr	r1, [fp, #-12]
   2af40:	e51b0008 	ldr	r0, [fp, #-8]
   2af44:	ebfffeb7 	bl	2aa28 <L6470Params::callbackFunction(char const*)>
   2af48:	e1a00000 	nop			; (mov r0, r0)
   2af4c:	e24bd004 	sub	sp, fp, #4
   2af50:	e8bd8800 	pop	{fp, pc}

0002af54 <SparkFunDmx::SetGlobalSpiCs(unsigned char)>:
   2af54:	e3a03001 	mov	r3, #1
   2af58:	e5c010a4 	strb	r1, [r0, #164]	; 0xa4
   2af5c:	e5c030a7 	strb	r3, [r0, #167]	; 0xa7
   2af60:	e12fff1e 	bx	lr

0002af64 <SparkFunDmx::SetGlobalResetPin(unsigned char)>:
   2af64:	e3a03001 	mov	r3, #1
   2af68:	e5c010a5 	strb	r1, [r0, #165]	; 0xa5
   2af6c:	e5c030a8 	strb	r3, [r0, #168]	; 0xa8
   2af70:	e12fff1e 	bx	lr

0002af74 <SparkFunDmx::SetGlobalBusyPin(unsigned char)>:
   2af74:	e3a03001 	mov	r3, #1
   2af78:	e5c010a6 	strb	r1, [r0, #166]	; 0xa6
   2af7c:	e5c030a9 	strb	r3, [r0, #169]	; 0xa9
   2af80:	e12fff1e 	bx	lr

0002af84 <SparkFunDmx::SetLocalPosition(unsigned char)>:
   2af84:	e3a03001 	mov	r3, #1
   2af88:	e5c010aa 	strb	r1, [r0, #170]	; 0xaa
   2af8c:	e5c030ae 	strb	r3, [r0, #174]	; 0xae
   2af90:	e12fff1e 	bx	lr

0002af94 <SparkFunDmx::SetLocalSpiCs(unsigned char)>:
   2af94:	e3a03001 	mov	r3, #1
   2af98:	e5c010ab 	strb	r1, [r0, #171]	; 0xab
   2af9c:	e5c030af 	strb	r3, [r0, #175]	; 0xaf
   2afa0:	e12fff1e 	bx	lr

0002afa4 <SparkFunDmx::SetLocalResetPin(unsigned char)>:
   2afa4:	e3a03001 	mov	r3, #1
   2afa8:	e5c010ac 	strb	r1, [r0, #172]	; 0xac
   2afac:	e5c030b0 	strb	r3, [r0, #176]	; 0xb0
   2afb0:	e12fff1e 	bx	lr

0002afb4 <SparkFunDmx::SetLocalBusyPin(unsigned char)>:
   2afb4:	e3a03001 	mov	r3, #1
   2afb8:	e5c010ad 	strb	r1, [r0, #173]	; 0xad
   2afbc:	e5c030b1 	strb	r3, [r0, #177]	; 0xb1
   2afc0:	e12fff1e 	bx	lr

0002afc4 <SparkFunDmxParams::SparkFunDmxParams(SparkFunDmxParamsStore*)>:
   2afc4:	e3a03000 	mov	r3, #0
   2afc8:	e92d4010 	push	{r4, lr}
   2afcc:	e3a02010 	mov	r2, #16
   2afd0:	e5803004 	str	r3, [r0, #4]
   2afd4:	e5c03009 	strb	r3, [r0, #9]
   2afd8:	e59f301c 	ldr	r3, [pc, #28]	; 2affc <SparkFunDmxParams::SparkFunDmxParams(SparkFunDmxParamsStore*)+0x38>
   2afdc:	e1a04000 	mov	r4, r0
   2afe0:	e5801000 	str	r1, [r0]
   2afe4:	e1c030ba 	strh	r3, [r0, #10]
   2afe8:	e59f1010 	ldr	r1, [pc, #16]	; 2b000 <SparkFunDmxParams::SparkFunDmxParams(SparkFunDmxParamsStore*)+0x3c>
   2afec:	e280000c 	add	r0, r0, #12
   2aff0:	ebff992a 	bl	114a0 <strncpy@plt>
   2aff4:	e1a00004 	mov	r0, r4
   2aff8:	e8bd8010 	pop	{r4, pc}
   2affc:	0000111b 	.word	0x0000111b
   2b000:	00047b70 	.word	0x00047b70

0002b004 <SparkFunDmxParams::Load()>:
   2b004:	e3a03000 	mov	r3, #0
   2b008:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
   2b00c:	e1a02000 	mov	r2, r0
   2b010:	e5803004 	str	r3, [r0, #4]
   2b014:	e1a04000 	mov	r4, r0
   2b018:	e59f1068 	ldr	r1, [pc, #104]	; 2b088 <SparkFunDmxParams::Load()+0x84>
   2b01c:	e1a0000d 	mov	r0, sp
   2b020:	eb0043e4 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   2b024:	e59f1060 	ldr	r1, [pc, #96]	; 2b08c <SparkFunDmxParams::Load()+0x88>
   2b028:	e1a0000d 	mov	r0, sp
   2b02c:	eb004401 	bl	3c038 <ReadConfigFile::Read(char const*)>
   2b030:	e2505000 	subs	r5, r0, #0
   2b034:	e5940000 	ldr	r0, [r4]
   2b038:	0a00000a 	beq	2b068 <SparkFunDmxParams::Load()+0x64>
   2b03c:	e3500000 	cmp	r0, #0
   2b040:	0a000003 	beq	2b054 <SparkFunDmxParams::Load()+0x50>
   2b044:	e5903000 	ldr	r3, [r0]
   2b048:	e2841004 	add	r1, r4, #4
   2b04c:	e5933008 	ldr	r3, [r3, #8]
   2b050:	e12fff33 	blx	r3
   2b054:	e1a0000d 	mov	r0, sp
   2b058:	eb0043e7 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   2b05c:	e1a00005 	mov	r0, r5
   2b060:	e28dd00c 	add	sp, sp, #12
   2b064:	e8bd8030 	pop	{r4, r5, pc}
   2b068:	e3500000 	cmp	r0, #0
   2b06c:	0afffff8 	beq	2b054 <SparkFunDmxParams::Load()+0x50>
   2b070:	e5903000 	ldr	r3, [r0]
   2b074:	e2841004 	add	r1, r4, #4
   2b078:	e3a05001 	mov	r5, #1
   2b07c:	e593300c 	ldr	r3, [r3, #12]
   2b080:	e12fff33 	blx	r3
   2b084:	eafffff2 	b	2b054 <SparkFunDmxParams::Load()+0x50>
   2b088:	0002b584 	.word	0x0002b584
   2b08c:	00047c30 	.word	0x00047c30

0002b090 <SparkFunDmxParams::Load(char const*, unsigned int)>:
   2b090:	e5903000 	ldr	r3, [r0]
   2b094:	e3530000 	cmp	r3, #0
   2b098:	012fff1e 	bxeq	lr
   2b09c:	e3a03000 	mov	r3, #0
   2b0a0:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   2b0a4:	e1a06002 	mov	r6, r2
   2b0a8:	e5803004 	str	r3, [r0, #4]
   2b0ac:	e1a05001 	mov	r5, r1
   2b0b0:	e1a04000 	mov	r4, r0
   2b0b4:	e1a02000 	mov	r2, r0
   2b0b8:	e59f1038 	ldr	r1, [pc, #56]	; 2b0f8 <SparkFunDmxParams::Load(char const*, unsigned int)+0x68>
   2b0bc:	e1a0000d 	mov	r0, sp
   2b0c0:	eb0043bc 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   2b0c4:	e1a02006 	mov	r2, r6
   2b0c8:	e1a01005 	mov	r1, r5
   2b0cc:	e1a0000d 	mov	r0, sp
   2b0d0:	eb004423 	bl	3c164 <ReadConfigFile::Read(char const*, unsigned int)>
   2b0d4:	e1a01004 	mov	r1, r4
   2b0d8:	e4910004 	ldr	r0, [r1], #4
   2b0dc:	e5903000 	ldr	r3, [r0]
   2b0e0:	e5933008 	ldr	r3, [r3, #8]
   2b0e4:	e12fff33 	blx	r3
   2b0e8:	e1a0000d 	mov	r0, sp
   2b0ec:	eb0043c2 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   2b0f0:	e28dd008 	add	sp, sp, #8
   2b0f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b0f8:	0002b584 	.word	0x0002b584

0002b0fc <SparkFunDmxParams::Load(unsigned int)>:
   2b0fc:	e2813030 	add	r3, r1, #48	; 0x30
   2b100:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   2b104:	e1a02000 	mov	r2, r0
   2b108:	e5c03011 	strb	r3, [r0, #17]
   2b10c:	e3a03000 	mov	r3, #0
   2b110:	e1a04000 	mov	r4, r0
   2b114:	e5803004 	str	r3, [r0, #4]
   2b118:	e1a05001 	mov	r5, r1
   2b11c:	e1a0000d 	mov	r0, sp
   2b120:	e59f106c 	ldr	r1, [pc, #108]	; 2b194 <SparkFunDmxParams::Load(unsigned int)+0x98>
   2b124:	eb0043a3 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   2b128:	e284100c 	add	r1, r4, #12
   2b12c:	e1a0000d 	mov	r0, sp
   2b130:	eb0043c0 	bl	3c038 <ReadConfigFile::Read(char const*)>
   2b134:	e2506000 	subs	r6, r0, #0
   2b138:	e5940000 	ldr	r0, [r4]
   2b13c:	0a00000b 	beq	2b170 <SparkFunDmxParams::Load(unsigned int)+0x74>
   2b140:	e3500000 	cmp	r0, #0
   2b144:	0a000004 	beq	2b15c <SparkFunDmxParams::Load(unsigned int)+0x60>
   2b148:	e5903000 	ldr	r3, [r0]
   2b14c:	e2842004 	add	r2, r4, #4
   2b150:	e1a01005 	mov	r1, r5
   2b154:	e5933010 	ldr	r3, [r3, #16]
   2b158:	e12fff33 	blx	r3
   2b15c:	e1a0000d 	mov	r0, sp
   2b160:	eb0043a5 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   2b164:	e1a00006 	mov	r0, r6
   2b168:	e28dd008 	add	sp, sp, #8
   2b16c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b170:	e3500000 	cmp	r0, #0
   2b174:	0afffff8 	beq	2b15c <SparkFunDmxParams::Load(unsigned int)+0x60>
   2b178:	e5903000 	ldr	r3, [r0]
   2b17c:	e2842004 	add	r2, r4, #4
   2b180:	e1a01005 	mov	r1, r5
   2b184:	e5933014 	ldr	r3, [r3, #20]
   2b188:	e12fff33 	blx	r3
   2b18c:	e3a06001 	mov	r6, #1
   2b190:	eafffff1 	b	2b15c <SparkFunDmxParams::Load(unsigned int)+0x60>
   2b194:	0002b584 	.word	0x0002b584

0002b198 <SparkFunDmxParams::Load(unsigned int, char const*, unsigned int)>:
   2b198:	e590c000 	ldr	ip, [r0]
   2b19c:	e35c0000 	cmp	ip, #0
   2b1a0:	012fff1e 	bxeq	lr
   2b1a4:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b1a8:	e1a07003 	mov	r7, r3
   2b1ac:	e3a03000 	mov	r3, #0
   2b1b0:	e5803004 	str	r3, [r0, #4]
   2b1b4:	e1a06002 	mov	r6, r2
   2b1b8:	e1a05001 	mov	r5, r1
   2b1bc:	e1a04000 	mov	r4, r0
   2b1c0:	e1a02000 	mov	r2, r0
   2b1c4:	e59f103c 	ldr	r1, [pc, #60]	; 2b208 <SparkFunDmxParams::Load(unsigned int, char const*, unsigned int)+0x70>
   2b1c8:	e1a0000d 	mov	r0, sp
   2b1cc:	eb004379 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   2b1d0:	e1a02007 	mov	r2, r7
   2b1d4:	e1a01006 	mov	r1, r6
   2b1d8:	e1a0000d 	mov	r0, sp
   2b1dc:	eb0043e0 	bl	3c164 <ReadConfigFile::Read(char const*, unsigned int)>
   2b1e0:	e1a02004 	mov	r2, r4
   2b1e4:	e1a01005 	mov	r1, r5
   2b1e8:	e4920004 	ldr	r0, [r2], #4
   2b1ec:	e5903000 	ldr	r3, [r0]
   2b1f0:	e5933010 	ldr	r3, [r3, #16]
   2b1f4:	e12fff33 	blx	r3
   2b1f8:	e1a0000d 	mov	r0, sp
   2b1fc:	eb00437e 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   2b200:	e28dd00c 	add	sp, sp, #12
   2b204:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b208:	0002b584 	.word	0x0002b584

0002b20c <SparkFunDmxParams::callbackFunction(char const*)>:
   2b20c:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
   2b210:	e1a05001 	mov	r5, r1
   2b214:	e1a04000 	mov	r4, r0
   2b218:	e28d2007 	add	r2, sp, #7
   2b21c:	e59f10b4 	ldr	r1, [pc, #180]	; 2b2d8 <SparkFunDmxParams::callbackFunction(char const*)+0xcc>
   2b220:	e1a00005 	mov	r0, r5
   2b224:	eb004286 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   2b228:	e3500000 	cmp	r0, #0
   2b22c:	1a000007 	bne	2b250 <SparkFunDmxParams::callbackFunction(char const*)+0x44>
   2b230:	e5dd3007 	ldrb	r3, [sp, #7]
   2b234:	e3530007 	cmp	r3, #7
   2b238:	95c43008 	strbls	r3, [r4, #8]
   2b23c:	95943004 	ldrls	r3, [r4, #4]
   2b240:	93833001 	orrls	r3, r3, #1
   2b244:	9a00000b 	bls	2b278 <SparkFunDmxParams::callbackFunction(char const*)+0x6c>
   2b248:	e28dd00c 	add	sp, sp, #12
   2b24c:	e8bd8030 	pop	{r4, r5, pc}
   2b250:	e28d2007 	add	r2, sp, #7
   2b254:	e59f1080 	ldr	r1, [pc, #128]	; 2b2dc <SparkFunDmxParams::callbackFunction(char const*)+0xd0>
   2b258:	e1a00005 	mov	r0, r5
   2b25c:	eb004278 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   2b260:	e3500000 	cmp	r0, #0
   2b264:	1a000005 	bne	2b280 <SparkFunDmxParams::callbackFunction(char const*)+0x74>
   2b268:	e5dd3007 	ldrb	r3, [sp, #7]
   2b26c:	e5c43009 	strb	r3, [r4, #9]
   2b270:	e5943004 	ldr	r3, [r4, #4]
   2b274:	e3833002 	orr	r3, r3, #2
   2b278:	e5843004 	str	r3, [r4, #4]
   2b27c:	eafffff1 	b	2b248 <SparkFunDmxParams::callbackFunction(char const*)+0x3c>
   2b280:	e28d2007 	add	r2, sp, #7
   2b284:	e59f1054 	ldr	r1, [pc, #84]	; 2b2e0 <SparkFunDmxParams::callbackFunction(char const*)+0xd4>
   2b288:	e1a00005 	mov	r0, r5
   2b28c:	eb00426c 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   2b290:	e3500000 	cmp	r0, #0
   2b294:	1a000004 	bne	2b2ac <SparkFunDmxParams::callbackFunction(char const*)+0xa0>
   2b298:	e5dd3007 	ldrb	r3, [sp, #7]
   2b29c:	e5c4300a 	strb	r3, [r4, #10]
   2b2a0:	e5943004 	ldr	r3, [r4, #4]
   2b2a4:	e3833004 	orr	r3, r3, #4
   2b2a8:	eafffff2 	b	2b278 <SparkFunDmxParams::callbackFunction(char const*)+0x6c>
   2b2ac:	e28d2007 	add	r2, sp, #7
   2b2b0:	e59f102c 	ldr	r1, [pc, #44]	; 2b2e4 <SparkFunDmxParams::callbackFunction(char const*)+0xd8>
   2b2b4:	e1a00005 	mov	r0, r5
   2b2b8:	eb004261 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   2b2bc:	e3500000 	cmp	r0, #0
   2b2c0:	1affffe0 	bne	2b248 <SparkFunDmxParams::callbackFunction(char const*)+0x3c>
   2b2c4:	e5dd3007 	ldrb	r3, [sp, #7]
   2b2c8:	e5c4300b 	strb	r3, [r4, #11]
   2b2cc:	e5943004 	ldr	r3, [r4, #4]
   2b2d0:	e3833008 	orr	r3, r3, #8
   2b2d4:	eaffffe7 	b	2b278 <SparkFunDmxParams::callbackFunction(char const*)+0x6c>
   2b2d8:	00047c40 	.word	0x00047c40
   2b2dc:	00047c54 	.word	0x00047c54
   2b2e0:	00047c64 	.word	0x00047c64
   2b2e4:	00047c78 	.word	0x00047c78

0002b2e8 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)>:
   2b2e8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b2ec:	e24dd01c 	sub	sp, sp, #28
   2b2f0:	e3510000 	cmp	r1, #0
   2b2f4:	e1a06002 	mov	r6, r2
   2b2f8:	e1a04000 	mov	r4, r0
   2b2fc:	e1a07003 	mov	r7, r3
   2b300:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   2b304:	e2802004 	add	r2, r0, #4
   2b308:	0a000038 	beq	2b3f0 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x108>
   2b30c:	e5913000 	ldr	r3, [r1]
   2b310:	e3550007 	cmp	r5, #7
   2b314:	e5803004 	str	r3, [r0, #4]
   2b318:	e5913004 	ldr	r3, [r1, #4]
   2b31c:	e5823004 	str	r3, [r2, #4]
   2b320:	9a00003b 	bls	2b414 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x12c>
   2b324:	e59f1100 	ldr	r1, [pc, #256]	; 2b42c <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x144>
   2b328:	e1a03007 	mov	r3, r7
   2b32c:	e1a02006 	mov	r2, r6
   2b330:	e28d000c 	add	r0, sp, #12
   2b334:	eb00425a 	bl	3bca4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
   2b338:	e3550007 	cmp	r5, #7
   2b33c:	8a000009 	bhi	2b368 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x80>
   2b340:	e3a01001 	mov	r1, #1
   2b344:	e5940004 	ldr	r0, [r4, #4]
   2b348:	eb00008e 	bl	2b588 <SparkFunDmxParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2b34c:	e3a03001 	mov	r3, #1
   2b350:	e58d3000 	str	r3, [sp]
   2b354:	e5d42008 	ldrb	r2, [r4, #8]
   2b358:	e59f10d0 	ldr	r1, [pc, #208]	; 2b430 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x148>
   2b35c:	e1a03000 	mov	r3, r0
   2b360:	e28d000c 	add	r0, sp, #12
   2b364:	ebffe315 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   2b368:	e5940004 	ldr	r0, [r4, #4]
   2b36c:	e3a01004 	mov	r1, #4
   2b370:	eb000084 	bl	2b588 <SparkFunDmxParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2b374:	e3a05001 	mov	r5, #1
   2b378:	e5d4200a 	ldrb	r2, [r4, #10]
   2b37c:	e58d5000 	str	r5, [sp]
   2b380:	e59f10ac 	ldr	r1, [pc, #172]	; 2b434 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x14c>
   2b384:	e1a03000 	mov	r3, r0
   2b388:	e28d000c 	add	r0, sp, #12
   2b38c:	ebffe30b 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   2b390:	e5940004 	ldr	r0, [r4, #4]
   2b394:	e3a01008 	mov	r1, #8
   2b398:	eb00007a 	bl	2b588 <SparkFunDmxParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2b39c:	e5d4200b 	ldrb	r2, [r4, #11]
   2b3a0:	e58d5000 	str	r5, [sp]
   2b3a4:	e59f108c 	ldr	r1, [pc, #140]	; 2b438 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x150>
   2b3a8:	e1a03000 	mov	r3, r0
   2b3ac:	e28d000c 	add	r0, sp, #12
   2b3b0:	ebffe302 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   2b3b4:	e5940004 	ldr	r0, [r4, #4]
   2b3b8:	e3a01002 	mov	r1, #2
   2b3bc:	eb000071 	bl	2b588 <SparkFunDmxParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2b3c0:	e5d42009 	ldrb	r2, [r4, #9]
   2b3c4:	e59f1070 	ldr	r1, [pc, #112]	; 2b43c <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x154>
   2b3c8:	e58d5000 	str	r5, [sp]
   2b3cc:	e1a03000 	mov	r3, r0
   2b3d0:	e28d000c 	add	r0, sp, #12
   2b3d4:	ebffe2f9 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   2b3d8:	e28d000c 	add	r0, sp, #12
   2b3dc:	ebffa4bb 	bl	146d0 <PropertiesBuilder::GetSize()>
   2b3e0:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   2b3e4:	e5830000 	str	r0, [r3]
   2b3e8:	e28dd01c 	add	sp, sp, #28
   2b3ec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b3f0:	e5900000 	ldr	r0, [r0]
   2b3f4:	e3550007 	cmp	r5, #7
   2b3f8:	e5903000 	ldr	r3, [r0]
   2b3fc:	8a000006 	bhi	2b41c <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x134>
   2b400:	e5933014 	ldr	r3, [r3, #20]
   2b404:	e1a01005 	mov	r1, r5
   2b408:	e12fff33 	blx	r3
   2b40c:	e2853030 	add	r3, r5, #48	; 0x30
   2b410:	e5c43011 	strb	r3, [r4, #17]
   2b414:	e284100c 	add	r1, r4, #12
   2b418:	eaffffc2 	b	2b328 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x40>
   2b41c:	e593300c 	ldr	r3, [r3, #12]
   2b420:	e1a01002 	mov	r1, r2
   2b424:	e12fff33 	blx	r3
   2b428:	eaffffbd 	b	2b324 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)+0x3c>
   2b42c:	00047c30 	.word	0x00047c30
   2b430:	00047c40 	.word	0x00047c40
   2b434:	00047c64 	.word	0x00047c64
   2b438:	00047c78 	.word	0x00047c78
   2b43c:	00047c54 	.word	0x00047c54

0002b440 <SparkFunDmxParams::Save(char*, unsigned int, unsigned int&, unsigned int)>:
   2b440:	e590c000 	ldr	ip, [r0]
   2b444:	e35c0000 	cmp	ip, #0
   2b448:	1a000001 	bne	2b454 <SparkFunDmxParams::Save(char*, unsigned int, unsigned int&, unsigned int)+0x14>
   2b44c:	e583c000 	str	ip, [r3]
   2b450:	e12fff1e 	bx	lr
   2b454:	e92d4007 	push	{r0, r1, r2, lr}
   2b458:	e1a0c003 	mov	ip, r3
   2b45c:	e1a03002 	mov	r3, r2
   2b460:	e1a02001 	mov	r2, r1
   2b464:	e59d1010 	ldr	r1, [sp, #16]
   2b468:	e58dc000 	str	ip, [sp]
   2b46c:	e58d1004 	str	r1, [sp, #4]
   2b470:	e3a01000 	mov	r1, #0
   2b474:	ebffff9b 	bl	2b2e8 <SparkFunDmxParams::Builder(TSparkFunDmxParams const*, char*, unsigned int, unsigned int&, unsigned int)>
   2b478:	e28dd00c 	add	sp, sp, #12
   2b47c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002b480 <SparkFunDmxParams::SetGlobal(SparkFunDmx*)>:
   2b480:	e92d4070 	push	{r4, r5, r6, lr}
   2b484:	e1a04000 	mov	r4, r0
   2b488:	e1a05001 	mov	r5, r1
   2b48c:	e5900004 	ldr	r0, [r0, #4]
   2b490:	e3a01002 	mov	r1, #2
   2b494:	eb00003b 	bl	2b588 <SparkFunDmxParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2b498:	e3500000 	cmp	r0, #0
   2b49c:	0a000002 	beq	2b4ac <SparkFunDmxParams::SetGlobal(SparkFunDmx*)+0x2c>
   2b4a0:	e5d41009 	ldrb	r1, [r4, #9]
   2b4a4:	e1a00005 	mov	r0, r5
   2b4a8:	ebfffea9 	bl	2af54 <SparkFunDmx::SetGlobalSpiCs(unsigned char)>
   2b4ac:	e3a01004 	mov	r1, #4
   2b4b0:	e5940004 	ldr	r0, [r4, #4]
   2b4b4:	eb000033 	bl	2b588 <SparkFunDmxParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2b4b8:	e3500000 	cmp	r0, #0
   2b4bc:	0a000002 	beq	2b4cc <SparkFunDmxParams::SetGlobal(SparkFunDmx*)+0x4c>
   2b4c0:	e5d4100a 	ldrb	r1, [r4, #10]
   2b4c4:	e1a00005 	mov	r0, r5
   2b4c8:	ebfffea5 	bl	2af64 <SparkFunDmx::SetGlobalResetPin(unsigned char)>
   2b4cc:	e3a01008 	mov	r1, #8
   2b4d0:	e5940004 	ldr	r0, [r4, #4]
   2b4d4:	eb00002b 	bl	2b588 <SparkFunDmxParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2b4d8:	e3500000 	cmp	r0, #0
   2b4dc:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b4e0:	e5d4100b 	ldrb	r1, [r4, #11]
   2b4e4:	e1a00005 	mov	r0, r5
   2b4e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b4ec:	eafffea0 	b	2af74 <SparkFunDmx::SetGlobalBusyPin(unsigned char)>

0002b4f0 <SparkFunDmxParams::SetLocal(SparkFunDmx*)>:
   2b4f0:	e92d4070 	push	{r4, r5, r6, lr}
   2b4f4:	e1a04000 	mov	r4, r0
   2b4f8:	e1a05001 	mov	r5, r1
   2b4fc:	e5900004 	ldr	r0, [r0, #4]
   2b500:	e3a01001 	mov	r1, #1
   2b504:	eb00001f 	bl	2b588 <SparkFunDmxParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2b508:	e3500000 	cmp	r0, #0
   2b50c:	0a000002 	beq	2b51c <SparkFunDmxParams::SetLocal(SparkFunDmx*)+0x2c>
   2b510:	e5d41008 	ldrb	r1, [r4, #8]
   2b514:	e1a00005 	mov	r0, r5
   2b518:	ebfffe99 	bl	2af84 <SparkFunDmx::SetLocalPosition(unsigned char)>
   2b51c:	e3a01002 	mov	r1, #2
   2b520:	e5940004 	ldr	r0, [r4, #4]
   2b524:	eb000017 	bl	2b588 <SparkFunDmxParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2b528:	e3500000 	cmp	r0, #0
   2b52c:	0a000002 	beq	2b53c <SparkFunDmxParams::SetLocal(SparkFunDmx*)+0x4c>
   2b530:	e5d41009 	ldrb	r1, [r4, #9]
   2b534:	e1a00005 	mov	r0, r5
   2b538:	ebfffe95 	bl	2af94 <SparkFunDmx::SetLocalSpiCs(unsigned char)>
   2b53c:	e3a01004 	mov	r1, #4
   2b540:	e5940004 	ldr	r0, [r4, #4]
   2b544:	eb00000f 	bl	2b588 <SparkFunDmxParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2b548:	e3500000 	cmp	r0, #0
   2b54c:	0a000002 	beq	2b55c <SparkFunDmxParams::SetLocal(SparkFunDmx*)+0x6c>
   2b550:	e5d4100a 	ldrb	r1, [r4, #10]
   2b554:	e1a00005 	mov	r0, r5
   2b558:	ebfffe91 	bl	2afa4 <SparkFunDmx::SetLocalResetPin(unsigned char)>
   2b55c:	e3a01008 	mov	r1, #8
   2b560:	e5940004 	ldr	r0, [r4, #4]
   2b564:	eb000007 	bl	2b588 <SparkFunDmxParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2b568:	e3500000 	cmp	r0, #0
   2b56c:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b570:	e5d4100b 	ldrb	r1, [r4, #11]
   2b574:	e1a00005 	mov	r0, r5
   2b578:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b57c:	eafffe8c 	b	2afb4 <SparkFunDmx::SetLocalBusyPin(unsigned char)>

0002b580 <SparkFunDmxParams::Dump(unsigned int)>:
   2b580:	e12fff1e 	bx	lr

0002b584 <SparkFunDmxParams::staticCallbackFunction(void*, char const*)>:
   2b584:	eaffff20 	b	2b20c <SparkFunDmxParams::callbackFunction(char const*)>

0002b588 <SparkFunDmxParams::isMaskSet(unsigned int) const [clone .isra.0]>:
   2b588:	e1d13000 	bics	r3, r1, r0
   2b58c:	03a00001 	moveq	r0, #1
   2b590:	13a00000 	movne	r0, #0
   2b594:	e12fff1e 	bx	lr

0002b598 <SparkFunDmx::Print()>:
   2b598:	e92d4800 	push	{fp, lr}
   2b59c:	e28db004 	add	fp, sp, #4
   2b5a0:	e24dd010 	sub	sp, sp, #16
   2b5a4:	e50b0010 	str	r0, [fp, #-16]
   2b5a8:	e3a03000 	mov	r3, #0
   2b5ac:	e50b3008 	str	r3, [fp, #-8]
   2b5b0:	e51b3008 	ldr	r3, [fp, #-8]
   2b5b4:	e3530007 	cmp	r3, #7
   2b5b8:	8a000054 	bhi	2b710 <SparkFunDmx::Print()+0x178>
   2b5bc:	e51b2010 	ldr	r2, [fp, #-16]
   2b5c0:	e51b3008 	ldr	r3, [fp, #-8]
   2b5c4:	e1a03103 	lsl	r3, r3, #2
   2b5c8:	e0823003 	add	r3, r2, r3
   2b5cc:	e5933004 	ldr	r3, [r3, #4]
   2b5d0:	e3530000 	cmp	r3, #0
   2b5d4:	0a000049 	beq	2b700 <SparkFunDmx::Print()+0x168>
   2b5d8:	e51b2010 	ldr	r2, [fp, #-16]
   2b5dc:	e51b3008 	ldr	r3, [fp, #-8]
   2b5e0:	e1a03103 	lsl	r3, r3, #2
   2b5e4:	e0823003 	add	r3, r2, r3
   2b5e8:	e5933004 	ldr	r3, [r3, #4]
   2b5ec:	e1a00003 	mov	r0, r3
   2b5f0:	eb000d39 	bl	2eadc <AutoDriver::Print()>
   2b5f4:	e51b2010 	ldr	r2, [fp, #-16]
   2b5f8:	e51b3008 	ldr	r3, [fp, #-8]
   2b5fc:	e2833018 	add	r3, r3, #24
   2b600:	e1a03103 	lsl	r3, r3, #2
   2b604:	e0823003 	add	r3, r2, r3
   2b608:	e5933004 	ldr	r3, [r3, #4]
   2b60c:	e3530000 	cmp	r3, #0
   2b610:	0a00003a 	beq	2b700 <SparkFunDmx::Print()+0x168>
   2b614:	e51b2010 	ldr	r2, [fp, #-16]
   2b618:	e51b3008 	ldr	r3, [fp, #-8]
   2b61c:	e2833018 	add	r3, r3, #24
   2b620:	e1a03103 	lsl	r3, r3, #2
   2b624:	e0823003 	add	r3, r2, r3
   2b628:	e5933004 	ldr	r3, [r3, #4]
   2b62c:	e1a00003 	mov	r0, r3
   2b630:	eb000401 	bl	2c63c <L6470DmxModes::Print()>
   2b634:	e59f00e0 	ldr	r0, [pc, #224]	; 2b71c <SparkFunDmx::Print()+0x184>
   2b638:	ebff96ed 	bl	111f4 <printf@plt>
   2b63c:	e3a03000 	mov	r3, #0
   2b640:	e50b300c 	str	r3, [fp, #-12]
   2b644:	e51b2010 	ldr	r2, [fp, #-16]
   2b648:	e51b3008 	ldr	r3, [fp, #-8]
   2b64c:	e2833018 	add	r3, r3, #24
   2b650:	e1a03103 	lsl	r3, r3, #2
   2b654:	e0823003 	add	r3, r2, r3
   2b658:	e5933004 	ldr	r3, [r3, #4]
   2b65c:	e1a00003 	mov	r0, r3
   2b660:	ebfff1eb 	bl	27e14 <L6470DmxModes::GetDmxFootPrint()>
   2b664:	e1a03000 	mov	r3, r0
   2b668:	e1a02003 	mov	r2, r3
   2b66c:	e51b300c 	ldr	r3, [fp, #-12]
   2b670:	e1530002 	cmp	r3, r2
   2b674:	33a03001 	movcc	r3, #1
   2b678:	23a03000 	movcs	r3, #0
   2b67c:	e6ef3073 	uxtb	r3, r3
   2b680:	e3530000 	cmp	r3, #0
   2b684:	0a00001b 	beq	2b6f8 <SparkFunDmx::Print()+0x160>
   2b688:	e51b2010 	ldr	r2, [fp, #-16]
   2b68c:	e51b3008 	ldr	r3, [fp, #-8]
   2b690:	e2833020 	add	r3, r3, #32
   2b694:	e1a03103 	lsl	r3, r3, #2
   2b698:	e0823003 	add	r3, r2, r3
   2b69c:	e5932004 	ldr	r2, [r3, #4]
   2b6a0:	e51b300c 	ldr	r3, [fp, #-12]
   2b6a4:	e1a03103 	lsl	r3, r3, #2
   2b6a8:	e0823003 	add	r3, r2, r3
   2b6ac:	e5d33002 	ldrb	r3, [r3, #2]
   2b6b0:	e1a01003 	mov	r1, r3
   2b6b4:	e51b2010 	ldr	r2, [fp, #-16]
   2b6b8:	e51b3008 	ldr	r3, [fp, #-8]
   2b6bc:	e2833020 	add	r3, r3, #32
   2b6c0:	e1a03103 	lsl	r3, r3, #2
   2b6c4:	e0823003 	add	r3, r2, r3
   2b6c8:	e5932004 	ldr	r2, [r3, #4]
   2b6cc:	e51b300c 	ldr	r3, [fp, #-12]
   2b6d0:	e1a03103 	lsl	r3, r3, #2
   2b6d4:	e0823003 	add	r3, r2, r3
   2b6d8:	e1d330b0 	ldrh	r3, [r3]
   2b6dc:	e1a02003 	mov	r2, r3
   2b6e0:	e59f0038 	ldr	r0, [pc, #56]	; 2b720 <SparkFunDmx::Print()+0x188>
   2b6e4:	ebff96c2 	bl	111f4 <printf@plt>
   2b6e8:	e51b300c 	ldr	r3, [fp, #-12]
   2b6ec:	e2833001 	add	r3, r3, #1
   2b6f0:	e50b300c 	str	r3, [fp, #-12]
   2b6f4:	eaffffd2 	b	2b644 <SparkFunDmx::Print()+0xac>
   2b6f8:	e59f0024 	ldr	r0, [pc, #36]	; 2b724 <SparkFunDmx::Print()+0x18c>
   2b6fc:	ebff96c8 	bl	11224 <puts@plt>
   2b700:	e51b3008 	ldr	r3, [fp, #-8]
   2b704:	e2833001 	add	r3, r3, #1
   2b708:	e50b3008 	str	r3, [fp, #-8]
   2b70c:	eaffffa7 	b	2b5b0 <SparkFunDmx::Print()+0x18>
   2b710:	e1a00000 	nop			; (mov r0, r0)
   2b714:	e24bd004 	sub	sp, fp, #4
   2b718:	e8bd8800 	pop	{fp, pc}
   2b71c:	000479f8 	.word	0x000479f8
   2b720:	00047a04 	.word	0x00047a04
   2b724:	00047a10 	.word	0x00047a10

0002b728 <MotorParams::MotorParams(MotorParamsStore*)>:
   2b728:	e92d4010 	push	{r4, lr}
   2b72c:	e3a02018 	mov	r2, #24
   2b730:	e1a04000 	mov	r4, r0
   2b734:	e4801004 	str	r1, [r0], #4
   2b738:	e3a01000 	mov	r1, #0
   2b73c:	ebff96ca 	bl	1126c <memset@plt>
   2b740:	e59f3018 	ldr	r3, [pc, #24]	; 2b760 <MotorParams::MotorParams(MotorParamsStore*)+0x38>
   2b744:	e3a02010 	mov	r2, #16
   2b748:	e5843008 	str	r3, [r4, #8]
   2b74c:	e59f1010 	ldr	r1, [pc, #16]	; 2b764 <MotorParams::MotorParams(MotorParamsStore*)+0x3c>
   2b750:	e284001c 	add	r0, r4, #28
   2b754:	ebff9751 	bl	114a0 <strncpy@plt>
   2b758:	e1a00004 	mov	r0, r4
   2b75c:	e8bd8010 	pop	{r4, pc}
   2b760:	3fe66666 	.word	0x3fe66666
   2b764:	00047b70 	.word	0x00047b70

0002b768 <MotorParams::Load(unsigned int)>:
   2b768:	e2813030 	add	r3, r1, #48	; 0x30
   2b76c:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   2b770:	e1a02000 	mov	r2, r0
   2b774:	e5c03021 	strb	r3, [r0, #33]	; 0x21
   2b778:	e3a03000 	mov	r3, #0
   2b77c:	e1a04000 	mov	r4, r0
   2b780:	e5803004 	str	r3, [r0, #4]
   2b784:	e1a05001 	mov	r5, r1
   2b788:	e1a0000d 	mov	r0, sp
   2b78c:	e59f106c 	ldr	r1, [pc, #108]	; 2b800 <MotorParams::Load(unsigned int)+0x98>
   2b790:	eb004208 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   2b794:	e284101c 	add	r1, r4, #28
   2b798:	e1a0000d 	mov	r0, sp
   2b79c:	eb004225 	bl	3c038 <ReadConfigFile::Read(char const*)>
   2b7a0:	e2506000 	subs	r6, r0, #0
   2b7a4:	e5940000 	ldr	r0, [r4]
   2b7a8:	0a00000b 	beq	2b7dc <MotorParams::Load(unsigned int)+0x74>
   2b7ac:	e3500000 	cmp	r0, #0
   2b7b0:	0a000004 	beq	2b7c8 <MotorParams::Load(unsigned int)+0x60>
   2b7b4:	e5903000 	ldr	r3, [r0]
   2b7b8:	e2842004 	add	r2, r4, #4
   2b7bc:	e1a01005 	mov	r1, r5
   2b7c0:	e5933008 	ldr	r3, [r3, #8]
   2b7c4:	e12fff33 	blx	r3
   2b7c8:	e1a0000d 	mov	r0, sp
   2b7cc:	eb00420a 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   2b7d0:	e1a00006 	mov	r0, r6
   2b7d4:	e28dd008 	add	sp, sp, #8
   2b7d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b7dc:	e3500000 	cmp	r0, #0
   2b7e0:	0afffff8 	beq	2b7c8 <MotorParams::Load(unsigned int)+0x60>
   2b7e4:	e5903000 	ldr	r3, [r0]
   2b7e8:	e2842004 	add	r2, r4, #4
   2b7ec:	e1a01005 	mov	r1, r5
   2b7f0:	e593300c 	ldr	r3, [r3, #12]
   2b7f4:	e12fff33 	blx	r3
   2b7f8:	e3a06001 	mov	r6, #1
   2b7fc:	eafffff1 	b	2b7c8 <MotorParams::Load(unsigned int)+0x60>
   2b800:	0002bbd8 	.word	0x0002bbd8

0002b804 <MotorParams::Load(unsigned int, char const*, unsigned int)>:
   2b804:	e590c000 	ldr	ip, [r0]
   2b808:	e35c0000 	cmp	ip, #0
   2b80c:	012fff1e 	bxeq	lr
   2b810:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b814:	e1a07003 	mov	r7, r3
   2b818:	e3a03000 	mov	r3, #0
   2b81c:	e5803004 	str	r3, [r0, #4]
   2b820:	e1a06002 	mov	r6, r2
   2b824:	e1a05001 	mov	r5, r1
   2b828:	e1a04000 	mov	r4, r0
   2b82c:	e1a02000 	mov	r2, r0
   2b830:	e59f103c 	ldr	r1, [pc, #60]	; 2b874 <MotorParams::Load(unsigned int, char const*, unsigned int)+0x70>
   2b834:	e1a0000d 	mov	r0, sp
   2b838:	eb0041de 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   2b83c:	e1a02007 	mov	r2, r7
   2b840:	e1a01006 	mov	r1, r6
   2b844:	e1a0000d 	mov	r0, sp
   2b848:	eb004245 	bl	3c164 <ReadConfigFile::Read(char const*, unsigned int)>
   2b84c:	e1a02004 	mov	r2, r4
   2b850:	e1a01005 	mov	r1, r5
   2b854:	e4920004 	ldr	r0, [r2], #4
   2b858:	e5903000 	ldr	r3, [r0]
   2b85c:	e5933008 	ldr	r3, [r3, #8]
   2b860:	e12fff33 	blx	r3
   2b864:	e1a0000d 	mov	r0, sp
   2b868:	eb0041e3 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   2b86c:	e28dd00c 	add	sp, sp, #12
   2b870:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b874:	0002bbd8 	.word	0x0002bbd8

0002b878 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)>:
   2b878:	e92d407f 	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2b87c:	e1a05003 	mov	r5, r3
   2b880:	e3520000 	cmp	r2, #0
   2b884:	e2813030 	add	r3, r1, #48	; 0x30
   2b888:	e5c03021 	strb	r3, [r0, #33]	; 0x21
   2b88c:	e1a04000 	mov	r4, r0
   2b890:	e2803004 	add	r3, r0, #4
   2b894:	0a00003c 	beq	2b98c <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x114>
   2b898:	e2821018 	add	r1, r2, #24
   2b89c:	e4920004 	ldr	r0, [r2], #4
   2b8a0:	e1520001 	cmp	r2, r1
   2b8a4:	e4830004 	str	r0, [r3], #4
   2b8a8:	1afffffb 	bne	2b89c <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x24>
   2b8ac:	e59d3020 	ldr	r3, [sp, #32]
   2b8b0:	e1a02005 	mov	r2, r5
   2b8b4:	e284101c 	add	r1, r4, #28
   2b8b8:	e28d0004 	add	r0, sp, #4
   2b8bc:	eb0040f8 	bl	3bca4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
   2b8c0:	e5940004 	ldr	r0, [r4, #4]
   2b8c4:	e3a01001 	mov	r1, #1
   2b8c8:	eb0000c3 	bl	2bbdc <MotorParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2b8cc:	ed940a02 	vldr	s0, [r4, #8]
   2b8d0:	e3a03001 	mov	r3, #1
   2b8d4:	e59f10c8 	ldr	r1, [pc, #200]	; 2b9a4 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x12c>
   2b8d8:	e1a02000 	mov	r2, r0
   2b8dc:	e28d0004 	add	r0, sp, #4
   2b8e0:	ebfffab0 	bl	2a3a8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)>
   2b8e4:	e5940004 	ldr	r0, [r4, #4]
   2b8e8:	e3a01002 	mov	r1, #2
   2b8ec:	eb0000ba 	bl	2bbdc <MotorParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2b8f0:	ed940a03 	vldr	s0, [r4, #12]
   2b8f4:	e3a03001 	mov	r3, #1
   2b8f8:	e59f10a8 	ldr	r1, [pc, #168]	; 2b9a8 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x130>
   2b8fc:	e1a02000 	mov	r2, r0
   2b900:	e28d0004 	add	r0, sp, #4
   2b904:	ebfffaa7 	bl	2a3a8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)>
   2b908:	e5940004 	ldr	r0, [r4, #4]
   2b90c:	e3a01004 	mov	r1, #4
   2b910:	eb0000b1 	bl	2bbdc <MotorParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2b914:	ed940a04 	vldr	s0, [r4, #16]
   2b918:	e3a03001 	mov	r3, #1
   2b91c:	e59f1088 	ldr	r1, [pc, #136]	; 2b9ac <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x134>
   2b920:	e1a02000 	mov	r2, r0
   2b924:	e28d0004 	add	r0, sp, #4
   2b928:	ebfffa9e 	bl	2a3a8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)>
   2b92c:	e5940004 	ldr	r0, [r4, #4]
   2b930:	e3a01008 	mov	r1, #8
   2b934:	eb0000a8 	bl	2bbdc <MotorParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2b938:	ed940a05 	vldr	s0, [r4, #20]
   2b93c:	e3a03001 	mov	r3, #1
   2b940:	e59f1068 	ldr	r1, [pc, #104]	; 2b9b0 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x138>
   2b944:	e1a02000 	mov	r2, r0
   2b948:	e28d0004 	add	r0, sp, #4
   2b94c:	ebfffa95 	bl	2a3a8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)>
   2b950:	e5940004 	ldr	r0, [r4, #4]
   2b954:	e3a01010 	mov	r1, #16
   2b958:	eb00009f 	bl	2bbdc <MotorParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2b95c:	e3a03001 	mov	r3, #1
   2b960:	ed940a06 	vldr	s0, [r4, #24]
   2b964:	e59f1048 	ldr	r1, [pc, #72]	; 2b9b4 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x13c>
   2b968:	e1a02000 	mov	r2, r0
   2b96c:	e28d0004 	add	r0, sp, #4
   2b970:	ebfffa8c 	bl	2a3a8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int)>
   2b974:	e28d0004 	add	r0, sp, #4
   2b978:	ebffa354 	bl	146d0 <PropertiesBuilder::GetSize()>
   2b97c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2b980:	e5830000 	str	r0, [r3]
   2b984:	e28dd010 	add	sp, sp, #16
   2b988:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b98c:	e5900000 	ldr	r0, [r0]
   2b990:	e5902000 	ldr	r2, [r0]
   2b994:	e592600c 	ldr	r6, [r2, #12]
   2b998:	e1a02003 	mov	r2, r3
   2b99c:	e12fff36 	blx	r6
   2b9a0:	eaffffc1 	b	2b8ac <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)+0x34>
   2b9a4:	00047bd4 	.word	0x00047bd4
   2b9a8:	00047be8 	.word	0x00047be8
   2b9ac:	00047bf8 	.word	0x00047bf8
   2b9b0:	00047c08 	.word	0x00047c08
   2b9b4:	00047c1c 	.word	0x00047c1c

0002b9b8 <MotorParams::Save(unsigned int, char*, unsigned int, unsigned int&)>:
   2b9b8:	e92d4007 	push	{r0, r1, r2, lr}
   2b9bc:	e590c000 	ldr	ip, [r0]
   2b9c0:	e59de010 	ldr	lr, [sp, #16]
   2b9c4:	e35c0000 	cmp	ip, #0
   2b9c8:	058ec000 	streq	ip, [lr]
   2b9cc:	0a000004 	beq	2b9e4 <MotorParams::Save(unsigned int, char*, unsigned int, unsigned int&)+0x2c>
   2b9d0:	e1a0c003 	mov	ip, r3
   2b9d4:	e1a03002 	mov	r3, r2
   2b9d8:	e88d5000 	stm	sp, {ip, lr}
   2b9dc:	e3a02000 	mov	r2, #0
   2b9e0:	ebffffa4 	bl	2b878 <MotorParams::Builder(unsigned int, TMotorParams const*, char*, unsigned int, unsigned int&)>
   2b9e4:	e28dd00c 	add	sp, sp, #12
   2b9e8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002b9ec <MotorParams::callbackFunction(char const*)>:
   2b9ec:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
   2b9f0:	e1a05001 	mov	r5, r1
   2b9f4:	e1a04000 	mov	r4, r0
   2b9f8:	e28d2004 	add	r2, sp, #4
   2b9fc:	e59f10e4 	ldr	r1, [pc, #228]	; 2bae8 <MotorParams::callbackFunction(char const*)+0xfc>
   2ba00:	e1a00005 	mov	r0, r5
   2ba04:	eb0042a4 	bl	3c49c <Sscan::Float(char const*, char const*, float&)>
   2ba08:	e3500000 	cmp	r0, #0
   2ba0c:	1a000008 	bne	2ba34 <MotorParams::callbackFunction(char const*)+0x48>
   2ba10:	eddd7a01 	vldr	s15, [sp, #4]
   2ba14:	eef57a40 	vcmp.f32	s15, #0.0
   2ba18:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   2ba1c:	15943004 	ldrne	r3, [r4, #4]
   2ba20:	1dc47a02 	vstrne	s15, [r4, #8]
   2ba24:	13833001 	orrne	r3, r3, #1
   2ba28:	1a00000b 	bne	2ba5c <MotorParams::callbackFunction(char const*)+0x70>
   2ba2c:	e28dd00c 	add	sp, sp, #12
   2ba30:	e8bd8030 	pop	{r4, r5, pc}
   2ba34:	e28d2004 	add	r2, sp, #4
   2ba38:	e59f10ac 	ldr	r1, [pc, #172]	; 2baec <MotorParams::callbackFunction(char const*)+0x100>
   2ba3c:	e1a00005 	mov	r0, r5
   2ba40:	eb004295 	bl	3c49c <Sscan::Float(char const*, char const*, float&)>
   2ba44:	e3500000 	cmp	r0, #0
   2ba48:	1a000005 	bne	2ba64 <MotorParams::callbackFunction(char const*)+0x78>
   2ba4c:	e59d3004 	ldr	r3, [sp, #4]
   2ba50:	e584300c 	str	r3, [r4, #12]
   2ba54:	e5943004 	ldr	r3, [r4, #4]
   2ba58:	e3833002 	orr	r3, r3, #2
   2ba5c:	e5843004 	str	r3, [r4, #4]
   2ba60:	eafffff1 	b	2ba2c <MotorParams::callbackFunction(char const*)+0x40>
   2ba64:	e28d2004 	add	r2, sp, #4
   2ba68:	e59f1080 	ldr	r1, [pc, #128]	; 2baf0 <MotorParams::callbackFunction(char const*)+0x104>
   2ba6c:	e1a00005 	mov	r0, r5
   2ba70:	eb004289 	bl	3c49c <Sscan::Float(char const*, char const*, float&)>
   2ba74:	e3500000 	cmp	r0, #0
   2ba78:	1a000004 	bne	2ba90 <MotorParams::callbackFunction(char const*)+0xa4>
   2ba7c:	e59d3004 	ldr	r3, [sp, #4]
   2ba80:	e5843010 	str	r3, [r4, #16]
   2ba84:	e5943004 	ldr	r3, [r4, #4]
   2ba88:	e3833004 	orr	r3, r3, #4
   2ba8c:	eafffff2 	b	2ba5c <MotorParams::callbackFunction(char const*)+0x70>
   2ba90:	e28d2004 	add	r2, sp, #4
   2ba94:	e59f1058 	ldr	r1, [pc, #88]	; 2baf4 <MotorParams::callbackFunction(char const*)+0x108>
   2ba98:	e1a00005 	mov	r0, r5
   2ba9c:	eb00427e 	bl	3c49c <Sscan::Float(char const*, char const*, float&)>
   2baa0:	e3500000 	cmp	r0, #0
   2baa4:	1a000004 	bne	2babc <MotorParams::callbackFunction(char const*)+0xd0>
   2baa8:	e59d3004 	ldr	r3, [sp, #4]
   2baac:	e5843014 	str	r3, [r4, #20]
   2bab0:	e5943004 	ldr	r3, [r4, #4]
   2bab4:	e3833008 	orr	r3, r3, #8
   2bab8:	eaffffe7 	b	2ba5c <MotorParams::callbackFunction(char const*)+0x70>
   2babc:	e28d2004 	add	r2, sp, #4
   2bac0:	e59f1030 	ldr	r1, [pc, #48]	; 2baf8 <MotorParams::callbackFunction(char const*)+0x10c>
   2bac4:	e1a00005 	mov	r0, r5
   2bac8:	eb004273 	bl	3c49c <Sscan::Float(char const*, char const*, float&)>
   2bacc:	e3500000 	cmp	r0, #0
   2bad0:	1affffd5 	bne	2ba2c <MotorParams::callbackFunction(char const*)+0x40>
   2bad4:	e59d3004 	ldr	r3, [sp, #4]
   2bad8:	e5843018 	str	r3, [r4, #24]
   2badc:	e5943004 	ldr	r3, [r4, #4]
   2bae0:	e3833010 	orr	r3, r3, #16
   2bae4:	eaffffdc 	b	2ba5c <MotorParams::callbackFunction(char const*)+0x70>
   2bae8:	00047bd4 	.word	0x00047bd4
   2baec:	00047be8 	.word	0x00047be8
   2baf0:	00047bf8 	.word	0x00047bf8
   2baf4:	00047c08 	.word	0x00047c08
   2baf8:	00047c1c 	.word	0x00047c1c

0002bafc <MotorParams::Set(L6470*)>:
   2bafc:	e92d4070 	push	{r4, r5, r6, lr}
   2bb00:	e1a05000 	mov	r5, r0
   2bb04:	e1a04001 	mov	r4, r1
   2bb08:	eb00000a 	bl	2bb38 <MotorParams::calcIntersectSpeed()>
   2bb0c:	eeb50a40 	vcmp.f32	s0, #0.0
   2bb10:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   2bb14:	08bd8070 	popeq	{r4, r5, r6, pc}
   2bb18:	e1a00005 	mov	r0, r5
   2bb1c:	eb000027 	bl	2bbc0 <MotorParams::calcIntersectSpeedReg(float) const>
   2bb20:	e3a0100d 	mov	r1, #13
   2bb24:	e1a02000 	mov	r2, r0
   2bb28:	e1a00004 	mov	r0, r4
   2bb2c:	e8bd4070 	pop	{r4, r5, r6, lr}
   2bb30:	ea000c61 	b	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>

0002bb34 <MotorParams::Dump()>:
   2bb34:	e12fff1e 	bx	lr

0002bb38 <MotorParams::calcIntersectSpeed()>:
   2bb38:	e92d4070 	push	{r4, r5, r6, lr}
   2bb3c:	e3a01008 	mov	r1, #8
   2bb40:	e5905004 	ldr	r5, [r0, #4]
   2bb44:	e1a04000 	mov	r4, r0
   2bb48:	e1a00005 	mov	r0, r5
   2bb4c:	eb000022 	bl	2bbdc <MotorParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2bb50:	e3500000 	cmp	r0, #0
   2bb54:	0a000010 	beq	2bb9c <MotorParams::calcIntersectSpeed()+0x64>
   2bb58:	e3a01010 	mov	r1, #16
   2bb5c:	e1a00005 	mov	r0, r5
   2bb60:	eb00001d 	bl	2bbdc <MotorParams::isMaskSet(unsigned int) const [clone .isra.0]>
   2bb64:	e3500000 	cmp	r0, #0
   2bb68:	0a00000b 	beq	2bb9c <MotorParams::calcIntersectSpeed()+0x64>
   2bb6c:	edd46a05 	vldr	s13, [r4, #20]
   2bb70:	eddf7a10 	vldr	s15, [pc, #64]	; 2bbb8 <MotorParams::calcIntersectSpeed()+0x80>
   2bb74:	ed947a06 	vldr	s14, [r4, #24]
   2bb78:	ed9f5b0a 	vldr	d5, [pc, #40]	; 2bba8 <MotorParams::calcIntersectSpeed()+0x70>
   2bb7c:	ee666aa7 	vmul.f32	s13, s13, s15
   2bb80:	eeb77ac7 	vcvt.f64.f32	d7, s14
   2bb84:	ee277b05 	vmul.f64	d7, d7, d5
   2bb88:	ed9f5b08 	vldr	d5, [pc, #32]	; 2bbb0 <MotorParams::calcIntersectSpeed()+0x78>
   2bb8c:	ee277b05 	vmul.f64	d7, d7, d5
   2bb90:	eeb77bc7 	vcvt.f32.f64	s14, d7
   2bb94:	ee860a87 	vdiv.f32	s0, s13, s14
   2bb98:	e8bd8070 	pop	{r4, r5, r6, pc}
   2bb9c:	ed9f0a06 	vldr	s0, [pc, #24]	; 2bbbc <MotorParams::calcIntersectSpeed()+0x84>
   2bba0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2bba4:	e1a00000 	nop			; (mov r0, r0)
   2bba8:	54442d18 	.word	0x54442d18
   2bbac:	401921fb 	.word	0x401921fb
   2bbb0:	d2f1a9fc 	.word	0xd2f1a9fc
   2bbb4:	3f50624d 	.word	0x3f50624d
   2bbb8:	40800000 	.word	0x40800000
   2bbbc:	00000000 	.word	0x00000000

0002bbc0 <MotorParams::calcIntersectSpeedReg(float) const>:
   2bbc0:	eddf7a03 	vldr	s15, [pc, #12]	; 2bbd4 <MotorParams::calcIntersectSpeedReg(float) const+0x14>
   2bbc4:	ee200a27 	vmul.f32	s0, s0, s15
   2bbc8:	eefc7ac0 	vcvt.u32.f32	s15, s0
   2bbcc:	ee170a90 	vmov	r0, s15
   2bbd0:	e12fff1e 	bx	lr
   2bbd4:	418637bd 	.word	0x418637bd

0002bbd8 <MotorParams::staticCallbackFunction(void*, char const*)>:
   2bbd8:	eaffff83 	b	2b9ec <MotorParams::callbackFunction(char const*)>

0002bbdc <MotorParams::isMaskSet(unsigned int) const [clone .isra.0]>:
   2bbdc:	e1d13000 	bics	r3, r1, r0
   2bbe0:	03a00001 	moveq	r0, #1
   2bbe4:	13a00000 	movne	r0, #0
   2bbe8:	e12fff1e 	bx	lr

0002bbec <L6470::GetMotorNumber()>:
   2bbec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2bbf0:	e28db000 	add	fp, sp, #0
   2bbf4:	e24dd00c 	sub	sp, sp, #12
   2bbf8:	e50b0008 	str	r0, [fp, #-8]
   2bbfc:	e51b3008 	ldr	r3, [fp, #-8]
   2bc00:	e5933004 	ldr	r3, [r3, #4]
   2bc04:	e1a00003 	mov	r0, r3
   2bc08:	e28bd000 	add	sp, fp, #0
   2bc0c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2bc10:	e12fff1e 	bx	lr

0002bc14 <L6470DmxMode0::GetDmxFootPrint()>:
   2bc14:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2bc18:	e28db000 	add	fp, sp, #0
   2bc1c:	e3a03001 	mov	r3, #1
   2bc20:	e1a00003 	mov	r0, r3
   2bc24:	e28bd000 	add	sp, fp, #0
   2bc28:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2bc2c:	e12fff1e 	bx	lr

0002bc30 <L6470DmxMode1::GetDmxFootPrint()>:
   2bc30:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2bc34:	e28db000 	add	fp, sp, #0
   2bc38:	e3a03002 	mov	r3, #2
   2bc3c:	e1a00003 	mov	r0, r3
   2bc40:	e28bd000 	add	sp, fp, #0
   2bc44:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2bc48:	e12fff1e 	bx	lr

0002bc4c <L6470DmxMode2::GetDmxFootPrint()>:
   2bc4c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2bc50:	e28db000 	add	fp, sp, #0
   2bc54:	e3a03001 	mov	r3, #1
   2bc58:	e1a00003 	mov	r0, r3
   2bc5c:	e28bd000 	add	sp, fp, #0
   2bc60:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2bc64:	e12fff1e 	bx	lr

0002bc68 <L6470DmxMode3::GetDmxFootPrint()>:
   2bc68:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2bc6c:	e28db000 	add	fp, sp, #0
   2bc70:	e3a03001 	mov	r3, #1
   2bc74:	e1a00003 	mov	r0, r3
   2bc78:	e28bd000 	add	sp, fp, #0
   2bc7c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2bc80:	e12fff1e 	bx	lr

0002bc84 <L6470DmxMode4::GetDmxFootPrint()>:
   2bc84:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2bc88:	e28db000 	add	fp, sp, #0
   2bc8c:	e3a03001 	mov	r3, #1
   2bc90:	e1a00003 	mov	r0, r3
   2bc94:	e28bd000 	add	sp, fp, #0
   2bc98:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2bc9c:	e12fff1e 	bx	lr

0002bca0 <L6470DmxMode5::GetDmxFootPrint()>:
   2bca0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2bca4:	e28db000 	add	fp, sp, #0
   2bca8:	e3a03002 	mov	r3, #2
   2bcac:	e1a00003 	mov	r0, r3
   2bcb0:	e28bd000 	add	sp, fp, #0
   2bcb4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2bcb8:	e12fff1e 	bx	lr

0002bcbc <L6470DmxMode6::GetDmxFootPrint()>:
   2bcbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2bcc0:	e28db000 	add	fp, sp, #0
   2bcc4:	e3a03000 	mov	r3, #0
   2bcc8:	e1a00003 	mov	r0, r3
   2bccc:	e28bd000 	add	sp, fp, #0
   2bcd0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2bcd4:	e12fff1e 	bx	lr

0002bcd8 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)>:
   2bcd8:	e92d4810 	push	{r4, fp, lr}
   2bcdc:	e28db008 	add	fp, sp, #8
   2bce0:	e24dd01c 	sub	sp, sp, #28
   2bce4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2bce8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   2bcec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   2bcf0:	e1a03002 	mov	r3, r2
   2bcf4:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
   2bcf8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bcfc:	e3a02000 	mov	r2, #0
   2bd00:	e5c32000 	strb	r2, [r3]
   2bd04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bd08:	e3a02000 	mov	r2, #0
   2bd0c:	e5c32001 	strb	r2, [r3, #1]
   2bd10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bd14:	e3a02007 	mov	r2, #7
   2bd18:	e5832004 	str	r2, [r3, #4]
   2bd1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bd20:	e3a02000 	mov	r2, #0
   2bd24:	e583200c 	str	r2, [r3, #12]
   2bd28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bd2c:	e3a02000 	mov	r2, #0
   2bd30:	e1c321b0 	strh	r2, [r3, #16]
   2bd34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bd38:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
   2bd3c:	e1c320b8 	strh	r2, [r3, #8]
   2bd40:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2bd44:	e3530006 	cmp	r3, #6
   2bd48:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2bd4c:	ea000076 	b	2bf2c <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x254>
   2bd50:	0002bd6c 	.word	0x0002bd6c
   2bd54:	0002bda8 	.word	0x0002bda8
   2bd58:	0002bde4 	.word	0x0002bde4
   2bd5c:	0002be20 	.word	0x0002be20
   2bd60:	0002be60 	.word	0x0002be60
   2bd64:	0002bea4 	.word	0x0002bea4
   2bd68:	0002bee8 	.word	0x0002bee8
   2bd6c:	e3a00010 	mov	r0, #16
   2bd70:	ebff94f2 	bl	11140 <operator new(unsigned int)@plt>
   2bd74:	e1a03000 	mov	r3, r0
   2bd78:	e1a04003 	mov	r4, r3
   2bd7c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   2bd80:	e1a00004 	mov	r0, r4
   2bd84:	eb000501 	bl	2d190 <L6470DmxMode0::L6470DmxMode0(L6470*)>
   2bd88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bd8c:	e583400c 	str	r4, [r3, #12]
   2bd90:	ebffff9f 	bl	2bc14 <L6470DmxMode0::GetDmxFootPrint()>
   2bd94:	e1a03000 	mov	r3, r0
   2bd98:	e1a02003 	mov	r2, r3
   2bd9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bda0:	e1c321b0 	strh	r2, [r3, #16]
   2bda4:	ea000061 	b	2bf30 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x258>
   2bda8:	e3a00010 	mov	r0, #16
   2bdac:	ebff94e3 	bl	11140 <operator new(unsigned int)@plt>
   2bdb0:	e1a03000 	mov	r3, r0
   2bdb4:	e1a04003 	mov	r4, r3
   2bdb8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   2bdbc:	e1a00004 	mov	r0, r4
   2bdc0:	eb00067c 	bl	2d7b8 <L6470DmxMode1::L6470DmxMode1(L6470*)>
   2bdc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bdc8:	e583400c 	str	r4, [r3, #12]
   2bdcc:	ebffff97 	bl	2bc30 <L6470DmxMode1::GetDmxFootPrint()>
   2bdd0:	e1a03000 	mov	r3, r0
   2bdd4:	e1a02003 	mov	r2, r3
   2bdd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bddc:	e1c321b0 	strh	r2, [r3, #16]
   2bde0:	ea000052 	b	2bf30 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x258>
   2bde4:	e3a00010 	mov	r0, #16
   2bde8:	ebff94d4 	bl	11140 <operator new(unsigned int)@plt>
   2bdec:	e1a03000 	mov	r3, r0
   2bdf0:	e1a04003 	mov	r4, r3
   2bdf4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   2bdf8:	e1a00004 	mov	r0, r4
   2bdfc:	eb000435 	bl	2ced8 <L6470DmxMode2::L6470DmxMode2(L6470*)>
   2be00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2be04:	e583400c 	str	r4, [r3, #12]
   2be08:	ebffff8f 	bl	2bc4c <L6470DmxMode2::GetDmxFootPrint()>
   2be0c:	e1a03000 	mov	r3, r0
   2be10:	e1a02003 	mov	r2, r3
   2be14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2be18:	e1c321b0 	strh	r2, [r3, #16]
   2be1c:	ea000043 	b	2bf30 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x258>
   2be20:	e3a00010 	mov	r0, #16
   2be24:	ebff94c5 	bl	11140 <operator new(unsigned int)@plt>
   2be28:	e1a03000 	mov	r3, r0
   2be2c:	e1a04003 	mov	r4, r3
   2be30:	e59b2004 	ldr	r2, [fp, #4]
   2be34:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   2be38:	e1a00004 	mov	r0, r4
   2be3c:	eb00021b 	bl	2c6b0 <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)>
   2be40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2be44:	e583400c 	str	r4, [r3, #12]
   2be48:	ebffff86 	bl	2bc68 <L6470DmxMode3::GetDmxFootPrint()>
   2be4c:	e1a03000 	mov	r3, r0
   2be50:	e1a02003 	mov	r2, r3
   2be54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2be58:	e1c321b0 	strh	r2, [r3, #16]
   2be5c:	ea000033 	b	2bf30 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x258>
   2be60:	e3a00014 	mov	r0, #20
   2be64:	ebff94b5 	bl	11140 <operator new(unsigned int)@plt>
   2be68:	e1a03000 	mov	r3, r0
   2be6c:	e1a04003 	mov	r4, r3
   2be70:	e59b3008 	ldr	r3, [fp, #8]
   2be74:	e59b2004 	ldr	r2, [fp, #4]
   2be78:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   2be7c:	e1a00004 	mov	r0, r4
   2be80:	eb00055a 	bl	2d3f0 <L6470DmxMode4::L6470DmxMode4(L6470*, MotorParams*, ModeParams*)>
   2be84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2be88:	e583400c 	str	r4, [r3, #12]
   2be8c:	ebffff7c 	bl	2bc84 <L6470DmxMode4::GetDmxFootPrint()>
   2be90:	e1a03000 	mov	r3, r0
   2be94:	e1a02003 	mov	r2, r3
   2be98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2be9c:	e1c321b0 	strh	r2, [r3, #16]
   2bea0:	ea000022 	b	2bf30 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x258>
   2bea4:	e3a00014 	mov	r0, #20
   2bea8:	ebff94a4 	bl	11140 <operator new(unsigned int)@plt>
   2beac:	e1a03000 	mov	r3, r0
   2beb0:	e1a04003 	mov	r4, r3
   2beb4:	e59b3008 	ldr	r3, [fp, #8]
   2beb8:	e59b2004 	ldr	r2, [fp, #4]
   2bebc:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   2bec0:	e1a00004 	mov	r0, r4
   2bec4:	eb000309 	bl	2caf0 <L6470DmxMode5::L6470DmxMode5(L6470*, MotorParams*, ModeParams*)>
   2bec8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2becc:	e583400c 	str	r4, [r3, #12]
   2bed0:	ebffff72 	bl	2bca0 <L6470DmxMode5::GetDmxFootPrint()>
   2bed4:	e1a03000 	mov	r3, r0
   2bed8:	e1a02003 	mov	r2, r3
   2bedc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bee0:	e1c321b0 	strh	r2, [r3, #16]
   2bee4:	ea000011 	b	2bf30 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x258>
   2bee8:	e3a00008 	mov	r0, #8
   2beec:	ebff9493 	bl	11140 <operator new(unsigned int)@plt>
   2bef0:	e1a03000 	mov	r3, r0
   2bef4:	e1a04003 	mov	r4, r3
   2bef8:	e59b3008 	ldr	r3, [fp, #8]
   2befc:	e59b2004 	ldr	r2, [fp, #4]
   2bf00:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   2bf04:	e1a00004 	mov	r0, r4
   2bf08:	eb000182 	bl	2c518 <L6470DmxMode6::L6470DmxMode6(L6470*, MotorParams*, ModeParams*)>
   2bf0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bf10:	e583400c 	str	r4, [r3, #12]
   2bf14:	ebffff68 	bl	2bcbc <L6470DmxMode6::GetDmxFootPrint()>
   2bf18:	e1a03000 	mov	r3, r0
   2bf1c:	e1a02003 	mov	r2, r3
   2bf20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bf24:	e1c321b0 	strh	r2, [r3, #16]
   2bf28:	ea000000 	b	2bf30 <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x258>
   2bf2c:	e1a00000 	nop			; (mov r0, r0)
   2bf30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bf34:	e593300c 	ldr	r3, [r3, #12]
   2bf38:	e3530000 	cmp	r3, #0
   2bf3c:	0a000022 	beq	2bfcc <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x2f4>
   2bf40:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
   2bf44:	ebffff28 	bl	2bbec <L6470::GetMotorNumber()>
   2bf48:	e1a03000 	mov	r3, r0
   2bf4c:	e6ef2073 	uxtb	r2, r3
   2bf50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bf54:	e5c32001 	strb	r2, [r3, #1]
   2bf58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bf5c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2bf60:	e5832004 	str	r2, [r3, #4]
   2bf64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bf68:	e1d331b0 	ldrh	r3, [r3, #16]
   2bf6c:	e1a00003 	mov	r0, r3
   2bf70:	ebff94cc 	bl	112a8 <operator new[](unsigned int)@plt>
   2bf74:	e1a03000 	mov	r3, r0
   2bf78:	e1a02003 	mov	r2, r3
   2bf7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bf80:	e5832014 	str	r2, [r3, #20]
   2bf84:	e3a03000 	mov	r3, #0
   2bf88:	e50b3010 	str	r3, [fp, #-16]
   2bf8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bf90:	e1d331b0 	ldrh	r3, [r3, #16]
   2bf94:	e1a02003 	mov	r2, r3
   2bf98:	e51b3010 	ldr	r3, [fp, #-16]
   2bf9c:	e1530002 	cmp	r3, r2
   2bfa0:	aa000009 	bge	2bfcc <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x2f4>
   2bfa4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bfa8:	e5932014 	ldr	r2, [r3, #20]
   2bfac:	e51b3010 	ldr	r3, [fp, #-16]
   2bfb0:	e0823003 	add	r3, r2, r3
   2bfb4:	e3a02000 	mov	r2, #0
   2bfb8:	e5c32000 	strb	r2, [r3]
   2bfbc:	e51b3010 	ldr	r3, [fp, #-16]
   2bfc0:	e2833001 	add	r3, r3, #1
   2bfc4:	e50b3010 	str	r3, [fp, #-16]
   2bfc8:	eaffffef 	b	2bf8c <L6470DmxModes::L6470DmxModes(TL6470DmxModes, unsigned short, L6470*, MotorParams*, ModeParams*)+0x2b4>
   2bfcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2bfd0:	e1a00003 	mov	r0, r3
   2bfd4:	e24bd008 	sub	sp, fp, #8
   2bfd8:	e8bd8810 	pop	{r4, fp, pc}

0002bfdc <L6470DmxModes::~L6470DmxModes()>:
   2bfdc:	e92d4800 	push	{fp, lr}
   2bfe0:	e28db004 	add	fp, sp, #4
   2bfe4:	e24dd008 	sub	sp, sp, #8
   2bfe8:	e50b0008 	str	r0, [fp, #-8]
   2bfec:	e51b3008 	ldr	r3, [fp, #-8]
   2bff0:	e5933014 	ldr	r3, [r3, #20]
   2bff4:	e3530000 	cmp	r3, #0
   2bff8:	0a000003 	beq	2c00c <L6470DmxModes::~L6470DmxModes()+0x30>
   2bffc:	e51b3008 	ldr	r3, [fp, #-8]
   2c000:	e5933014 	ldr	r3, [r3, #20]
   2c004:	e1a00003 	mov	r0, r3
   2c008:	ebff94e2 	bl	11398 <operator delete[](void*)@plt>
   2c00c:	e51b3008 	ldr	r3, [fp, #-8]
   2c010:	e3a02000 	mov	r2, #0
   2c014:	e5832014 	str	r2, [r3, #20]
   2c018:	e51b3008 	ldr	r3, [fp, #-8]
   2c01c:	e593300c 	ldr	r3, [r3, #12]
   2c020:	e3530000 	cmp	r3, #0
   2c024:	0a000008 	beq	2c04c <L6470DmxModes::~L6470DmxModes()+0x70>
   2c028:	e51b3008 	ldr	r3, [fp, #-8]
   2c02c:	e593200c 	ldr	r2, [r3, #12]
   2c030:	e51b3008 	ldr	r3, [fp, #-8]
   2c034:	e593300c 	ldr	r3, [r3, #12]
   2c038:	e5933000 	ldr	r3, [r3]
   2c03c:	e2833004 	add	r3, r3, #4
   2c040:	e5933000 	ldr	r3, [r3]
   2c044:	e1a00002 	mov	r0, r2
   2c048:	e12fff33 	blx	r3
   2c04c:	e51b3008 	ldr	r3, [fp, #-8]
   2c050:	e3a02000 	mov	r2, #0
   2c054:	e583200c 	str	r2, [r3, #12]
   2c058:	e51b3008 	ldr	r3, [fp, #-8]
   2c05c:	e1a00003 	mov	r0, r3
   2c060:	e24bd004 	sub	sp, fp, #4
   2c064:	e8bd8800 	pop	{fp, pc}

0002c068 <L6470DmxModes::InitSwitch()>:
   2c068:	e92d4800 	push	{fp, lr}
   2c06c:	e28db004 	add	fp, sp, #4
   2c070:	e24dd008 	sub	sp, sp, #8
   2c074:	e50b0008 	str	r0, [fp, #-8]
   2c078:	e51b3008 	ldr	r3, [fp, #-8]
   2c07c:	e593200c 	ldr	r2, [r3, #12]
   2c080:	e51b3008 	ldr	r3, [fp, #-8]
   2c084:	e593300c 	ldr	r3, [r3, #12]
   2c088:	e5933000 	ldr	r3, [r3]
   2c08c:	e2833008 	add	r3, r3, #8
   2c090:	e5933000 	ldr	r3, [r3]
   2c094:	e1a00002 	mov	r0, r2
   2c098:	e12fff33 	blx	r3
   2c09c:	e1a00000 	nop			; (mov r0, r0)
   2c0a0:	e24bd004 	sub	sp, fp, #4
   2c0a4:	e8bd8800 	pop	{fp, pc}

0002c0a8 <L6470DmxModes::InitPos()>:
   2c0a8:	e92d4800 	push	{fp, lr}
   2c0ac:	e28db004 	add	fp, sp, #4
   2c0b0:	e24dd008 	sub	sp, sp, #8
   2c0b4:	e50b0008 	str	r0, [fp, #-8]
   2c0b8:	e51b3008 	ldr	r3, [fp, #-8]
   2c0bc:	e593200c 	ldr	r2, [r3, #12]
   2c0c0:	e51b3008 	ldr	r3, [fp, #-8]
   2c0c4:	e593300c 	ldr	r3, [r3, #12]
   2c0c8:	e5933000 	ldr	r3, [r3]
   2c0cc:	e283300c 	add	r3, r3, #12
   2c0d0:	e5933000 	ldr	r3, [r3]
   2c0d4:	e1a00002 	mov	r0, r2
   2c0d8:	e12fff33 	blx	r3
   2c0dc:	e1a00000 	nop			; (mov r0, r0)
   2c0e0:	e24bd004 	sub	sp, fp, #4
   2c0e4:	e8bd8800 	pop	{fp, pc}

0002c0e8 <L6470DmxModes::GetDmxFootPrintMode(unsigned int)>:
   2c0e8:	e92d4800 	push	{fp, lr}
   2c0ec:	e28db004 	add	fp, sp, #4
   2c0f0:	e24dd008 	sub	sp, sp, #8
   2c0f4:	e50b0008 	str	r0, [fp, #-8]
   2c0f8:	e51b3008 	ldr	r3, [fp, #-8]
   2c0fc:	e3530006 	cmp	r3, #6
   2c100:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2c104:	ea00001b 	b	2c178 <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x90>
   2c108:	0002c124 	.word	0x0002c124
   2c10c:	0002c130 	.word	0x0002c130
   2c110:	0002c13c 	.word	0x0002c13c
   2c114:	0002c148 	.word	0x0002c148
   2c118:	0002c154 	.word	0x0002c154
   2c11c:	0002c160 	.word	0x0002c160
   2c120:	0002c16c 	.word	0x0002c16c
   2c124:	ebfffeba 	bl	2bc14 <L6470DmxMode0::GetDmxFootPrint()>
   2c128:	e1a03000 	mov	r3, r0
   2c12c:	ea000012 	b	2c17c <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x94>
   2c130:	ebfffebe 	bl	2bc30 <L6470DmxMode1::GetDmxFootPrint()>
   2c134:	e1a03000 	mov	r3, r0
   2c138:	ea00000f 	b	2c17c <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x94>
   2c13c:	ebfffec2 	bl	2bc4c <L6470DmxMode2::GetDmxFootPrint()>
   2c140:	e1a03000 	mov	r3, r0
   2c144:	ea00000c 	b	2c17c <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x94>
   2c148:	ebfffec6 	bl	2bc68 <L6470DmxMode3::GetDmxFootPrint()>
   2c14c:	e1a03000 	mov	r3, r0
   2c150:	ea000009 	b	2c17c <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x94>
   2c154:	ebfffeca 	bl	2bc84 <L6470DmxMode4::GetDmxFootPrint()>
   2c158:	e1a03000 	mov	r3, r0
   2c15c:	ea000006 	b	2c17c <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x94>
   2c160:	ebfffece 	bl	2bca0 <L6470DmxMode5::GetDmxFootPrint()>
   2c164:	e1a03000 	mov	r3, r0
   2c168:	ea000003 	b	2c17c <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x94>
   2c16c:	ebfffed2 	bl	2bcbc <L6470DmxMode6::GetDmxFootPrint()>
   2c170:	e1a03000 	mov	r3, r0
   2c174:	ea000000 	b	2c17c <L6470DmxModes::GetDmxFootPrintMode(unsigned int)+0x94>
   2c178:	e3a03000 	mov	r3, #0
   2c17c:	e1a00003 	mov	r0, r3
   2c180:	e24bd004 	sub	sp, fp, #4
   2c184:	e8bd8800 	pop	{fp, pc}

0002c188 <L6470DmxModes::Start()>:
   2c188:	e92d4800 	push	{fp, lr}
   2c18c:	e28db004 	add	fp, sp, #4
   2c190:	e24dd008 	sub	sp, sp, #8
   2c194:	e50b0008 	str	r0, [fp, #-8]
   2c198:	e51b3008 	ldr	r3, [fp, #-8]
   2c19c:	e5d33000 	ldrb	r3, [r3]
   2c1a0:	e3530000 	cmp	r3, #0
   2c1a4:	1a00000c 	bne	2c1dc <L6470DmxModes::Start()+0x54>
   2c1a8:	e51b3008 	ldr	r3, [fp, #-8]
   2c1ac:	e593200c 	ldr	r2, [r3, #12]
   2c1b0:	e51b3008 	ldr	r3, [fp, #-8]
   2c1b4:	e593300c 	ldr	r3, [r3, #12]
   2c1b8:	e5933000 	ldr	r3, [r3]
   2c1bc:	e2833010 	add	r3, r3, #16
   2c1c0:	e5933000 	ldr	r3, [r3]
   2c1c4:	e1a00002 	mov	r0, r2
   2c1c8:	e12fff33 	blx	r3
   2c1cc:	e51b3008 	ldr	r3, [fp, #-8]
   2c1d0:	e3a02001 	mov	r2, #1
   2c1d4:	e5c32000 	strb	r2, [r3]
   2c1d8:	ea000000 	b	2c1e0 <L6470DmxModes::Start()+0x58>
   2c1dc:	e1a00000 	nop			; (mov r0, r0)
   2c1e0:	e24bd004 	sub	sp, fp, #4
   2c1e4:	e8bd8800 	pop	{fp, pc}

0002c1e8 <L6470DmxModes::Stop()>:
   2c1e8:	e92d4800 	push	{fp, lr}
   2c1ec:	e28db004 	add	fp, sp, #4
   2c1f0:	e24dd008 	sub	sp, sp, #8
   2c1f4:	e50b0008 	str	r0, [fp, #-8]
   2c1f8:	e51b3008 	ldr	r3, [fp, #-8]
   2c1fc:	e5d33000 	ldrb	r3, [r3]
   2c200:	e2233001 	eor	r3, r3, #1
   2c204:	e6ef3073 	uxtb	r3, r3
   2c208:	e3530000 	cmp	r3, #0
   2c20c:	1a00000c 	bne	2c244 <L6470DmxModes::Stop()+0x5c>
   2c210:	e51b3008 	ldr	r3, [fp, #-8]
   2c214:	e593200c 	ldr	r2, [r3, #12]
   2c218:	e51b3008 	ldr	r3, [fp, #-8]
   2c21c:	e593300c 	ldr	r3, [r3, #12]
   2c220:	e5933000 	ldr	r3, [r3]
   2c224:	e2833014 	add	r3, r3, #20
   2c228:	e5933000 	ldr	r3, [r3]
   2c22c:	e1a00002 	mov	r0, r2
   2c230:	e12fff33 	blx	r3
   2c234:	e51b3008 	ldr	r3, [fp, #-8]
   2c238:	e3a02000 	mov	r2, #0
   2c23c:	e5c32000 	strb	r2, [r3]
   2c240:	ea000000 	b	2c248 <L6470DmxModes::Stop()+0x60>
   2c244:	e1a00000 	nop			; (mov r0, r0)
   2c248:	e24bd004 	sub	sp, fp, #4
   2c24c:	e8bd8800 	pop	{fp, pc}

0002c250 <L6470DmxModes::HandleBusy()>:
   2c250:	e92d4800 	push	{fp, lr}
   2c254:	e28db004 	add	fp, sp, #4
   2c258:	e24dd008 	sub	sp, sp, #8
   2c25c:	e50b0008 	str	r0, [fp, #-8]
   2c260:	e51b3008 	ldr	r3, [fp, #-8]
   2c264:	e593200c 	ldr	r2, [r3, #12]
   2c268:	e51b3008 	ldr	r3, [fp, #-8]
   2c26c:	e593300c 	ldr	r3, [r3, #12]
   2c270:	e5933000 	ldr	r3, [r3]
   2c274:	e2833018 	add	r3, r3, #24
   2c278:	e5933000 	ldr	r3, [r3]
   2c27c:	e1a00002 	mov	r0, r2
   2c280:	e12fff33 	blx	r3
   2c284:	e1a00000 	nop			; (mov r0, r0)
   2c288:	e24bd004 	sub	sp, fp, #4
   2c28c:	e8bd8800 	pop	{fp, pc}

0002c290 <L6470DmxModes::BusyCheck()>:
   2c290:	e92d4800 	push	{fp, lr}
   2c294:	e28db004 	add	fp, sp, #4
   2c298:	e24dd008 	sub	sp, sp, #8
   2c29c:	e50b0008 	str	r0, [fp, #-8]
   2c2a0:	e51b3008 	ldr	r3, [fp, #-8]
   2c2a4:	e593200c 	ldr	r2, [r3, #12]
   2c2a8:	e51b3008 	ldr	r3, [fp, #-8]
   2c2ac:	e593300c 	ldr	r3, [r3, #12]
   2c2b0:	e5933000 	ldr	r3, [r3]
   2c2b4:	e283301c 	add	r3, r3, #28
   2c2b8:	e5933000 	ldr	r3, [r3]
   2c2bc:	e1a00002 	mov	r0, r2
   2c2c0:	e12fff33 	blx	r3
   2c2c4:	e1a03000 	mov	r3, r0
   2c2c8:	e1a00003 	mov	r0, r3
   2c2cc:	e24bd004 	sub	sp, fp, #4
   2c2d0:	e8bd8800 	pop	{fp, pc}

0002c2d4 <L6470DmxModes::IsDmxDataChanged(unsigned char const*)>:
   2c2d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2c2d8:	e28db000 	add	fp, sp, #0
   2c2dc:	e24dd01c 	sub	sp, sp, #28
   2c2e0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2c2e4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   2c2e8:	e3a03000 	mov	r3, #0
   2c2ec:	e54b3005 	strb	r3, [fp, #-5]
   2c2f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c2f4:	e1d320b8 	ldrh	r2, [r3, #8]
   2c2f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c2fc:	e1d331b0 	ldrh	r3, [r3, #16]
   2c300:	e0823003 	add	r3, r2, r3
   2c304:	e6ff3073 	uxth	r3, r3
   2c308:	e2433001 	sub	r3, r3, #1
   2c30c:	e14b31b0 	strh	r3, [fp, #-16]
   2c310:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c314:	e5933014 	ldr	r3, [r3, #20]
   2c318:	e50b300c 	str	r3, [fp, #-12]
   2c31c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c320:	e1d330b8 	ldrh	r3, [r3, #8]
   2c324:	e14b30be 	strh	r3, [fp, #-14]
   2c328:	e15b20be 	ldrh	r2, [fp, #-14]
   2c32c:	e15b31b0 	ldrh	r3, [fp, #-16]
   2c330:	e1520003 	cmp	r2, r3
   2c334:	8a000018 	bhi	2c39c <L6470DmxModes::IsDmxDataChanged(unsigned char const*)+0xc8>
   2c338:	e15b30be 	ldrh	r3, [fp, #-14]
   2c33c:	e3530c02 	cmp	r3, #512	; 0x200
   2c340:	8a000015 	bhi	2c39c <L6470DmxModes::IsDmxDataChanged(unsigned char const*)+0xc8>
   2c344:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c348:	e5d32000 	ldrb	r2, [r3]
   2c34c:	e51b300c 	ldr	r3, [fp, #-12]
   2c350:	e5d33000 	ldrb	r3, [r3]
   2c354:	e1520003 	cmp	r2, r3
   2c358:	0a000001 	beq	2c364 <L6470DmxModes::IsDmxDataChanged(unsigned char const*)+0x90>
   2c35c:	e3a03001 	mov	r3, #1
   2c360:	e54b3005 	strb	r3, [fp, #-5]
   2c364:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c368:	e5d32000 	ldrb	r2, [r3]
   2c36c:	e51b300c 	ldr	r3, [fp, #-12]
   2c370:	e5c32000 	strb	r2, [r3]
   2c374:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c378:	e2833001 	add	r3, r3, #1
   2c37c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   2c380:	e51b300c 	ldr	r3, [fp, #-12]
   2c384:	e2833001 	add	r3, r3, #1
   2c388:	e50b300c 	str	r3, [fp, #-12]
   2c38c:	e15b30be 	ldrh	r3, [fp, #-14]
   2c390:	e2833001 	add	r3, r3, #1
   2c394:	e14b30be 	strh	r3, [fp, #-14]
   2c398:	eaffffe2 	b	2c328 <L6470DmxModes::IsDmxDataChanged(unsigned char const*)+0x54>
   2c39c:	e55b3005 	ldrb	r3, [fp, #-5]
   2c3a0:	e1a00003 	mov	r0, r3
   2c3a4:	e28bd000 	add	sp, fp, #0
   2c3a8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2c3ac:	e12fff1e 	bx	lr

0002c3b0 <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)>:
   2c3b0:	e92d4800 	push	{fp, lr}
   2c3b4:	e28db004 	add	fp, sp, #4
   2c3b8:	e24dd018 	sub	sp, sp, #24
   2c3bc:	e50b0010 	str	r0, [fp, #-16]
   2c3c0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2c3c4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   2c3c8:	e51b3010 	ldr	r3, [fp, #-16]
   2c3cc:	e593300c 	ldr	r3, [r3, #12]
   2c3d0:	e3530000 	cmp	r3, #0
   2c3d4:	1a000001 	bne	2c3e0 <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)+0x30>
   2c3d8:	e3a03000 	mov	r3, #0
   2c3dc:	ea000016 	b	2c43c <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)+0x8c>
   2c3e0:	e51b3010 	ldr	r3, [fp, #-16]
   2c3e4:	e1d330b8 	ldrh	r3, [r3, #8]
   2c3e8:	e1a02003 	mov	r2, r3
   2c3ec:	e51b3010 	ldr	r3, [fp, #-16]
   2c3f0:	e1d331b0 	ldrh	r3, [r3, #16]
   2c3f4:	e0823003 	add	r3, r2, r3
   2c3f8:	e1a02003 	mov	r2, r3
   2c3fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c400:	e1530002 	cmp	r3, r2
   2c404:	2a000001 	bcs	2c410 <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)+0x60>
   2c408:	e3a03000 	mov	r3, #0
   2c40c:	ea00000a 	b	2c43c <L6470DmxModes::IsDmxDataChanged(unsigned char const*, unsigned int)+0x8c>
   2c410:	e51b3010 	ldr	r3, [fp, #-16]
   2c414:	e1d330b8 	ldrh	r3, [r3, #8]
   2c418:	e2433001 	sub	r3, r3, #1
   2c41c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2c420:	e0823003 	add	r3, r2, r3
   2c424:	e50b3008 	str	r3, [fp, #-8]
   2c428:	e51b1008 	ldr	r1, [fp, #-8]
   2c42c:	e51b0010 	ldr	r0, [fp, #-16]
   2c430:	ebffffa7 	bl	2c2d4 <L6470DmxModes::IsDmxDataChanged(unsigned char const*)>
   2c434:	e1a03000 	mov	r3, r0
   2c438:	e1a00000 	nop			; (mov r0, r0)
   2c43c:	e1a00003 	mov	r0, r3
   2c440:	e24bd004 	sub	sp, fp, #4
   2c444:	e8bd8800 	pop	{fp, pc}

0002c448 <L6470DmxModes::DmxData(unsigned char const*, unsigned int)>:
   2c448:	e92d4800 	push	{fp, lr}
   2c44c:	e28db004 	add	fp, sp, #4
   2c450:	e24dd018 	sub	sp, sp, #24
   2c454:	e50b0010 	str	r0, [fp, #-16]
   2c458:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2c45c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   2c460:	e51b3010 	ldr	r3, [fp, #-16]
   2c464:	e1d330b8 	ldrh	r3, [r3, #8]
   2c468:	e1a02003 	mov	r2, r3
   2c46c:	e51b3010 	ldr	r3, [fp, #-16]
   2c470:	e1d331b0 	ldrh	r3, [r3, #16]
   2c474:	e0823003 	add	r3, r2, r3
   2c478:	e1a02003 	mov	r2, r3
   2c47c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c480:	e1530002 	cmp	r3, r2
   2c484:	3a000013 	bcc	2c4d8 <L6470DmxModes::DmxData(unsigned char const*, unsigned int)+0x90>
   2c488:	e51b3010 	ldr	r3, [fp, #-16]
   2c48c:	e1d330b8 	ldrh	r3, [r3, #8]
   2c490:	e2433001 	sub	r3, r3, #1
   2c494:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2c498:	e0823003 	add	r3, r2, r3
   2c49c:	e50b3008 	str	r3, [fp, #-8]
   2c4a0:	e51b3010 	ldr	r3, [fp, #-16]
   2c4a4:	e593200c 	ldr	r2, [r3, #12]
   2c4a8:	e51b3010 	ldr	r3, [fp, #-16]
   2c4ac:	e593300c 	ldr	r3, [r3, #12]
   2c4b0:	e5933000 	ldr	r3, [r3]
   2c4b4:	e2833020 	add	r3, r3, #32
   2c4b8:	e5933000 	ldr	r3, [r3]
   2c4bc:	e51b1008 	ldr	r1, [fp, #-8]
   2c4c0:	e1a00002 	mov	r0, r2
   2c4c4:	e12fff33 	blx	r3
   2c4c8:	e51b3010 	ldr	r3, [fp, #-16]
   2c4cc:	e3a02001 	mov	r2, #1
   2c4d0:	e5c32000 	strb	r2, [r3]
   2c4d4:	ea000000 	b	2c4dc <L6470DmxModes::DmxData(unsigned char const*, unsigned int)+0x94>
   2c4d8:	e1a00000 	nop			; (mov r0, r0)
   2c4dc:	e24bd004 	sub	sp, fp, #4
   2c4e0:	e8bd8800 	pop	{fp, pc}

0002c4e4 <L6470DmxMode::L6470DmxMode()>:
   2c4e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2c4e8:	e28db000 	add	fp, sp, #0
   2c4ec:	e24dd00c 	sub	sp, sp, #12
   2c4f0:	e50b0008 	str	r0, [fp, #-8]
   2c4f4:	e59f2018 	ldr	r2, [pc, #24]	; 2c514 <L6470DmxMode::L6470DmxMode()+0x30>
   2c4f8:	e51b3008 	ldr	r3, [fp, #-8]
   2c4fc:	e5832000 	str	r2, [r3]
   2c500:	e51b3008 	ldr	r3, [fp, #-8]
   2c504:	e1a00003 	mov	r0, r3
   2c508:	e28bd000 	add	sp, fp, #0
   2c50c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2c510:	e12fff1e 	bx	lr
   2c514:	00047bb0 	.word	0x00047bb0

0002c518 <L6470DmxMode6::L6470DmxMode6(L6470*, MotorParams*, ModeParams*)>:
   2c518:	e92d4800 	push	{fp, lr}
   2c51c:	e28db004 	add	fp, sp, #4
   2c520:	e24dd010 	sub	sp, sp, #16
   2c524:	e50b0008 	str	r0, [fp, #-8]
   2c528:	e50b100c 	str	r1, [fp, #-12]
   2c52c:	e50b2010 	str	r2, [fp, #-16]
   2c530:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2c534:	e51b3008 	ldr	r3, [fp, #-8]
   2c538:	e1a00003 	mov	r0, r3
   2c53c:	ebffffe8 	bl	2c4e4 <L6470DmxMode::L6470DmxMode()>
   2c540:	e59f2020 	ldr	r2, [pc, #32]	; 2c568 <L6470DmxMode6::L6470DmxMode6(L6470*, MotorParams*, ModeParams*)+0x50>
   2c544:	e51b3008 	ldr	r3, [fp, #-8]
   2c548:	e5832000 	str	r2, [r3]
   2c54c:	e51b3008 	ldr	r3, [fp, #-8]
   2c550:	e51b200c 	ldr	r2, [fp, #-12]
   2c554:	e5832004 	str	r2, [r3, #4]
   2c558:	e51b3008 	ldr	r3, [fp, #-8]
   2c55c:	e1a00003 	mov	r0, r3
   2c560:	e24bd004 	sub	sp, fp, #4
   2c564:	e8bd8800 	pop	{fp, pc}
   2c568:	00047a44 	.word	0x00047a44

0002c56c <L6470DmxMode6::~L6470DmxMode6()>:
   2c56c:	e92d4800 	push	{fp, lr}
   2c570:	e28db004 	add	fp, sp, #4
   2c574:	e24dd008 	sub	sp, sp, #8
   2c578:	e50b0008 	str	r0, [fp, #-8]
   2c57c:	e59f2020 	ldr	r2, [pc, #32]	; 2c5a4 <L6470DmxMode6::~L6470DmxMode6()+0x38>
   2c580:	e51b3008 	ldr	r3, [fp, #-8]
   2c584:	e5832000 	str	r2, [r3]
   2c588:	e51b3008 	ldr	r3, [fp, #-8]
   2c58c:	e1a00003 	mov	r0, r3
   2c590:	eb0002c4 	bl	2d0a8 <L6470DmxMode::~L6470DmxMode()>
   2c594:	e51b3008 	ldr	r3, [fp, #-8]
   2c598:	e1a00003 	mov	r0, r3
   2c59c:	e24bd004 	sub	sp, fp, #4
   2c5a0:	e8bd8800 	pop	{fp, pc}
   2c5a4:	00047a44 	.word	0x00047a44

0002c5a8 <L6470DmxMode6::~L6470DmxMode6()>:
   2c5a8:	e92d4800 	push	{fp, lr}
   2c5ac:	e28db004 	add	fp, sp, #4
   2c5b0:	e24dd008 	sub	sp, sp, #8
   2c5b4:	e50b0008 	str	r0, [fp, #-8]
   2c5b8:	e51b0008 	ldr	r0, [fp, #-8]
   2c5bc:	ebffffea 	bl	2c56c <L6470DmxMode6::~L6470DmxMode6()>
   2c5c0:	e51b0008 	ldr	r0, [fp, #-8]
   2c5c4:	ebff934f 	bl	11308 <operator delete(void*)@plt>
   2c5c8:	e51b3008 	ldr	r3, [fp, #-8]
   2c5cc:	e1a00003 	mov	r0, r3
   2c5d0:	e24bd004 	sub	sp, fp, #4
   2c5d4:	e8bd8800 	pop	{fp, pc}

0002c5d8 <L6470DmxMode6::Start()>:
   2c5d8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2c5dc:	e28db000 	add	fp, sp, #0
   2c5e0:	e24dd00c 	sub	sp, sp, #12
   2c5e4:	e50b0008 	str	r0, [fp, #-8]
   2c5e8:	e1a00000 	nop			; (mov r0, r0)
   2c5ec:	e28bd000 	add	sp, fp, #0
   2c5f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2c5f4:	e12fff1e 	bx	lr

0002c5f8 <L6470DmxMode6::Stop()>:
   2c5f8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2c5fc:	e28db000 	add	fp, sp, #0
   2c600:	e24dd00c 	sub	sp, sp, #12
   2c604:	e50b0008 	str	r0, [fp, #-8]
   2c608:	e1a00000 	nop			; (mov r0, r0)
   2c60c:	e28bd000 	add	sp, fp, #0
   2c610:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2c614:	e12fff1e 	bx	lr

0002c618 <L6470DmxMode6::Data(unsigned char const*)>:
   2c618:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2c61c:	e28db000 	add	fp, sp, #0
   2c620:	e24dd00c 	sub	sp, sp, #12
   2c624:	e50b0008 	str	r0, [fp, #-8]
   2c628:	e50b100c 	str	r1, [fp, #-12]
   2c62c:	e1a00000 	nop			; (mov r0, r0)
   2c630:	e28bd000 	add	sp, fp, #0
   2c634:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2c638:	e12fff1e 	bx	lr

0002c63c <L6470DmxModes::Print()>:
   2c63c:	e92d4800 	push	{fp, lr}
   2c640:	e28db004 	add	fp, sp, #4
   2c644:	e24dd008 	sub	sp, sp, #8
   2c648:	e50b0008 	str	r0, [fp, #-8]
   2c64c:	e51b3008 	ldr	r3, [fp, #-8]
   2c650:	e5933004 	ldr	r3, [r3, #4]
   2c654:	e1a01003 	mov	r1, r3
   2c658:	e51b3008 	ldr	r3, [fp, #-8]
   2c65c:	e1d330b8 	ldrh	r3, [r3, #8]
   2c660:	e1a02003 	mov	r2, r3
   2c664:	e51b3008 	ldr	r3, [fp, #-8]
   2c668:	e1d331b0 	ldrh	r3, [r3, #16]
   2c66c:	e59f000c 	ldr	r0, [pc, #12]	; 2c680 <L6470DmxModes::Print()+0x44>
   2c670:	ebff92df 	bl	111f4 <printf@plt>
   2c674:	e1a00000 	nop			; (mov r0, r0)
   2c678:	e24bd004 	sub	sp, fp, #4
   2c67c:	e8bd8800 	pop	{fp, pc}
   2c680:	00047a7c 	.word	0x00047a7c

0002c684 <MotorParams::GetStepAngel() const>:
   2c684:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2c688:	e28db000 	add	fp, sp, #0
   2c68c:	e24dd00c 	sub	sp, sp, #12
   2c690:	e50b0008 	str	r0, [fp, #-8]
   2c694:	e51b3008 	ldr	r3, [fp, #-8]
   2c698:	e5933008 	ldr	r3, [r3, #8]
   2c69c:	ee073a90 	vmov	s15, r3
   2c6a0:	eeb00a67 	vmov.f32	s0, s15
   2c6a4:	e28bd000 	add	sp, fp, #0
   2c6a8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2c6ac:	e12fff1e 	bx	lr

0002c6b0 <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)>:
   2c6b0:	e92d4800 	push	{fp, lr}
   2c6b4:	ed2d8b02 	vpush	{d8}
   2c6b8:	e28db00c 	add	fp, sp, #12
   2c6bc:	e24dd010 	sub	sp, sp, #16
   2c6c0:	e50b0010 	str	r0, [fp, #-16]
   2c6c4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2c6c8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   2c6cc:	e51b3010 	ldr	r3, [fp, #-16]
   2c6d0:	e1a00003 	mov	r0, r3
   2c6d4:	ebffff82 	bl	2c4e4 <L6470DmxMode::L6470DmxMode()>
   2c6d8:	e59f2090 	ldr	r2, [pc, #144]	; 2c770 <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)+0xc0>
   2c6dc:	e51b3010 	ldr	r3, [fp, #-16]
   2c6e0:	e5832000 	str	r2, [r3]
   2c6e4:	e51b3010 	ldr	r3, [fp, #-16]
   2c6e8:	e3a02000 	mov	r2, #0
   2c6ec:	e5c3200c 	strb	r2, [r3, #12]
   2c6f0:	e51b3010 	ldr	r3, [fp, #-16]
   2c6f4:	e3a02000 	mov	r2, #0
   2c6f8:	e5c3200d 	strb	r2, [r3, #13]
   2c6fc:	e51b3010 	ldr	r3, [fp, #-16]
   2c700:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2c704:	e5832004 	str	r2, [r3, #4]
   2c708:	e51b3010 	ldr	r3, [fp, #-16]
   2c70c:	e5933004 	ldr	r3, [r3, #4]
   2c710:	e1a00003 	mov	r0, r3
   2c714:	eb000b30 	bl	2f3dc <L6470::resetPos()>
   2c718:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2c71c:	eb0004e0 	bl	2daa4 <L6470::getStepMode()>
   2c720:	e1a03000 	mov	r3, r0
   2c724:	e1a02003 	mov	r2, r3
   2c728:	e3a03f5a 	mov	r3, #360	; 0x168
   2c72c:	e1a03213 	lsl	r3, r3, r2
   2c730:	ee073a90 	vmov	s15, r3
   2c734:	eeb88a67 	vcvt.f32.u32	s16, s15
   2c738:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2c73c:	ebffffd0 	bl	2c684 <MotorParams::GetStepAngel() const>
   2c740:	eef07a40 	vmov.f32	s15, s0
   2c744:	ee887a27 	vdiv.f32	s14, s16, s15
   2c748:	eddf6a07 	vldr	s13, [pc, #28]	; 2c76c <L6470DmxMode3::L6470DmxMode3(L6470*, MotorParams*)+0xbc>
   2c74c:	eec77a26 	vdiv.f32	s15, s14, s13
   2c750:	e51b3010 	ldr	r3, [fp, #-16]
   2c754:	edc37a02 	vstr	s15, [r3, #8]
   2c758:	e51b3010 	ldr	r3, [fp, #-16]
   2c75c:	e1a00003 	mov	r0, r3
   2c760:	e24bd00c 	sub	sp, fp, #12
   2c764:	ecbd8b02 	vpop	{d8}
   2c768:	e8bd8800 	pop	{fp, pc}
   2c76c:	437f0000 	.word	0x437f0000
   2c770:	00047ab4 	.word	0x00047ab4

0002c774 <L6470DmxMode3::~L6470DmxMode3()>:
   2c774:	e92d4800 	push	{fp, lr}
   2c778:	e28db004 	add	fp, sp, #4
   2c77c:	e24dd008 	sub	sp, sp, #8
   2c780:	e50b0008 	str	r0, [fp, #-8]
   2c784:	e59f2020 	ldr	r2, [pc, #32]	; 2c7ac <L6470DmxMode3::~L6470DmxMode3()+0x38>
   2c788:	e51b3008 	ldr	r3, [fp, #-8]
   2c78c:	e5832000 	str	r2, [r3]
   2c790:	e51b3008 	ldr	r3, [fp, #-8]
   2c794:	e1a00003 	mov	r0, r3
   2c798:	eb000242 	bl	2d0a8 <L6470DmxMode::~L6470DmxMode()>
   2c79c:	e51b3008 	ldr	r3, [fp, #-8]
   2c7a0:	e1a00003 	mov	r0, r3
   2c7a4:	e24bd004 	sub	sp, fp, #4
   2c7a8:	e8bd8800 	pop	{fp, pc}
   2c7ac:	00047ab4 	.word	0x00047ab4

0002c7b0 <L6470DmxMode3::~L6470DmxMode3()>:
   2c7b0:	e92d4800 	push	{fp, lr}
   2c7b4:	e28db004 	add	fp, sp, #4
   2c7b8:	e24dd008 	sub	sp, sp, #8
   2c7bc:	e50b0008 	str	r0, [fp, #-8]
   2c7c0:	e51b0008 	ldr	r0, [fp, #-8]
   2c7c4:	ebffffea 	bl	2c774 <L6470DmxMode3::~L6470DmxMode3()>
   2c7c8:	e51b0008 	ldr	r0, [fp, #-8]
   2c7cc:	ebff92cd 	bl	11308 <operator delete(void*)@plt>
   2c7d0:	e51b3008 	ldr	r3, [fp, #-8]
   2c7d4:	e1a00003 	mov	r0, r3
   2c7d8:	e24bd004 	sub	sp, fp, #4
   2c7dc:	e8bd8800 	pop	{fp, pc}

0002c7e0 <L6470DmxMode3::Start()>:
   2c7e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2c7e4:	e28db000 	add	fp, sp, #0
   2c7e8:	e24dd00c 	sub	sp, sp, #12
   2c7ec:	e50b0008 	str	r0, [fp, #-8]
   2c7f0:	e1a00000 	nop			; (mov r0, r0)
   2c7f4:	e28bd000 	add	sp, fp, #0
   2c7f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2c7fc:	e12fff1e 	bx	lr

0002c800 <L6470DmxMode3::Stop()>:
   2c800:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2c804:	e28db000 	add	fp, sp, #0
   2c808:	e24dd00c 	sub	sp, sp, #12
   2c80c:	e50b0008 	str	r0, [fp, #-8]
   2c810:	e1a00000 	nop			; (mov r0, r0)
   2c814:	e28bd000 	add	sp, fp, #0
   2c818:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2c81c:	e12fff1e 	bx	lr

0002c820 <L6470DmxMode3::HandleBusy()>:
   2c820:	e92d4800 	push	{fp, lr}
   2c824:	e28db004 	add	fp, sp, #4
   2c828:	e24dd008 	sub	sp, sp, #8
   2c82c:	e50b0008 	str	r0, [fp, #-8]
   2c830:	e51b3008 	ldr	r3, [fp, #-8]
   2c834:	e5932004 	ldr	r2, [r3, #4]
   2c838:	e51b3008 	ldr	r3, [fp, #-8]
   2c83c:	e5933004 	ldr	r3, [r3, #4]
   2c840:	e5933000 	ldr	r3, [r3]
   2c844:	e2833008 	add	r3, r3, #8
   2c848:	e5933000 	ldr	r3, [r3]
   2c84c:	e1a00002 	mov	r0, r2
   2c850:	e12fff33 	blx	r3
   2c854:	e1a03000 	mov	r3, r0
   2c858:	e3530000 	cmp	r3, #0
   2c85c:	13a03001 	movne	r3, #1
   2c860:	03a03000 	moveq	r3, #0
   2c864:	e6ef3073 	uxtb	r3, r3
   2c868:	e3530000 	cmp	r3, #0
   2c86c:	0a000007 	beq	2c890 <L6470DmxMode3::HandleBusy()+0x70>
   2c870:	e51b3008 	ldr	r3, [fp, #-8]
   2c874:	e5933004 	ldr	r3, [r3, #4]
   2c878:	e1a00003 	mov	r0, r3
   2c87c:	eb000af2 	bl	2f44c <L6470::softStop()>
   2c880:	e51b3008 	ldr	r3, [fp, #-8]
   2c884:	e3a02001 	mov	r2, #1
   2c888:	e5c3200d 	strb	r2, [r3, #13]
   2c88c:	ea000002 	b	2c89c <L6470DmxMode3::HandleBusy()+0x7c>
   2c890:	e51b3008 	ldr	r3, [fp, #-8]
   2c894:	e3a02000 	mov	r2, #0
   2c898:	e5c3200d 	strb	r2, [r3, #13]
   2c89c:	e1a00000 	nop			; (mov r0, r0)
   2c8a0:	e24bd004 	sub	sp, fp, #4
   2c8a4:	e8bd8800 	pop	{fp, pc}

0002c8a8 <L6470DmxMode3::BusyCheck()>:
   2c8a8:	e92d4800 	push	{fp, lr}
   2c8ac:	e28db004 	add	fp, sp, #4
   2c8b0:	e24dd008 	sub	sp, sp, #8
   2c8b4:	e50b0008 	str	r0, [fp, #-8]
   2c8b8:	e51b3008 	ldr	r3, [fp, #-8]
   2c8bc:	e5932004 	ldr	r2, [r3, #4]
   2c8c0:	e51b3008 	ldr	r3, [fp, #-8]
   2c8c4:	e5933004 	ldr	r3, [r3, #4]
   2c8c8:	e5933000 	ldr	r3, [r3]
   2c8cc:	e2833008 	add	r3, r3, #8
   2c8d0:	e5933000 	ldr	r3, [r3]
   2c8d4:	e1a00002 	mov	r0, r2
   2c8d8:	e12fff33 	blx	r3
   2c8dc:	e1a03000 	mov	r3, r0
   2c8e0:	e3530000 	cmp	r3, #0
   2c8e4:	13a03001 	movne	r3, #1
   2c8e8:	03a03000 	moveq	r3, #0
   2c8ec:	e6ef3073 	uxtb	r3, r3
   2c8f0:	e1a00003 	mov	r0, r3
   2c8f4:	e24bd004 	sub	sp, fp, #4
   2c8f8:	e8bd8800 	pop	{fp, pc}

0002c8fc <L6470DmxMode3::Data(unsigned char const*)>:
   2c8fc:	e92d4800 	push	{fp, lr}
   2c900:	e28db004 	add	fp, sp, #4
   2c904:	e24dd018 	sub	sp, sp, #24
   2c908:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2c90c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   2c910:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c914:	e5d33000 	ldrb	r3, [r3]
   2c918:	ee073a90 	vmov	s15, r3
   2c91c:	eeb87a67 	vcvt.f32.u32	s14, s15
   2c920:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c924:	edd37a02 	vldr	s15, [r3, #8]
   2c928:	ee677a27 	vmul.f32	s15, s14, s15
   2c92c:	eefc7ae7 	vcvt.u32.f32	s15, s15
   2c930:	ee173a90 	vmov	r3, s15
   2c934:	e50b300c 	str	r3, [fp, #-12]
   2c938:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c93c:	e5d3300d 	ldrb	r3, [r3, #13]
   2c940:	e3530000 	cmp	r3, #0
   2c944:	0a00000c 	beq	2c97c <L6470DmxMode3::Data(unsigned char const*)+0x80>
   2c948:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c94c:	e5933004 	ldr	r3, [r3, #4]
   2c950:	e1a00003 	mov	r0, r3
   2c954:	eb00090b 	bl	2ed88 <L6470::getPos()>
   2c958:	e1a03000 	mov	r3, r0
   2c95c:	e50b3010 	str	r3, [fp, #-16]
   2c960:	e51b2010 	ldr	r2, [fp, #-16]
   2c964:	e51b300c 	ldr	r3, [fp, #-12]
   2c968:	e1520003 	cmp	r2, r3
   2c96c:	83a03001 	movhi	r3, #1
   2c970:	93a03000 	movls	r3, #0
   2c974:	e54b3005 	strb	r3, [fp, #-5]
   2c978:	ea000007 	b	2c99c <L6470DmxMode3::Data(unsigned char const*)+0xa0>
   2c97c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c980:	e5d3200c 	ldrb	r2, [r3, #12]
   2c984:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c988:	e5d33000 	ldrb	r3, [r3]
   2c98c:	e1520003 	cmp	r2, r3
   2c990:	83a03001 	movhi	r3, #1
   2c994:	93a03000 	movls	r3, #0
   2c998:	e54b3005 	strb	r3, [fp, #-5]
   2c99c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c9a0:	e5930004 	ldr	r0, [r3, #4]
   2c9a4:	e55b3005 	ldrb	r3, [fp, #-5]
   2c9a8:	e3530000 	cmp	r3, #0
   2c9ac:	0a000001 	beq	2c9b8 <L6470DmxMode3::Data(unsigned char const*)+0xbc>
   2c9b0:	e3a03000 	mov	r3, #0
   2c9b4:	ea000000 	b	2c9bc <L6470DmxMode3::Data(unsigned char const*)+0xc0>
   2c9b8:	e3a03001 	mov	r3, #1
   2c9bc:	e51b200c 	ldr	r2, [fp, #-12]
   2c9c0:	e1a01003 	mov	r1, r3
   2c9c4:	eb0009c3 	bl	2f0d8 <L6470::goToDir(TL6470Direction, long)>
   2c9c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2c9cc:	e5d32000 	ldrb	r2, [r3]
   2c9d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2c9d4:	e5c3200c 	strb	r2, [r3, #12]
   2c9d8:	e1a00000 	nop			; (mov r0, r0)
   2c9dc:	e24bd004 	sub	sp, fp, #4
   2c9e0:	e8bd8800 	pop	{fp, pc}

0002c9e4 <ModeParams::GetMaxSteps() const>:
   2c9e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2c9e8:	e28db000 	add	fp, sp, #0
   2c9ec:	e24dd00c 	sub	sp, sp, #12
   2c9f0:	e50b0008 	str	r0, [fp, #-8]
   2c9f4:	e51b3008 	ldr	r3, [fp, #-8]
   2c9f8:	e5d3200b 	ldrb	r2, [r3, #11]
   2c9fc:	e593300c 	ldr	r3, [r3, #12]
   2ca00:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
   2ca04:	e1a03403 	lsl	r3, r3, #8
   2ca08:	e1833002 	orr	r3, r3, r2
   2ca0c:	e1a00003 	mov	r0, r3
   2ca10:	e28bd000 	add	sp, fp, #0
   2ca14:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2ca18:	e12fff1e 	bx	lr

0002ca1c <ModeParams::GetSwitchAction() const>:
   2ca1c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2ca20:	e28db000 	add	fp, sp, #0
   2ca24:	e24dd00c 	sub	sp, sp, #12
   2ca28:	e50b0008 	str	r0, [fp, #-8]
   2ca2c:	e51b3008 	ldr	r3, [fp, #-8]
   2ca30:	e5d3200f 	ldrb	r2, [r3, #15]
   2ca34:	e5933010 	ldr	r3, [r3, #16]
   2ca38:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
   2ca3c:	e1a03403 	lsl	r3, r3, #8
   2ca40:	e1833002 	orr	r3, r3, r2
   2ca44:	e1a00003 	mov	r0, r3
   2ca48:	e28bd000 	add	sp, fp, #0
   2ca4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2ca50:	e12fff1e 	bx	lr

0002ca54 <ModeParams::GetSwitchDir() const>:
   2ca54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2ca58:	e28db000 	add	fp, sp, #0
   2ca5c:	e24dd00c 	sub	sp, sp, #12
   2ca60:	e50b0008 	str	r0, [fp, #-8]
   2ca64:	e51b3008 	ldr	r3, [fp, #-8]
   2ca68:	e5d32013 	ldrb	r2, [r3, #19]
   2ca6c:	e5933014 	ldr	r3, [r3, #20]
   2ca70:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
   2ca74:	e1a03403 	lsl	r3, r3, #8
   2ca78:	e1833002 	orr	r3, r3, r2
   2ca7c:	e1a00003 	mov	r0, r3
   2ca80:	e28bd000 	add	sp, fp, #0
   2ca84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2ca88:	e12fff1e 	bx	lr

0002ca8c <ModeParams::GetSwitchStepsPerSec() const>:
   2ca8c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2ca90:	e28db000 	add	fp, sp, #0
   2ca94:	e24dd00c 	sub	sp, sp, #12
   2ca98:	e50b0008 	str	r0, [fp, #-8]
   2ca9c:	e51b3008 	ldr	r3, [fp, #-8]
   2caa0:	e5d32017 	ldrb	r2, [r3, #23]
   2caa4:	e5933018 	ldr	r3, [r3, #24]
   2caa8:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
   2caac:	e1a03403 	lsl	r3, r3, #8
   2cab0:	e1833002 	orr	r3, r3, r2
   2cab4:	ee073a90 	vmov	s15, r3
   2cab8:	eeb00a67 	vmov.f32	s0, s15
   2cabc:	e28bd000 	add	sp, fp, #0
   2cac0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2cac4:	e12fff1e 	bx	lr

0002cac8 <ModeParams::HasSwitch() const>:
   2cac8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2cacc:	e28db000 	add	fp, sp, #0
   2cad0:	e24dd00c 	sub	sp, sp, #12
   2cad4:	e50b0008 	str	r0, [fp, #-8]
   2cad8:	e51b3008 	ldr	r3, [fp, #-8]
   2cadc:	e5d3301b 	ldrb	r3, [r3, #27]
   2cae0:	e1a00003 	mov	r0, r3
   2cae4:	e28bd000 	add	sp, fp, #0
   2cae8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2caec:	e12fff1e 	bx	lr

0002caf0 <L6470DmxMode5::L6470DmxMode5(L6470*, MotorParams*, ModeParams*)>:
   2caf0:	e92d4800 	push	{fp, lr}
   2caf4:	e28db004 	add	fp, sp, #4
   2caf8:	e24dd010 	sub	sp, sp, #16
   2cafc:	e50b0008 	str	r0, [fp, #-8]
   2cb00:	e50b100c 	str	r1, [fp, #-12]
   2cb04:	e50b2010 	str	r2, [fp, #-16]
   2cb08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2cb0c:	e51b3008 	ldr	r3, [fp, #-8]
   2cb10:	e1a00003 	mov	r0, r3
   2cb14:	ebfffe72 	bl	2c4e4 <L6470DmxMode::L6470DmxMode()>
   2cb18:	e59f2068 	ldr	r2, [pc, #104]	; 2cb88 <L6470DmxMode5::L6470DmxMode5(L6470*, MotorParams*, ModeParams*)+0x98>
   2cb1c:	e51b3008 	ldr	r3, [fp, #-8]
   2cb20:	e5832000 	str	r2, [r3]
   2cb24:	e51b3008 	ldr	r3, [fp, #-8]
   2cb28:	e3a02000 	mov	r2, #0
   2cb2c:	e1c321b0 	strh	r2, [r3, #16]
   2cb30:	e51b3008 	ldr	r3, [fp, #-8]
   2cb34:	e3a02000 	mov	r2, #0
   2cb38:	e5c32012 	strb	r2, [r3, #18]
   2cb3c:	e51b3008 	ldr	r3, [fp, #-8]
   2cb40:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2cb44:	e5832004 	str	r2, [r3, #4]
   2cb48:	e51b3008 	ldr	r3, [fp, #-8]
   2cb4c:	e51b200c 	ldr	r2, [fp, #-12]
   2cb50:	e5832008 	str	r2, [r3, #8]
   2cb54:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2cb58:	ebffffa1 	bl	2c9e4 <ModeParams::GetMaxSteps() const>
   2cb5c:	ee070a90 	vmov	s15, r0
   2cb60:	eeb87a67 	vcvt.f32.u32	s14, s15
   2cb64:	eddf6a06 	vldr	s13, [pc, #24]	; 2cb84 <L6470DmxMode5::L6470DmxMode5(L6470*, MotorParams*, ModeParams*)+0x94>
   2cb68:	eec77a26 	vdiv.f32	s15, s14, s13
   2cb6c:	e51b3008 	ldr	r3, [fp, #-8]
   2cb70:	edc37a03 	vstr	s15, [r3, #12]
   2cb74:	e51b3008 	ldr	r3, [fp, #-8]
   2cb78:	e1a00003 	mov	r0, r3
   2cb7c:	e24bd004 	sub	sp, fp, #4
   2cb80:	e8bd8800 	pop	{fp, pc}
   2cb84:	477fff00 	.word	0x477fff00
   2cb88:	00047b4c 	.word	0x00047b4c

0002cb8c <L6470DmxMode5::~L6470DmxMode5()>:
   2cb8c:	e92d4800 	push	{fp, lr}
   2cb90:	e28db004 	add	fp, sp, #4
   2cb94:	e24dd008 	sub	sp, sp, #8
   2cb98:	e50b0008 	str	r0, [fp, #-8]
   2cb9c:	e59f2020 	ldr	r2, [pc, #32]	; 2cbc4 <L6470DmxMode5::~L6470DmxMode5()+0x38>
   2cba0:	e51b3008 	ldr	r3, [fp, #-8]
   2cba4:	e5832000 	str	r2, [r3]
   2cba8:	e51b3008 	ldr	r3, [fp, #-8]
   2cbac:	e1a00003 	mov	r0, r3
   2cbb0:	eb00013c 	bl	2d0a8 <L6470DmxMode::~L6470DmxMode()>
   2cbb4:	e51b3008 	ldr	r3, [fp, #-8]
   2cbb8:	e1a00003 	mov	r0, r3
   2cbbc:	e24bd004 	sub	sp, fp, #4
   2cbc0:	e8bd8800 	pop	{fp, pc}
   2cbc4:	00047b4c 	.word	0x00047b4c

0002cbc8 <L6470DmxMode5::~L6470DmxMode5()>:
   2cbc8:	e92d4800 	push	{fp, lr}
   2cbcc:	e28db004 	add	fp, sp, #4
   2cbd0:	e24dd008 	sub	sp, sp, #8
   2cbd4:	e50b0008 	str	r0, [fp, #-8]
   2cbd8:	e51b0008 	ldr	r0, [fp, #-8]
   2cbdc:	ebffffea 	bl	2cb8c <L6470DmxMode5::~L6470DmxMode5()>
   2cbe0:	e51b0008 	ldr	r0, [fp, #-8]
   2cbe4:	ebff91c7 	bl	11308 <operator delete(void*)@plt>
   2cbe8:	e51b3008 	ldr	r3, [fp, #-8]
   2cbec:	e1a00003 	mov	r0, r3
   2cbf0:	e24bd004 	sub	sp, fp, #4
   2cbf4:	e8bd8800 	pop	{fp, pc}

0002cbf8 <L6470DmxMode5::InitSwitch()>:
   2cbf8:	e92d4800 	push	{fp, lr}
   2cbfc:	e28db004 	add	fp, sp, #4
   2cc00:	e24dd018 	sub	sp, sp, #24
   2cc04:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2cc08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2cc0c:	e5933004 	ldr	r3, [r3, #4]
   2cc10:	e1a00003 	mov	r0, r3
   2cc14:	ebffffab 	bl	2cac8 <ModeParams::HasSwitch() const>
   2cc18:	e1a03000 	mov	r3, r0
   2cc1c:	e3530000 	cmp	r3, #0
   2cc20:	0a000015 	beq	2cc7c <L6470DmxMode5::InitSwitch()+0x84>
   2cc24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2cc28:	e5933004 	ldr	r3, [r3, #4]
   2cc2c:	e1a00003 	mov	r0, r3
   2cc30:	ebffff79 	bl	2ca1c <ModeParams::GetSwitchAction() const>
   2cc34:	e50b0008 	str	r0, [fp, #-8]
   2cc38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2cc3c:	e5933004 	ldr	r3, [r3, #4]
   2cc40:	e1a00003 	mov	r0, r3
   2cc44:	ebffff82 	bl	2ca54 <ModeParams::GetSwitchDir() const>
   2cc48:	e50b000c 	str	r0, [fp, #-12]
   2cc4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2cc50:	e5933004 	ldr	r3, [r3, #4]
   2cc54:	e1a00003 	mov	r0, r3
   2cc58:	ebffff8b 	bl	2ca8c <ModeParams::GetSwitchStepsPerSec() const>
   2cc5c:	ed0b0a04 	vstr	s0, [fp, #-16]
   2cc60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2cc64:	e5933008 	ldr	r3, [r3, #8]
   2cc68:	ed1b0a04 	vldr	s0, [fp, #-16]
   2cc6c:	e51b200c 	ldr	r2, [fp, #-12]
   2cc70:	e51b1008 	ldr	r1, [fp, #-8]
   2cc74:	e1a00003 	mov	r0, r3
   2cc78:	eb000949 	bl	2f1a4 <L6470::goUntil(TL6470Action, TL6470Direction, float)>
   2cc7c:	e1a00000 	nop			; (mov r0, r0)
   2cc80:	e24bd004 	sub	sp, fp, #4
   2cc84:	e8bd8800 	pop	{fp, pc}

0002cc88 <L6470DmxMode5::InitPos()>:
   2cc88:	e92d4800 	push	{fp, lr}
   2cc8c:	e28db004 	add	fp, sp, #4
   2cc90:	e24dd008 	sub	sp, sp, #8
   2cc94:	e50b0008 	str	r0, [fp, #-8]
   2cc98:	e51b3008 	ldr	r3, [fp, #-8]
   2cc9c:	e5933008 	ldr	r3, [r3, #8]
   2cca0:	e1a00003 	mov	r0, r3
   2cca4:	eb0009cc 	bl	2f3dc <L6470::resetPos()>
   2cca8:	e1a00000 	nop			; (mov r0, r0)
   2ccac:	e24bd004 	sub	sp, fp, #4
   2ccb0:	e8bd8800 	pop	{fp, pc}

0002ccb4 <L6470DmxMode5::Start()>:
   2ccb4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2ccb8:	e28db000 	add	fp, sp, #0
   2ccbc:	e24dd00c 	sub	sp, sp, #12
   2ccc0:	e50b0008 	str	r0, [fp, #-8]
   2ccc4:	e1a00000 	nop			; (mov r0, r0)
   2ccc8:	e28bd000 	add	sp, fp, #0
   2cccc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2ccd0:	e12fff1e 	bx	lr

0002ccd4 <L6470DmxMode5::Stop()>:
   2ccd4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2ccd8:	e28db000 	add	fp, sp, #0
   2ccdc:	e24dd00c 	sub	sp, sp, #12
   2cce0:	e50b0008 	str	r0, [fp, #-8]
   2cce4:	e1a00000 	nop			; (mov r0, r0)
   2cce8:	e28bd000 	add	sp, fp, #0
   2ccec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2ccf0:	e12fff1e 	bx	lr

0002ccf4 <L6470DmxMode5::HandleBusy()>:
   2ccf4:	e92d4800 	push	{fp, lr}
   2ccf8:	e28db004 	add	fp, sp, #4
   2ccfc:	e24dd008 	sub	sp, sp, #8
   2cd00:	e50b0008 	str	r0, [fp, #-8]
   2cd04:	e51b3008 	ldr	r3, [fp, #-8]
   2cd08:	e5932008 	ldr	r2, [r3, #8]
   2cd0c:	e51b3008 	ldr	r3, [fp, #-8]
   2cd10:	e5933008 	ldr	r3, [r3, #8]
   2cd14:	e5933000 	ldr	r3, [r3]
   2cd18:	e2833008 	add	r3, r3, #8
   2cd1c:	e5933000 	ldr	r3, [r3]
   2cd20:	e1a00002 	mov	r0, r2
   2cd24:	e12fff33 	blx	r3
   2cd28:	e1a03000 	mov	r3, r0
   2cd2c:	e3530000 	cmp	r3, #0
   2cd30:	13a03001 	movne	r3, #1
   2cd34:	03a03000 	moveq	r3, #0
   2cd38:	e6ef3073 	uxtb	r3, r3
   2cd3c:	e3530000 	cmp	r3, #0
   2cd40:	0a000007 	beq	2cd64 <L6470DmxMode5::HandleBusy()+0x70>
   2cd44:	e51b3008 	ldr	r3, [fp, #-8]
   2cd48:	e5933008 	ldr	r3, [r3, #8]
   2cd4c:	e1a00003 	mov	r0, r3
   2cd50:	eb0009bd 	bl	2f44c <L6470::softStop()>
   2cd54:	e51b3008 	ldr	r3, [fp, #-8]
   2cd58:	e3a02001 	mov	r2, #1
   2cd5c:	e5c32012 	strb	r2, [r3, #18]
   2cd60:	ea000002 	b	2cd70 <L6470DmxMode5::HandleBusy()+0x7c>
   2cd64:	e51b3008 	ldr	r3, [fp, #-8]
   2cd68:	e3a02000 	mov	r2, #0
   2cd6c:	e5c32012 	strb	r2, [r3, #18]
   2cd70:	e1a00000 	nop			; (mov r0, r0)
   2cd74:	e24bd004 	sub	sp, fp, #4
   2cd78:	e8bd8800 	pop	{fp, pc}

0002cd7c <L6470DmxMode5::BusyCheck()>:
   2cd7c:	e92d4800 	push	{fp, lr}
   2cd80:	e28db004 	add	fp, sp, #4
   2cd84:	e24dd008 	sub	sp, sp, #8
   2cd88:	e50b0008 	str	r0, [fp, #-8]
   2cd8c:	e51b3008 	ldr	r3, [fp, #-8]
   2cd90:	e5932008 	ldr	r2, [r3, #8]
   2cd94:	e51b3008 	ldr	r3, [fp, #-8]
   2cd98:	e5933008 	ldr	r3, [r3, #8]
   2cd9c:	e5933000 	ldr	r3, [r3]
   2cda0:	e2833008 	add	r3, r3, #8
   2cda4:	e5933000 	ldr	r3, [r3]
   2cda8:	e1a00002 	mov	r0, r2
   2cdac:	e12fff33 	blx	r3
   2cdb0:	e1a03000 	mov	r3, r0
   2cdb4:	e3530000 	cmp	r3, #0
   2cdb8:	13a03001 	movne	r3, #1
   2cdbc:	03a03000 	moveq	r3, #0
   2cdc0:	e6ef3073 	uxtb	r3, r3
   2cdc4:	e1a00003 	mov	r0, r3
   2cdc8:	e24bd004 	sub	sp, fp, #4
   2cdcc:	e8bd8800 	pop	{fp, pc}

0002cdd0 <L6470DmxMode5::Data(unsigned char const*)>:
   2cdd0:	e92d4800 	push	{fp, lr}
   2cdd4:	e28db004 	add	fp, sp, #4
   2cdd8:	e24dd018 	sub	sp, sp, #24
   2cddc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2cde0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   2cde4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2cde8:	e2833001 	add	r3, r3, #1
   2cdec:	e5d33000 	ldrb	r3, [r3]
   2cdf0:	e6bf2073 	sxth	r2, r3
   2cdf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2cdf8:	e5d33000 	ldrb	r3, [r3]
   2cdfc:	e1a03403 	lsl	r3, r3, #8
   2ce00:	e6bf3073 	sxth	r3, r3
   2ce04:	e1823003 	orr	r3, r2, r3
   2ce08:	e6bf3073 	sxth	r3, r3
   2ce0c:	e14b30b8 	strh	r3, [fp, #-8]
   2ce10:	e15b30b8 	ldrh	r3, [fp, #-8]
   2ce14:	ee073a90 	vmov	s15, r3
   2ce18:	eeb87a67 	vcvt.f32.u32	s14, s15
   2ce1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ce20:	edd37a03 	vldr	s15, [r3, #12]
   2ce24:	ee677a27 	vmul.f32	s15, s14, s15
   2ce28:	eefc7ae7 	vcvt.u32.f32	s15, s15
   2ce2c:	ee173a90 	vmov	r3, s15
   2ce30:	e50b300c 	str	r3, [fp, #-12]
   2ce34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ce38:	e5d33012 	ldrb	r3, [r3, #18]
   2ce3c:	e3530000 	cmp	r3, #0
   2ce40:	0a00000c 	beq	2ce78 <L6470DmxMode5::Data(unsigned char const*)+0xa8>
   2ce44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ce48:	e5933008 	ldr	r3, [r3, #8]
   2ce4c:	e1a00003 	mov	r0, r3
   2ce50:	eb0007cc 	bl	2ed88 <L6470::getPos()>
   2ce54:	e1a03000 	mov	r3, r0
   2ce58:	e50b3010 	str	r3, [fp, #-16]
   2ce5c:	e51b2010 	ldr	r2, [fp, #-16]
   2ce60:	e51b300c 	ldr	r3, [fp, #-12]
   2ce64:	e1520003 	cmp	r2, r3
   2ce68:	83a03001 	movhi	r3, #1
   2ce6c:	93a03000 	movls	r3, #0
   2ce70:	e54b3005 	strb	r3, [fp, #-5]
   2ce74:	ea000006 	b	2ce94 <L6470DmxMode5::Data(unsigned char const*)+0xc4>
   2ce78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ce7c:	e1d331b0 	ldrh	r3, [r3, #16]
   2ce80:	e15b20b8 	ldrh	r2, [fp, #-8]
   2ce84:	e1520003 	cmp	r2, r3
   2ce88:	33a03001 	movcc	r3, #1
   2ce8c:	23a03000 	movcs	r3, #0
   2ce90:	e54b3005 	strb	r3, [fp, #-5]
   2ce94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ce98:	e5930008 	ldr	r0, [r3, #8]
   2ce9c:	e55b3005 	ldrb	r3, [fp, #-5]
   2cea0:	e3530000 	cmp	r3, #0
   2cea4:	0a000001 	beq	2ceb0 <L6470DmxMode5::Data(unsigned char const*)+0xe0>
   2cea8:	e3a03000 	mov	r3, #0
   2ceac:	ea000000 	b	2ceb4 <L6470DmxMode5::Data(unsigned char const*)+0xe4>
   2ceb0:	e3a03001 	mov	r3, #1
   2ceb4:	e51b200c 	ldr	r2, [fp, #-12]
   2ceb8:	e1a01003 	mov	r1, r3
   2cebc:	eb000885 	bl	2f0d8 <L6470::goToDir(TL6470Direction, long)>
   2cec0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2cec4:	e15b20b8 	ldrh	r2, [fp, #-8]
   2cec8:	e1c321b0 	strh	r2, [r3, #16]
   2cecc:	e1a00000 	nop			; (mov r0, r0)
   2ced0:	e24bd004 	sub	sp, fp, #4
   2ced4:	e8bd8800 	pop	{fp, pc}

0002ced8 <L6470DmxMode2::L6470DmxMode2(L6470*)>:
   2ced8:	e92d4800 	push	{fp, lr}
   2cedc:	e28db004 	add	fp, sp, #4
   2cee0:	e24dd008 	sub	sp, sp, #8
   2cee4:	e50b0008 	str	r0, [fp, #-8]
   2cee8:	e50b100c 	str	r1, [fp, #-12]
   2ceec:	e51b3008 	ldr	r3, [fp, #-8]
   2cef0:	e1a00003 	mov	r0, r3
   2cef4:	ebfffd7a 	bl	2c4e4 <L6470DmxMode::L6470DmxMode()>
   2cef8:	e59f2058 	ldr	r2, [pc, #88]	; 2cf58 <L6470DmxMode2::L6470DmxMode2(L6470*)+0x80>
   2cefc:	e51b3008 	ldr	r3, [fp, #-8]
   2cf00:	e5832000 	str	r2, [r3]
   2cf04:	e51b3008 	ldr	r3, [fp, #-8]
   2cf08:	e51b200c 	ldr	r2, [fp, #-12]
   2cf0c:	e5832004 	str	r2, [r3, #4]
   2cf10:	e51b3008 	ldr	r3, [fp, #-8]
   2cf14:	e5933004 	ldr	r3, [r3, #4]
   2cf18:	e1a00003 	mov	r0, r3
   2cf1c:	eb000326 	bl	2dbbc <L6470::getMinSpeed()>
   2cf20:	eef07a40 	vmov.f32	s15, s0
   2cf24:	e51b3008 	ldr	r3, [fp, #-8]
   2cf28:	edc37a02 	vstr	s15, [r3, #8]
   2cf2c:	e51b3008 	ldr	r3, [fp, #-8]
   2cf30:	e5933004 	ldr	r3, [r3, #4]
   2cf34:	e1a00003 	mov	r0, r3
   2cf38:	eb0002f7 	bl	2db1c <L6470::getMaxSpeed()>
   2cf3c:	eef07a40 	vmov.f32	s15, s0
   2cf40:	e51b3008 	ldr	r3, [fp, #-8]
   2cf44:	edc37a03 	vstr	s15, [r3, #12]
   2cf48:	e51b3008 	ldr	r3, [fp, #-8]
   2cf4c:	e1a00003 	mov	r0, r3
   2cf50:	e24bd004 	sub	sp, fp, #4
   2cf54:	e8bd8800 	pop	{fp, pc}
   2cf58:	00047b84 	.word	0x00047b84

0002cf5c <L6470DmxMode2::~L6470DmxMode2()>:
   2cf5c:	e92d4800 	push	{fp, lr}
   2cf60:	e28db004 	add	fp, sp, #4
   2cf64:	e24dd008 	sub	sp, sp, #8
   2cf68:	e50b0008 	str	r0, [fp, #-8]
   2cf6c:	e59f2020 	ldr	r2, [pc, #32]	; 2cf94 <L6470DmxMode2::~L6470DmxMode2()+0x38>
   2cf70:	e51b3008 	ldr	r3, [fp, #-8]
   2cf74:	e5832000 	str	r2, [r3]
   2cf78:	e51b3008 	ldr	r3, [fp, #-8]
   2cf7c:	e1a00003 	mov	r0, r3
   2cf80:	eb000048 	bl	2d0a8 <L6470DmxMode::~L6470DmxMode()>
   2cf84:	e51b3008 	ldr	r3, [fp, #-8]
   2cf88:	e1a00003 	mov	r0, r3
   2cf8c:	e24bd004 	sub	sp, fp, #4
   2cf90:	e8bd8800 	pop	{fp, pc}
   2cf94:	00047b84 	.word	0x00047b84

0002cf98 <L6470DmxMode2::~L6470DmxMode2()>:
   2cf98:	e92d4800 	push	{fp, lr}
   2cf9c:	e28db004 	add	fp, sp, #4
   2cfa0:	e24dd008 	sub	sp, sp, #8
   2cfa4:	e50b0008 	str	r0, [fp, #-8]
   2cfa8:	e51b0008 	ldr	r0, [fp, #-8]
   2cfac:	ebffffea 	bl	2cf5c <L6470DmxMode2::~L6470DmxMode2()>
   2cfb0:	e51b0008 	ldr	r0, [fp, #-8]
   2cfb4:	ebff90d3 	bl	11308 <operator delete(void*)@plt>
   2cfb8:	e51b3008 	ldr	r3, [fp, #-8]
   2cfbc:	e1a00003 	mov	r0, r3
   2cfc0:	e24bd004 	sub	sp, fp, #4
   2cfc4:	e8bd8800 	pop	{fp, pc}

0002cfc8 <L6470DmxMode2::Start()>:
   2cfc8:	e92d4800 	push	{fp, lr}
   2cfcc:	e28db004 	add	fp, sp, #4
   2cfd0:	e24dd008 	sub	sp, sp, #8
   2cfd4:	e50b0008 	str	r0, [fp, #-8]
   2cfd8:	e51b3008 	ldr	r3, [fp, #-8]
   2cfdc:	e5932004 	ldr	r2, [r3, #4]
   2cfe0:	e51b3008 	ldr	r3, [fp, #-8]
   2cfe4:	edd37a02 	vldr	s15, [r3, #8]
   2cfe8:	eeb00a67 	vmov.f32	s0, s15
   2cfec:	e3a01001 	mov	r1, #1
   2cff0:	e1a00002 	mov	r0, r2
   2cff4:	eb00078b 	bl	2ee28 <L6470::run(TL6470Direction, float)>
   2cff8:	e1a00000 	nop			; (mov r0, r0)
   2cffc:	e24bd004 	sub	sp, fp, #4
   2d000:	e8bd8800 	pop	{fp, pc}

0002d004 <L6470DmxMode2::Stop()>:
   2d004:	e92d4800 	push	{fp, lr}
   2d008:	e28db004 	add	fp, sp, #4
   2d00c:	e24dd008 	sub	sp, sp, #8
   2d010:	e50b0008 	str	r0, [fp, #-8]
   2d014:	e51b3008 	ldr	r3, [fp, #-8]
   2d018:	e5933004 	ldr	r3, [r3, #4]
   2d01c:	e1a00003 	mov	r0, r3
   2d020:	eb000933 	bl	2f4f4 <L6470::hardHiZ()>
   2d024:	e1a00000 	nop			; (mov r0, r0)
   2d028:	e24bd004 	sub	sp, fp, #4
   2d02c:	e8bd8800 	pop	{fp, pc}

0002d030 <L6470DmxMode2::Data(unsigned char const*)>:
   2d030:	e92d4800 	push	{fp, lr}
   2d034:	e28db004 	add	fp, sp, #4
   2d038:	e24dd008 	sub	sp, sp, #8
   2d03c:	e50b0008 	str	r0, [fp, #-8]
   2d040:	e50b100c 	str	r1, [fp, #-12]
   2d044:	e51b3008 	ldr	r3, [fp, #-8]
   2d048:	e5932004 	ldr	r2, [r3, #4]
   2d04c:	e51b3008 	ldr	r3, [fp, #-8]
   2d050:	ed937a02 	vldr	s14, [r3, #8]
   2d054:	e51b300c 	ldr	r3, [fp, #-12]
   2d058:	e5d33000 	ldrb	r3, [r3]
   2d05c:	ee073a90 	vmov	s15, r3
   2d060:	eef86a67 	vcvt.f32.u32	s13, s15
   2d064:	e51b3008 	ldr	r3, [fp, #-8]
   2d068:	ed936a03 	vldr	s12, [r3, #12]
   2d06c:	e51b3008 	ldr	r3, [fp, #-8]
   2d070:	edd37a02 	vldr	s15, [r3, #8]
   2d074:	ee366a67 	vsub.f32	s12, s12, s15
   2d078:	eddf5a09 	vldr	s11, [pc, #36]	; 2d0a4 <L6470DmxMode2::Data(unsigned char const*)+0x74>
   2d07c:	eec67a25 	vdiv.f32	s15, s12, s11
   2d080:	ee667aa7 	vmul.f32	s15, s13, s15
   2d084:	ee777a27 	vadd.f32	s15, s14, s15
   2d088:	eeb00a67 	vmov.f32	s0, s15
   2d08c:	e3a01001 	mov	r1, #1
   2d090:	e1a00002 	mov	r0, r2
   2d094:	eb000763 	bl	2ee28 <L6470::run(TL6470Direction, float)>
   2d098:	e1a00000 	nop			; (mov r0, r0)
   2d09c:	e24bd004 	sub	sp, fp, #4
   2d0a0:	e8bd8800 	pop	{fp, pc}
   2d0a4:	437f0000 	.word	0x437f0000

0002d0a8 <L6470DmxMode::~L6470DmxMode()>:
   2d0a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2d0ac:	e28db000 	add	fp, sp, #0
   2d0b0:	e24dd00c 	sub	sp, sp, #12
   2d0b4:	e50b0008 	str	r0, [fp, #-8]
   2d0b8:	e59f2018 	ldr	r2, [pc, #24]	; 2d0d8 <L6470DmxMode::~L6470DmxMode()+0x30>
   2d0bc:	e51b3008 	ldr	r3, [fp, #-8]
   2d0c0:	e5832000 	str	r2, [r3]
   2d0c4:	e51b3008 	ldr	r3, [fp, #-8]
   2d0c8:	e1a00003 	mov	r0, r3
   2d0cc:	e28bd000 	add	sp, fp, #0
   2d0d0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2d0d4:	e12fff1e 	bx	lr
   2d0d8:	00047bb0 	.word	0x00047bb0

0002d0dc <L6470DmxMode::~L6470DmxMode()>:
   2d0dc:	e92d4800 	push	{fp, lr}
   2d0e0:	e28db004 	add	fp, sp, #4
   2d0e4:	e24dd008 	sub	sp, sp, #8
   2d0e8:	e50b0008 	str	r0, [fp, #-8]
   2d0ec:	e51b0008 	ldr	r0, [fp, #-8]
   2d0f0:	ebffffec 	bl	2d0a8 <L6470DmxMode::~L6470DmxMode()>
   2d0f4:	e51b0008 	ldr	r0, [fp, #-8]
   2d0f8:	ebff9082 	bl	11308 <operator delete(void*)@plt>
   2d0fc:	e51b3008 	ldr	r3, [fp, #-8]
   2d100:	e1a00003 	mov	r0, r3
   2d104:	e24bd004 	sub	sp, fp, #4
   2d108:	e8bd8800 	pop	{fp, pc}

0002d10c <L6470DmxMode::InitSwitch()>:
   2d10c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2d110:	e28db000 	add	fp, sp, #0
   2d114:	e24dd00c 	sub	sp, sp, #12
   2d118:	e50b0008 	str	r0, [fp, #-8]
   2d11c:	e1a00000 	nop			; (mov r0, r0)
   2d120:	e28bd000 	add	sp, fp, #0
   2d124:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2d128:	e12fff1e 	bx	lr

0002d12c <L6470DmxMode::InitPos()>:
   2d12c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2d130:	e28db000 	add	fp, sp, #0
   2d134:	e24dd00c 	sub	sp, sp, #12
   2d138:	e50b0008 	str	r0, [fp, #-8]
   2d13c:	e1a00000 	nop			; (mov r0, r0)
   2d140:	e28bd000 	add	sp, fp, #0
   2d144:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2d148:	e12fff1e 	bx	lr

0002d14c <L6470DmxMode::HandleBusy()>:
   2d14c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2d150:	e28db000 	add	fp, sp, #0
   2d154:	e24dd00c 	sub	sp, sp, #12
   2d158:	e50b0008 	str	r0, [fp, #-8]
   2d15c:	e1a00000 	nop			; (mov r0, r0)
   2d160:	e28bd000 	add	sp, fp, #0
   2d164:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2d168:	e12fff1e 	bx	lr

0002d16c <L6470DmxMode::BusyCheck()>:
   2d16c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2d170:	e28db000 	add	fp, sp, #0
   2d174:	e24dd00c 	sub	sp, sp, #12
   2d178:	e50b0008 	str	r0, [fp, #-8]
   2d17c:	e3a03000 	mov	r3, #0
   2d180:	e1a00003 	mov	r0, r3
   2d184:	e28bd000 	add	sp, fp, #0
   2d188:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2d18c:	e12fff1e 	bx	lr

0002d190 <L6470DmxMode0::L6470DmxMode0(L6470*)>:
   2d190:	e92d4800 	push	{fp, lr}
   2d194:	e28db004 	add	fp, sp, #4
   2d198:	e24dd008 	sub	sp, sp, #8
   2d19c:	e50b0008 	str	r0, [fp, #-8]
   2d1a0:	e50b100c 	str	r1, [fp, #-12]
   2d1a4:	e51b3008 	ldr	r3, [fp, #-8]
   2d1a8:	e1a00003 	mov	r0, r3
   2d1ac:	ebfffccc 	bl	2c4e4 <L6470DmxMode::L6470DmxMode()>
   2d1b0:	e59f2058 	ldr	r2, [pc, #88]	; 2d210 <L6470DmxMode0::L6470DmxMode0(L6470*)+0x80>
   2d1b4:	e51b3008 	ldr	r3, [fp, #-8]
   2d1b8:	e5832000 	str	r2, [r3]
   2d1bc:	e51b3008 	ldr	r3, [fp, #-8]
   2d1c0:	e51b200c 	ldr	r2, [fp, #-12]
   2d1c4:	e5832004 	str	r2, [r3, #4]
   2d1c8:	e51b3008 	ldr	r3, [fp, #-8]
   2d1cc:	e5933004 	ldr	r3, [r3, #4]
   2d1d0:	e1a00003 	mov	r0, r3
   2d1d4:	eb000278 	bl	2dbbc <L6470::getMinSpeed()>
   2d1d8:	eef07a40 	vmov.f32	s15, s0
   2d1dc:	e51b3008 	ldr	r3, [fp, #-8]
   2d1e0:	edc37a02 	vstr	s15, [r3, #8]
   2d1e4:	e51b3008 	ldr	r3, [fp, #-8]
   2d1e8:	e5933004 	ldr	r3, [r3, #4]
   2d1ec:	e1a00003 	mov	r0, r3
   2d1f0:	eb000249 	bl	2db1c <L6470::getMaxSpeed()>
   2d1f4:	eef07a40 	vmov.f32	s15, s0
   2d1f8:	e51b3008 	ldr	r3, [fp, #-8]
   2d1fc:	edc37a03 	vstr	s15, [r3, #12]
   2d200:	e51b3008 	ldr	r3, [fp, #-8]
   2d204:	e1a00003 	mov	r0, r3
   2d208:	e24bd004 	sub	sp, fp, #4
   2d20c:	e8bd8800 	pop	{fp, pc}
   2d210:	00047c94 	.word	0x00047c94

0002d214 <L6470DmxMode0::~L6470DmxMode0()>:
   2d214:	e92d4800 	push	{fp, lr}
   2d218:	e28db004 	add	fp, sp, #4
   2d21c:	e24dd008 	sub	sp, sp, #8
   2d220:	e50b0008 	str	r0, [fp, #-8]
   2d224:	e59f2020 	ldr	r2, [pc, #32]	; 2d24c <L6470DmxMode0::~L6470DmxMode0()+0x38>
   2d228:	e51b3008 	ldr	r3, [fp, #-8]
   2d22c:	e5832000 	str	r2, [r3]
   2d230:	e51b3008 	ldr	r3, [fp, #-8]
   2d234:	e1a00003 	mov	r0, r3
   2d238:	ebffff9a 	bl	2d0a8 <L6470DmxMode::~L6470DmxMode()>
   2d23c:	e51b3008 	ldr	r3, [fp, #-8]
   2d240:	e1a00003 	mov	r0, r3
   2d244:	e24bd004 	sub	sp, fp, #4
   2d248:	e8bd8800 	pop	{fp, pc}
   2d24c:	00047c94 	.word	0x00047c94

0002d250 <L6470DmxMode0::~L6470DmxMode0()>:
   2d250:	e92d4800 	push	{fp, lr}
   2d254:	e28db004 	add	fp, sp, #4
   2d258:	e24dd008 	sub	sp, sp, #8
   2d25c:	e50b0008 	str	r0, [fp, #-8]
   2d260:	e51b0008 	ldr	r0, [fp, #-8]
   2d264:	ebffffea 	bl	2d214 <L6470DmxMode0::~L6470DmxMode0()>
   2d268:	e51b0008 	ldr	r0, [fp, #-8]
   2d26c:	ebff9025 	bl	11308 <operator delete(void*)@plt>
   2d270:	e51b3008 	ldr	r3, [fp, #-8]
   2d274:	e1a00003 	mov	r0, r3
   2d278:	e24bd004 	sub	sp, fp, #4
   2d27c:	e8bd8800 	pop	{fp, pc}

0002d280 <L6470DmxMode0::Start()>:
   2d280:	e92d4800 	push	{fp, lr}
   2d284:	e28db004 	add	fp, sp, #4
   2d288:	e24dd008 	sub	sp, sp, #8
   2d28c:	e50b0008 	str	r0, [fp, #-8]
   2d290:	e51b3008 	ldr	r3, [fp, #-8]
   2d294:	e5932004 	ldr	r2, [r3, #4]
   2d298:	e51b3008 	ldr	r3, [fp, #-8]
   2d29c:	edd37a03 	vldr	s15, [r3, #12]
   2d2a0:	eeb00a67 	vmov.f32	s0, s15
   2d2a4:	e3a01001 	mov	r1, #1
   2d2a8:	e1a00002 	mov	r0, r2
   2d2ac:	eb0006dd 	bl	2ee28 <L6470::run(TL6470Direction, float)>
   2d2b0:	e1a00000 	nop			; (mov r0, r0)
   2d2b4:	e24bd004 	sub	sp, fp, #4
   2d2b8:	e8bd8800 	pop	{fp, pc}

0002d2bc <L6470DmxMode0::Stop()>:
   2d2bc:	e92d4800 	push	{fp, lr}
   2d2c0:	e28db004 	add	fp, sp, #4
   2d2c4:	e24dd008 	sub	sp, sp, #8
   2d2c8:	e50b0008 	str	r0, [fp, #-8]
   2d2cc:	e51b3008 	ldr	r3, [fp, #-8]
   2d2d0:	e5933004 	ldr	r3, [r3, #4]
   2d2d4:	e1a00003 	mov	r0, r3
   2d2d8:	eb000885 	bl	2f4f4 <L6470::hardHiZ()>
   2d2dc:	e1a00000 	nop			; (mov r0, r0)
   2d2e0:	e24bd004 	sub	sp, fp, #4
   2d2e4:	e8bd8800 	pop	{fp, pc}

0002d2e8 <L6470DmxMode0::Data(unsigned char const*)>:
   2d2e8:	e92d4800 	push	{fp, lr}
   2d2ec:	e28db004 	add	fp, sp, #4
   2d2f0:	e24dd008 	sub	sp, sp, #8
   2d2f4:	e50b0008 	str	r0, [fp, #-8]
   2d2f8:	e50b100c 	str	r1, [fp, #-12]
   2d2fc:	e51b300c 	ldr	r3, [fp, #-12]
   2d300:	e5d33000 	ldrb	r3, [r3]
   2d304:	e353007e 	cmp	r3, #126	; 0x7e
   2d308:	8a000016 	bhi	2d368 <L6470DmxMode0::Data(unsigned char const*)+0x80>
   2d30c:	e51b3008 	ldr	r3, [fp, #-8]
   2d310:	e5932004 	ldr	r2, [r3, #4]
   2d314:	e51b3008 	ldr	r3, [fp, #-8]
   2d318:	ed937a02 	vldr	s14, [r3, #8]
   2d31c:	e51b300c 	ldr	r3, [fp, #-12]
   2d320:	e5d33000 	ldrb	r3, [r3]
   2d324:	e263307f 	rsb	r3, r3, #127	; 0x7f
   2d328:	ee073a90 	vmov	s15, r3
   2d32c:	eef86ae7 	vcvt.f32.s32	s13, s15
   2d330:	e51b3008 	ldr	r3, [fp, #-8]
   2d334:	ed936a03 	vldr	s12, [r3, #12]
   2d338:	e51b3008 	ldr	r3, [fp, #-8]
   2d33c:	edd37a02 	vldr	s15, [r3, #8]
   2d340:	ee366a67 	vsub.f32	s12, s12, s15
   2d344:	eddf5a28 	vldr	s11, [pc, #160]	; 2d3ec <L6470DmxMode0::Data(unsigned char const*)+0x104>
   2d348:	eec67a25 	vdiv.f32	s15, s12, s11
   2d34c:	ee667aa7 	vmul.f32	s15, s13, s15
   2d350:	ee777a27 	vadd.f32	s15, s14, s15
   2d354:	eeb00a67 	vmov.f32	s0, s15
   2d358:	e3a01001 	mov	r1, #1
   2d35c:	e1a00002 	mov	r0, r2
   2d360:	eb0006b0 	bl	2ee28 <L6470::run(TL6470Direction, float)>
   2d364:	ea00001e 	b	2d3e4 <L6470DmxMode0::Data(unsigned char const*)+0xfc>
   2d368:	e51b300c 	ldr	r3, [fp, #-12]
   2d36c:	e5d33000 	ldrb	r3, [r3]
   2d370:	e3530081 	cmp	r3, #129	; 0x81
   2d374:	9a000016 	bls	2d3d4 <L6470DmxMode0::Data(unsigned char const*)+0xec>
   2d378:	e51b3008 	ldr	r3, [fp, #-8]
   2d37c:	e5932004 	ldr	r2, [r3, #4]
   2d380:	e51b3008 	ldr	r3, [fp, #-8]
   2d384:	ed937a02 	vldr	s14, [r3, #8]
   2d388:	e51b300c 	ldr	r3, [fp, #-12]
   2d38c:	e5d33000 	ldrb	r3, [r3]
   2d390:	e2433081 	sub	r3, r3, #129	; 0x81
   2d394:	ee073a90 	vmov	s15, r3
   2d398:	eef86ae7 	vcvt.f32.s32	s13, s15
   2d39c:	e51b3008 	ldr	r3, [fp, #-8]
   2d3a0:	ed936a03 	vldr	s12, [r3, #12]
   2d3a4:	e51b3008 	ldr	r3, [fp, #-8]
   2d3a8:	edd37a02 	vldr	s15, [r3, #8]
   2d3ac:	ee366a67 	vsub.f32	s12, s12, s15
   2d3b0:	eddf5a0d 	vldr	s11, [pc, #52]	; 2d3ec <L6470DmxMode0::Data(unsigned char const*)+0x104>
   2d3b4:	eec67a25 	vdiv.f32	s15, s12, s11
   2d3b8:	ee667aa7 	vmul.f32	s15, s13, s15
   2d3bc:	ee777a27 	vadd.f32	s15, s14, s15
   2d3c0:	eeb00a67 	vmov.f32	s0, s15
   2d3c4:	e3a01000 	mov	r1, #0
   2d3c8:	e1a00002 	mov	r0, r2
   2d3cc:	eb000695 	bl	2ee28 <L6470::run(TL6470Direction, float)>
   2d3d0:	ea000003 	b	2d3e4 <L6470DmxMode0::Data(unsigned char const*)+0xfc>
   2d3d4:	e51b3008 	ldr	r3, [fp, #-8]
   2d3d8:	e5933004 	ldr	r3, [r3, #4]
   2d3dc:	e1a00003 	mov	r0, r3
   2d3e0:	eb000819 	bl	2f44c <L6470::softStop()>
   2d3e4:	e24bd004 	sub	sp, fp, #4
   2d3e8:	e8bd8800 	pop	{fp, pc}
   2d3ec:	42fe0000 	.word	0x42fe0000

0002d3f0 <L6470DmxMode4::L6470DmxMode4(L6470*, MotorParams*, ModeParams*)>:
   2d3f0:	e92d4800 	push	{fp, lr}
   2d3f4:	e28db004 	add	fp, sp, #4
   2d3f8:	e24dd010 	sub	sp, sp, #16
   2d3fc:	e50b0008 	str	r0, [fp, #-8]
   2d400:	e50b100c 	str	r1, [fp, #-12]
   2d404:	e50b2010 	str	r2, [fp, #-16]
   2d408:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2d40c:	e51b3008 	ldr	r3, [fp, #-8]
   2d410:	e1a00003 	mov	r0, r3
   2d414:	ebfffc32 	bl	2c4e4 <L6470DmxMode::L6470DmxMode()>
   2d418:	e59f2068 	ldr	r2, [pc, #104]	; 2d488 <L6470DmxMode4::L6470DmxMode4(L6470*, MotorParams*, ModeParams*)+0x98>
   2d41c:	e51b3008 	ldr	r3, [fp, #-8]
   2d420:	e5832000 	str	r2, [r3]
   2d424:	e51b3008 	ldr	r3, [fp, #-8]
   2d428:	e3a02000 	mov	r2, #0
   2d42c:	e5c32010 	strb	r2, [r3, #16]
   2d430:	e51b3008 	ldr	r3, [fp, #-8]
   2d434:	e3a02000 	mov	r2, #0
   2d438:	e5c32011 	strb	r2, [r3, #17]
   2d43c:	e51b3008 	ldr	r3, [fp, #-8]
   2d440:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2d444:	e5832004 	str	r2, [r3, #4]
   2d448:	e51b3008 	ldr	r3, [fp, #-8]
   2d44c:	e51b200c 	ldr	r2, [fp, #-12]
   2d450:	e5832008 	str	r2, [r3, #8]
   2d454:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2d458:	ebfffd61 	bl	2c9e4 <ModeParams::GetMaxSteps() const>
   2d45c:	ee070a90 	vmov	s15, r0
   2d460:	eeb87a67 	vcvt.f32.u32	s14, s15
   2d464:	eddf6a06 	vldr	s13, [pc, #24]	; 2d484 <L6470DmxMode4::L6470DmxMode4(L6470*, MotorParams*, ModeParams*)+0x94>
   2d468:	eec77a26 	vdiv.f32	s15, s14, s13
   2d46c:	e51b3008 	ldr	r3, [fp, #-8]
   2d470:	edc37a03 	vstr	s15, [r3, #12]
   2d474:	e51b3008 	ldr	r3, [fp, #-8]
   2d478:	e1a00003 	mov	r0, r3
   2d47c:	e24bd004 	sub	sp, fp, #4
   2d480:	e8bd8800 	pop	{fp, pc}
   2d484:	437f0000 	.word	0x437f0000
   2d488:	00047cd4 	.word	0x00047cd4

0002d48c <L6470DmxMode4::~L6470DmxMode4()>:
   2d48c:	e92d4800 	push	{fp, lr}
   2d490:	e28db004 	add	fp, sp, #4
   2d494:	e24dd008 	sub	sp, sp, #8
   2d498:	e50b0008 	str	r0, [fp, #-8]
   2d49c:	e59f2020 	ldr	r2, [pc, #32]	; 2d4c4 <L6470DmxMode4::~L6470DmxMode4()+0x38>
   2d4a0:	e51b3008 	ldr	r3, [fp, #-8]
   2d4a4:	e5832000 	str	r2, [r3]
   2d4a8:	e51b3008 	ldr	r3, [fp, #-8]
   2d4ac:	e1a00003 	mov	r0, r3
   2d4b0:	ebfffefc 	bl	2d0a8 <L6470DmxMode::~L6470DmxMode()>
   2d4b4:	e51b3008 	ldr	r3, [fp, #-8]
   2d4b8:	e1a00003 	mov	r0, r3
   2d4bc:	e24bd004 	sub	sp, fp, #4
   2d4c0:	e8bd8800 	pop	{fp, pc}
   2d4c4:	00047cd4 	.word	0x00047cd4

0002d4c8 <L6470DmxMode4::~L6470DmxMode4()>:
   2d4c8:	e92d4800 	push	{fp, lr}
   2d4cc:	e28db004 	add	fp, sp, #4
   2d4d0:	e24dd008 	sub	sp, sp, #8
   2d4d4:	e50b0008 	str	r0, [fp, #-8]
   2d4d8:	e51b0008 	ldr	r0, [fp, #-8]
   2d4dc:	ebffffea 	bl	2d48c <L6470DmxMode4::~L6470DmxMode4()>
   2d4e0:	e51b0008 	ldr	r0, [fp, #-8]
   2d4e4:	ebff8f87 	bl	11308 <operator delete(void*)@plt>
   2d4e8:	e51b3008 	ldr	r3, [fp, #-8]
   2d4ec:	e1a00003 	mov	r0, r3
   2d4f0:	e24bd004 	sub	sp, fp, #4
   2d4f4:	e8bd8800 	pop	{fp, pc}

0002d4f8 <L6470DmxMode4::InitSwitch()>:
   2d4f8:	e92d4800 	push	{fp, lr}
   2d4fc:	e28db004 	add	fp, sp, #4
   2d500:	e24dd018 	sub	sp, sp, #24
   2d504:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2d508:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d50c:	e5933004 	ldr	r3, [r3, #4]
   2d510:	e1a00003 	mov	r0, r3
   2d514:	ebfffd6b 	bl	2cac8 <ModeParams::HasSwitch() const>
   2d518:	e1a03000 	mov	r3, r0
   2d51c:	e3530000 	cmp	r3, #0
   2d520:	0a000015 	beq	2d57c <L6470DmxMode4::InitSwitch()+0x84>
   2d524:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d528:	e5933004 	ldr	r3, [r3, #4]
   2d52c:	e1a00003 	mov	r0, r3
   2d530:	ebfffd39 	bl	2ca1c <ModeParams::GetSwitchAction() const>
   2d534:	e50b0008 	str	r0, [fp, #-8]
   2d538:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d53c:	e5933004 	ldr	r3, [r3, #4]
   2d540:	e1a00003 	mov	r0, r3
   2d544:	ebfffd42 	bl	2ca54 <ModeParams::GetSwitchDir() const>
   2d548:	e50b000c 	str	r0, [fp, #-12]
   2d54c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d550:	e5933004 	ldr	r3, [r3, #4]
   2d554:	e1a00003 	mov	r0, r3
   2d558:	ebfffd4b 	bl	2ca8c <ModeParams::GetSwitchStepsPerSec() const>
   2d55c:	ed0b0a04 	vstr	s0, [fp, #-16]
   2d560:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d564:	e5933008 	ldr	r3, [r3, #8]
   2d568:	ed1b0a04 	vldr	s0, [fp, #-16]
   2d56c:	e51b200c 	ldr	r2, [fp, #-12]
   2d570:	e51b1008 	ldr	r1, [fp, #-8]
   2d574:	e1a00003 	mov	r0, r3
   2d578:	eb000709 	bl	2f1a4 <L6470::goUntil(TL6470Action, TL6470Direction, float)>
   2d57c:	e1a00000 	nop			; (mov r0, r0)
   2d580:	e24bd004 	sub	sp, fp, #4
   2d584:	e8bd8800 	pop	{fp, pc}

0002d588 <L6470DmxMode4::InitPos()>:
   2d588:	e92d4800 	push	{fp, lr}
   2d58c:	e28db004 	add	fp, sp, #4
   2d590:	e24dd008 	sub	sp, sp, #8
   2d594:	e50b0008 	str	r0, [fp, #-8]
   2d598:	e51b3008 	ldr	r3, [fp, #-8]
   2d59c:	e5933008 	ldr	r3, [r3, #8]
   2d5a0:	e1a00003 	mov	r0, r3
   2d5a4:	eb00078c 	bl	2f3dc <L6470::resetPos()>
   2d5a8:	e1a00000 	nop			; (mov r0, r0)
   2d5ac:	e24bd004 	sub	sp, fp, #4
   2d5b0:	e8bd8800 	pop	{fp, pc}

0002d5b4 <L6470DmxMode4::Start()>:
   2d5b4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2d5b8:	e28db000 	add	fp, sp, #0
   2d5bc:	e24dd00c 	sub	sp, sp, #12
   2d5c0:	e50b0008 	str	r0, [fp, #-8]
   2d5c4:	e1a00000 	nop			; (mov r0, r0)
   2d5c8:	e28bd000 	add	sp, fp, #0
   2d5cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2d5d0:	e12fff1e 	bx	lr

0002d5d4 <L6470DmxMode4::Stop()>:
   2d5d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2d5d8:	e28db000 	add	fp, sp, #0
   2d5dc:	e24dd00c 	sub	sp, sp, #12
   2d5e0:	e50b0008 	str	r0, [fp, #-8]
   2d5e4:	e1a00000 	nop			; (mov r0, r0)
   2d5e8:	e28bd000 	add	sp, fp, #0
   2d5ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2d5f0:	e12fff1e 	bx	lr

0002d5f4 <L6470DmxMode4::HandleBusy()>:
   2d5f4:	e92d4800 	push	{fp, lr}
   2d5f8:	e28db004 	add	fp, sp, #4
   2d5fc:	e24dd008 	sub	sp, sp, #8
   2d600:	e50b0008 	str	r0, [fp, #-8]
   2d604:	e51b3008 	ldr	r3, [fp, #-8]
   2d608:	e5932008 	ldr	r2, [r3, #8]
   2d60c:	e51b3008 	ldr	r3, [fp, #-8]
   2d610:	e5933008 	ldr	r3, [r3, #8]
   2d614:	e5933000 	ldr	r3, [r3]
   2d618:	e2833008 	add	r3, r3, #8
   2d61c:	e5933000 	ldr	r3, [r3]
   2d620:	e1a00002 	mov	r0, r2
   2d624:	e12fff33 	blx	r3
   2d628:	e1a03000 	mov	r3, r0
   2d62c:	e3530000 	cmp	r3, #0
   2d630:	13a03001 	movne	r3, #1
   2d634:	03a03000 	moveq	r3, #0
   2d638:	e6ef3073 	uxtb	r3, r3
   2d63c:	e3530000 	cmp	r3, #0
   2d640:	0a000007 	beq	2d664 <L6470DmxMode4::HandleBusy()+0x70>
   2d644:	e51b3008 	ldr	r3, [fp, #-8]
   2d648:	e5933008 	ldr	r3, [r3, #8]
   2d64c:	e1a00003 	mov	r0, r3
   2d650:	eb00077d 	bl	2f44c <L6470::softStop()>
   2d654:	e51b3008 	ldr	r3, [fp, #-8]
   2d658:	e3a02001 	mov	r2, #1
   2d65c:	e5c32011 	strb	r2, [r3, #17]
   2d660:	ea000002 	b	2d670 <L6470DmxMode4::HandleBusy()+0x7c>
   2d664:	e51b3008 	ldr	r3, [fp, #-8]
   2d668:	e3a02000 	mov	r2, #0
   2d66c:	e5c32011 	strb	r2, [r3, #17]
   2d670:	e1a00000 	nop			; (mov r0, r0)
   2d674:	e24bd004 	sub	sp, fp, #4
   2d678:	e8bd8800 	pop	{fp, pc}

0002d67c <L6470DmxMode4::BusyCheck()>:
   2d67c:	e92d4800 	push	{fp, lr}
   2d680:	e28db004 	add	fp, sp, #4
   2d684:	e24dd008 	sub	sp, sp, #8
   2d688:	e50b0008 	str	r0, [fp, #-8]
   2d68c:	e51b3008 	ldr	r3, [fp, #-8]
   2d690:	e5932008 	ldr	r2, [r3, #8]
   2d694:	e51b3008 	ldr	r3, [fp, #-8]
   2d698:	e5933008 	ldr	r3, [r3, #8]
   2d69c:	e5933000 	ldr	r3, [r3]
   2d6a0:	e2833008 	add	r3, r3, #8
   2d6a4:	e5933000 	ldr	r3, [r3]
   2d6a8:	e1a00002 	mov	r0, r2
   2d6ac:	e12fff33 	blx	r3
   2d6b0:	e1a03000 	mov	r3, r0
   2d6b4:	e3530000 	cmp	r3, #0
   2d6b8:	13a03001 	movne	r3, #1
   2d6bc:	03a03000 	moveq	r3, #0
   2d6c0:	e6ef3073 	uxtb	r3, r3
   2d6c4:	e1a00003 	mov	r0, r3
   2d6c8:	e24bd004 	sub	sp, fp, #4
   2d6cc:	e8bd8800 	pop	{fp, pc}

0002d6d0 <L6470DmxMode4::Data(unsigned char const*)>:
   2d6d0:	e92d4800 	push	{fp, lr}
   2d6d4:	e28db004 	add	fp, sp, #4
   2d6d8:	e24dd018 	sub	sp, sp, #24
   2d6dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2d6e0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   2d6e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2d6e8:	e5d33000 	ldrb	r3, [r3]
   2d6ec:	ee073a90 	vmov	s15, r3
   2d6f0:	eeb87a67 	vcvt.f32.u32	s14, s15
   2d6f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d6f8:	edd37a03 	vldr	s15, [r3, #12]
   2d6fc:	ee677a27 	vmul.f32	s15, s14, s15
   2d700:	eefc7ae7 	vcvt.u32.f32	s15, s15
   2d704:	ee173a90 	vmov	r3, s15
   2d708:	e50b300c 	str	r3, [fp, #-12]
   2d70c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d710:	e5d33011 	ldrb	r3, [r3, #17]
   2d714:	e3530000 	cmp	r3, #0
   2d718:	0a00000c 	beq	2d750 <L6470DmxMode4::Data(unsigned char const*)+0x80>
   2d71c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d720:	e5933008 	ldr	r3, [r3, #8]
   2d724:	e1a00003 	mov	r0, r3
   2d728:	eb000596 	bl	2ed88 <L6470::getPos()>
   2d72c:	e1a03000 	mov	r3, r0
   2d730:	e50b3010 	str	r3, [fp, #-16]
   2d734:	e51b2010 	ldr	r2, [fp, #-16]
   2d738:	e51b300c 	ldr	r3, [fp, #-12]
   2d73c:	e1520003 	cmp	r2, r3
   2d740:	83a03001 	movhi	r3, #1
   2d744:	93a03000 	movls	r3, #0
   2d748:	e54b3005 	strb	r3, [fp, #-5]
   2d74c:	ea000007 	b	2d770 <L6470DmxMode4::Data(unsigned char const*)+0xa0>
   2d750:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d754:	e5d32010 	ldrb	r2, [r3, #16]
   2d758:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2d75c:	e5d33000 	ldrb	r3, [r3]
   2d760:	e1520003 	cmp	r2, r3
   2d764:	83a03001 	movhi	r3, #1
   2d768:	93a03000 	movls	r3, #0
   2d76c:	e54b3005 	strb	r3, [fp, #-5]
   2d770:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d774:	e5930008 	ldr	r0, [r3, #8]
   2d778:	e55b3005 	ldrb	r3, [fp, #-5]
   2d77c:	e3530000 	cmp	r3, #0
   2d780:	0a000001 	beq	2d78c <L6470DmxMode4::Data(unsigned char const*)+0xbc>
   2d784:	e3a03000 	mov	r3, #0
   2d788:	ea000000 	b	2d790 <L6470DmxMode4::Data(unsigned char const*)+0xc0>
   2d78c:	e3a03001 	mov	r3, #1
   2d790:	e51b200c 	ldr	r2, [fp, #-12]
   2d794:	e1a01003 	mov	r1, r3
   2d798:	eb00064e 	bl	2f0d8 <L6470::goToDir(TL6470Direction, long)>
   2d79c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2d7a0:	e5d32000 	ldrb	r2, [r3]
   2d7a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2d7a8:	e5c32010 	strb	r2, [r3, #16]
   2d7ac:	e1a00000 	nop			; (mov r0, r0)
   2d7b0:	e24bd004 	sub	sp, fp, #4
   2d7b4:	e8bd8800 	pop	{fp, pc}

0002d7b8 <L6470DmxMode1::L6470DmxMode1(L6470*)>:
   2d7b8:	e92d4800 	push	{fp, lr}
   2d7bc:	e28db004 	add	fp, sp, #4
   2d7c0:	e24dd008 	sub	sp, sp, #8
   2d7c4:	e50b0008 	str	r0, [fp, #-8]
   2d7c8:	e50b100c 	str	r1, [fp, #-12]
   2d7cc:	e51b3008 	ldr	r3, [fp, #-8]
   2d7d0:	e1a00003 	mov	r0, r3
   2d7d4:	ebfffb42 	bl	2c4e4 <L6470DmxMode::L6470DmxMode()>
   2d7d8:	e59f2058 	ldr	r2, [pc, #88]	; 2d838 <L6470DmxMode1::L6470DmxMode1(L6470*)+0x80>
   2d7dc:	e51b3008 	ldr	r3, [fp, #-8]
   2d7e0:	e5832000 	str	r2, [r3]
   2d7e4:	e51b3008 	ldr	r3, [fp, #-8]
   2d7e8:	e51b200c 	ldr	r2, [fp, #-12]
   2d7ec:	e5832004 	str	r2, [r3, #4]
   2d7f0:	e51b3008 	ldr	r3, [fp, #-8]
   2d7f4:	e5933004 	ldr	r3, [r3, #4]
   2d7f8:	e1a00003 	mov	r0, r3
   2d7fc:	eb0000ee 	bl	2dbbc <L6470::getMinSpeed()>
   2d800:	eef07a40 	vmov.f32	s15, s0
   2d804:	e51b3008 	ldr	r3, [fp, #-8]
   2d808:	edc37a02 	vstr	s15, [r3, #8]
   2d80c:	e51b3008 	ldr	r3, [fp, #-8]
   2d810:	e5933004 	ldr	r3, [r3, #4]
   2d814:	e1a00003 	mov	r0, r3
   2d818:	eb0000bf 	bl	2db1c <L6470::getMaxSpeed()>
   2d81c:	eef07a40 	vmov.f32	s15, s0
   2d820:	e51b3008 	ldr	r3, [fp, #-8]
   2d824:	edc37a03 	vstr	s15, [r3, #12]
   2d828:	e51b3008 	ldr	r3, [fp, #-8]
   2d82c:	e1a00003 	mov	r0, r3
   2d830:	e24bd004 	sub	sp, fp, #4
   2d834:	e8bd8800 	pop	{fp, pc}
   2d838:	00047d00 	.word	0x00047d00

0002d83c <L6470DmxMode1::~L6470DmxMode1()>:
   2d83c:	e92d4800 	push	{fp, lr}
   2d840:	e28db004 	add	fp, sp, #4
   2d844:	e24dd008 	sub	sp, sp, #8
   2d848:	e50b0008 	str	r0, [fp, #-8]
   2d84c:	e59f2020 	ldr	r2, [pc, #32]	; 2d874 <L6470DmxMode1::~L6470DmxMode1()+0x38>
   2d850:	e51b3008 	ldr	r3, [fp, #-8]
   2d854:	e5832000 	str	r2, [r3]
   2d858:	e51b3008 	ldr	r3, [fp, #-8]
   2d85c:	e1a00003 	mov	r0, r3
   2d860:	ebfffe10 	bl	2d0a8 <L6470DmxMode::~L6470DmxMode()>
   2d864:	e51b3008 	ldr	r3, [fp, #-8]
   2d868:	e1a00003 	mov	r0, r3
   2d86c:	e24bd004 	sub	sp, fp, #4
   2d870:	e8bd8800 	pop	{fp, pc}
   2d874:	00047d00 	.word	0x00047d00

0002d878 <L6470DmxMode1::~L6470DmxMode1()>:
   2d878:	e92d4800 	push	{fp, lr}
   2d87c:	e28db004 	add	fp, sp, #4
   2d880:	e24dd008 	sub	sp, sp, #8
   2d884:	e50b0008 	str	r0, [fp, #-8]
   2d888:	e51b0008 	ldr	r0, [fp, #-8]
   2d88c:	ebffffea 	bl	2d83c <L6470DmxMode1::~L6470DmxMode1()>
   2d890:	e51b0008 	ldr	r0, [fp, #-8]
   2d894:	ebff8e9b 	bl	11308 <operator delete(void*)@plt>
   2d898:	e51b3008 	ldr	r3, [fp, #-8]
   2d89c:	e1a00003 	mov	r0, r3
   2d8a0:	e24bd004 	sub	sp, fp, #4
   2d8a4:	e8bd8800 	pop	{fp, pc}

0002d8a8 <L6470DmxMode1::Start()>:
   2d8a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2d8ac:	e28db000 	add	fp, sp, #0
   2d8b0:	e24dd00c 	sub	sp, sp, #12
   2d8b4:	e50b0008 	str	r0, [fp, #-8]
   2d8b8:	e1a00000 	nop			; (mov r0, r0)
   2d8bc:	e28bd000 	add	sp, fp, #0
   2d8c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2d8c4:	e12fff1e 	bx	lr

0002d8c8 <L6470DmxMode1::Stop()>:
   2d8c8:	e92d4800 	push	{fp, lr}
   2d8cc:	e28db004 	add	fp, sp, #4
   2d8d0:	e24dd008 	sub	sp, sp, #8
   2d8d4:	e50b0008 	str	r0, [fp, #-8]
   2d8d8:	e51b3008 	ldr	r3, [fp, #-8]
   2d8dc:	e5933004 	ldr	r3, [r3, #4]
   2d8e0:	e1a00003 	mov	r0, r3
   2d8e4:	eb000702 	bl	2f4f4 <L6470::hardHiZ()>
   2d8e8:	e1a00000 	nop			; (mov r0, r0)
   2d8ec:	e24bd004 	sub	sp, fp, #4
   2d8f0:	e8bd8800 	pop	{fp, pc}

0002d8f4 <L6470DmxMode1::Data(unsigned char const*)>:
   2d8f4:	e92d4800 	push	{fp, lr}
   2d8f8:	e28db004 	add	fp, sp, #4
   2d8fc:	e24dd010 	sub	sp, sp, #16
   2d900:	e50b0010 	str	r0, [fp, #-16]
   2d904:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2d908:	e51b3010 	ldr	r3, [fp, #-16]
   2d90c:	ed937a02 	vldr	s14, [r3, #8]
   2d910:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2d914:	e5d33000 	ldrb	r3, [r3]
   2d918:	ee073a90 	vmov	s15, r3
   2d91c:	eef86a67 	vcvt.f32.u32	s13, s15
   2d920:	e51b3010 	ldr	r3, [fp, #-16]
   2d924:	ed936a03 	vldr	s12, [r3, #12]
   2d928:	e51b3010 	ldr	r3, [fp, #-16]
   2d92c:	edd37a02 	vldr	s15, [r3, #8]
   2d930:	ee366a67 	vsub.f32	s12, s12, s15
   2d934:	eddf5a19 	vldr	s11, [pc, #100]	; 2d9a0 <L6470DmxMode1::Data(unsigned char const*)+0xac>
   2d938:	eec67a25 	vdiv.f32	s15, s12, s11
   2d93c:	ee667aa7 	vmul.f32	s15, s13, s15
   2d940:	ee777a27 	vadd.f32	s15, s14, s15
   2d944:	ed4b7a02 	vstr	s15, [fp, #-8]
   2d948:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2d94c:	e2833001 	add	r3, r3, #1
   2d950:	e5d33000 	ldrb	r3, [r3]
   2d954:	e6af3073 	sxtb	r3, r3
   2d958:	e3530000 	cmp	r3, #0
   2d95c:	ba000006 	blt	2d97c <L6470DmxMode1::Data(unsigned char const*)+0x88>
   2d960:	e51b3010 	ldr	r3, [fp, #-16]
   2d964:	e5933004 	ldr	r3, [r3, #4]
   2d968:	ed1b0a02 	vldr	s0, [fp, #-8]
   2d96c:	e3a01000 	mov	r1, #0
   2d970:	e1a00003 	mov	r0, r3
   2d974:	eb00052b 	bl	2ee28 <L6470::run(TL6470Direction, float)>
   2d978:	ea000005 	b	2d994 <L6470DmxMode1::Data(unsigned char const*)+0xa0>
   2d97c:	e51b3010 	ldr	r3, [fp, #-16]
   2d980:	e5933004 	ldr	r3, [r3, #4]
   2d984:	ed1b0a02 	vldr	s0, [fp, #-8]
   2d988:	e3a01001 	mov	r1, #1
   2d98c:	e1a00003 	mov	r0, r3
   2d990:	eb000524 	bl	2ee28 <L6470::run(TL6470Direction, float)>
   2d994:	e1a00000 	nop			; (mov r0, r0)
   2d998:	e24bd004 	sub	sp, fp, #4
   2d99c:	e8bd8800 	pop	{fp, pc}
   2d9a0:	437f0000 	.word	0x437f0000

0002d9a4 <L6470::configSyncPin(unsigned char, unsigned char)>:
   2d9a4:	e92d4800 	push	{fp, lr}
   2d9a8:	e28db004 	add	fp, sp, #4
   2d9ac:	e24dd010 	sub	sp, sp, #16
   2d9b0:	e50b0010 	str	r0, [fp, #-16]
   2d9b4:	e1a03001 	mov	r3, r1
   2d9b8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   2d9bc:	e1a03002 	mov	r3, r2
   2d9c0:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
   2d9c4:	e3a01016 	mov	r1, #22
   2d9c8:	e51b0010 	ldr	r0, [fp, #-16]
   2d9cc:	eb0004d2 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2d9d0:	e1a03000 	mov	r3, r0
   2d9d4:	e54b3005 	strb	r3, [fp, #-5]
   2d9d8:	e55b3005 	ldrb	r3, [fp, #-5]
   2d9dc:	e203300f 	and	r3, r3, #15
   2d9e0:	e54b3005 	strb	r3, [fp, #-5]
   2d9e4:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
   2d9e8:	e3c3307f 	bic	r3, r3, #127	; 0x7f
   2d9ec:	e6af2073 	sxtb	r2, r3
   2d9f0:	e15b31d2 	ldrsb	r3, [fp, #-18]	; 0xffffffee
   2d9f4:	e2033070 	and	r3, r3, #112	; 0x70
   2d9f8:	e6af3073 	sxtb	r3, r3
   2d9fc:	e1823003 	orr	r3, r2, r3
   2da00:	e6af2073 	sxtb	r2, r3
   2da04:	e15b30d5 	ldrsb	r3, [fp, #-5]
   2da08:	e1823003 	orr	r3, r2, r3
   2da0c:	e6af3073 	sxtb	r3, r3
   2da10:	e54b3005 	strb	r3, [fp, #-5]
   2da14:	e55b3005 	ldrb	r3, [fp, #-5]
   2da18:	e1a02003 	mov	r2, r3
   2da1c:	e3a01016 	mov	r1, #22
   2da20:	e51b0010 	ldr	r0, [fp, #-16]
   2da24:	eb0004a4 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2da28:	e1a00000 	nop			; (mov r0, r0)
   2da2c:	e24bd004 	sub	sp, fp, #4
   2da30:	e8bd8800 	pop	{fp, pc}

0002da34 <L6470::configStepMode(unsigned char)>:
   2da34:	e92d4800 	push	{fp, lr}
   2da38:	e28db004 	add	fp, sp, #4
   2da3c:	e24dd010 	sub	sp, sp, #16
   2da40:	e50b0010 	str	r0, [fp, #-16]
   2da44:	e1a03001 	mov	r3, r1
   2da48:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   2da4c:	e3a01016 	mov	r1, #22
   2da50:	e51b0010 	ldr	r0, [fp, #-16]
   2da54:	eb0004b0 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2da58:	e1a03000 	mov	r3, r0
   2da5c:	e54b3005 	strb	r3, [fp, #-5]
   2da60:	e55b3005 	ldrb	r3, [fp, #-5]
   2da64:	e3c33007 	bic	r3, r3, #7
   2da68:	e54b3005 	strb	r3, [fp, #-5]
   2da6c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   2da70:	e2033007 	and	r3, r3, #7
   2da74:	e6ef2073 	uxtb	r2, r3
   2da78:	e55b3005 	ldrb	r3, [fp, #-5]
   2da7c:	e1823003 	orr	r3, r2, r3
   2da80:	e54b3005 	strb	r3, [fp, #-5]
   2da84:	e55b3005 	ldrb	r3, [fp, #-5]
   2da88:	e1a02003 	mov	r2, r3
   2da8c:	e3a01016 	mov	r1, #22
   2da90:	e51b0010 	ldr	r0, [fp, #-16]
   2da94:	eb000488 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2da98:	e1a00000 	nop			; (mov r0, r0)
   2da9c:	e24bd004 	sub	sp, fp, #4
   2daa0:	e8bd8800 	pop	{fp, pc}

0002daa4 <L6470::getStepMode()>:
   2daa4:	e92d4800 	push	{fp, lr}
   2daa8:	e28db004 	add	fp, sp, #4
   2daac:	e24dd008 	sub	sp, sp, #8
   2dab0:	e50b0008 	str	r0, [fp, #-8]
   2dab4:	e3a01016 	mov	r1, #22
   2dab8:	e51b0008 	ldr	r0, [fp, #-8]
   2dabc:	eb000496 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2dac0:	e1a03000 	mov	r3, r0
   2dac4:	e6ef3073 	uxtb	r3, r3
   2dac8:	e2033007 	and	r3, r3, #7
   2dacc:	e6ef3073 	uxtb	r3, r3
   2dad0:	e1a00003 	mov	r0, r3
   2dad4:	e24bd004 	sub	sp, fp, #4
   2dad8:	e8bd8800 	pop	{fp, pc}

0002dadc <L6470::setMaxSpeed(float)>:
   2dadc:	e92d4800 	push	{fp, lr}
   2dae0:	e28db004 	add	fp, sp, #4
   2dae4:	e24dd010 	sub	sp, sp, #16
   2dae8:	e50b0010 	str	r0, [fp, #-16]
   2daec:	ed0b0a05 	vstr	s0, [fp, #-20]	; 0xffffffec
   2daf0:	ed1b0a05 	vldr	s0, [fp, #-20]	; 0xffffffec
   2daf4:	e51b0010 	ldr	r0, [fp, #-16]
   2daf8:	eb000721 	bl	2f784 <L6470::maxSpdCalc(float)>
   2dafc:	e50b0008 	str	r0, [fp, #-8]
   2db00:	e51b2008 	ldr	r2, [fp, #-8]
   2db04:	e3a01007 	mov	r1, #7
   2db08:	e51b0010 	ldr	r0, [fp, #-16]
   2db0c:	eb00046a 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2db10:	e1a00000 	nop			; (mov r0, r0)
   2db14:	e24bd004 	sub	sp, fp, #4
   2db18:	e8bd8800 	pop	{fp, pc}

0002db1c <L6470::getMaxSpeed()>:
   2db1c:	e92d4800 	push	{fp, lr}
   2db20:	e28db004 	add	fp, sp, #4
   2db24:	e24dd008 	sub	sp, sp, #8
   2db28:	e50b0008 	str	r0, [fp, #-8]
   2db2c:	e3a01007 	mov	r1, #7
   2db30:	e51b0008 	ldr	r0, [fp, #-8]
   2db34:	eb000478 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2db38:	e1a03000 	mov	r3, r0
   2db3c:	e1a01003 	mov	r1, r3
   2db40:	e51b0008 	ldr	r0, [fp, #-8]
   2db44:	eb000724 	bl	2f7dc <L6470::maxSpdParse(unsigned long)>
   2db48:	eef07a40 	vmov.f32	s15, s0
   2db4c:	eeb00a67 	vmov.f32	s0, s15
   2db50:	e24bd004 	sub	sp, fp, #4
   2db54:	e8bd8800 	pop	{fp, pc}

0002db58 <L6470::setMinSpeed(float)>:
   2db58:	e92d4800 	push	{fp, lr}
   2db5c:	e28db004 	add	fp, sp, #4
   2db60:	e24dd010 	sub	sp, sp, #16
   2db64:	e50b0010 	str	r0, [fp, #-16]
   2db68:	ed0b0a05 	vstr	s0, [fp, #-20]	; 0xffffffec
   2db6c:	ed1b0a05 	vldr	s0, [fp, #-20]	; 0xffffffec
   2db70:	e51b0010 	ldr	r0, [fp, #-16]
   2db74:	eb00072a 	bl	2f824 <L6470::minSpdCalc(float)>
   2db78:	e50b0008 	str	r0, [fp, #-8]
   2db7c:	e3a01008 	mov	r1, #8
   2db80:	e51b0010 	ldr	r0, [fp, #-16]
   2db84:	eb000464 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2db88:	e1a03000 	mov	r3, r0
   2db8c:	e2033a01 	and	r3, r3, #4096	; 0x1000
   2db90:	e50b300c 	str	r3, [fp, #-12]
   2db94:	e51b2008 	ldr	r2, [fp, #-8]
   2db98:	e51b300c 	ldr	r3, [fp, #-12]
   2db9c:	e1823003 	orr	r3, r2, r3
   2dba0:	e1a02003 	mov	r2, r3
   2dba4:	e3a01008 	mov	r1, #8
   2dba8:	e51b0010 	ldr	r0, [fp, #-16]
   2dbac:	eb000442 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2dbb0:	e1a00000 	nop			; (mov r0, r0)
   2dbb4:	e24bd004 	sub	sp, fp, #4
   2dbb8:	e8bd8800 	pop	{fp, pc}

0002dbbc <L6470::getMinSpeed()>:
   2dbbc:	e92d4800 	push	{fp, lr}
   2dbc0:	e28db004 	add	fp, sp, #4
   2dbc4:	e24dd008 	sub	sp, sp, #8
   2dbc8:	e50b0008 	str	r0, [fp, #-8]
   2dbcc:	e3a01008 	mov	r1, #8
   2dbd0:	e51b0008 	ldr	r0, [fp, #-8]
   2dbd4:	eb000450 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2dbd8:	e1a03000 	mov	r3, r0
   2dbdc:	e1a01003 	mov	r1, r3
   2dbe0:	e51b0008 	ldr	r0, [fp, #-8]
   2dbe4:	eb000727 	bl	2f888 <L6470::minSpdParse(unsigned long)>
   2dbe8:	eef07a40 	vmov.f32	s15, s0
   2dbec:	eeb00a67 	vmov.f32	s0, s15
   2dbf0:	e24bd004 	sub	sp, fp, #4
   2dbf4:	e8bd8800 	pop	{fp, pc}

0002dbf8 <L6470::setFullSpeed(float)>:
   2dbf8:	e92d4800 	push	{fp, lr}
   2dbfc:	e28db004 	add	fp, sp, #4
   2dc00:	e24dd010 	sub	sp, sp, #16
   2dc04:	e50b0010 	str	r0, [fp, #-16]
   2dc08:	ed0b0a05 	vstr	s0, [fp, #-20]	; 0xffffffec
   2dc0c:	ed1b0a05 	vldr	s0, [fp, #-20]	; 0xffffffec
   2dc10:	e51b0010 	ldr	r0, [fp, #-16]
   2dc14:	eb00072c 	bl	2f8cc <L6470::FSCalc(float)>
   2dc18:	e50b0008 	str	r0, [fp, #-8]
   2dc1c:	e51b2008 	ldr	r2, [fp, #-8]
   2dc20:	e3a01015 	mov	r1, #21
   2dc24:	e51b0010 	ldr	r0, [fp, #-16]
   2dc28:	eb000423 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2dc2c:	e1a00000 	nop			; (mov r0, r0)
   2dc30:	e24bd004 	sub	sp, fp, #4
   2dc34:	e8bd8800 	pop	{fp, pc}

0002dc38 <L6470::getFullSpeed()>:
   2dc38:	e92d4800 	push	{fp, lr}
   2dc3c:	e28db004 	add	fp, sp, #4
   2dc40:	e24dd008 	sub	sp, sp, #8
   2dc44:	e50b0008 	str	r0, [fp, #-8]
   2dc48:	e3a01015 	mov	r1, #21
   2dc4c:	e51b0008 	ldr	r0, [fp, #-8]
   2dc50:	eb000431 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2dc54:	e1a03000 	mov	r3, r0
   2dc58:	e1a01003 	mov	r1, r3
   2dc5c:	e51b0008 	ldr	r0, [fp, #-8]
   2dc60:	eb000735 	bl	2f93c <L6470::FSParse(unsigned long)>
   2dc64:	eef07a40 	vmov.f32	s15, s0
   2dc68:	eeb00a67 	vmov.f32	s0, s15
   2dc6c:	e24bd004 	sub	sp, fp, #4
   2dc70:	e8bd8800 	pop	{fp, pc}

0002dc74 <L6470::setAcc(float)>:
   2dc74:	e92d4800 	push	{fp, lr}
   2dc78:	e28db004 	add	fp, sp, #4
   2dc7c:	e24dd010 	sub	sp, sp, #16
   2dc80:	e50b0010 	str	r0, [fp, #-16]
   2dc84:	ed0b0a05 	vstr	s0, [fp, #-20]	; 0xffffffec
   2dc88:	ed1b0a05 	vldr	s0, [fp, #-20]	; 0xffffffec
   2dc8c:	e51b0010 	ldr	r0, [fp, #-16]
   2dc90:	eb000665 	bl	2f62c <L6470::accCalc(float)>
   2dc94:	e50b0008 	str	r0, [fp, #-8]
   2dc98:	e51b2008 	ldr	r2, [fp, #-8]
   2dc9c:	e3a01005 	mov	r1, #5
   2dca0:	e51b0010 	ldr	r0, [fp, #-16]
   2dca4:	eb000404 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2dca8:	e1a00000 	nop			; (mov r0, r0)
   2dcac:	e24bd004 	sub	sp, fp, #4
   2dcb0:	e8bd8800 	pop	{fp, pc}

0002dcb4 <L6470::getAcc()>:
   2dcb4:	e92d4800 	push	{fp, lr}
   2dcb8:	e28db004 	add	fp, sp, #4
   2dcbc:	e24dd008 	sub	sp, sp, #8
   2dcc0:	e50b0008 	str	r0, [fp, #-8]
   2dcc4:	e3a01005 	mov	r1, #5
   2dcc8:	e51b0008 	ldr	r0, [fp, #-8]
   2dccc:	eb000412 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2dcd0:	e1a03000 	mov	r3, r0
   2dcd4:	e1a01003 	mov	r1, r3
   2dcd8:	e51b0008 	ldr	r0, [fp, #-8]
   2dcdc:	eb00066b 	bl	2f690 <L6470::accParse(unsigned long)>
   2dce0:	eef07a40 	vmov.f32	s15, s0
   2dce4:	eeb00a67 	vmov.f32	s0, s15
   2dce8:	e24bd004 	sub	sp, fp, #4
   2dcec:	e8bd8800 	pop	{fp, pc}

0002dcf0 <L6470::setDec(float)>:
   2dcf0:	e92d4800 	push	{fp, lr}
   2dcf4:	e28db004 	add	fp, sp, #4
   2dcf8:	e24dd010 	sub	sp, sp, #16
   2dcfc:	e50b0010 	str	r0, [fp, #-16]
   2dd00:	ed0b0a05 	vstr	s0, [fp, #-20]	; 0xffffffec
   2dd04:	ed1b0a05 	vldr	s0, [fp, #-20]	; 0xffffffec
   2dd08:	e51b0010 	ldr	r0, [fp, #-16]
   2dd0c:	eb000671 	bl	2f6d8 <L6470::decCalc(float)>
   2dd10:	e50b0008 	str	r0, [fp, #-8]
   2dd14:	e51b2008 	ldr	r2, [fp, #-8]
   2dd18:	e3a01006 	mov	r1, #6
   2dd1c:	e51b0010 	ldr	r0, [fp, #-16]
   2dd20:	eb0003e5 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2dd24:	e1a00000 	nop			; (mov r0, r0)
   2dd28:	e24bd004 	sub	sp, fp, #4
   2dd2c:	e8bd8800 	pop	{fp, pc}

0002dd30 <L6470::getDec()>:
   2dd30:	e92d4800 	push	{fp, lr}
   2dd34:	e28db004 	add	fp, sp, #4
   2dd38:	e24dd008 	sub	sp, sp, #8
   2dd3c:	e50b0008 	str	r0, [fp, #-8]
   2dd40:	e3a01006 	mov	r1, #6
   2dd44:	e51b0008 	ldr	r0, [fp, #-8]
   2dd48:	eb0003f3 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2dd4c:	e1a03000 	mov	r3, r0
   2dd50:	e1a01003 	mov	r1, r3
   2dd54:	e51b0008 	ldr	r0, [fp, #-8]
   2dd58:	eb00064c 	bl	2f690 <L6470::accParse(unsigned long)>
   2dd5c:	eef07a40 	vmov.f32	s15, s0
   2dd60:	eeb00a67 	vmov.f32	s0, s15
   2dd64:	e24bd004 	sub	sp, fp, #4
   2dd68:	e8bd8800 	pop	{fp, pc}

0002dd6c <L6470::setOCThreshold(unsigned char)>:
   2dd6c:	e92d4800 	push	{fp, lr}
   2dd70:	e28db004 	add	fp, sp, #4
   2dd74:	e24dd008 	sub	sp, sp, #8
   2dd78:	e50b0008 	str	r0, [fp, #-8]
   2dd7c:	e1a03001 	mov	r3, r1
   2dd80:	e54b3009 	strb	r3, [fp, #-9]
   2dd84:	e55b3009 	ldrb	r3, [fp, #-9]
   2dd88:	e203300f 	and	r3, r3, #15
   2dd8c:	e1a02003 	mov	r2, r3
   2dd90:	e3a01013 	mov	r1, #19
   2dd94:	e51b0008 	ldr	r0, [fp, #-8]
   2dd98:	eb0003c7 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2dd9c:	e1a00000 	nop			; (mov r0, r0)
   2dda0:	e24bd004 	sub	sp, fp, #4
   2dda4:	e8bd8800 	pop	{fp, pc}

0002dda8 <L6470::getOCThreshold()>:
   2dda8:	e92d4800 	push	{fp, lr}
   2ddac:	e28db004 	add	fp, sp, #4
   2ddb0:	e24dd008 	sub	sp, sp, #8
   2ddb4:	e50b0008 	str	r0, [fp, #-8]
   2ddb8:	e3a01013 	mov	r1, #19
   2ddbc:	e51b0008 	ldr	r0, [fp, #-8]
   2ddc0:	eb0003d5 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2ddc4:	e1a03000 	mov	r3, r0
   2ddc8:	e6ef3073 	uxtb	r3, r3
   2ddcc:	e203300f 	and	r3, r3, #15
   2ddd0:	e6ef3073 	uxtb	r3, r3
   2ddd4:	e1a00003 	mov	r0, r3
   2ddd8:	e24bd004 	sub	sp, fp, #4
   2dddc:	e8bd8800 	pop	{fp, pc}

0002dde0 <L6470::setPWMFreq(int, int)>:
   2dde0:	e92d4800 	push	{fp, lr}
   2dde4:	e28db004 	add	fp, sp, #4
   2dde8:	e24dd018 	sub	sp, sp, #24
   2ddec:	e50b0010 	str	r0, [fp, #-16]
   2ddf0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2ddf4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   2ddf8:	e3a01018 	mov	r1, #24
   2ddfc:	e51b0010 	ldr	r0, [fp, #-16]
   2de00:	eb0003c5 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2de04:	e50b0008 	str	r0, [fp, #-8]
   2de08:	e51b3008 	ldr	r3, [fp, #-8]
   2de0c:	e3c33a0e 	bic	r3, r3, #57344	; 0xe000
   2de10:	e50b3008 	str	r3, [fp, #-8]
   2de14:	e51b3008 	ldr	r3, [fp, #-8]
   2de18:	e3c33b07 	bic	r3, r3, #7168	; 0x1c00
   2de1c:	e50b3008 	str	r3, [fp, #-8]
   2de20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2de24:	e2032a0e 	and	r2, r3, #57344	; 0xe000
   2de28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2de2c:	e2033b07 	and	r3, r3, #7168	; 0x1c00
   2de30:	e1823003 	orr	r3, r2, r3
   2de34:	e51b2008 	ldr	r2, [fp, #-8]
   2de38:	e1823003 	orr	r3, r2, r3
   2de3c:	e50b3008 	str	r3, [fp, #-8]
   2de40:	e51b3008 	ldr	r3, [fp, #-8]
   2de44:	e1a02003 	mov	r2, r3
   2de48:	e3a01018 	mov	r1, #24
   2de4c:	e51b0010 	ldr	r0, [fp, #-16]
   2de50:	eb000399 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2de54:	e1a00000 	nop			; (mov r0, r0)
   2de58:	e24bd004 	sub	sp, fp, #4
   2de5c:	e8bd8800 	pop	{fp, pc}

0002de60 <L6470::getPWMFreqDivisor()>:
   2de60:	e92d4800 	push	{fp, lr}
   2de64:	e28db004 	add	fp, sp, #4
   2de68:	e24dd008 	sub	sp, sp, #8
   2de6c:	e50b0008 	str	r0, [fp, #-8]
   2de70:	e3a01018 	mov	r1, #24
   2de74:	e51b0008 	ldr	r0, [fp, #-8]
   2de78:	eb0003a7 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2de7c:	e1a03000 	mov	r3, r0
   2de80:	e2033a0e 	and	r3, r3, #57344	; 0xe000
   2de84:	e1a00003 	mov	r0, r3
   2de88:	e24bd004 	sub	sp, fp, #4
   2de8c:	e8bd8800 	pop	{fp, pc}

0002de90 <L6470::getPWMFreqMultiplier()>:
   2de90:	e92d4800 	push	{fp, lr}
   2de94:	e28db004 	add	fp, sp, #4
   2de98:	e24dd008 	sub	sp, sp, #8
   2de9c:	e50b0008 	str	r0, [fp, #-8]
   2dea0:	e3a01018 	mov	r1, #24
   2dea4:	e51b0008 	ldr	r0, [fp, #-8]
   2dea8:	eb00039b 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2deac:	e1a03000 	mov	r3, r0
   2deb0:	e2033b07 	and	r3, r3, #7168	; 0x1c00
   2deb4:	e1a00003 	mov	r0, r3
   2deb8:	e24bd004 	sub	sp, fp, #4
   2debc:	e8bd8800 	pop	{fp, pc}

0002dec0 <L6470::setSlewRate(int)>:
   2dec0:	e92d4800 	push	{fp, lr}
   2dec4:	e28db004 	add	fp, sp, #4
   2dec8:	e24dd010 	sub	sp, sp, #16
   2decc:	e50b0010 	str	r0, [fp, #-16]
   2ded0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2ded4:	e3a01018 	mov	r1, #24
   2ded8:	e51b0010 	ldr	r0, [fp, #-16]
   2dedc:	eb00038e 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2dee0:	e50b0008 	str	r0, [fp, #-8]
   2dee4:	e51b3008 	ldr	r3, [fp, #-8]
   2dee8:	e3c33c03 	bic	r3, r3, #768	; 0x300
   2deec:	e50b3008 	str	r3, [fp, #-8]
   2def0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2def4:	e2033c03 	and	r3, r3, #768	; 0x300
   2def8:	e51b2008 	ldr	r2, [fp, #-8]
   2defc:	e1823003 	orr	r3, r2, r3
   2df00:	e50b3008 	str	r3, [fp, #-8]
   2df04:	e51b3008 	ldr	r3, [fp, #-8]
   2df08:	e1a02003 	mov	r2, r3
   2df0c:	e3a01018 	mov	r1, #24
   2df10:	e51b0010 	ldr	r0, [fp, #-16]
   2df14:	eb000368 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2df18:	e1a00000 	nop			; (mov r0, r0)
   2df1c:	e24bd004 	sub	sp, fp, #4
   2df20:	e8bd8800 	pop	{fp, pc}

0002df24 <L6470::getSlewRate()>:
   2df24:	e92d4800 	push	{fp, lr}
   2df28:	e28db004 	add	fp, sp, #4
   2df2c:	e24dd008 	sub	sp, sp, #8
   2df30:	e50b0008 	str	r0, [fp, #-8]
   2df34:	e3a01018 	mov	r1, #24
   2df38:	e51b0008 	ldr	r0, [fp, #-8]
   2df3c:	eb000376 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2df40:	e1a03000 	mov	r3, r0
   2df44:	e2033c03 	and	r3, r3, #768	; 0x300
   2df48:	e1a00003 	mov	r0, r3
   2df4c:	e24bd004 	sub	sp, fp, #4
   2df50:	e8bd8800 	pop	{fp, pc}

0002df54 <L6470::setOCShutdown(int)>:
   2df54:	e92d4800 	push	{fp, lr}
   2df58:	e28db004 	add	fp, sp, #4
   2df5c:	e24dd010 	sub	sp, sp, #16
   2df60:	e50b0010 	str	r0, [fp, #-16]
   2df64:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2df68:	e3a01018 	mov	r1, #24
   2df6c:	e51b0010 	ldr	r0, [fp, #-16]
   2df70:	eb000369 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2df74:	e50b0008 	str	r0, [fp, #-8]
   2df78:	e51b3008 	ldr	r3, [fp, #-8]
   2df7c:	e3c33080 	bic	r3, r3, #128	; 0x80
   2df80:	e50b3008 	str	r3, [fp, #-8]
   2df84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2df88:	e2033080 	and	r3, r3, #128	; 0x80
   2df8c:	e51b2008 	ldr	r2, [fp, #-8]
   2df90:	e1823003 	orr	r3, r2, r3
   2df94:	e50b3008 	str	r3, [fp, #-8]
   2df98:	e51b3008 	ldr	r3, [fp, #-8]
   2df9c:	e1a02003 	mov	r2, r3
   2dfa0:	e3a01018 	mov	r1, #24
   2dfa4:	e51b0010 	ldr	r0, [fp, #-16]
   2dfa8:	eb000343 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2dfac:	e1a00000 	nop			; (mov r0, r0)
   2dfb0:	e24bd004 	sub	sp, fp, #4
   2dfb4:	e8bd8800 	pop	{fp, pc}

0002dfb8 <L6470::getOCShutdown()>:
   2dfb8:	e92d4800 	push	{fp, lr}
   2dfbc:	e28db004 	add	fp, sp, #4
   2dfc0:	e24dd008 	sub	sp, sp, #8
   2dfc4:	e50b0008 	str	r0, [fp, #-8]
   2dfc8:	e3a01018 	mov	r1, #24
   2dfcc:	e51b0008 	ldr	r0, [fp, #-8]
   2dfd0:	eb000351 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2dfd4:	e1a03000 	mov	r3, r0
   2dfd8:	e2033080 	and	r3, r3, #128	; 0x80
   2dfdc:	e1a00003 	mov	r0, r3
   2dfe0:	e24bd004 	sub	sp, fp, #4
   2dfe4:	e8bd8800 	pop	{fp, pc}

0002dfe8 <L6470::setVoltageComp(int)>:
   2dfe8:	e92d4800 	push	{fp, lr}
   2dfec:	e28db004 	add	fp, sp, #4
   2dff0:	e24dd010 	sub	sp, sp, #16
   2dff4:	e50b0010 	str	r0, [fp, #-16]
   2dff8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2dffc:	e3a01018 	mov	r1, #24
   2e000:	e51b0010 	ldr	r0, [fp, #-16]
   2e004:	eb000344 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2e008:	e50b0008 	str	r0, [fp, #-8]
   2e00c:	e51b3008 	ldr	r3, [fp, #-8]
   2e010:	e3c33020 	bic	r3, r3, #32
   2e014:	e50b3008 	str	r3, [fp, #-8]
   2e018:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2e01c:	e2033020 	and	r3, r3, #32
   2e020:	e51b2008 	ldr	r2, [fp, #-8]
   2e024:	e1823003 	orr	r3, r2, r3
   2e028:	e50b3008 	str	r3, [fp, #-8]
   2e02c:	e51b3008 	ldr	r3, [fp, #-8]
   2e030:	e1a02003 	mov	r2, r3
   2e034:	e3a01018 	mov	r1, #24
   2e038:	e51b0010 	ldr	r0, [fp, #-16]
   2e03c:	eb00031e 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2e040:	e1a00000 	nop			; (mov r0, r0)
   2e044:	e24bd004 	sub	sp, fp, #4
   2e048:	e8bd8800 	pop	{fp, pc}

0002e04c <L6470::getVoltageComp()>:
   2e04c:	e92d4800 	push	{fp, lr}
   2e050:	e28db004 	add	fp, sp, #4
   2e054:	e24dd008 	sub	sp, sp, #8
   2e058:	e50b0008 	str	r0, [fp, #-8]
   2e05c:	e3a01018 	mov	r1, #24
   2e060:	e51b0008 	ldr	r0, [fp, #-8]
   2e064:	eb00032c 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2e068:	e1a03000 	mov	r3, r0
   2e06c:	e2033020 	and	r3, r3, #32
   2e070:	e1a00003 	mov	r0, r3
   2e074:	e24bd004 	sub	sp, fp, #4
   2e078:	e8bd8800 	pop	{fp, pc}

0002e07c <L6470::setSwitchMode(int)>:
   2e07c:	e92d4800 	push	{fp, lr}
   2e080:	e28db004 	add	fp, sp, #4
   2e084:	e24dd010 	sub	sp, sp, #16
   2e088:	e50b0010 	str	r0, [fp, #-16]
   2e08c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2e090:	e3a01018 	mov	r1, #24
   2e094:	e51b0010 	ldr	r0, [fp, #-16]
   2e098:	eb00031f 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2e09c:	e50b0008 	str	r0, [fp, #-8]
   2e0a0:	e51b3008 	ldr	r3, [fp, #-8]
   2e0a4:	e3c33010 	bic	r3, r3, #16
   2e0a8:	e50b3008 	str	r3, [fp, #-8]
   2e0ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2e0b0:	e2033010 	and	r3, r3, #16
   2e0b4:	e51b2008 	ldr	r2, [fp, #-8]
   2e0b8:	e1823003 	orr	r3, r2, r3
   2e0bc:	e50b3008 	str	r3, [fp, #-8]
   2e0c0:	e51b3008 	ldr	r3, [fp, #-8]
   2e0c4:	e1a02003 	mov	r2, r3
   2e0c8:	e3a01018 	mov	r1, #24
   2e0cc:	e51b0010 	ldr	r0, [fp, #-16]
   2e0d0:	eb0002f9 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2e0d4:	e1a00000 	nop			; (mov r0, r0)
   2e0d8:	e24bd004 	sub	sp, fp, #4
   2e0dc:	e8bd8800 	pop	{fp, pc}

0002e0e0 <L6470::getSwitchMode()>:
   2e0e0:	e92d4800 	push	{fp, lr}
   2e0e4:	e28db004 	add	fp, sp, #4
   2e0e8:	e24dd008 	sub	sp, sp, #8
   2e0ec:	e50b0008 	str	r0, [fp, #-8]
   2e0f0:	e3a01018 	mov	r1, #24
   2e0f4:	e51b0008 	ldr	r0, [fp, #-8]
   2e0f8:	eb000307 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2e0fc:	e1a03000 	mov	r3, r0
   2e100:	e2033010 	and	r3, r3, #16
   2e104:	e1a00003 	mov	r0, r3
   2e108:	e24bd004 	sub	sp, fp, #4
   2e10c:	e8bd8800 	pop	{fp, pc}

0002e110 <L6470::setOscMode(int)>:
   2e110:	e92d4800 	push	{fp, lr}
   2e114:	e28db004 	add	fp, sp, #4
   2e118:	e24dd010 	sub	sp, sp, #16
   2e11c:	e50b0010 	str	r0, [fp, #-16]
   2e120:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2e124:	e3a01018 	mov	r1, #24
   2e128:	e51b0010 	ldr	r0, [fp, #-16]
   2e12c:	eb0002fa 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2e130:	e50b0008 	str	r0, [fp, #-8]
   2e134:	e51b3008 	ldr	r3, [fp, #-8]
   2e138:	e3c3300f 	bic	r3, r3, #15
   2e13c:	e50b3008 	str	r3, [fp, #-8]
   2e140:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2e144:	e203300f 	and	r3, r3, #15
   2e148:	e51b2008 	ldr	r2, [fp, #-8]
   2e14c:	e1823003 	orr	r3, r2, r3
   2e150:	e50b3008 	str	r3, [fp, #-8]
   2e154:	e51b3008 	ldr	r3, [fp, #-8]
   2e158:	e1a02003 	mov	r2, r3
   2e15c:	e3a01018 	mov	r1, #24
   2e160:	e51b0010 	ldr	r0, [fp, #-16]
   2e164:	eb0002d4 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2e168:	e1a00000 	nop			; (mov r0, r0)
   2e16c:	e24bd004 	sub	sp, fp, #4
   2e170:	e8bd8800 	pop	{fp, pc}

0002e174 <L6470::getOscMode()>:
   2e174:	e92d4800 	push	{fp, lr}
   2e178:	e28db004 	add	fp, sp, #4
   2e17c:	e24dd008 	sub	sp, sp, #8
   2e180:	e50b0008 	str	r0, [fp, #-8]
   2e184:	e3a01018 	mov	r1, #24
   2e188:	e51b0008 	ldr	r0, [fp, #-8]
   2e18c:	eb0002e2 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2e190:	e1a03000 	mov	r3, r0
   2e194:	e203300f 	and	r3, r3, #15
   2e198:	e1a00003 	mov	r0, r3
   2e19c:	e24bd004 	sub	sp, fp, #4
   2e1a0:	e8bd8800 	pop	{fp, pc}

0002e1a4 <L6470::setAccKVAL(unsigned char)>:
   2e1a4:	e92d4800 	push	{fp, lr}
   2e1a8:	e28db004 	add	fp, sp, #4
   2e1ac:	e24dd008 	sub	sp, sp, #8
   2e1b0:	e50b0008 	str	r0, [fp, #-8]
   2e1b4:	e1a03001 	mov	r3, r1
   2e1b8:	e54b3009 	strb	r3, [fp, #-9]
   2e1bc:	e55b3009 	ldrb	r3, [fp, #-9]
   2e1c0:	e1a02003 	mov	r2, r3
   2e1c4:	e3a0100b 	mov	r1, #11
   2e1c8:	e51b0008 	ldr	r0, [fp, #-8]
   2e1cc:	eb0002ba 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2e1d0:	e1a00000 	nop			; (mov r0, r0)
   2e1d4:	e24bd004 	sub	sp, fp, #4
   2e1d8:	e8bd8800 	pop	{fp, pc}

0002e1dc <L6470::getAccKVAL()>:
   2e1dc:	e92d4800 	push	{fp, lr}
   2e1e0:	e28db004 	add	fp, sp, #4
   2e1e4:	e24dd008 	sub	sp, sp, #8
   2e1e8:	e50b0008 	str	r0, [fp, #-8]
   2e1ec:	e3a0100b 	mov	r1, #11
   2e1f0:	e51b0008 	ldr	r0, [fp, #-8]
   2e1f4:	eb0002c8 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2e1f8:	e1a03000 	mov	r3, r0
   2e1fc:	e6ef3073 	uxtb	r3, r3
   2e200:	e1a00003 	mov	r0, r3
   2e204:	e24bd004 	sub	sp, fp, #4
   2e208:	e8bd8800 	pop	{fp, pc}

0002e20c <L6470::setDecKVAL(unsigned char)>:
   2e20c:	e92d4800 	push	{fp, lr}
   2e210:	e28db004 	add	fp, sp, #4
   2e214:	e24dd008 	sub	sp, sp, #8
   2e218:	e50b0008 	str	r0, [fp, #-8]
   2e21c:	e1a03001 	mov	r3, r1
   2e220:	e54b3009 	strb	r3, [fp, #-9]
   2e224:	e55b3009 	ldrb	r3, [fp, #-9]
   2e228:	e1a02003 	mov	r2, r3
   2e22c:	e3a0100c 	mov	r1, #12
   2e230:	e51b0008 	ldr	r0, [fp, #-8]
   2e234:	eb0002a0 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2e238:	e1a00000 	nop			; (mov r0, r0)
   2e23c:	e24bd004 	sub	sp, fp, #4
   2e240:	e8bd8800 	pop	{fp, pc}

0002e244 <L6470::getDecKVAL()>:
   2e244:	e92d4800 	push	{fp, lr}
   2e248:	e28db004 	add	fp, sp, #4
   2e24c:	e24dd008 	sub	sp, sp, #8
   2e250:	e50b0008 	str	r0, [fp, #-8]
   2e254:	e3a0100c 	mov	r1, #12
   2e258:	e51b0008 	ldr	r0, [fp, #-8]
   2e25c:	eb0002ae 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2e260:	e1a03000 	mov	r3, r0
   2e264:	e6ef3073 	uxtb	r3, r3
   2e268:	e1a00003 	mov	r0, r3
   2e26c:	e24bd004 	sub	sp, fp, #4
   2e270:	e8bd8800 	pop	{fp, pc}

0002e274 <L6470::setRunKVAL(unsigned char)>:
   2e274:	e92d4800 	push	{fp, lr}
   2e278:	e28db004 	add	fp, sp, #4
   2e27c:	e24dd008 	sub	sp, sp, #8
   2e280:	e50b0008 	str	r0, [fp, #-8]
   2e284:	e1a03001 	mov	r3, r1
   2e288:	e54b3009 	strb	r3, [fp, #-9]
   2e28c:	e55b3009 	ldrb	r3, [fp, #-9]
   2e290:	e1a02003 	mov	r2, r3
   2e294:	e3a0100a 	mov	r1, #10
   2e298:	e51b0008 	ldr	r0, [fp, #-8]
   2e29c:	eb000286 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2e2a0:	e1a00000 	nop			; (mov r0, r0)
   2e2a4:	e24bd004 	sub	sp, fp, #4
   2e2a8:	e8bd8800 	pop	{fp, pc}

0002e2ac <L6470::getRunKVAL()>:
   2e2ac:	e92d4800 	push	{fp, lr}
   2e2b0:	e28db004 	add	fp, sp, #4
   2e2b4:	e24dd008 	sub	sp, sp, #8
   2e2b8:	e50b0008 	str	r0, [fp, #-8]
   2e2bc:	e3a0100a 	mov	r1, #10
   2e2c0:	e51b0008 	ldr	r0, [fp, #-8]
   2e2c4:	eb000294 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2e2c8:	e1a03000 	mov	r3, r0
   2e2cc:	e6ef3073 	uxtb	r3, r3
   2e2d0:	e1a00003 	mov	r0, r3
   2e2d4:	e24bd004 	sub	sp, fp, #4
   2e2d8:	e8bd8800 	pop	{fp, pc}

0002e2dc <L6470::setHoldKVAL(unsigned char)>:
   2e2dc:	e92d4800 	push	{fp, lr}
   2e2e0:	e28db004 	add	fp, sp, #4
   2e2e4:	e24dd008 	sub	sp, sp, #8
   2e2e8:	e50b0008 	str	r0, [fp, #-8]
   2e2ec:	e1a03001 	mov	r3, r1
   2e2f0:	e54b3009 	strb	r3, [fp, #-9]
   2e2f4:	e55b3009 	ldrb	r3, [fp, #-9]
   2e2f8:	e1a02003 	mov	r2, r3
   2e2fc:	e3a01009 	mov	r1, #9
   2e300:	e51b0008 	ldr	r0, [fp, #-8]
   2e304:	eb00026c 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2e308:	e1a00000 	nop			; (mov r0, r0)
   2e30c:	e24bd004 	sub	sp, fp, #4
   2e310:	e8bd8800 	pop	{fp, pc}

0002e314 <L6470::getHoldKVAL()>:
   2e314:	e92d4800 	push	{fp, lr}
   2e318:	e28db004 	add	fp, sp, #4
   2e31c:	e24dd008 	sub	sp, sp, #8
   2e320:	e50b0008 	str	r0, [fp, #-8]
   2e324:	e3a01009 	mov	r1, #9
   2e328:	e51b0008 	ldr	r0, [fp, #-8]
   2e32c:	eb00027a 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2e330:	e1a03000 	mov	r3, r0
   2e334:	e6ef3073 	uxtb	r3, r3
   2e338:	e1a00003 	mov	r0, r3
   2e33c:	e24bd004 	sub	sp, fp, #4
   2e340:	e8bd8800 	pop	{fp, pc}

0002e344 <L6470::setLoSpdOpt(bool)>:
   2e344:	e92d4800 	push	{fp, lr}
   2e348:	e28db004 	add	fp, sp, #4
   2e34c:	e24dd010 	sub	sp, sp, #16
   2e350:	e50b0010 	str	r0, [fp, #-16]
   2e354:	e1a03001 	mov	r3, r1
   2e358:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   2e35c:	e3a01008 	mov	r1, #8
   2e360:	e51b0010 	ldr	r0, [fp, #-16]
   2e364:	eb00026c 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2e368:	e50b0008 	str	r0, [fp, #-8]
   2e36c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   2e370:	e3530000 	cmp	r3, #0
   2e374:	0a000003 	beq	2e388 <L6470::setLoSpdOpt(bool)+0x44>
   2e378:	e51b3008 	ldr	r3, [fp, #-8]
   2e37c:	e3833a01 	orr	r3, r3, #4096	; 0x1000
   2e380:	e50b3008 	str	r3, [fp, #-8]
   2e384:	ea000002 	b	2e394 <L6470::setLoSpdOpt(bool)+0x50>
   2e388:	e51b3008 	ldr	r3, [fp, #-8]
   2e38c:	e3c33a01 	bic	r3, r3, #4096	; 0x1000
   2e390:	e50b3008 	str	r3, [fp, #-8]
   2e394:	e51b3008 	ldr	r3, [fp, #-8]
   2e398:	e1a02003 	mov	r2, r3
   2e39c:	e3a01008 	mov	r1, #8
   2e3a0:	e51b0010 	ldr	r0, [fp, #-16]
   2e3a4:	eb000244 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2e3a8:	e1a00000 	nop			; (mov r0, r0)
   2e3ac:	e24bd004 	sub	sp, fp, #4
   2e3b0:	e8bd8800 	pop	{fp, pc}

0002e3b4 <L6470::getLoSpdOpt()>:
   2e3b4:	e92d4800 	push	{fp, lr}
   2e3b8:	e28db004 	add	fp, sp, #4
   2e3bc:	e24dd008 	sub	sp, sp, #8
   2e3c0:	e50b0008 	str	r0, [fp, #-8]
   2e3c4:	e3a01008 	mov	r1, #8
   2e3c8:	e51b0008 	ldr	r0, [fp, #-8]
   2e3cc:	eb000252 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2e3d0:	e1a03000 	mov	r3, r0
   2e3d4:	e2033a01 	and	r3, r3, #4096	; 0x1000
   2e3d8:	e3530000 	cmp	r3, #0
   2e3dc:	13a03001 	movne	r3, #1
   2e3e0:	03a03000 	moveq	r3, #0
   2e3e4:	e6ef3073 	uxtb	r3, r3
   2e3e8:	e1a00003 	mov	r0, r3
   2e3ec:	e24bd004 	sub	sp, fp, #4
   2e3f0:	e8bd8800 	pop	{fp, pc}

0002e3f4 <L6470::L6470()>:
   2e3f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2e3f8:	e28db000 	add	fp, sp, #0
   2e3fc:	e24dd00c 	sub	sp, sp, #12
   2e400:	e50b0008 	str	r0, [fp, #-8]
   2e404:	e59f2018 	ldr	r2, [pc, #24]	; 2e424 <L6470::L6470()+0x30>
   2e408:	e51b3008 	ldr	r3, [fp, #-8]
   2e40c:	e5832000 	str	r2, [r3]
   2e410:	e51b3008 	ldr	r3, [fp, #-8]
   2e414:	e1a00003 	mov	r0, r3
   2e418:	e28bd000 	add	sp, fp, #0
   2e41c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2e420:	e12fff1e 	bx	lr
   2e424:	00047d80 	.word	0x00047d80

0002e428 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char, unsigned char)>:
   2e428:	e92d4800 	push	{fp, lr}
   2e42c:	e28db004 	add	fp, sp, #4
   2e430:	e24dd008 	sub	sp, sp, #8
   2e434:	e50b0008 	str	r0, [fp, #-8]
   2e438:	e1a00001 	mov	r0, r1
   2e43c:	e1a01002 	mov	r1, r2
   2e440:	e1a02003 	mov	r2, r3
   2e444:	e1a03000 	mov	r3, r0
   2e448:	e54b3009 	strb	r3, [fp, #-9]
   2e44c:	e1a03001 	mov	r3, r1
   2e450:	e54b300a 	strb	r3, [fp, #-10]
   2e454:	e1a03002 	mov	r3, r2
   2e458:	e54b300b 	strb	r3, [fp, #-11]
   2e45c:	e51b3008 	ldr	r3, [fp, #-8]
   2e460:	e1a00003 	mov	r0, r3
   2e464:	ebffffe2 	bl	2e3f4 <L6470::L6470()>
   2e468:	e59f206c 	ldr	r2, [pc, #108]	; 2e4dc <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char, unsigned char)+0xb4>
   2e46c:	e51b3008 	ldr	r3, [fp, #-8]
   2e470:	e5832000 	str	r2, [r3]
   2e474:	e51b3008 	ldr	r3, [fp, #-8]
   2e478:	e55b200a 	ldrb	r2, [fp, #-10]
   2e47c:	e5c32008 	strb	r2, [r3, #8]
   2e480:	e51b3008 	ldr	r3, [fp, #-8]
   2e484:	e55b200b 	ldrb	r2, [fp, #-11]
   2e488:	e5c32009 	strb	r2, [r3, #9]
   2e48c:	e51b3008 	ldr	r3, [fp, #-8]
   2e490:	e5db2004 	ldrb	r2, [fp, #4]
   2e494:	e5c3200a 	strb	r2, [r3, #10]
   2e498:	e51b3008 	ldr	r3, [fp, #-8]
   2e49c:	e55b2009 	ldrb	r2, [fp, #-9]
   2e4a0:	e5c3200b 	strb	r2, [r3, #11]
   2e4a4:	e51b3008 	ldr	r3, [fp, #-8]
   2e4a8:	e3a02000 	mov	r2, #0
   2e4ac:	e5c3200c 	strb	r2, [r3, #12]
   2e4b0:	e55b300a 	ldrb	r3, [fp, #-10]
   2e4b4:	e59f2024 	ldr	r2, [pc, #36]	; 2e4e0 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char, unsigned char)+0xb8>
   2e4b8:	e7d22003 	ldrb	r2, [r2, r3]
   2e4bc:	e2822001 	add	r2, r2, #1
   2e4c0:	e6ef1072 	uxtb	r1, r2
   2e4c4:	e59f2014 	ldr	r2, [pc, #20]	; 2e4e0 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char, unsigned char)+0xb8>
   2e4c8:	e7c21003 	strb	r1, [r2, r3]
   2e4cc:	e51b3008 	ldr	r3, [fp, #-8]
   2e4d0:	e1a00003 	mov	r0, r3
   2e4d4:	e24bd004 	sub	sp, fp, #4
   2e4d8:	e8bd8800 	pop	{fp, pc}
   2e4dc:	00047d54 	.word	0x00047d54
   2e4e0:	0005dc14 	.word	0x0005dc14

0002e4e4 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char)>:
   2e4e4:	e92d4800 	push	{fp, lr}
   2e4e8:	e28db004 	add	fp, sp, #4
   2e4ec:	e24dd008 	sub	sp, sp, #8
   2e4f0:	e50b0008 	str	r0, [fp, #-8]
   2e4f4:	e1a00001 	mov	r0, r1
   2e4f8:	e1a01002 	mov	r1, r2
   2e4fc:	e1a02003 	mov	r2, r3
   2e500:	e1a03000 	mov	r3, r0
   2e504:	e54b3009 	strb	r3, [fp, #-9]
   2e508:	e1a03001 	mov	r3, r1
   2e50c:	e54b300a 	strb	r3, [fp, #-10]
   2e510:	e1a03002 	mov	r3, r2
   2e514:	e54b300b 	strb	r3, [fp, #-11]
   2e518:	e51b3008 	ldr	r3, [fp, #-8]
   2e51c:	e1a00003 	mov	r0, r3
   2e520:	ebffffb3 	bl	2e3f4 <L6470::L6470()>
   2e524:	e59f206c 	ldr	r2, [pc, #108]	; 2e598 <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char)+0xb4>
   2e528:	e51b3008 	ldr	r3, [fp, #-8]
   2e52c:	e5832000 	str	r2, [r3]
   2e530:	e51b3008 	ldr	r3, [fp, #-8]
   2e534:	e55b200a 	ldrb	r2, [fp, #-10]
   2e538:	e5c32008 	strb	r2, [r3, #8]
   2e53c:	e51b3008 	ldr	r3, [fp, #-8]
   2e540:	e55b200b 	ldrb	r2, [fp, #-11]
   2e544:	e5c32009 	strb	r2, [r3, #9]
   2e548:	e51b3008 	ldr	r3, [fp, #-8]
   2e54c:	e3e02000 	mvn	r2, #0
   2e550:	e5c3200a 	strb	r2, [r3, #10]
   2e554:	e51b3008 	ldr	r3, [fp, #-8]
   2e558:	e55b2009 	ldrb	r2, [fp, #-9]
   2e55c:	e5c3200b 	strb	r2, [r3, #11]
   2e560:	e51b3008 	ldr	r3, [fp, #-8]
   2e564:	e3a02000 	mov	r2, #0
   2e568:	e5c3200c 	strb	r2, [r3, #12]
   2e56c:	e55b300a 	ldrb	r3, [fp, #-10]
   2e570:	e59f2024 	ldr	r2, [pc, #36]	; 2e59c <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char)+0xb8>
   2e574:	e7d22003 	ldrb	r2, [r2, r3]
   2e578:	e2822001 	add	r2, r2, #1
   2e57c:	e6ef1072 	uxtb	r1, r2
   2e580:	e59f2014 	ldr	r2, [pc, #20]	; 2e59c <AutoDriver::AutoDriver(unsigned char, unsigned char, unsigned char)+0xb8>
   2e584:	e7c21003 	strb	r1, [r2, r3]
   2e588:	e51b3008 	ldr	r3, [fp, #-8]
   2e58c:	e1a00003 	mov	r0, r3
   2e590:	e24bd004 	sub	sp, fp, #4
   2e594:	e8bd8800 	pop	{fp, pc}
   2e598:	00047d54 	.word	0x00047d54
   2e59c:	0005dc14 	.word	0x0005dc14

0002e5a0 <AutoDriver::~AutoDriver()>:
   2e5a0:	e92d4800 	push	{fp, lr}
   2e5a4:	e28db004 	add	fp, sp, #4
   2e5a8:	e24dd008 	sub	sp, sp, #8
   2e5ac:	e50b0008 	str	r0, [fp, #-8]
   2e5b0:	e59f2058 	ldr	r2, [pc, #88]	; 2e610 <AutoDriver::~AutoDriver()+0x70>
   2e5b4:	e51b3008 	ldr	r3, [fp, #-8]
   2e5b8:	e5832000 	str	r2, [r3]
   2e5bc:	e51b3008 	ldr	r3, [fp, #-8]
   2e5c0:	e1a00003 	mov	r0, r3
   2e5c4:	eb0003ca 	bl	2f4f4 <L6470::hardHiZ()>
   2e5c8:	e51b3008 	ldr	r3, [fp, #-8]
   2e5cc:	e3a02000 	mov	r2, #0
   2e5d0:	e5c3200c 	strb	r2, [r3, #12]
   2e5d4:	e51b3008 	ldr	r3, [fp, #-8]
   2e5d8:	e5d33008 	ldrb	r3, [r3, #8]
   2e5dc:	e59f2030 	ldr	r2, [pc, #48]	; 2e614 <AutoDriver::~AutoDriver()+0x74>
   2e5e0:	e7d22003 	ldrb	r2, [r2, r3]
   2e5e4:	e2422001 	sub	r2, r2, #1
   2e5e8:	e6ef1072 	uxtb	r1, r2
   2e5ec:	e59f2020 	ldr	r2, [pc, #32]	; 2e614 <AutoDriver::~AutoDriver()+0x74>
   2e5f0:	e7c21003 	strb	r1, [r2, r3]
   2e5f4:	e51b3008 	ldr	r3, [fp, #-8]
   2e5f8:	e1a00003 	mov	r0, r3
   2e5fc:	eb0000fb 	bl	2e9f0 <L6470::~L6470()>
   2e600:	e51b3008 	ldr	r3, [fp, #-8]
   2e604:	e1a00003 	mov	r0, r3
   2e608:	e24bd004 	sub	sp, fp, #4
   2e60c:	e8bd8800 	pop	{fp, pc}
   2e610:	00047d54 	.word	0x00047d54
   2e614:	0005dc14 	.word	0x0005dc14

0002e618 <AutoDriver::~AutoDriver()>:
   2e618:	e92d4800 	push	{fp, lr}
   2e61c:	e28db004 	add	fp, sp, #4
   2e620:	e24dd008 	sub	sp, sp, #8
   2e624:	e50b0008 	str	r0, [fp, #-8]
   2e628:	e51b0008 	ldr	r0, [fp, #-8]
   2e62c:	ebffffdb 	bl	2e5a0 <AutoDriver::~AutoDriver()>
   2e630:	e51b0008 	ldr	r0, [fp, #-8]
   2e634:	ebff8b33 	bl	11308 <operator delete(void*)@plt>
   2e638:	e51b3008 	ldr	r3, [fp, #-8]
   2e63c:	e1a00003 	mov	r0, r3
   2e640:	e24bd004 	sub	sp, fp, #4
   2e644:	e8bd8800 	pop	{fp, pc}

0002e648 <AutoDriver::busyCheck()>:
   2e648:	e92d4800 	push	{fp, lr}
   2e64c:	e28db004 	add	fp, sp, #4
   2e650:	e24dd008 	sub	sp, sp, #8
   2e654:	e50b0008 	str	r0, [fp, #-8]
   2e658:	e51b3008 	ldr	r3, [fp, #-8]
   2e65c:	e5d3300a 	ldrb	r3, [r3, #10]
   2e660:	e35300ff 	cmp	r3, #255	; 0xff
   2e664:	1a00000f 	bne	2e6a8 <AutoDriver::busyCheck()+0x60>
   2e668:	e51b3008 	ldr	r3, [fp, #-8]
   2e66c:	e3a01019 	mov	r1, #25
   2e670:	e1a00003 	mov	r0, r3
   2e674:	eb0001a8 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2e678:	e1a03000 	mov	r3, r0
   2e67c:	e2033002 	and	r3, r3, #2
   2e680:	e3530000 	cmp	r3, #0
   2e684:	13a03001 	movne	r3, #1
   2e688:	03a03000 	moveq	r3, #0
   2e68c:	e6ef3073 	uxtb	r3, r3
   2e690:	e3530000 	cmp	r3, #0
   2e694:	0a000001 	beq	2e6a0 <AutoDriver::busyCheck()+0x58>
   2e698:	e3a03000 	mov	r3, #0
   2e69c:	ea00002b 	b	2e750 <AutoDriver::busyCheck()+0x108>
   2e6a0:	e3a03001 	mov	r3, #1
   2e6a4:	ea000029 	b	2e750 <AutoDriver::busyCheck()+0x108>
   2e6a8:	e51b3008 	ldr	r3, [fp, #-8]
   2e6ac:	e5d3300c 	ldrb	r3, [r3, #12]
   2e6b0:	e2233001 	eor	r3, r3, #1
   2e6b4:	e6ef3073 	uxtb	r3, r3
   2e6b8:	e3530000 	cmp	r3, #0
   2e6bc:	0a000012 	beq	2e70c <AutoDriver::busyCheck()+0xc4>
   2e6c0:	e51b3008 	ldr	r3, [fp, #-8]
   2e6c4:	e3a01019 	mov	r1, #25
   2e6c8:	e1a00003 	mov	r0, r3
   2e6cc:	eb000192 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2e6d0:	e1a03000 	mov	r3, r0
   2e6d4:	e2033002 	and	r3, r3, #2
   2e6d8:	e3530000 	cmp	r3, #0
   2e6dc:	13a03001 	movne	r3, #1
   2e6e0:	03a03000 	moveq	r3, #0
   2e6e4:	e6ef3073 	uxtb	r3, r3
   2e6e8:	e3530000 	cmp	r3, #0
   2e6ec:	0a000001 	beq	2e6f8 <AutoDriver::busyCheck()+0xb0>
   2e6f0:	e3a03000 	mov	r3, #0
   2e6f4:	ea000015 	b	2e750 <AutoDriver::busyCheck()+0x108>
   2e6f8:	e51b3008 	ldr	r3, [fp, #-8]
   2e6fc:	e3a02001 	mov	r2, #1
   2e700:	e5c3200c 	strb	r2, [r3, #12]
   2e704:	e3a03001 	mov	r3, #1
   2e708:	ea000010 	b	2e750 <AutoDriver::busyCheck()+0x108>
   2e70c:	e51b3008 	ldr	r3, [fp, #-8]
   2e710:	e5d3300a 	ldrb	r3, [r3, #10]
   2e714:	e1a00003 	mov	r0, r3
   2e718:	eb004971 	bl	40ce4 <bcm2835_gpio_lev>
   2e71c:	e1a03000 	mov	r3, r0
   2e720:	e3530001 	cmp	r3, #1
   2e724:	03a03001 	moveq	r3, #1
   2e728:	13a03000 	movne	r3, #0
   2e72c:	e6ef3073 	uxtb	r3, r3
   2e730:	e3530000 	cmp	r3, #0
   2e734:	0a000004 	beq	2e74c <AutoDriver::busyCheck()+0x104>
   2e738:	e51b3008 	ldr	r3, [fp, #-8]
   2e73c:	e3a02000 	mov	r2, #0
   2e740:	e5c3200c 	strb	r2, [r3, #12]
   2e744:	e3a03000 	mov	r3, #0
   2e748:	ea000000 	b	2e750 <AutoDriver::busyCheck()+0x108>
   2e74c:	e3a03001 	mov	r3, #1
   2e750:	e1a00003 	mov	r0, r3
   2e754:	e24bd004 	sub	sp, fp, #4
   2e758:	e8bd8800 	pop	{fp, pc}

0002e75c <AutoDriver::SPIXfer(unsigned char)>:
   2e75c:	e92d4810 	push	{r4, fp, lr}
   2e760:	e28db008 	add	fp, sp, #8
   2e764:	e24dd01c 	sub	sp, sp, #28
   2e768:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   2e76c:	e1a03001 	mov	r3, r1
   2e770:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
   2e774:	e1a0300d 	mov	r3, sp
   2e778:	e1a04003 	mov	r4, r3
   2e77c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2e780:	e5d33008 	ldrb	r3, [r3, #8]
   2e784:	e1a02003 	mov	r2, r3
   2e788:	e59f3144 	ldr	r3, [pc, #324]	; 2e8d4 <AutoDriver::SPIXfer(unsigned char)+0x178>
   2e78c:	e7d33002 	ldrb	r3, [r3, r2]
   2e790:	e243c001 	sub	ip, r3, #1
   2e794:	e50bc014 	str	ip, [fp, #-20]	; 0xffffffec
   2e798:	e1a0300c 	mov	r3, ip
   2e79c:	e2833001 	add	r3, r3, #1
   2e7a0:	e1a00003 	mov	r0, r3
   2e7a4:	e3a01000 	mov	r1, #0
   2e7a8:	e3a02000 	mov	r2, #0
   2e7ac:	e3a03000 	mov	r3, #0
   2e7b0:	e1a03181 	lsl	r3, r1, #3
   2e7b4:	e1833ea0 	orr	r3, r3, r0, lsr #29
   2e7b8:	e1a02180 	lsl	r2, r0, #3
   2e7bc:	e1a0300c 	mov	r3, ip
   2e7c0:	e2833001 	add	r3, r3, #1
   2e7c4:	e1a00003 	mov	r0, r3
   2e7c8:	e3a01000 	mov	r1, #0
   2e7cc:	e3a02000 	mov	r2, #0
   2e7d0:	e3a03000 	mov	r3, #0
   2e7d4:	e1a03181 	lsl	r3, r1, #3
   2e7d8:	e1833ea0 	orr	r3, r3, r0, lsr #29
   2e7dc:	e1a02180 	lsl	r2, r0, #3
   2e7e0:	e1a0300c 	mov	r3, ip
   2e7e4:	e2833001 	add	r3, r3, #1
   2e7e8:	e2833007 	add	r3, r3, #7
   2e7ec:	e1a031a3 	lsr	r3, r3, #3
   2e7f0:	e1a03183 	lsl	r3, r3, #3
   2e7f4:	e04dd003 	sub	sp, sp, r3
   2e7f8:	e1a0300d 	mov	r3, sp
   2e7fc:	e2833000 	add	r3, r3, #0
   2e800:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   2e804:	e3a03000 	mov	r3, #0
   2e808:	e50b3010 	str	r3, [fp, #-16]
   2e80c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2e810:	e5d33008 	ldrb	r3, [r3, #8]
   2e814:	e1a02003 	mov	r2, r3
   2e818:	e59f30b4 	ldr	r3, [pc, #180]	; 2e8d4 <AutoDriver::SPIXfer(unsigned char)+0x178>
   2e81c:	e7d33002 	ldrb	r3, [r3, r2]
   2e820:	e1a02003 	mov	r2, r3
   2e824:	e51b3010 	ldr	r3, [fp, #-16]
   2e828:	e1530002 	cmp	r3, r2
   2e82c:	2a000008 	bcs	2e854 <AutoDriver::SPIXfer(unsigned char)+0xf8>
   2e830:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2e834:	e51b3010 	ldr	r3, [fp, #-16]
   2e838:	e0823003 	add	r3, r2, r3
   2e83c:	e3a02000 	mov	r2, #0
   2e840:	e5c32000 	strb	r2, [r3]
   2e844:	e51b3010 	ldr	r3, [fp, #-16]
   2e848:	e2833001 	add	r3, r3, #1
   2e84c:	e50b3010 	str	r3, [fp, #-16]
   2e850:	eaffffed 	b	2e80c <AutoDriver::SPIXfer(unsigned char)+0xb0>
   2e854:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2e858:	e5d3300b 	ldrb	r3, [r3, #11]
   2e85c:	e1a01003 	mov	r1, r3
   2e860:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2e864:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
   2e868:	e7c32001 	strb	r2, [r3, r1]
   2e86c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2e870:	e5d33008 	ldrb	r3, [r3, #8]
   2e874:	e1a00003 	mov	r0, r3
   2e878:	eb004d8c 	bl	41eb0 <bcm2835_spi_chipSelect>
   2e87c:	e59f0054 	ldr	r0, [pc, #84]	; 2e8d8 <AutoDriver::SPIXfer(unsigned char)+0x17c>
   2e880:	eb004c6e 	bl	41a40 <bcm2835_spi_set_speed_hz>
   2e884:	e3a00003 	mov	r0, #3
   2e888:	eb004c7f 	bl	41a8c <bcm2835_spi_setDataMode>
   2e88c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2e890:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2e894:	e5d33008 	ldrb	r3, [r3, #8]
   2e898:	e1a01003 	mov	r1, r3
   2e89c:	e59f3030 	ldr	r3, [pc, #48]	; 2e8d4 <AutoDriver::SPIXfer(unsigned char)+0x178>
   2e8a0:	e7d33001 	ldrb	r3, [r3, r1]
   2e8a4:	e1a01003 	mov	r1, r3
   2e8a8:	e1a00002 	mov	r0, r2
   2e8ac:	eb004d73 	bl	41e80 <bcm2835_spi_transfern>
   2e8b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2e8b4:	e5d3300b 	ldrb	r3, [r3, #11]
   2e8b8:	e1a02003 	mov	r2, r3
   2e8bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2e8c0:	e7d33002 	ldrb	r3, [r3, r2]
   2e8c4:	e1a0d004 	mov	sp, r4
   2e8c8:	e1a00003 	mov	r0, r3
   2e8cc:	e24bd008 	sub	sp, fp, #8
   2e8d0:	e8bd8810 	pop	{r4, fp, pc}
   2e8d4:	0005dc14 	.word	0x0005dc14
   2e8d8:	001e8480 	.word	0x001e8480

0002e8dc <AutoDriver::getNumBoards()>:
   2e8dc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2e8e0:	e28db000 	add	fp, sp, #0
   2e8e4:	e24dd00c 	sub	sp, sp, #12
   2e8e8:	e3a03000 	mov	r3, #0
   2e8ec:	e14b30b6 	strh	r3, [fp, #-6]
   2e8f0:	e3a03000 	mov	r3, #0
   2e8f4:	e50b300c 	str	r3, [fp, #-12]
   2e8f8:	e51b300c 	ldr	r3, [fp, #-12]
   2e8fc:	e3530001 	cmp	r3, #1
   2e900:	8a00000b 	bhi	2e934 <AutoDriver::getNumBoards()+0x58>
   2e904:	e59f203c 	ldr	r2, [pc, #60]	; 2e948 <AutoDriver::getNumBoards()+0x6c>
   2e908:	e51b300c 	ldr	r3, [fp, #-12]
   2e90c:	e0823003 	add	r3, r2, r3
   2e910:	e5d33000 	ldrb	r3, [r3]
   2e914:	e6ff2073 	uxth	r2, r3
   2e918:	e15b30b6 	ldrh	r3, [fp, #-6]
   2e91c:	e0823003 	add	r3, r2, r3
   2e920:	e14b30b6 	strh	r3, [fp, #-6]
   2e924:	e51b300c 	ldr	r3, [fp, #-12]
   2e928:	e2833001 	add	r3, r3, #1
   2e92c:	e50b300c 	str	r3, [fp, #-12]
   2e930:	eafffff0 	b	2e8f8 <AutoDriver::getNumBoards()+0x1c>
   2e934:	e15b30b6 	ldrh	r3, [fp, #-6]
   2e938:	e1a00003 	mov	r0, r3
   2e93c:	e28bd000 	add	sp, fp, #0
   2e940:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2e944:	e12fff1e 	bx	lr
   2e948:	0005dc14 	.word	0x0005dc14

0002e94c <AutoDriver::getNumBoards(unsigned char)>:
   2e94c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2e950:	e28db000 	add	fp, sp, #0
   2e954:	e24dd00c 	sub	sp, sp, #12
   2e958:	e1a03000 	mov	r3, r0
   2e95c:	e54b3005 	strb	r3, [fp, #-5]
   2e960:	e55b3005 	ldrb	r3, [fp, #-5]
   2e964:	e3530001 	cmp	r3, #1
   2e968:	8a000003 	bhi	2e97c <AutoDriver::getNumBoards(unsigned char)+0x30>
   2e96c:	e55b3005 	ldrb	r3, [fp, #-5]
   2e970:	e59f2018 	ldr	r2, [pc, #24]	; 2e990 <AutoDriver::getNumBoards(unsigned char)+0x44>
   2e974:	e7d23003 	ldrb	r3, [r2, r3]
   2e978:	ea000000 	b	2e980 <AutoDriver::getNumBoards(unsigned char)+0x34>
   2e97c:	e3a03000 	mov	r3, #0
   2e980:	e1a00003 	mov	r0, r3
   2e984:	e28bd000 	add	sp, fp, #0
   2e988:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2e98c:	e12fff1e 	bx	lr
   2e990:	0005dc14 	.word	0x0005dc14

0002e994 <AutoDriver::IsConnected()>:
   2e994:	e92d4800 	push	{fp, lr}
   2e998:	e28db004 	add	fp, sp, #4
   2e99c:	e24dd008 	sub	sp, sp, #8
   2e9a0:	e50b0008 	str	r0, [fp, #-8]
   2e9a4:	e51b3008 	ldr	r3, [fp, #-8]
   2e9a8:	e3a01018 	mov	r1, #24
   2e9ac:	e1a00003 	mov	r0, r3
   2e9b0:	eb0000d9 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2e9b4:	e1a02000 	mov	r2, r0
   2e9b8:	e59f302c 	ldr	r3, [pc, #44]	; 2e9ec <AutoDriver::IsConnected()+0x58>
   2e9bc:	e1520003 	cmp	r2, r3
   2e9c0:	03a03001 	moveq	r3, #1
   2e9c4:	13a03000 	movne	r3, #0
   2e9c8:	e6ef3073 	uxtb	r3, r3
   2e9cc:	e3530000 	cmp	r3, #0
   2e9d0:	0a000001 	beq	2e9dc <AutoDriver::IsConnected()+0x48>
   2e9d4:	e3a03001 	mov	r3, #1
   2e9d8:	ea000000 	b	2e9e0 <AutoDriver::IsConnected()+0x4c>
   2e9dc:	e3a03000 	mov	r3, #0
   2e9e0:	e1a00003 	mov	r0, r3
   2e9e4:	e24bd004 	sub	sp, fp, #4
   2e9e8:	e8bd8800 	pop	{fp, pc}
   2e9ec:	00002e88 	.word	0x00002e88

0002e9f0 <L6470::~L6470()>:
   2e9f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2e9f4:	e28db000 	add	fp, sp, #0
   2e9f8:	e24dd00c 	sub	sp, sp, #12
   2e9fc:	e50b0008 	str	r0, [fp, #-8]
   2ea00:	e59f2018 	ldr	r2, [pc, #24]	; 2ea20 <L6470::~L6470()+0x30>
   2ea04:	e51b3008 	ldr	r3, [fp, #-8]
   2ea08:	e5832000 	str	r2, [r3]
   2ea0c:	e51b3008 	ldr	r3, [fp, #-8]
   2ea10:	e1a00003 	mov	r0, r3
   2ea14:	e28bd000 	add	sp, fp, #0
   2ea18:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2ea1c:	e12fff1e 	bx	lr
   2ea20:	00047d80 	.word	0x00047d80

0002ea24 <L6470::~L6470()>:
   2ea24:	e92d4800 	push	{fp, lr}
   2ea28:	e28db004 	add	fp, sp, #4
   2ea2c:	e24dd008 	sub	sp, sp, #8
   2ea30:	e50b0008 	str	r0, [fp, #-8]
   2ea34:	e51b0008 	ldr	r0, [fp, #-8]
   2ea38:	ebffffec 	bl	2e9f0 <L6470::~L6470()>
   2ea3c:	e51b0008 	ldr	r0, [fp, #-8]
   2ea40:	ebff8a30 	bl	11308 <operator delete(void*)@plt>
   2ea44:	e51b3008 	ldr	r3, [fp, #-8]
   2ea48:	e1a00003 	mov	r0, r3
   2ea4c:	e24bd004 	sub	sp, fp, #4
   2ea50:	e8bd8800 	pop	{fp, pc}

0002ea54 <L6470::setMicroSteps(unsigned int)>:
   2ea54:	e92d4800 	push	{fp, lr}
   2ea58:	e28db004 	add	fp, sp, #4
   2ea5c:	e24dd010 	sub	sp, sp, #16
   2ea60:	e50b0010 	str	r0, [fp, #-16]
   2ea64:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2ea68:	e51b0010 	ldr	r0, [fp, #-16]
   2ea6c:	eb0002a0 	bl	2f4f4 <L6470::hardHiZ()>
   2ea70:	e3a03000 	mov	r3, #0
   2ea74:	e50b3008 	str	r3, [fp, #-8]
   2ea78:	e3a03000 	mov	r3, #0
   2ea7c:	e50b3008 	str	r3, [fp, #-8]
   2ea80:	e51b3008 	ldr	r3, [fp, #-8]
   2ea84:	e3530007 	cmp	r3, #7
   2ea88:	8a00000a 	bhi	2eab8 <L6470::setMicroSteps(unsigned int)+0x64>
   2ea8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2ea90:	e3530001 	cmp	r3, #1
   2ea94:	0a000006 	beq	2eab4 <L6470::setMicroSteps(unsigned int)+0x60>
   2ea98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2ea9c:	e1a030a3 	lsr	r3, r3, #1
   2eaa0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2eaa4:	e51b3008 	ldr	r3, [fp, #-8]
   2eaa8:	e2833001 	add	r3, r3, #1
   2eaac:	e50b3008 	str	r3, [fp, #-8]
   2eab0:	eafffff2 	b	2ea80 <L6470::setMicroSteps(unsigned int)+0x2c>
   2eab4:	e1a00000 	nop			; (mov r0, r0)
   2eab8:	e51b3008 	ldr	r3, [fp, #-8]
   2eabc:	e3833010 	orr	r3, r3, #16
   2eac0:	e1a02003 	mov	r2, r3
   2eac4:	e3a01016 	mov	r1, #22
   2eac8:	e51b0010 	ldr	r0, [fp, #-16]
   2eacc:	eb00007a 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2ead0:	e1a00000 	nop			; (mov r0, r0)
   2ead4:	e24bd004 	sub	sp, fp, #4
   2ead8:	e8bd8800 	pop	{fp, pc}

0002eadc <AutoDriver::Print()>:
   2eadc:	e92d4870 	push	{r4, r5, r6, fp, lr}
   2eae0:	ed2d8b06 	vpush	{d8-d10}
   2eae4:	e28db028 	add	fp, sp, #40	; 0x28
   2eae8:	e24dd024 	sub	sp, sp, #36	; 0x24
   2eaec:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   2eaf0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2eaf4:	e5933004 	ldr	r3, [r3, #4]
   2eaf8:	e1a01003 	mov	r1, r3
   2eafc:	e59f017c 	ldr	r0, [pc, #380]	; 2ec80 <AutoDriver::Print()+0x1a4>
   2eb00:	ebff89bb 	bl	111f4 <printf@plt>
   2eb04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2eb08:	e5d3300b 	ldrb	r3, [r3, #11]
   2eb0c:	e1a01003 	mov	r1, r3
   2eb10:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2eb14:	e5d33008 	ldrb	r3, [r3, #8]
   2eb18:	e1a00003 	mov	r0, r3
   2eb1c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2eb20:	e5d33009 	ldrb	r3, [r3, #9]
   2eb24:	e1a0c003 	mov	ip, r3
   2eb28:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2eb2c:	e5d3300a 	ldrb	r3, [r3, #10]
   2eb30:	e1a02003 	mov	r2, r3
   2eb34:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2eb38:	e5d3300a 	ldrb	r3, [r3, #10]
   2eb3c:	e35300ff 	cmp	r3, #255	; 0xff
   2eb40:	1a000001 	bne	2eb4c <AutoDriver::Print()+0x70>
   2eb44:	e59f3138 	ldr	r3, [pc, #312]	; 2ec84 <AutoDriver::Print()+0x1a8>
   2eb48:	ea000000 	b	2eb50 <AutoDriver::Print()+0x74>
   2eb4c:	e59f3134 	ldr	r3, [pc, #308]	; 2ec88 <AutoDriver::Print()+0x1ac>
   2eb50:	e58d3004 	str	r3, [sp, #4]
   2eb54:	e58d2000 	str	r2, [sp]
   2eb58:	e1a0300c 	mov	r3, ip
   2eb5c:	e1a02000 	mov	r2, r0
   2eb60:	e59f0124 	ldr	r0, [pc, #292]	; 2ec8c <AutoDriver::Print()+0x1b0>
   2eb64:	ebff89a2 	bl	111f4 <printf@plt>
   2eb68:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2eb6c:	e1a00003 	mov	r0, r3
   2eb70:	ebfffc11 	bl	2dbbc <L6470::getMinSpeed()>
   2eb74:	eef07a40 	vmov.f32	s15, s0
   2eb78:	eeb7aae7 	vcvt.f64.f32	d10, s15
   2eb7c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2eb80:	e1a00003 	mov	r0, r3
   2eb84:	ebfffbe4 	bl	2db1c <L6470::getMaxSpeed()>
   2eb88:	eef07a40 	vmov.f32	s15, s0
   2eb8c:	eeb78ae7 	vcvt.f64.f32	d8, s15
   2eb90:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2eb94:	e1a00003 	mov	r0, r3
   2eb98:	ebfffc45 	bl	2dcb4 <L6470::getAcc()>
   2eb9c:	eef07a40 	vmov.f32	s15, s0
   2eba0:	eeb79ae7 	vcvt.f64.f32	d9, s15
   2eba4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2eba8:	e1a00003 	mov	r0, r3
   2ebac:	ebfffc5f 	bl	2dd30 <L6470::getDec()>
   2ebb0:	eef07a40 	vmov.f32	s15, s0
   2ebb4:	eeb77ae7 	vcvt.f64.f32	d7, s15
   2ebb8:	ed8d7b04 	vstr	d7, [sp, #16]
   2ebbc:	ed8d9b02 	vstr	d9, [sp, #8]
   2ebc0:	ed8d8b00 	vstr	d8, [sp]
   2ebc4:	ec532b1a 	vmov	r2, r3, d10
   2ebc8:	e59f00c0 	ldr	r0, [pc, #192]	; 2ec90 <AutoDriver::Print()+0x1b4>
   2ebcc:	ebff8988 	bl	111f4 <printf@plt>
   2ebd0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2ebd4:	e1a00003 	mov	r0, r3
   2ebd8:	ebfffd7f 	bl	2e1dc <L6470::getAccKVAL()>
   2ebdc:	e1a03000 	mov	r3, r0
   2ebe0:	e1a04003 	mov	r4, r3
   2ebe4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2ebe8:	e1a00003 	mov	r0, r3
   2ebec:	ebfffd94 	bl	2e244 <L6470::getDecKVAL()>
   2ebf0:	e1a03000 	mov	r3, r0
   2ebf4:	e1a05003 	mov	r5, r3
   2ebf8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2ebfc:	e1a00003 	mov	r0, r3
   2ec00:	ebfffda9 	bl	2e2ac <L6470::getRunKVAL()>
   2ec04:	e1a03000 	mov	r3, r0
   2ec08:	e1a06003 	mov	r6, r3
   2ec0c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2ec10:	e1a00003 	mov	r0, r3
   2ec14:	ebfffdbe 	bl	2e314 <L6470::getHoldKVAL()>
   2ec18:	e1a03000 	mov	r3, r0
   2ec1c:	e58d3000 	str	r3, [sp]
   2ec20:	e1a03006 	mov	r3, r6
   2ec24:	e1a02005 	mov	r2, r5
   2ec28:	e1a01004 	mov	r1, r4
   2ec2c:	e59f0060 	ldr	r0, [pc, #96]	; 2ec94 <AutoDriver::Print()+0x1b8>
   2ec30:	ebff896f 	bl	111f4 <printf@plt>
   2ec34:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2ec38:	e1a00003 	mov	r0, r3
   2ec3c:	ebfffb98 	bl	2daa4 <L6470::getStepMode()>
   2ec40:	e1a03000 	mov	r3, r0
   2ec44:	e1a02003 	mov	r2, r3
   2ec48:	e3a03001 	mov	r3, #1
   2ec4c:	e1a04213 	lsl	r4, r3, r2
   2ec50:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2ec54:	e1a00003 	mov	r0, r3
   2ec58:	ebfffd20 	bl	2e0e0 <L6470::getSwitchMode()>
   2ec5c:	e1a03000 	mov	r3, r0
   2ec60:	e1a02003 	mov	r2, r3
   2ec64:	e1a01004 	mov	r1, r4
   2ec68:	e59f0028 	ldr	r0, [pc, #40]	; 2ec98 <AutoDriver::Print()+0x1bc>
   2ec6c:	ebff8960 	bl	111f4 <printf@plt>
   2ec70:	e1a00000 	nop			; (mov r0, r0)
   2ec74:	e24bd028 	sub	sp, fp, #40	; 0x28
   2ec78:	ecbd8b06 	vpop	{d8-d10}
   2ec7c:	e8bd8870 	pop	{r4, r5, r6, fp, pc}
   2ec80:	00047d90 	.word	0x00047d90
   2ec84:	00047dac 	.word	0x00047dac
   2ec88:	00047db0 	.word	0x00047db0
   2ec8c:	00047db8 	.word	0x00047db8
   2ec90:	00047df4 	.word	0x00047df4
   2ec94:	00047e2c 	.word	0x00047e2c
   2ec98:	00047e60 	.word	0x00047e60

0002ec9c <L6470::Dump()>:
   2ec9c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2eca0:	e28db000 	add	fp, sp, #0
   2eca4:	e24dd00c 	sub	sp, sp, #12
   2eca8:	e50b0008 	str	r0, [fp, #-8]
   2ecac:	e1a00000 	nop			; (mov r0, r0)
   2ecb0:	e28bd000 	add	sp, fp, #0
   2ecb4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2ecb8:	e12fff1e 	bx	lr

0002ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>:
   2ecbc:	e92d4800 	push	{fp, lr}
   2ecc0:	e28db004 	add	fp, sp, #4
   2ecc4:	e24dd010 	sub	sp, sp, #16
   2ecc8:	e50b0008 	str	r0, [fp, #-8]
   2eccc:	e50b100c 	str	r1, [fp, #-12]
   2ecd0:	e50b2010 	str	r2, [fp, #-16]
   2ecd4:	e51b3008 	ldr	r3, [fp, #-8]
   2ecd8:	e5933000 	ldr	r3, [r3]
   2ecdc:	e283300c 	add	r3, r3, #12
   2ece0:	e5933000 	ldr	r3, [r3]
   2ece4:	e51b200c 	ldr	r2, [fp, #-12]
   2ece8:	e6ef2072 	uxtb	r2, r2
   2ecec:	e1a01002 	mov	r1, r2
   2ecf0:	e51b0008 	ldr	r0, [fp, #-8]
   2ecf4:	e12fff33 	blx	r3
   2ecf8:	e51b300c 	ldr	r3, [fp, #-12]
   2ecfc:	e6ef3073 	uxtb	r3, r3
   2ed00:	e51b2010 	ldr	r2, [fp, #-16]
   2ed04:	e1a01003 	mov	r1, r3
   2ed08:	e51b0008 	ldr	r0, [fp, #-8]
   2ed0c:	eb000373 	bl	2fae0 <L6470::paramHandler(unsigned char, unsigned long)>
   2ed10:	e1a00000 	nop			; (mov r0, r0)
   2ed14:	e24bd004 	sub	sp, fp, #4
   2ed18:	e8bd8800 	pop	{fp, pc}

0002ed1c <L6470::getParam(TL6470ParamRegisters)>:
   2ed1c:	e92d4800 	push	{fp, lr}
   2ed20:	e28db004 	add	fp, sp, #4
   2ed24:	e24dd008 	sub	sp, sp, #8
   2ed28:	e50b0008 	str	r0, [fp, #-8]
   2ed2c:	e50b100c 	str	r1, [fp, #-12]
   2ed30:	e51b3008 	ldr	r3, [fp, #-8]
   2ed34:	e5933000 	ldr	r3, [r3]
   2ed38:	e283300c 	add	r3, r3, #12
   2ed3c:	e5933000 	ldr	r3, [r3]
   2ed40:	e51b200c 	ldr	r2, [fp, #-12]
   2ed44:	e6af2072 	sxtb	r2, r2
   2ed48:	e3822020 	orr	r2, r2, #32
   2ed4c:	e6af2072 	sxtb	r2, r2
   2ed50:	e6ef2072 	uxtb	r2, r2
   2ed54:	e1a01002 	mov	r1, r2
   2ed58:	e51b0008 	ldr	r0, [fp, #-8]
   2ed5c:	e12fff33 	blx	r3
   2ed60:	e51b300c 	ldr	r3, [fp, #-12]
   2ed64:	e6ef3073 	uxtb	r3, r3
   2ed68:	e3a02000 	mov	r2, #0
   2ed6c:	e1a01003 	mov	r1, r3
   2ed70:	e51b0008 	ldr	r0, [fp, #-8]
   2ed74:	eb000359 	bl	2fae0 <L6470::paramHandler(unsigned char, unsigned long)>
   2ed78:	e1a03000 	mov	r3, r0
   2ed7c:	e1a00003 	mov	r0, r3
   2ed80:	e24bd004 	sub	sp, fp, #4
   2ed84:	e8bd8800 	pop	{fp, pc}

0002ed88 <L6470::getPos()>:
   2ed88:	e92d4800 	push	{fp, lr}
   2ed8c:	e28db004 	add	fp, sp, #4
   2ed90:	e24dd010 	sub	sp, sp, #16
   2ed94:	e50b0010 	str	r0, [fp, #-16]
   2ed98:	e3a01001 	mov	r1, #1
   2ed9c:	e51b0010 	ldr	r0, [fp, #-16]
   2eda0:	ebffffdd 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2eda4:	e50b0008 	str	r0, [fp, #-8]
   2eda8:	e51b3008 	ldr	r3, [fp, #-8]
   2edac:	e2033602 	and	r3, r3, #2097152	; 0x200000
   2edb0:	e3530000 	cmp	r3, #0
   2edb4:	0a000003 	beq	2edc8 <L6470::getPos()+0x40>
   2edb8:	e51b3008 	ldr	r3, [fp, #-8]
   2edbc:	e1e03503 	mvn	r3, r3, lsl #10
   2edc0:	e1e03523 	mvn	r3, r3, lsr #10
   2edc4:	e50b3008 	str	r3, [fp, #-8]
   2edc8:	e51b3008 	ldr	r3, [fp, #-8]
   2edcc:	e1a00003 	mov	r0, r3
   2edd0:	e24bd004 	sub	sp, fp, #4
   2edd4:	e8bd8800 	pop	{fp, pc}

0002edd8 <L6470::getMark()>:
   2edd8:	e92d4800 	push	{fp, lr}
   2eddc:	e28db004 	add	fp, sp, #4
   2ede0:	e24dd010 	sub	sp, sp, #16
   2ede4:	e50b0010 	str	r0, [fp, #-16]
   2ede8:	e3a01003 	mov	r1, #3
   2edec:	e51b0010 	ldr	r0, [fp, #-16]
   2edf0:	ebffffc9 	bl	2ed1c <L6470::getParam(TL6470ParamRegisters)>
   2edf4:	e50b0008 	str	r0, [fp, #-8]
   2edf8:	e51b3008 	ldr	r3, [fp, #-8]
   2edfc:	e2033602 	and	r3, r3, #2097152	; 0x200000
   2ee00:	e3530000 	cmp	r3, #0
   2ee04:	0a000003 	beq	2ee18 <L6470::getMark()+0x40>
   2ee08:	e51b3008 	ldr	r3, [fp, #-8]
   2ee0c:	e1e03503 	mvn	r3, r3, lsl #10
   2ee10:	e1e03523 	mvn	r3, r3, lsr #10
   2ee14:	e50b3008 	str	r3, [fp, #-8]
   2ee18:	e51b3008 	ldr	r3, [fp, #-8]
   2ee1c:	e1a00003 	mov	r0, r3
   2ee20:	e24bd004 	sub	sp, fp, #4
   2ee24:	e8bd8800 	pop	{fp, pc}

0002ee28 <L6470::run(TL6470Direction, float)>:
   2ee28:	e92d4800 	push	{fp, lr}
   2ee2c:	e28db004 	add	fp, sp, #4
   2ee30:	e24dd020 	sub	sp, sp, #32
   2ee34:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2ee38:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   2ee3c:	ed0b0a08 	vstr	s0, [fp, #-32]	; 0xffffffe0
   2ee40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ee44:	e5933000 	ldr	r3, [r3]
   2ee48:	e283300c 	add	r3, r3, #12
   2ee4c:	e5933000 	ldr	r3, [r3]
   2ee50:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2ee54:	e6af2072 	sxtb	r2, r2
   2ee58:	e3822050 	orr	r2, r2, #80	; 0x50
   2ee5c:	e6af2072 	sxtb	r2, r2
   2ee60:	e6ef2072 	uxtb	r2, r2
   2ee64:	e1a01002 	mov	r1, r2
   2ee68:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2ee6c:	e12fff33 	blx	r3
   2ee70:	ed1b0a08 	vldr	s0, [fp, #-32]	; 0xffffffe0
   2ee74:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2ee78:	eb0002ef 	bl	2fa3c <L6470::spdCalc(float)>
   2ee7c:	e1a03000 	mov	r3, r0
   2ee80:	e50b3010 	str	r3, [fp, #-16]
   2ee84:	e51b3010 	ldr	r3, [fp, #-16]
   2ee88:	e3530601 	cmp	r3, #1048576	; 0x100000
   2ee8c:	3a000001 	bcc	2ee98 <L6470::run(TL6470Direction, float)+0x70>
   2ee90:	e59f306c 	ldr	r3, [pc, #108]	; 2ef04 <L6470::run(TL6470Direction, float)+0xdc>
   2ee94:	e50b3010 	str	r3, [fp, #-16]
   2ee98:	e24b3010 	sub	r3, fp, #16
   2ee9c:	e50b300c 	str	r3, [fp, #-12]
   2eea0:	e3a03002 	mov	r3, #2
   2eea4:	e54b3005 	strb	r3, [fp, #-5]
   2eea8:	e15b30d5 	ldrsb	r3, [fp, #-5]
   2eeac:	e3530000 	cmp	r3, #0
   2eeb0:	ba000010 	blt	2eef8 <L6470::run(TL6470Direction, float)+0xd0>
   2eeb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2eeb8:	e5933000 	ldr	r3, [r3]
   2eebc:	e283300c 	add	r3, r3, #12
   2eec0:	e5933000 	ldr	r3, [r3]
   2eec4:	e15b20d5 	ldrsb	r2, [fp, #-5]
   2eec8:	e51b100c 	ldr	r1, [fp, #-12]
   2eecc:	e0812002 	add	r2, r1, r2
   2eed0:	e5d22000 	ldrb	r2, [r2]
   2eed4:	e1a01002 	mov	r1, r2
   2eed8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2eedc:	e12fff33 	blx	r3
   2eee0:	e15b30d5 	ldrsb	r3, [fp, #-5]
   2eee4:	e6ef3073 	uxtb	r3, r3
   2eee8:	e2433001 	sub	r3, r3, #1
   2eeec:	e6ef3073 	uxtb	r3, r3
   2eef0:	e54b3005 	strb	r3, [fp, #-5]
   2eef4:	eaffffeb 	b	2eea8 <L6470::run(TL6470Direction, float)+0x80>
   2eef8:	e1a00000 	nop			; (mov r0, r0)
   2eefc:	e24bd004 	sub	sp, fp, #4
   2ef00:	e8bd8800 	pop	{fp, pc}
   2ef04:	000fffff 	.word	0x000fffff

0002ef08 <L6470::stepClock(TL6470Direction)>:
   2ef08:	e92d4800 	push	{fp, lr}
   2ef0c:	e28db004 	add	fp, sp, #4
   2ef10:	e24dd008 	sub	sp, sp, #8
   2ef14:	e50b0008 	str	r0, [fp, #-8]
   2ef18:	e50b100c 	str	r1, [fp, #-12]
   2ef1c:	e51b3008 	ldr	r3, [fp, #-8]
   2ef20:	e5933000 	ldr	r3, [r3]
   2ef24:	e283300c 	add	r3, r3, #12
   2ef28:	e5933000 	ldr	r3, [r3]
   2ef2c:	e51b200c 	ldr	r2, [fp, #-12]
   2ef30:	e6af2072 	sxtb	r2, r2
   2ef34:	e3822058 	orr	r2, r2, #88	; 0x58
   2ef38:	e6af2072 	sxtb	r2, r2
   2ef3c:	e6ef2072 	uxtb	r2, r2
   2ef40:	e1a01002 	mov	r1, r2
   2ef44:	e51b0008 	ldr	r0, [fp, #-8]
   2ef48:	e12fff33 	blx	r3
   2ef4c:	e1a00000 	nop			; (mov r0, r0)
   2ef50:	e24bd004 	sub	sp, fp, #4
   2ef54:	e8bd8800 	pop	{fp, pc}

0002ef58 <L6470::move(TL6470Direction, unsigned long)>:
   2ef58:	e92d4800 	push	{fp, lr}
   2ef5c:	e28db004 	add	fp, sp, #4
   2ef60:	e24dd018 	sub	sp, sp, #24
   2ef64:	e50b0010 	str	r0, [fp, #-16]
   2ef68:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2ef6c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   2ef70:	e51b3010 	ldr	r3, [fp, #-16]
   2ef74:	e5933000 	ldr	r3, [r3]
   2ef78:	e283300c 	add	r3, r3, #12
   2ef7c:	e5933000 	ldr	r3, [r3]
   2ef80:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2ef84:	e6af2072 	sxtb	r2, r2
   2ef88:	e3822040 	orr	r2, r2, #64	; 0x40
   2ef8c:	e6af2072 	sxtb	r2, r2
   2ef90:	e6ef2072 	uxtb	r2, r2
   2ef94:	e1a01002 	mov	r1, r2
   2ef98:	e51b0010 	ldr	r0, [fp, #-16]
   2ef9c:	e12fff33 	blx	r3
   2efa0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2efa4:	e3530501 	cmp	r3, #4194304	; 0x400000
   2efa8:	3a000001 	bcc	2efb4 <L6470::move(TL6470Direction, unsigned long)+0x5c>
   2efac:	e59f306c 	ldr	r3, [pc, #108]	; 2f020 <L6470::move(TL6470Direction, unsigned long)+0xc8>
   2efb0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   2efb4:	e24b3018 	sub	r3, fp, #24
   2efb8:	e50b300c 	str	r3, [fp, #-12]
   2efbc:	e3a03002 	mov	r3, #2
   2efc0:	e54b3005 	strb	r3, [fp, #-5]
   2efc4:	e15b30d5 	ldrsb	r3, [fp, #-5]
   2efc8:	e3530000 	cmp	r3, #0
   2efcc:	ba000010 	blt	2f014 <L6470::move(TL6470Direction, unsigned long)+0xbc>
   2efd0:	e51b3010 	ldr	r3, [fp, #-16]
   2efd4:	e5933000 	ldr	r3, [r3]
   2efd8:	e283300c 	add	r3, r3, #12
   2efdc:	e5933000 	ldr	r3, [r3]
   2efe0:	e15b20d5 	ldrsb	r2, [fp, #-5]
   2efe4:	e51b100c 	ldr	r1, [fp, #-12]
   2efe8:	e0812002 	add	r2, r1, r2
   2efec:	e5d22000 	ldrb	r2, [r2]
   2eff0:	e1a01002 	mov	r1, r2
   2eff4:	e51b0010 	ldr	r0, [fp, #-16]
   2eff8:	e12fff33 	blx	r3
   2effc:	e15b30d5 	ldrsb	r3, [fp, #-5]
   2f000:	e6ef3073 	uxtb	r3, r3
   2f004:	e2433001 	sub	r3, r3, #1
   2f008:	e6ef3073 	uxtb	r3, r3
   2f00c:	e54b3005 	strb	r3, [fp, #-5]
   2f010:	eaffffeb 	b	2efc4 <L6470::move(TL6470Direction, unsigned long)+0x6c>
   2f014:	e1a00000 	nop			; (mov r0, r0)
   2f018:	e24bd004 	sub	sp, fp, #4
   2f01c:	e8bd8800 	pop	{fp, pc}
   2f020:	003fffff 	.word	0x003fffff

0002f024 <L6470::goTo(long)>:
   2f024:	e92d4800 	push	{fp, lr}
   2f028:	e28db004 	add	fp, sp, #4
   2f02c:	e24dd010 	sub	sp, sp, #16
   2f030:	e50b0010 	str	r0, [fp, #-16]
   2f034:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2f038:	e51b3010 	ldr	r3, [fp, #-16]
   2f03c:	e5933000 	ldr	r3, [r3]
   2f040:	e283300c 	add	r3, r3, #12
   2f044:	e5933000 	ldr	r3, [r3]
   2f048:	e3a01060 	mov	r1, #96	; 0x60
   2f04c:	e51b0010 	ldr	r0, [fp, #-16]
   2f050:	e12fff33 	blx	r3
   2f054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2f058:	e3530501 	cmp	r3, #4194304	; 0x400000
   2f05c:	ba000001 	blt	2f068 <L6470::goTo(long)+0x44>
   2f060:	e59f306c 	ldr	r3, [pc, #108]	; 2f0d4 <L6470::goTo(long)+0xb0>
   2f064:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2f068:	e24b3014 	sub	r3, fp, #20
   2f06c:	e50b300c 	str	r3, [fp, #-12]
   2f070:	e3a03002 	mov	r3, #2
   2f074:	e54b3005 	strb	r3, [fp, #-5]
   2f078:	e15b30d5 	ldrsb	r3, [fp, #-5]
   2f07c:	e3530000 	cmp	r3, #0
   2f080:	ba000010 	blt	2f0c8 <L6470::goTo(long)+0xa4>
   2f084:	e51b3010 	ldr	r3, [fp, #-16]
   2f088:	e5933000 	ldr	r3, [r3]
   2f08c:	e283300c 	add	r3, r3, #12
   2f090:	e5933000 	ldr	r3, [r3]
   2f094:	e15b20d5 	ldrsb	r2, [fp, #-5]
   2f098:	e51b100c 	ldr	r1, [fp, #-12]
   2f09c:	e0812002 	add	r2, r1, r2
   2f0a0:	e5d22000 	ldrb	r2, [r2]
   2f0a4:	e1a01002 	mov	r1, r2
   2f0a8:	e51b0010 	ldr	r0, [fp, #-16]
   2f0ac:	e12fff33 	blx	r3
   2f0b0:	e15b30d5 	ldrsb	r3, [fp, #-5]
   2f0b4:	e6ef3073 	uxtb	r3, r3
   2f0b8:	e2433001 	sub	r3, r3, #1
   2f0bc:	e6ef3073 	uxtb	r3, r3
   2f0c0:	e54b3005 	strb	r3, [fp, #-5]
   2f0c4:	eaffffeb 	b	2f078 <L6470::goTo(long)+0x54>
   2f0c8:	e1a00000 	nop			; (mov r0, r0)
   2f0cc:	e24bd004 	sub	sp, fp, #4
   2f0d0:	e8bd8800 	pop	{fp, pc}
   2f0d4:	003fffff 	.word	0x003fffff

0002f0d8 <L6470::goToDir(TL6470Direction, long)>:
   2f0d8:	e92d4800 	push	{fp, lr}
   2f0dc:	e28db004 	add	fp, sp, #4
   2f0e0:	e24dd018 	sub	sp, sp, #24
   2f0e4:	e50b0010 	str	r0, [fp, #-16]
   2f0e8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   2f0ec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   2f0f0:	e51b3010 	ldr	r3, [fp, #-16]
   2f0f4:	e5933000 	ldr	r3, [r3]
   2f0f8:	e283300c 	add	r3, r3, #12
   2f0fc:	e5933000 	ldr	r3, [r3]
   2f100:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2f104:	e6af2072 	sxtb	r2, r2
   2f108:	e3822068 	orr	r2, r2, #104	; 0x68
   2f10c:	e6af2072 	sxtb	r2, r2
   2f110:	e6ef2072 	uxtb	r2, r2
   2f114:	e1a01002 	mov	r1, r2
   2f118:	e51b0010 	ldr	r0, [fp, #-16]
   2f11c:	e12fff33 	blx	r3
   2f120:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f124:	e3530501 	cmp	r3, #4194304	; 0x400000
   2f128:	ba000001 	blt	2f134 <L6470::goToDir(TL6470Direction, long)+0x5c>
   2f12c:	e59f306c 	ldr	r3, [pc, #108]	; 2f1a0 <L6470::goToDir(TL6470Direction, long)+0xc8>
   2f130:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   2f134:	e24b3018 	sub	r3, fp, #24
   2f138:	e50b300c 	str	r3, [fp, #-12]
   2f13c:	e3a03002 	mov	r3, #2
   2f140:	e54b3005 	strb	r3, [fp, #-5]
   2f144:	e15b30d5 	ldrsb	r3, [fp, #-5]
   2f148:	e3530000 	cmp	r3, #0
   2f14c:	ba000010 	blt	2f194 <L6470::goToDir(TL6470Direction, long)+0xbc>
   2f150:	e51b3010 	ldr	r3, [fp, #-16]
   2f154:	e5933000 	ldr	r3, [r3]
   2f158:	e283300c 	add	r3, r3, #12
   2f15c:	e5933000 	ldr	r3, [r3]
   2f160:	e15b20d5 	ldrsb	r2, [fp, #-5]
   2f164:	e51b100c 	ldr	r1, [fp, #-12]
   2f168:	e0812002 	add	r2, r1, r2
   2f16c:	e5d22000 	ldrb	r2, [r2]
   2f170:	e1a01002 	mov	r1, r2
   2f174:	e51b0010 	ldr	r0, [fp, #-16]
   2f178:	e12fff33 	blx	r3
   2f17c:	e15b30d5 	ldrsb	r3, [fp, #-5]
   2f180:	e6ef3073 	uxtb	r3, r3
   2f184:	e2433001 	sub	r3, r3, #1
   2f188:	e6ef3073 	uxtb	r3, r3
   2f18c:	e54b3005 	strb	r3, [fp, #-5]
   2f190:	eaffffeb 	b	2f144 <L6470::goToDir(TL6470Direction, long)+0x6c>
   2f194:	e1a00000 	nop			; (mov r0, r0)
   2f198:	e24bd004 	sub	sp, fp, #4
   2f19c:	e8bd8800 	pop	{fp, pc}
   2f1a0:	003fffff 	.word	0x003fffff

0002f1a4 <L6470::goUntil(TL6470Action, TL6470Direction, float)>:
   2f1a4:	e92d4800 	push	{fp, lr}
   2f1a8:	e28db004 	add	fp, sp, #4
   2f1ac:	e24dd020 	sub	sp, sp, #32
   2f1b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2f1b4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   2f1b8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   2f1bc:	ed0b0a09 	vstr	s0, [fp, #-36]	; 0xffffffdc
   2f1c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f1c4:	e5933000 	ldr	r3, [r3]
   2f1c8:	e283300c 	add	r3, r3, #12
   2f1cc:	e5932000 	ldr	r2, [r3]
   2f1d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2f1d4:	e6ef1073 	uxtb	r1, r3
   2f1d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2f1dc:	e6ef3073 	uxtb	r3, r3
   2f1e0:	e1813003 	orr	r3, r1, r3
   2f1e4:	e6ef3073 	uxtb	r3, r3
   2f1e8:	e1e03003 	mvn	r3, r3
   2f1ec:	e203307d 	and	r3, r3, #125	; 0x7d
   2f1f0:	e1e03003 	mvn	r3, r3
   2f1f4:	e6ef3073 	uxtb	r3, r3
   2f1f8:	e1a01003 	mov	r1, r3
   2f1fc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f200:	e12fff32 	blx	r2
   2f204:	ed1b0a09 	vldr	s0, [fp, #-36]	; 0xffffffdc
   2f208:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f20c:	eb00020a 	bl	2fa3c <L6470::spdCalc(float)>
   2f210:	e1a03000 	mov	r3, r0
   2f214:	e50b3010 	str	r3, [fp, #-16]
   2f218:	e51b3010 	ldr	r3, [fp, #-16]
   2f21c:	e3530501 	cmp	r3, #4194304	; 0x400000
   2f220:	3a000001 	bcc	2f22c <L6470::goUntil(TL6470Action, TL6470Direction, float)+0x88>
   2f224:	e59f306c 	ldr	r3, [pc, #108]	; 2f298 <L6470::goUntil(TL6470Action, TL6470Direction, float)+0xf4>
   2f228:	e50b3010 	str	r3, [fp, #-16]
   2f22c:	e24b3010 	sub	r3, fp, #16
   2f230:	e50b300c 	str	r3, [fp, #-12]
   2f234:	e3a03002 	mov	r3, #2
   2f238:	e54b3005 	strb	r3, [fp, #-5]
   2f23c:	e15b30d5 	ldrsb	r3, [fp, #-5]
   2f240:	e3530000 	cmp	r3, #0
   2f244:	ba000010 	blt	2f28c <L6470::goUntil(TL6470Action, TL6470Direction, float)+0xe8>
   2f248:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f24c:	e5933000 	ldr	r3, [r3]
   2f250:	e283300c 	add	r3, r3, #12
   2f254:	e5933000 	ldr	r3, [r3]
   2f258:	e15b20d5 	ldrsb	r2, [fp, #-5]
   2f25c:	e51b100c 	ldr	r1, [fp, #-12]
   2f260:	e0812002 	add	r2, r1, r2
   2f264:	e5d22000 	ldrb	r2, [r2]
   2f268:	e1a01002 	mov	r1, r2
   2f26c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f270:	e12fff33 	blx	r3
   2f274:	e15b30d5 	ldrsb	r3, [fp, #-5]
   2f278:	e6ef3073 	uxtb	r3, r3
   2f27c:	e2433001 	sub	r3, r3, #1
   2f280:	e6ef3073 	uxtb	r3, r3
   2f284:	e54b3005 	strb	r3, [fp, #-5]
   2f288:	eaffffeb 	b	2f23c <L6470::goUntil(TL6470Action, TL6470Direction, float)+0x98>
   2f28c:	e1a00000 	nop			; (mov r0, r0)
   2f290:	e24bd004 	sub	sp, fp, #4
   2f294:	e8bd8800 	pop	{fp, pc}
   2f298:	003fffff 	.word	0x003fffff

0002f29c <L6470::releaseSw(TL6470Action, TL6470Direction)>:
   2f29c:	e92d4800 	push	{fp, lr}
   2f2a0:	e28db004 	add	fp, sp, #4
   2f2a4:	e24dd010 	sub	sp, sp, #16
   2f2a8:	e50b0008 	str	r0, [fp, #-8]
   2f2ac:	e50b100c 	str	r1, [fp, #-12]
   2f2b0:	e50b2010 	str	r2, [fp, #-16]
   2f2b4:	e51b3008 	ldr	r3, [fp, #-8]
   2f2b8:	e5933000 	ldr	r3, [r3]
   2f2bc:	e283300c 	add	r3, r3, #12
   2f2c0:	e5932000 	ldr	r2, [r3]
   2f2c4:	e51b300c 	ldr	r3, [fp, #-12]
   2f2c8:	e6ef1073 	uxtb	r1, r3
   2f2cc:	e51b3010 	ldr	r3, [fp, #-16]
   2f2d0:	e6ef3073 	uxtb	r3, r3
   2f2d4:	e1813003 	orr	r3, r1, r3
   2f2d8:	e6ef3073 	uxtb	r3, r3
   2f2dc:	e1e03003 	mvn	r3, r3
   2f2e0:	e203306d 	and	r3, r3, #109	; 0x6d
   2f2e4:	e1e03003 	mvn	r3, r3
   2f2e8:	e6ef3073 	uxtb	r3, r3
   2f2ec:	e1a01003 	mov	r1, r3
   2f2f0:	e51b0008 	ldr	r0, [fp, #-8]
   2f2f4:	e12fff32 	blx	r2
   2f2f8:	e1a00000 	nop			; (mov r0, r0)
   2f2fc:	e24bd004 	sub	sp, fp, #4
   2f300:	e8bd8800 	pop	{fp, pc}

0002f304 <L6470::goHome()>:
   2f304:	e92d4800 	push	{fp, lr}
   2f308:	e28db004 	add	fp, sp, #4
   2f30c:	e24dd008 	sub	sp, sp, #8
   2f310:	e50b0008 	str	r0, [fp, #-8]
   2f314:	e51b3008 	ldr	r3, [fp, #-8]
   2f318:	e5933000 	ldr	r3, [r3]
   2f31c:	e283300c 	add	r3, r3, #12
   2f320:	e5933000 	ldr	r3, [r3]
   2f324:	e3a01070 	mov	r1, #112	; 0x70
   2f328:	e51b0008 	ldr	r0, [fp, #-8]
   2f32c:	e12fff33 	blx	r3
   2f330:	e1a00000 	nop			; (mov r0, r0)
   2f334:	e24bd004 	sub	sp, fp, #4
   2f338:	e8bd8800 	pop	{fp, pc}

0002f33c <L6470::goMark()>:
   2f33c:	e92d4800 	push	{fp, lr}
   2f340:	e28db004 	add	fp, sp, #4
   2f344:	e24dd008 	sub	sp, sp, #8
   2f348:	e50b0008 	str	r0, [fp, #-8]
   2f34c:	e51b3008 	ldr	r3, [fp, #-8]
   2f350:	e5933000 	ldr	r3, [r3]
   2f354:	e283300c 	add	r3, r3, #12
   2f358:	e5933000 	ldr	r3, [r3]
   2f35c:	e3a01078 	mov	r1, #120	; 0x78
   2f360:	e51b0008 	ldr	r0, [fp, #-8]
   2f364:	e12fff33 	blx	r3
   2f368:	e1a00000 	nop			; (mov r0, r0)
   2f36c:	e24bd004 	sub	sp, fp, #4
   2f370:	e8bd8800 	pop	{fp, pc}

0002f374 <L6470::setMark(long)>:
   2f374:	e92d4800 	push	{fp, lr}
   2f378:	e28db004 	add	fp, sp, #4
   2f37c:	e24dd008 	sub	sp, sp, #8
   2f380:	e50b0008 	str	r0, [fp, #-8]
   2f384:	e50b100c 	str	r1, [fp, #-12]
   2f388:	e51b300c 	ldr	r3, [fp, #-12]
   2f38c:	e1a02003 	mov	r2, r3
   2f390:	e3a01003 	mov	r1, #3
   2f394:	e51b0008 	ldr	r0, [fp, #-8]
   2f398:	ebfffe47 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2f39c:	e1a00000 	nop			; (mov r0, r0)
   2f3a0:	e24bd004 	sub	sp, fp, #4
   2f3a4:	e8bd8800 	pop	{fp, pc}

0002f3a8 <L6470::setPos(long)>:
   2f3a8:	e92d4800 	push	{fp, lr}
   2f3ac:	e28db004 	add	fp, sp, #4
   2f3b0:	e24dd008 	sub	sp, sp, #8
   2f3b4:	e50b0008 	str	r0, [fp, #-8]
   2f3b8:	e50b100c 	str	r1, [fp, #-12]
   2f3bc:	e51b300c 	ldr	r3, [fp, #-12]
   2f3c0:	e1a02003 	mov	r2, r3
   2f3c4:	e3a01001 	mov	r1, #1
   2f3c8:	e51b0008 	ldr	r0, [fp, #-8]
   2f3cc:	ebfffe3a 	bl	2ecbc <L6470::setParam(TL6470ParamRegisters, unsigned long)>
   2f3d0:	e1a00000 	nop			; (mov r0, r0)
   2f3d4:	e24bd004 	sub	sp, fp, #4
   2f3d8:	e8bd8800 	pop	{fp, pc}

0002f3dc <L6470::resetPos()>:
   2f3dc:	e92d4800 	push	{fp, lr}
   2f3e0:	e28db004 	add	fp, sp, #4
   2f3e4:	e24dd008 	sub	sp, sp, #8
   2f3e8:	e50b0008 	str	r0, [fp, #-8]
   2f3ec:	e51b3008 	ldr	r3, [fp, #-8]
   2f3f0:	e5933000 	ldr	r3, [r3]
   2f3f4:	e283300c 	add	r3, r3, #12
   2f3f8:	e5933000 	ldr	r3, [r3]
   2f3fc:	e3a010d8 	mov	r1, #216	; 0xd8
   2f400:	e51b0008 	ldr	r0, [fp, #-8]
   2f404:	e12fff33 	blx	r3
   2f408:	e1a00000 	nop			; (mov r0, r0)
   2f40c:	e24bd004 	sub	sp, fp, #4
   2f410:	e8bd8800 	pop	{fp, pc}

0002f414 <L6470::resetDev()>:
   2f414:	e92d4800 	push	{fp, lr}
   2f418:	e28db004 	add	fp, sp, #4
   2f41c:	e24dd008 	sub	sp, sp, #8
   2f420:	e50b0008 	str	r0, [fp, #-8]
   2f424:	e51b3008 	ldr	r3, [fp, #-8]
   2f428:	e5933000 	ldr	r3, [r3]
   2f42c:	e283300c 	add	r3, r3, #12
   2f430:	e5933000 	ldr	r3, [r3]
   2f434:	e3a010c0 	mov	r1, #192	; 0xc0
   2f438:	e51b0008 	ldr	r0, [fp, #-8]
   2f43c:	e12fff33 	blx	r3
   2f440:	e1a00000 	nop			; (mov r0, r0)
   2f444:	e24bd004 	sub	sp, fp, #4
   2f448:	e8bd8800 	pop	{fp, pc}

0002f44c <L6470::softStop()>:
   2f44c:	e92d4800 	push	{fp, lr}
   2f450:	e28db004 	add	fp, sp, #4
   2f454:	e24dd008 	sub	sp, sp, #8
   2f458:	e50b0008 	str	r0, [fp, #-8]
   2f45c:	e51b3008 	ldr	r3, [fp, #-8]
   2f460:	e5933000 	ldr	r3, [r3]
   2f464:	e283300c 	add	r3, r3, #12
   2f468:	e5933000 	ldr	r3, [r3]
   2f46c:	e3a010b0 	mov	r1, #176	; 0xb0
   2f470:	e51b0008 	ldr	r0, [fp, #-8]
   2f474:	e12fff33 	blx	r3
   2f478:	e1a00000 	nop			; (mov r0, r0)
   2f47c:	e24bd004 	sub	sp, fp, #4
   2f480:	e8bd8800 	pop	{fp, pc}

0002f484 <L6470::hardStop()>:
   2f484:	e92d4800 	push	{fp, lr}
   2f488:	e28db004 	add	fp, sp, #4
   2f48c:	e24dd008 	sub	sp, sp, #8
   2f490:	e50b0008 	str	r0, [fp, #-8]
   2f494:	e51b3008 	ldr	r3, [fp, #-8]
   2f498:	e5933000 	ldr	r3, [r3]
   2f49c:	e283300c 	add	r3, r3, #12
   2f4a0:	e5933000 	ldr	r3, [r3]
   2f4a4:	e3a010b8 	mov	r1, #184	; 0xb8
   2f4a8:	e51b0008 	ldr	r0, [fp, #-8]
   2f4ac:	e12fff33 	blx	r3
   2f4b0:	e1a00000 	nop			; (mov r0, r0)
   2f4b4:	e24bd004 	sub	sp, fp, #4
   2f4b8:	e8bd8800 	pop	{fp, pc}

0002f4bc <L6470::softHiZ()>:
   2f4bc:	e92d4800 	push	{fp, lr}
   2f4c0:	e28db004 	add	fp, sp, #4
   2f4c4:	e24dd008 	sub	sp, sp, #8
   2f4c8:	e50b0008 	str	r0, [fp, #-8]
   2f4cc:	e51b3008 	ldr	r3, [fp, #-8]
   2f4d0:	e5933000 	ldr	r3, [r3]
   2f4d4:	e283300c 	add	r3, r3, #12
   2f4d8:	e5933000 	ldr	r3, [r3]
   2f4dc:	e3a010a0 	mov	r1, #160	; 0xa0
   2f4e0:	e51b0008 	ldr	r0, [fp, #-8]
   2f4e4:	e12fff33 	blx	r3
   2f4e8:	e1a00000 	nop			; (mov r0, r0)
   2f4ec:	e24bd004 	sub	sp, fp, #4
   2f4f0:	e8bd8800 	pop	{fp, pc}

0002f4f4 <L6470::hardHiZ()>:
   2f4f4:	e92d4800 	push	{fp, lr}
   2f4f8:	e28db004 	add	fp, sp, #4
   2f4fc:	e24dd008 	sub	sp, sp, #8
   2f500:	e50b0008 	str	r0, [fp, #-8]
   2f504:	e51b3008 	ldr	r3, [fp, #-8]
   2f508:	e5933000 	ldr	r3, [r3]
   2f50c:	e283300c 	add	r3, r3, #12
   2f510:	e5933000 	ldr	r3, [r3]
   2f514:	e3a010a8 	mov	r1, #168	; 0xa8
   2f518:	e51b0008 	ldr	r0, [fp, #-8]
   2f51c:	e12fff33 	blx	r3
   2f520:	e1a00000 	nop			; (mov r0, r0)
   2f524:	e24bd004 	sub	sp, fp, #4
   2f528:	e8bd8800 	pop	{fp, pc}

0002f52c <L6470::getStatus()>:
   2f52c:	e92d4810 	push	{r4, fp, lr}
   2f530:	e28db008 	add	fp, sp, #8
   2f534:	e24dd014 	sub	sp, sp, #20
   2f538:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2f53c:	e3a03000 	mov	r3, #0
   2f540:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2f544:	e24b3014 	sub	r3, fp, #20
   2f548:	e50b3010 	str	r3, [fp, #-16]
   2f54c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f550:	e5933000 	ldr	r3, [r3]
   2f554:	e283300c 	add	r3, r3, #12
   2f558:	e5933000 	ldr	r3, [r3]
   2f55c:	e3a010d0 	mov	r1, #208	; 0xd0
   2f560:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f564:	e12fff33 	blx	r3
   2f568:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f56c:	e5933000 	ldr	r3, [r3]
   2f570:	e283300c 	add	r3, r3, #12
   2f574:	e5933000 	ldr	r3, [r3]
   2f578:	e51b2010 	ldr	r2, [fp, #-16]
   2f57c:	e2824001 	add	r4, r2, #1
   2f580:	e3a01000 	mov	r1, #0
   2f584:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f588:	e12fff33 	blx	r3
   2f58c:	e1a03000 	mov	r3, r0
   2f590:	e5c43000 	strb	r3, [r4]
   2f594:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2f598:	e5933000 	ldr	r3, [r3]
   2f59c:	e283300c 	add	r3, r3, #12
   2f5a0:	e5933000 	ldr	r3, [r3]
   2f5a4:	e3a01000 	mov	r1, #0
   2f5a8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2f5ac:	e12fff33 	blx	r3
   2f5b0:	e1a03000 	mov	r3, r0
   2f5b4:	e1a02003 	mov	r2, r3
   2f5b8:	e51b3010 	ldr	r3, [fp, #-16]
   2f5bc:	e5c32000 	strb	r2, [r3]
   2f5c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2f5c4:	e1a00003 	mov	r0, r3
   2f5c8:	e24bd008 	sub	sp, fp, #8
   2f5cc:	e8bd8810 	pop	{r4, fp, pc}

0002f5d0 <ceil(float)>:
   2f5d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2f5d4:	e28db000 	add	fp, sp, #0
   2f5d8:	e24dd014 	sub	sp, sp, #20
   2f5dc:	ed0b0a04 	vstr	s0, [fp, #-16]
   2f5e0:	ed5b7a04 	vldr	s15, [fp, #-16]
   2f5e4:	eefd7ae7 	vcvt.s32.f32	s15, s15
   2f5e8:	ee173a90 	vmov	r3, s15
   2f5ec:	e50b3008 	str	r3, [fp, #-8]
   2f5f0:	e51b3008 	ldr	r3, [fp, #-8]
   2f5f4:	ee073a90 	vmov	s15, r3
   2f5f8:	eef87ae7 	vcvt.f32.s32	s15, s15
   2f5fc:	ed1b7a04 	vldr	s14, [fp, #-16]
   2f600:	eeb47a67 	vcmp.f32	s14, s15
   2f604:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   2f608:	1a000001 	bne	2f614 <ceil(float)+0x44>
   2f60c:	e51b3008 	ldr	r3, [fp, #-8]
   2f610:	ea000001 	b	2f61c <ceil(float)+0x4c>
   2f614:	e51b3008 	ldr	r3, [fp, #-8]
   2f618:	e2833001 	add	r3, r3, #1
   2f61c:	e1a00003 	mov	r0, r3
   2f620:	e28bd000 	add	sp, fp, #0
   2f624:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2f628:	e12fff1e 	bx	lr

0002f62c <L6470::accCalc(float)>:
   2f62c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2f630:	e28db000 	add	fp, sp, #0
   2f634:	e24dd014 	sub	sp, sp, #20
   2f638:	e50b0010 	str	r0, [fp, #-16]
   2f63c:	ed0b0a05 	vstr	s0, [fp, #-20]	; 0xffffffec
   2f640:	ed5b7a05 	vldr	s15, [fp, #-20]	; 0xffffffec
   2f644:	ed9f7a0f 	vldr	s14, [pc, #60]	; 2f688 <L6470::accCalc(float)+0x5c>
   2f648:	ee677a87 	vmul.f32	s15, s15, s14
   2f64c:	ed4b7a02 	vstr	s15, [fp, #-8]
   2f650:	ed5b7a02 	vldr	s15, [fp, #-8]
   2f654:	eefd7ae7 	vcvt.s32.f32	s15, s15
   2f658:	ee173a90 	vmov	r3, s15
   2f65c:	e3530a01 	cmp	r3, #4096	; 0x1000
   2f660:	3a000001 	bcc	2f66c <L6470::accCalc(float)+0x40>
   2f664:	e59f3020 	ldr	r3, [pc, #32]	; 2f68c <L6470::accCalc(float)+0x60>
   2f668:	ea000002 	b	2f678 <L6470::accCalc(float)+0x4c>
   2f66c:	ed5b7a02 	vldr	s15, [fp, #-8]
   2f670:	eefd7ae7 	vcvt.s32.f32	s15, s15
   2f674:	ee173a90 	vmov	r3, s15
   2f678:	e1a00003 	mov	r0, r3
   2f67c:	e28bd000 	add	sp, fp, #0
   2f680:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2f684:	e12fff1e 	bx	lr
   2f688:	3e0cbc8c 	.word	0x3e0cbc8c
   2f68c:	00000fff 	.word	0x00000fff

0002f690 <L6470::accParse(unsigned long)>:
   2f690:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2f694:	e28db000 	add	fp, sp, #0
   2f698:	e24dd00c 	sub	sp, sp, #12
   2f69c:	e50b0008 	str	r0, [fp, #-8]
   2f6a0:	e50b100c 	str	r1, [fp, #-12]
   2f6a4:	e51b300c 	ldr	r3, [fp, #-12]
   2f6a8:	e1a03a03 	lsl	r3, r3, #20
   2f6ac:	e1a03a23 	lsr	r3, r3, #20
   2f6b0:	ee073a90 	vmov	s15, r3
   2f6b4:	eef87a67 	vcvt.f32.u32	s15, s15
   2f6b8:	ed9f7a05 	vldr	s14, [pc, #20]	; 2f6d4 <L6470::accParse(unsigned long)+0x44>
   2f6bc:	eec76a87 	vdiv.f32	s13, s15, s14
   2f6c0:	eef07a66 	vmov.f32	s15, s13
   2f6c4:	eeb00a67 	vmov.f32	s0, s15
   2f6c8:	e28bd000 	add	sp, fp, #0
   2f6cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2f6d0:	e12fff1e 	bx	lr
   2f6d4:	3e0cbc8c 	.word	0x3e0cbc8c

0002f6d8 <L6470::decCalc(float)>:
   2f6d8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2f6dc:	e28db000 	add	fp, sp, #0
   2f6e0:	e24dd014 	sub	sp, sp, #20
   2f6e4:	e50b0010 	str	r0, [fp, #-16]
   2f6e8:	ed0b0a05 	vstr	s0, [fp, #-20]	; 0xffffffec
   2f6ec:	ed5b7a05 	vldr	s15, [fp, #-20]	; 0xffffffec
   2f6f0:	ed9f7a0f 	vldr	s14, [pc, #60]	; 2f734 <L6470::decCalc(float)+0x5c>
   2f6f4:	ee677a87 	vmul.f32	s15, s15, s14
   2f6f8:	ed4b7a02 	vstr	s15, [fp, #-8]
   2f6fc:	ed5b7a02 	vldr	s15, [fp, #-8]
   2f700:	eefd7ae7 	vcvt.s32.f32	s15, s15
   2f704:	ee173a90 	vmov	r3, s15
   2f708:	e3530a01 	cmp	r3, #4096	; 0x1000
   2f70c:	3a000001 	bcc	2f718 <L6470::decCalc(float)+0x40>
   2f710:	e59f3020 	ldr	r3, [pc, #32]	; 2f738 <L6470::decCalc(float)+0x60>
   2f714:	ea000002 	b	2f724 <L6470::decCalc(float)+0x4c>
   2f718:	ed5b7a02 	vldr	s15, [fp, #-8]
   2f71c:	eefd7ae7 	vcvt.s32.f32	s15, s15
   2f720:	ee173a90 	vmov	r3, s15
   2f724:	e1a00003 	mov	r0, r3
   2f728:	e28bd000 	add	sp, fp, #0
   2f72c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2f730:	e12fff1e 	bx	lr
   2f734:	3e0cbc8c 	.word	0x3e0cbc8c
   2f738:	00000fff 	.word	0x00000fff

0002f73c <L6470::decParse(unsigned long)>:
   2f73c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2f740:	e28db000 	add	fp, sp, #0
   2f744:	e24dd00c 	sub	sp, sp, #12
   2f748:	e50b0008 	str	r0, [fp, #-8]
   2f74c:	e50b100c 	str	r1, [fp, #-12]
   2f750:	e51b300c 	ldr	r3, [fp, #-12]
   2f754:	e1a03a03 	lsl	r3, r3, #20
   2f758:	e1a03a23 	lsr	r3, r3, #20
   2f75c:	ee073a90 	vmov	s15, r3
   2f760:	eef87a67 	vcvt.f32.u32	s15, s15
   2f764:	ed9f7a05 	vldr	s14, [pc, #20]	; 2f780 <L6470::decParse(unsigned long)+0x44>
   2f768:	eec76a87 	vdiv.f32	s13, s15, s14
   2f76c:	eef07a66 	vmov.f32	s15, s13
   2f770:	eeb00a67 	vmov.f32	s0, s15
   2f774:	e28bd000 	add	sp, fp, #0
   2f778:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2f77c:	e12fff1e 	bx	lr
   2f780:	3e0cbc8c 	.word	0x3e0cbc8c

0002f784 <L6470::maxSpdCalc(float)>:
   2f784:	e92d4800 	push	{fp, lr}
   2f788:	e28db004 	add	fp, sp, #4
   2f78c:	e24dd010 	sub	sp, sp, #16
   2f790:	e50b0010 	str	r0, [fp, #-16]
   2f794:	ed0b0a05 	vstr	s0, [fp, #-20]	; 0xffffffec
   2f798:	ed5b7a05 	vldr	s15, [fp, #-20]	; 0xffffffec
   2f79c:	ed9f7a0c 	vldr	s14, [pc, #48]	; 2f7d4 <L6470::maxSpdCalc(float)+0x50>
   2f7a0:	ee677a87 	vmul.f32	s15, s15, s14
   2f7a4:	eeb00a67 	vmov.f32	s0, s15
   2f7a8:	ebffff88 	bl	2f5d0 <ceil(float)>
   2f7ac:	e50b0008 	str	r0, [fp, #-8]
   2f7b0:	e51b3008 	ldr	r3, [fp, #-8]
   2f7b4:	e3530b01 	cmp	r3, #1024	; 0x400
   2f7b8:	3a000001 	bcc	2f7c4 <L6470::maxSpdCalc(float)+0x40>
   2f7bc:	e59f3014 	ldr	r3, [pc, #20]	; 2f7d8 <L6470::maxSpdCalc(float)+0x54>
   2f7c0:	ea000000 	b	2f7c8 <L6470::maxSpdCalc(float)+0x44>
   2f7c4:	e51b3008 	ldr	r3, [fp, #-8]
   2f7c8:	e1a00003 	mov	r0, r3
   2f7cc:	e24bd004 	sub	sp, fp, #4
   2f7d0:	e8bd8800 	pop	{fp, pc}
   2f7d4:	3d8637bd 	.word	0x3d8637bd
   2f7d8:	000003ff 	.word	0x000003ff

0002f7dc <L6470::maxSpdParse(unsigned long)>:
   2f7dc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2f7e0:	e28db000 	add	fp, sp, #0
   2f7e4:	e24dd00c 	sub	sp, sp, #12
   2f7e8:	e50b0008 	str	r0, [fp, #-8]
   2f7ec:	e50b100c 	str	r1, [fp, #-12]
   2f7f0:	e51b300c 	ldr	r3, [fp, #-12]
   2f7f4:	e1a03b03 	lsl	r3, r3, #22
   2f7f8:	e1a03b23 	lsr	r3, r3, #22
   2f7fc:	ee073a90 	vmov	s15, r3
   2f800:	eef87a67 	vcvt.f32.u32	s15, s15
   2f804:	ed9f7a05 	vldr	s14, [pc, #20]	; 2f820 <L6470::maxSpdParse(unsigned long)+0x44>
   2f808:	eec76a87 	vdiv.f32	s13, s15, s14
   2f80c:	eef07a66 	vmov.f32	s15, s13
   2f810:	eeb00a67 	vmov.f32	s0, s15
   2f814:	e28bd000 	add	sp, fp, #0
   2f818:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2f81c:	e12fff1e 	bx	lr
   2f820:	3d8637bd 	.word	0x3d8637bd

0002f824 <L6470::minSpdCalc(float)>:
   2f824:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2f828:	e28db000 	add	fp, sp, #0
   2f82c:	e24dd014 	sub	sp, sp, #20
   2f830:	e50b0010 	str	r0, [fp, #-16]
   2f834:	ed0b0a05 	vstr	s0, [fp, #-20]	; 0xffffffec
   2f838:	ed1b7a05 	vldr	s14, [fp, #-20]	; 0xffffffec
   2f83c:	eddf6a0f 	vldr	s13, [pc, #60]	; 2f880 <L6470::minSpdCalc(float)+0x5c>
   2f840:	eec77a26 	vdiv.f32	s15, s14, s13
   2f844:	ed4b7a02 	vstr	s15, [fp, #-8]
   2f848:	ed5b7a02 	vldr	s15, [fp, #-8]
   2f84c:	eefd7ae7 	vcvt.s32.f32	s15, s15
   2f850:	ee173a90 	vmov	r3, s15
   2f854:	e3530a01 	cmp	r3, #4096	; 0x1000
   2f858:	3a000001 	bcc	2f864 <L6470::minSpdCalc(float)+0x40>
   2f85c:	e59f3020 	ldr	r3, [pc, #32]	; 2f884 <L6470::minSpdCalc(float)+0x60>
   2f860:	ea000002 	b	2f870 <L6470::minSpdCalc(float)+0x4c>
   2f864:	ed5b7a02 	vldr	s15, [fp, #-8]
   2f868:	eefd7ae7 	vcvt.s32.f32	s15, s15
   2f86c:	ee173a90 	vmov	r3, s15
   2f870:	e1a00003 	mov	r0, r3
   2f874:	e28bd000 	add	sp, fp, #0
   2f878:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2f87c:	e12fff1e 	bx	lr
   2f880:	3e73b646 	.word	0x3e73b646
   2f884:	00000fff 	.word	0x00000fff

0002f888 <L6470::minSpdParse(unsigned long)>:
   2f888:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2f88c:	e28db000 	add	fp, sp, #0
   2f890:	e24dd00c 	sub	sp, sp, #12
   2f894:	e50b0008 	str	r0, [fp, #-8]
   2f898:	e50b100c 	str	r1, [fp, #-12]
   2f89c:	e51b300c 	ldr	r3, [fp, #-12]
   2f8a0:	e1a03a03 	lsl	r3, r3, #20
   2f8a4:	e1a03a23 	lsr	r3, r3, #20
   2f8a8:	ee073a90 	vmov	s15, r3
   2f8ac:	eef87a67 	vcvt.f32.u32	s15, s15
   2f8b0:	ed9f7a04 	vldr	s14, [pc, #16]	; 2f8c8 <L6470::minSpdParse(unsigned long)+0x40>
   2f8b4:	ee677a87 	vmul.f32	s15, s15, s14
   2f8b8:	eeb00a67 	vmov.f32	s0, s15
   2f8bc:	e28bd000 	add	sp, fp, #0
   2f8c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2f8c4:	e12fff1e 	bx	lr
   2f8c8:	3e73b646 	.word	0x3e73b646

0002f8cc <L6470::FSCalc(float)>:
   2f8cc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2f8d0:	e28db000 	add	fp, sp, #0
   2f8d4:	e24dd014 	sub	sp, sp, #20
   2f8d8:	e50b0010 	str	r0, [fp, #-16]
   2f8dc:	ed0b0a05 	vstr	s0, [fp, #-20]	; 0xffffffec
   2f8e0:	ed5b7a05 	vldr	s15, [fp, #-20]	; 0xffffffec
   2f8e4:	ed9f7a11 	vldr	s14, [pc, #68]	; 2f930 <L6470::FSCalc(float)+0x64>
   2f8e8:	ee677a87 	vmul.f32	s15, s15, s14
   2f8ec:	ed9f7a10 	vldr	s14, [pc, #64]	; 2f934 <L6470::FSCalc(float)+0x68>
   2f8f0:	ee777ac7 	vsub.f32	s15, s15, s14
   2f8f4:	ed4b7a02 	vstr	s15, [fp, #-8]
   2f8f8:	ed5b7a02 	vldr	s15, [fp, #-8]
   2f8fc:	eefd7ae7 	vcvt.s32.f32	s15, s15
   2f900:	ee173a90 	vmov	r3, s15
   2f904:	e3530b01 	cmp	r3, #1024	; 0x400
   2f908:	3a000001 	bcc	2f914 <L6470::FSCalc(float)+0x48>
   2f90c:	e59f3024 	ldr	r3, [pc, #36]	; 2f938 <L6470::FSCalc(float)+0x6c>
   2f910:	ea000002 	b	2f920 <L6470::FSCalc(float)+0x54>
   2f914:	ed5b7a02 	vldr	s15, [fp, #-8]
   2f918:	eefd7ae7 	vcvt.s32.f32	s15, s15
   2f91c:	ee173a90 	vmov	r3, s15
   2f920:	e1a00003 	mov	r0, r3
   2f924:	e28bd000 	add	sp, fp, #0
   2f928:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2f92c:	e12fff1e 	bx	lr
   2f930:	3d8637bd 	.word	0x3d8637bd
   2f934:	3f000000 	.word	0x3f000000
   2f938:	000003ff 	.word	0x000003ff

0002f93c <L6470::FSParse(unsigned long)>:
   2f93c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2f940:	e28db000 	add	fp, sp, #0
   2f944:	e24dd00c 	sub	sp, sp, #12
   2f948:	e50b0008 	str	r0, [fp, #-8]
   2f94c:	e50b100c 	str	r1, [fp, #-12]
   2f950:	e51b300c 	ldr	r3, [fp, #-12]
   2f954:	e1a03b03 	lsl	r3, r3, #22
   2f958:	e1a03b23 	lsr	r3, r3, #22
   2f95c:	ee073a90 	vmov	s15, r3
   2f960:	eef87a67 	vcvt.f32.u32	s15, s15
   2f964:	ed9f7a07 	vldr	s14, [pc, #28]	; 2f988 <L6470::FSParse(unsigned long)+0x4c>
   2f968:	ee777a87 	vadd.f32	s15, s15, s14
   2f96c:	ed9f7a06 	vldr	s14, [pc, #24]	; 2f98c <L6470::FSParse(unsigned long)+0x50>
   2f970:	eec76a87 	vdiv.f32	s13, s15, s14
   2f974:	eef07a66 	vmov.f32	s15, s13
   2f978:	eeb00a67 	vmov.f32	s0, s15
   2f97c:	e28bd000 	add	sp, fp, #0
   2f980:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2f984:	e12fff1e 	bx	lr
   2f988:	3f000000 	.word	0x3f000000
   2f98c:	3d8637bd 	.word	0x3d8637bd

0002f990 <L6470::intSpdCalc(float)>:
   2f990:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2f994:	e28db000 	add	fp, sp, #0
   2f998:	e24dd014 	sub	sp, sp, #20
   2f99c:	e50b0010 	str	r0, [fp, #-16]
   2f9a0:	ed0b0a05 	vstr	s0, [fp, #-20]	; 0xffffffec
   2f9a4:	ed5b7a05 	vldr	s15, [fp, #-20]	; 0xffffffec
   2f9a8:	ed9f7a0f 	vldr	s14, [pc, #60]	; 2f9ec <L6470::intSpdCalc(float)+0x5c>
   2f9ac:	ee677a87 	vmul.f32	s15, s15, s14
   2f9b0:	ed4b7a02 	vstr	s15, [fp, #-8]
   2f9b4:	ed5b7a02 	vldr	s15, [fp, #-8]
   2f9b8:	eefd7ae7 	vcvt.s32.f32	s15, s15
   2f9bc:	ee173a90 	vmov	r3, s15
   2f9c0:	e3530901 	cmp	r3, #16384	; 0x4000
   2f9c4:	3a000001 	bcc	2f9d0 <L6470::intSpdCalc(float)+0x40>
   2f9c8:	e59f3020 	ldr	r3, [pc, #32]	; 2f9f0 <L6470::intSpdCalc(float)+0x60>
   2f9cc:	ea000002 	b	2f9dc <L6470::intSpdCalc(float)+0x4c>
   2f9d0:	ed5b7a02 	vldr	s15, [fp, #-8]
   2f9d4:	eefd7ae7 	vcvt.s32.f32	s15, s15
   2f9d8:	ee173a90 	vmov	r3, s15
   2f9dc:	e1a00003 	mov	r0, r3
   2f9e0:	e28bd000 	add	sp, fp, #0
   2f9e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2f9e8:	e12fff1e 	bx	lr
   2f9ec:	408637b5 	.word	0x408637b5
   2f9f0:	00003fff 	.word	0x00003fff

0002f9f4 <L6470::intSpdParse(unsigned long)>:
   2f9f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2f9f8:	e28db000 	add	fp, sp, #0
   2f9fc:	e24dd00c 	sub	sp, sp, #12
   2fa00:	e50b0008 	str	r0, [fp, #-8]
   2fa04:	e50b100c 	str	r1, [fp, #-12]
   2fa08:	e51b300c 	ldr	r3, [fp, #-12]
   2fa0c:	e1a03903 	lsl	r3, r3, #18
   2fa10:	e1a03923 	lsr	r3, r3, #18
   2fa14:	ee073a90 	vmov	s15, r3
   2fa18:	eef87a67 	vcvt.f32.u32	s15, s15
   2fa1c:	ed9f7a05 	vldr	s14, [pc, #20]	; 2fa38 <L6470::intSpdParse(unsigned long)+0x44>
   2fa20:	eec76a87 	vdiv.f32	s13, s15, s14
   2fa24:	eef07a66 	vmov.f32	s15, s13
   2fa28:	eeb00a67 	vmov.f32	s0, s15
   2fa2c:	e28bd000 	add	sp, fp, #0
   2fa30:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2fa34:	e12fff1e 	bx	lr
   2fa38:	408637b5 	.word	0x408637b5

0002fa3c <L6470::spdCalc(float)>:
   2fa3c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2fa40:	e28db000 	add	fp, sp, #0
   2fa44:	e24dd014 	sub	sp, sp, #20
   2fa48:	e50b0010 	str	r0, [fp, #-16]
   2fa4c:	ed0b0a05 	vstr	s0, [fp, #-20]	; 0xffffffec
   2fa50:	ed5b7a05 	vldr	s15, [fp, #-20]	; 0xffffffec
   2fa54:	ed9f7a0d 	vldr	s14, [pc, #52]	; 2fa90 <L6470::spdCalc(float)+0x54>
   2fa58:	ee677a87 	vmul.f32	s15, s15, s14
   2fa5c:	eefc7ae7 	vcvt.u32.f32	s15, s15
   2fa60:	ee173a90 	vmov	r3, s15
   2fa64:	e50b3008 	str	r3, [fp, #-8]
   2fa68:	e51b3008 	ldr	r3, [fp, #-8]
   2fa6c:	e3530601 	cmp	r3, #1048576	; 0x100000
   2fa70:	3a000001 	bcc	2fa7c <L6470::spdCalc(float)+0x40>
   2fa74:	e59f3018 	ldr	r3, [pc, #24]	; 2fa94 <L6470::spdCalc(float)+0x58>
   2fa78:	ea000000 	b	2fa80 <L6470::spdCalc(float)+0x44>
   2fa7c:	e51b3008 	ldr	r3, [fp, #-8]
   2fa80:	e1a00003 	mov	r0, r3
   2fa84:	e28bd000 	add	sp, fp, #0
   2fa88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2fa8c:	e12fff1e 	bx	lr
   2fa90:	42863646 	.word	0x42863646
   2fa94:	000fffff 	.word	0x000fffff

0002fa98 <L6470::spdParse(unsigned long)>:
   2fa98:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2fa9c:	e28db000 	add	fp, sp, #0
   2faa0:	e24dd00c 	sub	sp, sp, #12
   2faa4:	e50b0008 	str	r0, [fp, #-8]
   2faa8:	e50b100c 	str	r1, [fp, #-12]
   2faac:	e51b300c 	ldr	r3, [fp, #-12]
   2fab0:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
   2fab4:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   2fab8:	ee073a90 	vmov	s15, r3
   2fabc:	eef87a67 	vcvt.f32.u32	s15, s15
   2fac0:	ed9f7a05 	vldr	s14, [pc, #20]	; 2fadc <L6470::spdParse(unsigned long)+0x44>
   2fac4:	eec76a87 	vdiv.f32	s13, s15, s14
   2fac8:	eef07a66 	vmov.f32	s15, s13
   2facc:	eeb00a67 	vmov.f32	s0, s15
   2fad0:	e28bd000 	add	sp, fp, #0
   2fad4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2fad8:	e12fff1e 	bx	lr
   2fadc:	42863646 	.word	0x42863646

0002fae0 <L6470::paramHandler(unsigned char, unsigned long)>:
   2fae0:	e92d4800 	push	{fp, lr}
   2fae4:	e28db004 	add	fp, sp, #4
   2fae8:	e24dd018 	sub	sp, sp, #24
   2faec:	e50b0010 	str	r0, [fp, #-16]
   2faf0:	e1a03001 	mov	r3, r1
   2faf4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   2faf8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   2fafc:	e3a03000 	mov	r3, #0
   2fb00:	e50b3008 	str	r3, [fp, #-8]
   2fb04:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   2fb08:	e2433001 	sub	r3, r3, #1
   2fb0c:	e3530018 	cmp	r3, #24
   2fb10:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2fb14:	ea0000b7 	b	2fdf8 <L6470::paramHandler(unsigned char, unsigned long)+0x318>
   2fb18:	0002fb7c 	.word	0x0002fb7c
   2fb1c:	0002fb94 	.word	0x0002fb94
   2fb20:	0002fbac 	.word	0x0002fbac
   2fb24:	0002fbc4 	.word	0x0002fbc4
   2fb28:	0002fbdc 	.word	0x0002fbdc
   2fb2c:	0002fbf4 	.word	0x0002fbf4
   2fb30:	0002fc0c 	.word	0x0002fc0c
   2fb34:	0002fc24 	.word	0x0002fc24
   2fb38:	0002fc54 	.word	0x0002fc54
   2fb3c:	0002fc6c 	.word	0x0002fc6c
   2fb40:	0002fc84 	.word	0x0002fc84
   2fb44:	0002fc9c 	.word	0x0002fc9c
   2fb48:	0002fcb4 	.word	0x0002fcb4
   2fb4c:	0002fccc 	.word	0x0002fccc
   2fb50:	0002fce4 	.word	0x0002fce4
   2fb54:	0002fcfc 	.word	0x0002fcfc
   2fb58:	0002fd14 	.word	0x0002fd14
   2fb5c:	0002fd38 	.word	0x0002fd38
   2fb60:	0002fd50 	.word	0x0002fd50
   2fb64:	0002fd74 	.word	0x0002fd74
   2fb68:	0002fc3c 	.word	0x0002fc3c
   2fb6c:	0002fd98 	.word	0x0002fd98
   2fb70:	0002fdb0 	.word	0x0002fdb0
   2fb74:	0002fdc8 	.word	0x0002fdc8
   2fb78:	0002fde0 	.word	0x0002fde0
   2fb7c:	e3a02016 	mov	r2, #22
   2fb80:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fb84:	e51b0010 	ldr	r0, [fp, #-16]
   2fb88:	eb0000a8 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fb8c:	e50b0008 	str	r0, [fp, #-8]
   2fb90:	ea0000a2 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fb94:	e3a02009 	mov	r2, #9
   2fb98:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fb9c:	e51b0010 	ldr	r0, [fp, #-16]
   2fba0:	eb0000a2 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fba4:	e50b0008 	str	r0, [fp, #-8]
   2fba8:	ea00009c 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fbac:	e3a02016 	mov	r2, #22
   2fbb0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fbb4:	e51b0010 	ldr	r0, [fp, #-16]
   2fbb8:	eb00009c 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fbbc:	e50b0008 	str	r0, [fp, #-8]
   2fbc0:	ea000096 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fbc4:	e3a02014 	mov	r2, #20
   2fbc8:	e3a01000 	mov	r1, #0
   2fbcc:	e51b0010 	ldr	r0, [fp, #-16]
   2fbd0:	eb000096 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fbd4:	e50b0008 	str	r0, [fp, #-8]
   2fbd8:	ea000090 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fbdc:	e3a0200c 	mov	r2, #12
   2fbe0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fbe4:	e51b0010 	ldr	r0, [fp, #-16]
   2fbe8:	eb000090 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fbec:	e50b0008 	str	r0, [fp, #-8]
   2fbf0:	ea00008a 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fbf4:	e3a0200c 	mov	r2, #12
   2fbf8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fbfc:	e51b0010 	ldr	r0, [fp, #-16]
   2fc00:	eb00008a 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fc04:	e50b0008 	str	r0, [fp, #-8]
   2fc08:	ea000084 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fc0c:	e3a0200a 	mov	r2, #10
   2fc10:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fc14:	e51b0010 	ldr	r0, [fp, #-16]
   2fc18:	eb000084 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fc1c:	e50b0008 	str	r0, [fp, #-8]
   2fc20:	ea00007e 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fc24:	e3a0200d 	mov	r2, #13
   2fc28:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fc2c:	e51b0010 	ldr	r0, [fp, #-16]
   2fc30:	eb00007e 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fc34:	e50b0008 	str	r0, [fp, #-8]
   2fc38:	ea000078 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fc3c:	e3a0200a 	mov	r2, #10
   2fc40:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fc44:	e51b0010 	ldr	r0, [fp, #-16]
   2fc48:	eb000078 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fc4c:	e50b0008 	str	r0, [fp, #-8]
   2fc50:	ea000072 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fc54:	e3a02008 	mov	r2, #8
   2fc58:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fc5c:	e51b0010 	ldr	r0, [fp, #-16]
   2fc60:	eb000072 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fc64:	e50b0008 	str	r0, [fp, #-8]
   2fc68:	ea00006c 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fc6c:	e3a02008 	mov	r2, #8
   2fc70:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fc74:	e51b0010 	ldr	r0, [fp, #-16]
   2fc78:	eb00006c 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fc7c:	e50b0008 	str	r0, [fp, #-8]
   2fc80:	ea000066 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fc84:	e3a02008 	mov	r2, #8
   2fc88:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fc8c:	e51b0010 	ldr	r0, [fp, #-16]
   2fc90:	eb000066 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fc94:	e50b0008 	str	r0, [fp, #-8]
   2fc98:	ea000060 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fc9c:	e3a02008 	mov	r2, #8
   2fca0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fca4:	e51b0010 	ldr	r0, [fp, #-16]
   2fca8:	eb000060 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fcac:	e50b0008 	str	r0, [fp, #-8]
   2fcb0:	ea00005a 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fcb4:	e3a0200e 	mov	r2, #14
   2fcb8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fcbc:	e51b0010 	ldr	r0, [fp, #-16]
   2fcc0:	eb00005a 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fcc4:	e50b0008 	str	r0, [fp, #-8]
   2fcc8:	ea000054 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fccc:	e3a02008 	mov	r2, #8
   2fcd0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fcd4:	e51b0010 	ldr	r0, [fp, #-16]
   2fcd8:	eb000054 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fcdc:	e50b0008 	str	r0, [fp, #-8]
   2fce0:	ea00004e 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fce4:	e3a02008 	mov	r2, #8
   2fce8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fcec:	e51b0010 	ldr	r0, [fp, #-16]
   2fcf0:	eb00004e 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fcf4:	e50b0008 	str	r0, [fp, #-8]
   2fcf8:	ea000048 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fcfc:	e3a02008 	mov	r2, #8
   2fd00:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fd04:	e51b0010 	ldr	r0, [fp, #-16]
   2fd08:	eb000048 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fd0c:	e50b0008 	str	r0, [fp, #-8]
   2fd10:	ea000042 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fd14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2fd18:	e203300f 	and	r3, r3, #15
   2fd1c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   2fd20:	e3a02008 	mov	r2, #8
   2fd24:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fd28:	e51b0010 	ldr	r0, [fp, #-16]
   2fd2c:	eb00003f 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fd30:	e50b0008 	str	r0, [fp, #-8]
   2fd34:	ea000039 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fd38:	e3a02008 	mov	r2, #8
   2fd3c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fd40:	e51b0010 	ldr	r0, [fp, #-16]
   2fd44:	eb000039 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fd48:	e50b0008 	str	r0, [fp, #-8]
   2fd4c:	ea000033 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fd50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2fd54:	e203300f 	and	r3, r3, #15
   2fd58:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   2fd5c:	e3a02008 	mov	r2, #8
   2fd60:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fd64:	e51b0010 	ldr	r0, [fp, #-16]
   2fd68:	eb000030 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fd6c:	e50b0008 	str	r0, [fp, #-8]
   2fd70:	ea00002a 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fd74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2fd78:	e203307f 	and	r3, r3, #127	; 0x7f
   2fd7c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   2fd80:	e3a02008 	mov	r2, #8
   2fd84:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fd88:	e51b0010 	ldr	r0, [fp, #-16]
   2fd8c:	eb000027 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fd90:	e50b0008 	str	r0, [fp, #-8]
   2fd94:	ea000021 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fd98:	e3a02008 	mov	r2, #8
   2fd9c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fda0:	e51b0010 	ldr	r0, [fp, #-16]
   2fda4:	eb000021 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fda8:	e50b0008 	str	r0, [fp, #-8]
   2fdac:	ea00001b 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fdb0:	e3a02008 	mov	r2, #8
   2fdb4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fdb8:	e51b0010 	ldr	r0, [fp, #-16]
   2fdbc:	eb00001b 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fdc0:	e50b0008 	str	r0, [fp, #-8]
   2fdc4:	ea000015 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fdc8:	e3a02010 	mov	r2, #16
   2fdcc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2fdd0:	e51b0010 	ldr	r0, [fp, #-16]
   2fdd4:	eb000015 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fdd8:	e50b0008 	str	r0, [fp, #-8]
   2fddc:	ea00000f 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fde0:	e3a02010 	mov	r2, #16
   2fde4:	e3a01000 	mov	r1, #0
   2fde8:	e51b0010 	ldr	r0, [fp, #-16]
   2fdec:	eb00000f 	bl	2fe30 <L6470::xferParam(unsigned long, unsigned char)>
   2fdf0:	e50b0008 	str	r0, [fp, #-8]
   2fdf4:	ea000009 	b	2fe20 <L6470::paramHandler(unsigned char, unsigned long)+0x340>
   2fdf8:	e51b3010 	ldr	r3, [fp, #-16]
   2fdfc:	e5933000 	ldr	r3, [r3]
   2fe00:	e283300c 	add	r3, r3, #12
   2fe04:	e5933000 	ldr	r3, [r3]
   2fe08:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2fe0c:	e6ef2072 	uxtb	r2, r2
   2fe10:	e1a01002 	mov	r1, r2
   2fe14:	e51b0010 	ldr	r0, [fp, #-16]
   2fe18:	e12fff33 	blx	r3
   2fe1c:	e1a00000 	nop			; (mov r0, r0)
   2fe20:	e51b3008 	ldr	r3, [fp, #-8]
   2fe24:	e1a00003 	mov	r0, r3
   2fe28:	e24bd004 	sub	sp, fp, #4
   2fe2c:	e8bd8800 	pop	{fp, pc}

0002fe30 <L6470::xferParam(unsigned long, unsigned char)>:
   2fe30:	e92d4810 	push	{r4, fp, lr}
   2fe34:	e28db008 	add	fp, sp, #8
   2fe38:	e24dd024 	sub	sp, sp, #36	; 0x24
   2fe3c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   2fe40:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   2fe44:	e1a03002 	mov	r3, r2
   2fe48:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
   2fe4c:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
   2fe50:	e1a031a3 	lsr	r3, r3, #3
   2fe54:	e54b300d 	strb	r3, [fp, #-13]
   2fe58:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
   2fe5c:	e2033007 	and	r3, r3, #7
   2fe60:	e3530000 	cmp	r3, #0
   2fe64:	da000002 	ble	2fe74 <L6470::xferParam(unsigned long, unsigned char)+0x44>
   2fe68:	e55b300d 	ldrb	r3, [fp, #-13]
   2fe6c:	e2833001 	add	r3, r3, #1
   2fe70:	e54b300d 	strb	r3, [fp, #-13]
   2fe74:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2fe78:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   2fe7c:	e3a03000 	mov	r3, #0
   2fe80:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   2fe84:	e3a03000 	mov	r3, #0
   2fe88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2fe8c:	e55b300d 	ldrb	r3, [fp, #-13]
   2fe90:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2fe94:	e1520003 	cmp	r2, r3
   2fe98:	aa00001a 	bge	2ff08 <L6470::xferParam(unsigned long, unsigned char)+0xd8>
   2fe9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2fea0:	e5933000 	ldr	r3, [r3]
   2fea4:	e283300c 	add	r3, r3, #12
   2fea8:	e5933000 	ldr	r3, [r3]
   2feac:	e55b100d 	ldrb	r1, [fp, #-13]
   2feb0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2feb4:	e0412002 	sub	r2, r1, r2
   2feb8:	e2422001 	sub	r2, r2, #1
   2febc:	e24b100c 	sub	r1, fp, #12
   2fec0:	e0812002 	add	r2, r1, r2
   2fec4:	e552000c 	ldrb	r0, [r2, #-12]
   2fec8:	e55b100d 	ldrb	r1, [fp, #-13]
   2fecc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2fed0:	e0412002 	sub	r2, r1, r2
   2fed4:	e2424001 	sub	r4, r2, #1
   2fed8:	e1a01000 	mov	r1, r0
   2fedc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   2fee0:	e12fff33 	blx	r3
   2fee4:	e1a03000 	mov	r3, r0
   2fee8:	e1a02003 	mov	r2, r3
   2feec:	e24b300c 	sub	r3, fp, #12
   2fef0:	e0833004 	add	r3, r3, r4
   2fef4:	e5432010 	strb	r2, [r3, #-16]
   2fef8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2fefc:	e2833001 	add	r3, r3, #1
   2ff00:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2ff04:	eaffffe0 	b	2fe8c <L6470::xferParam(unsigned long, unsigned char)+0x5c>
   2ff08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2ff0c:	e1a00003 	mov	r0, r3
   2ff10:	e24bd008 	sub	sp, fp, #8
   2ff14:	e8bd8810 	pop	{r4, fp, pc}

0002ff18 <TLC59711DmxParams::TLC59711DmxParams(TLC59711DmxParamsStore*)>:
   2ff18:	e5801000 	str	r1, [r0]
   2ff1c:	e3a01004 	mov	r1, #4
   2ff20:	e3a02000 	mov	r2, #0
   2ff24:	e5c0100c 	strb	r1, [r0, #12]
   2ff28:	e3a01001 	mov	r1, #1
   2ff2c:	e5802004 	str	r2, [r0, #4]
   2ff30:	e5802008 	str	r2, [r0, #8]
   2ff34:	e1c010be 	strh	r1, [r0, #14]
   2ff38:	e5802010 	str	r2, [r0, #16]
   2ff3c:	e12fff1e 	bx	lr

0002ff40 <TLC59711DmxParams::Load()>:
   2ff40:	e3a03000 	mov	r3, #0
   2ff44:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
   2ff48:	e1a02000 	mov	r2, r0
   2ff4c:	e5803004 	str	r3, [r0, #4]
   2ff50:	e1a04000 	mov	r4, r0
   2ff54:	e59f1068 	ldr	r1, [pc, #104]	; 2ffc4 <TLC59711DmxParams::Load()+0x84>
   2ff58:	e1a0000d 	mov	r0, sp
   2ff5c:	eb003015 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   2ff60:	e59f1060 	ldr	r1, [pc, #96]	; 2ffc8 <TLC59711DmxParams::Load()+0x88>
   2ff64:	e1a0000d 	mov	r0, sp
   2ff68:	eb003032 	bl	3c038 <ReadConfigFile::Read(char const*)>
   2ff6c:	e2505000 	subs	r5, r0, #0
   2ff70:	e5940000 	ldr	r0, [r4]
   2ff74:	0a00000a 	beq	2ffa4 <TLC59711DmxParams::Load()+0x64>
   2ff78:	e3500000 	cmp	r0, #0
   2ff7c:	0a000003 	beq	2ff90 <TLC59711DmxParams::Load()+0x50>
   2ff80:	e5903000 	ldr	r3, [r0]
   2ff84:	e2841004 	add	r1, r4, #4
   2ff88:	e5933008 	ldr	r3, [r3, #8]
   2ff8c:	e12fff33 	blx	r3
   2ff90:	e1a0000d 	mov	r0, sp
   2ff94:	eb003018 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   2ff98:	e1a00005 	mov	r0, r5
   2ff9c:	e28dd00c 	add	sp, sp, #12
   2ffa0:	e8bd8030 	pop	{r4, r5, pc}
   2ffa4:	e3500000 	cmp	r0, #0
   2ffa8:	0afffff8 	beq	2ff90 <TLC59711DmxParams::Load()+0x50>
   2ffac:	e5903000 	ldr	r3, [r0]
   2ffb0:	e2841004 	add	r1, r4, #4
   2ffb4:	e3a05001 	mov	r5, #1
   2ffb8:	e593300c 	ldr	r3, [r3, #12]
   2ffbc:	e12fff33 	blx	r3
   2ffc0:	eafffff2 	b	2ff90 <TLC59711DmxParams::Load()+0x50>
   2ffc4:	000302e8 	.word	0x000302e8
   2ffc8:	00049f00 	.word	0x00049f00

0002ffcc <TLC59711DmxParams::Load(char const*, unsigned int)>:
   2ffcc:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   2ffd0:	e2516000 	subs	r6, r1, #0
   2ffd4:	1a000004 	bne	2ffec <TLC59711DmxParams::Load(char const*, unsigned int)+0x20>
   2ffd8:	e59f309c 	ldr	r3, [pc, #156]	; 3007c <TLC59711DmxParams::Load(char const*, unsigned int)+0xb0>
   2ffdc:	e59f109c 	ldr	r1, [pc, #156]	; 30080 <TLC59711DmxParams::Load(char const*, unsigned int)+0xb4>
   2ffe0:	e59f009c 	ldr	r0, [pc, #156]	; 30084 <TLC59711DmxParams::Load(char const*, unsigned int)+0xb8>
   2ffe4:	e3a02053 	mov	r2, #83	; 0x53
   2ffe8:	ebff84c9 	bl	11314 <__assert_fail@plt>
   2ffec:	e3520000 	cmp	r2, #0
   2fff0:	e1a05002 	mov	r5, r2
   2fff4:	1a000004 	bne	3000c <TLC59711DmxParams::Load(char const*, unsigned int)+0x40>
   2fff8:	e59f307c 	ldr	r3, [pc, #124]	; 3007c <TLC59711DmxParams::Load(char const*, unsigned int)+0xb0>
   2fffc:	e3a02054 	mov	r2, #84	; 0x54
   30000:	e59f1078 	ldr	r1, [pc, #120]	; 30080 <TLC59711DmxParams::Load(char const*, unsigned int)+0xb4>
   30004:	e59f007c 	ldr	r0, [pc, #124]	; 30088 <TLC59711DmxParams::Load(char const*, unsigned int)+0xbc>
   30008:	eafffff6 	b	2ffe8 <TLC59711DmxParams::Load(char const*, unsigned int)+0x1c>
   3000c:	e5903000 	ldr	r3, [r0]
   30010:	e1a04000 	mov	r4, r0
   30014:	e3530000 	cmp	r3, #0
   30018:	1a000004 	bne	30030 <TLC59711DmxParams::Load(char const*, unsigned int)+0x64>
   3001c:	e59f3058 	ldr	r3, [pc, #88]	; 3007c <TLC59711DmxParams::Load(char const*, unsigned int)+0xb0>
   30020:	e3a02055 	mov	r2, #85	; 0x55
   30024:	e59f1054 	ldr	r1, [pc, #84]	; 30080 <TLC59711DmxParams::Load(char const*, unsigned int)+0xb4>
   30028:	e59f005c 	ldr	r0, [pc, #92]	; 3008c <TLC59711DmxParams::Load(char const*, unsigned int)+0xc0>
   3002c:	eaffffed 	b	2ffe8 <TLC59711DmxParams::Load(char const*, unsigned int)+0x1c>
   30030:	e3a03000 	mov	r3, #0
   30034:	e5803004 	str	r3, [r0, #4]
   30038:	e1a02000 	mov	r2, r0
   3003c:	e59f104c 	ldr	r1, [pc, #76]	; 30090 <TLC59711DmxParams::Load(char const*, unsigned int)+0xc4>
   30040:	e1a0000d 	mov	r0, sp
   30044:	eb002fdb 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   30048:	e1a02005 	mov	r2, r5
   3004c:	e1a01006 	mov	r1, r6
   30050:	e1a0000d 	mov	r0, sp
   30054:	eb003042 	bl	3c164 <ReadConfigFile::Read(char const*, unsigned int)>
   30058:	e1a01004 	mov	r1, r4
   3005c:	e4910004 	ldr	r0, [r1], #4
   30060:	e5903000 	ldr	r3, [r0]
   30064:	e5933008 	ldr	r3, [r3, #8]
   30068:	e12fff33 	blx	r3
   3006c:	e1a0000d 	mov	r0, sp
   30070:	eb002fe1 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   30074:	e28dd008 	add	sp, sp, #8
   30078:	e8bd8070 	pop	{r4, r5, r6, pc}
   3007c:	00047fa8 	.word	0x00047fa8
   30080:	00047eb8 	.word	0x00047eb8
   30084:	00047ed2 	.word	0x00047ed2
   30088:	00047ee5 	.word	0x00047ee5
   3008c:	00047ef2 	.word	0x00047ef2
   30090:	000302e8 	.word	0x000302e8

00030094 <TLC59711DmxParams::callbackFunction(char const*)>:
   30094:	e92d4030 	push	{r4, r5, lr}
   30098:	e2515000 	subs	r5, r1, #0
   3009c:	e24dd01c 	sub	sp, sp, #28
   300a0:	1a000004 	bne	300b8 <TLC59711DmxParams::callbackFunction(char const*)+0x24>
   300a4:	e59f312c 	ldr	r3, [pc, #300]	; 301d8 <TLC59711DmxParams::callbackFunction(char const*)+0x144>
   300a8:	e3a02065 	mov	r2, #101	; 0x65
   300ac:	e59f1128 	ldr	r1, [pc, #296]	; 301dc <TLC59711DmxParams::callbackFunction(char const*)+0x148>
   300b0:	e59f0128 	ldr	r0, [pc, #296]	; 301e0 <TLC59711DmxParams::callbackFunction(char const*)+0x14c>
   300b4:	ebff8496 	bl	11314 <__assert_fail@plt>
   300b8:	e3a03009 	mov	r3, #9
   300bc:	e58d3008 	str	r3, [sp, #8]
   300c0:	e1a04000 	mov	r4, r0
   300c4:	e28d3008 	add	r3, sp, #8
   300c8:	e28d200c 	add	r2, sp, #12
   300cc:	e59f1110 	ldr	r1, [pc, #272]	; 301e4 <TLC59711DmxParams::callbackFunction(char const*)+0x150>
   300d0:	e1a00005 	mov	r0, r5
   300d4:	eb002d46 	bl	3b5f4 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
   300d8:	e3500000 	cmp	r0, #0
   300dc:	1a000014 	bne	30134 <TLC59711DmxParams::callbackFunction(char const*)+0xa0>
   300e0:	e59d3008 	ldr	r3, [sp, #8]
   300e4:	e28d2018 	add	r2, sp, #24
   300e8:	e0823003 	add	r3, r2, r3
   300ec:	e59f10f4 	ldr	r1, [pc, #244]	; 301e8 <TLC59711DmxParams::callbackFunction(char const*)+0x154>
   300f0:	e543000c 	strb	r0, [r3, #-12]
   300f4:	e28d000c 	add	r0, sp, #12
   300f8:	ebff841f 	bl	1117c <strcasecmp@plt>
   300fc:	e3500000 	cmp	r0, #0
   30100:	05840008 	streq	r0, [r4, #8]
   30104:	0a000006 	beq	30124 <TLC59711DmxParams::callbackFunction(char const*)+0x90>
   30108:	e59f10dc 	ldr	r1, [pc, #220]	; 301ec <TLC59711DmxParams::callbackFunction(char const*)+0x158>
   3010c:	e28d000c 	add	r0, sp, #12
   30110:	ebff8419 	bl	1117c <strcasecmp@plt>
   30114:	e3500000 	cmp	r0, #0
   30118:	1a000013 	bne	3016c <TLC59711DmxParams::callbackFunction(char const*)+0xd8>
   3011c:	e3a03001 	mov	r3, #1
   30120:	e5843008 	str	r3, [r4, #8]
   30124:	e5943004 	ldr	r3, [r4, #4]
   30128:	e3833001 	orr	r3, r3, #1
   3012c:	e5843004 	str	r3, [r4, #4]
   30130:	ea00000d 	b	3016c <TLC59711DmxParams::callbackFunction(char const*)+0xd8>
   30134:	e28d2001 	add	r2, sp, #1
   30138:	e59f10b0 	ldr	r1, [pc, #176]	; 301f0 <TLC59711DmxParams::callbackFunction(char const*)+0x15c>
   3013c:	e1a00005 	mov	r0, r5
   30140:	eb002ebf 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   30144:	e3500000 	cmp	r0, #0
   30148:	1a000009 	bne	30174 <TLC59711DmxParams::callbackFunction(char const*)+0xe0>
   3014c:	e5dd2001 	ldrb	r2, [sp, #1]
   30150:	e2423001 	sub	r3, r2, #1
   30154:	e6ef3073 	uxtb	r3, r3
   30158:	e35300a9 	cmp	r3, #169	; 0xa9
   3015c:	95c4200c 	strbls	r2, [r4, #12]
   30160:	95943004 	ldrls	r3, [r4, #4]
   30164:	93833002 	orrls	r3, r3, #2
   30168:	9affffef 	bls	3012c <TLC59711DmxParams::callbackFunction(char const*)+0x98>
   3016c:	e28dd01c 	add	sp, sp, #28
   30170:	e8bd8030 	pop	{r4, r5, pc}
   30174:	e28d2002 	add	r2, sp, #2
   30178:	e59f1074 	ldr	r1, [pc, #116]	; 301f4 <TLC59711DmxParams::callbackFunction(char const*)+0x160>
   3017c:	e1a00005 	mov	r0, r5
   30180:	eb002d03 	bl	3b594 <Sscan::Uint16(char const*, char const*, unsigned short&)>
   30184:	e3500000 	cmp	r0, #0
   30188:	1a000007 	bne	301ac <TLC59711DmxParams::callbackFunction(char const*)+0x118>
   3018c:	e1dd30b2 	ldrh	r3, [sp, #2]
   30190:	e2432001 	sub	r2, r3, #1
   30194:	e3520c02 	cmp	r2, #512	; 0x200
   30198:	31c430be 	strhcc	r3, [r4, #14]
   3019c:	35943004 	ldrcc	r3, [r4, #4]
   301a0:	33833004 	orrcc	r3, r3, #4
   301a4:	3affffe0 	bcc	3012c <TLC59711DmxParams::callbackFunction(char const*)+0x98>
   301a8:	eaffffef 	b	3016c <TLC59711DmxParams::callbackFunction(char const*)+0xd8>
   301ac:	e28d2004 	add	r2, sp, #4
   301b0:	e59f1040 	ldr	r1, [pc, #64]	; 301f8 <TLC59711DmxParams::callbackFunction(char const*)+0x164>
   301b4:	e1a00005 	mov	r0, r5
   301b8:	eb002f3b 	bl	3beac <Sscan::Uint32(char const*, char const*, unsigned int&)>
   301bc:	e3500000 	cmp	r0, #0
   301c0:	1affffe9 	bne	3016c <TLC59711DmxParams::callbackFunction(char const*)+0xd8>
   301c4:	e59d3004 	ldr	r3, [sp, #4]
   301c8:	e5843010 	str	r3, [r4, #16]
   301cc:	e5943004 	ldr	r3, [r4, #4]
   301d0:	e3833008 	orr	r3, r3, #8
   301d4:	eaffffd4 	b	3012c <TLC59711DmxParams::callbackFunction(char const*)+0x98>
   301d8:	00047fdc 	.word	0x00047fdc
   301dc:	00047eb8 	.word	0x00047eb8
   301e0:	00047f13 	.word	0x00047f13
   301e4:	00049f0c 	.word	0x00049f0c
   301e8:	00047ea4 	.word	0x00047ea4
   301ec:	00047eae 	.word	0x00047eae
   301f0:	00049f38 	.word	0x00049f38
   301f4:	0004a560 	.word	0x0004a560
   301f8:	00049f64 	.word	0x00049f64

000301fc <TLC59711DmxParams::Dump()>:
   301fc:	e92d4010 	push	{r4, lr}
   30200:	e1a04000 	mov	r4, r0
   30204:	e59f30ac 	ldr	r3, [pc, #172]	; 302b8 <TLC59711DmxParams::Dump()+0xbc>
   30208:	e59f20ac 	ldr	r2, [pc, #172]	; 302bc <TLC59711DmxParams::Dump()+0xc0>
   3020c:	e59f10ac 	ldr	r1, [pc, #172]	; 302c0 <TLC59711DmxParams::Dump()+0xc4>
   30210:	e59f00ac 	ldr	r0, [pc, #172]	; 302c4 <TLC59711DmxParams::Dump()+0xc8>
   30214:	ebff83f6 	bl	111f4 <printf@plt>
   30218:	e3a01001 	mov	r1, #1
   3021c:	e5940004 	ldr	r0, [r4, #4]
   30220:	eb00006d 	bl	303dc <TLC59711DmxParams::isMaskSet(unsigned int) [clone .isra.0]>
   30224:	e3500000 	cmp	r0, #0
   30228:	0a000006 	beq	30248 <TLC59711DmxParams::Dump()+0x4c>
   3022c:	e5943008 	ldr	r3, [r4, #8]
   30230:	e3a0100a 	mov	r1, #10
   30234:	e59f208c 	ldr	r2, [pc, #140]	; 302c8 <TLC59711DmxParams::Dump()+0xcc>
   30238:	e59f008c 	ldr	r0, [pc, #140]	; 302cc <TLC59711DmxParams::Dump()+0xd0>
   3023c:	e0222391 	mla	r2, r1, r3, r2
   30240:	e59f1088 	ldr	r1, [pc, #136]	; 302d0 <TLC59711DmxParams::Dump()+0xd4>
   30244:	ebff83ea 	bl	111f4 <printf@plt>
   30248:	e3a01002 	mov	r1, #2
   3024c:	e5940004 	ldr	r0, [r4, #4]
   30250:	eb000061 	bl	303dc <TLC59711DmxParams::isMaskSet(unsigned int) [clone .isra.0]>
   30254:	e3500000 	cmp	r0, #0
   30258:	0a000003 	beq	3026c <TLC59711DmxParams::Dump()+0x70>
   3025c:	e5d4200c 	ldrb	r2, [r4, #12]
   30260:	e59f106c 	ldr	r1, [pc, #108]	; 302d4 <TLC59711DmxParams::Dump()+0xd8>
   30264:	e59f006c 	ldr	r0, [pc, #108]	; 302d8 <TLC59711DmxParams::Dump()+0xdc>
   30268:	ebff83e1 	bl	111f4 <printf@plt>
   3026c:	e3a01004 	mov	r1, #4
   30270:	e5940004 	ldr	r0, [r4, #4]
   30274:	eb000058 	bl	303dc <TLC59711DmxParams::isMaskSet(unsigned int) [clone .isra.0]>
   30278:	e3500000 	cmp	r0, #0
   3027c:	0a000003 	beq	30290 <TLC59711DmxParams::Dump()+0x94>
   30280:	e1d420be 	ldrh	r2, [r4, #14]
   30284:	e59f1050 	ldr	r1, [pc, #80]	; 302dc <TLC59711DmxParams::Dump()+0xe0>
   30288:	e59f0048 	ldr	r0, [pc, #72]	; 302d8 <TLC59711DmxParams::Dump()+0xdc>
   3028c:	ebff83d8 	bl	111f4 <printf@plt>
   30290:	e3a01008 	mov	r1, #8
   30294:	e5940004 	ldr	r0, [r4, #4]
   30298:	eb00004f 	bl	303dc <TLC59711DmxParams::isMaskSet(unsigned int) [clone .isra.0]>
   3029c:	e3500000 	cmp	r0, #0
   302a0:	08bd8010 	popeq	{r4, pc}
   302a4:	e5942010 	ldr	r2, [r4, #16]
   302a8:	e59f1030 	ldr	r1, [pc, #48]	; 302e0 <TLC59711DmxParams::Dump()+0xe4>
   302ac:	e59f0030 	ldr	r0, [pc, #48]	; 302e4 <TLC59711DmxParams::Dump()+0xe8>
   302b0:	e8bd4010 	pop	{r4, lr}
   302b4:	eaff83ce 	b	111f4 <printf@plt>
   302b8:	00049f00 	.word	0x00049f00
   302bc:	00048014 	.word	0x00048014
   302c0:	00047eb8 	.word	0x00047eb8
   302c4:	00047f24 	.word	0x00047f24
   302c8:	00047ea4 	.word	0x00047ea4
   302cc:	00047f32 	.word	0x00047f32
   302d0:	00049f0c 	.word	0x00049f0c
   302d4:	00049f38 	.word	0x00049f38
   302d8:	00047f3f 	.word	0x00047f3f
   302dc:	0004a560 	.word	0x0004a560
   302e0:	00049f64 	.word	0x00049f64
   302e4:	00047f47 	.word	0x00047f47

000302e8 <TLC59711DmxParams::staticCallbackFunction(void*, char const*)>:
   302e8:	e3500000 	cmp	r0, #0
   302ec:	e92d4010 	push	{r4, lr}
   302f0:	1a000004 	bne	30308 <TLC59711DmxParams::staticCallbackFunction(void*, char const*)+0x20>
   302f4:	e59f3030 	ldr	r3, [pc, #48]	; 3032c <TLC59711DmxParams::staticCallbackFunction(void*, char const*)+0x44>
   302f8:	e59f1030 	ldr	r1, [pc, #48]	; 30330 <TLC59711DmxParams::staticCallbackFunction(void*, char const*)+0x48>
   302fc:	e59f0030 	ldr	r0, [pc, #48]	; 30334 <TLC59711DmxParams::staticCallbackFunction(void*, char const*)+0x4c>
   30300:	e3a020a8 	mov	r2, #168	; 0xa8
   30304:	ebff8402 	bl	11314 <__assert_fail@plt>
   30308:	e3510000 	cmp	r1, #0
   3030c:	1a000004 	bne	30324 <TLC59711DmxParams::staticCallbackFunction(void*, char const*)+0x3c>
   30310:	e59f3014 	ldr	r3, [pc, #20]	; 3032c <TLC59711DmxParams::staticCallbackFunction(void*, char const*)+0x44>
   30314:	e3a020a9 	mov	r2, #169	; 0xa9
   30318:	e59f1010 	ldr	r1, [pc, #16]	; 30330 <TLC59711DmxParams::staticCallbackFunction(void*, char const*)+0x48>
   3031c:	e59f0014 	ldr	r0, [pc, #20]	; 30338 <TLC59711DmxParams::staticCallbackFunction(void*, char const*)+0x50>
   30320:	eafffff7 	b	30304 <TLC59711DmxParams::staticCallbackFunction(void*, char const*)+0x1c>
   30324:	e8bd4010 	pop	{r4, lr}
   30328:	eaffff59 	b	30094 <TLC59711DmxParams::callbackFunction(char const*)>
   3032c:	0004801c 	.word	0x0004801c
   30330:	00047eb8 	.word	0x00047eb8
   30334:	00047f52 	.word	0x00047f52
   30338:	00047f5f 	.word	0x00047f5f

0003033c <TLC59711DmxParams::GetType(TTLC59711Type)>:
   3033c:	e3500001 	cmp	r0, #1
   30340:	da000005 	ble	3035c <TLC59711DmxParams::GetType(TTLC59711Type)+0x20>
   30344:	e92d4010 	push	{r4, lr}
   30348:	e3a020b3 	mov	r2, #179	; 0xb3
   3034c:	e59f3018 	ldr	r3, [pc, #24]	; 3036c <TLC59711DmxParams::GetType(TTLC59711Type)+0x30>
   30350:	e59f1018 	ldr	r1, [pc, #24]	; 30370 <TLC59711DmxParams::GetType(TTLC59711Type)+0x34>
   30354:	e59f0018 	ldr	r0, [pc, #24]	; 30374 <TLC59711DmxParams::GetType(TTLC59711Type)+0x38>
   30358:	ebff83ed 	bl	11314 <__assert_fail@plt>
   3035c:	e3a0200a 	mov	r2, #10
   30360:	e59f3010 	ldr	r3, [pc, #16]	; 30378 <TLC59711DmxParams::GetType(TTLC59711Type)+0x3c>
   30364:	e0203092 	mla	r0, r2, r0, r3
   30368:	e12fff1e 	bx	lr
   3036c:	00048068 	.word	0x00048068
   30370:	00047eb8 	.word	0x00047eb8
   30374:	00047f6c 	.word	0x00047f6c
   30378:	00047ea4 	.word	0x00047ea4

0003037c <TLC59711DmxParams::GetType(char const*)>:
   3037c:	e92d4010 	push	{r4, lr}
   30380:	e2504000 	subs	r4, r0, #0
   30384:	1a000004 	bne	3039c <TLC59711DmxParams::GetType(char const*)+0x20>
   30388:	e59f3038 	ldr	r3, [pc, #56]	; 303c8 <TLC59711DmxParams::GetType(char const*)+0x4c>
   3038c:	e3a020ba 	mov	r2, #186	; 0xba
   30390:	e59f1034 	ldr	r1, [pc, #52]	; 303cc <TLC59711DmxParams::GetType(char const*)+0x50>
   30394:	e59f0034 	ldr	r0, [pc, #52]	; 303d0 <TLC59711DmxParams::GetType(char const*)+0x54>
   30398:	ebff83dd 	bl	11314 <__assert_fail@plt>
   3039c:	e59f1030 	ldr	r1, [pc, #48]	; 303d4 <TLC59711DmxParams::GetType(char const*)+0x58>
   303a0:	ebff8375 	bl	1117c <strcasecmp@plt>
   303a4:	e3500000 	cmp	r0, #0
   303a8:	08bd8010 	popeq	{r4, pc}
   303ac:	e59f1024 	ldr	r1, [pc, #36]	; 303d8 <TLC59711DmxParams::GetType(char const*)+0x5c>
   303b0:	e1a00004 	mov	r0, r4
   303b4:	ebff8370 	bl	1117c <strcasecmp@plt>
   303b8:	e3500000 	cmp	r0, #0
   303bc:	13a00002 	movne	r0, #2
   303c0:	03a00001 	moveq	r0, #1
   303c4:	e8bd8010 	pop	{r4, pc}
   303c8:	000480a8 	.word	0x000480a8
   303cc:	00047eb8 	.word	0x00047eb8
   303d0:	00047f95 	.word	0x00047f95
   303d4:	00047ea4 	.word	0x00047ea4
   303d8:	00047eae 	.word	0x00047eae

000303dc <TLC59711DmxParams::isMaskSet(unsigned int) [clone .isra.0]>:
   303dc:	e1d13000 	bics	r3, r1, r0
   303e0:	03a00001 	moveq	r0, #1
   303e4:	13a00000 	movne	r0, #0
   303e8:	e12fff1e 	bx	lr

000303ec <TLC59711Dmx::GetDmxStartAddress()>:
   303ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   303f0:	e28db000 	add	fp, sp, #0
   303f4:	e24dd00c 	sub	sp, sp, #12
   303f8:	e50b0008 	str	r0, [fp, #-8]
   303fc:	e51b3008 	ldr	r3, [fp, #-8]
   30400:	e1d330b4 	ldrh	r3, [r3, #4]
   30404:	e1a00003 	mov	r0, r3
   30408:	e28bd000 	add	sp, fp, #0
   3040c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   30410:	e12fff1e 	bx	lr

00030414 <TLC59711Dmx::GetDmxFootprint()>:
   30414:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   30418:	e28db000 	add	fp, sp, #0
   3041c:	e24dd00c 	sub	sp, sp, #12
   30420:	e50b0008 	str	r0, [fp, #-8]
   30424:	e51b3008 	ldr	r3, [fp, #-8]
   30428:	e1d330b6 	ldrh	r3, [r3, #6]
   3042c:	e1a00003 	mov	r0, r3
   30430:	e28bd000 	add	sp, fp, #0
   30434:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   30438:	e12fff1e 	bx	lr

0003043c <ceil(float)>:
   3043c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   30440:	e28db000 	add	fp, sp, #0
   30444:	e24dd014 	sub	sp, sp, #20
   30448:	ed0b0a04 	vstr	s0, [fp, #-16]
   3044c:	ed5b7a04 	vldr	s15, [fp, #-16]
   30450:	eefd7ae7 	vcvt.s32.f32	s15, s15
   30454:	ee173a90 	vmov	r3, s15
   30458:	e50b3008 	str	r3, [fp, #-8]
   3045c:	e51b3008 	ldr	r3, [fp, #-8]
   30460:	ee073a90 	vmov	s15, r3
   30464:	eef87ae7 	vcvt.f32.s32	s15, s15
   30468:	ed1b7a04 	vldr	s14, [fp, #-16]
   3046c:	eeb47a67 	vcmp.f32	s14, s15
   30470:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   30474:	1a000001 	bne	30480 <ceil(float)+0x44>
   30478:	e51b3008 	ldr	r3, [fp, #-8]
   3047c:	ea000001 	b	30488 <ceil(float)+0x4c>
   30480:	e51b3008 	ldr	r3, [fp, #-8]
   30484:	e2833001 	add	r3, r3, #1
   30488:	e1a00003 	mov	r0, r3
   3048c:	e28bd000 	add	sp, fp, #0
   30490:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   30494:	e12fff1e 	bx	lr

00030498 <TLC59711Dmx::TLC59711Dmx()>:
   30498:	e92d4800 	push	{fp, lr}
   3049c:	e28db004 	add	fp, sp, #4
   304a0:	e24dd008 	sub	sp, sp, #8
   304a4:	e50b0008 	str	r0, [fp, #-8]
   304a8:	e51b3008 	ldr	r3, [fp, #-8]
   304ac:	e1a00003 	mov	r0, r3
   304b0:	ebffdde7 	bl	27c54 <LightSet::LightSet()>
   304b4:	e59f2094 	ldr	r2, [pc, #148]	; 30550 <TLC59711Dmx::TLC59711Dmx()+0xb8>
   304b8:	e51b3008 	ldr	r3, [fp, #-8]
   304bc:	e5832000 	str	r2, [r3]
   304c0:	e51b3008 	ldr	r3, [fp, #-8]
   304c4:	e3a02001 	mov	r2, #1
   304c8:	e1c320b4 	strh	r2, [r3, #4]
   304cc:	e51b3008 	ldr	r3, [fp, #-8]
   304d0:	e3a0200c 	mov	r2, #12
   304d4:	e1c320b6 	strh	r2, [r3, #6]
   304d8:	e51b3008 	ldr	r3, [fp, #-8]
   304dc:	e3a02001 	mov	r2, #1
   304e0:	e5c32008 	strb	r2, [r3, #8]
   304e4:	e51b3008 	ldr	r3, [fp, #-8]
   304e8:	e3a02000 	mov	r2, #0
   304ec:	e5c32009 	strb	r2, [r3, #9]
   304f0:	e51b3008 	ldr	r3, [fp, #-8]
   304f4:	e3a02000 	mov	r2, #0
   304f8:	e5c3200a 	strb	r2, [r3, #10]
   304fc:	e51b3008 	ldr	r3, [fp, #-8]
   30500:	e3a02000 	mov	r2, #0
   30504:	e583200c 	str	r2, [r3, #12]
   30508:	e51b3008 	ldr	r3, [fp, #-8]
   3050c:	e3a02000 	mov	r2, #0
   30510:	e5832010 	str	r2, [r3, #16]
   30514:	e51b3008 	ldr	r3, [fp, #-8]
   30518:	e3a02000 	mov	r2, #0
   3051c:	e5832014 	str	r2, [r3, #20]
   30520:	e51b3008 	ldr	r3, [fp, #-8]
   30524:	e3a02004 	mov	r2, #4
   30528:	e5c32018 	strb	r2, [r3, #24]
   3052c:	e51b3008 	ldr	r3, [fp, #-8]
   30530:	e3a02000 	mov	r2, #0
   30534:	e583201c 	str	r2, [r3, #28]
   30538:	e51b0008 	ldr	r0, [fp, #-8]
   3053c:	eb000119 	bl	309a8 <TLC59711Dmx::UpdateMembers()>
   30540:	e51b3008 	ldr	r3, [fp, #-8]
   30544:	e1a00003 	mov	r0, r3
   30548:	e24bd004 	sub	sp, fp, #4
   3054c:	e8bd8800 	pop	{fp, pc}
   30550:	000481bc 	.word	0x000481bc

00030554 <TLC59711Dmx::~TLC59711Dmx()>:
   30554:	e92d4810 	push	{r4, fp, lr}
   30558:	e28db008 	add	fp, sp, #8
   3055c:	e24dd00c 	sub	sp, sp, #12
   30560:	e50b0010 	str	r0, [fp, #-16]
   30564:	e59f204c 	ldr	r2, [pc, #76]	; 305b8 <TLC59711Dmx::~TLC59711Dmx()+0x64>
   30568:	e51b3010 	ldr	r3, [fp, #-16]
   3056c:	e5832000 	str	r2, [r3]
   30570:	e51b3010 	ldr	r3, [fp, #-16]
   30574:	e593400c 	ldr	r4, [r3, #12]
   30578:	e3540000 	cmp	r4, #0
   3057c:	0a000003 	beq	30590 <TLC59711Dmx::~TLC59711Dmx()+0x3c>
   30580:	e1a00004 	mov	r0, r4
   30584:	eb00039e 	bl	31404 <TLC59711::~TLC59711()>
   30588:	e1a00004 	mov	r0, r4
   3058c:	ebff835d 	bl	11308 <operator delete(void*)@plt>
   30590:	e51b3010 	ldr	r3, [fp, #-16]
   30594:	e3a02000 	mov	r2, #0
   30598:	e583200c 	str	r2, [r3, #12]
   3059c:	e51b3010 	ldr	r3, [fp, #-16]
   305a0:	e1a00003 	mov	r0, r3
   305a4:	ebffddb7 	bl	27c88 <LightSet::~LightSet()>
   305a8:	e51b3010 	ldr	r3, [fp, #-16]
   305ac:	e1a00003 	mov	r0, r3
   305b0:	e24bd008 	sub	sp, fp, #8
   305b4:	e8bd8810 	pop	{r4, fp, pc}
   305b8:	000481bc 	.word	0x000481bc

000305bc <TLC59711Dmx::~TLC59711Dmx()>:
   305bc:	e92d4800 	push	{fp, lr}
   305c0:	e28db004 	add	fp, sp, #4
   305c4:	e24dd008 	sub	sp, sp, #8
   305c8:	e50b0008 	str	r0, [fp, #-8]
   305cc:	e51b0008 	ldr	r0, [fp, #-8]
   305d0:	ebffffdf 	bl	30554 <TLC59711Dmx::~TLC59711Dmx()>
   305d4:	e51b0008 	ldr	r0, [fp, #-8]
   305d8:	ebff834a 	bl	11308 <operator delete(void*)@plt>
   305dc:	e51b3008 	ldr	r3, [fp, #-8]
   305e0:	e1a00003 	mov	r0, r3
   305e4:	e24bd004 	sub	sp, fp, #4
   305e8:	e8bd8800 	pop	{fp, pc}

000305ec <TLC59711Dmx::Start(unsigned int)>:
   305ec:	e92d4800 	push	{fp, lr}
   305f0:	e28db004 	add	fp, sp, #4
   305f4:	e24dd008 	sub	sp, sp, #8
   305f8:	e50b0008 	str	r0, [fp, #-8]
   305fc:	e50b100c 	str	r1, [fp, #-12]
   30600:	e51b3008 	ldr	r3, [fp, #-8]
   30604:	e5d33009 	ldrb	r3, [r3, #9]
   30608:	e3530000 	cmp	r3, #0
   3060c:	1a00000d 	bne	30648 <TLC59711Dmx::Start(unsigned int)+0x5c>
   30610:	e51b3008 	ldr	r3, [fp, #-8]
   30614:	e3a02001 	mov	r2, #1
   30618:	e5c32009 	strb	r2, [r3, #9]
   3061c:	e51b3008 	ldr	r3, [fp, #-8]
   30620:	e593300c 	ldr	r3, [r3, #12]
   30624:	e3530000 	cmp	r3, #0
   30628:	03a03001 	moveq	r3, #1
   3062c:	13a03000 	movne	r3, #0
   30630:	e6ef3073 	uxtb	r3, r3
   30634:	e3530000 	cmp	r3, #0
   30638:	0a000003 	beq	3064c <TLC59711Dmx::Start(unsigned int)+0x60>
   3063c:	e51b0008 	ldr	r0, [fp, #-8]
   30640:	eb0000aa 	bl	308f0 <TLC59711Dmx::Initialize()>
   30644:	ea000000 	b	3064c <TLC59711Dmx::Start(unsigned int)+0x60>
   30648:	e1a00000 	nop			; (mov r0, r0)
   3064c:	e24bd004 	sub	sp, fp, #4
   30650:	e8bd8800 	pop	{fp, pc}

00030654 <TLC59711Dmx::Stop(unsigned int)>:
   30654:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   30658:	e28db000 	add	fp, sp, #0
   3065c:	e24dd00c 	sub	sp, sp, #12
   30660:	e50b0008 	str	r0, [fp, #-8]
   30664:	e50b100c 	str	r1, [fp, #-12]
   30668:	e51b3008 	ldr	r3, [fp, #-8]
   3066c:	e5d33009 	ldrb	r3, [r3, #9]
   30670:	e2233001 	eor	r3, r3, #1
   30674:	e6ef3073 	uxtb	r3, r3
   30678:	e3530000 	cmp	r3, #0
   3067c:	1a000003 	bne	30690 <TLC59711Dmx::Stop(unsigned int)+0x3c>
   30680:	e51b3008 	ldr	r3, [fp, #-8]
   30684:	e3a02000 	mov	r2, #0
   30688:	e5c32009 	strb	r2, [r3, #9]
   3068c:	ea000000 	b	30694 <TLC59711Dmx::Stop(unsigned int)+0x40>
   30690:	e1a00000 	nop			; (mov r0, r0)
   30694:	e28bd000 	add	sp, fp, #0
   30698:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3069c:	e12fff1e 	bx	lr

000306a0 <TLC59711Dmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
   306a0:	e92d4800 	push	{fp, lr}
   306a4:	e28db004 	add	fp, sp, #4
   306a8:	e24dd020 	sub	sp, sp, #32
   306ac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   306b0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   306b4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   306b8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   306bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   306c0:	e3530000 	cmp	r3, #0
   306c4:	1a000004 	bne	306dc <TLC59711Dmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x3c>
   306c8:	e59f3174 	ldr	r3, [pc, #372]	; 30844 <TLC59711Dmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x1a4>
   306cc:	e3a0204c 	mov	r2, #76	; 0x4c
   306d0:	e59f1170 	ldr	r1, [pc, #368]	; 30848 <TLC59711Dmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x1a8>
   306d4:	e59f0170 	ldr	r0, [pc, #368]	; 3084c <TLC59711Dmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x1ac>
   306d8:	ebff830d 	bl	11314 <__assert_fail@plt>
   306dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   306e0:	e3530c02 	cmp	r3, #512	; 0x200
   306e4:	9a000004 	bls	306fc <TLC59711Dmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x5c>
   306e8:	e59f3154 	ldr	r3, [pc, #340]	; 30844 <TLC59711Dmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x1a4>
   306ec:	e3a0204d 	mov	r2, #77	; 0x4d
   306f0:	e59f1150 	ldr	r1, [pc, #336]	; 30848 <TLC59711Dmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x1a8>
   306f4:	e59f0154 	ldr	r0, [pc, #340]	; 30850 <TLC59711Dmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x1b0>
   306f8:	ebff8305 	bl	11314 <__assert_fail@plt>
   306fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   30700:	e593300c 	ldr	r3, [r3, #12]
   30704:	e3530000 	cmp	r3, #0
   30708:	03a03001 	moveq	r3, #1
   3070c:	13a03000 	movne	r3, #0
   30710:	e6ef3073 	uxtb	r3, r3
   30714:	e3530000 	cmp	r3, #0
   30718:	0a000002 	beq	30728 <TLC59711Dmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x88>
   3071c:	e3a01000 	mov	r1, #0
   30720:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   30724:	ebffffb0 	bl	305ec <TLC59711Dmx::Start(unsigned int)>
   30728:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3072c:	e1d330b4 	ldrh	r3, [r3, #4]
   30730:	e2433001 	sub	r3, r3, #1
   30734:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   30738:	e0823003 	add	r3, r2, r3
   3073c:	e50b3008 	str	r3, [fp, #-8]
   30740:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   30744:	e1d330b4 	ldrh	r3, [r3, #4]
   30748:	e14b30ba 	strh	r3, [fp, #-10]
   3074c:	e3a03000 	mov	r3, #0
   30750:	e50b3010 	str	r3, [fp, #-16]
   30754:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   30758:	e1d330b6 	ldrh	r3, [r3, #6]
   3075c:	e1a02003 	mov	r2, r3
   30760:	e51b3010 	ldr	r3, [fp, #-16]
   30764:	e1530002 	cmp	r3, r2
   30768:	2a00001e 	bcs	307e8 <TLC59711Dmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x148>
   3076c:	e15b30ba 	ldrh	r3, [fp, #-10]
   30770:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   30774:	e1520003 	cmp	r2, r3
   30778:	3a000019 	bcc	307e4 <TLC59711Dmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x144>
   3077c:	e51b3008 	ldr	r3, [fp, #-8]
   30780:	e5d33000 	ldrb	r3, [r3]
   30784:	e1a03403 	lsl	r3, r3, #8
   30788:	e6bf2073 	sxth	r2, r3
   3078c:	e51b3008 	ldr	r3, [fp, #-8]
   30790:	e5d33000 	ldrb	r3, [r3]
   30794:	e6bf3073 	sxth	r3, r3
   30798:	e1823003 	orr	r3, r2, r3
   3079c:	e6bf3073 	sxth	r3, r3
   307a0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   307a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   307a8:	e593300c 	ldr	r3, [r3, #12]
   307ac:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
   307b0:	e51b1010 	ldr	r1, [fp, #-16]
   307b4:	e1a00003 	mov	r0, r3
   307b8:	eb000353 	bl	3150c <TLC59711::Set(unsigned int, unsigned short)>
   307bc:	e51b3008 	ldr	r3, [fp, #-8]
   307c0:	e2833001 	add	r3, r3, #1
   307c4:	e50b3008 	str	r3, [fp, #-8]
   307c8:	e15b30ba 	ldrh	r3, [fp, #-10]
   307cc:	e2833001 	add	r3, r3, #1
   307d0:	e14b30ba 	strh	r3, [fp, #-10]
   307d4:	e51b3010 	ldr	r3, [fp, #-16]
   307d8:	e2833001 	add	r3, r3, #1
   307dc:	e50b3010 	str	r3, [fp, #-16]
   307e0:	eaffffdb 	b	30754 <TLC59711Dmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xb4>
   307e4:	e1a00000 	nop			; (mov r0, r0)
   307e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   307ec:	e1d330b4 	ldrh	r3, [r3, #4]
   307f0:	e15b20ba 	ldrh	r2, [fp, #-10]
   307f4:	e1520003 	cmp	r2, r3
   307f8:	03a03001 	moveq	r3, #1
   307fc:	13a03000 	movne	r3, #0
   30800:	e6ef3073 	uxtb	r3, r3
   30804:	e3530000 	cmp	r3, #0
   30808:	1a00000a 	bne	30838 <TLC59711Dmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x198>
   3080c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   30810:	e5d3300a 	ldrb	r3, [r3, #10]
   30814:	e2233001 	eor	r3, r3, #1
   30818:	e6ef3073 	uxtb	r3, r3
   3081c:	e3530000 	cmp	r3, #0
   30820:	0a000005 	beq	3083c <TLC59711Dmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x19c>
   30824:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   30828:	e593300c 	ldr	r3, [r3, #12]
   3082c:	e1a00003 	mov	r0, r3
   30830:	eb0006b7 	bl	32314 <TLC59711::Update()>
   30834:	ea000000 	b	3083c <TLC59711Dmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x19c>
   30838:	e1a00000 	nop			; (mov r0, r0)
   3083c:	e24bd004 	sub	sp, fp, #4
   30840:	e8bd8800 	pop	{fp, pc}
   30844:	000481ec 	.word	0x000481ec
   30848:	000480f8 	.word	0x000480f8
   3084c:	0004810c 	.word	0x0004810c
   30850:	00048120 	.word	0x00048120

00030854 <TLC59711Dmx::SetLEDType(TTLC59711Type)>:
   30854:	e92d4800 	push	{fp, lr}
   30858:	e28db004 	add	fp, sp, #4
   3085c:	e24dd008 	sub	sp, sp, #8
   30860:	e50b0008 	str	r0, [fp, #-8]
   30864:	e50b100c 	str	r1, [fp, #-12]
   30868:	e51b3008 	ldr	r3, [fp, #-8]
   3086c:	e51b200c 	ldr	r2, [fp, #-12]
   30870:	e5832014 	str	r2, [r3, #20]
   30874:	e51b0008 	ldr	r0, [fp, #-8]
   30878:	eb00004a 	bl	309a8 <TLC59711Dmx::UpdateMembers()>
   3087c:	e1a00000 	nop			; (mov r0, r0)
   30880:	e24bd004 	sub	sp, fp, #4
   30884:	e8bd8800 	pop	{fp, pc}

00030888 <TLC59711Dmx::SetLEDCount(unsigned char)>:
   30888:	e92d4800 	push	{fp, lr}
   3088c:	e28db004 	add	fp, sp, #4
   30890:	e24dd008 	sub	sp, sp, #8
   30894:	e50b0008 	str	r0, [fp, #-8]
   30898:	e1a03001 	mov	r3, r1
   3089c:	e54b3009 	strb	r3, [fp, #-9]
   308a0:	e51b3008 	ldr	r3, [fp, #-8]
   308a4:	e55b2009 	ldrb	r2, [fp, #-9]
   308a8:	e5c32018 	strb	r2, [r3, #24]
   308ac:	e51b0008 	ldr	r0, [fp, #-8]
   308b0:	eb00003c 	bl	309a8 <TLC59711Dmx::UpdateMembers()>
   308b4:	e1a00000 	nop			; (mov r0, r0)
   308b8:	e24bd004 	sub	sp, fp, #4
   308bc:	e8bd8800 	pop	{fp, pc}

000308c0 <TLC59711Dmx::SetSpiSpeedHz(unsigned int)>:
   308c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   308c4:	e28db000 	add	fp, sp, #0
   308c8:	e24dd00c 	sub	sp, sp, #12
   308cc:	e50b0008 	str	r0, [fp, #-8]
   308d0:	e50b100c 	str	r1, [fp, #-12]
   308d4:	e51b3008 	ldr	r3, [fp, #-8]
   308d8:	e51b200c 	ldr	r2, [fp, #-12]
   308dc:	e5832010 	str	r2, [r3, #16]
   308e0:	e1a00000 	nop			; (mov r0, r0)
   308e4:	e28bd000 	add	sp, fp, #0
   308e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   308ec:	e12fff1e 	bx	lr

000308f0 <TLC59711Dmx::Initialize()>:
   308f0:	e92d4810 	push	{r4, fp, lr}
   308f4:	e28db008 	add	fp, sp, #8
   308f8:	e24dd00c 	sub	sp, sp, #12
   308fc:	e50b0010 	str	r0, [fp, #-16]
   30900:	e51b3010 	ldr	r3, [fp, #-16]
   30904:	e593300c 	ldr	r3, [r3, #12]
   30908:	e3530000 	cmp	r3, #0
   3090c:	0a000004 	beq	30924 <TLC59711Dmx::Initialize()+0x34>
   30910:	e59f3080 	ldr	r3, [pc, #128]	; 30998 <TLC59711Dmx::Initialize()+0xa8>
   30914:	e3a0207b 	mov	r2, #123	; 0x7b
   30918:	e59f107c 	ldr	r1, [pc, #124]	; 3099c <TLC59711Dmx::Initialize()+0xac>
   3091c:	e59f007c 	ldr	r0, [pc, #124]	; 309a0 <TLC59711Dmx::Initialize()+0xb0>
   30920:	ebff827b 	bl	11314 <__assert_fail@plt>
   30924:	e3a00018 	mov	r0, #24
   30928:	ebff8204 	bl	11140 <operator new(unsigned int)@plt>
   3092c:	e1a03000 	mov	r3, r0
   30930:	e1a04003 	mov	r4, r3
   30934:	e51b3010 	ldr	r3, [fp, #-16]
   30938:	e5d31008 	ldrb	r1, [r3, #8]
   3093c:	e51b3010 	ldr	r3, [fp, #-16]
   30940:	e5933010 	ldr	r3, [r3, #16]
   30944:	e1a02003 	mov	r2, r3
   30948:	e1a00004 	mov	r0, r4
   3094c:	eb000209 	bl	31178 <TLC59711::TLC59711(unsigned char, unsigned int)>
   30950:	e51b3010 	ldr	r3, [fp, #-16]
   30954:	e583400c 	str	r4, [r3, #12]
   30958:	e51b3010 	ldr	r3, [fp, #-16]
   3095c:	e593300c 	ldr	r3, [r3, #12]
   30960:	e3530000 	cmp	r3, #0
   30964:	1a000004 	bne	3097c <TLC59711Dmx::Initialize()+0x8c>
   30968:	e59f3028 	ldr	r3, [pc, #40]	; 30998 <TLC59711Dmx::Initialize()+0xa8>
   3096c:	e3a0207d 	mov	r2, #125	; 0x7d
   30970:	e59f1024 	ldr	r1, [pc, #36]	; 3099c <TLC59711Dmx::Initialize()+0xac>
   30974:	e59f0028 	ldr	r0, [pc, #40]	; 309a4 <TLC59711Dmx::Initialize()+0xb4>
   30978:	ebff8265 	bl	11314 <__assert_fail@plt>
   3097c:	e51b3010 	ldr	r3, [fp, #-16]
   30980:	e593300c 	ldr	r3, [r3, #12]
   30984:	e1a00003 	mov	r0, r3
   30988:	eb0005af 	bl	3204c <TLC59711::Dump()>
   3098c:	e1a00000 	nop			; (mov r0, r0)
   30990:	e24bd008 	sub	sp, fp, #8
   30994:	e8bd8810 	pop	{r4, fp, pc}
   30998:	00048234 	.word	0x00048234
   3099c:	000480f8 	.word	0x000480f8
   309a0:	00048140 	.word	0x00048140
   309a4:	00048158 	.word	0x00048158

000309a8 <TLC59711Dmx::UpdateMembers()>:
   309a8:	e92d4800 	push	{fp, lr}
   309ac:	e28db004 	add	fp, sp, #4
   309b0:	e24dd008 	sub	sp, sp, #8
   309b4:	e50b0008 	str	r0, [fp, #-8]
   309b8:	e51b3008 	ldr	r3, [fp, #-8]
   309bc:	e5933014 	ldr	r3, [r3, #20]
   309c0:	e3530000 	cmp	r3, #0
   309c4:	1a000009 	bne	309f0 <TLC59711Dmx::UpdateMembers()+0x48>
   309c8:	e51b3008 	ldr	r3, [fp, #-8]
   309cc:	e5d33018 	ldrb	r3, [r3, #24]
   309d0:	e6ff3073 	uxth	r3, r3
   309d4:	e1a02003 	mov	r2, r3
   309d8:	e1a02082 	lsl	r2, r2, #1
   309dc:	e0823003 	add	r3, r2, r3
   309e0:	e6ff2073 	uxth	r2, r3
   309e4:	e51b3008 	ldr	r3, [fp, #-8]
   309e8:	e1c320b6 	strh	r2, [r3, #6]
   309ec:	ea000006 	b	30a0c <TLC59711Dmx::UpdateMembers()+0x64>
   309f0:	e51b3008 	ldr	r3, [fp, #-8]
   309f4:	e5d33018 	ldrb	r3, [r3, #24]
   309f8:	e6ff3073 	uxth	r3, r3
   309fc:	e1a03103 	lsl	r3, r3, #2
   30a00:	e6ff2073 	uxth	r2, r3
   30a04:	e51b3008 	ldr	r3, [fp, #-8]
   30a08:	e1c320b6 	strh	r2, [r3, #6]
   30a0c:	e51b3008 	ldr	r3, [fp, #-8]
   30a10:	e1d330b6 	ldrh	r3, [r3, #6]
   30a14:	ee073a90 	vmov	s15, r3
   30a18:	eef87a67 	vcvt.f32.u32	s15, s15
   30a1c:	ed9f7a09 	vldr	s14, [pc, #36]	; 30a48 <TLC59711Dmx::UpdateMembers()+0xa0>
   30a20:	eec76a87 	vdiv.f32	s13, s15, s14
   30a24:	eeb00a66 	vmov.f32	s0, s13
   30a28:	ebfffe83 	bl	3043c <ceil(float)>
   30a2c:	e1a03000 	mov	r3, r0
   30a30:	e6ef2073 	uxtb	r2, r3
   30a34:	e51b3008 	ldr	r3, [fp, #-8]
   30a38:	e5c32008 	strb	r2, [r3, #8]
   30a3c:	e1a00000 	nop			; (mov r0, r0)
   30a40:	e24bd004 	sub	sp, fp, #4
   30a44:	e8bd8800 	pop	{fp, pc}
   30a48:	41400000 	.word	0x41400000

00030a4c <TLC59711Dmx::Blackout(bool)>:
   30a4c:	e92d4800 	push	{fp, lr}
   30a50:	e28db004 	add	fp, sp, #4
   30a54:	e24dd008 	sub	sp, sp, #8
   30a58:	e50b0008 	str	r0, [fp, #-8]
   30a5c:	e1a03001 	mov	r3, r1
   30a60:	e54b3009 	strb	r3, [fp, #-9]
   30a64:	e51b3008 	ldr	r3, [fp, #-8]
   30a68:	e55b2009 	ldrb	r2, [fp, #-9]
   30a6c:	e5c3200a 	strb	r2, [r3, #10]
   30a70:	e55b3009 	ldrb	r3, [fp, #-9]
   30a74:	e3530000 	cmp	r3, #0
   30a78:	0a000004 	beq	30a90 <TLC59711Dmx::Blackout(bool)+0x44>
   30a7c:	e51b3008 	ldr	r3, [fp, #-8]
   30a80:	e593300c 	ldr	r3, [r3, #12]
   30a84:	e1a00003 	mov	r0, r3
   30a88:	eb000645 	bl	323a4 <TLC59711::Blackout()>
   30a8c:	ea000003 	b	30aa0 <TLC59711Dmx::Blackout(bool)+0x54>
   30a90:	e51b3008 	ldr	r3, [fp, #-8]
   30a94:	e593300c 	ldr	r3, [r3, #12]
   30a98:	e1a00003 	mov	r0, r3
   30a9c:	eb00061c 	bl	32314 <TLC59711::Update()>
   30aa0:	e1a00000 	nop			; (mov r0, r0)
   30aa4:	e24bd004 	sub	sp, fp, #4
   30aa8:	e8bd8800 	pop	{fp, pc}

00030aac <TLC59711Dmx::SetDmxStartAddress(unsigned short)>:
   30aac:	e92d4800 	push	{fp, lr}
   30ab0:	e28db004 	add	fp, sp, #4
   30ab4:	e24dd008 	sub	sp, sp, #8
   30ab8:	e50b0008 	str	r0, [fp, #-8]
   30abc:	e1a03001 	mov	r3, r1
   30ac0:	e14b30ba 	strh	r3, [fp, #-10]
   30ac4:	e15b30ba 	ldrh	r3, [fp, #-10]
   30ac8:	e3530000 	cmp	r3, #0
   30acc:	0a000002 	beq	30adc <TLC59711Dmx::SetDmxStartAddress(unsigned short)+0x30>
   30ad0:	e15b30ba 	ldrh	r3, [fp, #-10]
   30ad4:	e3530c02 	cmp	r3, #512	; 0x200
   30ad8:	9a000004 	bls	30af0 <TLC59711Dmx::SetDmxStartAddress(unsigned short)+0x44>
   30adc:	e59f3084 	ldr	r3, [pc, #132]	; 30b68 <TLC59711Dmx::SetDmxStartAddress(unsigned short)+0xbc>
   30ae0:	e3a0209a 	mov	r2, #154	; 0x9a
   30ae4:	e59f1080 	ldr	r1, [pc, #128]	; 30b6c <TLC59711Dmx::SetDmxStartAddress(unsigned short)+0xc0>
   30ae8:	e59f0080 	ldr	r0, [pc, #128]	; 30b70 <TLC59711Dmx::SetDmxStartAddress(unsigned short)+0xc4>
   30aec:	ebff8208 	bl	11314 <__assert_fail@plt>
   30af0:	e15b30ba 	ldrh	r3, [fp, #-10]
   30af4:	e3530000 	cmp	r3, #0
   30af8:	0a000016 	beq	30b58 <TLC59711Dmx::SetDmxStartAddress(unsigned short)+0xac>
   30afc:	e15b30ba 	ldrh	r3, [fp, #-10]
   30b00:	e3530c02 	cmp	r3, #512	; 0x200
   30b04:	8a000013 	bhi	30b58 <TLC59711Dmx::SetDmxStartAddress(unsigned short)+0xac>
   30b08:	e51b3008 	ldr	r3, [fp, #-8]
   30b0c:	e15b20ba 	ldrh	r2, [fp, #-10]
   30b10:	e1c320b4 	strh	r2, [r3, #4]
   30b14:	e51b3008 	ldr	r3, [fp, #-8]
   30b18:	e593301c 	ldr	r3, [r3, #28]
   30b1c:	e3530000 	cmp	r3, #0
   30b20:	0a00000a 	beq	30b50 <TLC59711Dmx::SetDmxStartAddress(unsigned short)+0xa4>
   30b24:	e51b3008 	ldr	r3, [fp, #-8]
   30b28:	e593001c 	ldr	r0, [r3, #28]
   30b2c:	e51b3008 	ldr	r3, [fp, #-8]
   30b30:	e593301c 	ldr	r3, [r3, #28]
   30b34:	e5933000 	ldr	r3, [r3]
   30b38:	e2833008 	add	r3, r3, #8
   30b3c:	e5933000 	ldr	r3, [r3]
   30b40:	e51b2008 	ldr	r2, [fp, #-8]
   30b44:	e1d220b4 	ldrh	r2, [r2, #4]
   30b48:	e1a01002 	mov	r1, r2
   30b4c:	e12fff33 	blx	r3
   30b50:	e3a03001 	mov	r3, #1
   30b54:	ea000000 	b	30b5c <TLC59711Dmx::SetDmxStartAddress(unsigned short)+0xb0>
   30b58:	e3a03000 	mov	r3, #0
   30b5c:	e1a00003 	mov	r0, r3
   30b60:	e24bd004 	sub	sp, fp, #4
   30b64:	e8bd8800 	pop	{fp, pc}
   30b68:	00048254 	.word	0x00048254
   30b6c:	000480f8 	.word	0x000480f8
   30b70:	00048170 	.word	0x00048170

00030b74 <TLC59711Dmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
   30b74:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   30b78:	e28db000 	add	fp, sp, #0
   30b7c:	e24dd01c 	sub	sp, sp, #28
   30b80:	e50b0010 	str	r0, [fp, #-16]
   30b84:	e1a03001 	mov	r3, r1
   30b88:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   30b8c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   30b90:	e51b3010 	ldr	r3, [fp, #-16]
   30b94:	e1d330b6 	ldrh	r3, [r3, #6]
   30b98:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
   30b9c:	e1520003 	cmp	r2, r3
   30ba0:	9a000001 	bls	30bac <TLC59711Dmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x38>
   30ba4:	e3a03000 	mov	r3, #0
   30ba8:	ea000033 	b	30c7c <TLC59711Dmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x108>
   30bac:	e51b3010 	ldr	r3, [fp, #-16]
   30bb0:	e5933014 	ldr	r3, [r3, #20]
   30bb4:	e3530000 	cmp	r3, #0
   30bb8:	1a00000a 	bne	30be8 <TLC59711Dmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x74>
   30bbc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   30bc0:	e2433003 	sub	r3, r3, #3
   30bc4:	e1a01003 	mov	r1, r3
   30bc8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   30bcc:	e59f20b8 	ldr	r2, [pc, #184]	; 30c8c <TLC59711Dmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x118>
   30bd0:	e0832392 	umull	r2, r3, r2, r3
   30bd4:	e1a030a3 	lsr	r3, r3, #1
   30bd8:	e6ff3073 	uxth	r3, r3
   30bdc:	e0030193 	mul	r3, r3, r1
   30be0:	e50b3008 	str	r3, [fp, #-8]
   30be4:	ea000007 	b	30c08 <TLC59711Dmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x94>
   30be8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   30bec:	e2433004 	sub	r3, r3, #4
   30bf0:	e1a02003 	mov	r2, r3
   30bf4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   30bf8:	e1a03123 	lsr	r3, r3, #2
   30bfc:	e6ff3073 	uxth	r3, r3
   30c00:	e0030293 	mul	r3, r3, r2
   30c04:	e50b3008 	str	r3, [fp, #-8]
   30c08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   30c0c:	e3a02000 	mov	r2, #0
   30c10:	e5c32002 	strb	r2, [r3, #2]
   30c14:	e51b3008 	ldr	r3, [fp, #-8]
   30c18:	e3530003 	cmp	r3, #3
   30c1c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   30c20:	ea000013 	b	30c74 <TLC59711Dmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x100>
   30c24:	00030c34 	.word	0x00030c34
   30c28:	00030c44 	.word	0x00030c44
   30c2c:	00030c54 	.word	0x00030c54
   30c30:	00030c64 	.word	0x00030c64
   30c34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   30c38:	e59f2050 	ldr	r2, [pc, #80]	; 30c90 <TLC59711Dmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x11c>
   30c3c:	e1c320b0 	strh	r2, [r3]
   30c40:	ea00000c 	b	30c78 <TLC59711Dmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x104>
   30c44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   30c48:	e59f2044 	ldr	r2, [pc, #68]	; 30c94 <TLC59711Dmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x120>
   30c4c:	e1c320b0 	strh	r2, [r3]
   30c50:	ea000008 	b	30c78 <TLC59711Dmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x104>
   30c54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   30c58:	e59f2038 	ldr	r2, [pc, #56]	; 30c98 <TLC59711Dmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x124>
   30c5c:	e1c320b0 	strh	r2, [r3]
   30c60:	ea000004 	b	30c78 <TLC59711Dmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x104>
   30c64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   30c68:	e59f202c 	ldr	r2, [pc, #44]	; 30c9c <TLC59711Dmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x128>
   30c6c:	e1c320b0 	strh	r2, [r3]
   30c70:	ea000000 	b	30c78 <TLC59711Dmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x104>
   30c74:	e1a00000 	nop			; (mov r0, r0)
   30c78:	e3a03001 	mov	r3, #1
   30c7c:	e1a00003 	mov	r0, r3
   30c80:	e28bd000 	add	sp, fp, #0
   30c84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   30c88:	e12fff1e 	bx	lr
   30c8c:	aaaaaaab 	.word	0xaaaaaaab
   30c90:	00000205 	.word	0x00000205
   30c94:	00000206 	.word	0x00000206
   30c98:	00000207 	.word	0x00000207
   30c9c:	00000212 	.word	0x00000212

00030ca0 <TLC59711DmxParams::Set(TLC59711Dmx*)>:
   30ca0:	e92d4800 	push	{fp, lr}
   30ca4:	e28db004 	add	fp, sp, #4
   30ca8:	e24dd008 	sub	sp, sp, #8
   30cac:	e50b0008 	str	r0, [fp, #-8]
   30cb0:	e50b100c 	str	r1, [fp, #-12]
   30cb4:	e51b300c 	ldr	r3, [fp, #-12]
   30cb8:	e3530000 	cmp	r3, #0
   30cbc:	1a000004 	bne	30cd4 <TLC59711DmxParams::Set(TLC59711Dmx*)+0x34>
   30cc0:	e59f30c8 	ldr	r3, [pc, #200]	; 30d90 <TLC59711DmxParams::Set(TLC59711Dmx*)+0xf0>
   30cc4:	e3a02020 	mov	r2, #32
   30cc8:	e59f10c4 	ldr	r1, [pc, #196]	; 30d94 <TLC59711DmxParams::Set(TLC59711Dmx*)+0xf4>
   30ccc:	e59f00c4 	ldr	r0, [pc, #196]	; 30d98 <TLC59711DmxParams::Set(TLC59711Dmx*)+0xf8>
   30cd0:	ebff818f 	bl	11314 <__assert_fail@plt>
   30cd4:	e3a01001 	mov	r1, #1
   30cd8:	e51b0008 	ldr	r0, [fp, #-8]
   30cdc:	ebff8662 	bl	1266c <TLC59711DmxParams::isMaskSet(unsigned int)>
   30ce0:	e1a03000 	mov	r3, r0
   30ce4:	e3530000 	cmp	r3, #0
   30ce8:	0a000004 	beq	30d00 <TLC59711DmxParams::Set(TLC59711Dmx*)+0x60>
   30cec:	e51b3008 	ldr	r3, [fp, #-8]
   30cf0:	e5933008 	ldr	r3, [r3, #8]
   30cf4:	e1a01003 	mov	r1, r3
   30cf8:	e51b000c 	ldr	r0, [fp, #-12]
   30cfc:	ebfffed4 	bl	30854 <TLC59711Dmx::SetLEDType(TTLC59711Type)>
   30d00:	e3a01002 	mov	r1, #2
   30d04:	e51b0008 	ldr	r0, [fp, #-8]
   30d08:	ebff8657 	bl	1266c <TLC59711DmxParams::isMaskSet(unsigned int)>
   30d0c:	e1a03000 	mov	r3, r0
   30d10:	e3530000 	cmp	r3, #0
   30d14:	0a000004 	beq	30d2c <TLC59711DmxParams::Set(TLC59711Dmx*)+0x8c>
   30d18:	e51b3008 	ldr	r3, [fp, #-8]
   30d1c:	e5d3300c 	ldrb	r3, [r3, #12]
   30d20:	e1a01003 	mov	r1, r3
   30d24:	e51b000c 	ldr	r0, [fp, #-12]
   30d28:	ebfffed6 	bl	30888 <TLC59711Dmx::SetLEDCount(unsigned char)>
   30d2c:	e3a01004 	mov	r1, #4
   30d30:	e51b0008 	ldr	r0, [fp, #-8]
   30d34:	ebff864c 	bl	1266c <TLC59711DmxParams::isMaskSet(unsigned int)>
   30d38:	e1a03000 	mov	r3, r0
   30d3c:	e3530000 	cmp	r3, #0
   30d40:	0a000004 	beq	30d58 <TLC59711DmxParams::Set(TLC59711Dmx*)+0xb8>
   30d44:	e51b3008 	ldr	r3, [fp, #-8]
   30d48:	e1d330be 	ldrh	r3, [r3, #14]
   30d4c:	e1a01003 	mov	r1, r3
   30d50:	e51b000c 	ldr	r0, [fp, #-12]
   30d54:	ebffff54 	bl	30aac <TLC59711Dmx::SetDmxStartAddress(unsigned short)>
   30d58:	e3a01008 	mov	r1, #8
   30d5c:	e51b0008 	ldr	r0, [fp, #-8]
   30d60:	ebff8641 	bl	1266c <TLC59711DmxParams::isMaskSet(unsigned int)>
   30d64:	e1a03000 	mov	r3, r0
   30d68:	e3530000 	cmp	r3, #0
   30d6c:	0a000004 	beq	30d84 <TLC59711DmxParams::Set(TLC59711Dmx*)+0xe4>
   30d70:	e51b3008 	ldr	r3, [fp, #-8]
   30d74:	e5933010 	ldr	r3, [r3, #16]
   30d78:	e1a01003 	mov	r1, r3
   30d7c:	e51b000c 	ldr	r0, [fp, #-12]
   30d80:	ebfffece 	bl	308c0 <TLC59711Dmx::SetSpiSpeedHz(unsigned int)>
   30d84:	e1a00000 	nop			; (mov r0, r0)
   30d88:	e24bd004 	sub	sp, fp, #4
   30d8c:	e8bd8800 	pop	{fp, pc}
   30d90:	000482d4 	.word	0x000482d4
   30d94:	0004829c 	.word	0x0004829c
   30d98:	000482bc 	.word	0x000482bc

00030d9c <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)>:
   30d9c:	e92d4810 	push	{r4, fp, lr}
   30da0:	e28db008 	add	fp, sp, #8
   30da4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   30da8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   30dac:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   30db0:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   30db4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   30db8:	e3a03027 	mov	r3, #39	; 0x27
   30dbc:	e59f21e4 	ldr	r2, [pc, #484]	; 30fa8 <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x20c>
   30dc0:	e59f11e4 	ldr	r1, [pc, #484]	; 30fac <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x210>
   30dc4:	e59f01e4 	ldr	r0, [pc, #484]	; 30fb0 <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x214>
   30dc8:	ebff8109 	bl	111f4 <printf@plt>
   30dcc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   30dd0:	e3530000 	cmp	r3, #0
   30dd4:	1a000004 	bne	30dec <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x50>
   30dd8:	e59f31d4 	ldr	r3, [pc, #468]	; 30fb4 <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x218>
   30ddc:	e3a02029 	mov	r2, #41	; 0x29
   30de0:	e59f11c4 	ldr	r1, [pc, #452]	; 30fac <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x210>
   30de4:	e59f01cc 	ldr	r0, [pc, #460]	; 30fb8 <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x21c>
   30de8:	ebff8149 	bl	11314 <__assert_fail@plt>
   30dec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   30df0:	e3530000 	cmp	r3, #0
   30df4:	0a000006 	beq	30e14 <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x78>
   30df8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   30dfc:	e2833004 	add	r3, r3, #4
   30e00:	e3a02010 	mov	r2, #16
   30e04:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   30e08:	e1a00003 	mov	r0, r3
   30e0c:	ebff817c 	bl	11404 <memcpy@plt>
   30e10:	ea00000a 	b	30e40 <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0xa4>
   30e14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   30e18:	e5930000 	ldr	r0, [r3]
   30e1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   30e20:	e5933000 	ldr	r3, [r3]
   30e24:	e5933000 	ldr	r3, [r3]
   30e28:	e283300c 	add	r3, r3, #12
   30e2c:	e5933000 	ldr	r3, [r3]
   30e30:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   30e34:	e2822004 	add	r2, r2, #4
   30e38:	e1a01002 	mov	r1, r2
   30e3c:	e12fff33 	blx	r3
   30e40:	e24b0018 	sub	r0, fp, #24
   30e44:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   30e48:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   30e4c:	e59f1168 	ldr	r1, [pc, #360]	; 30fbc <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x220>
   30e50:	eb002b93 	bl	3bca4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
   30e54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   30e58:	e5933008 	ldr	r3, [r3, #8]
   30e5c:	e1a00003 	mov	r0, r3
   30e60:	ebfffd35 	bl	3033c <TLC59711DmxParams::GetType(TTLC59711Type)>
   30e64:	e1a04000 	mov	r4, r0
   30e68:	e3a01001 	mov	r1, #1
   30e6c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   30e70:	ebff85fd 	bl	1266c <TLC59711DmxParams::isMaskSet(unsigned int)>
   30e74:	e1a03000 	mov	r3, r0
   30e78:	e1a02003 	mov	r2, r3
   30e7c:	e24b0018 	sub	r0, fp, #24
   30e80:	e3a03001 	mov	r3, #1
   30e84:	e58d3000 	str	r3, [sp]
   30e88:	e1a03002 	mov	r3, r2
   30e8c:	e1a02004 	mov	r2, r4
   30e90:	e59f1128 	ldr	r1, [pc, #296]	; 30fc0 <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x224>
   30e94:	ebffcc2f 	bl	23f58 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)>
   30e98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   30e9c:	e5d3400c 	ldrb	r4, [r3, #12]
   30ea0:	e3a01002 	mov	r1, #2
   30ea4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   30ea8:	ebff85ef 	bl	1266c <TLC59711DmxParams::isMaskSet(unsigned int)>
   30eac:	e1a03000 	mov	r3, r0
   30eb0:	e1a02003 	mov	r2, r3
   30eb4:	e24b0018 	sub	r0, fp, #24
   30eb8:	e3a03001 	mov	r3, #1
   30ebc:	e58d3000 	str	r3, [sp]
   30ec0:	e1a03002 	mov	r3, r2
   30ec4:	e1a02004 	mov	r2, r4
   30ec8:	e59f10f4 	ldr	r1, [pc, #244]	; 30fc4 <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x228>
   30ecc:	ebffcc3b 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   30ed0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   30ed4:	e1d340be 	ldrh	r4, [r3, #14]
   30ed8:	e3a01004 	mov	r1, #4
   30edc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   30ee0:	ebff85e1 	bl	1266c <TLC59711DmxParams::isMaskSet(unsigned int)>
   30ee4:	e1a03000 	mov	r3, r0
   30ee8:	e1a02003 	mov	r2, r3
   30eec:	e24b0018 	sub	r0, fp, #24
   30ef0:	e3a03001 	mov	r3, #1
   30ef4:	e58d3000 	str	r3, [sp]
   30ef8:	e1a03002 	mov	r3, r2
   30efc:	e1a02004 	mov	r2, r4
   30f00:	e59f10c0 	ldr	r1, [pc, #192]	; 30fc8 <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x22c>
   30f04:	ebffd16a 	bl	254b4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)>
   30f08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   30f0c:	e5934010 	ldr	r4, [r3, #16]
   30f10:	e3a01008 	mov	r1, #8
   30f14:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   30f18:	ebff85d3 	bl	1266c <TLC59711DmxParams::isMaskSet(unsigned int)>
   30f1c:	e1a03000 	mov	r3, r0
   30f20:	e1a02003 	mov	r2, r3
   30f24:	e24b0018 	sub	r0, fp, #24
   30f28:	e3a03001 	mov	r3, #1
   30f2c:	e58d3000 	str	r3, [sp]
   30f30:	e1a03002 	mov	r3, r2
   30f34:	e1a02004 	mov	r2, r4
   30f38:	e59f108c 	ldr	r1, [pc, #140]	; 30fcc <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x230>
   30f3c:	ebffe4ff 	bl	2a340 <bool PropertiesBuilder::Add<unsigned int>(char const*, unsigned int, bool, unsigned int)>
   30f40:	e24b3018 	sub	r3, fp, #24
   30f44:	e1a00003 	mov	r0, r3
   30f48:	ebff8de0 	bl	146d0 <PropertiesBuilder::GetSize()>
   30f4c:	e1a03000 	mov	r3, r0
   30f50:	e1a02003 	mov	r2, r3
   30f54:	e59b3004 	ldr	r3, [fp, #4]
   30f58:	e5832000 	str	r2, [r3]
   30f5c:	e59f306c 	ldr	r3, [pc, #108]	; 30fd0 <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x234>
   30f60:	e5930000 	ldr	r0, [r3]
   30f64:	e59b3004 	ldr	r3, [fp, #4]
   30f68:	e5933000 	ldr	r3, [r3]
   30f6c:	e58d3004 	str	r3, [sp, #4]
   30f70:	e3a0303a 	mov	r3, #58	; 0x3a
   30f74:	e58d3000 	str	r3, [sp]
   30f78:	e59f302c 	ldr	r3, [pc, #44]	; 30fac <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x210>
   30f7c:	e59f2024 	ldr	r2, [pc, #36]	; 30fa8 <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x20c>
   30f80:	e59f104c 	ldr	r1, [pc, #76]	; 30fd4 <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x238>
   30f84:	ebff812d 	bl	11440 <fprintf@plt>
   30f88:	e3a0303b 	mov	r3, #59	; 0x3b
   30f8c:	e59f2014 	ldr	r2, [pc, #20]	; 30fa8 <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x20c>
   30f90:	e59f1014 	ldr	r1, [pc, #20]	; 30fac <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x210>
   30f94:	e59f003c 	ldr	r0, [pc, #60]	; 30fd8 <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)+0x23c>
   30f98:	ebff8095 	bl	111f4 <printf@plt>
   30f9c:	e1a00000 	nop			; (mov r0, r0)
   30fa0:	e24bd008 	sub	sp, fp, #8
   30fa4:	e8bd8810 	pop	{r4, fp, pc}
   30fa8:	000483b4 	.word	0x000483b4
   30fac:	0004832c 	.word	0x0004832c
   30fb0:	00048348 	.word	0x00048348
   30fb4:	000483bc 	.word	0x000483bc
   30fb8:	00048358 	.word	0x00048358
   30fbc:	00049f00 	.word	0x00049f00
   30fc0:	00049f0c 	.word	0x00049f0c
   30fc4:	00049f38 	.word	0x00049f38
   30fc8:	0004a560 	.word	0x0004a560
   30fcc:	00049f64 	.word	0x00049f64
   30fd0:	0005c298 	.word	0x0005c298
   30fd4:	0004836c 	.word	0x0004836c
   30fd8:	00048388 	.word	0x00048388

00030fdc <TLC59711DmxParams::Save(char*, unsigned int, unsigned int&)>:
   30fdc:	e92d4800 	push	{fp, lr}
   30fe0:	e28db004 	add	fp, sp, #4
   30fe4:	e24dd018 	sub	sp, sp, #24
   30fe8:	e50b0008 	str	r0, [fp, #-8]
   30fec:	e50b100c 	str	r1, [fp, #-12]
   30ff0:	e50b2010 	str	r2, [fp, #-16]
   30ff4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   30ff8:	e3a0303f 	mov	r3, #63	; 0x3f
   30ffc:	e59f2060 	ldr	r2, [pc, #96]	; 31064 <TLC59711DmxParams::Save(char*, unsigned int, unsigned int&)+0x88>
   31000:	e59f1060 	ldr	r1, [pc, #96]	; 31068 <TLC59711DmxParams::Save(char*, unsigned int, unsigned int&)+0x8c>
   31004:	e59f0060 	ldr	r0, [pc, #96]	; 3106c <TLC59711DmxParams::Save(char*, unsigned int, unsigned int&)+0x90>
   31008:	ebff8079 	bl	111f4 <printf@plt>
   3100c:	e51b3008 	ldr	r3, [fp, #-8]
   31010:	e5933000 	ldr	r3, [r3]
   31014:	e3530000 	cmp	r3, #0
   31018:	1a000008 	bne	31040 <TLC59711DmxParams::Save(char*, unsigned int, unsigned int&)+0x64>
   3101c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   31020:	e3a02000 	mov	r2, #0
   31024:	e5832000 	str	r2, [r3]
   31028:	e3a03043 	mov	r3, #67	; 0x43
   3102c:	e59f2030 	ldr	r2, [pc, #48]	; 31064 <TLC59711DmxParams::Save(char*, unsigned int, unsigned int&)+0x88>
   31030:	e59f1030 	ldr	r1, [pc, #48]	; 31068 <TLC59711DmxParams::Save(char*, unsigned int, unsigned int&)+0x8c>
   31034:	e59f0034 	ldr	r0, [pc, #52]	; 31070 <TLC59711DmxParams::Save(char*, unsigned int, unsigned int&)+0x94>
   31038:	ebff806d 	bl	111f4 <printf@plt>
   3103c:	ea000006 	b	3105c <TLC59711DmxParams::Save(char*, unsigned int, unsigned int&)+0x80>
   31040:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   31044:	e58d3000 	str	r3, [sp]
   31048:	e51b3010 	ldr	r3, [fp, #-16]
   3104c:	e51b200c 	ldr	r2, [fp, #-12]
   31050:	e3a01000 	mov	r1, #0
   31054:	e51b0008 	ldr	r0, [fp, #-8]
   31058:	ebffff4f 	bl	30d9c <TLC59711DmxParams::Builder(TTLC59711DmxParams const*, char*, unsigned int, unsigned int&)>
   3105c:	e24bd004 	sub	sp, fp, #4
   31060:	e8bd8800 	pop	{fp, pc}
   31064:	00048414 	.word	0x00048414
   31068:	0004832c 	.word	0x0004832c
   3106c:	00048348 	.word	0x00048348
   31070:	00048388 	.word	0x00048388

00031074 <TLC59711Dmx::Print()>:
   31074:	e92d4800 	push	{fp, lr}
   31078:	e28db004 	add	fp, sp, #4
   3107c:	e24dd010 	sub	sp, sp, #16
   31080:	e50b0008 	str	r0, [fp, #-8]
   31084:	e59f00c0 	ldr	r0, [pc, #192]	; 3114c <TLC59711Dmx::Print()+0xd8>
   31088:	ebff8065 	bl	11224 <puts@plt>
   3108c:	e51b3008 	ldr	r3, [fp, #-8]
   31090:	e5933014 	ldr	r3, [r3, #20]
   31094:	e1a00003 	mov	r0, r3
   31098:	ebfffca7 	bl	3033c <TLC59711DmxParams::GetType(TTLC59711Type)>
   3109c:	e1a01000 	mov	r1, r0
   310a0:	e51b3008 	ldr	r3, [fp, #-8]
   310a4:	e5933014 	ldr	r3, [r3, #20]
   310a8:	e1a02003 	mov	r2, r3
   310ac:	e59f009c 	ldr	r0, [pc, #156]	; 31150 <TLC59711Dmx::Print()+0xdc>
   310b0:	ebff804f 	bl	111f4 <printf@plt>
   310b4:	e51b3008 	ldr	r3, [fp, #-8]
   310b8:	e5d33018 	ldrb	r3, [r3, #24]
   310bc:	e1a01003 	mov	r1, r3
   310c0:	e51b3008 	ldr	r3, [fp, #-8]
   310c4:	e5933014 	ldr	r3, [r3, #20]
   310c8:	e3530000 	cmp	r3, #0
   310cc:	1a000001 	bne	310d8 <TLC59711Dmx::Print()+0x64>
   310d0:	e59f307c 	ldr	r3, [pc, #124]	; 31154 <TLC59711Dmx::Print()+0xe0>
   310d4:	ea000000 	b	310dc <TLC59711Dmx::Print()+0x68>
   310d8:	e59f3078 	ldr	r3, [pc, #120]	; 31158 <TLC59711Dmx::Print()+0xe4>
   310dc:	e1a02003 	mov	r2, r3
   310e0:	e59f0074 	ldr	r0, [pc, #116]	; 3115c <TLC59711Dmx::Print()+0xe8>
   310e4:	ebff8042 	bl	111f4 <printf@plt>
   310e8:	e51b3008 	ldr	r3, [fp, #-8]
   310ec:	e5931010 	ldr	r1, [r3, #16]
   310f0:	e51b3008 	ldr	r3, [fp, #-8]
   310f4:	e5933010 	ldr	r3, [r3, #16]
   310f8:	e3530000 	cmp	r3, #0
   310fc:	1a000001 	bne	31108 <TLC59711Dmx::Print()+0x94>
   31100:	e59f2058 	ldr	r2, [pc, #88]	; 31160 <TLC59711Dmx::Print()+0xec>
   31104:	ea000000 	b	3110c <TLC59711Dmx::Print()+0x98>
   31108:	e59f2054 	ldr	r2, [pc, #84]	; 31164 <TLC59711Dmx::Print()+0xf0>
   3110c:	e59f3054 	ldr	r3, [pc, #84]	; 31168 <TLC59711Dmx::Print()+0xf4>
   31110:	e58d3000 	str	r3, [sp]
   31114:	e59f3050 	ldr	r3, [pc, #80]	; 3116c <TLC59711Dmx::Print()+0xf8>
   31118:	e59f0050 	ldr	r0, [pc, #80]	; 31170 <TLC59711Dmx::Print()+0xfc>
   3111c:	ebff8034 	bl	111f4 <printf@plt>
   31120:	e51b3008 	ldr	r3, [fp, #-8]
   31124:	e1d330b4 	ldrh	r3, [r3, #4]
   31128:	e1a01003 	mov	r1, r3
   3112c:	e51b3008 	ldr	r3, [fp, #-8]
   31130:	e1d330b6 	ldrh	r3, [r3, #6]
   31134:	e1a02003 	mov	r2, r3
   31138:	e59f0034 	ldr	r0, [pc, #52]	; 31174 <TLC59711Dmx::Print()+0x100>
   3113c:	ebff802c 	bl	111f4 <printf@plt>
   31140:	e1a00000 	nop			; (mov r0, r0)
   31144:	e24bd004 	sub	sp, fp, #4
   31148:	e8bd8800 	pop	{fp, pc}
   3114c:	0004842c 	.word	0x0004842c
   31150:	0004843c 	.word	0x0004843c
   31154:	00048450 	.word	0x00048450
   31158:	00048454 	.word	0x00048454
   3115c:	0004845c 	.word	0x0004845c
   31160:	0004846c 	.word	0x0004846c
   31164:	00048474 	.word	0x00048474
   31168:	00989680 	.word	0x00989680
   3116c:	004c4b40 	.word	0x004c4b40
   31170:	00048478 	.word	0x00048478
   31174:	000484ac 	.word	0x000484ac

00031178 <TLC59711::TLC59711(unsigned char, unsigned int)>:
   31178:	e92d4800 	push	{fp, lr}
   3117c:	e28db004 	add	fp, sp, #4
   31180:	e24dd018 	sub	sp, sp, #24
   31184:	e50b0010 	str	r0, [fp, #-16]
   31188:	e1a03001 	mov	r3, r1
   3118c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   31190:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   31194:	e51b3010 	ldr	r3, [fp, #-16]
   31198:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
   3119c:	e5c32000 	strb	r2, [r3]
   311a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   311a4:	e3530000 	cmp	r3, #0
   311a8:	0a000002 	beq	311b8 <TLC59711::TLC59711(unsigned char, unsigned int)+0x40>
   311ac:	e24b3018 	sub	r3, fp, #24
   311b0:	e5933000 	ldr	r3, [r3]
   311b4:	ea000000 	b	311bc <TLC59711::TLC59711(unsigned char, unsigned int)+0x44>
   311b8:	e59f322c 	ldr	r3, [pc, #556]	; 313ec <TLC59711::TLC59711(unsigned char, unsigned int)+0x274>
   311bc:	e51b2010 	ldr	r2, [fp, #-16]
   311c0:	e5823004 	str	r3, [r2, #4]
   311c4:	e51b3010 	ldr	r3, [fp, #-16]
   311c8:	e3a02000 	mov	r2, #0
   311cc:	e5832008 	str	r2, [r3, #8]
   311d0:	e51b3010 	ldr	r3, [fp, #-16]
   311d4:	e3a02000 	mov	r2, #0
   311d8:	e583200c 	str	r2, [r3, #12]
   311dc:	e51b3010 	ldr	r3, [fp, #-16]
   311e0:	e3a02000 	mov	r2, #0
   311e4:	e5832010 	str	r2, [r3, #16]
   311e8:	e51b3010 	ldr	r3, [fp, #-16]
   311ec:	e3a02000 	mov	r2, #0
   311f0:	e5832014 	str	r2, [r3, #20]
   311f4:	eb0041ba 	bl	418e4 <bcm2835_spi_begin>
   311f8:	e51b3010 	ldr	r3, [fp, #-16]
   311fc:	e5933004 	ldr	r3, [r3, #4]
   31200:	e59f21e8 	ldr	r2, [pc, #488]	; 313f0 <TLC59711::TLC59711(unsigned char, unsigned int)+0x278>
   31204:	e1530002 	cmp	r3, r2
   31208:	9a000002 	bls	31218 <TLC59711::TLC59711(unsigned char, unsigned int)+0xa0>
   3120c:	e51b3010 	ldr	r3, [fp, #-16]
   31210:	e59f21d8 	ldr	r2, [pc, #472]	; 313f0 <TLC59711::TLC59711(unsigned char, unsigned int)+0x278>
   31214:	e5832004 	str	r2, [r3, #4]
   31218:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   3121c:	e3530000 	cmp	r3, #0
   31220:	1a000001 	bne	3122c <TLC59711::TLC59711(unsigned char, unsigned int)+0xb4>
   31224:	e3a03001 	mov	r3, #1
   31228:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   3122c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
   31230:	e1a03002 	mov	r3, r2
   31234:	e1a03183 	lsl	r3, r3, #3
   31238:	e0433002 	sub	r3, r3, r2
   3123c:	e1a03083 	lsl	r3, r3, #1
   31240:	e1a02003 	mov	r2, r3
   31244:	e51b3010 	ldr	r3, [fp, #-16]
   31248:	e5832014 	str	r2, [r3, #20]
   3124c:	e51b3010 	ldr	r3, [fp, #-16]
   31250:	e5933014 	ldr	r3, [r3, #20]
   31254:	e3730113 	cmn	r3, #-1073741820	; 0xc0000004
   31258:	8a000001 	bhi	31264 <TLC59711::TLC59711(unsigned char, unsigned int)+0xec>
   3125c:	e1a03083 	lsl	r3, r3, #1
   31260:	ea000000 	b	31268 <TLC59711::TLC59711(unsigned char, unsigned int)+0xf0>
   31264:	e3e03000 	mvn	r3, #0
   31268:	e1a00003 	mov	r0, r3
   3126c:	ebff800d 	bl	112a8 <operator new[](unsigned int)@plt>
   31270:	e1a03000 	mov	r3, r0
   31274:	e1a02003 	mov	r2, r3
   31278:	e51b3010 	ldr	r3, [fp, #-16]
   3127c:	e583200c 	str	r2, [r3, #12]
   31280:	e51b3010 	ldr	r3, [fp, #-16]
   31284:	e593300c 	ldr	r3, [r3, #12]
   31288:	e3530000 	cmp	r3, #0
   3128c:	1a000004 	bne	312a4 <TLC59711::TLC59711(unsigned char, unsigned int)+0x12c>
   31290:	e59f315c 	ldr	r3, [pc, #348]	; 313f4 <TLC59711::TLC59711(unsigned char, unsigned int)+0x27c>
   31294:	e3a02052 	mov	r2, #82	; 0x52
   31298:	e59f1158 	ldr	r1, [pc, #344]	; 313f8 <TLC59711::TLC59711(unsigned char, unsigned int)+0x280>
   3129c:	e59f0158 	ldr	r0, [pc, #344]	; 313fc <TLC59711::TLC59711(unsigned char, unsigned int)+0x284>
   312a0:	ebff801b 	bl	11314 <__assert_fail@plt>
   312a4:	e51b3010 	ldr	r3, [fp, #-16]
   312a8:	e5933014 	ldr	r3, [r3, #20]
   312ac:	e3730113 	cmn	r3, #-1073741820	; 0xc0000004
   312b0:	8a000001 	bhi	312bc <TLC59711::TLC59711(unsigned char, unsigned int)+0x144>
   312b4:	e1a03083 	lsl	r3, r3, #1
   312b8:	ea000000 	b	312c0 <TLC59711::TLC59711(unsigned char, unsigned int)+0x148>
   312bc:	e3e03000 	mvn	r3, #0
   312c0:	e1a00003 	mov	r0, r3
   312c4:	ebff7ff7 	bl	112a8 <operator new[](unsigned int)@plt>
   312c8:	e1a03000 	mov	r3, r0
   312cc:	e1a02003 	mov	r2, r3
   312d0:	e51b3010 	ldr	r3, [fp, #-16]
   312d4:	e5832010 	str	r2, [r3, #16]
   312d8:	e51b3010 	ldr	r3, [fp, #-16]
   312dc:	e5933010 	ldr	r3, [r3, #16]
   312e0:	e3530000 	cmp	r3, #0
   312e4:	1a000004 	bne	312fc <TLC59711::TLC59711(unsigned char, unsigned int)+0x184>
   312e8:	e59f3104 	ldr	r3, [pc, #260]	; 313f4 <TLC59711::TLC59711(unsigned char, unsigned int)+0x27c>
   312ec:	e3a02055 	mov	r2, #85	; 0x55
   312f0:	e59f1100 	ldr	r1, [pc, #256]	; 313f8 <TLC59711::TLC59711(unsigned char, unsigned int)+0x280>
   312f4:	e59f0104 	ldr	r0, [pc, #260]	; 31400 <TLC59711::TLC59711(unsigned char, unsigned int)+0x288>
   312f8:	ebff8005 	bl	11314 <__assert_fail@plt>
   312fc:	e3a03000 	mov	r3, #0
   31300:	e50b3008 	str	r3, [fp, #-8]
   31304:	e51b3010 	ldr	r3, [fp, #-16]
   31308:	e5933014 	ldr	r3, [r3, #20]
   3130c:	e51b2008 	ldr	r2, [fp, #-8]
   31310:	e1520003 	cmp	r2, r3
   31314:	2a00000a 	bcs	31344 <TLC59711::TLC59711(unsigned char, unsigned int)+0x1cc>
   31318:	e51b3010 	ldr	r3, [fp, #-16]
   3131c:	e593200c 	ldr	r2, [r3, #12]
   31320:	e51b3008 	ldr	r3, [fp, #-8]
   31324:	e1a03083 	lsl	r3, r3, #1
   31328:	e0823003 	add	r3, r2, r3
   3132c:	e3a02000 	mov	r2, #0
   31330:	e1c320b0 	strh	r2, [r3]
   31334:	e51b3008 	ldr	r3, [fp, #-8]
   31338:	e2833001 	add	r3, r3, #1
   3133c:	e50b3008 	str	r3, [fp, #-8]
   31340:	eaffffef 	b	31304 <TLC59711::TLC59711(unsigned char, unsigned int)+0x18c>
   31344:	e51b3010 	ldr	r3, [fp, #-16]
   31348:	e5933008 	ldr	r3, [r3, #8]
   3134c:	e3832325 	orr	r2, r3, #-1811939328	; 0x94000000
   31350:	e51b3010 	ldr	r3, [fp, #-16]
   31354:	e5832008 	str	r2, [r3, #8]
   31358:	e3a01000 	mov	r1, #0
   3135c:	e51b0010 	ldr	r0, [fp, #-16]
   31360:	eb00027f 	bl	31d64 <TLC59711::SetOnOffTiming(bool)>
   31364:	e3a01000 	mov	r1, #0
   31368:	e51b0010 	ldr	r0, [fp, #-16]
   3136c:	eb000255 	bl	31cc8 <TLC59711::SetExternalClock(bool)>
   31370:	e3a01001 	mov	r1, #1
   31374:	e51b0010 	ldr	r0, [fp, #-16]
   31378:	eb00022b 	bl	31c2c <TLC59711::SetDisplayTimingReset(bool)>
   3137c:	e3a01001 	mov	r1, #1
   31380:	e51b0010 	ldr	r0, [fp, #-16]
   31384:	eb000201 	bl	31b90 <TLC59711::SetDisplayRepeat(bool)>
   31388:	e3a01000 	mov	r1, #0
   3138c:	e51b0010 	ldr	r0, [fp, #-16]
   31390:	eb0001d7 	bl	31af4 <TLC59711::SetBlank(bool)>
   31394:	e3a0107f 	mov	r1, #127	; 0x7f
   31398:	e51b0010 	ldr	r0, [fp, #-16]
   3139c:	eb000295 	bl	31df8 <TLC59711::SetGbcRed(unsigned char)>
   313a0:	e3a0107f 	mov	r1, #127	; 0x7f
   313a4:	e51b0010 	ldr	r0, [fp, #-16]
   313a8:	eb0002b7 	bl	31e8c <TLC59711::SetGbcGreen(unsigned char)>
   313ac:	e3a0107f 	mov	r1, #127	; 0x7f
   313b0:	e51b0010 	ldr	r0, [fp, #-16]
   313b4:	eb0002da 	bl	31f24 <TLC59711::SetGbcBlue(unsigned char)>
   313b8:	e51b3010 	ldr	r3, [fp, #-16]
   313bc:	e5930010 	ldr	r0, [r3, #16]
   313c0:	e51b3010 	ldr	r3, [fp, #-16]
   313c4:	e593100c 	ldr	r1, [r3, #12]
   313c8:	e51b3010 	ldr	r3, [fp, #-16]
   313cc:	e5933014 	ldr	r3, [r3, #20]
   313d0:	e1a03083 	lsl	r3, r3, #1
   313d4:	e1a02003 	mov	r2, r3
   313d8:	ebff8009 	bl	11404 <memcpy@plt>
   313dc:	e51b3010 	ldr	r3, [fp, #-16]
   313e0:	e1a00003 	mov	r0, r3
   313e4:	e24bd004 	sub	sp, fp, #4
   313e8:	e8bd8800 	pop	{fp, pc}
   313ec:	004c4b40 	.word	0x004c4b40
   313f0:	00989680 	.word	0x00989680
   313f4:	00048710 	.word	0x00048710
   313f8:	000484d4 	.word	0x000484d4
   313fc:	000484e8 	.word	0x000484e8
   31400:	00048500 	.word	0x00048500

00031404 <TLC59711::~TLC59711()>:
   31404:	e92d4800 	push	{fp, lr}
   31408:	e28db004 	add	fp, sp, #4
   3140c:	e24dd008 	sub	sp, sp, #8
   31410:	e50b0008 	str	r0, [fp, #-8]
   31414:	e51b3008 	ldr	r3, [fp, #-8]
   31418:	e593300c 	ldr	r3, [r3, #12]
   3141c:	e3530000 	cmp	r3, #0
   31420:	0a000003 	beq	31434 <TLC59711::~TLC59711()+0x30>
   31424:	e51b3008 	ldr	r3, [fp, #-8]
   31428:	e593300c 	ldr	r3, [r3, #12]
   3142c:	e1a00003 	mov	r0, r3
   31430:	ebff7fd8 	bl	11398 <operator delete[](void*)@plt>
   31434:	e51b3008 	ldr	r3, [fp, #-8]
   31438:	e3a02000 	mov	r2, #0
   3143c:	e583200c 	str	r2, [r3, #12]
   31440:	e51b3008 	ldr	r3, [fp, #-8]
   31444:	e1a00003 	mov	r0, r3
   31448:	e24bd004 	sub	sp, fp, #4
   3144c:	e8bd8800 	pop	{fp, pc}

00031450 <TLC59711::Get(unsigned int, unsigned short&)>:
   31450:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   31454:	e28db000 	add	fp, sp, #0
   31458:	e24dd01c 	sub	sp, sp, #28
   3145c:	e50b0010 	str	r0, [fp, #-16]
   31460:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   31464:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   31468:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3146c:	e59f2094 	ldr	r2, [pc, #148]	; 31508 <TLC59711::Get(unsigned int, unsigned short&)+0xb8>
   31470:	e0832392 	umull	r2, r3, r2, r3
   31474:	e1a031a3 	lsr	r3, r3, #3
   31478:	e50b3008 	str	r3, [fp, #-8]
   3147c:	e51b3010 	ldr	r3, [fp, #-16]
   31480:	e5d33000 	ldrb	r3, [r3]
   31484:	e1a02003 	mov	r2, r3
   31488:	e51b3008 	ldr	r3, [fp, #-8]
   3148c:	e1530002 	cmp	r3, r2
   31490:	2a000017 	bcs	314f4 <TLC59711::Get(unsigned int, unsigned short&)+0xa4>
   31494:	e51b2008 	ldr	r2, [fp, #-8]
   31498:	e1a03002 	mov	r3, r2
   3149c:	e1a03083 	lsl	r3, r3, #1
   314a0:	e0833002 	add	r3, r3, r2
   314a4:	e1a03103 	lsl	r3, r3, #2
   314a8:	e0833002 	add	r3, r3, r2
   314ac:	e1a03083 	lsl	r3, r3, #1
   314b0:	e1a02003 	mov	r2, r3
   314b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   314b8:	e0423003 	sub	r3, r2, r3
   314bc:	e283300d 	add	r3, r3, #13
   314c0:	e50b300c 	str	r3, [fp, #-12]
   314c4:	e51b3010 	ldr	r3, [fp, #-16]
   314c8:	e593200c 	ldr	r2, [r3, #12]
   314cc:	e51b300c 	ldr	r3, [fp, #-12]
   314d0:	e1a03083 	lsl	r3, r3, #1
   314d4:	e0823003 	add	r3, r2, r3
   314d8:	e1d330b0 	ldrh	r3, [r3]
   314dc:	e6bf3fb3 	rev16	r3, r3
   314e0:	e6ff2073 	uxth	r2, r3
   314e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   314e8:	e1c320b0 	strh	r2, [r3]
   314ec:	e3a03001 	mov	r3, #1
   314f0:	ea000000 	b	314f8 <TLC59711::Get(unsigned int, unsigned short&)+0xa8>
   314f4:	e3a03000 	mov	r3, #0
   314f8:	e1a00003 	mov	r0, r3
   314fc:	e28bd000 	add	sp, fp, #0
   31500:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   31504:	e12fff1e 	bx	lr
   31508:	aaaaaaab 	.word	0xaaaaaaab

0003150c <TLC59711::Set(unsigned int, unsigned short)>:
   3150c:	e92d4800 	push	{fp, lr}
   31510:	e28db004 	add	fp, sp, #4
   31514:	e24dd018 	sub	sp, sp, #24
   31518:	e50b0010 	str	r0, [fp, #-16]
   3151c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   31520:	e1a03002 	mov	r3, r2
   31524:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
   31528:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3152c:	e59f20a0 	ldr	r2, [pc, #160]	; 315d4 <TLC59711::Set(unsigned int, unsigned short)+0xc8>
   31530:	e0832392 	umull	r2, r3, r2, r3
   31534:	e1a031a3 	lsr	r3, r3, #3
   31538:	e50b3008 	str	r3, [fp, #-8]
   3153c:	e51b3010 	ldr	r3, [fp, #-16]
   31540:	e5d33000 	ldrb	r3, [r3]
   31544:	e1a02003 	mov	r2, r3
   31548:	e51b3008 	ldr	r3, [fp, #-8]
   3154c:	e1530002 	cmp	r3, r2
   31550:	2a000015 	bcs	315ac <TLC59711::Set(unsigned int, unsigned short)+0xa0>
   31554:	e51b2008 	ldr	r2, [fp, #-8]
   31558:	e1a03002 	mov	r3, r2
   3155c:	e1a03083 	lsl	r3, r3, #1
   31560:	e0833002 	add	r3, r3, r2
   31564:	e1a03103 	lsl	r3, r3, #2
   31568:	e0833002 	add	r3, r3, r2
   3156c:	e1a03083 	lsl	r3, r3, #1
   31570:	e1a02003 	mov	r2, r3
   31574:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   31578:	e0423003 	sub	r3, r2, r3
   3157c:	e283300d 	add	r3, r3, #13
   31580:	e50b300c 	str	r3, [fp, #-12]
   31584:	e51b3010 	ldr	r3, [fp, #-16]
   31588:	e593200c 	ldr	r2, [r3, #12]
   3158c:	e51b300c 	ldr	r3, [fp, #-12]
   31590:	e1a03083 	lsl	r3, r3, #1
   31594:	e0823003 	add	r3, r2, r3
   31598:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
   3159c:	e6bf2fb2 	rev16	r2, r2
   315a0:	e6ff2072 	uxth	r2, r2
   315a4:	e1c320b0 	strh	r2, [r3]
   315a8:	ea000006 	b	315c8 <TLC59711::Set(unsigned int, unsigned short)+0xbc>
   315ac:	e51b3010 	ldr	r3, [fp, #-16]
   315b0:	e5d33000 	ldrb	r3, [r3]
   315b4:	e1a01003 	mov	r1, r3
   315b8:	e51b2008 	ldr	r2, [fp, #-8]
   315bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   315c0:	e59f0010 	ldr	r0, [pc, #16]	; 315d8 <TLC59711::Set(unsigned int, unsigned short)+0xcc>
   315c4:	ebff7f0a 	bl	111f4 <printf@plt>
   315c8:	e1a00000 	nop			; (mov r0, r0)
   315cc:	e24bd004 	sub	sp, fp, #4
   315d0:	e8bd8800 	pop	{fp, pc}
   315d4:	aaaaaaab 	.word	0xaaaaaaab
   315d8:	00048520 	.word	0x00048520

000315dc <TLC59711::GetRgb(unsigned char, unsigned short&, unsigned short&, unsigned short&)>:
   315dc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   315e0:	e28db000 	add	fp, sp, #0
   315e4:	e24dd01c 	sub	sp, sp, #28
   315e8:	e50b0010 	str	r0, [fp, #-16]
   315ec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   315f0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   315f4:	e1a03001 	mov	r3, r1
   315f8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   315fc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   31600:	e1a03123 	lsr	r3, r3, #2
   31604:	e6ef3073 	uxtb	r3, r3
   31608:	e50b3008 	str	r3, [fp, #-8]
   3160c:	e51b3010 	ldr	r3, [fp, #-16]
   31610:	e5d33000 	ldrb	r3, [r3]
   31614:	e1a02003 	mov	r2, r3
   31618:	e51b3008 	ldr	r3, [fp, #-8]
   3161c:	e1530002 	cmp	r3, r2
   31620:	2a000033 	bcs	316f4 <TLC59711::GetRgb(unsigned char, unsigned short&, unsigned short&, unsigned short&)+0x118>
   31624:	e51b2008 	ldr	r2, [fp, #-8]
   31628:	e1a03002 	mov	r3, r2
   3162c:	e1a03183 	lsl	r3, r3, #3
   31630:	e0433002 	sub	r3, r3, r2
   31634:	e1a03083 	lsl	r3, r3, #1
   31638:	e1a01003 	mov	r1, r3
   3163c:	e51b3008 	ldr	r3, [fp, #-8]
   31640:	e1a02103 	lsl	r2, r3, #2
   31644:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   31648:	e0422003 	sub	r2, r2, r3
   3164c:	e1a03002 	mov	r3, r2
   31650:	e1a03083 	lsl	r3, r3, #1
   31654:	e0833002 	add	r3, r3, r2
   31658:	e0813003 	add	r3, r1, r3
   3165c:	e283300b 	add	r3, r3, #11
   31660:	e50b300c 	str	r3, [fp, #-12]
   31664:	e51b3010 	ldr	r3, [fp, #-16]
   31668:	e593200c 	ldr	r2, [r3, #12]
   3166c:	e51b300c 	ldr	r3, [fp, #-12]
   31670:	e2831001 	add	r1, r3, #1
   31674:	e50b100c 	str	r1, [fp, #-12]
   31678:	e1a03083 	lsl	r3, r3, #1
   3167c:	e0823003 	add	r3, r2, r3
   31680:	e1d330b0 	ldrh	r3, [r3]
   31684:	e6bf3fb3 	rev16	r3, r3
   31688:	e6ff2073 	uxth	r2, r3
   3168c:	e59b3004 	ldr	r3, [fp, #4]
   31690:	e1c320b0 	strh	r2, [r3]
   31694:	e51b3010 	ldr	r3, [fp, #-16]
   31698:	e593200c 	ldr	r2, [r3, #12]
   3169c:	e51b300c 	ldr	r3, [fp, #-12]
   316a0:	e2831001 	add	r1, r3, #1
   316a4:	e50b100c 	str	r1, [fp, #-12]
   316a8:	e1a03083 	lsl	r3, r3, #1
   316ac:	e0823003 	add	r3, r2, r3
   316b0:	e1d330b0 	ldrh	r3, [r3]
   316b4:	e6bf3fb3 	rev16	r3, r3
   316b8:	e6ff2073 	uxth	r2, r3
   316bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   316c0:	e1c320b0 	strh	r2, [r3]
   316c4:	e51b3010 	ldr	r3, [fp, #-16]
   316c8:	e593200c 	ldr	r2, [r3, #12]
   316cc:	e51b300c 	ldr	r3, [fp, #-12]
   316d0:	e1a03083 	lsl	r3, r3, #1
   316d4:	e0823003 	add	r3, r2, r3
   316d8:	e1d330b0 	ldrh	r3, [r3]
   316dc:	e6bf3fb3 	rev16	r3, r3
   316e0:	e6ff2073 	uxth	r2, r3
   316e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   316e8:	e1c320b0 	strh	r2, [r3]
   316ec:	e3a03001 	mov	r3, #1
   316f0:	ea000000 	b	316f8 <TLC59711::GetRgb(unsigned char, unsigned short&, unsigned short&, unsigned short&)+0x11c>
   316f4:	e3a03000 	mov	r3, #0
   316f8:	e1a00003 	mov	r0, r3
   316fc:	e28bd000 	add	sp, fp, #0
   31700:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   31704:	e12fff1e 	bx	lr

00031708 <TLC59711::Set(unsigned int, unsigned char)>:
   31708:	e92d4800 	push	{fp, lr}
   3170c:	e28db004 	add	fp, sp, #4
   31710:	e24dd018 	sub	sp, sp, #24
   31714:	e50b0010 	str	r0, [fp, #-16]
   31718:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   3171c:	e1a03002 	mov	r3, r2
   31720:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   31724:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   31728:	e59f20b4 	ldr	r2, [pc, #180]	; 317e4 <TLC59711::Set(unsigned int, unsigned char)+0xdc>
   3172c:	e0832392 	umull	r2, r3, r2, r3
   31730:	e1a031a3 	lsr	r3, r3, #3
   31734:	e50b3008 	str	r3, [fp, #-8]
   31738:	e51b3010 	ldr	r3, [fp, #-16]
   3173c:	e5d33000 	ldrb	r3, [r3]
   31740:	e1a02003 	mov	r2, r3
   31744:	e51b3008 	ldr	r3, [fp, #-8]
   31748:	e1530002 	cmp	r3, r2
   3174c:	2a00001a 	bcs	317bc <TLC59711::Set(unsigned int, unsigned char)+0xb4>
   31750:	e51b2008 	ldr	r2, [fp, #-8]
   31754:	e1a03002 	mov	r3, r2
   31758:	e1a03083 	lsl	r3, r3, #1
   3175c:	e0833002 	add	r3, r3, r2
   31760:	e1a03103 	lsl	r3, r3, #2
   31764:	e0833002 	add	r3, r3, r2
   31768:	e1a03083 	lsl	r3, r3, #1
   3176c:	e1a02003 	mov	r2, r3
   31770:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   31774:	e0423003 	sub	r3, r2, r3
   31778:	e283300d 	add	r3, r3, #13
   3177c:	e50b300c 	str	r3, [fp, #-12]
   31780:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   31784:	e1a03403 	lsl	r3, r3, #8
   31788:	e6bf2073 	sxth	r2, r3
   3178c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   31790:	e6bf3073 	sxth	r3, r3
   31794:	e1823003 	orr	r3, r2, r3
   31798:	e6bf1073 	sxth	r1, r3
   3179c:	e51b3010 	ldr	r3, [fp, #-16]
   317a0:	e593200c 	ldr	r2, [r3, #12]
   317a4:	e51b300c 	ldr	r3, [fp, #-12]
   317a8:	e1a03083 	lsl	r3, r3, #1
   317ac:	e0823003 	add	r3, r2, r3
   317b0:	e6ff2071 	uxth	r2, r1
   317b4:	e1c320b0 	strh	r2, [r3]
   317b8:	ea000006 	b	317d8 <TLC59711::Set(unsigned int, unsigned char)+0xd0>
   317bc:	e51b3010 	ldr	r3, [fp, #-16]
   317c0:	e5d33000 	ldrb	r3, [r3]
   317c4:	e1a01003 	mov	r1, r3
   317c8:	e51b2008 	ldr	r2, [fp, #-8]
   317cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   317d0:	e59f0010 	ldr	r0, [pc, #16]	; 317e8 <TLC59711::Set(unsigned int, unsigned char)+0xe0>
   317d4:	ebff7e86 	bl	111f4 <printf@plt>
   317d8:	e1a00000 	nop			; (mov r0, r0)
   317dc:	e24bd004 	sub	sp, fp, #4
   317e0:	e8bd8800 	pop	{fp, pc}
   317e4:	aaaaaaab 	.word	0xaaaaaaab
   317e8:	00048520 	.word	0x00048520

000317ec <TLC59711::SetRgb(unsigned char, unsigned short, unsigned short, unsigned short)>:
   317ec:	e92d4800 	push	{fp, lr}
   317f0:	e28db004 	add	fp, sp, #4
   317f4:	e24dd018 	sub	sp, sp, #24
   317f8:	e50b0010 	str	r0, [fp, #-16]
   317fc:	e1a00001 	mov	r0, r1
   31800:	e1a01002 	mov	r1, r2
   31804:	e1a02003 	mov	r2, r3
   31808:	e1a03000 	mov	r3, r0
   3180c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   31810:	e1a03001 	mov	r3, r1
   31814:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
   31818:	e1a03002 	mov	r3, r2
   3181c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
   31820:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   31824:	e1a03123 	lsr	r3, r3, #2
   31828:	e6ef3073 	uxtb	r3, r3
   3182c:	e50b3008 	str	r3, [fp, #-8]
   31830:	e51b3010 	ldr	r3, [fp, #-16]
   31834:	e5d33000 	ldrb	r3, [r3]
   31838:	e1a02003 	mov	r2, r3
   3183c:	e51b3008 	ldr	r3, [fp, #-8]
   31840:	e1530002 	cmp	r3, r2
   31844:	2a00002f 	bcs	31908 <TLC59711::SetRgb(unsigned char, unsigned short, unsigned short, unsigned short)+0x11c>
   31848:	e51b2008 	ldr	r2, [fp, #-8]
   3184c:	e1a03002 	mov	r3, r2
   31850:	e1a03183 	lsl	r3, r3, #3
   31854:	e0433002 	sub	r3, r3, r2
   31858:	e1a03083 	lsl	r3, r3, #1
   3185c:	e1a01003 	mov	r1, r3
   31860:	e51b3008 	ldr	r3, [fp, #-8]
   31864:	e1a02103 	lsl	r2, r3, #2
   31868:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   3186c:	e0422003 	sub	r2, r2, r3
   31870:	e1a03002 	mov	r3, r2
   31874:	e1a03083 	lsl	r3, r3, #1
   31878:	e0833002 	add	r3, r3, r2
   3187c:	e0813003 	add	r3, r1, r3
   31880:	e283300b 	add	r3, r3, #11
   31884:	e50b300c 	str	r3, [fp, #-12]
   31888:	e51b3010 	ldr	r3, [fp, #-16]
   3188c:	e593200c 	ldr	r2, [r3, #12]
   31890:	e51b300c 	ldr	r3, [fp, #-12]
   31894:	e2831001 	add	r1, r3, #1
   31898:	e50b100c 	str	r1, [fp, #-12]
   3189c:	e1a03083 	lsl	r3, r3, #1
   318a0:	e0823003 	add	r3, r2, r3
   318a4:	e1db20b4 	ldrh	r2, [fp, #4]
   318a8:	e6bf2fb2 	rev16	r2, r2
   318ac:	e6ff2072 	uxth	r2, r2
   318b0:	e1c320b0 	strh	r2, [r3]
   318b4:	e51b3010 	ldr	r3, [fp, #-16]
   318b8:	e593200c 	ldr	r2, [r3, #12]
   318bc:	e51b300c 	ldr	r3, [fp, #-12]
   318c0:	e2831001 	add	r1, r3, #1
   318c4:	e50b100c 	str	r1, [fp, #-12]
   318c8:	e1a03083 	lsl	r3, r3, #1
   318cc:	e0823003 	add	r3, r2, r3
   318d0:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
   318d4:	e6bf2fb2 	rev16	r2, r2
   318d8:	e6ff2072 	uxth	r2, r2
   318dc:	e1c320b0 	strh	r2, [r3]
   318e0:	e51b3010 	ldr	r3, [fp, #-16]
   318e4:	e593200c 	ldr	r2, [r3, #12]
   318e8:	e51b300c 	ldr	r3, [fp, #-12]
   318ec:	e1a03083 	lsl	r3, r3, #1
   318f0:	e0823003 	add	r3, r2, r3
   318f4:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
   318f8:	e6bf2fb2 	rev16	r2, r2
   318fc:	e6ff2072 	uxth	r2, r2
   31900:	e1c320b0 	strh	r2, [r3]
   31904:	ea000006 	b	31924 <TLC59711::SetRgb(unsigned char, unsigned short, unsigned short, unsigned short)+0x138>
   31908:	e51b3010 	ldr	r3, [fp, #-16]
   3190c:	e5d33000 	ldrb	r3, [r3]
   31910:	e1a01003 	mov	r1, r3
   31914:	e51b2008 	ldr	r2, [fp, #-8]
   31918:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   3191c:	e59f000c 	ldr	r0, [pc, #12]	; 31930 <TLC59711::SetRgb(unsigned char, unsigned short, unsigned short, unsigned short)+0x144>
   31920:	ebff7e33 	bl	111f4 <printf@plt>
   31924:	e1a00000 	nop			; (mov r0, r0)
   31928:	e24bd004 	sub	sp, fp, #4
   3192c:	e8bd8800 	pop	{fp, pc}
   31930:	00048550 	.word	0x00048550

00031934 <TLC59711::SetRgb(unsigned char, unsigned char, unsigned char, unsigned char)>:
   31934:	e92d4800 	push	{fp, lr}
   31938:	e28db004 	add	fp, sp, #4
   3193c:	e24dd010 	sub	sp, sp, #16
   31940:	e50b0010 	str	r0, [fp, #-16]
   31944:	e1a00001 	mov	r0, r1
   31948:	e1a01002 	mov	r1, r2
   3194c:	e1a02003 	mov	r2, r3
   31950:	e1a03000 	mov	r3, r0
   31954:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   31958:	e1a03001 	mov	r3, r1
   3195c:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
   31960:	e1a03002 	mov	r3, r2
   31964:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
   31968:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   3196c:	e1a03123 	lsr	r3, r3, #2
   31970:	e6ef3073 	uxtb	r3, r3
   31974:	e50b3008 	str	r3, [fp, #-8]
   31978:	e51b3010 	ldr	r3, [fp, #-16]
   3197c:	e5d33000 	ldrb	r3, [r3]
   31980:	e1a02003 	mov	r2, r3
   31984:	e51b3008 	ldr	r3, [fp, #-8]
   31988:	e1530002 	cmp	r3, r2
   3198c:	2a00003e 	bcs	31a8c <TLC59711::SetRgb(unsigned char, unsigned char, unsigned char, unsigned char)+0x158>
   31990:	e51b2008 	ldr	r2, [fp, #-8]
   31994:	e1a03002 	mov	r3, r2
   31998:	e1a03183 	lsl	r3, r3, #3
   3199c:	e0433002 	sub	r3, r3, r2
   319a0:	e1a03083 	lsl	r3, r3, #1
   319a4:	e1a01003 	mov	r1, r3
   319a8:	e51b3008 	ldr	r3, [fp, #-8]
   319ac:	e1a02103 	lsl	r2, r3, #2
   319b0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   319b4:	e0422003 	sub	r2, r2, r3
   319b8:	e1a03002 	mov	r3, r2
   319bc:	e1a03083 	lsl	r3, r3, #1
   319c0:	e0833002 	add	r3, r3, r2
   319c4:	e0813003 	add	r3, r1, r3
   319c8:	e283300b 	add	r3, r3, #11
   319cc:	e50b300c 	str	r3, [fp, #-12]
   319d0:	e5db3004 	ldrb	r3, [fp, #4]
   319d4:	e1a03403 	lsl	r3, r3, #8
   319d8:	e6bf2073 	sxth	r2, r3
   319dc:	e5db3004 	ldrb	r3, [fp, #4]
   319e0:	e6bf3073 	sxth	r3, r3
   319e4:	e1823003 	orr	r3, r2, r3
   319e8:	e6bf0073 	sxth	r0, r3
   319ec:	e51b3010 	ldr	r3, [fp, #-16]
   319f0:	e593200c 	ldr	r2, [r3, #12]
   319f4:	e51b300c 	ldr	r3, [fp, #-12]
   319f8:	e2831001 	add	r1, r3, #1
   319fc:	e50b100c 	str	r1, [fp, #-12]
   31a00:	e1a03083 	lsl	r3, r3, #1
   31a04:	e0823003 	add	r3, r2, r3
   31a08:	e6ff2070 	uxth	r2, r0
   31a0c:	e1c320b0 	strh	r2, [r3]
   31a10:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
   31a14:	e1a03403 	lsl	r3, r3, #8
   31a18:	e6bf2073 	sxth	r2, r3
   31a1c:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
   31a20:	e6bf3073 	sxth	r3, r3
   31a24:	e1823003 	orr	r3, r2, r3
   31a28:	e6bf0073 	sxth	r0, r3
   31a2c:	e51b3010 	ldr	r3, [fp, #-16]
   31a30:	e593200c 	ldr	r2, [r3, #12]
   31a34:	e51b300c 	ldr	r3, [fp, #-12]
   31a38:	e2831001 	add	r1, r3, #1
   31a3c:	e50b100c 	str	r1, [fp, #-12]
   31a40:	e1a03083 	lsl	r3, r3, #1
   31a44:	e0823003 	add	r3, r2, r3
   31a48:	e6ff2070 	uxth	r2, r0
   31a4c:	e1c320b0 	strh	r2, [r3]
   31a50:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
   31a54:	e1a03403 	lsl	r3, r3, #8
   31a58:	e6bf2073 	sxth	r2, r3
   31a5c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
   31a60:	e6bf3073 	sxth	r3, r3
   31a64:	e1823003 	orr	r3, r2, r3
   31a68:	e6bf1073 	sxth	r1, r3
   31a6c:	e51b3010 	ldr	r3, [fp, #-16]
   31a70:	e593200c 	ldr	r2, [r3, #12]
   31a74:	e51b300c 	ldr	r3, [fp, #-12]
   31a78:	e1a03083 	lsl	r3, r3, #1
   31a7c:	e0823003 	add	r3, r2, r3
   31a80:	e6ff2071 	uxth	r2, r1
   31a84:	e1c320b0 	strh	r2, [r3]
   31a88:	ea000006 	b	31aa8 <TLC59711::SetRgb(unsigned char, unsigned char, unsigned char, unsigned char)+0x174>
   31a8c:	e51b3010 	ldr	r3, [fp, #-16]
   31a90:	e5d33000 	ldrb	r3, [r3]
   31a94:	e1a01003 	mov	r1, r3
   31a98:	e51b2008 	ldr	r2, [fp, #-8]
   31a9c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   31aa0:	e59f000c 	ldr	r0, [pc, #12]	; 31ab4 <TLC59711::SetRgb(unsigned char, unsigned char, unsigned char, unsigned char)+0x180>
   31aa4:	ebff7dd2 	bl	111f4 <printf@plt>
   31aa8:	e1a00000 	nop			; (mov r0, r0)
   31aac:	e24bd004 	sub	sp, fp, #4
   31ab0:	e8bd8800 	pop	{fp, pc}
   31ab4:	00048550 	.word	0x00048550

00031ab8 <TLC59711::GetBlank() const>:
   31ab8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   31abc:	e28db000 	add	fp, sp, #0
   31ac0:	e24dd00c 	sub	sp, sp, #12
   31ac4:	e50b0008 	str	r0, [fp, #-8]
   31ac8:	e51b3008 	ldr	r3, [fp, #-8]
   31acc:	e5933008 	ldr	r3, [r3, #8]
   31ad0:	e2033602 	and	r3, r3, #2097152	; 0x200000
   31ad4:	e3530000 	cmp	r3, #0
   31ad8:	13a03001 	movne	r3, #1
   31adc:	03a03000 	moveq	r3, #0
   31ae0:	e6ef3073 	uxtb	r3, r3
   31ae4:	e1a00003 	mov	r0, r3
   31ae8:	e28bd000 	add	sp, fp, #0
   31aec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   31af0:	e12fff1e 	bx	lr

00031af4 <TLC59711::SetBlank(bool)>:
   31af4:	e92d4800 	push	{fp, lr}
   31af8:	e28db004 	add	fp, sp, #4
   31afc:	e24dd008 	sub	sp, sp, #8
   31b00:	e50b0008 	str	r0, [fp, #-8]
   31b04:	e1a03001 	mov	r3, r1
   31b08:	e54b3009 	strb	r3, [fp, #-9]
   31b0c:	e51b3008 	ldr	r3, [fp, #-8]
   31b10:	e5933008 	ldr	r3, [r3, #8]
   31b14:	e3c32602 	bic	r2, r3, #2097152	; 0x200000
   31b18:	e51b3008 	ldr	r3, [fp, #-8]
   31b1c:	e5832008 	str	r2, [r3, #8]
   31b20:	e55b3009 	ldrb	r3, [fp, #-9]
   31b24:	e3530000 	cmp	r3, #0
   31b28:	0a000004 	beq	31b40 <TLC59711::SetBlank(bool)+0x4c>
   31b2c:	e51b3008 	ldr	r3, [fp, #-8]
   31b30:	e5933008 	ldr	r3, [r3, #8]
   31b34:	e3832602 	orr	r2, r3, #2097152	; 0x200000
   31b38:	e51b3008 	ldr	r3, [fp, #-8]
   31b3c:	e5832008 	str	r2, [r3, #8]
   31b40:	e51b0008 	ldr	r0, [fp, #-8]
   31b44:	eb00010e 	bl	31f84 <TLC59711::UpdateFirst32()>
   31b48:	e1a00000 	nop			; (mov r0, r0)
   31b4c:	e24bd004 	sub	sp, fp, #4
   31b50:	e8bd8800 	pop	{fp, pc}

00031b54 <TLC59711::GetDisplayRepeat() const>:
   31b54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   31b58:	e28db000 	add	fp, sp, #0
   31b5c:	e24dd00c 	sub	sp, sp, #12
   31b60:	e50b0008 	str	r0, [fp, #-8]
   31b64:	e51b3008 	ldr	r3, [fp, #-8]
   31b68:	e5933008 	ldr	r3, [r3, #8]
   31b6c:	e2033501 	and	r3, r3, #4194304	; 0x400000
   31b70:	e3530000 	cmp	r3, #0
   31b74:	13a03001 	movne	r3, #1
   31b78:	03a03000 	moveq	r3, #0
   31b7c:	e6ef3073 	uxtb	r3, r3
   31b80:	e1a00003 	mov	r0, r3
   31b84:	e28bd000 	add	sp, fp, #0
   31b88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   31b8c:	e12fff1e 	bx	lr

00031b90 <TLC59711::SetDisplayRepeat(bool)>:
   31b90:	e92d4800 	push	{fp, lr}
   31b94:	e28db004 	add	fp, sp, #4
   31b98:	e24dd008 	sub	sp, sp, #8
   31b9c:	e50b0008 	str	r0, [fp, #-8]
   31ba0:	e1a03001 	mov	r3, r1
   31ba4:	e54b3009 	strb	r3, [fp, #-9]
   31ba8:	e51b3008 	ldr	r3, [fp, #-8]
   31bac:	e5933008 	ldr	r3, [r3, #8]
   31bb0:	e3c32501 	bic	r2, r3, #4194304	; 0x400000
   31bb4:	e51b3008 	ldr	r3, [fp, #-8]
   31bb8:	e5832008 	str	r2, [r3, #8]
   31bbc:	e55b3009 	ldrb	r3, [fp, #-9]
   31bc0:	e3530000 	cmp	r3, #0
   31bc4:	0a000004 	beq	31bdc <TLC59711::SetDisplayRepeat(bool)+0x4c>
   31bc8:	e51b3008 	ldr	r3, [fp, #-8]
   31bcc:	e5933008 	ldr	r3, [r3, #8]
   31bd0:	e3832501 	orr	r2, r3, #4194304	; 0x400000
   31bd4:	e51b3008 	ldr	r3, [fp, #-8]
   31bd8:	e5832008 	str	r2, [r3, #8]
   31bdc:	e51b0008 	ldr	r0, [fp, #-8]
   31be0:	eb0000e7 	bl	31f84 <TLC59711::UpdateFirst32()>
   31be4:	e1a00000 	nop			; (mov r0, r0)
   31be8:	e24bd004 	sub	sp, fp, #4
   31bec:	e8bd8800 	pop	{fp, pc}

00031bf0 <TLC59711::GetDisplayTimingReset() const>:
   31bf0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   31bf4:	e28db000 	add	fp, sp, #0
   31bf8:	e24dd00c 	sub	sp, sp, #12
   31bfc:	e50b0008 	str	r0, [fp, #-8]
   31c00:	e51b3008 	ldr	r3, [fp, #-8]
   31c04:	e5933008 	ldr	r3, [r3, #8]
   31c08:	e2033502 	and	r3, r3, #8388608	; 0x800000
   31c0c:	e3530000 	cmp	r3, #0
   31c10:	13a03001 	movne	r3, #1
   31c14:	03a03000 	moveq	r3, #0
   31c18:	e6ef3073 	uxtb	r3, r3
   31c1c:	e1a00003 	mov	r0, r3
   31c20:	e28bd000 	add	sp, fp, #0
   31c24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   31c28:	e12fff1e 	bx	lr

00031c2c <TLC59711::SetDisplayTimingReset(bool)>:
   31c2c:	e92d4800 	push	{fp, lr}
   31c30:	e28db004 	add	fp, sp, #4
   31c34:	e24dd008 	sub	sp, sp, #8
   31c38:	e50b0008 	str	r0, [fp, #-8]
   31c3c:	e1a03001 	mov	r3, r1
   31c40:	e54b3009 	strb	r3, [fp, #-9]
   31c44:	e51b3008 	ldr	r3, [fp, #-8]
   31c48:	e5933008 	ldr	r3, [r3, #8]
   31c4c:	e3c32502 	bic	r2, r3, #8388608	; 0x800000
   31c50:	e51b3008 	ldr	r3, [fp, #-8]
   31c54:	e5832008 	str	r2, [r3, #8]
   31c58:	e55b3009 	ldrb	r3, [fp, #-9]
   31c5c:	e3530000 	cmp	r3, #0
   31c60:	0a000004 	beq	31c78 <TLC59711::SetDisplayTimingReset(bool)+0x4c>
   31c64:	e51b3008 	ldr	r3, [fp, #-8]
   31c68:	e5933008 	ldr	r3, [r3, #8]
   31c6c:	e3832502 	orr	r2, r3, #8388608	; 0x800000
   31c70:	e51b3008 	ldr	r3, [fp, #-8]
   31c74:	e5832008 	str	r2, [r3, #8]
   31c78:	e51b0008 	ldr	r0, [fp, #-8]
   31c7c:	eb0000c0 	bl	31f84 <TLC59711::UpdateFirst32()>
   31c80:	e1a00000 	nop			; (mov r0, r0)
   31c84:	e24bd004 	sub	sp, fp, #4
   31c88:	e8bd8800 	pop	{fp, pc}

00031c8c <TLC59711::GetExternalClock() const>:
   31c8c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   31c90:	e28db000 	add	fp, sp, #0
   31c94:	e24dd00c 	sub	sp, sp, #12
   31c98:	e50b0008 	str	r0, [fp, #-8]
   31c9c:	e51b3008 	ldr	r3, [fp, #-8]
   31ca0:	e5933008 	ldr	r3, [r3, #8]
   31ca4:	e2033401 	and	r3, r3, #16777216	; 0x1000000
   31ca8:	e3530000 	cmp	r3, #0
   31cac:	13a03001 	movne	r3, #1
   31cb0:	03a03000 	moveq	r3, #0
   31cb4:	e6ef3073 	uxtb	r3, r3
   31cb8:	e1a00003 	mov	r0, r3
   31cbc:	e28bd000 	add	sp, fp, #0
   31cc0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   31cc4:	e12fff1e 	bx	lr

00031cc8 <TLC59711::SetExternalClock(bool)>:
   31cc8:	e92d4800 	push	{fp, lr}
   31ccc:	e28db004 	add	fp, sp, #4
   31cd0:	e24dd008 	sub	sp, sp, #8
   31cd4:	e50b0008 	str	r0, [fp, #-8]
   31cd8:	e1a03001 	mov	r3, r1
   31cdc:	e54b3009 	strb	r3, [fp, #-9]
   31ce0:	e51b3008 	ldr	r3, [fp, #-8]
   31ce4:	e5933008 	ldr	r3, [r3, #8]
   31ce8:	e3c32401 	bic	r2, r3, #16777216	; 0x1000000
   31cec:	e51b3008 	ldr	r3, [fp, #-8]
   31cf0:	e5832008 	str	r2, [r3, #8]
   31cf4:	e55b3009 	ldrb	r3, [fp, #-9]
   31cf8:	e3530000 	cmp	r3, #0
   31cfc:	0a000004 	beq	31d14 <TLC59711::SetExternalClock(bool)+0x4c>
   31d00:	e51b3008 	ldr	r3, [fp, #-8]
   31d04:	e5933008 	ldr	r3, [r3, #8]
   31d08:	e3832401 	orr	r2, r3, #16777216	; 0x1000000
   31d0c:	e51b3008 	ldr	r3, [fp, #-8]
   31d10:	e5832008 	str	r2, [r3, #8]
   31d14:	e51b0008 	ldr	r0, [fp, #-8]
   31d18:	eb000099 	bl	31f84 <TLC59711::UpdateFirst32()>
   31d1c:	e1a00000 	nop			; (mov r0, r0)
   31d20:	e24bd004 	sub	sp, fp, #4
   31d24:	e8bd8800 	pop	{fp, pc}

00031d28 <TLC59711::GetOnOffTiming() const>:
   31d28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   31d2c:	e28db000 	add	fp, sp, #0
   31d30:	e24dd00c 	sub	sp, sp, #12
   31d34:	e50b0008 	str	r0, [fp, #-8]
   31d38:	e51b3008 	ldr	r3, [fp, #-8]
   31d3c:	e5933008 	ldr	r3, [r3, #8]
   31d40:	e2033402 	and	r3, r3, #33554432	; 0x2000000
   31d44:	e3530000 	cmp	r3, #0
   31d48:	13a03001 	movne	r3, #1
   31d4c:	03a03000 	moveq	r3, #0
   31d50:	e6ef3073 	uxtb	r3, r3
   31d54:	e1a00003 	mov	r0, r3
   31d58:	e28bd000 	add	sp, fp, #0
   31d5c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   31d60:	e12fff1e 	bx	lr

00031d64 <TLC59711::SetOnOffTiming(bool)>:
   31d64:	e92d4800 	push	{fp, lr}
   31d68:	e28db004 	add	fp, sp, #4
   31d6c:	e24dd008 	sub	sp, sp, #8
   31d70:	e50b0008 	str	r0, [fp, #-8]
   31d74:	e1a03001 	mov	r3, r1
   31d78:	e54b3009 	strb	r3, [fp, #-9]
   31d7c:	e51b3008 	ldr	r3, [fp, #-8]
   31d80:	e5933008 	ldr	r3, [r3, #8]
   31d84:	e3c32402 	bic	r2, r3, #33554432	; 0x2000000
   31d88:	e51b3008 	ldr	r3, [fp, #-8]
   31d8c:	e5832008 	str	r2, [r3, #8]
   31d90:	e55b3009 	ldrb	r3, [fp, #-9]
   31d94:	e3530000 	cmp	r3, #0
   31d98:	0a000004 	beq	31db0 <TLC59711::SetOnOffTiming(bool)+0x4c>
   31d9c:	e51b3008 	ldr	r3, [fp, #-8]
   31da0:	e5933008 	ldr	r3, [r3, #8]
   31da4:	e3832402 	orr	r2, r3, #33554432	; 0x2000000
   31da8:	e51b3008 	ldr	r3, [fp, #-8]
   31dac:	e5832008 	str	r2, [r3, #8]
   31db0:	e51b0008 	ldr	r0, [fp, #-8]
   31db4:	eb000072 	bl	31f84 <TLC59711::UpdateFirst32()>
   31db8:	e1a00000 	nop			; (mov r0, r0)
   31dbc:	e24bd004 	sub	sp, fp, #4
   31dc0:	e8bd8800 	pop	{fp, pc}

00031dc4 <TLC59711::GetGbcRed() const>:
   31dc4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   31dc8:	e28db000 	add	fp, sp, #0
   31dcc:	e24dd00c 	sub	sp, sp, #12
   31dd0:	e50b0008 	str	r0, [fp, #-8]
   31dd4:	e51b3008 	ldr	r3, [fp, #-8]
   31dd8:	e5933008 	ldr	r3, [r3, #8]
   31ddc:	e6ef3073 	uxtb	r3, r3
   31de0:	e203307f 	and	r3, r3, #127	; 0x7f
   31de4:	e6ef3073 	uxtb	r3, r3
   31de8:	e1a00003 	mov	r0, r3
   31dec:	e28bd000 	add	sp, fp, #0
   31df0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   31df4:	e12fff1e 	bx	lr

00031df8 <TLC59711::SetGbcRed(unsigned char)>:
   31df8:	e92d4800 	push	{fp, lr}
   31dfc:	e28db004 	add	fp, sp, #4
   31e00:	e24dd008 	sub	sp, sp, #8
   31e04:	e50b0008 	str	r0, [fp, #-8]
   31e08:	e1a03001 	mov	r3, r1
   31e0c:	e54b3009 	strb	r3, [fp, #-9]
   31e10:	e51b3008 	ldr	r3, [fp, #-8]
   31e14:	e5933008 	ldr	r3, [r3, #8]
   31e18:	e3c3207f 	bic	r2, r3, #127	; 0x7f
   31e1c:	e51b3008 	ldr	r3, [fp, #-8]
   31e20:	e5832008 	str	r2, [r3, #8]
   31e24:	e51b3008 	ldr	r3, [fp, #-8]
   31e28:	e5932008 	ldr	r2, [r3, #8]
   31e2c:	e55b3009 	ldrb	r3, [fp, #-9]
   31e30:	e203307f 	and	r3, r3, #127	; 0x7f
   31e34:	e1822003 	orr	r2, r2, r3
   31e38:	e51b3008 	ldr	r3, [fp, #-8]
   31e3c:	e5832008 	str	r2, [r3, #8]
   31e40:	e51b0008 	ldr	r0, [fp, #-8]
   31e44:	eb00004e 	bl	31f84 <TLC59711::UpdateFirst32()>
   31e48:	e1a00000 	nop			; (mov r0, r0)
   31e4c:	e24bd004 	sub	sp, fp, #4
   31e50:	e8bd8800 	pop	{fp, pc}

00031e54 <TLC59711::GetGbcGreen() const>:
   31e54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   31e58:	e28db000 	add	fp, sp, #0
   31e5c:	e24dd00c 	sub	sp, sp, #12
   31e60:	e50b0008 	str	r0, [fp, #-8]
   31e64:	e51b3008 	ldr	r3, [fp, #-8]
   31e68:	e5933008 	ldr	r3, [r3, #8]
   31e6c:	e1a033a3 	lsr	r3, r3, #7
   31e70:	e6ef3073 	uxtb	r3, r3
   31e74:	e203307f 	and	r3, r3, #127	; 0x7f
   31e78:	e6ef3073 	uxtb	r3, r3
   31e7c:	e1a00003 	mov	r0, r3
   31e80:	e28bd000 	add	sp, fp, #0
   31e84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   31e88:	e12fff1e 	bx	lr

00031e8c <TLC59711::SetGbcGreen(unsigned char)>:
   31e8c:	e92d4800 	push	{fp, lr}
   31e90:	e28db004 	add	fp, sp, #4
   31e94:	e24dd008 	sub	sp, sp, #8
   31e98:	e50b0008 	str	r0, [fp, #-8]
   31e9c:	e1a03001 	mov	r3, r1
   31ea0:	e54b3009 	strb	r3, [fp, #-9]
   31ea4:	e51b3008 	ldr	r3, [fp, #-8]
   31ea8:	e5933008 	ldr	r3, [r3, #8]
   31eac:	e3c32dfe 	bic	r2, r3, #16256	; 0x3f80
   31eb0:	e51b3008 	ldr	r3, [fp, #-8]
   31eb4:	e5832008 	str	r2, [r3, #8]
   31eb8:	e51b3008 	ldr	r3, [fp, #-8]
   31ebc:	e5932008 	ldr	r2, [r3, #8]
   31ec0:	e55b3009 	ldrb	r3, [fp, #-9]
   31ec4:	e1a03383 	lsl	r3, r3, #7
   31ec8:	e2033dfe 	and	r3, r3, #16256	; 0x3f80
   31ecc:	e1822003 	orr	r2, r2, r3
   31ed0:	e51b3008 	ldr	r3, [fp, #-8]
   31ed4:	e5832008 	str	r2, [r3, #8]
   31ed8:	e51b0008 	ldr	r0, [fp, #-8]
   31edc:	eb000028 	bl	31f84 <TLC59711::UpdateFirst32()>
   31ee0:	e1a00000 	nop			; (mov r0, r0)
   31ee4:	e24bd004 	sub	sp, fp, #4
   31ee8:	e8bd8800 	pop	{fp, pc}

00031eec <TLC59711::GetGbcBlue() const>:
   31eec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   31ef0:	e28db000 	add	fp, sp, #0
   31ef4:	e24dd00c 	sub	sp, sp, #12
   31ef8:	e50b0008 	str	r0, [fp, #-8]
   31efc:	e51b3008 	ldr	r3, [fp, #-8]
   31f00:	e5933008 	ldr	r3, [r3, #8]
   31f04:	e1a03723 	lsr	r3, r3, #14
   31f08:	e6ef3073 	uxtb	r3, r3
   31f0c:	e203307f 	and	r3, r3, #127	; 0x7f
   31f10:	e6ef3073 	uxtb	r3, r3
   31f14:	e1a00003 	mov	r0, r3
   31f18:	e28bd000 	add	sp, fp, #0
   31f1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   31f20:	e12fff1e 	bx	lr

00031f24 <TLC59711::SetGbcBlue(unsigned char)>:
   31f24:	e92d4800 	push	{fp, lr}
   31f28:	e28db004 	add	fp, sp, #4
   31f2c:	e24dd008 	sub	sp, sp, #8
   31f30:	e50b0008 	str	r0, [fp, #-8]
   31f34:	e1a03001 	mov	r3, r1
   31f38:	e54b3009 	strb	r3, [fp, #-9]
   31f3c:	e51b3008 	ldr	r3, [fp, #-8]
   31f40:	e5933008 	ldr	r3, [r3, #8]
   31f44:	e3c3297f 	bic	r2, r3, #2080768	; 0x1fc000
   31f48:	e51b3008 	ldr	r3, [fp, #-8]
   31f4c:	e5832008 	str	r2, [r3, #8]
   31f50:	e51b3008 	ldr	r3, [fp, #-8]
   31f54:	e5932008 	ldr	r2, [r3, #8]
   31f58:	e55b3009 	ldrb	r3, [fp, #-9]
   31f5c:	e1a03703 	lsl	r3, r3, #14
   31f60:	e203397f 	and	r3, r3, #2080768	; 0x1fc000
   31f64:	e1822003 	orr	r2, r2, r3
   31f68:	e51b3008 	ldr	r3, [fp, #-8]
   31f6c:	e5832008 	str	r2, [r3, #8]
   31f70:	e51b0008 	ldr	r0, [fp, #-8]
   31f74:	eb000002 	bl	31f84 <TLC59711::UpdateFirst32()>
   31f78:	e1a00000 	nop			; (mov r0, r0)
   31f7c:	e24bd004 	sub	sp, fp, #4
   31f80:	e8bd8800 	pop	{fp, pc}

00031f84 <TLC59711::UpdateFirst32()>:
   31f84:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   31f88:	e28db000 	add	fp, sp, #0
   31f8c:	e24dd014 	sub	sp, sp, #20
   31f90:	e50b0010 	str	r0, [fp, #-16]
   31f94:	e3a03000 	mov	r3, #0
   31f98:	e50b3008 	str	r3, [fp, #-8]
   31f9c:	e51b3010 	ldr	r3, [fp, #-16]
   31fa0:	e5d33000 	ldrb	r3, [r3]
   31fa4:	e1a02003 	mov	r2, r3
   31fa8:	e51b3008 	ldr	r3, [fp, #-8]
   31fac:	e1530002 	cmp	r3, r2
   31fb0:	2a000021 	bcs	3203c <TLC59711::UpdateFirst32()+0xb8>
   31fb4:	e51b2008 	ldr	r2, [fp, #-8]
   31fb8:	e1a03002 	mov	r3, r2
   31fbc:	e1a03183 	lsl	r3, r3, #3
   31fc0:	e0433002 	sub	r3, r3, r2
   31fc4:	e1a03083 	lsl	r3, r3, #1
   31fc8:	e50b300c 	str	r3, [fp, #-12]
   31fcc:	e51b3010 	ldr	r3, [fp, #-16]
   31fd0:	e5933008 	ldr	r3, [r3, #8]
   31fd4:	e1a03823 	lsr	r3, r3, #16
   31fd8:	e6ff2073 	uxth	r2, r3
   31fdc:	e51b3010 	ldr	r3, [fp, #-16]
   31fe0:	e593100c 	ldr	r1, [r3, #12]
   31fe4:	e51b300c 	ldr	r3, [fp, #-12]
   31fe8:	e1a03083 	lsl	r3, r3, #1
   31fec:	e0813003 	add	r3, r1, r3
   31ff0:	e6bf2fb2 	rev16	r2, r2
   31ff4:	e6ff2072 	uxth	r2, r2
   31ff8:	e1c320b0 	strh	r2, [r3]
   31ffc:	e51b3010 	ldr	r3, [fp, #-16]
   32000:	e5933008 	ldr	r3, [r3, #8]
   32004:	e6ff2073 	uxth	r2, r3
   32008:	e51b3010 	ldr	r3, [fp, #-16]
   3200c:	e593100c 	ldr	r1, [r3, #12]
   32010:	e51b300c 	ldr	r3, [fp, #-12]
   32014:	e2833001 	add	r3, r3, #1
   32018:	e1a03083 	lsl	r3, r3, #1
   3201c:	e0813003 	add	r3, r1, r3
   32020:	e6bf2fb2 	rev16	r2, r2
   32024:	e6ff2072 	uxth	r2, r2
   32028:	e1c320b0 	strh	r2, [r3]
   3202c:	e51b3008 	ldr	r3, [fp, #-8]
   32030:	e2833001 	add	r3, r3, #1
   32034:	e50b3008 	str	r3, [fp, #-8]
   32038:	eaffffd7 	b	31f9c <TLC59711::UpdateFirst32()+0x18>
   3203c:	e1a00000 	nop			; (mov r0, r0)
   32040:	e28bd000 	add	sp, fp, #0
   32044:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   32048:	e12fff1e 	bx	lr

0003204c <TLC59711::Dump()>:
   3204c:	e92d4800 	push	{fp, lr}
   32050:	e28db004 	add	fp, sp, #4
   32054:	e24dd028 	sub	sp, sp, #40	; 0x28
   32058:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   3205c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   32060:	e5933008 	ldr	r3, [r3, #8]
   32064:	e1a03d23 	lsr	r3, r3, #26
   32068:	e1a01003 	mov	r1, r3
   3206c:	e59f026c 	ldr	r0, [pc, #620]	; 322e0 <TLC59711::Dump()+0x294>
   32070:	ebff7c5f 	bl	111f4 <printf@plt>
   32074:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   32078:	ebffff2a 	bl	31d28 <TLC59711::GetOnOffTiming() const>
   3207c:	e1a03000 	mov	r3, r0
   32080:	e3a02000 	mov	r2, #0
   32084:	e1a01003 	mov	r1, r3
   32088:	e59f0254 	ldr	r0, [pc, #596]	; 322e4 <TLC59711::Dump()+0x298>
   3208c:	ebff7c58 	bl	111f4 <printf@plt>
   32090:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   32094:	ebfffefc 	bl	31c8c <TLC59711::GetExternalClock() const>
   32098:	e1a03000 	mov	r3, r0
   3209c:	e3a02000 	mov	r2, #0
   320a0:	e1a01003 	mov	r1, r3
   320a4:	e59f023c 	ldr	r0, [pc, #572]	; 322e8 <TLC59711::Dump()+0x29c>
   320a8:	ebff7c51 	bl	111f4 <printf@plt>
   320ac:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   320b0:	ebfffece 	bl	31bf0 <TLC59711::GetDisplayTimingReset() const>
   320b4:	e1a03000 	mov	r3, r0
   320b8:	e3a02001 	mov	r2, #1
   320bc:	e1a01003 	mov	r1, r3
   320c0:	e59f0224 	ldr	r0, [pc, #548]	; 322ec <TLC59711::Dump()+0x2a0>
   320c4:	ebff7c4a 	bl	111f4 <printf@plt>
   320c8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   320cc:	ebfffea0 	bl	31b54 <TLC59711::GetDisplayRepeat() const>
   320d0:	e1a03000 	mov	r3, r0
   320d4:	e3a02001 	mov	r2, #1
   320d8:	e1a01003 	mov	r1, r3
   320dc:	e59f020c 	ldr	r0, [pc, #524]	; 322f0 <TLC59711::Dump()+0x2a4>
   320e0:	ebff7c43 	bl	111f4 <printf@plt>
   320e4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   320e8:	ebfffe72 	bl	31ab8 <TLC59711::GetBlank() const>
   320ec:	e1a03000 	mov	r3, r0
   320f0:	e3a02000 	mov	r2, #0
   320f4:	e1a01003 	mov	r1, r3
   320f8:	e59f01f4 	ldr	r0, [pc, #500]	; 322f4 <TLC59711::Dump()+0x2a8>
   320fc:	ebff7c3c 	bl	111f4 <printf@plt>
   32100:	e59f01f0 	ldr	r0, [pc, #496]	; 322f8 <TLC59711::Dump()+0x2ac>
   32104:	ebff7c46 	bl	11224 <puts@plt>
   32108:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   3210c:	ebffff2c 	bl	31dc4 <TLC59711::GetGbcRed() const>
   32110:	e1a03000 	mov	r3, r0
   32114:	e3a0207f 	mov	r2, #127	; 0x7f
   32118:	e1a01003 	mov	r1, r3
   3211c:	e59f01d8 	ldr	r0, [pc, #472]	; 322fc <TLC59711::Dump()+0x2b0>
   32120:	ebff7c33 	bl	111f4 <printf@plt>
   32124:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   32128:	ebffff49 	bl	31e54 <TLC59711::GetGbcGreen() const>
   3212c:	e1a03000 	mov	r3, r0
   32130:	e3a0207f 	mov	r2, #127	; 0x7f
   32134:	e1a01003 	mov	r1, r3
   32138:	e59f01c0 	ldr	r0, [pc, #448]	; 32300 <TLC59711::Dump()+0x2b4>
   3213c:	ebff7c2c 	bl	111f4 <printf@plt>
   32140:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   32144:	ebffff68 	bl	31eec <TLC59711::GetGbcBlue() const>
   32148:	e1a03000 	mov	r3, r0
   3214c:	e3a0207f 	mov	r2, #127	; 0x7f
   32150:	e1a01003 	mov	r1, r3
   32154:	e59f01a8 	ldr	r0, [pc, #424]	; 32304 <TLC59711::Dump()+0x2b8>
   32158:	ebff7c25 	bl	111f4 <printf@plt>
   3215c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   32160:	e5d33000 	ldrb	r3, [r3]
   32164:	e1a01003 	mov	r1, r3
   32168:	e59f0198 	ldr	r0, [pc, #408]	; 32308 <TLC59711::Dump()+0x2bc>
   3216c:	ebff7c20 	bl	111f4 <printf@plt>
   32170:	e3a03000 	mov	r3, #0
   32174:	e54b3005 	strb	r3, [fp, #-5]
   32178:	e3a03000 	mov	r3, #0
   3217c:	e50b300c 	str	r3, [fp, #-12]
   32180:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   32184:	e5d33000 	ldrb	r3, [r3]
   32188:	e1a02003 	mov	r2, r3
   3218c:	e51b300c 	ldr	r3, [fp, #-12]
   32190:	e1530002 	cmp	r3, r2
   32194:	2a00002a 	bcs	32244 <TLC59711::Dump()+0x1f8>
   32198:	e3a03000 	mov	r3, #0
   3219c:	e50b3010 	str	r3, [fp, #-16]
   321a0:	e51b3010 	ldr	r3, [fp, #-16]
   321a4:	e3530003 	cmp	r3, #3
   321a8:	8a000021 	bhi	32234 <TLC59711::Dump()+0x1e8>
   321ac:	e3a03000 	mov	r3, #0
   321b0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
   321b4:	e3a03000 	mov	r3, #0
   321b8:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
   321bc:	e3a03000 	mov	r3, #0
   321c0:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
   321c4:	e24b0018 	sub	r0, fp, #24
   321c8:	e24b2016 	sub	r2, fp, #22
   321cc:	e55b1005 	ldrb	r1, [fp, #-5]
   321d0:	e24b301a 	sub	r3, fp, #26
   321d4:	e58d3000 	str	r3, [sp]
   321d8:	e1a03000 	mov	r3, r0
   321dc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   321e0:	ebfffcfd 	bl	315dc <TLC59711::GetRgb(unsigned char, unsigned short&, unsigned short&, unsigned short&)>
   321e4:	e1a03000 	mov	r3, r0
   321e8:	e3530000 	cmp	r3, #0
   321ec:	0a000009 	beq	32218 <TLC59711::Dump()+0x1cc>
   321f0:	e55b1005 	ldrb	r1, [fp, #-5]
   321f4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
   321f8:	e1a02003 	mov	r2, r3
   321fc:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
   32200:	e1a00003 	mov	r0, r3
   32204:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
   32208:	e58d3000 	str	r3, [sp]
   3220c:	e1a03000 	mov	r3, r0
   32210:	e59f00f4 	ldr	r0, [pc, #244]	; 3230c <TLC59711::Dump()+0x2c0>
   32214:	ebff7bf6 	bl	111f4 <printf@plt>
   32218:	e55b3005 	ldrb	r3, [fp, #-5]
   3221c:	e2833001 	add	r3, r3, #1
   32220:	e54b3005 	strb	r3, [fp, #-5]
   32224:	e51b3010 	ldr	r3, [fp, #-16]
   32228:	e2833001 	add	r3, r3, #1
   3222c:	e50b3010 	str	r3, [fp, #-16]
   32230:	eaffffda 	b	321a0 <TLC59711::Dump()+0x154>
   32234:	e51b300c 	ldr	r3, [fp, #-12]
   32238:	e2833001 	add	r3, r3, #1
   3223c:	e50b300c 	str	r3, [fp, #-12]
   32240:	eaffffce 	b	32180 <TLC59711::Dump()+0x134>
   32244:	e3a0000a 	mov	r0, #10
   32248:	ebff7c04 	bl	11260 <putchar@plt>
   3224c:	e3a03000 	mov	r3, #0
   32250:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   32254:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   32258:	e5d33000 	ldrb	r3, [r3]
   3225c:	e1a02003 	mov	r2, r3
   32260:	e1a03002 	mov	r3, r2
   32264:	e1a03083 	lsl	r3, r3, #1
   32268:	e0833002 	add	r3, r3, r2
   3226c:	e1a03103 	lsl	r3, r3, #2
   32270:	e1a02003 	mov	r2, r3
   32274:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   32278:	e1530002 	cmp	r3, r2
   3227c:	2a000012 	bcs	322cc <TLC59711::Dump()+0x280>
   32280:	e3a03000 	mov	r3, #0
   32284:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
   32288:	e24b301c 	sub	r3, fp, #28
   3228c:	e1a02003 	mov	r2, r3
   32290:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   32294:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   32298:	ebfffc6c 	bl	31450 <TLC59711::Get(unsigned int, unsigned short&)>
   3229c:	e1a03000 	mov	r3, r0
   322a0:	e3530000 	cmp	r3, #0
   322a4:	0a000004 	beq	322bc <TLC59711::Dump()+0x270>
   322a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   322ac:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
   322b0:	e1a01003 	mov	r1, r3
   322b4:	e59f0054 	ldr	r0, [pc, #84]	; 32310 <TLC59711::Dump()+0x2c4>
   322b8:	ebff7bcd 	bl	111f4 <printf@plt>
   322bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   322c0:	e2833001 	add	r3, r3, #1
   322c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   322c8:	eaffffe1 	b	32254 <TLC59711::Dump()+0x208>
   322cc:	e3a0000a 	mov	r0, #10
   322d0:	ebff7be2 	bl	11260 <putchar@plt>
   322d4:	e1a00000 	nop			; (mov r0, r0)
   322d8:	e24bd004 	sub	sp, fp, #4
   322dc:	e8bd8800 	pop	{fp, pc}
   322e0:	00048578 	.word	0x00048578
   322e4:	00048588 	.word	0x00048588
   322e8:	000485a4 	.word	0x000485a4
   322ec:	000485c0 	.word	0x000485c0
   322f0:	000485dc 	.word	0x000485dc
   322f4:	000485f8 	.word	0x000485f8
   322f8:	00048614 	.word	0x00048614
   322fc:	00048628 	.word	0x00048628
   32300:	00048648 	.word	0x00048648
   32304:	00048668 	.word	0x00048668
   32308:	00048688 	.word	0x00048688
   3230c:	00048694 	.word	0x00048694
   32310:	000486c8 	.word	0x000486c8

00032314 <TLC59711::Update()>:
   32314:	e92d4800 	push	{fp, lr}
   32318:	e28db004 	add	fp, sp, #4
   3231c:	e24dd008 	sub	sp, sp, #8
   32320:	e50b0008 	str	r0, [fp, #-8]
   32324:	e51b3008 	ldr	r3, [fp, #-8]
   32328:	e593300c 	ldr	r3, [r3, #12]
   3232c:	e3530000 	cmp	r3, #0
   32330:	1a000004 	bne	32348 <TLC59711::Update()+0x34>
   32334:	e59f3058 	ldr	r3, [pc, #88]	; 32394 <TLC59711::Update()+0x80>
   32338:	e59f2058 	ldr	r2, [pc, #88]	; 32398 <TLC59711::Update()+0x84>
   3233c:	e59f1058 	ldr	r1, [pc, #88]	; 3239c <TLC59711::Update()+0x88>
   32340:	e59f0058 	ldr	r0, [pc, #88]	; 323a0 <TLC59711::Update()+0x8c>
   32344:	ebff7bf2 	bl	11314 <__assert_fail@plt>
   32348:	e3a00003 	mov	r0, #3
   3234c:	eb003ed7 	bl	41eb0 <bcm2835_spi_chipSelect>
   32350:	e51b3008 	ldr	r3, [fp, #-8]
   32354:	e5933004 	ldr	r3, [r3, #4]
   32358:	e1a00003 	mov	r0, r3
   3235c:	eb003db7 	bl	41a40 <bcm2835_spi_set_speed_hz>
   32360:	e3a00000 	mov	r0, #0
   32364:	eb003dc8 	bl	41a8c <bcm2835_spi_setDataMode>
   32368:	e51b3008 	ldr	r3, [fp, #-8]
   3236c:	e593200c 	ldr	r2, [r3, #12]
   32370:	e51b3008 	ldr	r3, [fp, #-8]
   32374:	e5933014 	ldr	r3, [r3, #20]
   32378:	e1a03083 	lsl	r3, r3, #1
   3237c:	e1a01003 	mov	r1, r3
   32380:	e1a00002 	mov	r0, r2
   32384:	eb003e6e 	bl	41d44 <bcm2835_spi_writenb>
   32388:	e1a00000 	nop			; (mov r0, r0)
   3238c:	e24bd004 	sub	sp, fp, #4
   32390:	e8bd8800 	pop	{fp, pc}
   32394:	00048738 	.word	0x00048738
   32398:	00000161 	.word	0x00000161
   3239c:	000484d4 	.word	0x000484d4
   323a0:	000486e8 	.word	0x000486e8

000323a4 <TLC59711::Blackout()>:
   323a4:	e92d4800 	push	{fp, lr}
   323a8:	e28db004 	add	fp, sp, #4
   323ac:	e24dd008 	sub	sp, sp, #8
   323b0:	e50b0008 	str	r0, [fp, #-8]
   323b4:	e51b3008 	ldr	r3, [fp, #-8]
   323b8:	e5933010 	ldr	r3, [r3, #16]
   323bc:	e3530000 	cmp	r3, #0
   323c0:	1a000004 	bne	323d8 <TLC59711::Blackout()+0x34>
   323c4:	e59f3058 	ldr	r3, [pc, #88]	; 32424 <TLC59711::Blackout()+0x80>
   323c8:	e59f2058 	ldr	r2, [pc, #88]	; 32428 <TLC59711::Blackout()+0x84>
   323cc:	e59f1058 	ldr	r1, [pc, #88]	; 3242c <TLC59711::Blackout()+0x88>
   323d0:	e59f0058 	ldr	r0, [pc, #88]	; 32430 <TLC59711::Blackout()+0x8c>
   323d4:	ebff7bce 	bl	11314 <__assert_fail@plt>
   323d8:	e3a00003 	mov	r0, #3
   323dc:	eb003eb3 	bl	41eb0 <bcm2835_spi_chipSelect>
   323e0:	e51b3008 	ldr	r3, [fp, #-8]
   323e4:	e5933004 	ldr	r3, [r3, #4]
   323e8:	e1a00003 	mov	r0, r3
   323ec:	eb003d93 	bl	41a40 <bcm2835_spi_set_speed_hz>
   323f0:	e3a00000 	mov	r0, #0
   323f4:	eb003da4 	bl	41a8c <bcm2835_spi_setDataMode>
   323f8:	e51b3008 	ldr	r3, [fp, #-8]
   323fc:	e5932010 	ldr	r2, [r3, #16]
   32400:	e51b3008 	ldr	r3, [fp, #-8]
   32404:	e5933014 	ldr	r3, [r3, #20]
   32408:	e1a03083 	lsl	r3, r3, #1
   3240c:	e1a01003 	mov	r1, r3
   32410:	e1a00002 	mov	r0, r2
   32414:	eb003e4a 	bl	41d44 <bcm2835_spi_writenb>
   32418:	e1a00000 	nop			; (mov r0, r0)
   3241c:	e24bd004 	sub	sp, fp, #4
   32420:	e8bd8800 	pop	{fp, pc}
   32424:	00048750 	.word	0x00048750
   32428:	0000016a 	.word	0x0000016a
   3242c:	000484d4 	.word	0x000484d4
   32430:	000486f8 	.word	0x000486f8

00032434 <RemoteConfigParamsStore::~RemoteConfigParamsStore()>:
   32434:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   32438:	e28db000 	add	fp, sp, #0
   3243c:	e24dd00c 	sub	sp, sp, #12
   32440:	e50b0008 	str	r0, [fp, #-8]
   32444:	e59f2018 	ldr	r2, [pc, #24]	; 32464 <RemoteConfigParamsStore::~RemoteConfigParamsStore()+0x30>
   32448:	e51b3008 	ldr	r3, [fp, #-8]
   3244c:	e5832000 	str	r2, [r3]
   32450:	e51b3008 	ldr	r3, [fp, #-8]
   32454:	e1a00003 	mov	r0, r3
   32458:	e28bd000 	add	sp, fp, #0
   3245c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   32460:	e12fff1e 	bx	lr
   32464:	000487a4 	.word	0x000487a4

00032468 <RemoteConfigParamsStore::~RemoteConfigParamsStore()>:
   32468:	e92d4800 	push	{fp, lr}
   3246c:	e28db004 	add	fp, sp, #4
   32470:	e24dd008 	sub	sp, sp, #8
   32474:	e50b0008 	str	r0, [fp, #-8]
   32478:	e51b0008 	ldr	r0, [fp, #-8]
   3247c:	ebffffec 	bl	32434 <RemoteConfigParamsStore::~RemoteConfigParamsStore()>
   32480:	e51b0008 	ldr	r0, [fp, #-8]
   32484:	ebff7b9f 	bl	11308 <operator delete(void*)@plt>
   32488:	e51b3008 	ldr	r3, [fp, #-8]
   3248c:	e1a00003 	mov	r0, r3
   32490:	e24bd004 	sub	sp, fp, #4
   32494:	e8bd8800 	pop	{fp, pc}

00032498 <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
   32498:	e92d4800 	push	{fp, lr}
   3249c:	e28db004 	add	fp, sp, #4
   324a0:	e24dd008 	sub	sp, sp, #8
   324a4:	e50b0008 	str	r0, [fp, #-8]
   324a8:	e50b100c 	str	r1, [fp, #-12]
   324ac:	ebff7cc0 	bl	117b4 <ConfigStore::Get()>
   324b0:	e3a03020 	mov	r3, #32
   324b4:	e51b200c 	ldr	r2, [fp, #-12]
   324b8:	e3a0100c 	mov	r1, #12
   324bc:	ebff7ca7 	bl	11760 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>
   324c0:	e1a00000 	nop			; (mov r0, r0)
   324c4:	e24bd004 	sub	sp, fp, #4
   324c8:	e8bd8800 	pop	{fp, pc}

000324cc <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
   324cc:	e92d4800 	push	{fp, lr}
   324d0:	e28db004 	add	fp, sp, #4
   324d4:	e24dd010 	sub	sp, sp, #16
   324d8:	e50b0008 	str	r0, [fp, #-8]
   324dc:	e50b100c 	str	r1, [fp, #-12]
   324e0:	ebff7cb3 	bl	117b4 <ConfigStore::Get()>
   324e4:	e3a03001 	mov	r3, #1
   324e8:	e58d3004 	str	r3, [sp, #4]
   324ec:	e3a03000 	mov	r3, #0
   324f0:	e58d3000 	str	r3, [sp]
   324f4:	e3a03020 	mov	r3, #32
   324f8:	e51b200c 	ldr	r2, [fp, #-12]
   324fc:	e3a0100c 	mov	r1, #12
   32500:	eb000367 	bl	332a4 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
   32504:	e1a00000 	nop			; (mov r0, r0)
   32508:	e24bd004 	sub	sp, fp, #4
   3250c:	e8bd8800 	pop	{fp, pc}

00032510 <RemoteConfigParamsStore::RemoteConfigParamsStore()>:
   32510:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   32514:	e28db000 	add	fp, sp, #0
   32518:	e24dd00c 	sub	sp, sp, #12
   3251c:	e50b0008 	str	r0, [fp, #-8]
   32520:	e59f2018 	ldr	r2, [pc, #24]	; 32540 <RemoteConfigParamsStore::RemoteConfigParamsStore()+0x30>
   32524:	e51b3008 	ldr	r3, [fp, #-8]
   32528:	e5832000 	str	r2, [r3]
   3252c:	e51b3008 	ldr	r3, [fp, #-8]
   32530:	e1a00003 	mov	r0, r3
   32534:	e28bd000 	add	sp, fp, #0
   32538:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3253c:	e12fff1e 	bx	lr
   32540:	000487a4 	.word	0x000487a4

00032544 <StoreRemoteConfig::StoreRemoteConfig()>:
   32544:	e92d4800 	push	{fp, lr}
   32548:	e28db004 	add	fp, sp, #4
   3254c:	e24dd008 	sub	sp, sp, #8
   32550:	e50b0008 	str	r0, [fp, #-8]
   32554:	e51b3008 	ldr	r3, [fp, #-8]
   32558:	e1a00003 	mov	r0, r3
   3255c:	ebffffeb 	bl	32510 <RemoteConfigParamsStore::RemoteConfigParamsStore()>
   32560:	e59f2020 	ldr	r2, [pc, #32]	; 32588 <StoreRemoteConfig::StoreRemoteConfig()+0x44>
   32564:	e51b3008 	ldr	r3, [fp, #-8]
   32568:	e5832000 	str	r2, [r3]
   3256c:	e59f2018 	ldr	r2, [pc, #24]	; 3258c <StoreRemoteConfig::StoreRemoteConfig()+0x48>
   32570:	e51b3008 	ldr	r3, [fp, #-8]
   32574:	e5823000 	str	r3, [r2]
   32578:	e51b3008 	ldr	r3, [fp, #-8]
   3257c:	e1a00003 	mov	r0, r3
   32580:	e24bd004 	sub	sp, fp, #4
   32584:	e8bd8800 	pop	{fp, pc}
   32588:	0004878c 	.word	0x0004878c
   3258c:	0005dc18 	.word	0x0005dc18

00032590 <StoreRemoteConfig::~StoreRemoteConfig()>:
   32590:	e92d4800 	push	{fp, lr}
   32594:	e28db004 	add	fp, sp, #4
   32598:	e24dd008 	sub	sp, sp, #8
   3259c:	e50b0008 	str	r0, [fp, #-8]
   325a0:	e59f2020 	ldr	r2, [pc, #32]	; 325c8 <StoreRemoteConfig::~StoreRemoteConfig()+0x38>
   325a4:	e51b3008 	ldr	r3, [fp, #-8]
   325a8:	e5832000 	str	r2, [r3]
   325ac:	e51b3008 	ldr	r3, [fp, #-8]
   325b0:	e1a00003 	mov	r0, r3
   325b4:	ebffff9e 	bl	32434 <RemoteConfigParamsStore::~RemoteConfigParamsStore()>
   325b8:	e51b3008 	ldr	r3, [fp, #-8]
   325bc:	e1a00003 	mov	r0, r3
   325c0:	e24bd004 	sub	sp, fp, #4
   325c4:	e8bd8800 	pop	{fp, pc}
   325c8:	0004878c 	.word	0x0004878c

000325cc <StoreRemoteConfig::~StoreRemoteConfig()>:
   325cc:	e92d4800 	push	{fp, lr}
   325d0:	e28db004 	add	fp, sp, #4
   325d4:	e24dd008 	sub	sp, sp, #8
   325d8:	e50b0008 	str	r0, [fp, #-8]
   325dc:	e51b0008 	ldr	r0, [fp, #-8]
   325e0:	ebffffea 	bl	32590 <StoreRemoteConfig::~StoreRemoteConfig()>
   325e4:	e51b0008 	ldr	r0, [fp, #-8]
   325e8:	ebff7b46 	bl	11308 <operator delete(void*)@plt>
   325ec:	e51b3008 	ldr	r3, [fp, #-8]
   325f0:	e1a00003 	mov	r0, r3
   325f4:	e24bd004 	sub	sp, fp, #4
   325f8:	e8bd8800 	pop	{fp, pc}

000325fc <TLC59711DmxStore::~TLC59711DmxStore()>:
   325fc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   32600:	e28db000 	add	fp, sp, #0
   32604:	e24dd00c 	sub	sp, sp, #12
   32608:	e50b0008 	str	r0, [fp, #-8]
   3260c:	e59f2018 	ldr	r2, [pc, #24]	; 3262c <TLC59711DmxStore::~TLC59711DmxStore()+0x30>
   32610:	e51b3008 	ldr	r3, [fp, #-8]
   32614:	e5832000 	str	r2, [r3]
   32618:	e51b3008 	ldr	r3, [fp, #-8]
   3261c:	e1a00003 	mov	r0, r3
   32620:	e28bd000 	add	sp, fp, #0
   32624:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   32628:	e12fff1e 	bx	lr
   3262c:	00048814 	.word	0x00048814

00032630 <TLC59711DmxStore::~TLC59711DmxStore()>:
   32630:	e92d4800 	push	{fp, lr}
   32634:	e28db004 	add	fp, sp, #4
   32638:	e24dd008 	sub	sp, sp, #8
   3263c:	e50b0008 	str	r0, [fp, #-8]
   32640:	e51b0008 	ldr	r0, [fp, #-8]
   32644:	ebffffec 	bl	325fc <TLC59711DmxStore::~TLC59711DmxStore()>
   32648:	e51b0008 	ldr	r0, [fp, #-8]
   3264c:	ebff7b2d 	bl	11308 <operator delete(void*)@plt>
   32650:	e51b3008 	ldr	r3, [fp, #-8]
   32654:	e1a00003 	mov	r0, r3
   32658:	e24bd004 	sub	sp, fp, #4
   3265c:	e8bd8800 	pop	{fp, pc}

00032660 <TLC59711DmxParamsStore::~TLC59711DmxParamsStore()>:
   32660:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   32664:	e28db000 	add	fp, sp, #0
   32668:	e24dd00c 	sub	sp, sp, #12
   3266c:	e50b0008 	str	r0, [fp, #-8]
   32670:	e59f2018 	ldr	r2, [pc, #24]	; 32690 <TLC59711DmxParamsStore::~TLC59711DmxParamsStore()+0x30>
   32674:	e51b3008 	ldr	r3, [fp, #-8]
   32678:	e5832000 	str	r2, [r3]
   3267c:	e51b3008 	ldr	r3, [fp, #-8]
   32680:	e1a00003 	mov	r0, r3
   32684:	e28bd000 	add	sp, fp, #0
   32688:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3268c:	e12fff1e 	bx	lr
   32690:	000487fc 	.word	0x000487fc

00032694 <TLC59711DmxParamsStore::~TLC59711DmxParamsStore()>:
   32694:	e92d4800 	push	{fp, lr}
   32698:	e28db004 	add	fp, sp, #4
   3269c:	e24dd008 	sub	sp, sp, #8
   326a0:	e50b0008 	str	r0, [fp, #-8]
   326a4:	e51b0008 	ldr	r0, [fp, #-8]
   326a8:	ebffffec 	bl	32660 <TLC59711DmxParamsStore::~TLC59711DmxParamsStore()>
   326ac:	e51b0008 	ldr	r0, [fp, #-8]
   326b0:	ebff7b14 	bl	11308 <operator delete(void*)@plt>
   326b4:	e51b3008 	ldr	r3, [fp, #-8]
   326b8:	e1a00003 	mov	r0, r3
   326bc:	e24bd004 	sub	sp, fp, #4
   326c0:	e8bd8800 	pop	{fp, pc}

000326c4 <StoreTLC59711::Update(TTLC59711DmxParams const*)>:
   326c4:	e92d4800 	push	{fp, lr}
   326c8:	e28db004 	add	fp, sp, #4
   326cc:	e24dd008 	sub	sp, sp, #8
   326d0:	e50b0008 	str	r0, [fp, #-8]
   326d4:	e50b100c 	str	r1, [fp, #-12]
   326d8:	ebff7c35 	bl	117b4 <ConfigStore::Get()>
   326dc:	e3a03010 	mov	r3, #16
   326e0:	e51b200c 	ldr	r2, [fp, #-12]
   326e4:	e3a01009 	mov	r1, #9
   326e8:	ebff7c1c 	bl	11760 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>
   326ec:	e1a00000 	nop			; (mov r0, r0)
   326f0:	e24bd004 	sub	sp, fp, #4
   326f4:	e8bd8800 	pop	{fp, pc}

000326f8 <StoreTLC59711::Copy(TTLC59711DmxParams*)>:
   326f8:	e92d4800 	push	{fp, lr}
   326fc:	e28db004 	add	fp, sp, #4
   32700:	e24dd010 	sub	sp, sp, #16
   32704:	e50b0008 	str	r0, [fp, #-8]
   32708:	e50b100c 	str	r1, [fp, #-12]
   3270c:	ebff7c28 	bl	117b4 <ConfigStore::Get()>
   32710:	e3a03001 	mov	r3, #1
   32714:	e58d3004 	str	r3, [sp, #4]
   32718:	e3a03000 	mov	r3, #0
   3271c:	e58d3000 	str	r3, [sp]
   32720:	e3a03010 	mov	r3, #16
   32724:	e51b200c 	ldr	r2, [fp, #-12]
   32728:	e3a01009 	mov	r1, #9
   3272c:	eb0002dc 	bl	332a4 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
   32730:	e1a00000 	nop			; (mov r0, r0)
   32734:	e24bd004 	sub	sp, fp, #4
   32738:	e8bd8800 	pop	{fp, pc}

0003273c <StoreTLC59711::SaveDmxStartAddress(unsigned short)>:
   3273c:	e92d4800 	push	{fp, lr}
   32740:	e28db004 	add	fp, sp, #4
   32744:	e24dd018 	sub	sp, sp, #24
   32748:	e50b0008 	str	r0, [fp, #-8]
   3274c:	e1a03001 	mov	r3, r1
   32750:	e14b30ba 	strh	r3, [fp, #-10]
   32754:	ebff7c16 	bl	117b4 <ConfigStore::Get()>
   32758:	e24b200a 	sub	r2, fp, #10
   3275c:	e3a03000 	mov	r3, #0
   32760:	e58d3008 	str	r3, [sp, #8]
   32764:	e3a03004 	mov	r3, #4
   32768:	e58d3004 	str	r3, [sp, #4]
   3276c:	e3a03004 	mov	r3, #4
   32770:	e58d3000 	str	r3, [sp]
   32774:	e1a03002 	mov	r3, r2
   32778:	e3a0200a 	mov	r2, #10
   3277c:	e3a01009 	mov	r1, #9
   32780:	eb00025a 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   32784:	e1a00000 	nop			; (mov r0, r0)
   32788:	e24bd004 	sub	sp, fp, #4
   3278c:	e8bd8800 	pop	{fp, pc}

00032790 <non-virtual thunk to StoreTLC59711::SaveDmxStartAddress(unsigned short)>:
   32790:	e2400004 	sub	r0, r0, #4
   32794:	eaffffe8 	b	3273c <StoreTLC59711::SaveDmxStartAddress(unsigned short)>

00032798 <TLC59711DmxParamsStore::TLC59711DmxParamsStore()>:
   32798:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3279c:	e28db000 	add	fp, sp, #0
   327a0:	e24dd00c 	sub	sp, sp, #12
   327a4:	e50b0008 	str	r0, [fp, #-8]
   327a8:	e59f2018 	ldr	r2, [pc, #24]	; 327c8 <TLC59711DmxParamsStore::TLC59711DmxParamsStore()+0x30>
   327ac:	e51b3008 	ldr	r3, [fp, #-8]
   327b0:	e5832000 	str	r2, [r3]
   327b4:	e51b3008 	ldr	r3, [fp, #-8]
   327b8:	e1a00003 	mov	r0, r3
   327bc:	e28bd000 	add	sp, fp, #0
   327c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   327c4:	e12fff1e 	bx	lr
   327c8:	000487fc 	.word	0x000487fc

000327cc <TLC59711DmxStore::TLC59711DmxStore()>:
   327cc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   327d0:	e28db000 	add	fp, sp, #0
   327d4:	e24dd00c 	sub	sp, sp, #12
   327d8:	e50b0008 	str	r0, [fp, #-8]
   327dc:	e59f2018 	ldr	r2, [pc, #24]	; 327fc <TLC59711DmxStore::TLC59711DmxStore()+0x30>
   327e0:	e51b3008 	ldr	r3, [fp, #-8]
   327e4:	e5832000 	str	r2, [r3]
   327e8:	e51b3008 	ldr	r3, [fp, #-8]
   327ec:	e1a00003 	mov	r0, r3
   327f0:	e28bd000 	add	sp, fp, #0
   327f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   327f8:	e12fff1e 	bx	lr
   327fc:	00048814 	.word	0x00048814

00032800 <StoreTLC59711::StoreTLC59711()>:
   32800:	e92d4800 	push	{fp, lr}
   32804:	e28db004 	add	fp, sp, #4
   32808:	e24dd008 	sub	sp, sp, #8
   3280c:	e50b0008 	str	r0, [fp, #-8]
   32810:	e51b3008 	ldr	r3, [fp, #-8]
   32814:	e1a00003 	mov	r0, r3
   32818:	ebffffde 	bl	32798 <TLC59711DmxParamsStore::TLC59711DmxParamsStore()>
   3281c:	e51b3008 	ldr	r3, [fp, #-8]
   32820:	e2833004 	add	r3, r3, #4
   32824:	e1a00003 	mov	r0, r3
   32828:	ebffffe7 	bl	327cc <TLC59711DmxStore::TLC59711DmxStore()>
   3282c:	e59f202c 	ldr	r2, [pc, #44]	; 32860 <StoreTLC59711::StoreTLC59711()+0x60>
   32830:	e51b3008 	ldr	r3, [fp, #-8]
   32834:	e5832000 	str	r2, [r3]
   32838:	e59f2024 	ldr	r2, [pc, #36]	; 32864 <StoreTLC59711::StoreTLC59711()+0x64>
   3283c:	e51b3008 	ldr	r3, [fp, #-8]
   32840:	e5832004 	str	r2, [r3, #4]
   32844:	e59f201c 	ldr	r2, [pc, #28]	; 32868 <StoreTLC59711::StoreTLC59711()+0x68>
   32848:	e51b3008 	ldr	r3, [fp, #-8]
   3284c:	e5823000 	str	r3, [r2]
   32850:	e51b3008 	ldr	r3, [fp, #-8]
   32854:	e1a00003 	mov	r0, r3
   32858:	e24bd004 	sub	sp, fp, #4
   3285c:	e8bd8800 	pop	{fp, pc}
   32860:	000487cc 	.word	0x000487cc
   32864:	000487e8 	.word	0x000487e8
   32868:	0005dc1c 	.word	0x0005dc1c

0003286c <StoreTLC59711::~StoreTLC59711()>:
   3286c:	e92d4800 	push	{fp, lr}
   32870:	e28db004 	add	fp, sp, #4
   32874:	e24dd008 	sub	sp, sp, #8
   32878:	e50b0008 	str	r0, [fp, #-8]
   3287c:	e59f203c 	ldr	r2, [pc, #60]	; 328c0 <StoreTLC59711::~StoreTLC59711()+0x54>
   32880:	e51b3008 	ldr	r3, [fp, #-8]
   32884:	e5832000 	str	r2, [r3]
   32888:	e59f2034 	ldr	r2, [pc, #52]	; 328c4 <StoreTLC59711::~StoreTLC59711()+0x58>
   3288c:	e51b3008 	ldr	r3, [fp, #-8]
   32890:	e5832004 	str	r2, [r3, #4]
   32894:	e51b3008 	ldr	r3, [fp, #-8]
   32898:	e2833004 	add	r3, r3, #4
   3289c:	e1a00003 	mov	r0, r3
   328a0:	ebffff55 	bl	325fc <TLC59711DmxStore::~TLC59711DmxStore()>
   328a4:	e51b3008 	ldr	r3, [fp, #-8]
   328a8:	e1a00003 	mov	r0, r3
   328ac:	ebffff6b 	bl	32660 <TLC59711DmxParamsStore::~TLC59711DmxParamsStore()>
   328b0:	e51b3008 	ldr	r3, [fp, #-8]
   328b4:	e1a00003 	mov	r0, r3
   328b8:	e24bd004 	sub	sp, fp, #4
   328bc:	e8bd8800 	pop	{fp, pc}
   328c0:	000487cc 	.word	0x000487cc
   328c4:	000487e8 	.word	0x000487e8

000328c8 <non-virtual thunk to StoreTLC59711::~StoreTLC59711()>:
   328c8:	e2400004 	sub	r0, r0, #4
   328cc:	eaffffe6 	b	3286c <StoreTLC59711::~StoreTLC59711()>

000328d0 <StoreTLC59711::~StoreTLC59711()>:
   328d0:	e92d4800 	push	{fp, lr}
   328d4:	e28db004 	add	fp, sp, #4
   328d8:	e24dd008 	sub	sp, sp, #8
   328dc:	e50b0008 	str	r0, [fp, #-8]
   328e0:	e51b0008 	ldr	r0, [fp, #-8]
   328e4:	ebffffe0 	bl	3286c <StoreTLC59711::~StoreTLC59711()>
   328e8:	e51b0008 	ldr	r0, [fp, #-8]
   328ec:	ebff7a85 	bl	11308 <operator delete(void*)@plt>
   328f0:	e51b3008 	ldr	r3, [fp, #-8]
   328f4:	e1a00003 	mov	r0, r3
   328f8:	e24bd004 	sub	sp, fp, #4
   328fc:	e8bd8800 	pop	{fp, pc}

00032900 <non-virtual thunk to StoreTLC59711::~StoreTLC59711()>:
   32900:	e2400004 	sub	r0, r0, #4
   32904:	eafffff1 	b	328d0 <StoreTLC59711::~StoreTLC59711()>

00032908 <DisplayUdfParamsStore::~DisplayUdfParamsStore()>:
   32908:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3290c:	e28db000 	add	fp, sp, #0
   32910:	e24dd00c 	sub	sp, sp, #12
   32914:	e50b0008 	str	r0, [fp, #-8]
   32918:	e59f2018 	ldr	r2, [pc, #24]	; 32938 <DisplayUdfParamsStore::~DisplayUdfParamsStore()+0x30>
   3291c:	e51b3008 	ldr	r3, [fp, #-8]
   32920:	e5832000 	str	r2, [r3]
   32924:	e51b3008 	ldr	r3, [fp, #-8]
   32928:	e1a00003 	mov	r0, r3
   3292c:	e28bd000 	add	sp, fp, #0
   32930:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   32934:	e12fff1e 	bx	lr
   32938:	00048970 	.word	0x00048970

0003293c <DisplayUdfParamsStore::~DisplayUdfParamsStore()>:
   3293c:	e92d4800 	push	{fp, lr}
   32940:	e28db004 	add	fp, sp, #4
   32944:	e24dd008 	sub	sp, sp, #8
   32948:	e50b0008 	str	r0, [fp, #-8]
   3294c:	e51b0008 	ldr	r0, [fp, #-8]
   32950:	ebffffec 	bl	32908 <DisplayUdfParamsStore::~DisplayUdfParamsStore()>
   32954:	e51b0008 	ldr	r0, [fp, #-8]
   32958:	ebff7a6a 	bl	11308 <operator delete(void*)@plt>
   3295c:	e51b3008 	ldr	r3, [fp, #-8]
   32960:	e1a00003 	mov	r0, r3
   32964:	e24bd004 	sub	sp, fp, #4
   32968:	e8bd8800 	pop	{fp, pc}

0003296c <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
   3296c:	e92d4800 	push	{fp, lr}
   32970:	e28db004 	add	fp, sp, #4
   32974:	e24dd008 	sub	sp, sp, #8
   32978:	e50b0008 	str	r0, [fp, #-8]
   3297c:	e50b100c 	str	r1, [fp, #-12]
   32980:	ebff7b8b 	bl	117b4 <ConfigStore::Get()>
   32984:	e3a03022 	mov	r3, #34	; 0x22
   32988:	e51b200c 	ldr	r2, [fp, #-12]
   3298c:	e3a0100f 	mov	r1, #15
   32990:	ebff7b72 	bl	11760 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>
   32994:	e1a00000 	nop			; (mov r0, r0)
   32998:	e24bd004 	sub	sp, fp, #4
   3299c:	e8bd8800 	pop	{fp, pc}

000329a0 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
   329a0:	e92d4800 	push	{fp, lr}
   329a4:	e28db004 	add	fp, sp, #4
   329a8:	e24dd010 	sub	sp, sp, #16
   329ac:	e50b0008 	str	r0, [fp, #-8]
   329b0:	e50b100c 	str	r1, [fp, #-12]
   329b4:	ebff7b7e 	bl	117b4 <ConfigStore::Get()>
   329b8:	e3a03001 	mov	r3, #1
   329bc:	e58d3004 	str	r3, [sp, #4]
   329c0:	e3a03000 	mov	r3, #0
   329c4:	e58d3000 	str	r3, [sp]
   329c8:	e3a03022 	mov	r3, #34	; 0x22
   329cc:	e51b200c 	ldr	r2, [fp, #-12]
   329d0:	e3a0100f 	mov	r1, #15
   329d4:	eb000232 	bl	332a4 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
   329d8:	e1a00000 	nop			; (mov r0, r0)
   329dc:	e24bd004 	sub	sp, fp, #4
   329e0:	e8bd8800 	pop	{fp, pc}

000329e4 <DisplayUdfParamsStore::DisplayUdfParamsStore()>:
   329e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   329e8:	e28db000 	add	fp, sp, #0
   329ec:	e24dd00c 	sub	sp, sp, #12
   329f0:	e50b0008 	str	r0, [fp, #-8]
   329f4:	e59f2018 	ldr	r2, [pc, #24]	; 32a14 <DisplayUdfParamsStore::DisplayUdfParamsStore()+0x30>
   329f8:	e51b3008 	ldr	r3, [fp, #-8]
   329fc:	e5832000 	str	r2, [r3]
   32a00:	e51b3008 	ldr	r3, [fp, #-8]
   32a04:	e1a00003 	mov	r0, r3
   32a08:	e28bd000 	add	sp, fp, #0
   32a0c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   32a10:	e12fff1e 	bx	lr
   32a14:	00048970 	.word	0x00048970

00032a18 <StoreDisplayUdf::StoreDisplayUdf()>:
   32a18:	e92d4800 	push	{fp, lr}
   32a1c:	e28db004 	add	fp, sp, #4
   32a20:	e24dd008 	sub	sp, sp, #8
   32a24:	e50b0008 	str	r0, [fp, #-8]
   32a28:	e51b3008 	ldr	r3, [fp, #-8]
   32a2c:	e1a00003 	mov	r0, r3
   32a30:	ebffffeb 	bl	329e4 <DisplayUdfParamsStore::DisplayUdfParamsStore()>
   32a34:	e59f2020 	ldr	r2, [pc, #32]	; 32a5c <StoreDisplayUdf::StoreDisplayUdf()+0x44>
   32a38:	e51b3008 	ldr	r3, [fp, #-8]
   32a3c:	e5832000 	str	r2, [r3]
   32a40:	e59f2018 	ldr	r2, [pc, #24]	; 32a60 <StoreDisplayUdf::StoreDisplayUdf()+0x48>
   32a44:	e51b3008 	ldr	r3, [fp, #-8]
   32a48:	e5823000 	str	r3, [r2]
   32a4c:	e51b3008 	ldr	r3, [fp, #-8]
   32a50:	e1a00003 	mov	r0, r3
   32a54:	e24bd004 	sub	sp, fp, #4
   32a58:	e8bd8800 	pop	{fp, pc}
   32a5c:	00048958 	.word	0x00048958
   32a60:	0005dc20 	.word	0x0005dc20

00032a64 <StoreDisplayUdf::~StoreDisplayUdf()>:
   32a64:	e92d4800 	push	{fp, lr}
   32a68:	e28db004 	add	fp, sp, #4
   32a6c:	e24dd008 	sub	sp, sp, #8
   32a70:	e50b0008 	str	r0, [fp, #-8]
   32a74:	e59f2020 	ldr	r2, [pc, #32]	; 32a9c <StoreDisplayUdf::~StoreDisplayUdf()+0x38>
   32a78:	e51b3008 	ldr	r3, [fp, #-8]
   32a7c:	e5832000 	str	r2, [r3]
   32a80:	e51b3008 	ldr	r3, [fp, #-8]
   32a84:	e1a00003 	mov	r0, r3
   32a88:	ebffff9e 	bl	32908 <DisplayUdfParamsStore::~DisplayUdfParamsStore()>
   32a8c:	e51b3008 	ldr	r3, [fp, #-8]
   32a90:	e1a00003 	mov	r0, r3
   32a94:	e24bd004 	sub	sp, fp, #4
   32a98:	e8bd8800 	pop	{fp, pc}
   32a9c:	00048958 	.word	0x00048958

00032aa0 <StoreDisplayUdf::~StoreDisplayUdf()>:
   32aa0:	e92d4800 	push	{fp, lr}
   32aa4:	e28db004 	add	fp, sp, #4
   32aa8:	e24dd008 	sub	sp, sp, #8
   32aac:	e50b0008 	str	r0, [fp, #-8]
   32ab0:	e51b0008 	ldr	r0, [fp, #-8]
   32ab4:	ebffffea 	bl	32a64 <StoreDisplayUdf::~StoreDisplayUdf()>
   32ab8:	e51b0008 	ldr	r0, [fp, #-8]
   32abc:	ebff7a11 	bl	11308 <operator delete(void*)@plt>
   32ac0:	e51b3008 	ldr	r3, [fp, #-8]
   32ac4:	e1a00003 	mov	r0, r3
   32ac8:	e24bd004 	sub	sp, fp, #4
   32acc:	e8bd8800 	pop	{fp, pc}

00032ad0 <NetworkParamsStore::NetworkParamsStore()>:
   32ad0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   32ad4:	e28db000 	add	fp, sp, #0
   32ad8:	e24dd00c 	sub	sp, sp, #12
   32adc:	e50b0008 	str	r0, [fp, #-8]
   32ae0:	e59f2018 	ldr	r2, [pc, #24]	; 32b00 <NetworkParamsStore::NetworkParamsStore()+0x30>
   32ae4:	e51b3008 	ldr	r3, [fp, #-8]
   32ae8:	e5832000 	str	r2, [r3]
   32aec:	e51b3008 	ldr	r3, [fp, #-8]
   32af0:	e1a00003 	mov	r0, r3
   32af4:	e28bd000 	add	sp, fp, #0
   32af8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   32afc:	e12fff1e 	bx	lr
   32b00:	000444f8 	.word	0x000444f8

00032b04 <NetworkStore::NetworkStore()>:
   32b04:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   32b08:	e28db000 	add	fp, sp, #0
   32b0c:	e24dd00c 	sub	sp, sp, #12
   32b10:	e50b0008 	str	r0, [fp, #-8]
   32b14:	e59f2018 	ldr	r2, [pc, #24]	; 32b34 <NetworkStore::NetworkStore()+0x30>
   32b18:	e51b3008 	ldr	r3, [fp, #-8]
   32b1c:	e5832000 	str	r2, [r3]
   32b20:	e51b3008 	ldr	r3, [fp, #-8]
   32b24:	e1a00003 	mov	r0, r3
   32b28:	e28bd000 	add	sp, fp, #0
   32b2c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   32b30:	e12fff1e 	bx	lr
   32b34:	00044510 	.word	0x00044510

00032b38 <StoreNetwork::StoreNetwork()>:
   32b38:	e92d4800 	push	{fp, lr}
   32b3c:	e28db004 	add	fp, sp, #4
   32b40:	e24dd008 	sub	sp, sp, #8
   32b44:	e50b0008 	str	r0, [fp, #-8]
   32b48:	e51b3008 	ldr	r3, [fp, #-8]
   32b4c:	e1a00003 	mov	r0, r3
   32b50:	ebffffde 	bl	32ad0 <NetworkParamsStore::NetworkParamsStore()>
   32b54:	e51b3008 	ldr	r3, [fp, #-8]
   32b58:	e2833004 	add	r3, r3, #4
   32b5c:	e1a00003 	mov	r0, r3
   32b60:	ebffffe7 	bl	32b04 <NetworkStore::NetworkStore()>
   32b64:	e59f202c 	ldr	r2, [pc, #44]	; 32b98 <StoreNetwork::StoreNetwork()+0x60>
   32b68:	e51b3008 	ldr	r3, [fp, #-8]
   32b6c:	e5832000 	str	r2, [r3]
   32b70:	e59f2024 	ldr	r2, [pc, #36]	; 32b9c <StoreNetwork::StoreNetwork()+0x64>
   32b74:	e51b3008 	ldr	r3, [fp, #-8]
   32b78:	e5832004 	str	r2, [r3, #4]
   32b7c:	e59f201c 	ldr	r2, [pc, #28]	; 32ba0 <StoreNetwork::StoreNetwork()+0x68>
   32b80:	e51b3008 	ldr	r3, [fp, #-8]
   32b84:	e5823000 	str	r3, [r2]
   32b88:	e51b3008 	ldr	r3, [fp, #-8]
   32b8c:	e1a00003 	mov	r0, r3
   32b90:	e24bd004 	sub	sp, fp, #4
   32b94:	e8bd8800 	pop	{fp, pc}
   32b98:	000444a8 	.word	0x000444a8
   32b9c:	000444d4 	.word	0x000444d4
   32ba0:	0005dc24 	.word	0x0005dc24

00032ba4 <StoreDevice::IsDetected() const>:
   32ba4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   32ba8:	e28db000 	add	fp, sp, #0
   32bac:	e24dd00c 	sub	sp, sp, #12
   32bb0:	e50b0008 	str	r0, [fp, #-8]
   32bb4:	e51b3008 	ldr	r3, [fp, #-8]
   32bb8:	e5d33000 	ldrb	r3, [r3]
   32bbc:	e1a00003 	mov	r0, r3
   32bc0:	e28bd000 	add	sp, fp, #0
   32bc4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   32bc8:	e12fff1e 	bx	lr

00032bcc <ConfigStore::ConfigStore()>:
   32bcc:	e92d4800 	push	{fp, lr}
   32bd0:	e28db004 	add	fp, sp, #4
   32bd4:	e24dd010 	sub	sp, sp, #16
   32bd8:	e50b0010 	str	r0, [fp, #-16]
   32bdc:	e51b3010 	ldr	r3, [fp, #-16]
   32be0:	e1a00003 	mov	r0, r3
   32be4:	eb0002ba 	bl	336d4 <StoreDevice::StoreDevice()>
   32be8:	e59f20a4 	ldr	r2, [pc, #164]	; 32c94 <ConfigStore::ConfigStore()+0xc8>
   32bec:	e51b3010 	ldr	r3, [fp, #-16]
   32bf0:	e5823000 	str	r3, [r2]
   32bf4:	e51b3010 	ldr	r3, [fp, #-16]
   32bf8:	e1a00003 	mov	r0, r3
   32bfc:	ebffffe8 	bl	32ba4 <StoreDevice::IsDetected() const>
   32c00:	e1a03000 	mov	r3, r0
   32c04:	e3530000 	cmp	r3, #0
   32c08:	0a000005 	beq	32c24 <ConfigStore::ConfigStore()+0x58>
   32c0c:	e51b0010 	ldr	r0, [fp, #-16]
   32c10:	eb000023 	bl	32ca4 <ConfigStore::Init()>
   32c14:	e1a03000 	mov	r3, r0
   32c18:	e1a02003 	mov	r2, r3
   32c1c:	e59f3074 	ldr	r3, [pc, #116]	; 32c98 <ConfigStore::ConfigStore()+0xcc>
   32c20:	e5c32000 	strb	r2, [r3]
   32c24:	e59f306c 	ldr	r3, [pc, #108]	; 32c98 <ConfigStore::ConfigStore()+0xcc>
   32c28:	e5d33000 	ldrb	r3, [r3]
   32c2c:	e3530000 	cmp	r3, #0
   32c30:	0a000013 	beq	32c84 <ConfigStore::ConfigStore()+0xb8>
   32c34:	e59f3060 	ldr	r3, [pc, #96]	; 32c9c <ConfigStore::ConfigStore()+0xd0>
   32c38:	e3a02020 	mov	r2, #32
   32c3c:	e5832000 	str	r2, [r3]
   32c40:	e3a03000 	mov	r3, #0
   32c44:	e50b3008 	str	r3, [fp, #-8]
   32c48:	e51b3008 	ldr	r3, [fp, #-8]
   32c4c:	e353001b 	cmp	r3, #27
   32c50:	8a00000b 	bhi	32c84 <ConfigStore::ConfigStore()+0xb8>
   32c54:	e59f2044 	ldr	r2, [pc, #68]	; 32ca0 <ConfigStore::ConfigStore()+0xd4>
   32c58:	e51b3008 	ldr	r3, [fp, #-8]
   32c5c:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   32c60:	e59f3034 	ldr	r3, [pc, #52]	; 32c9c <ConfigStore::ConfigStore()+0xd0>
   32c64:	e5933000 	ldr	r3, [r3]
   32c68:	e0823003 	add	r3, r2, r3
   32c6c:	e59f2028 	ldr	r2, [pc, #40]	; 32c9c <ConfigStore::ConfigStore()+0xd0>
   32c70:	e5823000 	str	r3, [r2]
   32c74:	e51b3008 	ldr	r3, [fp, #-8]
   32c78:	e2833001 	add	r3, r3, #1
   32c7c:	e50b3008 	str	r3, [fp, #-8]
   32c80:	eafffff0 	b	32c48 <ConfigStore::ConfigStore()+0x7c>
   32c84:	e51b3010 	ldr	r3, [fp, #-16]
   32c88:	e1a00003 	mov	r0, r3
   32c8c:	e24bd004 	sub	sp, fp, #4
   32c90:	e8bd8800 	pop	{fp, pc}
   32c94:	0005ec3c 	.word	0x0005ec3c
   32c98:	0005dc28 	.word	0x0005dc28
   32c9c:	0005dc34 	.word	0x0005dc34
   32ca0:	000489ac 	.word	0x000489ac

00032ca4 <ConfigStore::Init()>:
   32ca4:	e92d4800 	push	{fp, lr}
   32ca8:	e28db004 	add	fp, sp, #4
   32cac:	e24dd038 	sub	sp, sp, #56	; 0x38
   32cb0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   32cb4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   32cb8:	e1a00003 	mov	r0, r3
   32cbc:	eb0002f1 	bl	33888 <StoreDevice::GetSectorSize() const>
   32cc0:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
   32cc4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   32cc8:	e3530a01 	cmp	r3, #4096	; 0x1000
   32ccc:	0a000001 	beq	32cd8 <ConfigStore::Init()+0x34>
   32cd0:	e3a03000 	mov	r3, #0
   32cd4:	ea0000b9 	b	32fc0 <ConfigStore::Init()+0x31c>
   32cd8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   32cdc:	e1a00003 	mov	r0, r3
   32ce0:	eb0002df 	bl	33864 <StoreDevice::GetSize() const>
   32ce4:	e1a02000 	mov	r2, r0
   32ce8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   32cec:	e0423003 	sub	r3, r2, r3
   32cf0:	e59f22d4 	ldr	r2, [pc, #724]	; 32fcc <ConfigStore::Init()+0x328>
   32cf4:	e5823000 	str	r3, [r2]
   32cf8:	e59f32cc 	ldr	r3, [pc, #716]	; 32fcc <ConfigStore::Init()+0x328>
   32cfc:	e5933000 	ldr	r3, [r3]
   32d00:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   32d04:	e1a00003 	mov	r0, r3
   32d08:	ebff792a 	bl	111b8 <__aeabi_uidivmod@plt>
   32d0c:	e1a03001 	mov	r3, r1
   32d10:	e3530000 	cmp	r3, #0
   32d14:	0a000001 	beq	32d20 <ConfigStore::Init()+0x7c>
   32d18:	e3a03000 	mov	r3, #0
   32d1c:	ea0000a7 	b	32fc0 <ConfigStore::Init()+0x31c>
   32d20:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   32d24:	e59f32a0 	ldr	r3, [pc, #672]	; 32fcc <ConfigStore::Init()+0x328>
   32d28:	e5931000 	ldr	r1, [r3]
   32d2c:	e24b3028 	sub	r3, fp, #40	; 0x28
   32d30:	e58d3000 	str	r3, [sp]
   32d34:	e59f3294 	ldr	r3, [pc, #660]	; 32fd0 <ConfigStore::Init()+0x32c>
   32d38:	e3a02a01 	mov	r2, #4096	; 0x1000
   32d3c:	eb0002da 	bl	338ac <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>
   32d40:	e3a03001 	mov	r3, #1
   32d44:	e54b3005 	strb	r3, [fp, #-5]
   32d48:	e3a03000 	mov	r3, #0
   32d4c:	e50b300c 	str	r3, [fp, #-12]
   32d50:	e51b300c 	ldr	r3, [fp, #-12]
   32d54:	e3530003 	cmp	r3, #3
   32d58:	8a000018 	bhi	32dc0 <ConfigStore::Init()+0x11c>
   32d5c:	e59f2270 	ldr	r2, [pc, #624]	; 32fd4 <ConfigStore::Init()+0x330>
   32d60:	e51b300c 	ldr	r3, [fp, #-12]
   32d64:	e0823003 	add	r3, r2, r3
   32d68:	e5d32000 	ldrb	r2, [r3]
   32d6c:	e59f125c 	ldr	r1, [pc, #604]	; 32fd0 <ConfigStore::Init()+0x32c>
   32d70:	e51b300c 	ldr	r3, [fp, #-12]
   32d74:	e0813003 	add	r3, r1, r3
   32d78:	e5d33000 	ldrb	r3, [r3]
   32d7c:	e1520003 	cmp	r2, r3
   32d80:	0a00000a 	beq	32db0 <ConfigStore::Init()+0x10c>
   32d84:	e59f2248 	ldr	r2, [pc, #584]	; 32fd4 <ConfigStore::Init()+0x330>
   32d88:	e51b300c 	ldr	r3, [fp, #-12]
   32d8c:	e0823003 	add	r3, r2, r3
   32d90:	e5d31000 	ldrb	r1, [r3]
   32d94:	e59f2234 	ldr	r2, [pc, #564]	; 32fd0 <ConfigStore::Init()+0x32c>
   32d98:	e51b300c 	ldr	r3, [fp, #-12]
   32d9c:	e0823003 	add	r3, r2, r3
   32da0:	e1a02001 	mov	r2, r1
   32da4:	e5c32000 	strb	r2, [r3]
   32da8:	e3a03000 	mov	r3, #0
   32dac:	e54b3005 	strb	r3, [fp, #-5]
   32db0:	e51b300c 	ldr	r3, [fp, #-12]
   32db4:	e2833001 	add	r3, r3, #1
   32db8:	e50b300c 	str	r3, [fp, #-12]
   32dbc:	eaffffe3 	b	32d50 <ConfigStore::Init()+0xac>
   32dc0:	e55b3005 	ldrb	r3, [fp, #-5]
   32dc4:	e2233001 	eor	r3, r3, #1
   32dc8:	e6ef3073 	uxtb	r3, r3
   32dcc:	e3530000 	cmp	r3, #0
   32dd0:	0a000040 	beq	32ed8 <ConfigStore::Init()+0x234>
   32dd4:	e59f31fc 	ldr	r3, [pc, #508]	; 32fd8 <ConfigStore::Init()+0x334>
   32dd8:	e3a02001 	mov	r2, #1
   32ddc:	e5c32000 	strb	r2, [r3]
   32de0:	e3a03000 	mov	r3, #0
   32de4:	e50b3010 	str	r3, [fp, #-16]
   32de8:	e51b3010 	ldr	r3, [fp, #-16]
   32dec:	e353001b 	cmp	r3, #27
   32df0:	8a000033 	bhi	32ec4 <ConfigStore::Init()+0x220>
   32df4:	e51b3010 	ldr	r3, [fp, #-16]
   32df8:	e1a01003 	mov	r1, r3
   32dfc:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   32e00:	eb000077 	bl	32fe4 <ConfigStore::GetStoreOffset(configstore::Store)>
   32e04:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   32e08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   32e0c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   32e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   32e14:	e2832001 	add	r2, r3, #1
   32e18:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   32e1c:	e59f21ac 	ldr	r2, [pc, #428]	; 32fd0 <ConfigStore::Init()+0x32c>
   32e20:	e3a01000 	mov	r1, #0
   32e24:	e7c21003 	strb	r1, [r2, r3]
   32e28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   32e2c:	e2832001 	add	r2, r3, #1
   32e30:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   32e34:	e59f2194 	ldr	r2, [pc, #404]	; 32fd0 <ConfigStore::Init()+0x32c>
   32e38:	e3a01000 	mov	r1, #0
   32e3c:	e7c21003 	strb	r1, [r2, r3]
   32e40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   32e44:	e2832001 	add	r2, r3, #1
   32e48:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   32e4c:	e59f217c 	ldr	r2, [pc, #380]	; 32fd0 <ConfigStore::Init()+0x32c>
   32e50:	e3a01000 	mov	r1, #0
   32e54:	e7c21003 	strb	r1, [r2, r3]
   32e58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   32e5c:	e2832001 	add	r2, r3, #1
   32e60:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   32e64:	e59f2164 	ldr	r2, [pc, #356]	; 32fd0 <ConfigStore::Init()+0x32c>
   32e68:	e3a01000 	mov	r1, #0
   32e6c:	e7c21003 	strb	r1, [r2, r3]
   32e70:	e59f2164 	ldr	r2, [pc, #356]	; 32fdc <ConfigStore::Init()+0x338>
   32e74:	e51b3010 	ldr	r3, [fp, #-16]
   32e78:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   32e7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   32e80:	e0823003 	add	r3, r2, r3
   32e84:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   32e88:	e1520003 	cmp	r2, r3
   32e8c:	2a000008 	bcs	32eb4 <ConfigStore::Init()+0x210>
   32e90:	e59f2138 	ldr	r2, [pc, #312]	; 32fd0 <ConfigStore::Init()+0x32c>
   32e94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   32e98:	e0823003 	add	r3, r2, r3
   32e9c:	e3e02000 	mvn	r2, #0
   32ea0:	e5c32000 	strb	r2, [r3]
   32ea4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   32ea8:	e2833001 	add	r3, r3, #1
   32eac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   32eb0:	eaffffee 	b	32e70 <ConfigStore::Init()+0x1cc>
   32eb4:	e51b3010 	ldr	r3, [fp, #-16]
   32eb8:	e2833001 	add	r3, r3, #1
   32ebc:	e50b3010 	str	r3, [fp, #-16]
   32ec0:	eaffffc8 	b	32de8 <ConfigStore::Init()+0x144>
   32ec4:	e59f3114 	ldr	r3, [pc, #276]	; 32fe0 <ConfigStore::Init()+0x33c>
   32ec8:	e3a02001 	mov	r2, #1
   32ecc:	e5832000 	str	r2, [r3]
   32ed0:	e3a03001 	mov	r3, #1
   32ed4:	ea000039 	b	32fc0 <ConfigStore::Init()+0x31c>
   32ed8:	e3a03000 	mov	r3, #0
   32edc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   32ee0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   32ee4:	e353001b 	cmp	r3, #27
   32ee8:	8a000033 	bhi	32fbc <ConfigStore::Init()+0x318>
   32eec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   32ef0:	e1a01003 	mov	r1, r3
   32ef4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   32ef8:	eb000039 	bl	32fe4 <ConfigStore::GetStoreOffset(configstore::Store)>
   32efc:	e1a02000 	mov	r2, r0
   32f00:	e59f30c8 	ldr	r3, [pc, #200]	; 32fd0 <ConfigStore::Init()+0x32c>
   32f04:	e0823003 	add	r3, r2, r3
   32f08:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   32f0c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   32f10:	e5d33000 	ldrb	r3, [r3]
   32f14:	e35300ff 	cmp	r3, #255	; 0xff
   32f18:	1a000023 	bne	32fac <ConfigStore::Init()+0x308>
   32f1c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   32f20:	e2833001 	add	r3, r3, #1
   32f24:	e5d33000 	ldrb	r3, [r3]
   32f28:	e35300ff 	cmp	r3, #255	; 0xff
   32f2c:	1a00001e 	bne	32fac <ConfigStore::Init()+0x308>
   32f30:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   32f34:	e2833002 	add	r3, r3, #2
   32f38:	e5d33000 	ldrb	r3, [r3]
   32f3c:	e35300ff 	cmp	r3, #255	; 0xff
   32f40:	1a000019 	bne	32fac <ConfigStore::Init()+0x308>
   32f44:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   32f48:	e2833003 	add	r3, r3, #3
   32f4c:	e5d33000 	ldrb	r3, [r3]
   32f50:	e35300ff 	cmp	r3, #255	; 0xff
   32f54:	1a000014 	bne	32fac <ConfigStore::Init()+0x308>
   32f58:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   32f5c:	e2832001 	add	r2, r3, #1
   32f60:	e50b2024 	str	r2, [fp, #-36]	; 0xffffffdc
   32f64:	e3a02000 	mov	r2, #0
   32f68:	e5c32000 	strb	r2, [r3]
   32f6c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   32f70:	e2832001 	add	r2, r3, #1
   32f74:	e50b2024 	str	r2, [fp, #-36]	; 0xffffffdc
   32f78:	e3a02000 	mov	r2, #0
   32f7c:	e5c32000 	strb	r2, [r3]
   32f80:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   32f84:	e2832001 	add	r2, r3, #1
   32f88:	e50b2024 	str	r2, [fp, #-36]	; 0xffffffdc
   32f8c:	e3a02000 	mov	r2, #0
   32f90:	e5c32000 	strb	r2, [r3]
   32f94:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   32f98:	e3a02000 	mov	r2, #0
   32f9c:	e5c32000 	strb	r2, [r3]
   32fa0:	e59f3038 	ldr	r3, [pc, #56]	; 32fe0 <ConfigStore::Init()+0x33c>
   32fa4:	e3a02001 	mov	r2, #1
   32fa8:	e5832000 	str	r2, [r3]
   32fac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   32fb0:	e2833001 	add	r3, r3, #1
   32fb4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   32fb8:	eaffffc8 	b	32ee0 <ConfigStore::Init()+0x23c>
   32fbc:	e3a03001 	mov	r3, #1
   32fc0:	e1a00003 	mov	r0, r3
   32fc4:	e24bd004 	sub	sp, fp, #4
   32fc8:	e8bd8800 	pop	{fp, pc}
   32fcc:	0005dc30 	.word	0x0005dc30
   32fd0:	0005dc3c 	.word	0x0005dc3c
   32fd4:	000489a4 	.word	0x000489a4
   32fd8:	0005dc29 	.word	0x0005dc29
   32fdc:	000489ac 	.word	0x000489ac
   32fe0:	0005dc2c 	.word	0x0005dc2c

00032fe4 <ConfigStore::GetStoreOffset(configstore::Store)>:
   32fe4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   32fe8:	e28db000 	add	fp, sp, #0
   32fec:	e24dd014 	sub	sp, sp, #20
   32ff0:	e50b0010 	str	r0, [fp, #-16]
   32ff4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   32ff8:	e3a03020 	mov	r3, #32
   32ffc:	e50b3008 	str	r3, [fp, #-8]
   33000:	e3a03000 	mov	r3, #0
   33004:	e50b300c 	str	r3, [fp, #-12]
   33008:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3300c:	e51b200c 	ldr	r2, [fp, #-12]
   33010:	e1520003 	cmp	r2, r3
   33014:	2a000009 	bcs	33040 <ConfigStore::GetStoreOffset(configstore::Store)+0x5c>
   33018:	e59f2034 	ldr	r2, [pc, #52]	; 33054 <ConfigStore::GetStoreOffset(configstore::Store)+0x70>
   3301c:	e51b300c 	ldr	r3, [fp, #-12]
   33020:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   33024:	e51b2008 	ldr	r2, [fp, #-8]
   33028:	e0823003 	add	r3, r2, r3
   3302c:	e50b3008 	str	r3, [fp, #-8]
   33030:	e51b300c 	ldr	r3, [fp, #-12]
   33034:	e2833001 	add	r3, r3, #1
   33038:	e50b300c 	str	r3, [fp, #-12]
   3303c:	eafffff1 	b	33008 <ConfigStore::GetStoreOffset(configstore::Store)+0x24>
   33040:	e51b3008 	ldr	r3, [fp, #-8]
   33044:	e1a00003 	mov	r0, r3
   33048:	e28bd000 	add	sp, fp, #0
   3304c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   33050:	e12fff1e 	bx	lr
   33054:	000489ac 	.word	0x000489ac

00033058 <ConfigStore::ResetSetList(configstore::Store)>:
   33058:	e92d4800 	push	{fp, lr}
   3305c:	e28db004 	add	fp, sp, #4
   33060:	e24dd010 	sub	sp, sp, #16
   33064:	e50b0010 	str	r0, [fp, #-16]
   33068:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   3306c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   33070:	e51b0010 	ldr	r0, [fp, #-16]
   33074:	ebffffda 	bl	32fe4 <ConfigStore::GetStoreOffset(configstore::Store)>
   33078:	e1a02000 	mov	r2, r0
   3307c:	e59f3064 	ldr	r3, [pc, #100]	; 330e8 <ConfigStore::ResetSetList(configstore::Store)+0x90>
   33080:	e0823003 	add	r3, r2, r3
   33084:	e50b3008 	str	r3, [fp, #-8]
   33088:	e51b3008 	ldr	r3, [fp, #-8]
   3308c:	e2832001 	add	r2, r3, #1
   33090:	e50b2008 	str	r2, [fp, #-8]
   33094:	e3a02000 	mov	r2, #0
   33098:	e5c32000 	strb	r2, [r3]
   3309c:	e51b3008 	ldr	r3, [fp, #-8]
   330a0:	e2832001 	add	r2, r3, #1
   330a4:	e50b2008 	str	r2, [fp, #-8]
   330a8:	e3a02000 	mov	r2, #0
   330ac:	e5c32000 	strb	r2, [r3]
   330b0:	e51b3008 	ldr	r3, [fp, #-8]
   330b4:	e2832001 	add	r2, r3, #1
   330b8:	e50b2008 	str	r2, [fp, #-8]
   330bc:	e3a02000 	mov	r2, #0
   330c0:	e5c32000 	strb	r2, [r3]
   330c4:	e51b3008 	ldr	r3, [fp, #-8]
   330c8:	e3a02000 	mov	r2, #0
   330cc:	e5c32000 	strb	r2, [r3]
   330d0:	e59f3014 	ldr	r3, [pc, #20]	; 330ec <ConfigStore::ResetSetList(configstore::Store)+0x94>
   330d4:	e3a02001 	mov	r2, #1
   330d8:	e5832000 	str	r2, [r3]
   330dc:	e1a00000 	nop			; (mov r0, r0)
   330e0:	e24bd004 	sub	sp, fp, #4
   330e4:	e8bd8800 	pop	{fp, pc}
   330e8:	0005dc3c 	.word	0x0005dc3c
   330ec:	0005dc2c 	.word	0x0005dc2c

000330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
   330f0:	e92d4800 	push	{fp, lr}
   330f4:	e28db004 	add	fp, sp, #4
   330f8:	e24dd028 	sub	sp, sp, #40	; 0x28
   330fc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   33100:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   33104:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   33108:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   3310c:	e59f3180 	ldr	r3, [pc, #384]	; 33294 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x1a4>
   33110:	e5d33000 	ldrb	r3, [r3]
   33114:	e2233001 	eor	r3, r3, #1
   33118:	e6ef3073 	uxtb	r3, r3
   3311c:	e3530000 	cmp	r3, #0
   33120:	1a000058 	bne	33288 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x198>
   33124:	e3a03000 	mov	r3, #0
   33128:	e54b3005 	strb	r3, [fp, #-5]
   3312c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   33130:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   33134:	ebffffaa 	bl	32fe4 <ConfigStore::GetStoreOffset(configstore::Store)>
   33138:	e1a02000 	mov	r2, r0
   3313c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   33140:	e0833002 	add	r3, r3, r2
   33144:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   33148:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   3314c:	e50b300c 	str	r3, [fp, #-12]
   33150:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   33154:	e59f213c 	ldr	r2, [pc, #316]	; 33298 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x1a8>
   33158:	e0833002 	add	r3, r3, r2
   3315c:	e50b3010 	str	r3, [fp, #-16]
   33160:	e3a03000 	mov	r3, #0
   33164:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   33168:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   3316c:	e59b3004 	ldr	r3, [fp, #4]
   33170:	e1520003 	cmp	r2, r3
   33174:	2a000015 	bcs	331d0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0xe0>
   33178:	e51b300c 	ldr	r3, [fp, #-12]
   3317c:	e5d32000 	ldrb	r2, [r3]
   33180:	e51b3010 	ldr	r3, [fp, #-16]
   33184:	e5d33000 	ldrb	r3, [r3]
   33188:	e1520003 	cmp	r2, r3
   3318c:	0a000005 	beq	331a8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0xb8>
   33190:	e3a03001 	mov	r3, #1
   33194:	e54b3005 	strb	r3, [fp, #-5]
   33198:	e51b300c 	ldr	r3, [fp, #-12]
   3319c:	e5d32000 	ldrb	r2, [r3]
   331a0:	e51b3010 	ldr	r3, [fp, #-16]
   331a4:	e5c32000 	strb	r2, [r3]
   331a8:	e51b3010 	ldr	r3, [fp, #-16]
   331ac:	e2833001 	add	r3, r3, #1
   331b0:	e50b3010 	str	r3, [fp, #-16]
   331b4:	e51b300c 	ldr	r3, [fp, #-12]
   331b8:	e2833001 	add	r3, r3, #1
   331bc:	e50b300c 	str	r3, [fp, #-12]
   331c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   331c4:	e2833001 	add	r3, r3, #1
   331c8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   331cc:	eaffffe5 	b	33168 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>
   331d0:	e55b3005 	ldrb	r3, [fp, #-5]
   331d4:	e3530000 	cmp	r3, #0
   331d8:	0a000011 	beq	33224 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x134>
   331dc:	e59f30b8 	ldr	r3, [pc, #184]	; 3329c <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x1ac>
   331e0:	e5933000 	ldr	r3, [r3]
   331e4:	e3530000 	cmp	r3, #0
   331e8:	0a000003 	beq	331fc <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x10c>
   331ec:	e59f30a8 	ldr	r3, [pc, #168]	; 3329c <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x1ac>
   331f0:	e5933000 	ldr	r3, [r3]
   331f4:	e3530006 	cmp	r3, #6
   331f8:	1a000002 	bne	33208 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x118>
   331fc:	e59f3098 	ldr	r3, [pc, #152]	; 3329c <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x1ac>
   33200:	e3a02001 	mov	r2, #1
   33204:	e5832000 	str	r2, [r3]
   33208:	ebff78fc 	bl	11600 <Hardware::Get()>
   3320c:	e1a03000 	mov	r3, r0
   33210:	e1a00003 	mov	r0, r3
   33214:	eb00342a 	bl	402c4 <Hardware::Millis()>
   33218:	e1a02000 	mov	r2, r0
   3321c:	e59f307c 	ldr	r3, [pc, #124]	; 332a0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x1b0>
   33220:	e5832000 	str	r2, [r3]
   33224:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   33228:	e3530000 	cmp	r3, #0
   3322c:	0a000016 	beq	3328c <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x19c>
   33230:	e55b3005 	ldrb	r3, [fp, #-5]
   33234:	e3530000 	cmp	r3, #0
   33238:	0a000013 	beq	3328c <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x19c>
   3323c:	e59b3008 	ldr	r3, [fp, #8]
   33240:	e3530000 	cmp	r3, #0
   33244:	0a000010 	beq	3328c <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x19c>
   33248:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   3324c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   33250:	ebffff63 	bl	32fe4 <ConfigStore::GetStoreOffset(configstore::Store)>
   33254:	e1a02000 	mov	r2, r0
   33258:	e59f3038 	ldr	r3, [pc, #56]	; 33298 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x1a8>
   3325c:	e0822003 	add	r2, r2, r3
   33260:	e59b300c 	ldr	r3, [fp, #12]
   33264:	e0823003 	add	r3, r2, r3
   33268:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   3326c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   33270:	e5932000 	ldr	r2, [r3]
   33274:	e59b3008 	ldr	r3, [fp, #8]
   33278:	e1822003 	orr	r2, r2, r3
   3327c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   33280:	e5832000 	str	r2, [r3]
   33284:	ea000000 	b	3328c <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x19c>
   33288:	e1a00000 	nop			; (mov r0, r0)
   3328c:	e24bd004 	sub	sp, fp, #4
   33290:	e8bd8800 	pop	{fp, pc}
   33294:	0005dc28 	.word	0x0005dc28
   33298:	0005dc3c 	.word	0x0005dc3c
   3329c:	0005dc2c 	.word	0x0005dc2c
   332a0:	0005dc38 	.word	0x0005dc38

000332a4 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>:
   332a4:	e92d4800 	push	{fp, lr}
   332a8:	e28db004 	add	fp, sp, #4
   332ac:	e24dd030 	sub	sp, sp, #48	; 0x30
   332b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   332b4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   332b8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   332bc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   332c0:	e59f3100 	ldr	r3, [pc, #256]	; 333c8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x124>
   332c4:	e5d33000 	ldrb	r3, [r3]
   332c8:	e2233001 	eor	r3, r3, #1
   332cc:	e6ef3073 	uxtb	r3, r3
   332d0:	e3530000 	cmp	r3, #0
   332d4:	1a000038 	bne	333bc <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x118>
   332d8:	e5db3008 	ldrb	r3, [fp, #8]
   332dc:	e3530000 	cmp	r3, #0
   332e0:	0a000018 	beq	33348 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0xa4>
   332e4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   332e8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   332ec:	ebffff3c 	bl	32fe4 <ConfigStore::GetStoreOffset(configstore::Store)>
   332f0:	e1a02000 	mov	r2, r0
   332f4:	e59f30d0 	ldr	r3, [pc, #208]	; 333cc <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x128>
   332f8:	e0822003 	add	r2, r2, r3
   332fc:	e59b3004 	ldr	r3, [fp, #4]
   33300:	e0823003 	add	r3, r2, r3
   33304:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   33308:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3330c:	e5933000 	ldr	r3, [r3]
   33310:	e3530000 	cmp	r3, #0
   33314:	1a00000b 	bne	33348 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0xa4>
   33318:	e3a03000 	mov	r3, #0
   3331c:	e58d3008 	str	r3, [sp, #8]
   33320:	e3a03000 	mov	r3, #0
   33324:	e58d3004 	str	r3, [sp, #4]
   33328:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   3332c:	e58d3000 	str	r3, [sp]
   33330:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   33334:	e59b2004 	ldr	r2, [fp, #4]
   33338:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   3333c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   33340:	ebffff6a 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   33344:	ea00001d 	b	333c0 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x11c>
   33348:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   3334c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   33350:	ebffff23 	bl	32fe4 <ConfigStore::GetStoreOffset(configstore::Store)>
   33354:	e1a02000 	mov	r2, r0
   33358:	e59f306c 	ldr	r3, [pc, #108]	; 333cc <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x128>
   3335c:	e0822003 	add	r2, r2, r3
   33360:	e59b3004 	ldr	r3, [fp, #4]
   33364:	e0823003 	add	r3, r2, r3
   33368:	e50b3008 	str	r3, [fp, #-8]
   3336c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   33370:	e50b300c 	str	r3, [fp, #-12]
   33374:	e3a03000 	mov	r3, #0
   33378:	e50b3010 	str	r3, [fp, #-16]
   3337c:	e51b2010 	ldr	r2, [fp, #-16]
   33380:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   33384:	e1520003 	cmp	r2, r3
   33388:	2a00000c 	bcs	333c0 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x11c>
   3338c:	e51b2008 	ldr	r2, [fp, #-8]
   33390:	e2823001 	add	r3, r2, #1
   33394:	e50b3008 	str	r3, [fp, #-8]
   33398:	e51b300c 	ldr	r3, [fp, #-12]
   3339c:	e2831001 	add	r1, r3, #1
   333a0:	e50b100c 	str	r1, [fp, #-12]
   333a4:	e5d22000 	ldrb	r2, [r2]
   333a8:	e5c32000 	strb	r2, [r3]
   333ac:	e51b3010 	ldr	r3, [fp, #-16]
   333b0:	e2833001 	add	r3, r3, #1
   333b4:	e50b3010 	str	r3, [fp, #-16]
   333b8:	eaffffef 	b	3337c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0xd8>
   333bc:	e1a00000 	nop			; (mov r0, r0)
   333c0:	e24bd004 	sub	sp, fp, #4
   333c4:	e8bd8800 	pop	{fp, pc}
   333c8:	0005dc28 	.word	0x0005dc28
   333cc:	0005dc3c 	.word	0x0005dc3c

000333d0 <ConfigStore::CopyTo(configstore::Store, void*, unsigned int&)>:
   333d0:	e92d4800 	push	{fp, lr}
   333d4:	e28db004 	add	fp, sp, #4
   333d8:	e24dd020 	sub	sp, sp, #32
   333dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   333e0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   333e4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   333e8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   333ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   333f0:	e353001b 	cmp	r3, #27
   333f4:	da000003 	ble	33408 <ConfigStore::CopyTo(configstore::Store, void*, unsigned int&)+0x38>
   333f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   333fc:	e3a02000 	mov	r2, #0
   33400:	e5832000 	str	r2, [r3]
   33404:	ea000022 	b	33494 <ConfigStore::CopyTo(configstore::Store, void*, unsigned int&)+0xc4>
   33408:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3340c:	e59f2088 	ldr	r2, [pc, #136]	; 3349c <ConfigStore::CopyTo(configstore::Store, void*, unsigned int&)+0xcc>
   33410:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   33414:	e6ff3073 	uxth	r3, r3
   33418:	e1a02003 	mov	r2, r3
   3341c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   33420:	e5832000 	str	r2, [r3]
   33424:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   33428:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3342c:	ebfffeec 	bl	32fe4 <ConfigStore::GetStoreOffset(configstore::Store)>
   33430:	e1a02000 	mov	r2, r0
   33434:	e59f3064 	ldr	r3, [pc, #100]	; 334a0 <ConfigStore::CopyTo(configstore::Store, void*, unsigned int&)+0xd0>
   33438:	e0823003 	add	r3, r2, r3
   3343c:	e50b3008 	str	r3, [fp, #-8]
   33440:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   33444:	e50b300c 	str	r3, [fp, #-12]
   33448:	e3a03000 	mov	r3, #0
   3344c:	e50b3010 	str	r3, [fp, #-16]
   33450:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   33454:	e5933000 	ldr	r3, [r3]
   33458:	e51b2010 	ldr	r2, [fp, #-16]
   3345c:	e1520003 	cmp	r2, r3
   33460:	2a00000b 	bcs	33494 <ConfigStore::CopyTo(configstore::Store, void*, unsigned int&)+0xc4>
   33464:	e51b2008 	ldr	r2, [fp, #-8]
   33468:	e2823001 	add	r3, r2, #1
   3346c:	e50b3008 	str	r3, [fp, #-8]
   33470:	e51b300c 	ldr	r3, [fp, #-12]
   33474:	e2831001 	add	r1, r3, #1
   33478:	e50b100c 	str	r1, [fp, #-12]
   3347c:	e5d22000 	ldrb	r2, [r2]
   33480:	e5c32000 	strb	r2, [r3]
   33484:	e51b3010 	ldr	r3, [fp, #-16]
   33488:	e2833001 	add	r3, r3, #1
   3348c:	e50b3010 	str	r3, [fp, #-16]
   33490:	eaffffee 	b	33450 <ConfigStore::CopyTo(configstore::Store, void*, unsigned int&)+0x80>
   33494:	e24bd004 	sub	sp, fp, #4
   33498:	e8bd8800 	pop	{fp, pc}
   3349c:	000489ac 	.word	0x000489ac
   334a0:	0005dc3c 	.word	0x0005dc3c

000334a4 <ConfigStore::Flash()>:
   334a4:	e92d4800 	push	{fp, lr}
   334a8:	e28db004 	add	fp, sp, #4
   334ac:	e24dd018 	sub	sp, sp, #24
   334b0:	e50b0010 	str	r0, [fp, #-16]
   334b4:	e59f31e4 	ldr	r3, [pc, #484]	; 336a0 <ConfigStore::Flash()+0x1fc>
   334b8:	e5933000 	ldr	r3, [r3]
   334bc:	e3530000 	cmp	r3, #0
   334c0:	03a03001 	moveq	r3, #1
   334c4:	13a03000 	movne	r3, #0
   334c8:	e6ef3073 	uxtb	r3, r3
   334cc:	e3530000 	cmp	r3, #0
   334d0:	0a000001 	beq	334dc <ConfigStore::Flash()+0x38>
   334d4:	e3a03000 	mov	r3, #0
   334d8:	ea00006d 	b	33694 <ConfigStore::Flash()+0x1f0>
   334dc:	e59f31bc 	ldr	r3, [pc, #444]	; 336a0 <ConfigStore::Flash()+0x1fc>
   334e0:	e5933000 	ldr	r3, [r3]
   334e4:	e2433001 	sub	r3, r3, #1
   334e8:	e3530005 	cmp	r3, #5
   334ec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   334f0:	ea000055 	b	3364c <ConfigStore::Flash()+0x1a8>
   334f4:	0003350c 	.word	0x0003350c
   334f8:	0003353c 	.word	0x0003353c
   334fc:	00033590 	.word	0x00033590
   33500:	00033638 	.word	0x00033638
   33504:	000335e4 	.word	0x000335e4
   33508:	0003364c 	.word	0x0003364c
   3350c:	ebff783b 	bl	11600 <Hardware::Get()>
   33510:	e1a03000 	mov	r3, r0
   33514:	e1a00003 	mov	r0, r3
   33518:	eb003369 	bl	402c4 <Hardware::Millis()>
   3351c:	e1a02000 	mov	r2, r0
   33520:	e59f317c 	ldr	r3, [pc, #380]	; 336a4 <ConfigStore::Flash()+0x200>
   33524:	e5832000 	str	r2, [r3]
   33528:	e59f3170 	ldr	r3, [pc, #368]	; 336a0 <ConfigStore::Flash()+0x1fc>
   3352c:	e3a02002 	mov	r2, #2
   33530:	e5832000 	str	r2, [r3]
   33534:	e3a03001 	mov	r3, #1
   33538:	ea000055 	b	33694 <ConfigStore::Flash()+0x1f0>
   3353c:	ebff782f 	bl	11600 <Hardware::Get()>
   33540:	e1a03000 	mov	r3, r0
   33544:	e1a00003 	mov	r0, r3
   33548:	eb00335d 	bl	402c4 <Hardware::Millis()>
   3354c:	e1a02000 	mov	r2, r0
   33550:	e59f314c 	ldr	r3, [pc, #332]	; 336a4 <ConfigStore::Flash()+0x200>
   33554:	e5933000 	ldr	r3, [r3]
   33558:	e0423003 	sub	r3, r2, r3
   3355c:	e3530063 	cmp	r3, #99	; 0x63
   33560:	93a03001 	movls	r3, #1
   33564:	83a03000 	movhi	r3, #0
   33568:	e6ef3073 	uxtb	r3, r3
   3356c:	e3530000 	cmp	r3, #0
   33570:	0a000001 	beq	3357c <ConfigStore::Flash()+0xd8>
   33574:	e3a03001 	mov	r3, #1
   33578:	ea000045 	b	33694 <ConfigStore::Flash()+0x1f0>
   3357c:	e59f311c 	ldr	r3, [pc, #284]	; 336a0 <ConfigStore::Flash()+0x1fc>
   33580:	e3a02003 	mov	r2, #3
   33584:	e5832000 	str	r2, [r3]
   33588:	e3a03001 	mov	r3, #1
   3358c:	ea000040 	b	33694 <ConfigStore::Flash()+0x1f0>
   33590:	e51b0010 	ldr	r0, [fp, #-16]
   33594:	e59f310c 	ldr	r3, [pc, #268]	; 336a8 <ConfigStore::Flash()+0x204>
   33598:	e5931000 	ldr	r1, [r3]
   3359c:	e24b3008 	sub	r3, fp, #8
   335a0:	e3a02a01 	mov	r2, #4096	; 0x1000
   335a4:	eb0000fa 	bl	33994 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>
   335a8:	e1a03000 	mov	r3, r0
   335ac:	e3530000 	cmp	r3, #0
   335b0:	0a000009 	beq	335dc <ConfigStore::Flash()+0x138>
   335b4:	ebff7811 	bl	11600 <Hardware::Get()>
   335b8:	e1a03000 	mov	r3, r0
   335bc:	e1a00003 	mov	r0, r3
   335c0:	eb00333f 	bl	402c4 <Hardware::Millis()>
   335c4:	e1a02000 	mov	r2, r0
   335c8:	e59f30d4 	ldr	r3, [pc, #212]	; 336a4 <ConfigStore::Flash()+0x200>
   335cc:	e5832000 	str	r2, [r3]
   335d0:	e59f30c8 	ldr	r3, [pc, #200]	; 336a0 <ConfigStore::Flash()+0x1fc>
   335d4:	e3a02005 	mov	r2, #5
   335d8:	e5832000 	str	r2, [r3]
   335dc:	e3a03001 	mov	r3, #1
   335e0:	ea00002b 	b	33694 <ConfigStore::Flash()+0x1f0>
   335e4:	ebff7805 	bl	11600 <Hardware::Get()>
   335e8:	e1a03000 	mov	r3, r0
   335ec:	e1a00003 	mov	r0, r3
   335f0:	eb003333 	bl	402c4 <Hardware::Millis()>
   335f4:	e1a02000 	mov	r2, r0
   335f8:	e59f30a4 	ldr	r3, [pc, #164]	; 336a4 <ConfigStore::Flash()+0x200>
   335fc:	e5933000 	ldr	r3, [r3]
   33600:	e0423003 	sub	r3, r2, r3
   33604:	e3530063 	cmp	r3, #99	; 0x63
   33608:	93a03001 	movls	r3, #1
   3360c:	83a03000 	movhi	r3, #0
   33610:	e6ef3073 	uxtb	r3, r3
   33614:	e3530000 	cmp	r3, #0
   33618:	0a000001 	beq	33624 <ConfigStore::Flash()+0x180>
   3361c:	e3a03001 	mov	r3, #1
   33620:	ea00001b 	b	33694 <ConfigStore::Flash()+0x1f0>
   33624:	e59f3074 	ldr	r3, [pc, #116]	; 336a0 <ConfigStore::Flash()+0x1fc>
   33628:	e3a02004 	mov	r2, #4
   3362c:	e5832000 	str	r2, [r3]
   33630:	e3a03001 	mov	r3, #1
   33634:	ea000016 	b	33694 <ConfigStore::Flash()+0x1f0>
   33638:	e59f3060 	ldr	r3, [pc, #96]	; 336a0 <ConfigStore::Flash()+0x1fc>
   3363c:	e3a02006 	mov	r2, #6
   33640:	e5832000 	str	r2, [r3]
   33644:	e3a03001 	mov	r3, #1
   33648:	ea000011 	b	33694 <ConfigStore::Flash()+0x1f0>
   3364c:	e51b0010 	ldr	r0, [fp, #-16]
   33650:	e59f3050 	ldr	r3, [pc, #80]	; 336a8 <ConfigStore::Flash()+0x204>
   33654:	e5931000 	ldr	r1, [r3]
   33658:	e59f304c 	ldr	r3, [pc, #76]	; 336ac <ConfigStore::Flash()+0x208>
   3365c:	e5932000 	ldr	r2, [r3]
   33660:	e24b300c 	sub	r3, fp, #12
   33664:	e58d3000 	str	r3, [sp]
   33668:	e59f3040 	ldr	r3, [pc, #64]	; 336b0 <ConfigStore::Flash()+0x20c>
   3366c:	eb00014b 	bl	33ba0 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>
   33670:	e1a03000 	mov	r3, r0
   33674:	e3530000 	cmp	r3, #0
   33678:	0a000004 	beq	33690 <ConfigStore::Flash()+0x1ec>
   3367c:	e59f301c 	ldr	r3, [pc, #28]	; 336a0 <ConfigStore::Flash()+0x1fc>
   33680:	e3a02000 	mov	r2, #0
   33684:	e5832000 	str	r2, [r3]
   33688:	e3a03000 	mov	r3, #0
   3368c:	ea000000 	b	33694 <ConfigStore::Flash()+0x1f0>
   33690:	e3a03001 	mov	r3, #1
   33694:	e1a00003 	mov	r0, r3
   33698:	e24bd004 	sub	sp, fp, #4
   3369c:	e8bd8800 	pop	{fp, pc}
   336a0:	0005dc2c 	.word	0x0005dc2c
   336a4:	0005dc38 	.word	0x0005dc38
   336a8:	0005dc30 	.word	0x0005dc30
   336ac:	0005dc34 	.word	0x0005dc34
   336b0:	0005dc3c 	.word	0x0005dc3c

000336b4 <ConfigStore::Dump()>:
   336b4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   336b8:	e28db000 	add	fp, sp, #0
   336bc:	e24dd00c 	sub	sp, sp, #12
   336c0:	e50b0008 	str	r0, [fp, #-8]
   336c4:	e1a00000 	nop			; (mov r0, r0)
   336c8:	e28bd000 	add	sp, fp, #0
   336cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   336d0:	e12fff1e 	bx	lr

000336d4 <StoreDevice::StoreDevice()>:
   336d4:	e92d4800 	push	{fp, lr}
   336d8:	e28db004 	add	fp, sp, #4
   336dc:	e24dd010 	sub	sp, sp, #16
   336e0:	e50b0010 	str	r0, [fp, #-16]
   336e4:	e51b3010 	ldr	r3, [fp, #-16]
   336e8:	e3a02000 	mov	r2, #0
   336ec:	e5c32000 	strb	r2, [r3]
   336f0:	e59f1100 	ldr	r1, [pc, #256]	; 337f8 <StoreDevice::StoreDevice()+0x124>
   336f4:	e59f0100 	ldr	r0, [pc, #256]	; 337fc <StoreDevice::StoreDevice()+0x128>
   336f8:	ebff76e7 	bl	1129c <fopen@plt>
   336fc:	e1a02000 	mov	r2, r0
   33700:	e59f30f8 	ldr	r3, [pc, #248]	; 33800 <StoreDevice::StoreDevice()+0x12c>
   33704:	e5832000 	str	r2, [r3]
   33708:	e59f30f0 	ldr	r3, [pc, #240]	; 33800 <StoreDevice::StoreDevice()+0x12c>
   3370c:	e5933000 	ldr	r3, [r3]
   33710:	e3530000 	cmp	r3, #0
   33714:	03a03001 	moveq	r3, #1
   33718:	13a03000 	movne	r3, #0
   3371c:	e6ef3073 	uxtb	r3, r3
   33720:	e3530000 	cmp	r3, #0
   33724:	0a00002c 	beq	337dc <StoreDevice::StoreDevice()+0x108>
   33728:	e59f00d4 	ldr	r0, [pc, #212]	; 33804 <StoreDevice::StoreDevice()+0x130>
   3372c:	ebff76bf 	bl	11230 <perror@plt>
   33730:	e59f10d0 	ldr	r1, [pc, #208]	; 33808 <StoreDevice::StoreDevice()+0x134>
   33734:	e59f00c0 	ldr	r0, [pc, #192]	; 337fc <StoreDevice::StoreDevice()+0x128>
   33738:	ebff76d7 	bl	1129c <fopen@plt>
   3373c:	e1a02000 	mov	r2, r0
   33740:	e59f30b8 	ldr	r3, [pc, #184]	; 33800 <StoreDevice::StoreDevice()+0x12c>
   33744:	e5832000 	str	r2, [r3]
   33748:	e3a03000 	mov	r3, #0
   3374c:	e50b3008 	str	r3, [fp, #-8]
   33750:	e51b3008 	ldr	r3, [fp, #-8]
   33754:	e3530602 	cmp	r3, #2097152	; 0x200000
   33758:	2a000012 	bcs	337a8 <StoreDevice::StoreDevice()+0xd4>
   3375c:	e59f309c 	ldr	r3, [pc, #156]	; 33800 <StoreDevice::StoreDevice()+0x12c>
   33760:	e5933000 	ldr	r3, [r3]
   33764:	e1a01003 	mov	r1, r3
   33768:	e3a000ff 	mov	r0, #255	; 0xff
   3376c:	ebff771e 	bl	113ec <fputc@plt>
   33770:	e1a03000 	mov	r3, r0
   33774:	e3730001 	cmn	r3, #1
   33778:	03a03001 	moveq	r3, #1
   3377c:	13a03000 	movne	r3, #0
   33780:	e6ef3073 	uxtb	r3, r3
   33784:	e3530000 	cmp	r3, #0
   33788:	0a000002 	beq	33798 <StoreDevice::StoreDevice()+0xc4>
   3378c:	e59f0078 	ldr	r0, [pc, #120]	; 3380c <StoreDevice::StoreDevice()+0x138>
   33790:	ebff76a6 	bl	11230 <perror@plt>
   33794:	ea000013 	b	337e8 <StoreDevice::StoreDevice()+0x114>
   33798:	e51b3008 	ldr	r3, [fp, #-8]
   3379c:	e2833001 	add	r3, r3, #1
   337a0:	e50b3008 	str	r3, [fp, #-8]
   337a4:	eaffffe9 	b	33750 <StoreDevice::StoreDevice()+0x7c>
   337a8:	e59f3050 	ldr	r3, [pc, #80]	; 33800 <StoreDevice::StoreDevice()+0x12c>
   337ac:	e5933000 	ldr	r3, [r3]
   337b0:	e1a00003 	mov	r0, r3
   337b4:	ebff773c 	bl	114ac <fflush@plt>
   337b8:	e1a03000 	mov	r3, r0
   337bc:	e3530000 	cmp	r3, #0
   337c0:	13a03001 	movne	r3, #1
   337c4:	03a03000 	moveq	r3, #0
   337c8:	e6ef3073 	uxtb	r3, r3
   337cc:	e3530000 	cmp	r3, #0
   337d0:	0a000001 	beq	337dc <StoreDevice::StoreDevice()+0x108>
   337d4:	e59f0034 	ldr	r0, [pc, #52]	; 33810 <StoreDevice::StoreDevice()+0x13c>
   337d8:	ebff7694 	bl	11230 <perror@plt>
   337dc:	e51b3010 	ldr	r3, [fp, #-16]
   337e0:	e3a02001 	mov	r2, #1
   337e4:	e5c32000 	strb	r2, [r3]
   337e8:	e51b3010 	ldr	r3, [fp, #-16]
   337ec:	e1a00003 	mov	r0, r3
   337f0:	e24bd004 	sub	sp, fp, #4
   337f4:	e8bd8800 	pop	{fp, pc}
   337f8:	00048a38 	.word	0x00048a38
   337fc:	00048a24 	.word	0x00048a24
   33800:	0005ec40 	.word	0x0005ec40
   33804:	00048a3c 	.word	0x00048a3c
   33808:	00048a48 	.word	0x00048a48
   3380c:	00048a4c 	.word	0x00048a4c
   33810:	00048a60 	.word	0x00048a60

00033814 <StoreDevice::~StoreDevice()>:
   33814:	e92d4800 	push	{fp, lr}
   33818:	e28db004 	add	fp, sp, #4
   3381c:	e24dd008 	sub	sp, sp, #8
   33820:	e50b0008 	str	r0, [fp, #-8]
   33824:	e59f3034 	ldr	r3, [pc, #52]	; 33860 <StoreDevice::~StoreDevice()+0x4c>
   33828:	e5933000 	ldr	r3, [r3]
   3382c:	e3530000 	cmp	r3, #0
   33830:	0a000006 	beq	33850 <StoreDevice::~StoreDevice()+0x3c>
   33834:	e59f3024 	ldr	r3, [pc, #36]	; 33860 <StoreDevice::~StoreDevice()+0x4c>
   33838:	e5933000 	ldr	r3, [r3]
   3383c:	e1a00003 	mov	r0, r3
   33840:	ebff7701 	bl	1144c <fclose@plt>
   33844:	e59f3014 	ldr	r3, [pc, #20]	; 33860 <StoreDevice::~StoreDevice()+0x4c>
   33848:	e3a02000 	mov	r2, #0
   3384c:	e5832000 	str	r2, [r3]
   33850:	e51b3008 	ldr	r3, [fp, #-8]
   33854:	e1a00003 	mov	r0, r3
   33858:	e24bd004 	sub	sp, fp, #4
   3385c:	e8bd8800 	pop	{fp, pc}
   33860:	0005ec40 	.word	0x0005ec40

00033864 <StoreDevice::GetSize() const>:
   33864:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   33868:	e28db000 	add	fp, sp, #0
   3386c:	e24dd00c 	sub	sp, sp, #12
   33870:	e50b0008 	str	r0, [fp, #-8]
   33874:	e3a03602 	mov	r3, #2097152	; 0x200000
   33878:	e1a00003 	mov	r0, r3
   3387c:	e28bd000 	add	sp, fp, #0
   33880:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   33884:	e12fff1e 	bx	lr

00033888 <StoreDevice::GetSectorSize() const>:
   33888:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3388c:	e28db000 	add	fp, sp, #0
   33890:	e24dd00c 	sub	sp, sp, #12
   33894:	e50b0008 	str	r0, [fp, #-8]
   33898:	e3a03a01 	mov	r3, #4096	; 0x1000
   3389c:	e1a00003 	mov	r0, r3
   338a0:	e28bd000 	add	sp, fp, #0
   338a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   338a8:	e12fff1e 	bx	lr

000338ac <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>:
   338ac:	e92d4800 	push	{fp, lr}
   338b0:	e28db004 	add	fp, sp, #4
   338b4:	e24dd010 	sub	sp, sp, #16
   338b8:	e50b0008 	str	r0, [fp, #-8]
   338bc:	e50b100c 	str	r1, [fp, #-12]
   338c0:	e50b2010 	str	r2, [fp, #-16]
   338c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   338c8:	e59f30b8 	ldr	r3, [pc, #184]	; 33988 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0xdc>
   338cc:	e5933000 	ldr	r3, [r3]
   338d0:	e51b100c 	ldr	r1, [fp, #-12]
   338d4:	e3a02000 	mov	r2, #0
   338d8:	e1a00003 	mov	r0, r3
   338dc:	ebff762f 	bl	111a0 <fseek@plt>
   338e0:	e1a03000 	mov	r3, r0
   338e4:	e3530000 	cmp	r3, #0
   338e8:	13a03001 	movne	r3, #1
   338ec:	03a03000 	moveq	r3, #0
   338f0:	e6ef3073 	uxtb	r3, r3
   338f4:	e3530000 	cmp	r3, #0
   338f8:	0a000006 	beq	33918 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0x6c>
   338fc:	e59b3004 	ldr	r3, [fp, #4]
   33900:	e3a02001 	mov	r2, #1
   33904:	e5832000 	str	r2, [r3]
   33908:	e59f007c 	ldr	r0, [pc, #124]	; 3398c <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0xe0>
   3390c:	ebff7647 	bl	11230 <perror@plt>
   33910:	e3a03001 	mov	r3, #1
   33914:	ea000018 	b	3397c <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0xd0>
   33918:	e59f3068 	ldr	r3, [pc, #104]	; 33988 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0xdc>
   3391c:	e5933000 	ldr	r3, [r3]
   33920:	e51b2010 	ldr	r2, [fp, #-16]
   33924:	e3a01001 	mov	r1, #1
   33928:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   3392c:	ebff7684 	bl	11344 <fread@plt>
   33930:	e1a02000 	mov	r2, r0
   33934:	e51b3010 	ldr	r3, [fp, #-16]
   33938:	e1530002 	cmp	r3, r2
   3393c:	13a03001 	movne	r3, #1
   33940:	03a03000 	moveq	r3, #0
   33944:	e6ef3073 	uxtb	r3, r3
   33948:	e3530000 	cmp	r3, #0
   3394c:	0a000006 	beq	3396c <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0xc0>
   33950:	e59b3004 	ldr	r3, [fp, #4]
   33954:	e3a02001 	mov	r2, #1
   33958:	e5832000 	str	r2, [r3]
   3395c:	e59f002c 	ldr	r0, [pc, #44]	; 33990 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0xe4>
   33960:	ebff7632 	bl	11230 <perror@plt>
   33964:	e3a03001 	mov	r3, #1
   33968:	ea000003 	b	3397c <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)+0xd0>
   3396c:	e59b3004 	ldr	r3, [fp, #4]
   33970:	e3a02000 	mov	r2, #0
   33974:	e5832000 	str	r2, [r3]
   33978:	e3a03001 	mov	r3, #1
   3397c:	e1a00003 	mov	r0, r3
   33980:	e24bd004 	sub	sp, fp, #4
   33984:	e8bd8800 	pop	{fp, pc}
   33988:	0005ec40 	.word	0x0005ec40
   3398c:	00048a68 	.word	0x00048a68
   33990:	00048a70 	.word	0x00048a70

00033994 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>:
   33994:	e92d4800 	push	{fp, lr}
   33998:	e28db004 	add	fp, sp, #4
   3399c:	e24dd018 	sub	sp, sp, #24
   339a0:	e50b0010 	str	r0, [fp, #-16]
   339a4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   339a8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   339ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   339b0:	e59f31d0 	ldr	r3, [pc, #464]	; 33b88 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1f4>
   339b4:	e5933000 	ldr	r3, [r3]
   339b8:	e3530000 	cmp	r3, #0
   339bc:	1a000033 	bne	33a90 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0xfc>
   339c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   339c4:	e1a03a03 	lsl	r3, r3, #20
   339c8:	e1a03a23 	lsr	r3, r3, #20
   339cc:	e3530000 	cmp	r3, #0
   339d0:	1a000004 	bne	339e8 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x54>
   339d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   339d8:	e1a03a03 	lsl	r3, r3, #20
   339dc:	e1a03a23 	lsr	r3, r3, #20
   339e0:	e3530000 	cmp	r3, #0
   339e4:	0a000007 	beq	33a08 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x74>
   339e8:	e59f3198 	ldr	r3, [pc, #408]	; 33b88 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1f4>
   339ec:	e3a02002 	mov	r2, #2
   339f0:	e5832000 	str	r2, [r3]
   339f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   339f8:	e3a02001 	mov	r2, #1
   339fc:	e5832000 	str	r2, [r3]
   33a00:	e3a03001 	mov	r3, #1
   33a04:	ea00005c 	b	33b7c <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1e8>
   33a08:	e59f317c 	ldr	r3, [pc, #380]	; 33b8c <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1f8>
   33a0c:	e5933000 	ldr	r3, [r3]
   33a10:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   33a14:	e3a02000 	mov	r2, #0
   33a18:	e1a00003 	mov	r0, r3
   33a1c:	ebff75df 	bl	111a0 <fseek@plt>
   33a20:	e1a03000 	mov	r3, r0
   33a24:	e3530000 	cmp	r3, #0
   33a28:	13a03001 	movne	r3, #1
   33a2c:	03a03000 	moveq	r3, #0
   33a30:	e6ef3073 	uxtb	r3, r3
   33a34:	e3530000 	cmp	r3, #0
   33a38:	0a000009 	beq	33a64 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0xd0>
   33a3c:	e59f3144 	ldr	r3, [pc, #324]	; 33b88 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1f4>
   33a40:	e3a02002 	mov	r2, #2
   33a44:	e5832000 	str	r2, [r3]
   33a48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   33a4c:	e3a02001 	mov	r2, #1
   33a50:	e5832000 	str	r2, [r3]
   33a54:	e59f0134 	ldr	r0, [pc, #308]	; 33b90 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1fc>
   33a58:	ebff75f4 	bl	11230 <perror@plt>
   33a5c:	e3a03001 	mov	r3, #1
   33a60:	ea000045 	b	33b7c <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1e8>
   33a64:	e59f3128 	ldr	r3, [pc, #296]	; 33b94 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x200>
   33a68:	e3a02000 	mov	r2, #0
   33a6c:	e5832000 	str	r2, [r3]
   33a70:	e59f3110 	ldr	r3, [pc, #272]	; 33b88 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1f4>
   33a74:	e3a02001 	mov	r2, #1
   33a78:	e5832000 	str	r2, [r3]
   33a7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   33a80:	e3a02000 	mov	r2, #0
   33a84:	e5832000 	str	r2, [r3]
   33a88:	e3a03000 	mov	r3, #0
   33a8c:	ea00003a 	b	33b7c <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1e8>
   33a90:	e59f30f0 	ldr	r3, [pc, #240]	; 33b88 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1f4>
   33a94:	e5933000 	ldr	r3, [r3]
   33a98:	e3530001 	cmp	r3, #1
   33a9c:	1a000035 	bne	33b78 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1e4>
   33aa0:	e3a03000 	mov	r3, #0
   33aa4:	e50b3008 	str	r3, [fp, #-8]
   33aa8:	e51b2008 	ldr	r2, [fp, #-8]
   33aac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   33ab0:	e1520003 	cmp	r2, r3
   33ab4:	2a000019 	bcs	33b20 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x18c>
   33ab8:	e59f30cc 	ldr	r3, [pc, #204]	; 33b8c <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1f8>
   33abc:	e5933000 	ldr	r3, [r3]
   33ac0:	e1a01003 	mov	r1, r3
   33ac4:	e3a000ff 	mov	r0, #255	; 0xff
   33ac8:	ebff7647 	bl	113ec <fputc@plt>
   33acc:	e1a03000 	mov	r3, r0
   33ad0:	e3730001 	cmn	r3, #1
   33ad4:	03a03001 	moveq	r3, #1
   33ad8:	13a03000 	movne	r3, #0
   33adc:	e6ef3073 	uxtb	r3, r3
   33ae0:	e3530000 	cmp	r3, #0
   33ae4:	0a000009 	beq	33b10 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x17c>
   33ae8:	e59f3098 	ldr	r3, [pc, #152]	; 33b88 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1f4>
   33aec:	e3a02002 	mov	r2, #2
   33af0:	e5832000 	str	r2, [r3]
   33af4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   33af8:	e3a02001 	mov	r2, #1
   33afc:	e5832000 	str	r2, [r3]
   33b00:	e59f0090 	ldr	r0, [pc, #144]	; 33b98 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x204>
   33b04:	ebff75c9 	bl	11230 <perror@plt>
   33b08:	e3a03001 	mov	r3, #1
   33b0c:	ea00001a 	b	33b7c <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1e8>
   33b10:	e51b3008 	ldr	r3, [fp, #-8]
   33b14:	e2833001 	add	r3, r3, #1
   33b18:	e50b3008 	str	r3, [fp, #-8]
   33b1c:	eaffffe1 	b	33aa8 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x114>
   33b20:	e59f3060 	ldr	r3, [pc, #96]	; 33b88 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1f4>
   33b24:	e3a02000 	mov	r2, #0
   33b28:	e5832000 	str	r2, [r3]
   33b2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   33b30:	e3a02000 	mov	r2, #0
   33b34:	e5832000 	str	r2, [r3]
   33b38:	e59f304c 	ldr	r3, [pc, #76]	; 33b8c <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1f8>
   33b3c:	e5933000 	ldr	r3, [r3]
   33b40:	e1a00003 	mov	r0, r3
   33b44:	ebff7658 	bl	114ac <fflush@plt>
   33b48:	e1a03000 	mov	r3, r0
   33b4c:	e3530000 	cmp	r3, #0
   33b50:	13a03001 	movne	r3, #1
   33b54:	03a03000 	moveq	r3, #0
   33b58:	e6ef3073 	uxtb	r3, r3
   33b5c:	e3530000 	cmp	r3, #0
   33b60:	0a000001 	beq	33b6c <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1d8>
   33b64:	e59f0030 	ldr	r0, [pc, #48]	; 33b9c <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x208>
   33b68:	ebff75b0 	bl	11230 <perror@plt>
   33b6c:	ebff7576 	bl	1114c <sync@plt>
   33b70:	e3a03001 	mov	r3, #1
   33b74:	ea000000 	b	33b7c <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)+0x1e8>
   33b78:	e3a03001 	mov	r3, #1
   33b7c:	e1a00003 	mov	r0, r3
   33b80:	e24bd004 	sub	sp, fp, #4
   33b84:	e8bd8800 	pop	{fp, pc}
   33b88:	0005ec44 	.word	0x0005ec44
   33b8c:	0005ec40 	.word	0x0005ec40
   33b90:	00048a68 	.word	0x00048a68
   33b94:	0005ec48 	.word	0x0005ec48
   33b98:	00048a4c 	.word	0x00048a4c
   33b9c:	00048a60 	.word	0x00048a60

00033ba0 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>:
   33ba0:	e92d4800 	push	{fp, lr}
   33ba4:	e28db004 	add	fp, sp, #4
   33ba8:	e24dd018 	sub	sp, sp, #24
   33bac:	e50b0010 	str	r0, [fp, #-16]
   33bb0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   33bb4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   33bb8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   33bbc:	e59f31d0 	ldr	r3, [pc, #464]	; 33d94 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1f4>
   33bc0:	e5933000 	ldr	r3, [r3]
   33bc4:	e3530000 	cmp	r3, #0
   33bc8:	1a000021 	bne	33c54 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0xb4>
   33bcc:	e59f31c4 	ldr	r3, [pc, #452]	; 33d98 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1f8>
   33bd0:	e5933000 	ldr	r3, [r3]
   33bd4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   33bd8:	e3a02000 	mov	r2, #0
   33bdc:	e1a00003 	mov	r0, r3
   33be0:	ebff756e 	bl	111a0 <fseek@plt>
   33be4:	e1a03000 	mov	r3, r0
   33be8:	e3530000 	cmp	r3, #0
   33bec:	13a03001 	movne	r3, #1
   33bf0:	03a03000 	moveq	r3, #0
   33bf4:	e6ef3073 	uxtb	r3, r3
   33bf8:	e3530000 	cmp	r3, #0
   33bfc:	0a000009 	beq	33c28 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x88>
   33c00:	e59f318c 	ldr	r3, [pc, #396]	; 33d94 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1f4>
   33c04:	e3a02002 	mov	r2, #2
   33c08:	e5832000 	str	r2, [r3]
   33c0c:	e59b3004 	ldr	r3, [fp, #4]
   33c10:	e3a02001 	mov	r2, #1
   33c14:	e5832000 	str	r2, [r3]
   33c18:	e59f017c 	ldr	r0, [pc, #380]	; 33d9c <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1fc>
   33c1c:	ebff7583 	bl	11230 <perror@plt>
   33c20:	e3a03001 	mov	r3, #1
   33c24:	ea000057 	b	33d88 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1e8>
   33c28:	e59f3170 	ldr	r3, [pc, #368]	; 33da0 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x200>
   33c2c:	e3a02000 	mov	r2, #0
   33c30:	e5832000 	str	r2, [r3]
   33c34:	e59f3158 	ldr	r3, [pc, #344]	; 33d94 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1f4>
   33c38:	e3a02001 	mov	r2, #1
   33c3c:	e5832000 	str	r2, [r3]
   33c40:	e59b3004 	ldr	r3, [fp, #4]
   33c44:	e3a02000 	mov	r2, #0
   33c48:	e5832000 	str	r2, [r3]
   33c4c:	e3a03000 	mov	r3, #0
   33c50:	ea00004c 	b	33d88 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1e8>
   33c54:	e59f3138 	ldr	r3, [pc, #312]	; 33d94 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1f4>
   33c58:	e5933000 	ldr	r3, [r3]
   33c5c:	e3530001 	cmp	r3, #1
   33c60:	1a000047 	bne	33d84 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1e4>
   33c64:	e59f3134 	ldr	r3, [pc, #308]	; 33da0 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x200>
   33c68:	e5933000 	ldr	r3, [r3]
   33c6c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   33c70:	e0423003 	sub	r3, r2, r3
   33c74:	e50b3008 	str	r3, [fp, #-8]
   33c78:	e51b3008 	ldr	r3, [fp, #-8]
   33c7c:	e3530b01 	cmp	r3, #1024	; 0x400
   33c80:	9a000001 	bls	33c8c <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0xec>
   33c84:	e3a03b01 	mov	r3, #1024	; 0x400
   33c88:	e50b3008 	str	r3, [fp, #-8]
   33c8c:	e59f310c 	ldr	r3, [pc, #268]	; 33da0 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x200>
   33c90:	e5933000 	ldr	r3, [r3]
   33c94:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   33c98:	e0820003 	add	r0, r2, r3
   33c9c:	e59f30f4 	ldr	r3, [pc, #244]	; 33d98 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1f8>
   33ca0:	e5933000 	ldr	r3, [r3]
   33ca4:	e51b2008 	ldr	r2, [fp, #-8]
   33ca8:	e3a01001 	mov	r1, #1
   33cac:	ebff75d1 	bl	113f8 <fwrite@plt>
   33cb0:	e1a02000 	mov	r2, r0
   33cb4:	e51b3008 	ldr	r3, [fp, #-8]
   33cb8:	e1530002 	cmp	r3, r2
   33cbc:	13a03001 	movne	r3, #1
   33cc0:	03a03000 	moveq	r3, #0
   33cc4:	e6ef3073 	uxtb	r3, r3
   33cc8:	e3530000 	cmp	r3, #0
   33ccc:	0a000009 	beq	33cf8 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x158>
   33cd0:	e59f30bc 	ldr	r3, [pc, #188]	; 33d94 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1f4>
   33cd4:	e3a02002 	mov	r2, #2
   33cd8:	e5832000 	str	r2, [r3]
   33cdc:	e59b3004 	ldr	r3, [fp, #4]
   33ce0:	e3a02001 	mov	r2, #1
   33ce4:	e5832000 	str	r2, [r3]
   33ce8:	e59f00b4 	ldr	r0, [pc, #180]	; 33da4 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x204>
   33cec:	ebff754f 	bl	11230 <perror@plt>
   33cf0:	e3a03001 	mov	r3, #1
   33cf4:	ea000023 	b	33d88 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1e8>
   33cf8:	e59f30a0 	ldr	r3, [pc, #160]	; 33da0 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x200>
   33cfc:	e5932000 	ldr	r2, [r3]
   33d00:	e51b3008 	ldr	r3, [fp, #-8]
   33d04:	e0823003 	add	r3, r2, r3
   33d08:	e59f2090 	ldr	r2, [pc, #144]	; 33da0 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x200>
   33d0c:	e5823000 	str	r3, [r2]
   33d10:	e59f3088 	ldr	r3, [pc, #136]	; 33da0 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x200>
   33d14:	e5933000 	ldr	r3, [r3]
   33d18:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   33d1c:	e1520003 	cmp	r2, r3
   33d20:	1a000012 	bne	33d70 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1d0>
   33d24:	e59f3068 	ldr	r3, [pc, #104]	; 33d94 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1f4>
   33d28:	e3a02000 	mov	r2, #0
   33d2c:	e5832000 	str	r2, [r3]
   33d30:	e59f3060 	ldr	r3, [pc, #96]	; 33d98 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1f8>
   33d34:	e5933000 	ldr	r3, [r3]
   33d38:	e1a00003 	mov	r0, r3
   33d3c:	ebff75da 	bl	114ac <fflush@plt>
   33d40:	e1a03000 	mov	r3, r0
   33d44:	e3530000 	cmp	r3, #0
   33d48:	13a03001 	movne	r3, #1
   33d4c:	03a03000 	moveq	r3, #0
   33d50:	e6ef3073 	uxtb	r3, r3
   33d54:	e3530000 	cmp	r3, #0
   33d58:	0a000001 	beq	33d64 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1c4>
   33d5c:	e59f0044 	ldr	r0, [pc, #68]	; 33da8 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x208>
   33d60:	ebff7532 	bl	11230 <perror@plt>
   33d64:	ebff74f8 	bl	1114c <sync@plt>
   33d68:	e3a03001 	mov	r3, #1
   33d6c:	ea000005 	b	33d88 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1e8>
   33d70:	e59b3004 	ldr	r3, [fp, #4]
   33d74:	e3a02000 	mov	r2, #0
   33d78:	e5832000 	str	r2, [r3]
   33d7c:	e3a03000 	mov	r3, #0
   33d80:	ea000000 	b	33d88 <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)+0x1e8>
   33d84:	e3a03001 	mov	r3, #1
   33d88:	e1a00003 	mov	r0, r3
   33d8c:	e24bd004 	sub	sp, fp, #4
   33d90:	e8bd8800 	pop	{fp, pc}
   33d94:	0005ec44 	.word	0x0005ec44
   33d98:	0005ec40 	.word	0x0005ec40
   33d9c:	00048a68 	.word	0x00048a68
   33da0:	0005ec48 	.word	0x0005ec48
   33da4:	00048a78 	.word	0x00048a78
   33da8:	00048a60 	.word	0x00048a60

00033dac <artnetparams::clear_mask(unsigned int)>:
   33dac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   33db0:	e28db000 	add	fp, sp, #0
   33db4:	e24dd00c 	sub	sp, sp, #12
   33db8:	e50b0008 	str	r0, [fp, #-8]
   33dbc:	e51b3008 	ldr	r3, [fp, #-8]
   33dc0:	e2833008 	add	r3, r3, #8
   33dc4:	e3a02001 	mov	r2, #1
   33dc8:	e1a03312 	lsl	r3, r2, r3
   33dcc:	e6ff2073 	uxth	r2, r3
   33dd0:	e3a01001 	mov	r1, #1
   33dd4:	e51b3008 	ldr	r3, [fp, #-8]
   33dd8:	e1a03311 	lsl	r3, r1, r3
   33ddc:	e6ff3073 	uxth	r3, r3
   33de0:	e1823003 	orr	r3, r2, r3
   33de4:	e6ff3073 	uxth	r3, r3
   33de8:	e1e03003 	mvn	r3, r3
   33dec:	e6ff3073 	uxth	r3, r3
   33df0:	e1a00003 	mov	r0, r3
   33df4:	e28bd000 	add	sp, fp, #0
   33df8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   33dfc:	e12fff1e 	bx	lr

00033e00 <artnetparams::shift_left(unsigned int, unsigned int)>:
   33e00:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   33e04:	e28db000 	add	fp, sp, #0
   33e08:	e24dd00c 	sub	sp, sp, #12
   33e0c:	e50b0008 	str	r0, [fp, #-8]
   33e10:	e50b100c 	str	r1, [fp, #-12]
   33e14:	e51b3008 	ldr	r3, [fp, #-8]
   33e18:	e2032001 	and	r2, r3, #1
   33e1c:	e51b300c 	ldr	r3, [fp, #-12]
   33e20:	e1a03312 	lsl	r3, r2, r3
   33e24:	e6ff3073 	uxth	r3, r3
   33e28:	e1a00003 	mov	r0, r3
   33e2c:	e28bd000 	add	sp, fp, #0
   33e30:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   33e34:	e12fff1e 	bx	lr

00033e38 <ArtNetParamsStore::~ArtNetParamsStore()>:
   33e38:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   33e3c:	e28db000 	add	fp, sp, #0
   33e40:	e24dd00c 	sub	sp, sp, #12
   33e44:	e50b0008 	str	r0, [fp, #-8]
   33e48:	e59f2018 	ldr	r2, [pc, #24]	; 33e68 <ArtNetParamsStore::~ArtNetParamsStore()+0x30>
   33e4c:	e51b3008 	ldr	r3, [fp, #-8]
   33e50:	e5832000 	str	r2, [r3]
   33e54:	e51b3008 	ldr	r3, [fp, #-8]
   33e58:	e1a00003 	mov	r0, r3
   33e5c:	e28bd000 	add	sp, fp, #0
   33e60:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   33e64:	e12fff1e 	bx	lr
   33e68:	00048b84 	.word	0x00048b84

00033e6c <ArtNetParamsStore::~ArtNetParamsStore()>:
   33e6c:	e92d4800 	push	{fp, lr}
   33e70:	e28db004 	add	fp, sp, #4
   33e74:	e24dd008 	sub	sp, sp, #8
   33e78:	e50b0008 	str	r0, [fp, #-8]
   33e7c:	e51b0008 	ldr	r0, [fp, #-8]
   33e80:	ebffffec 	bl	33e38 <ArtNetParamsStore::~ArtNetParamsStore()>
   33e84:	e51b0008 	ldr	r0, [fp, #-8]
   33e88:	ebff751e 	bl	11308 <operator delete(void*)@plt>
   33e8c:	e51b3008 	ldr	r3, [fp, #-8]
   33e90:	e1a00003 	mov	r0, r3
   33e94:	e24bd004 	sub	sp, fp, #4
   33e98:	e8bd8800 	pop	{fp, pc}

00033e9c <ArtNetStore::~ArtNetStore()>:
   33e9c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   33ea0:	e28db000 	add	fp, sp, #0
   33ea4:	e24dd00c 	sub	sp, sp, #12
   33ea8:	e50b0008 	str	r0, [fp, #-8]
   33eac:	e59f2018 	ldr	r2, [pc, #24]	; 33ecc <ArtNetStore::~ArtNetStore()+0x30>
   33eb0:	e51b3008 	ldr	r3, [fp, #-8]
   33eb4:	e5832000 	str	r2, [r3]
   33eb8:	e51b3008 	ldr	r3, [fp, #-8]
   33ebc:	e1a00003 	mov	r0, r3
   33ec0:	e28bd000 	add	sp, fp, #0
   33ec4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   33ec8:	e12fff1e 	bx	lr
   33ecc:	00048b4c 	.word	0x00048b4c

00033ed0 <ArtNetStore::~ArtNetStore()>:
   33ed0:	e92d4800 	push	{fp, lr}
   33ed4:	e28db004 	add	fp, sp, #4
   33ed8:	e24dd008 	sub	sp, sp, #8
   33edc:	e50b0008 	str	r0, [fp, #-8]
   33ee0:	e51b0008 	ldr	r0, [fp, #-8]
   33ee4:	ebffffec 	bl	33e9c <ArtNetStore::~ArtNetStore()>
   33ee8:	e51b0008 	ldr	r0, [fp, #-8]
   33eec:	ebff7505 	bl	11308 <operator delete(void*)@plt>
   33ef0:	e51b3008 	ldr	r3, [fp, #-8]
   33ef4:	e1a00003 	mov	r0, r3
   33ef8:	e24bd004 	sub	sp, fp, #4
   33efc:	e8bd8800 	pop	{fp, pc}

00033f00 <StoreArtNet::Update(artnetparams::Params const*)>:
   33f00:	e92d4800 	push	{fp, lr}
   33f04:	e28db004 	add	fp, sp, #4
   33f08:	e24dd008 	sub	sp, sp, #8
   33f0c:	e50b0008 	str	r0, [fp, #-8]
   33f10:	e50b100c 	str	r1, [fp, #-12]
   33f14:	ebff7626 	bl	117b4 <ConfigStore::Get()>
   33f18:	e3a03087 	mov	r3, #135	; 0x87
   33f1c:	e51b200c 	ldr	r2, [fp, #-12]
   33f20:	e3a01001 	mov	r1, #1
   33f24:	ebff760d 	bl	11760 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>
   33f28:	e1a00000 	nop			; (mov r0, r0)
   33f2c:	e24bd004 	sub	sp, fp, #4
   33f30:	e8bd8800 	pop	{fp, pc}

00033f34 <StoreArtNet::Copy(artnetparams::Params*)>:
   33f34:	e92d4800 	push	{fp, lr}
   33f38:	e28db004 	add	fp, sp, #4
   33f3c:	e24dd010 	sub	sp, sp, #16
   33f40:	e50b0008 	str	r0, [fp, #-8]
   33f44:	e50b100c 	str	r1, [fp, #-12]
   33f48:	ebff7619 	bl	117b4 <ConfigStore::Get()>
   33f4c:	e3a03001 	mov	r3, #1
   33f50:	e58d3004 	str	r3, [sp, #4]
   33f54:	e3a03000 	mov	r3, #0
   33f58:	e58d3000 	str	r3, [sp]
   33f5c:	e3a03087 	mov	r3, #135	; 0x87
   33f60:	e51b200c 	ldr	r2, [fp, #-12]
   33f64:	e3a01001 	mov	r1, #1
   33f68:	ebfffccd 	bl	332a4 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
   33f6c:	e1a00000 	nop			; (mov r0, r0)
   33f70:	e24bd004 	sub	sp, fp, #4
   33f74:	e8bd8800 	pop	{fp, pc}

00033f78 <StoreArtNet::SaveFailSafe(unsigned char)>:
   33f78:	e92d4800 	push	{fp, lr}
   33f7c:	e28db004 	add	fp, sp, #4
   33f80:	e24dd018 	sub	sp, sp, #24
   33f84:	e50b0008 	str	r0, [fp, #-8]
   33f88:	e1a03001 	mov	r3, r1
   33f8c:	e54b3009 	strb	r3, [fp, #-9]
   33f90:	ebff7607 	bl	117b4 <ConfigStore::Get()>
   33f94:	e24b2009 	sub	r2, fp, #9
   33f98:	e3a03000 	mov	r3, #0
   33f9c:	e58d3008 	str	r3, [sp, #8]
   33fa0:	e3a03010 	mov	r3, #16
   33fa4:	e58d3004 	str	r3, [sp, #4]
   33fa8:	e3a03001 	mov	r3, #1
   33fac:	e58d3000 	str	r3, [sp]
   33fb0:	e1a03002 	mov	r3, r2
   33fb4:	e3a02006 	mov	r2, #6
   33fb8:	e3a01001 	mov	r1, #1
   33fbc:	ebfffc4b 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   33fc0:	e1a00000 	nop			; (mov r0, r0)
   33fc4:	e24bd004 	sub	sp, fp, #4
   33fc8:	e8bd8800 	pop	{fp, pc}

00033fcc <non-virtual thunk to StoreArtNet::SaveFailSafe(unsigned char)>:
   33fcc:	e2400004 	sub	r0, r0, #4
   33fd0:	eaffffe8 	b	33f78 <StoreArtNet::SaveFailSafe(unsigned char)>

00033fd4 <StoreArtNet::SaveShortName(char const*)>:
   33fd4:	e92d4800 	push	{fp, lr}
   33fd8:	e28db004 	add	fp, sp, #4
   33fdc:	e24dd018 	sub	sp, sp, #24
   33fe0:	e50b0008 	str	r0, [fp, #-8]
   33fe4:	e50b100c 	str	r1, [fp, #-12]
   33fe8:	ebff75f1 	bl	117b4 <ConfigStore::Get()>
   33fec:	e3a03000 	mov	r3, #0
   33ff0:	e58d3008 	str	r3, [sp, #8]
   33ff4:	e3a03002 	mov	r3, #2
   33ff8:	e58d3004 	str	r3, [sp, #4]
   33ffc:	e3a03012 	mov	r3, #18
   34000:	e58d3000 	str	r3, [sp]
   34004:	e51b300c 	ldr	r3, [fp, #-12]
   34008:	e3a0200c 	mov	r2, #12
   3400c:	e3a01001 	mov	r1, #1
   34010:	ebfffc36 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   34014:	e1a00000 	nop			; (mov r0, r0)
   34018:	e24bd004 	sub	sp, fp, #4
   3401c:	e8bd8800 	pop	{fp, pc}

00034020 <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
   34020:	e2400004 	sub	r0, r0, #4
   34024:	eaffffea 	b	33fd4 <StoreArtNet::SaveShortName(char const*)>

00034028 <StoreArtNet::SaveLongName(char const*)>:
   34028:	e92d4800 	push	{fp, lr}
   3402c:	e28db004 	add	fp, sp, #4
   34030:	e24dd018 	sub	sp, sp, #24
   34034:	e50b0008 	str	r0, [fp, #-8]
   34038:	e50b100c 	str	r1, [fp, #-12]
   3403c:	ebff75dc 	bl	117b4 <ConfigStore::Get()>
   34040:	e3a03000 	mov	r3, #0
   34044:	e58d3008 	str	r3, [sp, #8]
   34048:	e3a03001 	mov	r3, #1
   3404c:	e58d3004 	str	r3, [sp, #4]
   34050:	e3a03040 	mov	r3, #64	; 0x40
   34054:	e58d3000 	str	r3, [sp]
   34058:	e51b300c 	ldr	r3, [fp, #-12]
   3405c:	e3a0201e 	mov	r2, #30
   34060:	e3a01001 	mov	r1, #1
   34064:	ebfffc21 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   34068:	e1a00000 	nop			; (mov r0, r0)
   3406c:	e24bd004 	sub	sp, fp, #4
   34070:	e8bd8800 	pop	{fp, pc}

00034074 <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
   34074:	e2400004 	sub	r0, r0, #4
   34078:	eaffffea 	b	34028 <StoreArtNet::SaveLongName(char const*)>

0003407c <StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
   3407c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   34080:	e28db000 	add	fp, sp, #0
   34084:	e24dd014 	sub	sp, sp, #20
   34088:	e50b0008 	str	r0, [fp, #-8]
   3408c:	e50b100c 	str	r1, [fp, #-12]
   34090:	e1a03002 	mov	r3, r2
   34094:	e14b30be 	strh	r3, [fp, #-14]
   34098:	e1a00000 	nop			; (mov r0, r0)
   3409c:	e28bd000 	add	sp, fp, #0
   340a0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   340a4:	e12fff1e 	bx	lr

000340a8 <non-virtual thunk to StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
   340a8:	e2400004 	sub	r0, r0, #4
   340ac:	eafffff2 	b	3407c <StoreArtNet::SaveUniverse(unsigned int, unsigned short)>

000340b0 <ArtNetParamsStore::ArtNetParamsStore()>:
   340b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   340b4:	e28db000 	add	fp, sp, #0
   340b8:	e24dd00c 	sub	sp, sp, #12
   340bc:	e50b0008 	str	r0, [fp, #-8]
   340c0:	e59f2018 	ldr	r2, [pc, #24]	; 340e0 <ArtNetParamsStore::ArtNetParamsStore()+0x30>
   340c4:	e51b3008 	ldr	r3, [fp, #-8]
   340c8:	e5832000 	str	r2, [r3]
   340cc:	e51b3008 	ldr	r3, [fp, #-8]
   340d0:	e1a00003 	mov	r0, r3
   340d4:	e28bd000 	add	sp, fp, #0
   340d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   340dc:	e12fff1e 	bx	lr
   340e0:	00048b84 	.word	0x00048b84

000340e4 <ArtNetStore::ArtNetStore()>:
   340e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   340e8:	e28db000 	add	fp, sp, #0
   340ec:	e24dd00c 	sub	sp, sp, #12
   340f0:	e50b0008 	str	r0, [fp, #-8]
   340f4:	e59f2018 	ldr	r2, [pc, #24]	; 34114 <ArtNetStore::ArtNetStore()+0x30>
   340f8:	e51b3008 	ldr	r3, [fp, #-8]
   340fc:	e5832000 	str	r2, [r3]
   34100:	e51b3008 	ldr	r3, [fp, #-8]
   34104:	e1a00003 	mov	r0, r3
   34108:	e28bd000 	add	sp, fp, #0
   3410c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   34110:	e12fff1e 	bx	lr
   34114:	00048b4c 	.word	0x00048b4c

00034118 <StoreArtNet::StoreArtNet(unsigned int)>:
   34118:	e92d4800 	push	{fp, lr}
   3411c:	e28db004 	add	fp, sp, #4
   34120:	e24dd008 	sub	sp, sp, #8
   34124:	e50b0008 	str	r0, [fp, #-8]
   34128:	e50b100c 	str	r1, [fp, #-12]
   3412c:	e51b3008 	ldr	r3, [fp, #-8]
   34130:	e1a00003 	mov	r0, r3
   34134:	ebffffdd 	bl	340b0 <ArtNetParamsStore::ArtNetParamsStore()>
   34138:	e51b3008 	ldr	r3, [fp, #-8]
   3413c:	e2833004 	add	r3, r3, #4
   34140:	e1a00003 	mov	r0, r3
   34144:	ebffffe6 	bl	340e4 <ArtNetStore::ArtNetStore()>
   34148:	e59f2038 	ldr	r2, [pc, #56]	; 34188 <StoreArtNet::StoreArtNet(unsigned int)+0x70>
   3414c:	e51b3008 	ldr	r3, [fp, #-8]
   34150:	e5832000 	str	r2, [r3]
   34154:	e59f2030 	ldr	r2, [pc, #48]	; 3418c <StoreArtNet::StoreArtNet(unsigned int)+0x74>
   34158:	e51b3008 	ldr	r3, [fp, #-8]
   3415c:	e5832004 	str	r2, [r3, #4]
   34160:	e59f2028 	ldr	r2, [pc, #40]	; 34190 <StoreArtNet::StoreArtNet(unsigned int)+0x78>
   34164:	e51b3008 	ldr	r3, [fp, #-8]
   34168:	e5823000 	str	r3, [r2]
   3416c:	e59f2020 	ldr	r2, [pc, #32]	; 34194 <StoreArtNet::StoreArtNet(unsigned int)+0x7c>
   34170:	e51b300c 	ldr	r3, [fp, #-12]
   34174:	e5823000 	str	r3, [r2]
   34178:	e51b3008 	ldr	r3, [fp, #-8]
   3417c:	e1a00003 	mov	r0, r3
   34180:	e24bd004 	sub	sp, fp, #4
   34184:	e8bd8800 	pop	{fp, pc}
   34188:	00048ad4 	.word	0x00048ad4
   3418c:	00048b14 	.word	0x00048b14
   34190:	0005ec50 	.word	0x0005ec50
   34194:	0005ec4c 	.word	0x0005ec4c

00034198 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
   34198:	e92d4800 	push	{fp, lr}
   3419c:	e28db004 	add	fp, sp, #4
   341a0:	e24dd020 	sub	sp, sp, #32
   341a4:	e50b0008 	str	r0, [fp, #-8]
   341a8:	e50b100c 	str	r1, [fp, #-12]
   341ac:	e1a03002 	mov	r3, r2
   341b0:	e54b300d 	strb	r3, [fp, #-13]
   341b4:	e59f308c 	ldr	r3, [pc, #140]	; 34248 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0xb0>
   341b8:	e5933000 	ldr	r3, [r3]
   341bc:	e51b200c 	ldr	r2, [fp, #-12]
   341c0:	e1520003 	cmp	r2, r3
   341c4:	3a00001a 	bcc	34234 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x9c>
   341c8:	e59f3078 	ldr	r3, [pc, #120]	; 34248 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0xb0>
   341cc:	e5933000 	ldr	r3, [r3]
   341d0:	e51b200c 	ldr	r2, [fp, #-12]
   341d4:	e0423003 	sub	r3, r2, r3
   341d8:	e50b300c 	str	r3, [fp, #-12]
   341dc:	e51b300c 	ldr	r3, [fp, #-12]
   341e0:	e3530003 	cmp	r3, #3
   341e4:	8a000014 	bhi	3423c <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0xa4>
   341e8:	ebff7571 	bl	117b4 <ConfigStore::Get()>
   341ec:	e1a0c000 	mov	ip, r0
   341f0:	e51b300c 	ldr	r3, [fp, #-12]
   341f4:	e2831067 	add	r1, r3, #103	; 0x67
   341f8:	e3a02a02 	mov	r2, #8192	; 0x2000
   341fc:	e51b300c 	ldr	r3, [fp, #-12]
   34200:	e1a03312 	lsl	r3, r2, r3
   34204:	e24b000d 	sub	r0, fp, #13
   34208:	e3a02000 	mov	r2, #0
   3420c:	e58d2008 	str	r2, [sp, #8]
   34210:	e58d3004 	str	r3, [sp, #4]
   34214:	e3a03001 	mov	r3, #1
   34218:	e58d3000 	str	r3, [sp]
   3421c:	e1a03000 	mov	r3, r0
   34220:	e1a02001 	mov	r2, r1
   34224:	e3a01001 	mov	r1, #1
   34228:	e1a0000c 	mov	r0, ip
   3422c:	ebfffbaf 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   34230:	ea000002 	b	34240 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0xa8>
   34234:	e1a00000 	nop			; (mov r0, r0)
   34238:	ea000000 	b	34240 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0xa8>
   3423c:	e1a00000 	nop			; (mov r0, r0)
   34240:	e24bd004 	sub	sp, fp, #4
   34244:	e8bd8800 	pop	{fp, pc}
   34248:	0005ec4c 	.word	0x0005ec4c

0003424c <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
   3424c:	e2400004 	sub	r0, r0, #4
   34250:	eaffffd0 	b	34198 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

00034254 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
   34254:	e92d4800 	push	{fp, lr}
   34258:	e28db004 	add	fp, sp, #4
   3425c:	e24dd020 	sub	sp, sp, #32
   34260:	e50b0008 	str	r0, [fp, #-8]
   34264:	e50b100c 	str	r1, [fp, #-12]
   34268:	e1a03002 	mov	r3, r2
   3426c:	e54b300d 	strb	r3, [fp, #-13]
   34270:	e51b300c 	ldr	r3, [fp, #-12]
   34274:	e3530000 	cmp	r3, #0
   34278:	1a00000c 	bne	342b0 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x5c>
   3427c:	ebff754c 	bl	117b4 <ConfigStore::Get()>
   34280:	e24b200d 	sub	r2, fp, #13
   34284:	e3a03000 	mov	r3, #0
   34288:	e58d3008 	str	r3, [sp, #8]
   3428c:	e3a03004 	mov	r3, #4
   34290:	e58d3004 	str	r3, [sp, #4]
   34294:	e3a03001 	mov	r3, #1
   34298:	e58d3000 	str	r3, [sp]
   3429c:	e1a03002 	mov	r3, r2
   342a0:	e3a02004 	mov	r2, #4
   342a4:	e3a01001 	mov	r1, #1
   342a8:	ebfffb90 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   342ac:	ea000000 	b	342b4 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x60>
   342b0:	e1a00000 	nop			; (mov r0, r0)
   342b4:	e24bd004 	sub	sp, fp, #4
   342b8:	e8bd8800 	pop	{fp, pc}

000342bc <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
   342bc:	e2400004 	sub	r0, r0, #4
   342c0:	eaffffe3 	b	34254 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>

000342c4 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
   342c4:	e92d4800 	push	{fp, lr}
   342c8:	e28db004 	add	fp, sp, #4
   342cc:	e24dd020 	sub	sp, sp, #32
   342d0:	e50b0008 	str	r0, [fp, #-8]
   342d4:	e50b100c 	str	r1, [fp, #-12]
   342d8:	e1a03002 	mov	r3, r2
   342dc:	e54b300d 	strb	r3, [fp, #-13]
   342e0:	e51b300c 	ldr	r3, [fp, #-12]
   342e4:	e3530000 	cmp	r3, #0
   342e8:	1a00000c 	bne	34320 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x5c>
   342ec:	ebff7530 	bl	117b4 <ConfigStore::Get()>
   342f0:	e24b200d 	sub	r2, fp, #13
   342f4:	e3a03000 	mov	r3, #0
   342f8:	e58d3008 	str	r3, [sp, #8]
   342fc:	e3a03008 	mov	r3, #8
   34300:	e58d3004 	str	r3, [sp, #4]
   34304:	e3a03001 	mov	r3, #1
   34308:	e58d3000 	str	r3, [sp]
   3430c:	e1a03002 	mov	r3, r2
   34310:	e3a02005 	mov	r2, #5
   34314:	e3a01001 	mov	r1, #1
   34318:	ebfffb74 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   3431c:	ea000000 	b	34324 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x60>
   34320:	e1a00000 	nop			; (mov r0, r0)
   34324:	e24bd004 	sub	sp, fp, #4
   34328:	e8bd8800 	pop	{fp, pc}

0003432c <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
   3432c:	e2400004 	sub	r0, r0, #4
   34330:	eaffffe3 	b	342c4 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>

00034334 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
   34334:	e92d4800 	push	{fp, lr}
   34338:	e28db004 	add	fp, sp, #4
   3433c:	e24dd020 	sub	sp, sp, #32
   34340:	e50b0008 	str	r0, [fp, #-8]
   34344:	e50b100c 	str	r1, [fp, #-12]
   34348:	e50b2010 	str	r2, [fp, #-16]
   3434c:	e59f308c 	ldr	r3, [pc, #140]	; 343e0 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0xac>
   34350:	e5933000 	ldr	r3, [r3]
   34354:	e51b200c 	ldr	r2, [fp, #-12]
   34358:	e1520003 	cmp	r2, r3
   3435c:	3a00001a 	bcc	343cc <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x98>
   34360:	e59f3078 	ldr	r3, [pc, #120]	; 343e0 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0xac>
   34364:	e5933000 	ldr	r3, [r3]
   34368:	e51b200c 	ldr	r2, [fp, #-12]
   3436c:	e0423003 	sub	r3, r2, r3
   34370:	e50b300c 	str	r3, [fp, #-12]
   34374:	e51b300c 	ldr	r3, [fp, #-12]
   34378:	e3530003 	cmp	r3, #3
   3437c:	8a000014 	bhi	343d4 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0xa0>
   34380:	ebff750b 	bl	117b4 <ConfigStore::Get()>
   34384:	e1a0c000 	mov	ip, r0
   34388:	e51b300c 	ldr	r3, [fp, #-12]
   3438c:	e283106c 	add	r1, r3, #108	; 0x6c
   34390:	e3a02701 	mov	r2, #262144	; 0x40000
   34394:	e51b300c 	ldr	r3, [fp, #-12]
   34398:	e1a03312 	lsl	r3, r2, r3
   3439c:	e24b0010 	sub	r0, fp, #16
   343a0:	e3a02000 	mov	r2, #0
   343a4:	e58d2008 	str	r2, [sp, #8]
   343a8:	e58d3004 	str	r3, [sp, #4]
   343ac:	e3a03001 	mov	r3, #1
   343b0:	e58d3000 	str	r3, [sp]
   343b4:	e1a03000 	mov	r3, r0
   343b8:	e1a02001 	mov	r2, r1
   343bc:	e3a01001 	mov	r1, #1
   343c0:	e1a0000c 	mov	r0, ip
   343c4:	ebfffb49 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   343c8:	ea000002 	b	343d8 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0xa4>
   343cc:	e1a00000 	nop			; (mov r0, r0)
   343d0:	ea000000 	b	343d8 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0xa4>
   343d4:	e1a00000 	nop			; (mov r0, r0)
   343d8:	e24bd004 	sub	sp, fp, #4
   343dc:	e8bd8800 	pop	{fp, pc}
   343e0:	0005ec4c 	.word	0x0005ec4c

000343e4 <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
   343e4:	e2400004 	sub	r0, r0, #4
   343e8:	eaffffd1 	b	34334 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

000343ec <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
   343ec:	e92d4800 	push	{fp, lr}
   343f0:	e28db004 	add	fp, sp, #4
   343f4:	e24dd020 	sub	sp, sp, #32
   343f8:	e50b0008 	str	r0, [fp, #-8]
   343fc:	e50b100c 	str	r1, [fp, #-12]
   34400:	e50b2010 	str	r2, [fp, #-16]
   34404:	e59f308c 	ldr	r3, [pc, #140]	; 34498 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0xac>
   34408:	e5933000 	ldr	r3, [r3]
   3440c:	e51b200c 	ldr	r2, [fp, #-12]
   34410:	e1520003 	cmp	r2, r3
   34414:	3a00001a 	bcc	34484 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x98>
   34418:	e59f3078 	ldr	r3, [pc, #120]	; 34498 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0xac>
   3441c:	e5933000 	ldr	r3, [r3]
   34420:	e51b200c 	ldr	r2, [fp, #-12]
   34424:	e0423003 	sub	r3, r2, r3
   34428:	e50b300c 	str	r3, [fp, #-12]
   3442c:	e51b300c 	ldr	r3, [fp, #-12]
   34430:	e3530003 	cmp	r3, #3
   34434:	8a000014 	bhi	3448c <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0xa0>
   34438:	ebff74dd 	bl	117b4 <ConfigStore::Get()>
   3443c:	e1a0c000 	mov	ip, r0
   34440:	e51b300c 	ldr	r3, [fp, #-12]
   34444:	e2831071 	add	r1, r3, #113	; 0x71
   34448:	e3a02502 	mov	r2, #8388608	; 0x800000
   3444c:	e51b300c 	ldr	r3, [fp, #-12]
   34450:	e1a03312 	lsl	r3, r2, r3
   34454:	e24b0010 	sub	r0, fp, #16
   34458:	e3a02000 	mov	r2, #0
   3445c:	e58d2008 	str	r2, [sp, #8]
   34460:	e58d3004 	str	r3, [sp, #4]
   34464:	e3a03001 	mov	r3, #1
   34468:	e58d3000 	str	r3, [sp]
   3446c:	e1a03000 	mov	r3, r0
   34470:	e1a02001 	mov	r2, r1
   34474:	e3a01001 	mov	r1, #1
   34478:	e1a0000c 	mov	r0, ip
   3447c:	ebfffb1b 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   34480:	ea000002 	b	34490 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0xa4>
   34484:	e1a00000 	nop			; (mov r0, r0)
   34488:	ea000000 	b	34490 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0xa4>
   3448c:	e1a00000 	nop			; (mov r0, r0)
   34490:	e24bd004 	sub	sp, fp, #4
   34494:	e8bd8800 	pop	{fp, pc}
   34498:	0005ec4c 	.word	0x0005ec4c

0003449c <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
   3449c:	e2400004 	sub	r0, r0, #4
   344a0:	eaffffd1 	b	343ec <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

000344a4 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
   344a4:	e92d4800 	push	{fp, lr}
   344a8:	e28db004 	add	fp, sp, #4
   344ac:	e24dd028 	sub	sp, sp, #40	; 0x28
   344b0:	e50b0010 	str	r0, [fp, #-16]
   344b4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   344b8:	e1a03002 	mov	r3, r2
   344bc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   344c0:	e59f310c 	ldr	r3, [pc, #268]	; 345d4 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x130>
   344c4:	e5933000 	ldr	r3, [r3]
   344c8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   344cc:	e1520003 	cmp	r2, r3
   344d0:	3a00003a 	bcc	345c0 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x11c>
   344d4:	e59f30f8 	ldr	r3, [pc, #248]	; 345d4 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x130>
   344d8:	e5933000 	ldr	r3, [r3]
   344dc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   344e0:	e0423003 	sub	r3, r2, r3
   344e4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   344e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   344ec:	e3530003 	cmp	r3, #3
   344f0:	8a000034 	bhi	345c8 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x124>
   344f4:	ebff74ae 	bl	117b4 <ConfigStore::Get()>
   344f8:	e24b2006 	sub	r2, fp, #6
   344fc:	e3a03000 	mov	r3, #0
   34500:	e58d3004 	str	r3, [sp, #4]
   34504:	e3a03008 	mov	r3, #8
   34508:	e58d3000 	str	r3, [sp]
   3450c:	e3a03002 	mov	r3, #2
   34510:	e3a01001 	mov	r1, #1
   34514:	ebfffb62 	bl	332a4 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
   34518:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   3451c:	ebfffe22 	bl	33dac <artnetparams::clear_mask(unsigned int)>
   34520:	e1a03000 	mov	r3, r0
   34524:	e1a02003 	mov	r2, r3
   34528:	e15b30b6 	ldrh	r3, [fp, #-6]
   3452c:	e0033002 	and	r3, r3, r2
   34530:	e6ff3073 	uxth	r3, r3
   34534:	e14b30b6 	strh	r3, [fp, #-6]
   34538:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   3453c:	e3530000 	cmp	r3, #0
   34540:	0a000011 	beq	3458c <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0xe8>
   34544:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   34548:	e3a00001 	mov	r0, #1
   3454c:	ebfffe2b 	bl	33e00 <artnetparams::shift_left(unsigned int, unsigned int)>
   34550:	e1a03000 	mov	r3, r0
   34554:	e1a02003 	mov	r2, r3
   34558:	e15b30b6 	ldrh	r3, [fp, #-6]
   3455c:	e1823003 	orr	r3, r2, r3
   34560:	e6ff3073 	uxth	r3, r3
   34564:	e14b30b6 	strh	r3, [fp, #-6]
   34568:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3456c:	e2833008 	add	r3, r3, #8
   34570:	e3a02001 	mov	r2, #1
   34574:	e1a03312 	lsl	r3, r2, r3
   34578:	e6ff2073 	uxth	r2, r3
   3457c:	e15b30b6 	ldrh	r3, [fp, #-6]
   34580:	e1823003 	orr	r3, r2, r3
   34584:	e6ff3073 	uxth	r3, r3
   34588:	e14b30b6 	strh	r3, [fp, #-6]
   3458c:	ebff7488 	bl	117b4 <ConfigStore::Get()>
   34590:	e24b2006 	sub	r2, fp, #6
   34594:	e3a03000 	mov	r3, #0
   34598:	e58d3008 	str	r3, [sp, #8]
   3459c:	e3a03000 	mov	r3, #0
   345a0:	e58d3004 	str	r3, [sp, #4]
   345a4:	e3a03002 	mov	r3, #2
   345a8:	e58d3000 	str	r3, [sp]
   345ac:	e1a03002 	mov	r3, r2
   345b0:	e3a02008 	mov	r2, #8
   345b4:	e3a01001 	mov	r1, #1
   345b8:	ebfffacc 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   345bc:	ea000002 	b	345cc <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x128>
   345c0:	e1a00000 	nop			; (mov r0, r0)
   345c4:	ea000000 	b	345cc <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x128>
   345c8:	e1a00000 	nop			; (mov r0, r0)
   345cc:	e24bd004 	sub	sp, fp, #4
   345d0:	e8bd8800 	pop	{fp, pc}
   345d4:	0005ec4c 	.word	0x0005ec4c

000345d8 <non-virtual thunk to StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
   345d8:	e2400004 	sub	r0, r0, #4
   345dc:	eaffffb0 	b	344a4 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>

000345e0 <StoreArtNet::~StoreArtNet()>:
   345e0:	e92d4800 	push	{fp, lr}
   345e4:	e28db004 	add	fp, sp, #4
   345e8:	e24dd008 	sub	sp, sp, #8
   345ec:	e50b0008 	str	r0, [fp, #-8]
   345f0:	e59f203c 	ldr	r2, [pc, #60]	; 34634 <StoreArtNet::~StoreArtNet()+0x54>
   345f4:	e51b3008 	ldr	r3, [fp, #-8]
   345f8:	e5832000 	str	r2, [r3]
   345fc:	e59f2034 	ldr	r2, [pc, #52]	; 34638 <StoreArtNet::~StoreArtNet()+0x58>
   34600:	e51b3008 	ldr	r3, [fp, #-8]
   34604:	e5832004 	str	r2, [r3, #4]
   34608:	e51b3008 	ldr	r3, [fp, #-8]
   3460c:	e2833004 	add	r3, r3, #4
   34610:	e1a00003 	mov	r0, r3
   34614:	ebfffe20 	bl	33e9c <ArtNetStore::~ArtNetStore()>
   34618:	e51b3008 	ldr	r3, [fp, #-8]
   3461c:	e1a00003 	mov	r0, r3
   34620:	ebfffe04 	bl	33e38 <ArtNetParamsStore::~ArtNetParamsStore()>
   34624:	e51b3008 	ldr	r3, [fp, #-8]
   34628:	e1a00003 	mov	r0, r3
   3462c:	e24bd004 	sub	sp, fp, #4
   34630:	e8bd8800 	pop	{fp, pc}
   34634:	00048ad4 	.word	0x00048ad4
   34638:	00048b14 	.word	0x00048b14

0003463c <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
   3463c:	e2400004 	sub	r0, r0, #4
   34640:	eaffffe6 	b	345e0 <StoreArtNet::~StoreArtNet()>

00034644 <StoreArtNet::~StoreArtNet()>:
   34644:	e92d4800 	push	{fp, lr}
   34648:	e28db004 	add	fp, sp, #4
   3464c:	e24dd008 	sub	sp, sp, #8
   34650:	e50b0008 	str	r0, [fp, #-8]
   34654:	e51b0008 	ldr	r0, [fp, #-8]
   34658:	ebffffe0 	bl	345e0 <StoreArtNet::~StoreArtNet()>
   3465c:	e51b0008 	ldr	r0, [fp, #-8]
   34660:	ebff7328 	bl	11308 <operator delete(void*)@plt>
   34664:	e51b3008 	ldr	r3, [fp, #-8]
   34668:	e1a00003 	mov	r0, r3
   3466c:	e24bd004 	sub	sp, fp, #4
   34670:	e8bd8800 	pop	{fp, pc}

00034674 <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
   34674:	e2400004 	sub	r0, r0, #4
   34678:	eafffff1 	b	34644 <StoreArtNet::~StoreArtNet()>

0003467c <RDMDeviceStore::~RDMDeviceStore()>:
   3467c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   34680:	e28db000 	add	fp, sp, #0
   34684:	e24dd00c 	sub	sp, sp, #12
   34688:	e50b0008 	str	r0, [fp, #-8]
   3468c:	e59f2018 	ldr	r2, [pc, #24]	; 346ac <RDMDeviceStore::~RDMDeviceStore()+0x30>
   34690:	e51b3008 	ldr	r3, [fp, #-8]
   34694:	e5832000 	str	r2, [r3]
   34698:	e51b3008 	ldr	r3, [fp, #-8]
   3469c:	e1a00003 	mov	r0, r3
   346a0:	e28bd000 	add	sp, fp, #0
   346a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   346a8:	e12fff1e 	bx	lr
   346ac:	00048bf0 	.word	0x00048bf0

000346b0 <RDMDeviceStore::~RDMDeviceStore()>:
   346b0:	e92d4800 	push	{fp, lr}
   346b4:	e28db004 	add	fp, sp, #4
   346b8:	e24dd008 	sub	sp, sp, #8
   346bc:	e50b0008 	str	r0, [fp, #-8]
   346c0:	e51b0008 	ldr	r0, [fp, #-8]
   346c4:	ebffffec 	bl	3467c <RDMDeviceStore::~RDMDeviceStore()>
   346c8:	e51b0008 	ldr	r0, [fp, #-8]
   346cc:	ebff730d 	bl	11308 <operator delete(void*)@plt>
   346d0:	e51b3008 	ldr	r3, [fp, #-8]
   346d4:	e1a00003 	mov	r0, r3
   346d8:	e24bd004 	sub	sp, fp, #4
   346dc:	e8bd8800 	pop	{fp, pc}

000346e0 <RDMDeviceParamsStore::~RDMDeviceParamsStore()>:
   346e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   346e4:	e28db000 	add	fp, sp, #0
   346e8:	e24dd00c 	sub	sp, sp, #12
   346ec:	e50b0008 	str	r0, [fp, #-8]
   346f0:	e59f2018 	ldr	r2, [pc, #24]	; 34710 <RDMDeviceParamsStore::~RDMDeviceParamsStore()+0x30>
   346f4:	e51b3008 	ldr	r3, [fp, #-8]
   346f8:	e5832000 	str	r2, [r3]
   346fc:	e51b3008 	ldr	r3, [fp, #-8]
   34700:	e1a00003 	mov	r0, r3
   34704:	e28bd000 	add	sp, fp, #0
   34708:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3470c:	e12fff1e 	bx	lr
   34710:	00048bd8 	.word	0x00048bd8

00034714 <RDMDeviceParamsStore::~RDMDeviceParamsStore()>:
   34714:	e92d4800 	push	{fp, lr}
   34718:	e28db004 	add	fp, sp, #4
   3471c:	e24dd008 	sub	sp, sp, #8
   34720:	e50b0008 	str	r0, [fp, #-8]
   34724:	e51b0008 	ldr	r0, [fp, #-8]
   34728:	ebffffec 	bl	346e0 <RDMDeviceParamsStore::~RDMDeviceParamsStore()>
   3472c:	e51b0008 	ldr	r0, [fp, #-8]
   34730:	ebff72f4 	bl	11308 <operator delete(void*)@plt>
   34734:	e51b3008 	ldr	r3, [fp, #-8]
   34738:	e1a00003 	mov	r0, r3
   3473c:	e24bd004 	sub	sp, fp, #4
   34740:	e8bd8800 	pop	{fp, pc}

00034744 <StoreRDMDevice::Update(rdm::deviceparams::Params const*)>:
   34744:	e92d4800 	push	{fp, lr}
   34748:	e28db004 	add	fp, sp, #4
   3474c:	e24dd008 	sub	sp, sp, #8
   34750:	e50b0008 	str	r0, [fp, #-8]
   34754:	e50b100c 	str	r1, [fp, #-12]
   34758:	ebff7415 	bl	117b4 <ConfigStore::Get()>
   3475c:	e3a03029 	mov	r3, #41	; 0x29
   34760:	e51b200c 	ldr	r2, [fp, #-12]
   34764:	e3a0100b 	mov	r1, #11
   34768:	ebff73fc 	bl	11760 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>
   3476c:	e1a00000 	nop			; (mov r0, r0)
   34770:	e24bd004 	sub	sp, fp, #4
   34774:	e8bd8800 	pop	{fp, pc}

00034778 <StoreRDMDevice::Copy(rdm::deviceparams::Params*)>:
   34778:	e92d4800 	push	{fp, lr}
   3477c:	e28db004 	add	fp, sp, #4
   34780:	e24dd010 	sub	sp, sp, #16
   34784:	e50b0008 	str	r0, [fp, #-8]
   34788:	e50b100c 	str	r1, [fp, #-12]
   3478c:	ebff7408 	bl	117b4 <ConfigStore::Get()>
   34790:	e3a03001 	mov	r3, #1
   34794:	e58d3004 	str	r3, [sp, #4]
   34798:	e3a03000 	mov	r3, #0
   3479c:	e58d3000 	str	r3, [sp]
   347a0:	e3a03029 	mov	r3, #41	; 0x29
   347a4:	e51b200c 	ldr	r2, [fp, #-12]
   347a8:	e3a0100b 	mov	r1, #11
   347ac:	ebfffabc 	bl	332a4 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
   347b0:	e1a00000 	nop			; (mov r0, r0)
   347b4:	e24bd004 	sub	sp, fp, #4
   347b8:	e8bd8800 	pop	{fp, pc}

000347bc <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
   347bc:	e92d4800 	push	{fp, lr}
   347c0:	e28db004 	add	fp, sp, #4
   347c4:	e24dd020 	sub	sp, sp, #32
   347c8:	e50b0008 	str	r0, [fp, #-8]
   347cc:	e50b100c 	str	r1, [fp, #-12]
   347d0:	e1a03002 	mov	r3, r2
   347d4:	e54b300d 	strb	r3, [fp, #-13]
   347d8:	ebff73f5 	bl	117b4 <ConfigStore::Get()>
   347dc:	e55b300d 	ldrb	r3, [fp, #-13]
   347e0:	e1a02003 	mov	r2, r3
   347e4:	e3a03000 	mov	r3, #0
   347e8:	e58d3008 	str	r3, [sp, #8]
   347ec:	e3a03001 	mov	r3, #1
   347f0:	e58d3004 	str	r3, [sp, #4]
   347f4:	e58d2000 	str	r2, [sp]
   347f8:	e51b300c 	ldr	r3, [fp, #-12]
   347fc:	e3a02004 	mov	r2, #4
   34800:	e3a0100b 	mov	r1, #11
   34804:	ebfffa39 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   34808:	ebff73e9 	bl	117b4 <ConfigStore::Get()>
   3480c:	e24b200d 	sub	r2, fp, #13
   34810:	e3a03000 	mov	r3, #0
   34814:	e58d3008 	str	r3, [sp, #8]
   34818:	e3a03001 	mov	r3, #1
   3481c:	e58d3004 	str	r3, [sp, #4]
   34820:	e3a03001 	mov	r3, #1
   34824:	e58d3000 	str	r3, [sp]
   34828:	e1a03002 	mov	r3, r2
   3482c:	e3a02024 	mov	r2, #36	; 0x24
   34830:	e3a0100b 	mov	r1, #11
   34834:	ebfffa2d 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   34838:	e1a00000 	nop			; (mov r0, r0)
   3483c:	e24bd004 	sub	sp, fp, #4
   34840:	e8bd8800 	pop	{fp, pc}

00034844 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
   34844:	e2400004 	sub	r0, r0, #4
   34848:	eaffffdb 	b	347bc <StoreRDMDevice::SaveLabel(char const*, unsigned char)>

0003484c <RDMDeviceParamsStore::RDMDeviceParamsStore()>:
   3484c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   34850:	e28db000 	add	fp, sp, #0
   34854:	e24dd00c 	sub	sp, sp, #12
   34858:	e50b0008 	str	r0, [fp, #-8]
   3485c:	e59f2018 	ldr	r2, [pc, #24]	; 3487c <RDMDeviceParamsStore::RDMDeviceParamsStore()+0x30>
   34860:	e51b3008 	ldr	r3, [fp, #-8]
   34864:	e5832000 	str	r2, [r3]
   34868:	e51b3008 	ldr	r3, [fp, #-8]
   3486c:	e1a00003 	mov	r0, r3
   34870:	e28bd000 	add	sp, fp, #0
   34874:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   34878:	e12fff1e 	bx	lr
   3487c:	00048bd8 	.word	0x00048bd8

00034880 <RDMDeviceStore::RDMDeviceStore()>:
   34880:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   34884:	e28db000 	add	fp, sp, #0
   34888:	e24dd00c 	sub	sp, sp, #12
   3488c:	e50b0008 	str	r0, [fp, #-8]
   34890:	e59f2018 	ldr	r2, [pc, #24]	; 348b0 <RDMDeviceStore::RDMDeviceStore()+0x30>
   34894:	e51b3008 	ldr	r3, [fp, #-8]
   34898:	e5832000 	str	r2, [r3]
   3489c:	e51b3008 	ldr	r3, [fp, #-8]
   348a0:	e1a00003 	mov	r0, r3
   348a4:	e28bd000 	add	sp, fp, #0
   348a8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   348ac:	e12fff1e 	bx	lr
   348b0:	00048bf0 	.word	0x00048bf0

000348b4 <StoreRDMDevice::StoreRDMDevice()>:
   348b4:	e92d4800 	push	{fp, lr}
   348b8:	e28db004 	add	fp, sp, #4
   348bc:	e24dd008 	sub	sp, sp, #8
   348c0:	e50b0008 	str	r0, [fp, #-8]
   348c4:	e51b3008 	ldr	r3, [fp, #-8]
   348c8:	e1a00003 	mov	r0, r3
   348cc:	ebffffde 	bl	3484c <RDMDeviceParamsStore::RDMDeviceParamsStore()>
   348d0:	e51b3008 	ldr	r3, [fp, #-8]
   348d4:	e2833004 	add	r3, r3, #4
   348d8:	e1a00003 	mov	r0, r3
   348dc:	ebffffe7 	bl	34880 <RDMDeviceStore::RDMDeviceStore()>
   348e0:	e59f202c 	ldr	r2, [pc, #44]	; 34914 <StoreRDMDevice::StoreRDMDevice()+0x60>
   348e4:	e51b3008 	ldr	r3, [fp, #-8]
   348e8:	e5832000 	str	r2, [r3]
   348ec:	e59f2024 	ldr	r2, [pc, #36]	; 34918 <StoreRDMDevice::StoreRDMDevice()+0x64>
   348f0:	e51b3008 	ldr	r3, [fp, #-8]
   348f4:	e5832004 	str	r2, [r3, #4]
   348f8:	e59f201c 	ldr	r2, [pc, #28]	; 3491c <StoreRDMDevice::StoreRDMDevice()+0x68>
   348fc:	e51b3008 	ldr	r3, [fp, #-8]
   34900:	e5823000 	str	r3, [r2]
   34904:	e51b3008 	ldr	r3, [fp, #-8]
   34908:	e1a00003 	mov	r0, r3
   3490c:	e24bd004 	sub	sp, fp, #4
   34910:	e8bd8800 	pop	{fp, pc}
   34914:	00048ba8 	.word	0x00048ba8
   34918:	00048bc4 	.word	0x00048bc4
   3491c:	0005ec54 	.word	0x0005ec54

00034920 <StoreRDMDevice::~StoreRDMDevice()>:
   34920:	e92d4800 	push	{fp, lr}
   34924:	e28db004 	add	fp, sp, #4
   34928:	e24dd008 	sub	sp, sp, #8
   3492c:	e50b0008 	str	r0, [fp, #-8]
   34930:	e59f203c 	ldr	r2, [pc, #60]	; 34974 <StoreRDMDevice::~StoreRDMDevice()+0x54>
   34934:	e51b3008 	ldr	r3, [fp, #-8]
   34938:	e5832000 	str	r2, [r3]
   3493c:	e59f2034 	ldr	r2, [pc, #52]	; 34978 <StoreRDMDevice::~StoreRDMDevice()+0x58>
   34940:	e51b3008 	ldr	r3, [fp, #-8]
   34944:	e5832004 	str	r2, [r3, #4]
   34948:	e51b3008 	ldr	r3, [fp, #-8]
   3494c:	e2833004 	add	r3, r3, #4
   34950:	e1a00003 	mov	r0, r3
   34954:	ebffff48 	bl	3467c <RDMDeviceStore::~RDMDeviceStore()>
   34958:	e51b3008 	ldr	r3, [fp, #-8]
   3495c:	e1a00003 	mov	r0, r3
   34960:	ebffff5e 	bl	346e0 <RDMDeviceParamsStore::~RDMDeviceParamsStore()>
   34964:	e51b3008 	ldr	r3, [fp, #-8]
   34968:	e1a00003 	mov	r0, r3
   3496c:	e24bd004 	sub	sp, fp, #4
   34970:	e8bd8800 	pop	{fp, pc}
   34974:	00048ba8 	.word	0x00048ba8
   34978:	00048bc4 	.word	0x00048bc4

0003497c <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
   3497c:	e2400004 	sub	r0, r0, #4
   34980:	eaffffe6 	b	34920 <StoreRDMDevice::~StoreRDMDevice()>

00034984 <StoreRDMDevice::~StoreRDMDevice()>:
   34984:	e92d4800 	push	{fp, lr}
   34988:	e28db004 	add	fp, sp, #4
   3498c:	e24dd008 	sub	sp, sp, #8
   34990:	e50b0008 	str	r0, [fp, #-8]
   34994:	e51b0008 	ldr	r0, [fp, #-8]
   34998:	ebffffe0 	bl	34920 <StoreRDMDevice::~StoreRDMDevice()>
   3499c:	e51b0008 	ldr	r0, [fp, #-8]
   349a0:	ebff7258 	bl	11308 <operator delete(void*)@plt>
   349a4:	e51b3008 	ldr	r3, [fp, #-8]
   349a8:	e1a00003 	mov	r0, r3
   349ac:	e24bd004 	sub	sp, fp, #4
   349b0:	e8bd8800 	pop	{fp, pc}

000349b4 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
   349b4:	e2400004 	sub	r0, r0, #4
   349b8:	eafffff1 	b	34984 <StoreRDMDevice::~StoreRDMDevice()>

000349bc <RDMSensorsParamsStore::~RDMSensorsParamsStore()>:
   349bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   349c0:	e28db000 	add	fp, sp, #0
   349c4:	e24dd00c 	sub	sp, sp, #12
   349c8:	e50b0008 	str	r0, [fp, #-8]
   349cc:	e59f2018 	ldr	r2, [pc, #24]	; 349ec <RDMSensorsParamsStore::~RDMSensorsParamsStore()+0x30>
   349d0:	e51b3008 	ldr	r3, [fp, #-8]
   349d4:	e5832000 	str	r2, [r3]
   349d8:	e51b3008 	ldr	r3, [fp, #-8]
   349dc:	e1a00003 	mov	r0, r3
   349e0:	e28bd000 	add	sp, fp, #0
   349e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   349e8:	e12fff1e 	bx	lr
   349ec:	00048c30 	.word	0x00048c30

000349f0 <RDMSensorsParamsStore::~RDMSensorsParamsStore()>:
   349f0:	e92d4800 	push	{fp, lr}
   349f4:	e28db004 	add	fp, sp, #4
   349f8:	e24dd008 	sub	sp, sp, #8
   349fc:	e50b0008 	str	r0, [fp, #-8]
   34a00:	e51b0008 	ldr	r0, [fp, #-8]
   34a04:	ebffffec 	bl	349bc <RDMSensorsParamsStore::~RDMSensorsParamsStore()>
   34a08:	e51b0008 	ldr	r0, [fp, #-8]
   34a0c:	ebff723d 	bl	11308 <operator delete(void*)@plt>
   34a10:	e51b3008 	ldr	r3, [fp, #-8]
   34a14:	e1a00003 	mov	r0, r3
   34a18:	e24bd004 	sub	sp, fp, #4
   34a1c:	e8bd8800 	pop	{fp, pc}

00034a20 <StoreRDMSensors::Update(TRDMSensorsParams const*)>:
   34a20:	e92d4800 	push	{fp, lr}
   34a24:	e28db004 	add	fp, sp, #4
   34a28:	e24dd008 	sub	sp, sp, #8
   34a2c:	e50b0008 	str	r0, [fp, #-8]
   34a30:	e50b100c 	str	r1, [fp, #-12]
   34a34:	ebff735e 	bl	117b4 <ConfigStore::Get()>
   34a38:	e3a03034 	mov	r3, #52	; 0x34
   34a3c:	e51b200c 	ldr	r2, [fp, #-12]
   34a40:	e3a01017 	mov	r1, #23
   34a44:	ebff7345 	bl	11760 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>
   34a48:	e1a00000 	nop			; (mov r0, r0)
   34a4c:	e24bd004 	sub	sp, fp, #4
   34a50:	e8bd8800 	pop	{fp, pc}

00034a54 <StoreRDMSensors::Copy(TRDMSensorsParams*)>:
   34a54:	e92d4800 	push	{fp, lr}
   34a58:	e28db004 	add	fp, sp, #4
   34a5c:	e24dd010 	sub	sp, sp, #16
   34a60:	e50b0008 	str	r0, [fp, #-8]
   34a64:	e50b100c 	str	r1, [fp, #-12]
   34a68:	ebff7351 	bl	117b4 <ConfigStore::Get()>
   34a6c:	e3a03001 	mov	r3, #1
   34a70:	e58d3004 	str	r3, [sp, #4]
   34a74:	e3a03000 	mov	r3, #0
   34a78:	e58d3000 	str	r3, [sp]
   34a7c:	e3a03034 	mov	r3, #52	; 0x34
   34a80:	e51b200c 	ldr	r2, [fp, #-12]
   34a84:	e3a01017 	mov	r1, #23
   34a88:	ebfffa05 	bl	332a4 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
   34a8c:	e1a00000 	nop			; (mov r0, r0)
   34a90:	e24bd004 	sub	sp, fp, #4
   34a94:	e8bd8800 	pop	{fp, pc}

00034a98 <RDMSensorsParamsStore::RDMSensorsParamsStore()>:
   34a98:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   34a9c:	e28db000 	add	fp, sp, #0
   34aa0:	e24dd00c 	sub	sp, sp, #12
   34aa4:	e50b0008 	str	r0, [fp, #-8]
   34aa8:	e59f2018 	ldr	r2, [pc, #24]	; 34ac8 <RDMSensorsParamsStore::RDMSensorsParamsStore()+0x30>
   34aac:	e51b3008 	ldr	r3, [fp, #-8]
   34ab0:	e5832000 	str	r2, [r3]
   34ab4:	e51b3008 	ldr	r3, [fp, #-8]
   34ab8:	e1a00003 	mov	r0, r3
   34abc:	e28bd000 	add	sp, fp, #0
   34ac0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   34ac4:	e12fff1e 	bx	lr
   34ac8:	00048c30 	.word	0x00048c30

00034acc <StoreRDMSensors::StoreRDMSensors()>:
   34acc:	e92d4800 	push	{fp, lr}
   34ad0:	e28db004 	add	fp, sp, #4
   34ad4:	e24dd008 	sub	sp, sp, #8
   34ad8:	e50b0008 	str	r0, [fp, #-8]
   34adc:	e51b3008 	ldr	r3, [fp, #-8]
   34ae0:	e1a00003 	mov	r0, r3
   34ae4:	ebffffeb 	bl	34a98 <RDMSensorsParamsStore::RDMSensorsParamsStore()>
   34ae8:	e59f2020 	ldr	r2, [pc, #32]	; 34b10 <StoreRDMSensors::StoreRDMSensors()+0x44>
   34aec:	e51b3008 	ldr	r3, [fp, #-8]
   34af0:	e5832000 	str	r2, [r3]
   34af4:	e59f2018 	ldr	r2, [pc, #24]	; 34b14 <StoreRDMSensors::StoreRDMSensors()+0x48>
   34af8:	e51b3008 	ldr	r3, [fp, #-8]
   34afc:	e5823000 	str	r3, [r2]
   34b00:	e51b3008 	ldr	r3, [fp, #-8]
   34b04:	e1a00003 	mov	r0, r3
   34b08:	e24bd004 	sub	sp, fp, #4
   34b0c:	e8bd8800 	pop	{fp, pc}
   34b10:	00048c18 	.word	0x00048c18
   34b14:	0005ec58 	.word	0x0005ec58

00034b18 <StoreRDMSensors::~StoreRDMSensors()>:
   34b18:	e92d4800 	push	{fp, lr}
   34b1c:	e28db004 	add	fp, sp, #4
   34b20:	e24dd008 	sub	sp, sp, #8
   34b24:	e50b0008 	str	r0, [fp, #-8]
   34b28:	e59f2020 	ldr	r2, [pc, #32]	; 34b50 <StoreRDMSensors::~StoreRDMSensors()+0x38>
   34b2c:	e51b3008 	ldr	r3, [fp, #-8]
   34b30:	e5832000 	str	r2, [r3]
   34b34:	e51b3008 	ldr	r3, [fp, #-8]
   34b38:	e1a00003 	mov	r0, r3
   34b3c:	ebffff9e 	bl	349bc <RDMSensorsParamsStore::~RDMSensorsParamsStore()>
   34b40:	e51b3008 	ldr	r3, [fp, #-8]
   34b44:	e1a00003 	mov	r0, r3
   34b48:	e24bd004 	sub	sp, fp, #4
   34b4c:	e8bd8800 	pop	{fp, pc}
   34b50:	00048c18 	.word	0x00048c18

00034b54 <StoreRDMSensors::~StoreRDMSensors()>:
   34b54:	e92d4800 	push	{fp, lr}
   34b58:	e28db004 	add	fp, sp, #4
   34b5c:	e24dd008 	sub	sp, sp, #8
   34b60:	e50b0008 	str	r0, [fp, #-8]
   34b64:	e51b0008 	ldr	r0, [fp, #-8]
   34b68:	ebffffea 	bl	34b18 <StoreRDMSensors::~StoreRDMSensors()>
   34b6c:	e51b0008 	ldr	r0, [fp, #-8]
   34b70:	ebff71e4 	bl	11308 <operator delete(void*)@plt>
   34b74:	e51b3008 	ldr	r3, [fp, #-8]
   34b78:	e1a00003 	mov	r0, r3
   34b7c:	e24bd004 	sub	sp, fp, #4
   34b80:	e8bd8800 	pop	{fp, pc}

00034b84 <E131ParamsStore::~E131ParamsStore()>:
   34b84:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   34b88:	e28db000 	add	fp, sp, #0
   34b8c:	e24dd00c 	sub	sp, sp, #12
   34b90:	e50b0008 	str	r0, [fp, #-8]
   34b94:	e59f2018 	ldr	r2, [pc, #24]	; 34bb4 <E131ParamsStore::~E131ParamsStore()+0x30>
   34b98:	e51b3008 	ldr	r3, [fp, #-8]
   34b9c:	e5832000 	str	r2, [r3]
   34ba0:	e51b3008 	ldr	r3, [fp, #-8]
   34ba4:	e1a00003 	mov	r0, r3
   34ba8:	e28bd000 	add	sp, fp, #0
   34bac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   34bb0:	e12fff1e 	bx	lr
   34bb4:	00048cec 	.word	0x00048cec

00034bb8 <E131ParamsStore::~E131ParamsStore()>:
   34bb8:	e92d4800 	push	{fp, lr}
   34bbc:	e28db004 	add	fp, sp, #4
   34bc0:	e24dd008 	sub	sp, sp, #8
   34bc4:	e50b0008 	str	r0, [fp, #-8]
   34bc8:	e51b0008 	ldr	r0, [fp, #-8]
   34bcc:	ebffffec 	bl	34b84 <E131ParamsStore::~E131ParamsStore()>
   34bd0:	e51b0008 	ldr	r0, [fp, #-8]
   34bd4:	ebff71cb 	bl	11308 <operator delete(void*)@plt>
   34bd8:	e51b3008 	ldr	r3, [fp, #-8]
   34bdc:	e1a00003 	mov	r0, r3
   34be0:	e24bd004 	sub	sp, fp, #4
   34be4:	e8bd8800 	pop	{fp, pc}

00034be8 <StoreE131::Update(e131params::Params const*)>:
   34be8:	e92d4800 	push	{fp, lr}
   34bec:	e28db004 	add	fp, sp, #4
   34bf0:	e24dd008 	sub	sp, sp, #8
   34bf4:	e50b0008 	str	r0, [fp, #-8]
   34bf8:	e50b100c 	str	r1, [fp, #-12]
   34bfc:	ebff72ec 	bl	117b4 <ConfigStore::Get()>
   34c00:	e3a0301f 	mov	r3, #31
   34c04:	e51b200c 	ldr	r2, [fp, #-12]
   34c08:	e3a01004 	mov	r1, #4
   34c0c:	ebff72d3 	bl	11760 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>
   34c10:	e1a00000 	nop			; (mov r0, r0)
   34c14:	e24bd004 	sub	sp, fp, #4
   34c18:	e8bd8800 	pop	{fp, pc}

00034c1c <StoreE131::Copy(e131params::Params*)>:
   34c1c:	e92d4800 	push	{fp, lr}
   34c20:	e28db004 	add	fp, sp, #4
   34c24:	e24dd010 	sub	sp, sp, #16
   34c28:	e50b0008 	str	r0, [fp, #-8]
   34c2c:	e50b100c 	str	r1, [fp, #-12]
   34c30:	ebff72df 	bl	117b4 <ConfigStore::Get()>
   34c34:	e3a03001 	mov	r3, #1
   34c38:	e58d3004 	str	r3, [sp, #4]
   34c3c:	e3a03000 	mov	r3, #0
   34c40:	e58d3000 	str	r3, [sp]
   34c44:	e3a0301f 	mov	r3, #31
   34c48:	e51b200c 	ldr	r2, [fp, #-12]
   34c4c:	e3a01004 	mov	r1, #4
   34c50:	ebfff993 	bl	332a4 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
   34c54:	e1a00000 	nop			; (mov r0, r0)
   34c58:	e24bd004 	sub	sp, fp, #4
   34c5c:	e8bd8800 	pop	{fp, pc}

00034c60 <E131ParamsStore::E131ParamsStore()>:
   34c60:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   34c64:	e28db000 	add	fp, sp, #0
   34c68:	e24dd00c 	sub	sp, sp, #12
   34c6c:	e50b0008 	str	r0, [fp, #-8]
   34c70:	e59f2018 	ldr	r2, [pc, #24]	; 34c90 <E131ParamsStore::E131ParamsStore()+0x30>
   34c74:	e51b3008 	ldr	r3, [fp, #-8]
   34c78:	e5832000 	str	r2, [r3]
   34c7c:	e51b3008 	ldr	r3, [fp, #-8]
   34c80:	e1a00003 	mov	r0, r3
   34c84:	e28bd000 	add	sp, fp, #0
   34c88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   34c8c:	e12fff1e 	bx	lr
   34c90:	00048cec 	.word	0x00048cec

00034c94 <StoreE131::StoreE131()>:
   34c94:	e92d4800 	push	{fp, lr}
   34c98:	e28db004 	add	fp, sp, #4
   34c9c:	e24dd008 	sub	sp, sp, #8
   34ca0:	e50b0008 	str	r0, [fp, #-8]
   34ca4:	e51b3008 	ldr	r3, [fp, #-8]
   34ca8:	e1a00003 	mov	r0, r3
   34cac:	ebffffeb 	bl	34c60 <E131ParamsStore::E131ParamsStore()>
   34cb0:	e59f2020 	ldr	r2, [pc, #32]	; 34cd8 <StoreE131::StoreE131()+0x44>
   34cb4:	e51b3008 	ldr	r3, [fp, #-8]
   34cb8:	e5832000 	str	r2, [r3]
   34cbc:	e59f2018 	ldr	r2, [pc, #24]	; 34cdc <StoreE131::StoreE131()+0x48>
   34cc0:	e51b3008 	ldr	r3, [fp, #-8]
   34cc4:	e5823000 	str	r3, [r2]
   34cc8:	e51b3008 	ldr	r3, [fp, #-8]
   34ccc:	e1a00003 	mov	r0, r3
   34cd0:	e24bd004 	sub	sp, fp, #4
   34cd4:	e8bd8800 	pop	{fp, pc}
   34cd8:	00048cd4 	.word	0x00048cd4
   34cdc:	0005ec5c 	.word	0x0005ec5c

00034ce0 <StoreE131::~StoreE131()>:
   34ce0:	e92d4800 	push	{fp, lr}
   34ce4:	e28db004 	add	fp, sp, #4
   34ce8:	e24dd008 	sub	sp, sp, #8
   34cec:	e50b0008 	str	r0, [fp, #-8]
   34cf0:	e59f2020 	ldr	r2, [pc, #32]	; 34d18 <StoreE131::~StoreE131()+0x38>
   34cf4:	e51b3008 	ldr	r3, [fp, #-8]
   34cf8:	e5832000 	str	r2, [r3]
   34cfc:	e51b3008 	ldr	r3, [fp, #-8]
   34d00:	e1a00003 	mov	r0, r3
   34d04:	ebffff9e 	bl	34b84 <E131ParamsStore::~E131ParamsStore()>
   34d08:	e51b3008 	ldr	r3, [fp, #-8]
   34d0c:	e1a00003 	mov	r0, r3
   34d10:	e24bd004 	sub	sp, fp, #4
   34d14:	e8bd8800 	pop	{fp, pc}
   34d18:	00048cd4 	.word	0x00048cd4

00034d1c <StoreE131::~StoreE131()>:
   34d1c:	e92d4800 	push	{fp, lr}
   34d20:	e28db004 	add	fp, sp, #4
   34d24:	e24dd008 	sub	sp, sp, #8
   34d28:	e50b0008 	str	r0, [fp, #-8]
   34d2c:	e51b0008 	ldr	r0, [fp, #-8]
   34d30:	ebffffea 	bl	34ce0 <StoreE131::~StoreE131()>
   34d34:	e51b0008 	ldr	r0, [fp, #-8]
   34d38:	ebff7172 	bl	11308 <operator delete(void*)@plt>
   34d3c:	e51b3008 	ldr	r3, [fp, #-8]
   34d40:	e1a00003 	mov	r0, r3
   34d44:	e24bd004 	sub	sp, fp, #4
   34d48:	e8bd8800 	pop	{fp, pc}

00034d4c <SparkFunDmxParamsStore::~SparkFunDmxParamsStore()>:
   34d4c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   34d50:	e28db000 	add	fp, sp, #0
   34d54:	e24dd00c 	sub	sp, sp, #12
   34d58:	e50b0008 	str	r0, [fp, #-8]
   34d5c:	e59f2018 	ldr	r2, [pc, #24]	; 34d7c <SparkFunDmxParamsStore::~SparkFunDmxParamsStore()+0x30>
   34d60:	e51b3008 	ldr	r3, [fp, #-8]
   34d64:	e5832000 	str	r2, [r3]
   34d68:	e51b3008 	ldr	r3, [fp, #-8]
   34d6c:	e1a00003 	mov	r0, r3
   34d70:	e28bd000 	add	sp, fp, #0
   34d74:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   34d78:	e12fff1e 	bx	lr
   34d7c:	00048d38 	.word	0x00048d38

00034d80 <SparkFunDmxParamsStore::~SparkFunDmxParamsStore()>:
   34d80:	e92d4800 	push	{fp, lr}
   34d84:	e28db004 	add	fp, sp, #4
   34d88:	e24dd008 	sub	sp, sp, #8
   34d8c:	e50b0008 	str	r0, [fp, #-8]
   34d90:	e51b0008 	ldr	r0, [fp, #-8]
   34d94:	ebffffec 	bl	34d4c <SparkFunDmxParamsStore::~SparkFunDmxParamsStore()>
   34d98:	e51b0008 	ldr	r0, [fp, #-8]
   34d9c:	ebff7159 	bl	11308 <operator delete(void*)@plt>
   34da0:	e51b3008 	ldr	r3, [fp, #-8]
   34da4:	e1a00003 	mov	r0, r3
   34da8:	e24bd004 	sub	sp, fp, #4
   34dac:	e8bd8800 	pop	{fp, pc}

00034db0 <SparkFunDmxParamsStore::SparkFunDmxParamsStore()>:
   34db0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   34db4:	e28db000 	add	fp, sp, #0
   34db8:	e24dd00c 	sub	sp, sp, #12
   34dbc:	e50b0008 	str	r0, [fp, #-8]
   34dc0:	e59f2018 	ldr	r2, [pc, #24]	; 34de0 <SparkFunDmxParamsStore::SparkFunDmxParamsStore()+0x30>
   34dc4:	e51b3008 	ldr	r3, [fp, #-8]
   34dc8:	e5832000 	str	r2, [r3]
   34dcc:	e51b3008 	ldr	r3, [fp, #-8]
   34dd0:	e1a00003 	mov	r0, r3
   34dd4:	e28bd000 	add	sp, fp, #0
   34dd8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   34ddc:	e12fff1e 	bx	lr
   34de0:	00048d38 	.word	0x00048d38

00034de4 <StoreSparkFunDmx::StoreSparkFunDmx()>:
   34de4:	e92d4800 	push	{fp, lr}
   34de8:	e28db004 	add	fp, sp, #4
   34dec:	e24dd018 	sub	sp, sp, #24
   34df0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   34df4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   34df8:	e1a00003 	mov	r0, r3
   34dfc:	ebffffeb 	bl	34db0 <SparkFunDmxParamsStore::SparkFunDmxParamsStore()>
   34e00:	e59f209c 	ldr	r2, [pc, #156]	; 34ea4 <StoreSparkFunDmx::StoreSparkFunDmx()+0xc0>
   34e04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   34e08:	e5832000 	str	r2, [r3]
   34e0c:	e59f2094 	ldr	r2, [pc, #148]	; 34ea8 <StoreSparkFunDmx::StoreSparkFunDmx()+0xc4>
   34e10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   34e14:	e5823000 	str	r3, [r2]
   34e18:	e3a03000 	mov	r3, #0
   34e1c:	e50b3008 	str	r3, [fp, #-8]
   34e20:	e51b3008 	ldr	r3, [fp, #-8]
   34e24:	e3530007 	cmp	r3, #7
   34e28:	8a000019 	bhi	34e94 <StoreSparkFunDmx::StoreSparkFunDmx()+0xb0>
   34e2c:	e24b3010 	sub	r3, fp, #16
   34e30:	e3a02008 	mov	r2, #8
   34e34:	e3a010ff 	mov	r1, #255	; 0xff
   34e38:	e1a00003 	mov	r0, r3
   34e3c:	ebff710a 	bl	1126c <memset@plt>
   34e40:	e3a03000 	mov	r3, #0
   34e44:	e50b3010 	str	r3, [fp, #-16]
   34e48:	e24b3010 	sub	r3, fp, #16
   34e4c:	e1a02003 	mov	r2, r3
   34e50:	e51b1008 	ldr	r1, [fp, #-8]
   34e54:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   34e58:	eb000047 	bl	34f7c <StoreSparkFunDmx::Copy(unsigned int, TSparkFunDmxParams*)>
   34e5c:	e51b3010 	ldr	r3, [fp, #-16]
   34e60:	e3730001 	cmn	r3, #1
   34e64:	1a000006 	bne	34e84 <StoreSparkFunDmx::StoreSparkFunDmx()+0xa0>
   34e68:	e3a03000 	mov	r3, #0
   34e6c:	e50b3010 	str	r3, [fp, #-16]
   34e70:	e24b3010 	sub	r3, fp, #16
   34e74:	e1a02003 	mov	r2, r3
   34e78:	e51b1008 	ldr	r1, [fp, #-8]
   34e7c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   34e80:	eb000027 	bl	34f24 <StoreSparkFunDmx::Update(unsigned int, TSparkFunDmxParams const*)>
   34e84:	e51b3008 	ldr	r3, [fp, #-8]
   34e88:	e2833001 	add	r3, r3, #1
   34e8c:	e50b3008 	str	r3, [fp, #-8]
   34e90:	eaffffe2 	b	34e20 <StoreSparkFunDmx::StoreSparkFunDmx()+0x3c>
   34e94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   34e98:	e1a00003 	mov	r0, r3
   34e9c:	e24bd004 	sub	sp, fp, #4
   34ea0:	e8bd8800 	pop	{fp, pc}
   34ea4:	00048d18 	.word	0x00048d18
   34ea8:	0005ec60 	.word	0x0005ec60

00034eac <StoreSparkFunDmx::Update(TSparkFunDmxParams const*)>:
   34eac:	e92d4800 	push	{fp, lr}
   34eb0:	e28db004 	add	fp, sp, #4
   34eb4:	e24dd008 	sub	sp, sp, #8
   34eb8:	e50b0008 	str	r0, [fp, #-8]
   34ebc:	e50b100c 	str	r1, [fp, #-12]
   34ec0:	ebff723b 	bl	117b4 <ConfigStore::Get()>
   34ec4:	e3a03008 	mov	r3, #8
   34ec8:	e51b200c 	ldr	r2, [fp, #-12]
   34ecc:	e3a01012 	mov	r1, #18
   34ed0:	ebff7222 	bl	11760 <ConfigStore::Update(configstore::Store, void const*, unsigned int)>
   34ed4:	e1a00000 	nop			; (mov r0, r0)
   34ed8:	e24bd004 	sub	sp, fp, #4
   34edc:	e8bd8800 	pop	{fp, pc}

00034ee0 <StoreSparkFunDmx::Copy(TSparkFunDmxParams*)>:
   34ee0:	e92d4800 	push	{fp, lr}
   34ee4:	e28db004 	add	fp, sp, #4
   34ee8:	e24dd010 	sub	sp, sp, #16
   34eec:	e50b0008 	str	r0, [fp, #-8]
   34ef0:	e50b100c 	str	r1, [fp, #-12]
   34ef4:	ebff722e 	bl	117b4 <ConfigStore::Get()>
   34ef8:	e3a03001 	mov	r3, #1
   34efc:	e58d3004 	str	r3, [sp, #4]
   34f00:	e3a03000 	mov	r3, #0
   34f04:	e58d3000 	str	r3, [sp]
   34f08:	e3a03008 	mov	r3, #8
   34f0c:	e51b200c 	ldr	r2, [fp, #-12]
   34f10:	e3a01012 	mov	r1, #18
   34f14:	ebfff8e2 	bl	332a4 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
   34f18:	e1a00000 	nop			; (mov r0, r0)
   34f1c:	e24bd004 	sub	sp, fp, #4
   34f20:	e8bd8800 	pop	{fp, pc}

00034f24 <StoreSparkFunDmx::Update(unsigned int, TSparkFunDmxParams const*)>:
   34f24:	e92d4800 	push	{fp, lr}
   34f28:	e28db004 	add	fp, sp, #4
   34f2c:	e24dd020 	sub	sp, sp, #32
   34f30:	e50b0008 	str	r0, [fp, #-8]
   34f34:	e50b100c 	str	r1, [fp, #-12]
   34f38:	e50b2010 	str	r2, [fp, #-16]
   34f3c:	ebff721c 	bl	117b4 <ConfigStore::Get()>
   34f40:	e51b300c 	ldr	r3, [fp, #-12]
   34f44:	e2833002 	add	r3, r3, #2
   34f48:	e1a02183 	lsl	r2, r3, #3
   34f4c:	e3a03000 	mov	r3, #0
   34f50:	e58d3008 	str	r3, [sp, #8]
   34f54:	e3a03000 	mov	r3, #0
   34f58:	e58d3004 	str	r3, [sp, #4]
   34f5c:	e3a03008 	mov	r3, #8
   34f60:	e58d3000 	str	r3, [sp]
   34f64:	e51b3010 	ldr	r3, [fp, #-16]
   34f68:	e3a01012 	mov	r1, #18
   34f6c:	ebfff85f 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   34f70:	e1a00000 	nop			; (mov r0, r0)
   34f74:	e24bd004 	sub	sp, fp, #4
   34f78:	e8bd8800 	pop	{fp, pc}

00034f7c <StoreSparkFunDmx::Copy(unsigned int, TSparkFunDmxParams*)>:
   34f7c:	e92d4800 	push	{fp, lr}
   34f80:	e28db004 	add	fp, sp, #4
   34f84:	e24dd018 	sub	sp, sp, #24
   34f88:	e50b0008 	str	r0, [fp, #-8]
   34f8c:	e50b100c 	str	r1, [fp, #-12]
   34f90:	e50b2010 	str	r2, [fp, #-16]
   34f94:	ebff7206 	bl	117b4 <ConfigStore::Get()>
   34f98:	e51b300c 	ldr	r3, [fp, #-12]
   34f9c:	e2833002 	add	r3, r3, #2
   34fa0:	e1a03183 	lsl	r3, r3, #3
   34fa4:	e3a02001 	mov	r2, #1
   34fa8:	e58d2004 	str	r2, [sp, #4]
   34fac:	e58d3000 	str	r3, [sp]
   34fb0:	e3a03008 	mov	r3, #8
   34fb4:	e51b2010 	ldr	r2, [fp, #-16]
   34fb8:	e3a01012 	mov	r1, #18
   34fbc:	ebfff8b8 	bl	332a4 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
   34fc0:	e1a00000 	nop			; (mov r0, r0)
   34fc4:	e24bd004 	sub	sp, fp, #4
   34fc8:	e8bd8800 	pop	{fp, pc}

00034fcc <StoreSparkFunDmx::~StoreSparkFunDmx()>:
   34fcc:	e92d4800 	push	{fp, lr}
   34fd0:	e28db004 	add	fp, sp, #4
   34fd4:	e24dd008 	sub	sp, sp, #8
   34fd8:	e50b0008 	str	r0, [fp, #-8]
   34fdc:	e59f2020 	ldr	r2, [pc, #32]	; 35004 <StoreSparkFunDmx::~StoreSparkFunDmx()+0x38>
   34fe0:	e51b3008 	ldr	r3, [fp, #-8]
   34fe4:	e5832000 	str	r2, [r3]
   34fe8:	e51b3008 	ldr	r3, [fp, #-8]
   34fec:	e1a00003 	mov	r0, r3
   34ff0:	ebffff55 	bl	34d4c <SparkFunDmxParamsStore::~SparkFunDmxParamsStore()>
   34ff4:	e51b3008 	ldr	r3, [fp, #-8]
   34ff8:	e1a00003 	mov	r0, r3
   34ffc:	e24bd004 	sub	sp, fp, #4
   35000:	e8bd8800 	pop	{fp, pc}
   35004:	00048d18 	.word	0x00048d18

00035008 <StoreSparkFunDmx::~StoreSparkFunDmx()>:
   35008:	e92d4800 	push	{fp, lr}
   3500c:	e28db004 	add	fp, sp, #4
   35010:	e24dd008 	sub	sp, sp, #8
   35014:	e50b0008 	str	r0, [fp, #-8]
   35018:	e51b0008 	ldr	r0, [fp, #-8]
   3501c:	ebffffea 	bl	34fcc <StoreSparkFunDmx::~StoreSparkFunDmx()>
   35020:	e51b0008 	ldr	r0, [fp, #-8]
   35024:	ebff70b7 	bl	11308 <operator delete(void*)@plt>
   35028:	e51b3008 	ldr	r3, [fp, #-8]
   3502c:	e1a00003 	mov	r0, r3
   35030:	e24bd004 	sub	sp, fp, #4
   35034:	e8bd8800 	pop	{fp, pc}

00035038 <ModeParamsStore::~ModeParamsStore()>:
   35038:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3503c:	e28db000 	add	fp, sp, #0
   35040:	e24dd00c 	sub	sp, sp, #12
   35044:	e50b0008 	str	r0, [fp, #-8]
   35048:	e59f2018 	ldr	r2, [pc, #24]	; 35068 <ModeParamsStore::~ModeParamsStore()+0x30>
   3504c:	e51b3008 	ldr	r3, [fp, #-8]
   35050:	e5832000 	str	r2, [r3]
   35054:	e51b3008 	ldr	r3, [fp, #-8]
   35058:	e1a00003 	mov	r0, r3
   3505c:	e28bd000 	add	sp, fp, #0
   35060:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   35064:	e12fff1e 	bx	lr
   35068:	00048e20 	.word	0x00048e20

0003506c <ModeParamsStore::~ModeParamsStore()>:
   3506c:	e92d4800 	push	{fp, lr}
   35070:	e28db004 	add	fp, sp, #4
   35074:	e24dd008 	sub	sp, sp, #8
   35078:	e50b0008 	str	r0, [fp, #-8]
   3507c:	e51b0008 	ldr	r0, [fp, #-8]
   35080:	ebffffec 	bl	35038 <ModeParamsStore::~ModeParamsStore()>
   35084:	e51b0008 	ldr	r0, [fp, #-8]
   35088:	ebff709e 	bl	11308 <operator delete(void*)@plt>
   3508c:	e51b3008 	ldr	r3, [fp, #-8]
   35090:	e1a00003 	mov	r0, r3
   35094:	e24bd004 	sub	sp, fp, #4
   35098:	e8bd8800 	pop	{fp, pc}

0003509c <MotorParamsStore::~MotorParamsStore()>:
   3509c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   350a0:	e28db000 	add	fp, sp, #0
   350a4:	e24dd00c 	sub	sp, sp, #12
   350a8:	e50b0008 	str	r0, [fp, #-8]
   350ac:	e59f2018 	ldr	r2, [pc, #24]	; 350cc <MotorParamsStore::~MotorParamsStore()+0x30>
   350b0:	e51b3008 	ldr	r3, [fp, #-8]
   350b4:	e5832000 	str	r2, [r3]
   350b8:	e51b3008 	ldr	r3, [fp, #-8]
   350bc:	e1a00003 	mov	r0, r3
   350c0:	e28bd000 	add	sp, fp, #0
   350c4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   350c8:	e12fff1e 	bx	lr
   350cc:	00048e08 	.word	0x00048e08

000350d0 <MotorParamsStore::~MotorParamsStore()>:
   350d0:	e92d4800 	push	{fp, lr}
   350d4:	e28db004 	add	fp, sp, #4
   350d8:	e24dd008 	sub	sp, sp, #8
   350dc:	e50b0008 	str	r0, [fp, #-8]
   350e0:	e51b0008 	ldr	r0, [fp, #-8]
   350e4:	ebffffec 	bl	3509c <MotorParamsStore::~MotorParamsStore()>
   350e8:	e51b0008 	ldr	r0, [fp, #-8]
   350ec:	ebff7085 	bl	11308 <operator delete(void*)@plt>
   350f0:	e51b3008 	ldr	r3, [fp, #-8]
   350f4:	e1a00003 	mov	r0, r3
   350f8:	e24bd004 	sub	sp, fp, #4
   350fc:	e8bd8800 	pop	{fp, pc}

00035100 <L6470ParamsStore::~L6470ParamsStore()>:
   35100:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   35104:	e28db000 	add	fp, sp, #0
   35108:	e24dd00c 	sub	sp, sp, #12
   3510c:	e50b0008 	str	r0, [fp, #-8]
   35110:	e59f2018 	ldr	r2, [pc, #24]	; 35130 <L6470ParamsStore::~L6470ParamsStore()+0x30>
   35114:	e51b3008 	ldr	r3, [fp, #-8]
   35118:	e5832000 	str	r2, [r3]
   3511c:	e51b3008 	ldr	r3, [fp, #-8]
   35120:	e1a00003 	mov	r0, r3
   35124:	e28bd000 	add	sp, fp, #0
   35128:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3512c:	e12fff1e 	bx	lr
   35130:	00048df0 	.word	0x00048df0

00035134 <L6470ParamsStore::~L6470ParamsStore()>:
   35134:	e92d4800 	push	{fp, lr}
   35138:	e28db004 	add	fp, sp, #4
   3513c:	e24dd008 	sub	sp, sp, #8
   35140:	e50b0008 	str	r0, [fp, #-8]
   35144:	e51b0008 	ldr	r0, [fp, #-8]
   35148:	ebffffec 	bl	35100 <L6470ParamsStore::~L6470ParamsStore()>
   3514c:	e51b0008 	ldr	r0, [fp, #-8]
   35150:	ebff706c 	bl	11308 <operator delete(void*)@plt>
   35154:	e51b3008 	ldr	r3, [fp, #-8]
   35158:	e1a00003 	mov	r0, r3
   3515c:	e24bd004 	sub	sp, fp, #4
   35160:	e8bd8800 	pop	{fp, pc}

00035164 <ModeStore::~ModeStore()>:
   35164:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   35168:	e28db000 	add	fp, sp, #0
   3516c:	e24dd00c 	sub	sp, sp, #12
   35170:	e50b0008 	str	r0, [fp, #-8]
   35174:	e59f2018 	ldr	r2, [pc, #24]	; 35194 <ModeStore::~ModeStore()+0x30>
   35178:	e51b3008 	ldr	r3, [fp, #-8]
   3517c:	e5832000 	str	r2, [r3]
   35180:	e51b3008 	ldr	r3, [fp, #-8]
   35184:	e1a00003 	mov	r0, r3
   35188:	e28bd000 	add	sp, fp, #0
   3518c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   35190:	e12fff1e 	bx	lr
   35194:	00048ddc 	.word	0x00048ddc

00035198 <ModeStore::~ModeStore()>:
   35198:	e92d4800 	push	{fp, lr}
   3519c:	e28db004 	add	fp, sp, #4
   351a0:	e24dd008 	sub	sp, sp, #8
   351a4:	e50b0008 	str	r0, [fp, #-8]
   351a8:	e51b0008 	ldr	r0, [fp, #-8]
   351ac:	ebffffec 	bl	35164 <ModeStore::~ModeStore()>
   351b0:	e51b0008 	ldr	r0, [fp, #-8]
   351b4:	ebff7053 	bl	11308 <operator delete(void*)@plt>
   351b8:	e51b3008 	ldr	r3, [fp, #-8]
   351bc:	e1a00003 	mov	r0, r3
   351c0:	e24bd004 	sub	sp, fp, #4
   351c4:	e8bd8800 	pop	{fp, pc}

000351c8 <ModeParamsStore::ModeParamsStore()>:
   351c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   351cc:	e28db000 	add	fp, sp, #0
   351d0:	e24dd00c 	sub	sp, sp, #12
   351d4:	e50b0008 	str	r0, [fp, #-8]
   351d8:	e59f2018 	ldr	r2, [pc, #24]	; 351f8 <ModeParamsStore::ModeParamsStore()+0x30>
   351dc:	e51b3008 	ldr	r3, [fp, #-8]
   351e0:	e5832000 	str	r2, [r3]
   351e4:	e51b3008 	ldr	r3, [fp, #-8]
   351e8:	e1a00003 	mov	r0, r3
   351ec:	e28bd000 	add	sp, fp, #0
   351f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   351f4:	e12fff1e 	bx	lr
   351f8:	00048e20 	.word	0x00048e20

000351fc <MotorParamsStore::MotorParamsStore()>:
   351fc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   35200:	e28db000 	add	fp, sp, #0
   35204:	e24dd00c 	sub	sp, sp, #12
   35208:	e50b0008 	str	r0, [fp, #-8]
   3520c:	e59f2018 	ldr	r2, [pc, #24]	; 3522c <MotorParamsStore::MotorParamsStore()+0x30>
   35210:	e51b3008 	ldr	r3, [fp, #-8]
   35214:	e5832000 	str	r2, [r3]
   35218:	e51b3008 	ldr	r3, [fp, #-8]
   3521c:	e1a00003 	mov	r0, r3
   35220:	e28bd000 	add	sp, fp, #0
   35224:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   35228:	e12fff1e 	bx	lr
   3522c:	00048e08 	.word	0x00048e08

00035230 <L6470ParamsStore::L6470ParamsStore()>:
   35230:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   35234:	e28db000 	add	fp, sp, #0
   35238:	e24dd00c 	sub	sp, sp, #12
   3523c:	e50b0008 	str	r0, [fp, #-8]
   35240:	e59f2018 	ldr	r2, [pc, #24]	; 35260 <L6470ParamsStore::L6470ParamsStore()+0x30>
   35244:	e51b3008 	ldr	r3, [fp, #-8]
   35248:	e5832000 	str	r2, [r3]
   3524c:	e51b3008 	ldr	r3, [fp, #-8]
   35250:	e1a00003 	mov	r0, r3
   35254:	e28bd000 	add	sp, fp, #0
   35258:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3525c:	e12fff1e 	bx	lr
   35260:	00048df0 	.word	0x00048df0

00035264 <ModeStore::ModeStore()>:
   35264:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   35268:	e28db000 	add	fp, sp, #0
   3526c:	e24dd00c 	sub	sp, sp, #12
   35270:	e50b0008 	str	r0, [fp, #-8]
   35274:	e59f2018 	ldr	r2, [pc, #24]	; 35294 <ModeStore::ModeStore()+0x30>
   35278:	e51b3008 	ldr	r3, [fp, #-8]
   3527c:	e5832000 	str	r2, [r3]
   35280:	e51b3008 	ldr	r3, [fp, #-8]
   35284:	e1a00003 	mov	r0, r3
   35288:	e28bd000 	add	sp, fp, #0
   3528c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   35290:	e12fff1e 	bx	lr
   35294:	00048ddc 	.word	0x00048ddc

00035298 <StoreMotors::StoreMotors()>:
   35298:	e92d4800 	push	{fp, lr}
   3529c:	e28db004 	add	fp, sp, #4
   352a0:	e24dd068 	sub	sp, sp, #104	; 0x68
   352a4:	e50b0068 	str	r0, [fp, #-104]	; 0xffffff98
   352a8:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   352ac:	e1a00003 	mov	r0, r3
   352b0:	ebffffc4 	bl	351c8 <ModeParamsStore::ModeParamsStore()>
   352b4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   352b8:	e2833004 	add	r3, r3, #4
   352bc:	e1a00003 	mov	r0, r3
   352c0:	ebffffcd 	bl	351fc <MotorParamsStore::MotorParamsStore()>
   352c4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   352c8:	e2833008 	add	r3, r3, #8
   352cc:	e1a00003 	mov	r0, r3
   352d0:	ebffffd6 	bl	35230 <L6470ParamsStore::L6470ParamsStore()>
   352d4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   352d8:	e283300c 	add	r3, r3, #12
   352dc:	e1a00003 	mov	r0, r3
   352e0:	ebffffdf 	bl	35264 <ModeStore::ModeStore()>
   352e4:	e59f2170 	ldr	r2, [pc, #368]	; 3545c <StoreMotors::StoreMotors()+0x1c4>
   352e8:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   352ec:	e5832000 	str	r2, [r3]
   352f0:	e59f2168 	ldr	r2, [pc, #360]	; 35460 <StoreMotors::StoreMotors()+0x1c8>
   352f4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   352f8:	e5832004 	str	r2, [r3, #4]
   352fc:	e59f2160 	ldr	r2, [pc, #352]	; 35464 <StoreMotors::StoreMotors()+0x1cc>
   35300:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   35304:	e5832008 	str	r2, [r3, #8]
   35308:	e59f2158 	ldr	r2, [pc, #344]	; 35468 <StoreMotors::StoreMotors()+0x1d0>
   3530c:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   35310:	e583200c 	str	r2, [r3, #12]
   35314:	e59f2150 	ldr	r2, [pc, #336]	; 3546c <StoreMotors::StoreMotors()+0x1d4>
   35318:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   3531c:	e5823000 	str	r3, [r2]
   35320:	e3a03000 	mov	r3, #0
   35324:	e50b3008 	str	r3, [fp, #-8]
   35328:	e51b3008 	ldr	r3, [fp, #-8]
   3532c:	e3530007 	cmp	r3, #7
   35330:	8a000045 	bhi	3544c <StoreMotors::StoreMotors()+0x1b4>
   35334:	e24b3064 	sub	r3, fp, #100	; 0x64
   35338:	e3a02028 	mov	r2, #40	; 0x28
   3533c:	e3a010ff 	mov	r1, #255	; 0xff
   35340:	e1a00003 	mov	r0, r3
   35344:	ebff6fc8 	bl	1126c <memset@plt>
   35348:	e3a03000 	mov	r3, #0
   3534c:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
   35350:	e24b3064 	sub	r3, fp, #100	; 0x64
   35354:	e1a02003 	mov	r2, r3
   35358:	e51b1008 	ldr	r1, [fp, #-8]
   3535c:	e51b0068 	ldr	r0, [fp, #-104]	; 0xffffff98
   35360:	eb000057 	bl	354c4 <StoreMotors::Copy(unsigned int, TModeParams*)>
   35364:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
   35368:	e3730001 	cmn	r3, #1
   3536c:	1a000006 	bne	3538c <StoreMotors::StoreMotors()+0xf4>
   35370:	e3a03000 	mov	r3, #0
   35374:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
   35378:	e24b3064 	sub	r3, fp, #100	; 0x64
   3537c:	e1a02003 	mov	r2, r3
   35380:	e51b1008 	ldr	r1, [fp, #-8]
   35384:	e51b0068 	ldr	r0, [fp, #-104]	; 0xffffff98
   35388:	eb000038 	bl	35470 <StoreMotors::Update(unsigned int, TModeParams const*)>
   3538c:	e24b3020 	sub	r3, fp, #32
   35390:	e3a02018 	mov	r2, #24
   35394:	e3a010ff 	mov	r1, #255	; 0xff
   35398:	e1a00003 	mov	r0, r3
   3539c:	ebff6fb2 	bl	1126c <memset@plt>
   353a0:	e3a03000 	mov	r3, #0
   353a4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   353a8:	e24b3020 	sub	r3, fp, #32
   353ac:	e1a02003 	mov	r2, r3
   353b0:	e51b1008 	ldr	r1, [fp, #-8]
   353b4:	e51b0068 	ldr	r0, [fp, #-104]	; 0xffffff98
   353b8:	eb00006c 	bl	35570 <StoreMotors::Copy(unsigned int, TMotorParams*)>
   353bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   353c0:	e3730001 	cmn	r3, #1
   353c4:	1a000006 	bne	353e4 <StoreMotors::StoreMotors()+0x14c>
   353c8:	e3a03000 	mov	r3, #0
   353cc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   353d0:	e24b3020 	sub	r3, fp, #32
   353d4:	e1a02003 	mov	r2, r3
   353d8:	e51b1008 	ldr	r1, [fp, #-8]
   353dc:	e51b0068 	ldr	r0, [fp, #-104]	; 0xffffff98
   353e0:	eb00004a 	bl	35510 <StoreMotors::Update(unsigned int, TMotorParams const*)>
   353e4:	e24b303c 	sub	r3, fp, #60	; 0x3c
   353e8:	e3a02019 	mov	r2, #25
   353ec:	e3a010ff 	mov	r1, #255	; 0xff
   353f0:	e1a00003 	mov	r0, r3
   353f4:	ebff6f9c 	bl	1126c <memset@plt>
   353f8:	e3a03000 	mov	r3, #0
   353fc:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
   35400:	e24b303c 	sub	r3, fp, #60	; 0x3c
   35404:	e1a02003 	mov	r2, r3
   35408:	e51b1008 	ldr	r1, [fp, #-8]
   3540c:	e51b0068 	ldr	r0, [fp, #-104]	; 0xffffff98
   35410:	eb000084 	bl	35628 <StoreMotors::Copy(unsigned int, TL6470Params*)>
   35414:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   35418:	e3730001 	cmn	r3, #1
   3541c:	1a000006 	bne	3543c <StoreMotors::StoreMotors()+0x1a4>
   35420:	e3a03000 	mov	r3, #0
   35424:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
   35428:	e24b303c 	sub	r3, fp, #60	; 0x3c
   3542c:	e1a02003 	mov	r2, r3
   35430:	e51b1008 	ldr	r1, [fp, #-8]
   35434:	e51b0068 	ldr	r0, [fp, #-104]	; 0xffffff98
   35438:	eb000062 	bl	355c8 <StoreMotors::Update(unsigned int, TL6470Params const*)>
   3543c:	e51b3008 	ldr	r3, [fp, #-8]
   35440:	e2833001 	add	r3, r3, #1
   35444:	e50b3008 	str	r3, [fp, #-8]
   35448:	eaffffb6 	b	35328 <StoreMotors::StoreMotors()+0x90>
   3544c:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   35450:	e1a00003 	mov	r0, r3
   35454:	e24bd004 	sub	sp, fp, #4
   35458:	e8bd8800 	pop	{fp, pc}
   3545c:	00048d6c 	.word	0x00048d6c
   35460:	00048d98 	.word	0x00048d98
   35464:	00048db0 	.word	0x00048db0
   35468:	00048dc8 	.word	0x00048dc8
   3546c:	0005ec64 	.word	0x0005ec64

00035470 <StoreMotors::Update(unsigned int, TModeParams const*)>:
   35470:	e92d4800 	push	{fp, lr}
   35474:	e28db004 	add	fp, sp, #4
   35478:	e24dd020 	sub	sp, sp, #32
   3547c:	e50b0008 	str	r0, [fp, #-8]
   35480:	e50b100c 	str	r1, [fp, #-12]
   35484:	e50b2010 	str	r2, [fp, #-16]
   35488:	ebff70c9 	bl	117b4 <ConfigStore::Get()>
   3548c:	e51b300c 	ldr	r3, [fp, #-12]
   35490:	e1a02383 	lsl	r2, r3, #7
   35494:	e3a03000 	mov	r3, #0
   35498:	e58d3008 	str	r3, [sp, #8]
   3549c:	e3a03000 	mov	r3, #0
   354a0:	e58d3004 	str	r3, [sp, #4]
   354a4:	e3a03028 	mov	r3, #40	; 0x28
   354a8:	e58d3000 	str	r3, [sp]
   354ac:	e51b3010 	ldr	r3, [fp, #-16]
   354b0:	e3a01014 	mov	r1, #20
   354b4:	ebfff70d 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   354b8:	e1a00000 	nop			; (mov r0, r0)
   354bc:	e24bd004 	sub	sp, fp, #4
   354c0:	e8bd8800 	pop	{fp, pc}

000354c4 <StoreMotors::Copy(unsigned int, TModeParams*)>:
   354c4:	e92d4800 	push	{fp, lr}
   354c8:	e28db004 	add	fp, sp, #4
   354cc:	e24dd018 	sub	sp, sp, #24
   354d0:	e50b0008 	str	r0, [fp, #-8]
   354d4:	e50b100c 	str	r1, [fp, #-12]
   354d8:	e50b2010 	str	r2, [fp, #-16]
   354dc:	ebff70b4 	bl	117b4 <ConfigStore::Get()>
   354e0:	e51b300c 	ldr	r3, [fp, #-12]
   354e4:	e1a03383 	lsl	r3, r3, #7
   354e8:	e3a02001 	mov	r2, #1
   354ec:	e58d2004 	str	r2, [sp, #4]
   354f0:	e58d3000 	str	r3, [sp]
   354f4:	e3a03028 	mov	r3, #40	; 0x28
   354f8:	e51b2010 	ldr	r2, [fp, #-16]
   354fc:	e3a01014 	mov	r1, #20
   35500:	ebfff767 	bl	332a4 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
   35504:	e1a00000 	nop			; (mov r0, r0)
   35508:	e24bd004 	sub	sp, fp, #4
   3550c:	e8bd8800 	pop	{fp, pc}

00035510 <StoreMotors::Update(unsigned int, TMotorParams const*)>:
   35510:	e92d4800 	push	{fp, lr}
   35514:	e28db004 	add	fp, sp, #4
   35518:	e24dd020 	sub	sp, sp, #32
   3551c:	e50b0008 	str	r0, [fp, #-8]
   35520:	e50b100c 	str	r1, [fp, #-12]
   35524:	e50b2010 	str	r2, [fp, #-16]
   35528:	ebff70a1 	bl	117b4 <ConfigStore::Get()>
   3552c:	e51b300c 	ldr	r3, [fp, #-12]
   35530:	e1a03383 	lsl	r3, r3, #7
   35534:	e2832040 	add	r2, r3, #64	; 0x40
   35538:	e3a03000 	mov	r3, #0
   3553c:	e58d3008 	str	r3, [sp, #8]
   35540:	e3a03000 	mov	r3, #0
   35544:	e58d3004 	str	r3, [sp, #4]
   35548:	e3a03018 	mov	r3, #24
   3554c:	e58d3000 	str	r3, [sp]
   35550:	e51b3010 	ldr	r3, [fp, #-16]
   35554:	e3a01014 	mov	r1, #20
   35558:	ebfff6e4 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   3555c:	e1a00000 	nop			; (mov r0, r0)
   35560:	e24bd004 	sub	sp, fp, #4
   35564:	e8bd8800 	pop	{fp, pc}

00035568 <non-virtual thunk to StoreMotors::Update(unsigned int, TMotorParams const*)>:
   35568:	e2400004 	sub	r0, r0, #4
   3556c:	eaffffe7 	b	35510 <StoreMotors::Update(unsigned int, TMotorParams const*)>

00035570 <StoreMotors::Copy(unsigned int, TMotorParams*)>:
   35570:	e92d4800 	push	{fp, lr}
   35574:	e28db004 	add	fp, sp, #4
   35578:	e24dd018 	sub	sp, sp, #24
   3557c:	e50b0008 	str	r0, [fp, #-8]
   35580:	e50b100c 	str	r1, [fp, #-12]
   35584:	e50b2010 	str	r2, [fp, #-16]
   35588:	ebff7089 	bl	117b4 <ConfigStore::Get()>
   3558c:	e51b300c 	ldr	r3, [fp, #-12]
   35590:	e1a03383 	lsl	r3, r3, #7
   35594:	e2833040 	add	r3, r3, #64	; 0x40
   35598:	e3a02001 	mov	r2, #1
   3559c:	e58d2004 	str	r2, [sp, #4]
   355a0:	e58d3000 	str	r3, [sp]
   355a4:	e3a03018 	mov	r3, #24
   355a8:	e51b2010 	ldr	r2, [fp, #-16]
   355ac:	e3a01014 	mov	r1, #20
   355b0:	ebfff73b 	bl	332a4 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
   355b4:	e1a00000 	nop			; (mov r0, r0)
   355b8:	e24bd004 	sub	sp, fp, #4
   355bc:	e8bd8800 	pop	{fp, pc}

000355c0 <non-virtual thunk to StoreMotors::Copy(unsigned int, TMotorParams*)>:
   355c0:	e2400004 	sub	r0, r0, #4
   355c4:	eaffffe9 	b	35570 <StoreMotors::Copy(unsigned int, TMotorParams*)>

000355c8 <StoreMotors::Update(unsigned int, TL6470Params const*)>:
   355c8:	e92d4800 	push	{fp, lr}
   355cc:	e28db004 	add	fp, sp, #4
   355d0:	e24dd020 	sub	sp, sp, #32
   355d4:	e50b0008 	str	r0, [fp, #-8]
   355d8:	e50b100c 	str	r1, [fp, #-12]
   355dc:	e50b2010 	str	r2, [fp, #-16]
   355e0:	ebff7073 	bl	117b4 <ConfigStore::Get()>
   355e4:	e51b300c 	ldr	r3, [fp, #-12]
   355e8:	e1a03383 	lsl	r3, r3, #7
   355ec:	e2832060 	add	r2, r3, #96	; 0x60
   355f0:	e3a03000 	mov	r3, #0
   355f4:	e58d3008 	str	r3, [sp, #8]
   355f8:	e3a03000 	mov	r3, #0
   355fc:	e58d3004 	str	r3, [sp, #4]
   35600:	e3a03019 	mov	r3, #25
   35604:	e58d3000 	str	r3, [sp]
   35608:	e51b3010 	ldr	r3, [fp, #-16]
   3560c:	e3a01014 	mov	r1, #20
   35610:	ebfff6b6 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   35614:	e1a00000 	nop			; (mov r0, r0)
   35618:	e24bd004 	sub	sp, fp, #4
   3561c:	e8bd8800 	pop	{fp, pc}

00035620 <non-virtual thunk to StoreMotors::Update(unsigned int, TL6470Params const*)>:
   35620:	e2400008 	sub	r0, r0, #8
   35624:	eaffffe7 	b	355c8 <StoreMotors::Update(unsigned int, TL6470Params const*)>

00035628 <StoreMotors::Copy(unsigned int, TL6470Params*)>:
   35628:	e92d4800 	push	{fp, lr}
   3562c:	e28db004 	add	fp, sp, #4
   35630:	e24dd018 	sub	sp, sp, #24
   35634:	e50b0008 	str	r0, [fp, #-8]
   35638:	e50b100c 	str	r1, [fp, #-12]
   3563c:	e50b2010 	str	r2, [fp, #-16]
   35640:	ebff705b 	bl	117b4 <ConfigStore::Get()>
   35644:	e51b300c 	ldr	r3, [fp, #-12]
   35648:	e1a03383 	lsl	r3, r3, #7
   3564c:	e2833060 	add	r3, r3, #96	; 0x60
   35650:	e3a02001 	mov	r2, #1
   35654:	e58d2004 	str	r2, [sp, #4]
   35658:	e58d3000 	str	r3, [sp]
   3565c:	e3a03019 	mov	r3, #25
   35660:	e51b2010 	ldr	r2, [fp, #-16]
   35664:	e3a01014 	mov	r1, #20
   35668:	ebfff70d 	bl	332a4 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
   3566c:	e1a00000 	nop			; (mov r0, r0)
   35670:	e24bd004 	sub	sp, fp, #4
   35674:	e8bd8800 	pop	{fp, pc}

00035678 <non-virtual thunk to StoreMotors::Copy(unsigned int, TL6470Params*)>:
   35678:	e2400008 	sub	r0, r0, #8
   3567c:	eaffffe9 	b	35628 <StoreMotors::Copy(unsigned int, TL6470Params*)>

00035680 <StoreMotors::SaveDmxStartAddress(unsigned int, unsigned short)>:
   35680:	e92d4800 	push	{fp, lr}
   35684:	e28db004 	add	fp, sp, #4
   35688:	e24dd028 	sub	sp, sp, #40	; 0x28
   3568c:	e50b0010 	str	r0, [fp, #-16]
   35690:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   35694:	e1a03002 	mov	r3, r2
   35698:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
   3569c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   356a0:	e1a03383 	lsl	r3, r3, #7
   356a4:	e50b3008 	str	r3, [fp, #-8]
   356a8:	ebff7041 	bl	117b4 <ConfigStore::Get()>
   356ac:	e51b3008 	ldr	r3, [fp, #-8]
   356b0:	e2832005 	add	r2, r3, #5
   356b4:	e24b1016 	sub	r1, fp, #22
   356b8:	e51b3008 	ldr	r3, [fp, #-8]
   356bc:	e58d3008 	str	r3, [sp, #8]
   356c0:	e3a03002 	mov	r3, #2
   356c4:	e58d3004 	str	r3, [sp, #4]
   356c8:	e3a03002 	mov	r3, #2
   356cc:	e58d3000 	str	r3, [sp]
   356d0:	e1a03001 	mov	r3, r1
   356d4:	e3a01014 	mov	r1, #20
   356d8:	ebfff684 	bl	330f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
   356dc:	e1a00000 	nop			; (mov r0, r0)
   356e0:	e24bd004 	sub	sp, fp, #4
   356e4:	e8bd8800 	pop	{fp, pc}

000356e8 <non-virtual thunk to StoreMotors::SaveDmxStartAddress(unsigned int, unsigned short)>:
   356e8:	e240000c 	sub	r0, r0, #12
   356ec:	eaffffe3 	b	35680 <StoreMotors::SaveDmxStartAddress(unsigned int, unsigned short)>

000356f0 <StoreMotors::~StoreMotors()>:
   356f0:	e92d4800 	push	{fp, lr}
   356f4:	e28db004 	add	fp, sp, #4
   356f8:	e24dd008 	sub	sp, sp, #8
   356fc:	e50b0008 	str	r0, [fp, #-8]
   35700:	e59f2074 	ldr	r2, [pc, #116]	; 3577c <StoreMotors::~StoreMotors()+0x8c>
   35704:	e51b3008 	ldr	r3, [fp, #-8]
   35708:	e5832000 	str	r2, [r3]
   3570c:	e59f206c 	ldr	r2, [pc, #108]	; 35780 <StoreMotors::~StoreMotors()+0x90>
   35710:	e51b3008 	ldr	r3, [fp, #-8]
   35714:	e5832004 	str	r2, [r3, #4]
   35718:	e59f2064 	ldr	r2, [pc, #100]	; 35784 <StoreMotors::~StoreMotors()+0x94>
   3571c:	e51b3008 	ldr	r3, [fp, #-8]
   35720:	e5832008 	str	r2, [r3, #8]
   35724:	e59f205c 	ldr	r2, [pc, #92]	; 35788 <StoreMotors::~StoreMotors()+0x98>
   35728:	e51b3008 	ldr	r3, [fp, #-8]
   3572c:	e583200c 	str	r2, [r3, #12]
   35730:	e51b3008 	ldr	r3, [fp, #-8]
   35734:	e283300c 	add	r3, r3, #12
   35738:	e1a00003 	mov	r0, r3
   3573c:	ebfffe88 	bl	35164 <ModeStore::~ModeStore()>
   35740:	e51b3008 	ldr	r3, [fp, #-8]
   35744:	e2833008 	add	r3, r3, #8
   35748:	e1a00003 	mov	r0, r3
   3574c:	ebfffe6b 	bl	35100 <L6470ParamsStore::~L6470ParamsStore()>
   35750:	e51b3008 	ldr	r3, [fp, #-8]
   35754:	e2833004 	add	r3, r3, #4
   35758:	e1a00003 	mov	r0, r3
   3575c:	ebfffe4e 	bl	3509c <MotorParamsStore::~MotorParamsStore()>
   35760:	e51b3008 	ldr	r3, [fp, #-8]
   35764:	e1a00003 	mov	r0, r3
   35768:	ebfffe32 	bl	35038 <ModeParamsStore::~ModeParamsStore()>
   3576c:	e51b3008 	ldr	r3, [fp, #-8]
   35770:	e1a00003 	mov	r0, r3
   35774:	e24bd004 	sub	sp, fp, #4
   35778:	e8bd8800 	pop	{fp, pc}
   3577c:	00048d6c 	.word	0x00048d6c
   35780:	00048d98 	.word	0x00048d98
   35784:	00048db0 	.word	0x00048db0
   35788:	00048dc8 	.word	0x00048dc8

0003578c <non-virtual thunk to StoreMotors::~StoreMotors()>:
   3578c:	e2400004 	sub	r0, r0, #4
   35790:	eaffffd6 	b	356f0 <StoreMotors::~StoreMotors()>

00035794 <non-virtual thunk to StoreMotors::~StoreMotors()>:
   35794:	e2400008 	sub	r0, r0, #8
   35798:	eaffffd4 	b	356f0 <StoreMotors::~StoreMotors()>

0003579c <non-virtual thunk to StoreMotors::~StoreMotors()>:
   3579c:	e240000c 	sub	r0, r0, #12
   357a0:	eaffffd2 	b	356f0 <StoreMotors::~StoreMotors()>

000357a4 <StoreMotors::~StoreMotors()>:
   357a4:	e92d4800 	push	{fp, lr}
   357a8:	e28db004 	add	fp, sp, #4
   357ac:	e24dd008 	sub	sp, sp, #8
   357b0:	e50b0008 	str	r0, [fp, #-8]
   357b4:	e51b0008 	ldr	r0, [fp, #-8]
   357b8:	ebffffcc 	bl	356f0 <StoreMotors::~StoreMotors()>
   357bc:	e51b0008 	ldr	r0, [fp, #-8]
   357c0:	ebff6ed0 	bl	11308 <operator delete(void*)@plt>
   357c4:	e51b3008 	ldr	r3, [fp, #-8]
   357c8:	e1a00003 	mov	r0, r3
   357cc:	e24bd004 	sub	sp, fp, #4
   357d0:	e8bd8800 	pop	{fp, pc}

000357d4 <non-virtual thunk to StoreMotors::~StoreMotors()>:
   357d4:	e2400004 	sub	r0, r0, #4
   357d8:	eafffff1 	b	357a4 <StoreMotors::~StoreMotors()>

000357dc <non-virtual thunk to StoreMotors::~StoreMotors()>:
   357dc:	e2400008 	sub	r0, r0, #8
   357e0:	eaffffef 	b	357a4 <StoreMotors::~StoreMotors()>

000357e4 <non-virtual thunk to StoreMotors::~StoreMotors()>:
   357e4:	e240000c 	sub	r0, r0, #12
   357e8:	eaffffed 	b	357a4 <StoreMotors::~StoreMotors()>

000357ec <Network::SetZeroconf()>:
   357ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   357f0:	e28db000 	add	fp, sp, #0
   357f4:	e24dd00c 	sub	sp, sp, #12
   357f8:	e50b0008 	str	r0, [fp, #-8]
   357fc:	e3a03000 	mov	r3, #0
   35800:	e1a00003 	mov	r0, r3
   35804:	e28bd000 	add	sp, fp, #0
   35808:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3580c:	e12fff1e 	bx	lr

00035810 <Network::GetNetmaskCIDR() const>:
   35810:	e92d4800 	push	{fp, lr}
   35814:	e28db004 	add	fp, sp, #4
   35818:	e24dd008 	sub	sp, sp, #8
   3581c:	e50b0008 	str	r0, [fp, #-8]
   35820:	e51b3008 	ldr	r3, [fp, #-8]
   35824:	e5933018 	ldr	r3, [r3, #24]
   35828:	e1a00003 	mov	r0, r3
   3582c:	ebff6f0f 	bl	11470 <__popcountsi2@plt>
   35830:	e1a03000 	mov	r3, r0
   35834:	e1a00003 	mov	r0, r3
   35838:	e24bd004 	sub	sp, fp, #4
   3583c:	e8bd8800 	pop	{fp, pc}

00035840 <Network::IsZeroconfUsed() const>:
   35840:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   35844:	e28db000 	add	fp, sp, #0
   35848:	e24dd00c 	sub	sp, sp, #12
   3584c:	e50b0008 	str	r0, [fp, #-8]
   35850:	e51b3008 	ldr	r3, [fp, #-8]
   35854:	e5d33003 	ldrb	r3, [r3, #3]
   35858:	e1a00003 	mov	r0, r3
   3585c:	e28bd000 	add	sp, fp, #0
   35860:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   35864:	e12fff1e 	bx	lr

00035868 <Network::GetAddressingMode()>:
   35868:	e92d4800 	push	{fp, lr}
   3586c:	e28db004 	add	fp, sp, #4
   35870:	e24dd008 	sub	sp, sp, #8
   35874:	e50b0008 	str	r0, [fp, #-8]
   35878:	ebff8b9a 	bl	186e8 <Network::Get()>
   3587c:	e1a03000 	mov	r3, r0
   35880:	e1a00003 	mov	r0, r3
   35884:	ebffffed 	bl	35840 <Network::IsZeroconfUsed() const>
   35888:	e1a03000 	mov	r3, r0
   3588c:	e3530000 	cmp	r3, #0
   35890:	0a000001 	beq	3589c <Network::GetAddressingMode()+0x34>
   35894:	e3a0305a 	mov	r3, #90	; 0x5a
   35898:	ea000012 	b	358e8 <Network::GetAddressingMode()+0x80>
   3589c:	ebff8b91 	bl	186e8 <Network::Get()>
   358a0:	e1a03000 	mov	r3, r0
   358a4:	e1a00003 	mov	r0, r3
   358a8:	eb000011 	bl	358f4 <Network::IsDhcpKnown() const>
   358ac:	e1a03000 	mov	r3, r0
   358b0:	e3530000 	cmp	r3, #0
   358b4:	0a00000a 	beq	358e4 <Network::GetAddressingMode()+0x7c>
   358b8:	ebff8b8a 	bl	186e8 <Network::Get()>
   358bc:	e1a03000 	mov	r3, r0
   358c0:	e1a00003 	mov	r0, r3
   358c4:	ebffa5c6 	bl	1efe4 <Network::IsDhcpUsed() const>
   358c8:	e1a03000 	mov	r3, r0
   358cc:	e3530000 	cmp	r3, #0
   358d0:	0a000001 	beq	358dc <Network::GetAddressingMode()+0x74>
   358d4:	e3a03044 	mov	r3, #68	; 0x44
   358d8:	ea000002 	b	358e8 <Network::GetAddressingMode()+0x80>
   358dc:	e3a03053 	mov	r3, #83	; 0x53
   358e0:	ea000000 	b	358e8 <Network::GetAddressingMode()+0x80>
   358e4:	e3a03055 	mov	r3, #85	; 0x55
   358e8:	e1a00003 	mov	r0, r3
   358ec:	e24bd004 	sub	sp, fp, #4
   358f0:	e8bd8800 	pop	{fp, pc}

000358f4 <Network::IsDhcpKnown() const>:
   358f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   358f8:	e28db000 	add	fp, sp, #0
   358fc:	e24dd00c 	sub	sp, sp, #12
   35900:	e50b0008 	str	r0, [fp, #-8]
   35904:	e3a03001 	mov	r3, #1
   35908:	e1a00003 	mov	r0, r3
   3590c:	e28bd000 	add	sp, fp, #0
   35910:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   35914:	e12fff1e 	bx	lr

00035918 <Network::isQueuedMaskSet(unsigned int)>:
   35918:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3591c:	e28db000 	add	fp, sp, #0
   35920:	e24dd00c 	sub	sp, sp, #12
   35924:	e50b0008 	str	r0, [fp, #-8]
   35928:	e50b100c 	str	r1, [fp, #-12]
   3592c:	e51b3008 	ldr	r3, [fp, #-8]
   35930:	e59320b8 	ldr	r2, [r3, #184]	; 0xb8
   35934:	e51b300c 	ldr	r3, [fp, #-12]
   35938:	e0033002 	and	r3, r3, r2
   3593c:	e51b200c 	ldr	r2, [fp, #-12]
   35940:	e1520003 	cmp	r2, r3
   35944:	03a03001 	moveq	r3, #1
   35948:	13a03000 	movne	r3, #0
   3594c:	e6ef3073 	uxtb	r3, r3
   35950:	e1a00003 	mov	r0, r3
   35954:	e28bd000 	add	sp, fp, #0
   35958:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3595c:	e12fff1e 	bx	lr

00035960 <NetworkParams::GetNtpServer() const>:
   35960:	e92d4800 	push	{fp, lr}
   35964:	e28db004 	add	fp, sp, #4
   35968:	e24dd008 	sub	sp, sp, #8
   3596c:	e50b0008 	str	r0, [fp, #-8]
   35970:	e3a01040 	mov	r1, #64	; 0x40
   35974:	e51b0008 	ldr	r0, [fp, #-8]
   35978:	eb00000f 	bl	359bc <NetworkParams::isMaskSet(unsigned int) const>
   3597c:	e1a03000 	mov	r3, r0
   35980:	e2233001 	eor	r3, r3, #1
   35984:	e6ef3073 	uxtb	r3, r3
   35988:	e3530000 	cmp	r3, #0
   3598c:	0a000001 	beq	35998 <NetworkParams::GetNtpServer() const+0x38>
   35990:	e3a03000 	mov	r3, #0
   35994:	ea000005 	b	359b0 <NetworkParams::GetNtpServer() const+0x50>
   35998:	e51b3008 	ldr	r3, [fp, #-8]
   3599c:	e5932058 	ldr	r2, [r3, #88]	; 0x58
   359a0:	e1a02422 	lsr	r2, r2, #8
   359a4:	e5d3305c 	ldrb	r3, [r3, #92]	; 0x5c
   359a8:	e1a03c03 	lsl	r3, r3, #24
   359ac:	e1833002 	orr	r3, r3, r2
   359b0:	e1a00003 	mov	r0, r3
   359b4:	e24bd004 	sub	sp, fp, #4
   359b8:	e8bd8800 	pop	{fp, pc}

000359bc <NetworkParams::isMaskSet(unsigned int) const>:
   359bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   359c0:	e28db000 	add	fp, sp, #0
   359c4:	e24dd00c 	sub	sp, sp, #12
   359c8:	e50b0008 	str	r0, [fp, #-8]
   359cc:	e50b100c 	str	r1, [fp, #-12]
   359d0:	e51b3008 	ldr	r3, [fp, #-8]
   359d4:	e5932004 	ldr	r2, [r3, #4]
   359d8:	e51b300c 	ldr	r3, [fp, #-12]
   359dc:	e0033002 	and	r3, r3, r2
   359e0:	e51b200c 	ldr	r2, [fp, #-12]
   359e4:	e1520003 	cmp	r2, r3
   359e8:	03a03001 	moveq	r3, #1
   359ec:	13a03000 	movne	r3, #0
   359f0:	e6ef3073 	uxtb	r3, r3
   359f4:	e1a00003 	mov	r0, r3
   359f8:	e28bd000 	add	sp, fp, #0
   359fc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   35a00:	e12fff1e 	bx	lr

00035a04 <Network::QueuedConfig::QueuedConfig()>:
   35a04:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   35a08:	e28db000 	add	fp, sp, #0
   35a0c:	e24dd00c 	sub	sp, sp, #12
   35a10:	e50b0008 	str	r0, [fp, #-8]
   35a14:	e51b3008 	ldr	r3, [fp, #-8]
   35a18:	e3a02000 	mov	r2, #0
   35a1c:	e5832000 	str	r2, [r3]
   35a20:	e51b3008 	ldr	r3, [fp, #-8]
   35a24:	e3a02000 	mov	r2, #0
   35a28:	e5832004 	str	r2, [r3, #4]
   35a2c:	e51b3008 	ldr	r3, [fp, #-8]
   35a30:	e3a02000 	mov	r2, #0
   35a34:	e5832008 	str	r2, [r3, #8]
   35a38:	e51b3008 	ldr	r3, [fp, #-8]
   35a3c:	e1a00003 	mov	r0, r3
   35a40:	e28bd000 	add	sp, fp, #0
   35a44:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   35a48:	e12fff1e 	bx	lr

00035a4c <Network::Network()>:
   35a4c:	e92d4800 	push	{fp, lr}
   35a50:	e28db004 	add	fp, sp, #4
   35a54:	e24dd008 	sub	sp, sp, #8
   35a58:	e50b0008 	str	r0, [fp, #-8]
   35a5c:	e51b3008 	ldr	r3, [fp, #-8]
   35a60:	e3a02001 	mov	r2, #1
   35a64:	e5c32000 	strb	r2, [r3]
   35a68:	e51b3008 	ldr	r3, [fp, #-8]
   35a6c:	e3a02000 	mov	r2, #0
   35a70:	e5c32001 	strb	r2, [r3, #1]
   35a74:	e51b3008 	ldr	r3, [fp, #-8]
   35a78:	e3a02001 	mov	r2, #1
   35a7c:	e5c32002 	strb	r2, [r3, #2]
   35a80:	e51b3008 	ldr	r3, [fp, #-8]
   35a84:	e3a02000 	mov	r2, #0
   35a88:	e5c32003 	strb	r2, [r3, #3]
   35a8c:	e51b3008 	ldr	r3, [fp, #-8]
   35a90:	e3a02001 	mov	r2, #1
   35a94:	e5832004 	str	r2, [r3, #4]
   35a98:	e51b3008 	ldr	r3, [fp, #-8]
   35a9c:	e3a02000 	mov	r2, #0
   35aa0:	e5832008 	str	r2, [r3, #8]
   35aa4:	e51b3008 	ldr	r3, [fp, #-8]
   35aa8:	e3a02000 	mov	r2, #0
   35aac:	e583200c 	str	r2, [r3, #12]
   35ab0:	e51b3008 	ldr	r3, [fp, #-8]
   35ab4:	e3a02000 	mov	r2, #0
   35ab8:	e5832010 	str	r2, [r3, #16]
   35abc:	e51b3008 	ldr	r3, [fp, #-8]
   35ac0:	e3a02000 	mov	r2, #0
   35ac4:	e5832014 	str	r2, [r3, #20]
   35ac8:	e51b3008 	ldr	r3, [fp, #-8]
   35acc:	e3a02000 	mov	r2, #0
   35ad0:	e5832018 	str	r2, [r3, #24]
   35ad4:	e51b3008 	ldr	r3, [fp, #-8]
   35ad8:	e3a02000 	mov	r2, #0
   35adc:	e58320b4 	str	r2, [r3, #180]	; 0xb4
   35ae0:	e51b3008 	ldr	r3, [fp, #-8]
   35ae4:	e28330b8 	add	r3, r3, #184	; 0xb8
   35ae8:	e1a00003 	mov	r0, r3
   35aec:	ebffffc4 	bl	35a04 <Network::QueuedConfig::QueuedConfig()>
   35af0:	e59f2044 	ldr	r2, [pc, #68]	; 35b3c <Network::Network()+0xf0>
   35af4:	e51b3008 	ldr	r3, [fp, #-8]
   35af8:	e5823000 	str	r3, [r2]
   35afc:	e51b3008 	ldr	r3, [fp, #-8]
   35b00:	e3a02000 	mov	r2, #0
   35b04:	e5c3209c 	strb	r2, [r3, #156]	; 0x9c
   35b08:	e51b3008 	ldr	r3, [fp, #-8]
   35b0c:	e3a02000 	mov	r2, #0
   35b10:	e5c3201c 	strb	r2, [r3, #28]
   35b14:	e51b3008 	ldr	r3, [fp, #-8]
   35b18:	e3a02000 	mov	r2, #0
   35b1c:	e5c3205c 	strb	r2, [r3, #92]	; 0x5c
   35b20:	e51b3008 	ldr	r3, [fp, #-8]
   35b24:	e3a02000 	mov	r2, #0
   35b28:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2
   35b2c:	e51b3008 	ldr	r3, [fp, #-8]
   35b30:	e1a00003 	mov	r0, r3
   35b34:	e24bd004 	sub	sp, fp, #4
   35b38:	e8bd8800 	pop	{fp, pc}
   35b3c:	0005f2e0 	.word	0x0005f2e0

00035b40 <Network::~Network()>:
   35b40:	e92d4800 	push	{fp, lr}
   35b44:	e28db004 	add	fp, sp, #4
   35b48:	e24dd010 	sub	sp, sp, #16
   35b4c:	e50b0010 	str	r0, [fp, #-16]
   35b50:	e3a03000 	mov	r3, #0
   35b54:	e50b3008 	str	r3, [fp, #-8]
   35b58:	e51b3008 	ldr	r3, [fp, #-8]
   35b5c:	e353001f 	cmp	r3, #31
   35b60:	8a00000f 	bhi	35ba4 <Network::~Network()+0x64>
   35b64:	e59f2048 	ldr	r2, [pc, #72]	; 35bb4 <Network::~Network()+0x74>
   35b68:	e51b3008 	ldr	r3, [fp, #-8]
   35b6c:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   35b70:	e3530000 	cmp	r3, #0
   35b74:	0a000006 	beq	35b94 <Network::~Network()+0x54>
   35b78:	e59f2034 	ldr	r2, [pc, #52]	; 35bb4 <Network::~Network()+0x74>
   35b7c:	e51b3008 	ldr	r3, [fp, #-8]
   35b80:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   35b84:	e6ff3073 	uxth	r3, r3
   35b88:	e1a01003 	mov	r1, r3
   35b8c:	e51b0010 	ldr	r0, [fp, #-16]
   35b90:	eb0001bc 	bl	36288 <Network::End(unsigned short)>
   35b94:	e51b3008 	ldr	r3, [fp, #-8]
   35b98:	e2833001 	add	r3, r3, #1
   35b9c:	e50b3008 	str	r3, [fp, #-8]
   35ba0:	eaffffec 	b	35b58 <Network::~Network()+0x18>
   35ba4:	e51b3010 	ldr	r3, [fp, #-16]
   35ba8:	e1a00003 	mov	r0, r3
   35bac:	e24bd004 	sub	sp, fp, #4
   35bb0:	e8bd8800 	pop	{fp, pc}
   35bb4:	0005f1e0 	.word	0x0005f1e0

00035bb8 <Network::Init(char const*)>:
   35bb8:	e92d4800 	push	{fp, lr}
   35bbc:	e28db004 	add	fp, sp, #4
   35bc0:	e24dd078 	sub	sp, sp, #120	; 0x78
   35bc4:	e50b0078 	str	r0, [fp, #-120]	; 0xffffff88
   35bc8:	e50b107c 	str	r1, [fp, #-124]	; 0xffffff84
   35bcc:	e3a03000 	mov	r3, #0
   35bd0:	e50b3008 	str	r3, [fp, #-8]
   35bd4:	e51b3008 	ldr	r3, [fp, #-8]
   35bd8:	e353001f 	cmp	r3, #31
   35bdc:	8a00000b 	bhi	35c10 <Network::Init(char const*)+0x58>
   35be0:	e59f22b4 	ldr	r2, [pc, #692]	; 35e9c <Network::Init(char const*)+0x2e4>
   35be4:	e51b3008 	ldr	r3, [fp, #-8]
   35be8:	e3a01000 	mov	r1, #0
   35bec:	e7821103 	str	r1, [r2, r3, lsl #2]
   35bf0:	e59f22a8 	ldr	r2, [pc, #680]	; 35ea0 <Network::Init(char const*)+0x2e8>
   35bf4:	e51b3008 	ldr	r3, [fp, #-8]
   35bf8:	e3e01000 	mvn	r1, #0
   35bfc:	e7821103 	str	r1, [r2, r3, lsl #2]
   35c00:	e51b3008 	ldr	r3, [fp, #-8]
   35c04:	e2833001 	add	r3, r3, #1
   35c08:	e50b3008 	str	r3, [fp, #-8]
   35c0c:	eafffff0 	b	35bd4 <Network::Init(char const*)+0x1c>
   35c10:	e24b3074 	sub	r3, fp, #116	; 0x74
   35c14:	e3a01000 	mov	r1, #0
   35c18:	e1a00003 	mov	r0, r3
   35c1c:	eb000863 	bl	37db0 <NetworkParams::NetworkParams(NetworkParamsStore*)>
   35c20:	e24b3074 	sub	r3, fp, #116	; 0x74
   35c24:	e1a00003 	mov	r0, r3
   35c28:	eb00086c 	bl	37de0 <NetworkParams::Load()>
   35c2c:	e24b3074 	sub	r3, fp, #116	; 0x74
   35c30:	e1a00003 	mov	r0, r3
   35c34:	eb000842 	bl	37d44 <NetworkParams::Dump()>
   35c38:	e24b3074 	sub	r3, fp, #116	; 0x74
   35c3c:	e1a00003 	mov	r0, r3
   35c40:	ebffff46 	bl	35960 <NetworkParams::GetNtpServer() const>
   35c44:	e1a02000 	mov	r2, r0
   35c48:	e51b3078 	ldr	r3, [fp, #-120]	; 0xffffff88
   35c4c:	e5832008 	str	r2, [r3, #8]
   35c50:	e51b3078 	ldr	r3, [fp, #-120]	; 0xffffff88
   35c54:	e28320a2 	add	r2, r3, #162	; 0xa2
   35c58:	e3a03010 	mov	r3, #16
   35c5c:	e51b107c 	ldr	r1, [fp, #-124]	; 0xffffff84
   35c60:	e51b0078 	ldr	r0, [fp, #-120]	; 0xffffff88
   35c64:	eb000389 	bl	36a90 <Network::IfGetByAddress(char const*, char*, unsigned int)>
   35c68:	e1a03000 	mov	r3, r0
   35c6c:	e3530000 	cmp	r3, #0
   35c70:	03a03001 	moveq	r3, #1
   35c74:	13a03000 	movne	r3, #0
   35c78:	e6ef3073 	uxtb	r3, r3
   35c7c:	e3530000 	cmp	r3, #0
   35c80:	1a000005 	bne	35c9c <Network::Init(char const*)+0xe4>
   35c84:	e51b3078 	ldr	r3, [fp, #-120]	; 0xffffff88
   35c88:	e28330a2 	add	r3, r3, #162	; 0xa2
   35c8c:	e3a0200f 	mov	r2, #15
   35c90:	e51b107c 	ldr	r1, [fp, #-124]	; 0xffffff84
   35c94:	e1a00003 	mov	r0, r3
   35c98:	ebff6e00 	bl	114a0 <strncpy@plt>
   35c9c:	e51b3078 	ldr	r3, [fp, #-120]	; 0xffffff88
   35ca0:	e28330a2 	add	r3, r3, #162	; 0xa2
   35ca4:	e1a01003 	mov	r1, r3
   35ca8:	e51b0078 	ldr	r0, [fp, #-120]	; 0xffffff88
   35cac:	eb0003b4 	bl	36b84 <Network::IfDetails(char const*)>
   35cb0:	e50b0010 	str	r0, [fp, #-16]
   35cb4:	e51b3010 	ldr	r3, [fp, #-16]
   35cb8:	e3530000 	cmp	r3, #0
   35cbc:	aa000007 	bge	35ce0 <Network::Init(char const*)+0x128>
   35cc0:	e59f31dc 	ldr	r3, [pc, #476]	; 35ea4 <Network::Init(char const*)+0x2ec>
   35cc4:	e5933000 	ldr	r3, [r3]
   35cc8:	e51b207c 	ldr	r2, [fp, #-124]	; 0xffffff84
   35ccc:	e59f11d4 	ldr	r1, [pc, #468]	; 35ea8 <Network::Init(char const*)+0x2f0>
   35cd0:	e1a00003 	mov	r0, r3
   35cd4:	ebff6dd9 	bl	11440 <fprintf@plt>
   35cd8:	e51b3010 	ldr	r3, [fp, #-16]
   35cdc:	ea00006b 	b	35e90 <Network::Init(char const*)+0x2d8>
   35ce0:	e51b3078 	ldr	r3, [fp, #-120]	; 0xffffff88
   35ce4:	e28330a2 	add	r3, r3, #162	; 0xa2
   35ce8:	e1a01003 	mov	r1, r3
   35cec:	e51b0078 	ldr	r0, [fp, #-120]	; 0xffffff88
   35cf0:	eb0002e3 	bl	36884 <Network::IsDhclient(char const*)>
   35cf4:	e1a03000 	mov	r3, r0
   35cf8:	e1a02003 	mov	r2, r3
   35cfc:	e51b3078 	ldr	r3, [fp, #-120]	; 0xffffff88
   35d00:	e5c32001 	strb	r2, [r3, #1]
   35d04:	e51b3078 	ldr	r3, [fp, #-120]	; 0xffffff88
   35d08:	e28330a2 	add	r3, r3, #162	; 0xa2
   35d0c:	e1a00003 	mov	r0, r3
   35d10:	ebff6dac 	bl	113c8 <if_nametoindex@plt>
   35d14:	e1a02000 	mov	r2, r0
   35d18:	e51b3078 	ldr	r3, [fp, #-120]	; 0xffffff88
   35d1c:	e5832004 	str	r2, [r3, #4]
   35d20:	e51b3078 	ldr	r3, [fp, #-120]	; 0xffffff88
   35d24:	e5933004 	ldr	r3, [r3, #4]
   35d28:	e3530000 	cmp	r3, #0
   35d2c:	1a000003 	bne	35d40 <Network::Init(char const*)+0x188>
   35d30:	e59f0174 	ldr	r0, [pc, #372]	; 35eac <Network::Init(char const*)+0x2f4>
   35d34:	ebff6d3d 	bl	11230 <perror@plt>
   35d38:	e3a00001 	mov	r0, #1
   35d3c:	ebff6d29 	bl	111e8 <exit@plt>
   35d40:	e51b3078 	ldr	r3, [fp, #-120]	; 0xffffff88
   35d44:	e283301c 	add	r3, r3, #28
   35d48:	e3a02040 	mov	r2, #64	; 0x40
   35d4c:	e3a01000 	mov	r1, #0
   35d50:	e1a00003 	mov	r0, r3
   35d54:	ebff6d44 	bl	1126c <memset@plt>
   35d58:	e51b3078 	ldr	r3, [fp, #-120]	; 0xffffff88
   35d5c:	e283301c 	add	r3, r3, #28
   35d60:	e3a01040 	mov	r1, #64	; 0x40
   35d64:	e1a00003 	mov	r0, r3
   35d68:	ebff6d90 	bl	113b0 <gethostname@plt>
   35d6c:	e1a03000 	mov	r3, r0
   35d70:	e1a03fa3 	lsr	r3, r3, #31
   35d74:	e6ef3073 	uxtb	r3, r3
   35d78:	e3530000 	cmp	r3, #0
   35d7c:	0a000001 	beq	35d88 <Network::Init(char const*)+0x1d0>
   35d80:	e59f0128 	ldr	r0, [pc, #296]	; 35eb0 <Network::Init(char const*)+0x2f8>
   35d84:	ebff6d29 	bl	11230 <perror@plt>
   35d88:	e3a03000 	mov	r3, #0
   35d8c:	e50b3008 	str	r3, [fp, #-8]
   35d90:	e51b2078 	ldr	r2, [fp, #-120]	; 0xffffff88
   35d94:	e51b3008 	ldr	r3, [fp, #-8]
   35d98:	e0823003 	add	r3, r2, r3
   35d9c:	e283301c 	add	r3, r3, #28
   35da0:	e5d33000 	ldrb	r3, [r3]
   35da4:	e3530000 	cmp	r3, #0
   35da8:	0a00000d 	beq	35de4 <Network::Init(char const*)+0x22c>
   35dac:	e51b3008 	ldr	r3, [fp, #-8]
   35db0:	e353003f 	cmp	r3, #63	; 0x3f
   35db4:	8a00000a 	bhi	35de4 <Network::Init(char const*)+0x22c>
   35db8:	e51b2078 	ldr	r2, [fp, #-120]	; 0xffffff88
   35dbc:	e51b3008 	ldr	r3, [fp, #-8]
   35dc0:	e0823003 	add	r3, r2, r3
   35dc4:	e283301c 	add	r3, r3, #28
   35dc8:	e5d33000 	ldrb	r3, [r3]
   35dcc:	e353002e 	cmp	r3, #46	; 0x2e
   35dd0:	0a000003 	beq	35de4 <Network::Init(char const*)+0x22c>
   35dd4:	e51b3008 	ldr	r3, [fp, #-8]
   35dd8:	e2833001 	add	r3, r3, #1
   35ddc:	e50b3008 	str	r3, [fp, #-8]
   35de0:	eaffffea 	b	35d90 <Network::Init(char const*)+0x1d8>
   35de4:	e51b3008 	ldr	r3, [fp, #-8]
   35de8:	e2832001 	add	r2, r3, #1
   35dec:	e50b2008 	str	r2, [fp, #-8]
   35df0:	e51b2078 	ldr	r2, [fp, #-120]	; 0xffffff88
   35df4:	e0823003 	add	r3, r2, r3
   35df8:	e3a02000 	mov	r2, #0
   35dfc:	e5c3201c 	strb	r2, [r3, #28]
   35e00:	e3a03000 	mov	r3, #0
   35e04:	e50b300c 	str	r3, [fp, #-12]
   35e08:	e51b300c 	ldr	r3, [fp, #-12]
   35e0c:	e353003f 	cmp	r3, #63	; 0x3f
   35e10:	8a000017 	bhi	35e74 <Network::Init(char const*)+0x2bc>
   35e14:	e51b3008 	ldr	r3, [fp, #-8]
   35e18:	e353003f 	cmp	r3, #63	; 0x3f
   35e1c:	8a000014 	bhi	35e74 <Network::Init(char const*)+0x2bc>
   35e20:	e51b2078 	ldr	r2, [fp, #-120]	; 0xffffff88
   35e24:	e51b3008 	ldr	r3, [fp, #-8]
   35e28:	e0823003 	add	r3, r2, r3
   35e2c:	e283301c 	add	r3, r3, #28
   35e30:	e5d33000 	ldrb	r3, [r3]
   35e34:	e3530000 	cmp	r3, #0
   35e38:	0a00000d 	beq	35e74 <Network::Init(char const*)+0x2bc>
   35e3c:	e51b2008 	ldr	r2, [fp, #-8]
   35e40:	e2823001 	add	r3, r2, #1
   35e44:	e50b3008 	str	r3, [fp, #-8]
   35e48:	e51b300c 	ldr	r3, [fp, #-12]
   35e4c:	e2831001 	add	r1, r3, #1
   35e50:	e50b100c 	str	r1, [fp, #-12]
   35e54:	e51b1078 	ldr	r1, [fp, #-120]	; 0xffffff88
   35e58:	e0812002 	add	r2, r1, r2
   35e5c:	e5d2101c 	ldrb	r1, [r2, #28]
   35e60:	e51b2078 	ldr	r2, [fp, #-120]	; 0xffffff88
   35e64:	e0823003 	add	r3, r2, r3
   35e68:	e1a02001 	mov	r2, r1
   35e6c:	e5c3205c 	strb	r2, [r3, #92]	; 0x5c
   35e70:	eaffffe4 	b	35e08 <Network::Init(char const*)+0x250>
   35e74:	e51b2078 	ldr	r2, [fp, #-120]	; 0xffffff88
   35e78:	e51b300c 	ldr	r3, [fp, #-12]
   35e7c:	e0823003 	add	r3, r2, r3
   35e80:	e283305c 	add	r3, r3, #92	; 0x5c
   35e84:	e3a02000 	mov	r2, #0
   35e88:	e5c32000 	strb	r2, [r3]
   35e8c:	e51b3010 	ldr	r3, [fp, #-16]
   35e90:	e1a00003 	mov	r0, r3
   35e94:	e24bd004 	sub	sp, fp, #4
   35e98:	e8bd8800 	pop	{fp, pc}
   35e9c:	0005f1e0 	.word	0x0005f1e0
   35ea0:	0005f260 	.word	0x0005f260
   35ea4:	0005c298 	.word	0x0005c298
   35ea8:	00048ea0 	.word	0x00048ea0
   35eac:	00048ec4 	.word	0x00048ec4
   35eb0:	00048ed4 	.word	0x00048ed4

00035eb4 <Network::Begin(unsigned short)>:
   35eb4:	e92d4800 	push	{fp, lr}
   35eb8:	e28db004 	add	fp, sp, #4
   35ebc:	e24dd040 	sub	sp, sp, #64	; 0x40
   35ec0:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
   35ec4:	e1a03001 	mov	r3, r1
   35ec8:	e14b33ba 	strh	r3, [fp, #-58]	; 0xffffffc6
   35ecc:	e3a03001 	mov	r3, #1
   35ed0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   35ed4:	e3a03000 	mov	r3, #0
   35ed8:	e50b3008 	str	r3, [fp, #-8]
   35edc:	e51b3008 	ldr	r3, [fp, #-8]
   35ee0:	e353001f 	cmp	r3, #31
   35ee4:	ca000011 	bgt	35f30 <Network::Begin(unsigned short)+0x7c>
   35ee8:	e59f2304 	ldr	r2, [pc, #772]	; 361f4 <Network::Begin(unsigned short)+0x340>
   35eec:	e51b3008 	ldr	r3, [fp, #-8]
   35ef0:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   35ef4:	e15b33ba 	ldrh	r3, [fp, #-58]	; 0xffffffc6
   35ef8:	e1520003 	cmp	r2, r3
   35efc:	1a000001 	bne	35f08 <Network::Begin(unsigned short)+0x54>
   35f00:	e51b3008 	ldr	r3, [fp, #-8]
   35f04:	ea0000b7 	b	361e8 <Network::Begin(unsigned short)+0x334>
   35f08:	e59f22e4 	ldr	r2, [pc, #740]	; 361f4 <Network::Begin(unsigned short)+0x340>
   35f0c:	e51b3008 	ldr	r3, [fp, #-8]
   35f10:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   35f14:	e3530000 	cmp	r3, #0
   35f18:	0a000003 	beq	35f2c <Network::Begin(unsigned short)+0x78>
   35f1c:	e51b3008 	ldr	r3, [fp, #-8]
   35f20:	e2833001 	add	r3, r3, #1
   35f24:	e50b3008 	str	r3, [fp, #-8]
   35f28:	eaffffeb 	b	35edc <Network::Begin(unsigned short)+0x28>
   35f2c:	e1a00000 	nop			; (mov r0, r0)
   35f30:	e51b3008 	ldr	r3, [fp, #-8]
   35f34:	e3530020 	cmp	r3, #32
   35f38:	1a000003 	bne	35f4c <Network::Begin(unsigned short)+0x98>
   35f3c:	e59f02b4 	ldr	r0, [pc, #692]	; 361f8 <Network::Begin(unsigned short)+0x344>
   35f40:	ebff6cba 	bl	11230 <perror@plt>
   35f44:	e3a00001 	mov	r0, #1
   35f48:	ebff6ca6 	bl	111e8 <exit@plt>
   35f4c:	e3a02011 	mov	r2, #17
   35f50:	e3a01002 	mov	r1, #2
   35f54:	e3a00002 	mov	r0, #2
   35f58:	ebff6cff 	bl	1135c <socket@plt>
   35f5c:	e50b0010 	str	r0, [fp, #-16]
   35f60:	e51b3010 	ldr	r3, [fp, #-16]
   35f64:	e3730001 	cmn	r3, #1
   35f68:	03a03001 	moveq	r3, #1
   35f6c:	13a03000 	movne	r3, #0
   35f70:	e6ef3073 	uxtb	r3, r3
   35f74:	e3530000 	cmp	r3, #0
   35f78:	0a000003 	beq	35f8c <Network::Begin(unsigned short)+0xd8>
   35f7c:	e59f0278 	ldr	r0, [pc, #632]	; 361fc <Network::Begin(unsigned short)+0x348>
   35f80:	ebff6caa 	bl	11230 <perror@plt>
   35f84:	e3a00001 	mov	r0, #1
   35f88:	ebff6c96 	bl	111e8 <exit@plt>
   35f8c:	e24b2024 	sub	r2, fp, #36	; 0x24
   35f90:	e3a03004 	mov	r3, #4
   35f94:	e58d3000 	str	r3, [sp]
   35f98:	e1a03002 	mov	r3, r2
   35f9c:	e3a02006 	mov	r2, #6
   35fa0:	e3a01001 	mov	r1, #1
   35fa4:	e51b0010 	ldr	r0, [fp, #-16]
   35fa8:	ebff6cfd 	bl	113a4 <setsockopt@plt>
   35fac:	e1a03000 	mov	r3, r0
   35fb0:	e3730001 	cmn	r3, #1
   35fb4:	03a03001 	moveq	r3, #1
   35fb8:	13a03000 	movne	r3, #0
   35fbc:	e6ef3073 	uxtb	r3, r3
   35fc0:	e3530000 	cmp	r3, #0
   35fc4:	0a000003 	beq	35fd8 <Network::Begin(unsigned short)+0x124>
   35fc8:	e59f0230 	ldr	r0, [pc, #560]	; 36200 <Network::Begin(unsigned short)+0x34c>
   35fcc:	ebff6c97 	bl	11230 <perror@plt>
   35fd0:	e3a00001 	mov	r0, #1
   35fd4:	ebff6c83 	bl	111e8 <exit@plt>
   35fd8:	e3a03000 	mov	r3, #0
   35fdc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   35fe0:	e3a0300a 	mov	r3, #10
   35fe4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
   35fe8:	e24b202c 	sub	r2, fp, #44	; 0x2c
   35fec:	e3a03008 	mov	r3, #8
   35ff0:	e58d3000 	str	r3, [sp]
   35ff4:	e1a03002 	mov	r3, r2
   35ff8:	e3a02014 	mov	r2, #20
   35ffc:	e3a01001 	mov	r1, #1
   36000:	e51b0010 	ldr	r0, [fp, #-16]
   36004:	ebff6ce6 	bl	113a4 <setsockopt@plt>
   36008:	e1a03000 	mov	r3, r0
   3600c:	e3730001 	cmn	r3, #1
   36010:	03a03001 	moveq	r3, #1
   36014:	13a03000 	movne	r3, #0
   36018:	e6ef3073 	uxtb	r3, r3
   3601c:	e3530000 	cmp	r3, #0
   36020:	0a000003 	beq	36034 <Network::Begin(unsigned short)+0x180>
   36024:	e59f01d8 	ldr	r0, [pc, #472]	; 36204 <Network::Begin(unsigned short)+0x350>
   36028:	ebff6c80 	bl	11230 <perror@plt>
   3602c:	e3a00001 	mov	r0, #1
   36030:	ebff6c6c 	bl	111e8 <exit@plt>
   36034:	e3a03001 	mov	r3, #1
   36038:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
   3603c:	e24b2030 	sub	r2, fp, #48	; 0x30
   36040:	e3a03004 	mov	r3, #4
   36044:	e58d3000 	str	r3, [sp]
   36048:	e1a03002 	mov	r3, r2
   3604c:	e3a02002 	mov	r2, #2
   36050:	e3a01001 	mov	r1, #1
   36054:	e51b0010 	ldr	r0, [fp, #-16]
   36058:	ebff6cd1 	bl	113a4 <setsockopt@plt>
   3605c:	e1a03000 	mov	r3, r0
   36060:	e3730001 	cmn	r3, #1
   36064:	03a03001 	moveq	r3, #1
   36068:	13a03000 	movne	r3, #0
   3606c:	e6ef3073 	uxtb	r3, r3
   36070:	e3530000 	cmp	r3, #0
   36074:	0a000003 	beq	36088 <Network::Begin(unsigned short)+0x1d4>
   36078:	e59f0188 	ldr	r0, [pc, #392]	; 36208 <Network::Begin(unsigned short)+0x354>
   3607c:	ebff6c6b 	bl	11230 <perror@plt>
   36080:	e3a00001 	mov	r0, #1
   36084:	ebff6c57 	bl	111e8 <exit@plt>
   36088:	e3a03001 	mov	r3, #1
   3608c:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
   36090:	e24b2030 	sub	r2, fp, #48	; 0x30
   36094:	e3a03004 	mov	r3, #4
   36098:	e58d3000 	str	r3, [sp]
   3609c:	e1a03002 	mov	r3, r2
   360a0:	e3a0200f 	mov	r2, #15
   360a4:	e3a01001 	mov	r1, #1
   360a8:	e51b0010 	ldr	r0, [fp, #-16]
   360ac:	ebff6cbc 	bl	113a4 <setsockopt@plt>
   360b0:	e1a03000 	mov	r3, r0
   360b4:	e3730001 	cmn	r3, #1
   360b8:	03a03001 	moveq	r3, #1
   360bc:	13a03000 	movne	r3, #0
   360c0:	e6ef3073 	uxtb	r3, r3
   360c4:	e3530000 	cmp	r3, #0
   360c8:	0a000003 	beq	360dc <Network::Begin(unsigned short)+0x228>
   360cc:	e59f0138 	ldr	r0, [pc, #312]	; 3620c <Network::Begin(unsigned short)+0x358>
   360d0:	ebff6c56 	bl	11230 <perror@plt>
   360d4:	e3a00001 	mov	r0, #1
   360d8:	ebff6c42 	bl	111e8 <exit@plt>
   360dc:	e24b3020 	sub	r3, fp, #32
   360e0:	e3a02010 	mov	r2, #16
   360e4:	e3a01000 	mov	r1, #0
   360e8:	e1a00003 	mov	r0, r3
   360ec:	ebff6c5e 	bl	1126c <memset@plt>
   360f0:	e3a03002 	mov	r3, #2
   360f4:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
   360f8:	e15b33ba 	ldrh	r3, [fp, #-58]	; 0xffffffc6
   360fc:	e1a00003 	mov	r0, r3
   36100:	ebff6cc2 	bl	11410 <htons@plt>
   36104:	e1a03000 	mov	r3, r0
   36108:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
   3610c:	e3a00000 	mov	r0, #0
   36110:	ebff6c70 	bl	112d8 <htonl@plt>
   36114:	e1a03000 	mov	r3, r0
   36118:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   3611c:	e24b3020 	sub	r3, fp, #32
   36120:	e3a02010 	mov	r2, #16
   36124:	e1a01003 	mov	r1, r3
   36128:	e51b0010 	ldr	r0, [fp, #-16]
   3612c:	ebff6c81 	bl	11338 <bind@plt>
   36130:	e1a03000 	mov	r3, r0
   36134:	e3730001 	cmn	r3, #1
   36138:	03a03001 	moveq	r3, #1
   3613c:	13a03000 	movne	r3, #0
   36140:	e6ef3073 	uxtb	r3, r3
   36144:	e3530000 	cmp	r3, #0
   36148:	0a000014 	beq	361a0 <Network::Begin(unsigned short)+0x2ec>
   3614c:	e59f00bc 	ldr	r0, [pc, #188]	; 36210 <Network::Begin(unsigned short)+0x35c>
   36150:	ebff6c36 	bl	11230 <perror@plt>
   36154:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   36158:	e6ef1073 	uxtb	r1, r3
   3615c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   36160:	e1a03423 	lsr	r3, r3, #8
   36164:	e6ef0073 	uxtb	r0, r3
   36168:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3616c:	e1a03823 	lsr	r3, r3, #16
   36170:	e6efc073 	uxtb	ip, r3
   36174:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   36178:	e1a03c23 	lsr	r3, r3, #24
   3617c:	e15b23ba 	ldrh	r2, [fp, #-58]	; 0xffffffc6
   36180:	e58d2004 	str	r2, [sp, #4]
   36184:	e58d3000 	str	r3, [sp]
   36188:	e1a0300c 	mov	r3, ip
   3618c:	e1a02000 	mov	r2, r0
   36190:	e59f007c 	ldr	r0, [pc, #124]	; 36214 <Network::Begin(unsigned short)+0x360>
   36194:	ebff6c16 	bl	111f4 <printf@plt>
   36198:	e3a00001 	mov	r0, #1
   3619c:	ebff6c11 	bl	111e8 <exit@plt>
   361a0:	e15b23ba 	ldrh	r2, [fp, #-58]	; 0xffffffc6
   361a4:	e59f1048 	ldr	r1, [pc, #72]	; 361f4 <Network::Begin(unsigned short)+0x340>
   361a8:	e51b3008 	ldr	r3, [fp, #-8]
   361ac:	e7812103 	str	r2, [r1, r3, lsl #2]
   361b0:	e3a03000 	mov	r3, #0
   361b4:	e50b300c 	str	r3, [fp, #-12]
   361b8:	e51b300c 	ldr	r3, [fp, #-12]
   361bc:	e353001f 	cmp	r3, #31
   361c0:	8a000003 	bhi	361d4 <Network::Begin(unsigned short)+0x320>
   361c4:	e51b300c 	ldr	r3, [fp, #-12]
   361c8:	e2833001 	add	r3, r3, #1
   361cc:	e50b300c 	str	r3, [fp, #-12]
   361d0:	eafffff8 	b	361b8 <Network::Begin(unsigned short)+0x304>
   361d4:	e59f103c 	ldr	r1, [pc, #60]	; 36218 <Network::Begin(unsigned short)+0x364>
   361d8:	e51b3008 	ldr	r3, [fp, #-8]
   361dc:	e51b2010 	ldr	r2, [fp, #-16]
   361e0:	e7812103 	str	r2, [r1, r3, lsl #2]
   361e4:	e51b3010 	ldr	r3, [fp, #-16]
   361e8:	e1a00003 	mov	r0, r3
   361ec:	e24bd004 	sub	sp, fp, #4
   361f0:	e8bd8800 	pop	{fp, pc}
   361f4:	0005f1e0 	.word	0x0005f1e0
   361f8:	00048ee0 	.word	0x00048ee0
   361fc:	00048ef8 	.word	0x00048ef8
   36200:	00048f00 	.word	0x00048f00
   36204:	00048f1c 	.word	0x00048f1c
   36208:	00048f34 	.word	0x00048f34
   3620c:	00048f50 	.word	0x00048f50
   36210:	00048f6c 	.word	0x00048f6c
   36214:	00048f74 	.word	0x00048f74
   36218:	0005f260 	.word	0x0005f260

0003621c <Network::MacAddressCopyTo(unsigned char*)>:
   3621c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   36220:	e28db000 	add	fp, sp, #0
   36224:	e24dd014 	sub	sp, sp, #20
   36228:	e50b0010 	str	r0, [fp, #-16]
   3622c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   36230:	e3a03000 	mov	r3, #0
   36234:	e50b3008 	str	r3, [fp, #-8]
   36238:	e51b3008 	ldr	r3, [fp, #-8]
   3623c:	e3530005 	cmp	r3, #5
   36240:	8a00000c 	bhi	36278 <Network::MacAddressCopyTo(unsigned char*)+0x5c>
   36244:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   36248:	e51b3008 	ldr	r3, [fp, #-8]
   3624c:	e0823003 	add	r3, r2, r3
   36250:	e51b1010 	ldr	r1, [fp, #-16]
   36254:	e51b2008 	ldr	r2, [fp, #-8]
   36258:	e0812002 	add	r2, r1, r2
   3625c:	e282209c 	add	r2, r2, #156	; 0x9c
   36260:	e5d22000 	ldrb	r2, [r2]
   36264:	e5c32000 	strb	r2, [r3]
   36268:	e51b3008 	ldr	r3, [fp, #-8]
   3626c:	e2833001 	add	r3, r3, #1
   36270:	e50b3008 	str	r3, [fp, #-8]
   36274:	eaffffef 	b	36238 <Network::MacAddressCopyTo(unsigned char*)+0x1c>
   36278:	e1a00000 	nop			; (mov r0, r0)
   3627c:	e28bd000 	add	sp, fp, #0
   36280:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   36284:	e12fff1e 	bx	lr

00036288 <Network::End(unsigned short)>:
   36288:	e92d4800 	push	{fp, lr}
   3628c:	e28db004 	add	fp, sp, #4
   36290:	e24dd010 	sub	sp, sp, #16
   36294:	e50b0010 	str	r0, [fp, #-16]
   36298:	e1a03001 	mov	r3, r1
   3629c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   362a0:	e3a03000 	mov	r3, #0
   362a4:	e50b3008 	str	r3, [fp, #-8]
   362a8:	e51b3008 	ldr	r3, [fp, #-8]
   362ac:	e353001f 	cmp	r3, #31
   362b0:	8a000003 	bhi	362c4 <Network::End(unsigned short)+0x3c>
   362b4:	e51b3008 	ldr	r3, [fp, #-8]
   362b8:	e2833001 	add	r3, r3, #1
   362bc:	e50b3008 	str	r3, [fp, #-8]
   362c0:	eafffff8 	b	362a8 <Network::End(unsigned short)+0x20>
   362c4:	e3a03000 	mov	r3, #0
   362c8:	e50b300c 	str	r3, [fp, #-12]
   362cc:	e51b300c 	ldr	r3, [fp, #-12]
   362d0:	e353001f 	cmp	r3, #31
   362d4:	8a000025 	bhi	36370 <Network::End(unsigned short)+0xe8>
   362d8:	e59f20a8 	ldr	r2, [pc, #168]	; 36388 <Network::End(unsigned short)+0x100>
   362dc:	e51b300c 	ldr	r3, [fp, #-12]
   362e0:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   362e4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   362e8:	e1520003 	cmp	r2, r3
   362ec:	1a00001b 	bne	36360 <Network::End(unsigned short)+0xd8>
   362f0:	e59f2090 	ldr	r2, [pc, #144]	; 36388 <Network::End(unsigned short)+0x100>
   362f4:	e51b300c 	ldr	r3, [fp, #-12]
   362f8:	e3a01000 	mov	r1, #0
   362fc:	e7821103 	str	r1, [r2, r3, lsl #2]
   36300:	e59f0084 	ldr	r0, [pc, #132]	; 3638c <Network::End(unsigned short)+0x104>
   36304:	ebff6bba 	bl	111f4 <printf@plt>
   36308:	e59f2080 	ldr	r2, [pc, #128]	; 36390 <Network::End(unsigned short)+0x108>
   3630c:	e51b300c 	ldr	r3, [fp, #-12]
   36310:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   36314:	e1a00003 	mov	r0, r3
   36318:	ebff6bd9 	bl	11284 <close@plt>
   3631c:	e1a03000 	mov	r3, r0
   36320:	e3730001 	cmn	r3, #1
   36324:	03a03001 	moveq	r3, #1
   36328:	13a03000 	movne	r3, #0
   3632c:	e6ef3073 	uxtb	r3, r3
   36330:	e3530000 	cmp	r3, #0
   36334:	0a000003 	beq	36348 <Network::End(unsigned short)+0xc0>
   36338:	e59f0054 	ldr	r0, [pc, #84]	; 36394 <Network::End(unsigned short)+0x10c>
   3633c:	ebff6bbb 	bl	11230 <perror@plt>
   36340:	e3a00001 	mov	r0, #1
   36344:	ebff6ba7 	bl	111e8 <exit@plt>
   36348:	e59f2040 	ldr	r2, [pc, #64]	; 36390 <Network::End(unsigned short)+0x108>
   3634c:	e51b300c 	ldr	r3, [fp, #-12]
   36350:	e3e01000 	mvn	r1, #0
   36354:	e7821103 	str	r1, [r2, r3, lsl #2]
   36358:	e3a03000 	mov	r3, #0
   3635c:	ea000006 	b	3637c <Network::End(unsigned short)+0xf4>
   36360:	e51b300c 	ldr	r3, [fp, #-12]
   36364:	e2833001 	add	r3, r3, #1
   36368:	e50b300c 	str	r3, [fp, #-12]
   3636c:	eaffffd6 	b	362cc <Network::End(unsigned short)+0x44>
   36370:	e59f001c 	ldr	r0, [pc, #28]	; 36394 <Network::End(unsigned short)+0x10c>
   36374:	ebff6bad 	bl	11230 <perror@plt>
   36378:	e3e03000 	mvn	r3, #0
   3637c:	e1a00003 	mov	r0, r3
   36380:	e24bd004 	sub	sp, fp, #4
   36384:	e8bd8800 	pop	{fp, pc}
   36388:	0005f1e0 	.word	0x0005f1e0
   3638c:	00048f84 	.word	0x00048f84
   36390:	0005f260 	.word	0x0005f260
   36394:	00048f8c 	.word	0x00048f8c

00036398 <Network::SetIp(unsigned int)>:
   36398:	e92d4800 	push	{fp, lr}
   3639c:	e28db004 	add	fp, sp, #4
   363a0:	e24dd030 	sub	sp, sp, #48	; 0x30
   363a4:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   363a8:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
   363ac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   363b0:	e5933010 	ldr	r3, [r3, #16]
   363b4:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   363b8:	e1520003 	cmp	r2, r3
   363bc:	0a000058 	beq	36524 <Network::SetIp(unsigned int)+0x18c>
   363c0:	e24b302c 	sub	r3, fp, #44	; 0x2c
   363c4:	e2833010 	add	r3, r3, #16
   363c8:	e50b3008 	str	r3, [fp, #-8]
   363cc:	e3a02000 	mov	r2, #0
   363d0:	e3a01002 	mov	r1, #2
   363d4:	e3a00002 	mov	r0, #2
   363d8:	ebff6bdf 	bl	1135c <socket@plt>
   363dc:	e50b000c 	str	r0, [fp, #-12]
   363e0:	e51b300c 	ldr	r3, [fp, #-12]
   363e4:	e3730001 	cmn	r3, #1
   363e8:	1a000002 	bne	363f8 <Network::SetIp(unsigned int)+0x60>
   363ec:	e59f013c 	ldr	r0, [pc, #316]	; 36530 <Network::SetIp(unsigned int)+0x198>
   363f0:	ebff6b8e 	bl	11230 <perror@plt>
   363f4:	ea00004b 	b	36528 <Network::SetIp(unsigned int)+0x190>
   363f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   363fc:	e28310a2 	add	r1, r3, #162	; 0xa2
   36400:	e24b302c 	sub	r3, fp, #44	; 0x2c
   36404:	e3a02010 	mov	r2, #16
   36408:	e1a00003 	mov	r0, r3
   3640c:	ebff6c23 	bl	114a0 <strncpy@plt>
   36410:	e3a03002 	mov	r3, #2
   36414:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
   36418:	e51b3008 	ldr	r3, [fp, #-8]
   3641c:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   36420:	e5832004 	str	r2, [r3, #4]
   36424:	e24b302c 	sub	r3, fp, #44	; 0x2c
   36428:	e1a02003 	mov	r2, r3
   3642c:	e59f1100 	ldr	r1, [pc, #256]	; 36534 <Network::SetIp(unsigned int)+0x19c>
   36430:	e51b000c 	ldr	r0, [fp, #-12]
   36434:	ebff6ba1 	bl	112c0 <ioctl@plt>
   36438:	e1a03000 	mov	r3, r0
   3643c:	e3730001 	cmn	r3, #1
   36440:	03a03001 	moveq	r3, #1
   36444:	13a03000 	movne	r3, #0
   36448:	e6ef3073 	uxtb	r3, r3
   3644c:	e3530000 	cmp	r3, #0
   36450:	0a000002 	beq	36460 <Network::SetIp(unsigned int)+0xc8>
   36454:	e59f00dc 	ldr	r0, [pc, #220]	; 36538 <Network::SetIp(unsigned int)+0x1a0>
   36458:	ebff6b74 	bl	11230 <perror@plt>
   3645c:	ea000031 	b	36528 <Network::SetIp(unsigned int)+0x190>
   36460:	e24b302c 	sub	r3, fp, #44	; 0x2c
   36464:	e1a02003 	mov	r2, r3
   36468:	e59f10cc 	ldr	r1, [pc, #204]	; 3653c <Network::SetIp(unsigned int)+0x1a4>
   3646c:	e51b000c 	ldr	r0, [fp, #-12]
   36470:	ebff6b92 	bl	112c0 <ioctl@plt>
   36474:	e1a03000 	mov	r3, r0
   36478:	e3730001 	cmn	r3, #1
   3647c:	03a03001 	moveq	r3, #1
   36480:	13a03000 	movne	r3, #0
   36484:	e6ef3073 	uxtb	r3, r3
   36488:	e3530000 	cmp	r3, #0
   3648c:	0a000002 	beq	3649c <Network::SetIp(unsigned int)+0x104>
   36490:	e59f00a8 	ldr	r0, [pc, #168]	; 36540 <Network::SetIp(unsigned int)+0x1a8>
   36494:	ebff6b65 	bl	11230 <perror@plt>
   36498:	ea000022 	b	36528 <Network::SetIp(unsigned int)+0x190>
   3649c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   364a0:	e28310a2 	add	r1, r3, #162	; 0xa2
   364a4:	e24b302c 	sub	r3, fp, #44	; 0x2c
   364a8:	e3a02010 	mov	r2, #16
   364ac:	e1a00003 	mov	r0, r3
   364b0:	ebff6bfa 	bl	114a0 <strncpy@plt>
   364b4:	e15b31fc 	ldrsh	r3, [fp, #-28]	; 0xffffffe4
   364b8:	e3833041 	orr	r3, r3, #65	; 0x41
   364bc:	e6bf3073 	sxth	r3, r3
   364c0:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
   364c4:	e24b302c 	sub	r3, fp, #44	; 0x2c
   364c8:	e1a02003 	mov	r2, r3
   364cc:	e59f1070 	ldr	r1, [pc, #112]	; 36544 <Network::SetIp(unsigned int)+0x1ac>
   364d0:	e51b000c 	ldr	r0, [fp, #-12]
   364d4:	ebff6b79 	bl	112c0 <ioctl@plt>
   364d8:	e1a03000 	mov	r3, r0
   364dc:	e3730001 	cmn	r3, #1
   364e0:	03a03001 	moveq	r3, #1
   364e4:	13a03000 	movne	r3, #0
   364e8:	e6ef3073 	uxtb	r3, r3
   364ec:	e3530000 	cmp	r3, #0
   364f0:	0a000002 	beq	36500 <Network::SetIp(unsigned int)+0x168>
   364f4:	e59f0044 	ldr	r0, [pc, #68]	; 36540 <Network::SetIp(unsigned int)+0x1a8>
   364f8:	ebff6b4c 	bl	11230 <perror@plt>
   364fc:	ea000009 	b	36528 <Network::SetIp(unsigned int)+0x190>
   36500:	e51b000c 	ldr	r0, [fp, #-12]
   36504:	ebff6b5e 	bl	11284 <close@plt>
   36508:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   3650c:	e3a02000 	mov	r2, #0
   36510:	e5c32001 	strb	r2, [r3, #1]
   36514:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   36518:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   3651c:	e5832010 	str	r2, [r3, #16]
   36520:	ea000000 	b	36528 <Network::SetIp(unsigned int)+0x190>
   36524:	e1a00000 	nop			; (mov r0, r0)
   36528:	e24bd004 	sub	sp, fp, #4
   3652c:	e8bd8800 	pop	{fp, pc}
   36530:	00048f94 	.word	0x00048f94
   36534:	00008916 	.word	0x00008916
   36538:	00048fbc 	.word	0x00048fbc
   3653c:	00008913 	.word	0x00008913
   36540:	00048fd0 	.word	0x00048fd0
   36544:	00008914 	.word	0x00008914

00036548 <Network::SetNetmask(unsigned int)>:
   36548:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3654c:	e28db000 	add	fp, sp, #0
   36550:	e24dd00c 	sub	sp, sp, #12
   36554:	e50b0008 	str	r0, [fp, #-8]
   36558:	e50b100c 	str	r1, [fp, #-12]
   3655c:	e51b3008 	ldr	r3, [fp, #-8]
   36560:	e51b200c 	ldr	r2, [fp, #-12]
   36564:	e5832018 	str	r2, [r3, #24]
   36568:	e1a00000 	nop			; (mov r0, r0)
   3656c:	e28bd000 	add	sp, fp, #0
   36570:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   36574:	e12fff1e 	bx	lr

00036578 <Network::SetGatewayIp(unsigned int)>:
   36578:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3657c:	e28db000 	add	fp, sp, #0
   36580:	e24dd00c 	sub	sp, sp, #12
   36584:	e50b0008 	str	r0, [fp, #-8]
   36588:	e50b100c 	str	r1, [fp, #-12]
   3658c:	e51b3008 	ldr	r3, [fp, #-8]
   36590:	e51b200c 	ldr	r2, [fp, #-12]
   36594:	e5832014 	str	r2, [r3, #20]
   36598:	e1a00000 	nop			; (mov r0, r0)
   3659c:	e28bd000 	add	sp, fp, #0
   365a0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   365a4:	e12fff1e 	bx	lr

000365a8 <Network::JoinGroup(int, unsigned int)>:
   365a8:	e92d4800 	push	{fp, lr}
   365ac:	e28db004 	add	fp, sp, #4
   365b0:	e24dd020 	sub	sp, sp, #32
   365b4:	e50b0010 	str	r0, [fp, #-16]
   365b8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   365bc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   365c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   365c4:	e50b300c 	str	r3, [fp, #-12]
   365c8:	e3a00000 	mov	r0, #0
   365cc:	ebff6b41 	bl	112d8 <htonl@plt>
   365d0:	e1a03000 	mov	r3, r0
   365d4:	e50b3008 	str	r3, [fp, #-8]
   365d8:	e24b200c 	sub	r2, fp, #12
   365dc:	e3a03008 	mov	r3, #8
   365e0:	e58d3000 	str	r3, [sp]
   365e4:	e1a03002 	mov	r3, r2
   365e8:	e3a02023 	mov	r2, #35	; 0x23
   365ec:	e3a01000 	mov	r1, #0
   365f0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   365f4:	ebff6b6a 	bl	113a4 <setsockopt@plt>
   365f8:	e1a03000 	mov	r3, r0
   365fc:	e1a03fa3 	lsr	r3, r3, #31
   36600:	e6ef3073 	uxtb	r3, r3
   36604:	e3530000 	cmp	r3, #0
   36608:	0a000001 	beq	36614 <Network::JoinGroup(int, unsigned int)+0x6c>
   3660c:	e59f000c 	ldr	r0, [pc, #12]	; 36620 <Network::JoinGroup(int, unsigned int)+0x78>
   36610:	ebff6b06 	bl	11230 <perror@plt>
   36614:	e1a00000 	nop			; (mov r0, r0)
   36618:	e24bd004 	sub	sp, fp, #4
   3661c:	e8bd8800 	pop	{fp, pc}
   36620:	00048fe4 	.word	0x00048fe4

00036624 <Network::LeaveGroup(int, unsigned int)>:
   36624:	e92d4800 	push	{fp, lr}
   36628:	e28db004 	add	fp, sp, #4
   3662c:	e24dd020 	sub	sp, sp, #32
   36630:	e50b0010 	str	r0, [fp, #-16]
   36634:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   36638:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   3663c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   36640:	e50b300c 	str	r3, [fp, #-12]
   36644:	e3a00000 	mov	r0, #0
   36648:	ebff6b22 	bl	112d8 <htonl@plt>
   3664c:	e1a03000 	mov	r3, r0
   36650:	e50b3008 	str	r3, [fp, #-8]
   36654:	e24b200c 	sub	r2, fp, #12
   36658:	e3a03008 	mov	r3, #8
   3665c:	e58d3000 	str	r3, [sp]
   36660:	e1a03002 	mov	r3, r2
   36664:	e3a02024 	mov	r2, #36	; 0x24
   36668:	e3a01000 	mov	r1, #0
   3666c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   36670:	ebff6b4b 	bl	113a4 <setsockopt@plt>
   36674:	e1a03000 	mov	r3, r0
   36678:	e1a03fa3 	lsr	r3, r3, #31
   3667c:	e6ef3073 	uxtb	r3, r3
   36680:	e3530000 	cmp	r3, #0
   36684:	0a000001 	beq	36690 <Network::LeaveGroup(int, unsigned int)+0x6c>
   36688:	e59f000c 	ldr	r0, [pc, #12]	; 3669c <Network::LeaveGroup(int, unsigned int)+0x78>
   3668c:	ebff6ae7 	bl	11230 <perror@plt>
   36690:	e1a00000 	nop			; (mov r0, r0)
   36694:	e24bd004 	sub	sp, fp, #4
   36698:	e8bd8800 	pop	{fp, pc}
   3669c:	00049004 	.word	0x00049004

000366a0 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)>:
   366a0:	e92d4800 	push	{fp, lr}
   366a4:	e28db004 	add	fp, sp, #4
   366a8:	e24dd030 	sub	sp, sp, #48	; 0x30
   366ac:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   366b0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   366b4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   366b8:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
   366bc:	e3a03010 	mov	r3, #16
   366c0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   366c4:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
   366c8:	e24b301c 	sub	r3, fp, #28
   366cc:	e58d3004 	str	r3, [sp, #4]
   366d0:	e24b3018 	sub	r3, fp, #24
   366d4:	e58d3000 	str	r3, [sp]
   366d8:	e3a03000 	mov	r3, #0
   366dc:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   366e0:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
   366e4:	ebff6aa1 	bl	11170 <recvfrom@plt>
   366e8:	e50b0008 	str	r0, [fp, #-8]
   366ec:	e51b3008 	ldr	r3, [fp, #-8]
   366f0:	e3730001 	cmn	r3, #1
   366f4:	03a03001 	moveq	r3, #1
   366f8:	13a03000 	movne	r3, #0
   366fc:	e6ef3073 	uxtb	r3, r3
   36700:	e3530000 	cmp	r3, #0
   36704:	0a00000d 	beq	36740 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0xa0>
   36708:	ebff6b61 	bl	11494 <__errno_location@plt>
   3670c:	e1a03000 	mov	r3, r0
   36710:	e5933000 	ldr	r3, [r3]
   36714:	e353000b 	cmp	r3, #11
   36718:	0a000006 	beq	36738 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x98>
   3671c:	ebff6b5c 	bl	11494 <__errno_location@plt>
   36720:	e1a03000 	mov	r3, r0
   36724:	e5933000 	ldr	r3, [r3]
   36728:	e353000b 	cmp	r3, #11
   3672c:	0a000001 	beq	36738 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0x98>
   36730:	e59f0044 	ldr	r0, [pc, #68]	; 3677c <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0xdc>
   36734:	ebff6abd 	bl	11230 <perror@plt>
   36738:	e3a03000 	mov	r3, #0
   3673c:	ea00000b 	b	36770 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)+0xd0>
   36740:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   36744:	e59b3004 	ldr	r3, [fp, #4]
   36748:	e5832000 	str	r2, [r3]
   3674c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
   36750:	e1a00003 	mov	r0, r3
   36754:	ebff6b06 	bl	11374 <ntohs@plt>
   36758:	e1a03000 	mov	r3, r0
   3675c:	e1a02003 	mov	r2, r3
   36760:	e59b3008 	ldr	r3, [fp, #8]
   36764:	e1c320b0 	strh	r2, [r3]
   36768:	e51b3008 	ldr	r3, [fp, #-8]
   3676c:	e6ff3073 	uxth	r3, r3
   36770:	e1a00003 	mov	r0, r3
   36774:	e24bd004 	sub	sp, fp, #4
   36778:	e8bd8800 	pop	{fp, pc}
   3677c:	00049024 	.word	0x00049024

00036780 <Network::RecvFrom(int, void const**, unsigned int*, unsigned short*)>:
   36780:	e92d4800 	push	{fp, lr}
   36784:	e28db004 	add	fp, sp, #4
   36788:	e24dd018 	sub	sp, sp, #24
   3678c:	e50b0008 	str	r0, [fp, #-8]
   36790:	e50b100c 	str	r1, [fp, #-12]
   36794:	e50b2010 	str	r2, [fp, #-16]
   36798:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   3679c:	e51b3010 	ldr	r3, [fp, #-16]
   367a0:	e59f2034 	ldr	r2, [pc, #52]	; 367dc <Network::RecvFrom(int, void const**, unsigned int*, unsigned short*)+0x5c>
   367a4:	e5832000 	str	r2, [r3]
   367a8:	e59b3004 	ldr	r3, [fp, #4]
   367ac:	e58d3004 	str	r3, [sp, #4]
   367b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   367b4:	e58d3000 	str	r3, [sp]
   367b8:	e59f3020 	ldr	r3, [pc, #32]	; 367e0 <Network::RecvFrom(int, void const**, unsigned int*, unsigned short*)+0x60>
   367bc:	e59f2018 	ldr	r2, [pc, #24]	; 367dc <Network::RecvFrom(int, void const**, unsigned int*, unsigned short*)+0x5c>
   367c0:	e51b100c 	ldr	r1, [fp, #-12]
   367c4:	e51b0008 	ldr	r0, [fp, #-8]
   367c8:	ebffffb4 	bl	366a0 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)>
   367cc:	e1a03000 	mov	r3, r0
   367d0:	e1a00003 	mov	r0, r3
   367d4:	e24bd004 	sub	sp, fp, #4
   367d8:	e8bd8800 	pop	{fp, pc}
   367dc:	0005ec68 	.word	0x0005ec68
   367e0:	00000578 	.word	0x00000578

000367e4 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>:
   367e4:	e92d4800 	push	{fp, lr}
   367e8:	e28db004 	add	fp, sp, #4
   367ec:	e24dd030 	sub	sp, sp, #48	; 0x30
   367f0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   367f4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   367f8:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   367fc:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
   36800:	e3a03010 	mov	r3, #16
   36804:	e50b3008 	str	r3, [fp, #-8]
   36808:	e3a03002 	mov	r3, #2
   3680c:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
   36810:	e59b3004 	ldr	r3, [fp, #4]
   36814:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   36818:	e1db30b8 	ldrh	r3, [fp, #8]
   3681c:	e1a00003 	mov	r0, r3
   36820:	ebff6afa 	bl	11410 <htons@plt>
   36824:	e1a03000 	mov	r3, r0
   36828:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
   3682c:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
   36830:	e51b3008 	ldr	r3, [fp, #-8]
   36834:	e58d3004 	str	r3, [sp, #4]
   36838:	e24b3018 	sub	r3, fp, #24
   3683c:	e58d3000 	str	r3, [sp]
   36840:	e3a03000 	mov	r3, #0
   36844:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   36848:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
   3684c:	ebff6a7a 	bl	1123c <sendto@plt>
   36850:	e1a03000 	mov	r3, r0
   36854:	e3730001 	cmn	r3, #1
   36858:	03a03001 	moveq	r3, #1
   3685c:	13a03000 	movne	r3, #0
   36860:	e6ef3073 	uxtb	r3, r3
   36864:	e3530000 	cmp	r3, #0
   36868:	0a000001 	beq	36874 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)+0x90>
   3686c:	e59f000c 	ldr	r0, [pc, #12]	; 36880 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)+0x9c>
   36870:	ebff6a6e 	bl	11230 <perror@plt>
   36874:	e1a00000 	nop			; (mov r0, r0)
   36878:	e24bd004 	sub	sp, fp, #4
   3687c:	e8bd8800 	pop	{fp, pc}
   36880:	00049030 	.word	0x00049030

00036884 <Network::IsDhclient(char const*)>:
   36884:	e92d4800 	push	{fp, lr}
   36888:	e28db004 	add	fp, sp, #4
   3688c:	e24dde51 	sub	sp, sp, #1296	; 0x510
   36890:	e50b0510 	str	r0, [fp, #-1296]	; 0xfffffaf0
   36894:	e50b1514 	str	r1, [fp, #-1300]	; 0xfffffaec
   36898:	e24b3f42 	sub	r3, fp, #264	; 0x108
   3689c:	e3a020ff 	mov	r2, #255	; 0xff
   368a0:	e3a01000 	mov	r1, #0
   368a4:	e1a00003 	mov	r0, r3
   368a8:	ebff6a6f 	bl	1126c <memset@plt>
   368ac:	e24b3c05 	sub	r3, fp, #1280	; 0x500
   368b0:	e2433004 	sub	r3, r3, #4
   368b4:	e2433004 	sub	r3, r3, #4
   368b8:	e3a02b01 	mov	r2, #1024	; 0x400
   368bc:	e3a01000 	mov	r1, #0
   368c0:	e1a00003 	mov	r0, r3
   368c4:	ebff6a68 	bl	1126c <memset@plt>
   368c8:	e24b0f42 	sub	r0, fp, #264	; 0x108
   368cc:	e51b3514 	ldr	r3, [fp, #-1300]	; 0xfffffaec
   368d0:	e59f20bc 	ldr	r2, [pc, #188]	; 36994 <Network::IsDhclient(char const*)+0x110>
   368d4:	e3a010fe 	mov	r1, #254	; 0xfe
   368d8:	ebff6a66 	bl	11278 <snprintf@plt>
   368dc:	e24b3f42 	sub	r3, fp, #264	; 0x108
   368e0:	e59f10b0 	ldr	r1, [pc, #176]	; 36998 <Network::IsDhclient(char const*)+0x114>
   368e4:	e1a00003 	mov	r0, r3
   368e8:	ebff6a1a 	bl	11158 <popen@plt>
   368ec:	e50b0008 	str	r0, [fp, #-8]
   368f0:	e24b3c05 	sub	r3, fp, #1280	; 0x500
   368f4:	e2433004 	sub	r3, r3, #4
   368f8:	e2433004 	sub	r3, r3, #4
   368fc:	e51b2008 	ldr	r2, [fp, #-8]
   36900:	e3a01b01 	mov	r1, #1024	; 0x400
   36904:	e1a00003 	mov	r0, r3
   36908:	ebff6ab4 	bl	113e0 <fgets@plt>
   3690c:	e1a03000 	mov	r3, r0
   36910:	e3530000 	cmp	r3, #0
   36914:	03a03001 	moveq	r3, #1
   36918:	13a03000 	movne	r3, #0
   3691c:	e6ef3073 	uxtb	r3, r3
   36920:	e3530000 	cmp	r3, #0
   36924:	0a000003 	beq	36938 <Network::IsDhclient(char const*)+0xb4>
   36928:	e51b0008 	ldr	r0, [fp, #-8]
   3692c:	ebff6a96 	bl	1138c <pclose@plt>
   36930:	e3a03000 	mov	r3, #0
   36934:	ea000013 	b	36988 <Network::IsDhclient(char const*)+0x104>
   36938:	e51b0008 	ldr	r0, [fp, #-8]
   3693c:	ebff6a92 	bl	1138c <pclose@plt>
   36940:	e24b3c05 	sub	r3, fp, #1280	; 0x500
   36944:	e2433004 	sub	r3, r3, #4
   36948:	e2433004 	sub	r3, r3, #4
   3694c:	e5d33000 	ldrb	r3, [r3]
   36950:	e3530000 	cmp	r3, #0
   36954:	0a00000a 	beq	36984 <Network::IsDhclient(char const*)+0x100>
   36958:	e24b3c05 	sub	r3, fp, #1280	; 0x500
   3695c:	e2433004 	sub	r3, r3, #4
   36960:	e2433004 	sub	r3, r3, #4
   36964:	e51b1514 	ldr	r1, [fp, #-1300]	; 0xfffffaec
   36968:	e1a00003 	mov	r0, r3
   3696c:	ebff6a83 	bl	11380 <strstr@plt>
   36970:	e1a03000 	mov	r3, r0
   36974:	e3530000 	cmp	r3, #0
   36978:	0a000001 	beq	36984 <Network::IsDhclient(char const*)+0x100>
   3697c:	e3a03001 	mov	r3, #1
   36980:	ea000000 	b	36988 <Network::IsDhclient(char const*)+0x104>
   36984:	e3a03000 	mov	r3, #0
   36988:	e1a00003 	mov	r0, r3
   3698c:	e24bd004 	sub	sp, fp, #4
   36990:	e8bd8800 	pop	{fp, pc}
   36994:	00049038 	.word	0x00049038
   36998:	00049070 	.word	0x00049070

0003699c <Network::GetDefaultGateway()>:
   3699c:	e92d4800 	push	{fp, lr}
   369a0:	e28db004 	add	fp, sp, #4
   369a4:	e24dde51 	sub	sp, sp, #1296	; 0x510
   369a8:	e50b0510 	str	r0, [fp, #-1296]	; 0xfffffaf0
   369ac:	e24b3f42 	sub	r3, fp, #264	; 0x108
   369b0:	e3a020ff 	mov	r2, #255	; 0xff
   369b4:	e3a01000 	mov	r1, #0
   369b8:	e1a00003 	mov	r0, r3
   369bc:	ebff6a2a 	bl	1126c <memset@plt>
   369c0:	e24b3c05 	sub	r3, fp, #1280	; 0x500
   369c4:	e2433004 	sub	r3, r3, #4
   369c8:	e2433004 	sub	r3, r3, #4
   369cc:	e3a02b01 	mov	r2, #1024	; 0x400
   369d0:	e3a01000 	mov	r1, #0
   369d4:	e1a00003 	mov	r0, r3
   369d8:	ebff6a23 	bl	1126c <memset@plt>
   369dc:	e24b3f42 	sub	r3, fp, #264	; 0x108
   369e0:	e59f20a0 	ldr	r2, [pc, #160]	; 36a88 <Network::GetDefaultGateway()+0xec>
   369e4:	e3a010fe 	mov	r1, #254	; 0xfe
   369e8:	e1a00003 	mov	r0, r3
   369ec:	ebff6a21 	bl	11278 <snprintf@plt>
   369f0:	e24b3f42 	sub	r3, fp, #264	; 0x108
   369f4:	e59f1090 	ldr	r1, [pc, #144]	; 36a8c <Network::GetDefaultGateway()+0xf0>
   369f8:	e1a00003 	mov	r0, r3
   369fc:	ebff69d5 	bl	11158 <popen@plt>
   36a00:	e50b0008 	str	r0, [fp, #-8]
   36a04:	e24b3c05 	sub	r3, fp, #1280	; 0x500
   36a08:	e2433004 	sub	r3, r3, #4
   36a0c:	e2433004 	sub	r3, r3, #4
   36a10:	e51b2008 	ldr	r2, [fp, #-8]
   36a14:	e3a01b01 	mov	r1, #1024	; 0x400
   36a18:	e1a00003 	mov	r0, r3
   36a1c:	ebff6a6f 	bl	113e0 <fgets@plt>
   36a20:	e1a03000 	mov	r3, r0
   36a24:	e3530000 	cmp	r3, #0
   36a28:	03a03001 	moveq	r3, #1
   36a2c:	13a03000 	movne	r3, #0
   36a30:	e6ef3073 	uxtb	r3, r3
   36a34:	e3530000 	cmp	r3, #0
   36a38:	0a000003 	beq	36a4c <Network::GetDefaultGateway()+0xb0>
   36a3c:	e51b0008 	ldr	r0, [fp, #-8]
   36a40:	ebff6a51 	bl	1138c <pclose@plt>
   36a44:	e3a03000 	mov	r3, #0
   36a48:	ea00000b 	b	36a7c <Network::GetDefaultGateway()+0xe0>
   36a4c:	e51b0008 	ldr	r0, [fp, #-8]
   36a50:	ebff6a4d 	bl	1138c <pclose@plt>
   36a54:	e24b2c05 	sub	r2, fp, #1280	; 0x500
   36a58:	e2422004 	sub	r2, r2, #4
   36a5c:	e2422008 	sub	r2, r2, #8
   36a60:	e24b3c05 	sub	r3, fp, #1280	; 0x500
   36a64:	e2433004 	sub	r3, r3, #4
   36a68:	e2433004 	sub	r3, r3, #4
   36a6c:	e1a01002 	mov	r1, r2
   36a70:	e1a00003 	mov	r0, r3
   36a74:	ebff69d8 	bl	111dc <inet_aton@plt>
   36a78:	e51b350c 	ldr	r3, [fp, #-1292]	; 0xfffffaf4
   36a7c:	e1a00003 	mov	r0, r3
   36a80:	e24bd004 	sub	sp, fp, #4
   36a84:	e8bd8800 	pop	{fp, pc}
   36a88:	00049074 	.word	0x00049074
   36a8c:	00049070 	.word	0x00049070

00036a90 <Network::IfGetByAddress(char const*, char*, unsigned int)>:
   36a90:	e92d4800 	push	{fp, lr}
   36a94:	e28db004 	add	fp, sp, #4
   36a98:	e24dd040 	sub	sp, sp, #64	; 0x40
   36a9c:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
   36aa0:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
   36aa4:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
   36aa8:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
   36aac:	e24b3010 	sub	r3, fp, #16
   36ab0:	e1a00003 	mov	r0, r3
   36ab4:	ebff6a2b 	bl	11368 <getifaddrs@plt>
   36ab8:	e51b3010 	ldr	r3, [fp, #-16]
   36abc:	e50b3008 	str	r3, [fp, #-8]
   36ac0:	e51b3008 	ldr	r3, [fp, #-8]
   36ac4:	e3530000 	cmp	r3, #0
   36ac8:	0a000026 	beq	36b68 <Network::IfGetByAddress(char const*, char*, unsigned int)+0xd8>
   36acc:	e51b3008 	ldr	r3, [fp, #-8]
   36ad0:	e593300c 	ldr	r3, [r3, #12]
   36ad4:	e1d330b0 	ldrh	r3, [r3]
   36ad8:	e3530002 	cmp	r3, #2
   36adc:	1a00001d 	bne	36b58 <Network::IfGetByAddress(char const*, char*, unsigned int)+0xc8>
   36ae0:	e51b3008 	ldr	r3, [fp, #-8]
   36ae4:	e593300c 	ldr	r3, [r3, #12]
   36ae8:	e50b300c 	str	r3, [fp, #-12]
   36aec:	e51b3008 	ldr	r3, [fp, #-8]
   36af0:	e593300c 	ldr	r3, [r3, #12]
   36af4:	e1d330b0 	ldrh	r3, [r3]
   36af8:	e1a00003 	mov	r0, r3
   36afc:	e51b300c 	ldr	r3, [fp, #-12]
   36b00:	e2831004 	add	r1, r3, #4
   36b04:	e24b2030 	sub	r2, fp, #48	; 0x30
   36b08:	e3a03020 	mov	r3, #32
   36b0c:	ebff69af 	bl	111d0 <inet_ntop@plt>
   36b10:	e24b3030 	sub	r3, fp, #48	; 0x30
   36b14:	e1a01003 	mov	r1, r3
   36b18:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
   36b1c:	ebff6a56 	bl	1147c <strcmp@plt>
   36b20:	e1a03000 	mov	r3, r0
   36b24:	e3530000 	cmp	r3, #0
   36b28:	1a00000a 	bne	36b58 <Network::IfGetByAddress(char const*, char*, unsigned int)+0xc8>
   36b2c:	e51b3008 	ldr	r3, [fp, #-8]
   36b30:	e5933004 	ldr	r3, [r3, #4]
   36b34:	e51b2044 	ldr	r2, [fp, #-68]	; 0xffffffbc
   36b38:	e1a01003 	mov	r1, r3
   36b3c:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
   36b40:	ebff6a56 	bl	114a0 <strncpy@plt>
   36b44:	e51b3010 	ldr	r3, [fp, #-16]
   36b48:	e1a00003 	mov	r0, r3
   36b4c:	ebff69f6 	bl	1132c <freeifaddrs@plt>
   36b50:	e3a03000 	mov	r3, #0
   36b54:	ea000007 	b	36b78 <Network::IfGetByAddress(char const*, char*, unsigned int)+0xe8>
   36b58:	e51b3008 	ldr	r3, [fp, #-8]
   36b5c:	e5933000 	ldr	r3, [r3]
   36b60:	e50b3008 	str	r3, [fp, #-8]
   36b64:	eaffffd5 	b	36ac0 <Network::IfGetByAddress(char const*, char*, unsigned int)+0x30>
   36b68:	e51b3010 	ldr	r3, [fp, #-16]
   36b6c:	e1a00003 	mov	r0, r3
   36b70:	ebff69ed 	bl	1132c <freeifaddrs@plt>
   36b74:	e3e03000 	mvn	r3, #0
   36b78:	e1a00003 	mov	r0, r3
   36b7c:	e24bd004 	sub	sp, fp, #4
   36b80:	e8bd8800 	pop	{fp, pc}

00036b84 <Network::IfDetails(char const*)>:
   36b84:	e92d4800 	push	{fp, lr}
   36b88:	e28db004 	add	fp, sp, #4
   36b8c:	e24dd030 	sub	sp, sp, #48	; 0x30
   36b90:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   36b94:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
   36b98:	e3a02000 	mov	r2, #0
   36b9c:	e3a01002 	mov	r1, #2
   36ba0:	e3a00002 	mov	r0, #2
   36ba4:	ebff69ec 	bl	1135c <socket@plt>
   36ba8:	e50b0008 	str	r0, [fp, #-8]
   36bac:	e51b3008 	ldr	r3, [fp, #-8]
   36bb0:	e3530000 	cmp	r3, #0
   36bb4:	aa000003 	bge	36bc8 <Network::IfDetails(char const*)+0x44>
   36bb8:	e59f015c 	ldr	r0, [pc, #348]	; 36d1c <Network::IfDetails(char const*)+0x198>
   36bbc:	ebff699b 	bl	11230 <perror@plt>
   36bc0:	e3e03000 	mvn	r3, #0
   36bc4:	ea000051 	b	36d10 <Network::IfDetails(char const*)+0x18c>
   36bc8:	e3a03002 	mov	r3, #2
   36bcc:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
   36bd0:	e24b302c 	sub	r3, fp, #44	; 0x2c
   36bd4:	e3a0200f 	mov	r2, #15
   36bd8:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
   36bdc:	e1a00003 	mov	r0, r3
   36be0:	ebff6a2e 	bl	114a0 <strncpy@plt>
   36be4:	e24b302c 	sub	r3, fp, #44	; 0x2c
   36be8:	e1a02003 	mov	r2, r3
   36bec:	e59f112c 	ldr	r1, [pc, #300]	; 36d20 <Network::IfDetails(char const*)+0x19c>
   36bf0:	e51b0008 	ldr	r0, [fp, #-8]
   36bf4:	ebff69b1 	bl	112c0 <ioctl@plt>
   36bf8:	e1a03000 	mov	r3, r0
   36bfc:	e1a03fa3 	lsr	r3, r3, #31
   36c00:	e6ef3073 	uxtb	r3, r3
   36c04:	e3530000 	cmp	r3, #0
   36c08:	0a000005 	beq	36c24 <Network::IfDetails(char const*)+0xa0>
   36c0c:	e59f0110 	ldr	r0, [pc, #272]	; 36d24 <Network::IfDetails(char const*)+0x1a0>
   36c10:	ebff6986 	bl	11230 <perror@plt>
   36c14:	e51b0008 	ldr	r0, [fp, #-8]
   36c18:	ebff6999 	bl	11284 <close@plt>
   36c1c:	e3e03001 	mvn	r3, #1
   36c20:	ea00003a 	b	36d10 <Network::IfDetails(char const*)+0x18c>
   36c24:	e24b302c 	sub	r3, fp, #44	; 0x2c
   36c28:	e2833010 	add	r3, r3, #16
   36c2c:	e5932004 	ldr	r2, [r3, #4]
   36c30:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   36c34:	e5832010 	str	r2, [r3, #16]
   36c38:	e24b302c 	sub	r3, fp, #44	; 0x2c
   36c3c:	e1a02003 	mov	r2, r3
   36c40:	e59f10e0 	ldr	r1, [pc, #224]	; 36d28 <Network::IfDetails(char const*)+0x1a4>
   36c44:	e51b0008 	ldr	r0, [fp, #-8]
   36c48:	ebff699c 	bl	112c0 <ioctl@plt>
   36c4c:	e1a03000 	mov	r3, r0
   36c50:	e1a03fa3 	lsr	r3, r3, #31
   36c54:	e6ef3073 	uxtb	r3, r3
   36c58:	e3530000 	cmp	r3, #0
   36c5c:	0a000005 	beq	36c78 <Network::IfDetails(char const*)+0xf4>
   36c60:	e59f00c4 	ldr	r0, [pc, #196]	; 36d2c <Network::IfDetails(char const*)+0x1a8>
   36c64:	ebff6971 	bl	11230 <perror@plt>
   36c68:	e51b0008 	ldr	r0, [fp, #-8]
   36c6c:	ebff6984 	bl	11284 <close@plt>
   36c70:	e3e03002 	mvn	r3, #2
   36c74:	ea000025 	b	36d10 <Network::IfDetails(char const*)+0x18c>
   36c78:	e24b302c 	sub	r3, fp, #44	; 0x2c
   36c7c:	e2833010 	add	r3, r3, #16
   36c80:	e5932004 	ldr	r2, [r3, #4]
   36c84:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   36c88:	e5832018 	str	r2, [r3, #24]
   36c8c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   36c90:	ebffff41 	bl	3699c <Network::GetDefaultGateway()>
   36c94:	e1a02000 	mov	r2, r0
   36c98:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   36c9c:	e5832014 	str	r2, [r3, #20]
   36ca0:	e24b302c 	sub	r3, fp, #44	; 0x2c
   36ca4:	e1a02003 	mov	r2, r3
   36ca8:	e59f1080 	ldr	r1, [pc, #128]	; 36d30 <Network::IfDetails(char const*)+0x1ac>
   36cac:	e51b0008 	ldr	r0, [fp, #-8]
   36cb0:	ebff6982 	bl	112c0 <ioctl@plt>
   36cb4:	e1a03000 	mov	r3, r0
   36cb8:	e1a03fa3 	lsr	r3, r3, #31
   36cbc:	e6ef3073 	uxtb	r3, r3
   36cc0:	e3530000 	cmp	r3, #0
   36cc4:	0a000005 	beq	36ce0 <Network::IfDetails(char const*)+0x15c>
   36cc8:	e59f0064 	ldr	r0, [pc, #100]	; 36d34 <Network::IfDetails(char const*)+0x1b0>
   36ccc:	ebff6957 	bl	11230 <perror@plt>
   36cd0:	e51b0008 	ldr	r0, [fp, #-8]
   36cd4:	ebff696a 	bl	11284 <close@plt>
   36cd8:	e3e03004 	mvn	r3, #4
   36cdc:	ea00000b 	b	36d10 <Network::IfDetails(char const*)+0x18c>
   36ce0:	e24b302c 	sub	r3, fp, #44	; 0x2c
   36ce4:	e2833012 	add	r3, r3, #18
   36ce8:	e50b300c 	str	r3, [fp, #-12]
   36cec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   36cf0:	e283309c 	add	r3, r3, #156	; 0x9c
   36cf4:	e3a02006 	mov	r2, #6
   36cf8:	e51b100c 	ldr	r1, [fp, #-12]
   36cfc:	e1a00003 	mov	r0, r3
   36d00:	ebff69bf 	bl	11404 <memcpy@plt>
   36d04:	e51b0008 	ldr	r0, [fp, #-8]
   36d08:	ebff695d 	bl	11284 <close@plt>
   36d0c:	e3a03000 	mov	r3, #0
   36d10:	e1a00003 	mov	r0, r3
   36d14:	e24bd004 	sub	sp, fp, #4
   36d18:	e8bd8800 	pop	{fp, pc}
   36d1c:	00048ef8 	.word	0x00048ef8
   36d20:	00008915 	.word	0x00008915
   36d24:	000490a0 	.word	0x000490a0
   36d28:	0000891b 	.word	0x0000891b
   36d2c:	000490c0 	.word	0x000490c0
   36d30:	00008927 	.word	0x00008927
   36d34:	000490e0 	.word	0x000490e0

00036d38 <Network::SetHostName(char const*)>:
   36d38:	e92d4800 	push	{fp, lr}
   36d3c:	e28db004 	add	fp, sp, #4
   36d40:	e24dd008 	sub	sp, sp, #8
   36d44:	e50b0008 	str	r0, [fp, #-8]
   36d48:	e50b100c 	str	r1, [fp, #-12]
   36d4c:	e51b000c 	ldr	r0, [fp, #-12]
   36d50:	ebff69b4 	bl	11428 <strlen@plt>
   36d54:	e1a03000 	mov	r3, r0
   36d58:	e1a01003 	mov	r1, r3
   36d5c:	e51b000c 	ldr	r0, [fp, #-12]
   36d60:	ebff694a 	bl	11290 <sethostname@plt>
   36d64:	e1a03000 	mov	r3, r0
   36d68:	e1a03fa3 	lsr	r3, r3, #31
   36d6c:	e6ef3073 	uxtb	r3, r3
   36d70:	e3530000 	cmp	r3, #0
   36d74:	0a000001 	beq	36d80 <Network::SetHostName(char const*)+0x48>
   36d78:	e59f0048 	ldr	r0, [pc, #72]	; 36dc8 <Network::SetHostName(char const*)+0x90>
   36d7c:	ebff692b 	bl	11230 <perror@plt>
   36d80:	e51b3008 	ldr	r3, [fp, #-8]
   36d84:	e283301c 	add	r3, r3, #28
   36d88:	e3a01040 	mov	r1, #64	; 0x40
   36d8c:	e1a00003 	mov	r0, r3
   36d90:	ebff6986 	bl	113b0 <gethostname@plt>
   36d94:	e1a03000 	mov	r3, r0
   36d98:	e1a03fa3 	lsr	r3, r3, #31
   36d9c:	e6ef3073 	uxtb	r3, r3
   36da0:	e3530000 	cmp	r3, #0
   36da4:	0a000001 	beq	36db0 <Network::SetHostName(char const*)+0x78>
   36da8:	e59f001c 	ldr	r0, [pc, #28]	; 36dcc <Network::SetHostName(char const*)+0x94>
   36dac:	ebff691f 	bl	11230 <perror@plt>
   36db0:	e51b3008 	ldr	r3, [fp, #-8]
   36db4:	e3a02000 	mov	r2, #0
   36db8:	e5c3205b 	strb	r2, [r3, #91]	; 0x5b
   36dbc:	e1a00000 	nop			; (mov r0, r0)
   36dc0:	e24bd004 	sub	sp, fp, #4
   36dc4:	e8bd8800 	pop	{fp, pc}
   36dc8:	00049100 	.word	0x00049100
   36dcc:	00048ed4 	.word	0x00048ed4

00036dd0 <Network::SetQueuedStaticIp(unsigned int, unsigned int)>:
   36dd0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   36dd4:	e28db000 	add	fp, sp, #0
   36dd8:	e24dd014 	sub	sp, sp, #20
   36ddc:	e50b0008 	str	r0, [fp, #-8]
   36de0:	e50b100c 	str	r1, [fp, #-12]
   36de4:	e50b2010 	str	r2, [fp, #-16]
   36de8:	e51b300c 	ldr	r3, [fp, #-12]
   36dec:	e3530000 	cmp	r3, #0
   36df0:	0a000002 	beq	36e00 <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0x30>
   36df4:	e51b3008 	ldr	r3, [fp, #-8]
   36df8:	e51b200c 	ldr	r2, [fp, #-12]
   36dfc:	e58320bc 	str	r2, [r3, #188]	; 0xbc
   36e00:	e51b3010 	ldr	r3, [fp, #-16]
   36e04:	e3530000 	cmp	r3, #0
   36e08:	0a000002 	beq	36e18 <Network::SetQueuedStaticIp(unsigned int, unsigned int)+0x48>
   36e0c:	e51b3008 	ldr	r3, [fp, #-8]
   36e10:	e51b2010 	ldr	r2, [fp, #-16]
   36e14:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   36e18:	e51b3008 	ldr	r3, [fp, #-8]
   36e1c:	e59330b8 	ldr	r3, [r3, #184]	; 0xb8
   36e20:	e3832001 	orr	r2, r3, #1
   36e24:	e51b3008 	ldr	r3, [fp, #-8]
   36e28:	e58320b8 	str	r2, [r3, #184]	; 0xb8
   36e2c:	e51b3008 	ldr	r3, [fp, #-8]
   36e30:	e59330b8 	ldr	r3, [r3, #184]	; 0xb8
   36e34:	e3832002 	orr	r2, r3, #2
   36e38:	e51b3008 	ldr	r3, [fp, #-8]
   36e3c:	e58320b8 	str	r2, [r3, #184]	; 0xb8
   36e40:	e1a00000 	nop			; (mov r0, r0)
   36e44:	e28bd000 	add	sp, fp, #0
   36e48:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   36e4c:	e12fff1e 	bx	lr

00036e50 <Network::ApplyQueuedConfig()>:
   36e50:	e92d4800 	push	{fp, lr}
   36e54:	e28db004 	add	fp, sp, #4
   36e58:	e24dd008 	sub	sp, sp, #8
   36e5c:	e50b0008 	str	r0, [fp, #-8]
   36e60:	e51b3008 	ldr	r3, [fp, #-8]
   36e64:	e59330b8 	ldr	r3, [r3, #184]	; 0xb8
   36e68:	e3530000 	cmp	r3, #0
   36e6c:	1a000001 	bne	36e78 <Network::ApplyQueuedConfig()+0x28>
   36e70:	e3a03000 	mov	r3, #0
   36e74:	ea00004b 	b	36fa8 <Network::ApplyQueuedConfig()+0x158>
   36e78:	e3a01001 	mov	r1, #1
   36e7c:	e51b0008 	ldr	r0, [fp, #-8]
   36e80:	ebfffaa4 	bl	35918 <Network::isQueuedMaskSet(unsigned int)>
   36e84:	e1a03000 	mov	r3, r0
   36e88:	e3530000 	cmp	r3, #0
   36e8c:	1a000005 	bne	36ea8 <Network::ApplyQueuedConfig()+0x58>
   36e90:	e3a01002 	mov	r1, #2
   36e94:	e51b0008 	ldr	r0, [fp, #-8]
   36e98:	ebfffa9e 	bl	35918 <Network::isQueuedMaskSet(unsigned int)>
   36e9c:	e1a03000 	mov	r3, r0
   36ea0:	e3530000 	cmp	r3, #0
   36ea4:	0a000001 	beq	36eb0 <Network::ApplyQueuedConfig()+0x60>
   36ea8:	e3a03001 	mov	r3, #1
   36eac:	ea000000 	b	36eb4 <Network::ApplyQueuedConfig()+0x64>
   36eb0:	e3a03000 	mov	r3, #0
   36eb4:	e3530000 	cmp	r3, #0
   36eb8:	0a00001f 	beq	36f3c <Network::ApplyQueuedConfig()+0xec>
   36ebc:	e3a01002 	mov	r1, #2
   36ec0:	e51b0008 	ldr	r0, [fp, #-8]
   36ec4:	ebfffa93 	bl	35918 <Network::isQueuedMaskSet(unsigned int)>
   36ec8:	e1a03000 	mov	r3, r0
   36ecc:	e3530000 	cmp	r3, #0
   36ed0:	0a000009 	beq	36efc <Network::ApplyQueuedConfig()+0xac>
   36ed4:	e51b3008 	ldr	r3, [fp, #-8]
   36ed8:	e59330c0 	ldr	r3, [r3, #192]	; 0xc0
   36edc:	e1a01003 	mov	r1, r3
   36ee0:	e51b0008 	ldr	r0, [fp, #-8]
   36ee4:	ebfffd97 	bl	36548 <Network::SetNetmask(unsigned int)>
   36ee8:	e51b3008 	ldr	r3, [fp, #-8]
   36eec:	e59330b8 	ldr	r3, [r3, #184]	; 0xb8
   36ef0:	e3c32002 	bic	r2, r3, #2
   36ef4:	e51b3008 	ldr	r3, [fp, #-8]
   36ef8:	e58320b8 	str	r2, [r3, #184]	; 0xb8
   36efc:	e3a01001 	mov	r1, #1
   36f00:	e51b0008 	ldr	r0, [fp, #-8]
   36f04:	ebfffa83 	bl	35918 <Network::isQueuedMaskSet(unsigned int)>
   36f08:	e1a03000 	mov	r3, r0
   36f0c:	e3530000 	cmp	r3, #0
   36f10:	0a000009 	beq	36f3c <Network::ApplyQueuedConfig()+0xec>
   36f14:	e51b3008 	ldr	r3, [fp, #-8]
   36f18:	e59330bc 	ldr	r3, [r3, #188]	; 0xbc
   36f1c:	e1a01003 	mov	r1, r3
   36f20:	e51b0008 	ldr	r0, [fp, #-8]
   36f24:	ebfffd1b 	bl	36398 <Network::SetIp(unsigned int)>
   36f28:	e51b3008 	ldr	r3, [fp, #-8]
   36f2c:	e59330b8 	ldr	r3, [r3, #184]	; 0xb8
   36f30:	e3c32001 	bic	r2, r3, #1
   36f34:	e51b3008 	ldr	r3, [fp, #-8]
   36f38:	e58320b8 	str	r2, [r3, #184]	; 0xb8
   36f3c:	e3a01004 	mov	r1, #4
   36f40:	e51b0008 	ldr	r0, [fp, #-8]
   36f44:	ebfffa73 	bl	35918 <Network::isQueuedMaskSet(unsigned int)>
   36f48:	e1a03000 	mov	r3, r0
   36f4c:	e3530000 	cmp	r3, #0
   36f50:	0a000006 	beq	36f70 <Network::ApplyQueuedConfig()+0x120>
   36f54:	e51b0008 	ldr	r0, [fp, #-8]
   36f58:	ebffaf01 	bl	22b64 <Network::EnableDhcp()>
   36f5c:	e51b3008 	ldr	r3, [fp, #-8]
   36f60:	e59330b8 	ldr	r3, [r3, #184]	; 0xb8
   36f64:	e3c32004 	bic	r2, r3, #4
   36f68:	e51b3008 	ldr	r3, [fp, #-8]
   36f6c:	e58320b8 	str	r2, [r3, #184]	; 0xb8
   36f70:	e3a01008 	mov	r1, #8
   36f74:	e51b0008 	ldr	r0, [fp, #-8]
   36f78:	ebfffa66 	bl	35918 <Network::isQueuedMaskSet(unsigned int)>
   36f7c:	e1a03000 	mov	r3, r0
   36f80:	e3530000 	cmp	r3, #0
   36f84:	0a000006 	beq	36fa4 <Network::ApplyQueuedConfig()+0x154>
   36f88:	e51b0008 	ldr	r0, [fp, #-8]
   36f8c:	ebfffa16 	bl	357ec <Network::SetZeroconf()>
   36f90:	e51b3008 	ldr	r3, [fp, #-8]
   36f94:	e59330b8 	ldr	r3, [r3, #184]	; 0xb8
   36f98:	e3c32008 	bic	r2, r3, #8
   36f9c:	e51b3008 	ldr	r3, [fp, #-8]
   36fa0:	e58320b8 	str	r2, [r3, #184]	; 0xb8
   36fa4:	e3a03001 	mov	r3, #1
   36fa8:	e1a00003 	mov	r0, r3
   36fac:	e24bd004 	sub	sp, fp, #4
   36fb0:	e8bd8800 	pop	{fp, pc}

00036fb4 <Network::Print()>:
   36fb4:	e92d48f0 	push	{r4, r5, r6, r7, fp, lr}
   36fb8:	e28db014 	add	fp, sp, #20
   36fbc:	e24dd018 	sub	sp, sp, #24
   36fc0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   36fc4:	e59f0220 	ldr	r0, [pc, #544]	; 371ec <Network::Print()+0x238>
   36fc8:	ebff6895 	bl	11224 <puts@plt>
   36fcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   36fd0:	e283301c 	add	r3, r3, #28
   36fd4:	e1a01003 	mov	r1, r3
   36fd8:	e59f0210 	ldr	r0, [pc, #528]	; 371f0 <Network::Print()+0x23c>
   36fdc:	ebff6884 	bl	111f4 <printf@plt>
   36fe0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   36fe4:	e283305c 	add	r3, r3, #92	; 0x5c
   36fe8:	e1a01003 	mov	r1, r3
   36fec:	e59f0200 	ldr	r0, [pc, #512]	; 371f4 <Network::Print()+0x240>
   36ff0:	ebff687f 	bl	111f4 <printf@plt>
   36ff4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   36ff8:	e5931004 	ldr	r1, [r3, #4]
   36ffc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37000:	e28330a2 	add	r3, r3, #162	; 0xa2
   37004:	e1a02003 	mov	r2, r3
   37008:	e59f01e8 	ldr	r0, [pc, #488]	; 371f8 <Network::Print()+0x244>
   3700c:	ebff6878 	bl	111f4 <printf@plt>
   37010:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37014:	e5933010 	ldr	r3, [r3, #16]
   37018:	e6ef5073 	uxtb	r5, r3
   3701c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37020:	e5933010 	ldr	r3, [r3, #16]
   37024:	e1a03423 	lsr	r3, r3, #8
   37028:	e6ef6073 	uxtb	r6, r3
   3702c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37030:	e5933010 	ldr	r3, [r3, #16]
   37034:	e1a03823 	lsr	r3, r3, #16
   37038:	e6ef7073 	uxtb	r7, r3
   3703c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37040:	e5933010 	ldr	r3, [r3, #16]
   37044:	e1a04c23 	lsr	r4, r3, #24
   37048:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3704c:	ebfff9ef 	bl	35810 <Network::GetNetmaskCIDR() const>
   37050:	e1a03000 	mov	r3, r0
   37054:	e58d3004 	str	r3, [sp, #4]
   37058:	e58d4000 	str	r4, [sp]
   3705c:	e1a03007 	mov	r3, r7
   37060:	e1a02006 	mov	r2, r6
   37064:	e1a01005 	mov	r1, r5
   37068:	e59f018c 	ldr	r0, [pc, #396]	; 371fc <Network::Print()+0x248>
   3706c:	ebff6860 	bl	111f4 <printf@plt>
   37070:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37074:	e5933018 	ldr	r3, [r3, #24]
   37078:	e6ef1073 	uxtb	r1, r3
   3707c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37080:	e5933018 	ldr	r3, [r3, #24]
   37084:	e1a03423 	lsr	r3, r3, #8
   37088:	e6ef2073 	uxtb	r2, r3
   3708c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37090:	e5933018 	ldr	r3, [r3, #24]
   37094:	e1a03823 	lsr	r3, r3, #16
   37098:	e6ef0073 	uxtb	r0, r3
   3709c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   370a0:	e5933018 	ldr	r3, [r3, #24]
   370a4:	e1a03c23 	lsr	r3, r3, #24
   370a8:	e58d3000 	str	r3, [sp]
   370ac:	e1a03000 	mov	r3, r0
   370b0:	e59f0148 	ldr	r0, [pc, #328]	; 37200 <Network::Print()+0x24c>
   370b4:	ebff684e 	bl	111f4 <printf@plt>
   370b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   370bc:	e5933014 	ldr	r3, [r3, #20]
   370c0:	e6ef1073 	uxtb	r1, r3
   370c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   370c8:	e5933014 	ldr	r3, [r3, #20]
   370cc:	e1a03423 	lsr	r3, r3, #8
   370d0:	e6ef2073 	uxtb	r2, r3
   370d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   370d8:	e5933014 	ldr	r3, [r3, #20]
   370dc:	e1a03823 	lsr	r3, r3, #16
   370e0:	e6ef0073 	uxtb	r0, r3
   370e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   370e8:	e5933014 	ldr	r3, [r3, #20]
   370ec:	e1a03c23 	lsr	r3, r3, #24
   370f0:	e58d3000 	str	r3, [sp]
   370f4:	e1a03000 	mov	r3, r0
   370f8:	e59f0104 	ldr	r0, [pc, #260]	; 37204 <Network::Print()+0x250>
   370fc:	ebff683c 	bl	111f4 <printf@plt>
   37100:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   37104:	ebff9f9e 	bl	1ef84 <Network::GetBroadcastIp() const>
   37108:	e1a03000 	mov	r3, r0
   3710c:	e6ef4073 	uxtb	r4, r3
   37110:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   37114:	ebff9f9a 	bl	1ef84 <Network::GetBroadcastIp() const>
   37118:	e1a03000 	mov	r3, r0
   3711c:	e1a03423 	lsr	r3, r3, #8
   37120:	e6ef5073 	uxtb	r5, r3
   37124:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   37128:	ebff9f95 	bl	1ef84 <Network::GetBroadcastIp() const>
   3712c:	e1a03000 	mov	r3, r0
   37130:	e1a03823 	lsr	r3, r3, #16
   37134:	e6ef6073 	uxtb	r6, r3
   37138:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3713c:	ebff9f90 	bl	1ef84 <Network::GetBroadcastIp() const>
   37140:	e1a03000 	mov	r3, r0
   37144:	e1a03c23 	lsr	r3, r3, #24
   37148:	e6ef3073 	uxtb	r3, r3
   3714c:	e58d3000 	str	r3, [sp]
   37150:	e1a03006 	mov	r3, r6
   37154:	e1a02005 	mov	r2, r5
   37158:	e1a01004 	mov	r1, r4
   3715c:	e59f00a4 	ldr	r0, [pc, #164]	; 37208 <Network::Print()+0x254>
   37160:	ebff6823 	bl	111f4 <printf@plt>
   37164:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37168:	e5d3309c 	ldrb	r3, [r3, #156]	; 0x9c
   3716c:	e1a00003 	mov	r0, r3
   37170:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37174:	e5d3309d 	ldrb	r3, [r3, #157]	; 0x9d
   37178:	e1a0c003 	mov	ip, r3
   3717c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37180:	e5d3309e 	ldrb	r3, [r3, #158]	; 0x9e
   37184:	e1a0e003 	mov	lr, r3
   37188:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3718c:	e5d3309f 	ldrb	r3, [r3, #159]	; 0x9f
   37190:	e1a02003 	mov	r2, r3
   37194:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37198:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
   3719c:	e1a01003 	mov	r1, r3
   371a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   371a4:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
   371a8:	e58d3008 	str	r3, [sp, #8]
   371ac:	e58d1004 	str	r1, [sp, #4]
   371b0:	e58d2000 	str	r2, [sp]
   371b4:	e1a0300e 	mov	r3, lr
   371b8:	e1a0200c 	mov	r2, ip
   371bc:	e1a01000 	mov	r1, r0
   371c0:	e59f0044 	ldr	r0, [pc, #68]	; 3720c <Network::Print()+0x258>
   371c4:	ebff680a 	bl	111f4 <printf@plt>
   371c8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   371cc:	ebfff9a5 	bl	35868 <Network::GetAddressingMode()>
   371d0:	e1a03000 	mov	r3, r0
   371d4:	e1a01003 	mov	r1, r3
   371d8:	e59f0030 	ldr	r0, [pc, #48]	; 37210 <Network::Print()+0x25c>
   371dc:	ebff6804 	bl	111f4 <printf@plt>
   371e0:	e1a00000 	nop			; (mov r0, r0)
   371e4:	e24bd014 	sub	sp, fp, #20
   371e8:	e8bd88f0 	pop	{r4, r5, r6, r7, fp, pc}
   371ec:	0004910c 	.word	0x0004910c
   371f0:	00049114 	.word	0x00049114
   371f4:	00049128 	.word	0x00049128
   371f8:	0004913c 	.word	0x0004913c
   371fc:	00049154 	.word	0x00049154
   37200:	00049174 	.word	0x00049174
   37204:	00049190 	.word	0x00049190
   37208:	000491ac 	.word	0x000491ac
   3720c:	000491c8 	.word	0x000491c8
   37210:	000491f4 	.word	0x000491f4

00037214 <TFTPDaemon::TFTPDaemon()>:
   37214:	e92d4800 	push	{fp, lr}
   37218:	e28db004 	add	fp, sp, #4
   3721c:	e24dd008 	sub	sp, sp, #8
   37220:	e50b0008 	str	r0, [fp, #-8]
   37224:	e59f20e4 	ldr	r2, [pc, #228]	; 37310 <TFTPDaemon::TFTPDaemon()+0xfc>
   37228:	e51b3008 	ldr	r3, [fp, #-8]
   3722c:	e5832000 	str	r2, [r3]
   37230:	e51b3008 	ldr	r3, [fp, #-8]
   37234:	e3a02000 	mov	r2, #0
   37238:	e5832004 	str	r2, [r3, #4]
   3723c:	e51b3008 	ldr	r3, [fp, #-8]
   37240:	e3e02000 	mvn	r2, #0
   37244:	e5832008 	str	r2, [r3, #8]
   37248:	e51b3008 	ldr	r3, [fp, #-8]
   3724c:	e3a02000 	mov	r2, #0
   37250:	e583221c 	str	r2, [r3, #540]	; 0x21c
   37254:	e51b3008 	ldr	r3, [fp, #-8]
   37258:	e2833e22 	add	r3, r3, #544	; 0x220
   3725c:	e3a02000 	mov	r2, #0
   37260:	e1c320b0 	strh	r2, [r3]
   37264:	e51b3008 	ldr	r3, [fp, #-8]
   37268:	e3a02000 	mov	r2, #0
   3726c:	e5832224 	str	r2, [r3, #548]	; 0x224
   37270:	e51b3008 	ldr	r3, [fp, #-8]
   37274:	e2833f8a 	add	r3, r3, #552	; 0x228
   37278:	e3a02000 	mov	r2, #0
   3727c:	e1c320b0 	strh	r2, [r3]
   37280:	e51b3008 	ldr	r3, [fp, #-8]
   37284:	e3a02000 	mov	r2, #0
   37288:	e583222c 	str	r2, [r3, #556]	; 0x22c
   3728c:	e51b3008 	ldr	r3, [fp, #-8]
   37290:	e2833e23 	add	r3, r3, #560	; 0x230
   37294:	e3a02000 	mov	r2, #0
   37298:	e1c320b0 	strh	r2, [r3]
   3729c:	e51b3008 	ldr	r3, [fp, #-8]
   372a0:	e3a02000 	mov	r2, #0
   372a4:	e5c32232 	strb	r2, [r3, #562]	; 0x232
   372a8:	e59f3064 	ldr	r3, [pc, #100]	; 37314 <TFTPDaemon::TFTPDaemon()+0x100>
   372ac:	e5933000 	ldr	r3, [r3]
   372b0:	e3530000 	cmp	r3, #0
   372b4:	0a000008 	beq	372dc <TFTPDaemon::TFTPDaemon()+0xc8>
   372b8:	e59f3054 	ldr	r3, [pc, #84]	; 37314 <TFTPDaemon::TFTPDaemon()+0x100>
   372bc:	e5932000 	ldr	r2, [r3]
   372c0:	e59f304c 	ldr	r3, [pc, #76]	; 37314 <TFTPDaemon::TFTPDaemon()+0x100>
   372c4:	e5933000 	ldr	r3, [r3]
   372c8:	e5933000 	ldr	r3, [r3]
   372cc:	e283301c 	add	r3, r3, #28
   372d0:	e5933000 	ldr	r3, [r3]
   372d4:	e1a00002 	mov	r0, r2
   372d8:	e12fff33 	blx	r3
   372dc:	e59f2030 	ldr	r2, [pc, #48]	; 37314 <TFTPDaemon::TFTPDaemon()+0x100>
   372e0:	e51b3008 	ldr	r3, [fp, #-8]
   372e4:	e5823000 	str	r3, [r2]
   372e8:	e51b3008 	ldr	r3, [fp, #-8]
   372ec:	e283300c 	add	r3, r3, #12
   372f0:	e3a02e21 	mov	r2, #528	; 0x210
   372f4:	e3a01000 	mov	r1, #0
   372f8:	e1a00003 	mov	r0, r3
   372fc:	ebff67da 	bl	1126c <memset@plt>
   37300:	e51b3008 	ldr	r3, [fp, #-8]
   37304:	e1a00003 	mov	r0, r3
   37308:	e24bd004 	sub	sp, fp, #4
   3730c:	e8bd8800 	pop	{fp, pc}
   37310:	000492ac 	.word	0x000492ac
   37314:	0005f2e4 	.word	0x0005f2e4

00037318 <TFTPDaemon::~TFTPDaemon()>:
   37318:	e92d4800 	push	{fp, lr}
   3731c:	e28db004 	add	fp, sp, #4
   37320:	e24dd008 	sub	sp, sp, #8
   37324:	e50b0008 	str	r0, [fp, #-8]
   37328:	e59f2040 	ldr	r2, [pc, #64]	; 37370 <TFTPDaemon::~TFTPDaemon()+0x58>
   3732c:	e51b3008 	ldr	r3, [fp, #-8]
   37330:	e5832000 	str	r2, [r3]
   37334:	ebff84eb 	bl	186e8 <Network::Get()>
   37338:	e1a02000 	mov	r2, r0
   3733c:	e51b3008 	ldr	r3, [fp, #-8]
   37340:	e2833e22 	add	r3, r3, #544	; 0x220
   37344:	e1d330b0 	ldrh	r3, [r3]
   37348:	e1a01003 	mov	r1, r3
   3734c:	e1a00002 	mov	r0, r2
   37350:	ebfffbcc 	bl	36288 <Network::End(unsigned short)>
   37354:	e59f3018 	ldr	r3, [pc, #24]	; 37374 <TFTPDaemon::~TFTPDaemon()+0x5c>
   37358:	e3a02000 	mov	r2, #0
   3735c:	e5832000 	str	r2, [r3]
   37360:	e51b3008 	ldr	r3, [fp, #-8]
   37364:	e1a00003 	mov	r0, r3
   37368:	e24bd004 	sub	sp, fp, #4
   3736c:	e8bd8800 	pop	{fp, pc}
   37370:	000492ac 	.word	0x000492ac
   37374:	0005f2e4 	.word	0x0005f2e4

00037378 <TFTPDaemon::~TFTPDaemon()>:
   37378:	e92d4800 	push	{fp, lr}
   3737c:	e28db004 	add	fp, sp, #4
   37380:	e24dd008 	sub	sp, sp, #8
   37384:	e50b0008 	str	r0, [fp, #-8]
   37388:	e51b0008 	ldr	r0, [fp, #-8]
   3738c:	ebffffe1 	bl	37318 <TFTPDaemon::~TFTPDaemon()>
   37390:	e51b0008 	ldr	r0, [fp, #-8]
   37394:	ebff67db 	bl	11308 <operator delete(void*)@plt>
   37398:	e51b3008 	ldr	r3, [fp, #-8]
   3739c:	e1a00003 	mov	r0, r3
   373a0:	e24bd004 	sub	sp, fp, #4
   373a4:	e8bd8800 	pop	{fp, pc}

000373a8 <TFTPDaemon::Run()>:
   373a8:	e92d4800 	push	{fp, lr}
   373ac:	e28db004 	add	fp, sp, #4
   373b0:	e24dd010 	sub	sp, sp, #16
   373b4:	e50b0008 	str	r0, [fp, #-8]
   373b8:	e51b3008 	ldr	r3, [fp, #-8]
   373bc:	e5933004 	ldr	r3, [r3, #4]
   373c0:	e3530000 	cmp	r3, #0
   373c4:	1a00002c 	bne	3747c <TFTPDaemon::Run()+0xd4>
   373c8:	e51b3008 	ldr	r3, [fp, #-8]
   373cc:	e2833e22 	add	r3, r3, #544	; 0x220
   373d0:	e1d330b0 	ldrh	r3, [r3]
   373d4:	e3530000 	cmp	r3, #0
   373d8:	0a00000a 	beq	37408 <TFTPDaemon::Run()+0x60>
   373dc:	ebff84c1 	bl	186e8 <Network::Get()>
   373e0:	e1a02000 	mov	r2, r0
   373e4:	e51b3008 	ldr	r3, [fp, #-8]
   373e8:	e2833e22 	add	r3, r3, #544	; 0x220
   373ec:	e1d330b0 	ldrh	r3, [r3]
   373f0:	e1a01003 	mov	r1, r3
   373f4:	e1a00002 	mov	r0, r2
   373f8:	ebfffba2 	bl	36288 <Network::End(unsigned short)>
   373fc:	e51b3008 	ldr	r3, [fp, #-8]
   37400:	e3e02000 	mvn	r2, #0
   37404:	e5832008 	str	r2, [r3, #8]
   37408:	ebff84b6 	bl	186e8 <Network::Get()>
   3740c:	e1a03000 	mov	r3, r0
   37410:	e3a01045 	mov	r1, #69	; 0x45
   37414:	e1a00003 	mov	r0, r3
   37418:	ebfffaa5 	bl	35eb4 <Network::Begin(unsigned short)>
   3741c:	e1a02000 	mov	r2, r0
   37420:	e51b3008 	ldr	r3, [fp, #-8]
   37424:	e5832008 	str	r2, [r3, #8]
   37428:	e51b3008 	ldr	r3, [fp, #-8]
   3742c:	e2833e22 	add	r3, r3, #544	; 0x220
   37430:	e3a02045 	mov	r2, #69	; 0x45
   37434:	e1c320b0 	strh	r2, [r3]
   37438:	e51b3008 	ldr	r3, [fp, #-8]
   3743c:	e2833f8a 	add	r3, r3, #552	; 0x228
   37440:	e3a02000 	mov	r2, #0
   37444:	e1c320b0 	strh	r2, [r3]
   37448:	e51b3008 	ldr	r3, [fp, #-8]
   3744c:	e3a02001 	mov	r2, #1
   37450:	e5832004 	str	r2, [r3, #4]
   37454:	e51b3008 	ldr	r3, [fp, #-8]
   37458:	e3a02000 	mov	r2, #0
   3745c:	e5c32232 	strb	r2, [r3, #562]	; 0x232
   37460:	e51b3008 	ldr	r3, [fp, #-8]
   37464:	e283300c 	add	r3, r3, #12
   37468:	e3a02094 	mov	r2, #148	; 0x94
   3746c:	e3a01000 	mov	r1, #0
   37470:	e1a00003 	mov	r0, r3
   37474:	ebff677c 	bl	1126c <memset@plt>
   37478:	ea00003b 	b	3756c <TFTPDaemon::Run()+0x1c4>
   3747c:	ebff8499 	bl	186e8 <Network::Get()>
   37480:	e1a0c000 	mov	ip, r0
   37484:	e51b3008 	ldr	r3, [fp, #-8]
   37488:	e5931008 	ldr	r1, [r3, #8]
   3748c:	e51b3008 	ldr	r3, [fp, #-8]
   37490:	e283000c 	add	r0, r3, #12
   37494:	e51b3008 	ldr	r3, [fp, #-8]
   37498:	e2833f87 	add	r3, r3, #540	; 0x21c
   3749c:	e51b2008 	ldr	r2, [fp, #-8]
   374a0:	e2822e22 	add	r2, r2, #544	; 0x220
   374a4:	e58d2004 	str	r2, [sp, #4]
   374a8:	e58d3000 	str	r3, [sp]
   374ac:	e3a03e21 	mov	r3, #528	; 0x210
   374b0:	e1a02000 	mov	r2, r0
   374b4:	e1a0000c 	mov	r0, ip
   374b8:	ebfffc78 	bl	366a0 <Network::RecvFrom(int, void*, unsigned short, unsigned int*, unsigned short*)>
   374bc:	e1a03000 	mov	r3, r0
   374c0:	e1a02003 	mov	r2, r3
   374c4:	e51b3008 	ldr	r3, [fp, #-8]
   374c8:	e5832224 	str	r2, [r3, #548]	; 0x224
   374cc:	e51b3008 	ldr	r3, [fp, #-8]
   374d0:	e5933004 	ldr	r3, [r3, #4]
   374d4:	e2433001 	sub	r3, r3, #1
   374d8:	e3530004 	cmp	r3, #4
   374dc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   374e0:	ea000015 	b	3753c <TFTPDaemon::Run()+0x194>
   374e4:	000374f8 	.word	0x000374f8
   374e8:	00037514 	.word	0x00037514
   374ec:	00037520 	.word	0x00037520
   374f0:	0003753c 	.word	0x0003753c
   374f4:	0003753c 	.word	0x0003753c
   374f8:	e51b3008 	ldr	r3, [fp, #-8]
   374fc:	e5933224 	ldr	r3, [r3, #548]	; 0x224
   37500:	e3530004 	cmp	r3, #4
   37504:	9a000013 	bls	37558 <TFTPDaemon::Run()+0x1b0>
   37508:	e51b0008 	ldr	r0, [fp, #-8]
   3750c:	eb00001a 	bl	3757c <TFTPDaemon::HandleRequest()>
   37510:	ea000010 	b	37558 <TFTPDaemon::Run()+0x1b0>
   37514:	e51b0008 	ldr	r0, [fp, #-8]
   37518:	eb0000ea 	bl	378c8 <TFTPDaemon::DoRead()>
   3751c:	ea000012 	b	3756c <TFTPDaemon::Run()+0x1c4>
   37520:	e51b3008 	ldr	r3, [fp, #-8]
   37524:	e5933224 	ldr	r3, [r3, #548]	; 0x224
   37528:	e3530004 	cmp	r3, #4
   3752c:	1a00000b 	bne	37560 <TFTPDaemon::Run()+0x1b8>
   37530:	e51b0008 	ldr	r0, [fp, #-8]
   37534:	eb000150 	bl	37a7c <TFTPDaemon::HandleRecvAck()>
   37538:	ea000008 	b	37560 <TFTPDaemon::Run()+0x1b8>
   3753c:	e51b3008 	ldr	r3, [fp, #-8]
   37540:	e5933224 	ldr	r3, [r3, #548]	; 0x224
   37544:	e3530f81 	cmp	r3, #516	; 0x204
   37548:	8a000006 	bhi	37568 <TFTPDaemon::Run()+0x1c0>
   3754c:	e51b0008 	ldr	r0, [fp, #-8]
   37550:	eb0001ab 	bl	37c04 <TFTPDaemon::HandleRecvData()>
   37554:	ea000003 	b	37568 <TFTPDaemon::Run()+0x1c0>
   37558:	e1a00000 	nop			; (mov r0, r0)
   3755c:	ea000002 	b	3756c <TFTPDaemon::Run()+0x1c4>
   37560:	e1a00000 	nop			; (mov r0, r0)
   37564:	ea000000 	b	3756c <TFTPDaemon::Run()+0x1c4>
   37568:	e1a00000 	nop			; (mov r0, r0)
   3756c:	e3a03001 	mov	r3, #1
   37570:	e1a00003 	mov	r0, r3
   37574:	e24bd004 	sub	sp, fp, #4
   37578:	e8bd8800 	pop	{fp, pc}

0003757c <TFTPDaemon::HandleRequest()>:
   3757c:	e92d4800 	push	{fp, lr}
   37580:	e28db004 	add	fp, sp, #4
   37584:	e24dd020 	sub	sp, sp, #32
   37588:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   3758c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   37590:	e283300c 	add	r3, r3, #12
   37594:	e50b300c 	str	r3, [fp, #-12]
   37598:	e51b300c 	ldr	r3, [fp, #-12]
   3759c:	e5d32000 	ldrb	r2, [r3]
   375a0:	e5d33001 	ldrb	r3, [r3, #1]
   375a4:	e1a03403 	lsl	r3, r3, #8
   375a8:	e1833002 	orr	r3, r3, r2
   375ac:	e6ff3073 	uxth	r3, r3
   375b0:	e6bf3fb3 	rev16	r3, r3
   375b4:	e14b30be 	strh	r3, [fp, #-14]
   375b8:	e15b30be 	ldrh	r3, [fp, #-14]
   375bc:	e3530001 	cmp	r3, #1
   375c0:	0a000007 	beq	375e4 <TFTPDaemon::HandleRequest()+0x68>
   375c4:	e15b30be 	ldrh	r3, [fp, #-14]
   375c8:	e3530002 	cmp	r3, #2
   375cc:	0a000004 	beq	375e4 <TFTPDaemon::HandleRequest()+0x68>
   375d0:	e59f2240 	ldr	r2, [pc, #576]	; 37818 <TFTPDaemon::HandleRequest()+0x29c>
   375d4:	e3a01004 	mov	r1, #4
   375d8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   375dc:	eb000093 	bl	37830 <TFTPDaemon::SendError(unsigned short, char const*)>
   375e0:	ea00008a 	b	37810 <TFTPDaemon::HandleRequest()+0x294>
   375e4:	e51b300c 	ldr	r3, [fp, #-12]
   375e8:	e2833002 	add	r3, r3, #2
   375ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   375f0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   375f4:	ebff678b 	bl	11428 <strlen@plt>
   375f8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   375fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37600:	e3530000 	cmp	r3, #0
   37604:	0a000002 	beq	37614 <TFTPDaemon::HandleRequest()+0x98>
   37608:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3760c:	e3530080 	cmp	r3, #128	; 0x80
   37610:	9a000004 	bls	37628 <TFTPDaemon::HandleRequest()+0xac>
   37614:	e59f2200 	ldr	r2, [pc, #512]	; 3781c <TFTPDaemon::HandleRequest()+0x2a0>
   37618:	e3a01000 	mov	r1, #0
   3761c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   37620:	eb000082 	bl	37830 <TFTPDaemon::SendError(unsigned short, char const*)>
   37624:	ea000079 	b	37810 <TFTPDaemon::HandleRequest()+0x294>
   37628:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3762c:	e2833001 	add	r3, r3, #1
   37630:	e51b200c 	ldr	r2, [fp, #-12]
   37634:	e0823003 	add	r3, r2, r3
   37638:	e2833002 	add	r3, r3, #2
   3763c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   37640:	e3a02005 	mov	r2, #5
   37644:	e59f11d4 	ldr	r1, [pc, #468]	; 37820 <TFTPDaemon::HandleRequest()+0x2a4>
   37648:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   3764c:	ebff66d6 	bl	111ac <strncmp@plt>
   37650:	e1a03000 	mov	r3, r0
   37654:	e3530000 	cmp	r3, #0
   37658:	1a000002 	bne	37668 <TFTPDaemon::HandleRequest()+0xec>
   3765c:	e3a03000 	mov	r3, #0
   37660:	e50b3008 	str	r3, [fp, #-8]
   37664:	ea00000e 	b	376a4 <TFTPDaemon::HandleRequest()+0x128>
   37668:	e3a02008 	mov	r2, #8
   3766c:	e59f11b0 	ldr	r1, [pc, #432]	; 37824 <TFTPDaemon::HandleRequest()+0x2a8>
   37670:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   37674:	ebff66cc 	bl	111ac <strncmp@plt>
   37678:	e1a03000 	mov	r3, r0
   3767c:	e3530000 	cmp	r3, #0
   37680:	1a000002 	bne	37690 <TFTPDaemon::HandleRequest()+0x114>
   37684:	e3a03001 	mov	r3, #1
   37688:	e50b3008 	str	r3, [fp, #-8]
   3768c:	ea000004 	b	376a4 <TFTPDaemon::HandleRequest()+0x128>
   37690:	e59f2180 	ldr	r2, [pc, #384]	; 37818 <TFTPDaemon::HandleRequest()+0x29c>
   37694:	e3a01004 	mov	r1, #4
   37698:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   3769c:	eb000063 	bl	37830 <TFTPDaemon::SendError(unsigned short, char const*)>
   376a0:	ea00005a 	b	37810 <TFTPDaemon::HandleRequest()+0x294>
   376a4:	e15b30be 	ldrh	r3, [fp, #-14]
   376a8:	e3530001 	cmp	r3, #1
   376ac:	0a00000e 	beq	376ec <TFTPDaemon::HandleRequest()+0x170>
   376b0:	e3530002 	cmp	r3, #2
   376b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   376b8:	e5933000 	ldr	r3, [r3]
   376bc:	e283300c 	add	r3, r3, #12
   376c0:	e5933000 	ldr	r3, [r3]
   376c4:	e51b2008 	ldr	r2, [fp, #-8]
   376c8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   376cc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   376d0:	e12fff33 	blx	r3
   376d4:	e1a03000 	mov	r3, r0
   376d8:	e2233001 	eor	r3, r3, #1
   376dc:	e6ef3073 	uxtb	r3, r3
   376e0:	e3530000 	cmp	r3, #0
   376e4:	0a000033 	beq	377b8 <TFTPDaemon::HandleRequest()+0x23c>
   376e8:	ea00002a 	b	37798 <TFTPDaemon::HandleRequest()+0x21c>
   376ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   376f0:	e5933000 	ldr	r3, [r3]
   376f4:	e2833008 	add	r3, r3, #8
   376f8:	e5933000 	ldr	r3, [r3]
   376fc:	e51b2008 	ldr	r2, [fp, #-8]
   37700:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   37704:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   37708:	e12fff33 	blx	r3
   3770c:	e1a03000 	mov	r3, r0
   37710:	e2233001 	eor	r3, r3, #1
   37714:	e6ef3073 	uxtb	r3, r3
   37718:	e3530000 	cmp	r3, #0
   3771c:	0a000007 	beq	37740 <TFTPDaemon::HandleRequest()+0x1c4>
   37720:	e59f2100 	ldr	r2, [pc, #256]	; 37828 <TFTPDaemon::HandleRequest()+0x2ac>
   37724:	e3a01001 	mov	r1, #1
   37728:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   3772c:	eb00003f 	bl	37830 <TFTPDaemon::SendError(unsigned short, char const*)>
   37730:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   37734:	e3a02001 	mov	r2, #1
   37738:	e5832004 	str	r2, [r3, #4]
   3773c:	ea000033 	b	37810 <TFTPDaemon::HandleRequest()+0x294>
   37740:	ebff83e8 	bl	186e8 <Network::Get()>
   37744:	e1a03000 	mov	r3, r0
   37748:	e3a01045 	mov	r1, #69	; 0x45
   3774c:	e1a00003 	mov	r0, r3
   37750:	ebfffacc 	bl	36288 <Network::End(unsigned short)>
   37754:	ebff83e3 	bl	186e8 <Network::Get()>
   37758:	e1a02000 	mov	r2, r0
   3775c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   37760:	e2833e22 	add	r3, r3, #544	; 0x220
   37764:	e1d330b0 	ldrh	r3, [r3]
   37768:	e1a01003 	mov	r1, r3
   3776c:	e1a00002 	mov	r0, r2
   37770:	ebfff9cf 	bl	35eb4 <Network::Begin(unsigned short)>
   37774:	e1a02000 	mov	r2, r0
   37778:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3777c:	e5832008 	str	r2, [r3, #8]
   37780:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   37784:	e3a02002 	mov	r2, #2
   37788:	e5832004 	str	r2, [r3, #4]
   3778c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   37790:	eb00004c 	bl	378c8 <TFTPDaemon::DoRead()>
   37794:	ea00001d 	b	37810 <TFTPDaemon::HandleRequest()+0x294>
   37798:	e59f208c 	ldr	r2, [pc, #140]	; 3782c <TFTPDaemon::HandleRequest()+0x2b0>
   3779c:	e3a01002 	mov	r1, #2
   377a0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   377a4:	eb000021 	bl	37830 <TFTPDaemon::SendError(unsigned short, char const*)>
   377a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   377ac:	e3a02001 	mov	r2, #1
   377b0:	e5832004 	str	r2, [r3, #4]
   377b4:	ea000014 	b	3780c <TFTPDaemon::HandleRequest()+0x290>
   377b8:	ebff83ca 	bl	186e8 <Network::Get()>
   377bc:	e1a03000 	mov	r3, r0
   377c0:	e3a01045 	mov	r1, #69	; 0x45
   377c4:	e1a00003 	mov	r0, r3
   377c8:	ebfffaae 	bl	36288 <Network::End(unsigned short)>
   377cc:	ebff83c5 	bl	186e8 <Network::Get()>
   377d0:	e1a02000 	mov	r2, r0
   377d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   377d8:	e2833e22 	add	r3, r3, #544	; 0x220
   377dc:	e1d330b0 	ldrh	r3, [r3]
   377e0:	e1a01003 	mov	r1, r3
   377e4:	e1a00002 	mov	r0, r2
   377e8:	ebfff9b1 	bl	35eb4 <Network::Begin(unsigned short)>
   377ec:	e1a02000 	mov	r2, r0
   377f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   377f4:	e5832008 	str	r2, [r3, #8]
   377f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   377fc:	e3a02004 	mov	r2, #4
   37800:	e5832004 	str	r2, [r3, #4]
   37804:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   37808:	eb0000c4 	bl	37b20 <TFTPDaemon::DoWriteAck()>
   3780c:	e1a00000 	nop			; (mov r0, r0)
   37810:	e24bd004 	sub	sp, fp, #4
   37814:	e8bd8800 	pop	{fp, pc}
   37818:	00049234 	.word	0x00049234
   3781c:	00049248 	.word	0x00049248
   37820:	0004925c 	.word	0x0004925c
   37824:	00049264 	.word	0x00049264
   37828:	00049270 	.word	0x00049270
   3782c:	00049280 	.word	0x00049280

00037830 <TFTPDaemon::SendError(unsigned short, char const*)>:
   37830:	e92d4800 	push	{fp, lr}
   37834:	e28db004 	add	fp, sp, #4
   37838:	e24dd0a0 	sub	sp, sp, #160	; 0xa0
   3783c:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
   37840:	e1a03001 	mov	r3, r1
   37844:	e50b2098 	str	r2, [fp, #-152]	; 0xffffff68
   37848:	e14b39b2 	strh	r3, [fp, #-146]	; 0xffffff6e
   3784c:	e3a03c05 	mov	r3, #1280	; 0x500
   37850:	e14b38b8 	strh	r3, [fp, #-136]	; 0xffffff78
   37854:	e15b39b2 	ldrh	r3, [fp, #-146]	; 0xffffff6e
   37858:	e6bf3fb3 	rev16	r3, r3
   3785c:	e6ff3073 	uxth	r3, r3
   37860:	e14b38b6 	strh	r3, [fp, #-134]	; 0xffffff7a
   37864:	e24b3088 	sub	r3, fp, #136	; 0x88
   37868:	e2833004 	add	r3, r3, #4
   3786c:	e3a0207f 	mov	r2, #127	; 0x7f
   37870:	e51b1098 	ldr	r1, [fp, #-152]	; 0xffffff68
   37874:	e1a00003 	mov	r0, r3
   37878:	ebff6708 	bl	114a0 <strncpy@plt>
   3787c:	ebff8399 	bl	186e8 <Network::Get()>
   37880:	e1a0c000 	mov	ip, r0
   37884:	e51b3090 	ldr	r3, [fp, #-144]	; 0xffffff70
   37888:	e5931008 	ldr	r1, [r3, #8]
   3788c:	e51b3090 	ldr	r3, [fp, #-144]	; 0xffffff70
   37890:	e593321c 	ldr	r3, [r3, #540]	; 0x21c
   37894:	e51b2090 	ldr	r2, [fp, #-144]	; 0xffffff70
   37898:	e2822e22 	add	r2, r2, #544	; 0x220
   3789c:	e1d220b0 	ldrh	r2, [r2]
   378a0:	e24b0088 	sub	r0, fp, #136	; 0x88
   378a4:	e58d2004 	str	r2, [sp, #4]
   378a8:	e58d3000 	str	r3, [sp]
   378ac:	e3a03084 	mov	r3, #132	; 0x84
   378b0:	e1a02000 	mov	r2, r0
   378b4:	e1a0000c 	mov	r0, ip
   378b8:	ebfffbc9 	bl	367e4 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>
   378bc:	e1a00000 	nop			; (mov r0, r0)
   378c0:	e24bd004 	sub	sp, fp, #4
   378c4:	e8bd8800 	pop	{fp, pc}

000378c8 <TFTPDaemon::DoRead()>:
   378c8:	e92d4810 	push	{r4, fp, lr}
   378cc:	e28db008 	add	fp, sp, #8
   378d0:	e24dd01c 	sub	sp, sp, #28
   378d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   378d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   378dc:	e283300c 	add	r3, r3, #12
   378e0:	e50b3010 	str	r3, [fp, #-16]
   378e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   378e8:	e5933004 	ldr	r3, [r3, #4]
   378ec:	e3530002 	cmp	r3, #2
   378f0:	1a000046 	bne	37a10 <TFTPDaemon::DoRead()+0x148>
   378f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   378f8:	e5933000 	ldr	r3, [r3]
   378fc:	e2833014 	add	r3, r3, #20
   37900:	e5934000 	ldr	r4, [r3]
   37904:	e51b3010 	ldr	r3, [fp, #-16]
   37908:	e2831004 	add	r1, r3, #4
   3790c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37910:	e2833f8a 	add	r3, r3, #552	; 0x228
   37914:	e1d330b0 	ldrh	r3, [r3]
   37918:	e2833001 	add	r3, r3, #1
   3791c:	e6ff2073 	uxth	r2, r3
   37920:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37924:	e2833f8a 	add	r3, r3, #552	; 0x228
   37928:	e1c320b0 	strh	r2, [r3]
   3792c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37930:	e2833f8a 	add	r3, r3, #552	; 0x228
   37934:	e1d330b0 	ldrh	r3, [r3]
   37938:	e3a02c02 	mov	r2, #512	; 0x200
   3793c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   37940:	e12fff34 	blx	r4
   37944:	e1a02000 	mov	r2, r0
   37948:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3794c:	e583222c 	str	r2, [r3, #556]	; 0x22c
   37950:	e51b3010 	ldr	r3, [fp, #-16]
   37954:	e3a02000 	mov	r2, #0
   37958:	e5c32000 	strb	r2, [r3]
   3795c:	e3a02000 	mov	r2, #0
   37960:	e3822003 	orr	r2, r2, #3
   37964:	e5c32001 	strb	r2, [r3, #1]
   37968:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3796c:	e2833f8a 	add	r3, r3, #552	; 0x228
   37970:	e1d330b0 	ldrh	r3, [r3]
   37974:	e6bf3fb3 	rev16	r3, r3
   37978:	e6ff2073 	uxth	r2, r3
   3797c:	e51b3010 	ldr	r3, [fp, #-16]
   37980:	e6ef1072 	uxtb	r1, r2
   37984:	e3a00000 	mov	r0, #0
   37988:	e1801001 	orr	r1, r0, r1
   3798c:	e5c31002 	strb	r1, [r3, #2]
   37990:	e1a02422 	lsr	r2, r2, #8
   37994:	e6ff2072 	uxth	r2, r2
   37998:	e3a01000 	mov	r1, #0
   3799c:	e1812002 	orr	r2, r1, r2
   379a0:	e5c32003 	strb	r2, [r3, #3]
   379a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   379a8:	e593322c 	ldr	r3, [r3, #556]	; 0x22c
   379ac:	e6ff3073 	uxth	r3, r3
   379b0:	e2833004 	add	r3, r3, #4
   379b4:	e6ff2073 	uxth	r2, r3
   379b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   379bc:	e2833e23 	add	r3, r3, #560	; 0x230
   379c0:	e1c320b0 	strh	r2, [r3]
   379c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   379c8:	e593322c 	ldr	r3, [r3, #556]	; 0x22c
   379cc:	e59f20a4 	ldr	r2, [pc, #164]	; 37a78 <TFTPDaemon::DoRead()+0x1b0>
   379d0:	e1530002 	cmp	r3, r2
   379d4:	93a03001 	movls	r3, #1
   379d8:	83a03000 	movhi	r3, #0
   379dc:	e6ef2073 	uxtb	r2, r3
   379e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   379e4:	e5c32232 	strb	r2, [r3, #562]	; 0x232
   379e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   379ec:	e5d33232 	ldrb	r3, [r3, #562]	; 0x232
   379f0:	e3530000 	cmp	r3, #0
   379f4:	0a000005 	beq	37a10 <TFTPDaemon::DoRead()+0x148>
   379f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   379fc:	e5933000 	ldr	r3, [r3]
   37a00:	e2833010 	add	r3, r3, #16
   37a04:	e5933000 	ldr	r3, [r3]
   37a08:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   37a0c:	e12fff33 	blx	r3
   37a10:	ebff8334 	bl	186e8 <Network::Get()>
   37a14:	e1a0e000 	mov	lr, r0
   37a18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37a1c:	e5931008 	ldr	r1, [r3, #8]
   37a20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37a24:	e283000c 	add	r0, r3, #12
   37a28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37a2c:	e2833e23 	add	r3, r3, #560	; 0x230
   37a30:	e1d3c0b0 	ldrh	ip, [r3]
   37a34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37a38:	e593321c 	ldr	r3, [r3, #540]	; 0x21c
   37a3c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   37a40:	e2822e22 	add	r2, r2, #544	; 0x220
   37a44:	e1d220b0 	ldrh	r2, [r2]
   37a48:	e58d2004 	str	r2, [sp, #4]
   37a4c:	e58d3000 	str	r3, [sp]
   37a50:	e1a0300c 	mov	r3, ip
   37a54:	e1a02000 	mov	r2, r0
   37a58:	e1a0000e 	mov	r0, lr
   37a5c:	ebfffb60 	bl	367e4 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>
   37a60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37a64:	e3a02003 	mov	r2, #3
   37a68:	e5832004 	str	r2, [r3, #4]
   37a6c:	e1a00000 	nop			; (mov r0, r0)
   37a70:	e24bd008 	sub	sp, fp, #8
   37a74:	e8bd8810 	pop	{r4, fp, pc}
   37a78:	000001ff 	.word	0x000001ff

00037a7c <TFTPDaemon::HandleRecvAck()>:
   37a7c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   37a80:	e28db000 	add	fp, sp, #0
   37a84:	e24dd014 	sub	sp, sp, #20
   37a88:	e50b0010 	str	r0, [fp, #-16]
   37a8c:	e51b3010 	ldr	r3, [fp, #-16]
   37a90:	e283300c 	add	r3, r3, #12
   37a94:	e50b3008 	str	r3, [fp, #-8]
   37a98:	e51b3008 	ldr	r3, [fp, #-8]
   37a9c:	e5d32000 	ldrb	r2, [r3]
   37aa0:	e5d33001 	ldrb	r3, [r3, #1]
   37aa4:	e1a03403 	lsl	r3, r3, #8
   37aa8:	e1833002 	orr	r3, r3, r2
   37aac:	e6ff3073 	uxth	r3, r3
   37ab0:	e3530b01 	cmp	r3, #1024	; 0x400
   37ab4:	1a000015 	bne	37b10 <TFTPDaemon::HandleRecvAck()+0x94>
   37ab8:	e51b3008 	ldr	r3, [fp, #-8]
   37abc:	e5d32002 	ldrb	r2, [r3, #2]
   37ac0:	e5d33003 	ldrb	r3, [r3, #3]
   37ac4:	e1a03403 	lsl	r3, r3, #8
   37ac8:	e1833002 	orr	r3, r3, r2
   37acc:	e6ff2073 	uxth	r2, r3
   37ad0:	e51b3010 	ldr	r3, [fp, #-16]
   37ad4:	e2833f8a 	add	r3, r3, #552	; 0x228
   37ad8:	e1d330b0 	ldrh	r3, [r3]
   37adc:	e6bf3fb3 	rev16	r3, r3
   37ae0:	e6ff3073 	uxth	r3, r3
   37ae4:	e1520003 	cmp	r2, r3
   37ae8:	1a000008 	bne	37b10 <TFTPDaemon::HandleRecvAck()+0x94>
   37aec:	e51b3010 	ldr	r3, [fp, #-16]
   37af0:	e5d33232 	ldrb	r3, [r3, #562]	; 0x232
   37af4:	e3530000 	cmp	r3, #0
   37af8:	0a000001 	beq	37b04 <TFTPDaemon::HandleRecvAck()+0x88>
   37afc:	e3a02000 	mov	r2, #0
   37b00:	ea000000 	b	37b08 <TFTPDaemon::HandleRecvAck()+0x8c>
   37b04:	e3a02002 	mov	r2, #2
   37b08:	e51b3010 	ldr	r3, [fp, #-16]
   37b0c:	e5832004 	str	r2, [r3, #4]
   37b10:	e1a00000 	nop			; (mov r0, r0)
   37b14:	e28bd000 	add	sp, fp, #0
   37b18:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   37b1c:	e12fff1e 	bx	lr

00037b20 <TFTPDaemon::DoWriteAck()>:
   37b20:	e92d4800 	push	{fp, lr}
   37b24:	e28db004 	add	fp, sp, #4
   37b28:	e24dd018 	sub	sp, sp, #24
   37b2c:	e50b0010 	str	r0, [fp, #-16]
   37b30:	e51b3010 	ldr	r3, [fp, #-16]
   37b34:	e283300c 	add	r3, r3, #12
   37b38:	e50b3008 	str	r3, [fp, #-8]
   37b3c:	e51b3008 	ldr	r3, [fp, #-8]
   37b40:	e3a02000 	mov	r2, #0
   37b44:	e5c32000 	strb	r2, [r3]
   37b48:	e3a02000 	mov	r2, #0
   37b4c:	e3822004 	orr	r2, r2, #4
   37b50:	e5c32001 	strb	r2, [r3, #1]
   37b54:	e51b3010 	ldr	r3, [fp, #-16]
   37b58:	e2833f8a 	add	r3, r3, #552	; 0x228
   37b5c:	e1d330b0 	ldrh	r3, [r3]
   37b60:	e6bf3fb3 	rev16	r3, r3
   37b64:	e6ff2073 	uxth	r2, r3
   37b68:	e51b3008 	ldr	r3, [fp, #-8]
   37b6c:	e6ef1072 	uxtb	r1, r2
   37b70:	e3a00000 	mov	r0, #0
   37b74:	e1801001 	orr	r1, r0, r1
   37b78:	e5c31002 	strb	r1, [r3, #2]
   37b7c:	e1a02422 	lsr	r2, r2, #8
   37b80:	e6ff2072 	uxth	r2, r2
   37b84:	e3a01000 	mov	r1, #0
   37b88:	e1812002 	orr	r2, r1, r2
   37b8c:	e5c32003 	strb	r2, [r3, #3]
   37b90:	e51b3010 	ldr	r3, [fp, #-16]
   37b94:	e5d33232 	ldrb	r3, [r3, #562]	; 0x232
   37b98:	e3530000 	cmp	r3, #0
   37b9c:	0a000001 	beq	37ba8 <TFTPDaemon::DoWriteAck()+0x88>
   37ba0:	e3a02000 	mov	r2, #0
   37ba4:	ea000000 	b	37bac <TFTPDaemon::DoWriteAck()+0x8c>
   37ba8:	e3a02005 	mov	r2, #5
   37bac:	e51b3010 	ldr	r3, [fp, #-16]
   37bb0:	e5832004 	str	r2, [r3, #4]
   37bb4:	ebff82cb 	bl	186e8 <Network::Get()>
   37bb8:	e1a0c000 	mov	ip, r0
   37bbc:	e51b3010 	ldr	r3, [fp, #-16]
   37bc0:	e5931008 	ldr	r1, [r3, #8]
   37bc4:	e51b3010 	ldr	r3, [fp, #-16]
   37bc8:	e283000c 	add	r0, r3, #12
   37bcc:	e51b3010 	ldr	r3, [fp, #-16]
   37bd0:	e593321c 	ldr	r3, [r3, #540]	; 0x21c
   37bd4:	e51b2010 	ldr	r2, [fp, #-16]
   37bd8:	e2822e22 	add	r2, r2, #544	; 0x220
   37bdc:	e1d220b0 	ldrh	r2, [r2]
   37be0:	e58d2004 	str	r2, [sp, #4]
   37be4:	e58d3000 	str	r3, [sp]
   37be8:	e3a03004 	mov	r3, #4
   37bec:	e1a02000 	mov	r2, r0
   37bf0:	e1a0000c 	mov	r0, ip
   37bf4:	ebfffafa 	bl	367e4 <Network::SendTo(int, void const*, unsigned short, unsigned int, unsigned short)>
   37bf8:	e1a00000 	nop			; (mov r0, r0)
   37bfc:	e24bd004 	sub	sp, fp, #4
   37c00:	e8bd8800 	pop	{fp, pc}

00037c04 <TFTPDaemon::HandleRecvData()>:
   37c04:	e92d4830 	push	{r4, r5, fp, lr}
   37c08:	e28db00c 	add	fp, sp, #12
   37c0c:	e24dd010 	sub	sp, sp, #16
   37c10:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   37c14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37c18:	e283300c 	add	r3, r3, #12
   37c1c:	e50b3010 	str	r3, [fp, #-16]
   37c20:	e51b3010 	ldr	r3, [fp, #-16]
   37c24:	e5d32000 	ldrb	r2, [r3]
   37c28:	e5d33001 	ldrb	r3, [r3, #1]
   37c2c:	e1a03403 	lsl	r3, r3, #8
   37c30:	e1833002 	orr	r3, r3, r2
   37c34:	e6ff3073 	uxth	r3, r3
   37c38:	e3530c03 	cmp	r3, #768	; 0x300
   37c3c:	1a00003c 	bne	37d34 <TFTPDaemon::HandleRecvData()+0x130>
   37c40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37c44:	e5933224 	ldr	r3, [r3, #548]	; 0x224
   37c48:	e2432004 	sub	r2, r3, #4
   37c4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37c50:	e583222c 	str	r2, [r3, #556]	; 0x22c
   37c54:	e51b3010 	ldr	r3, [fp, #-16]
   37c58:	e5d32002 	ldrb	r2, [r3, #2]
   37c5c:	e5d33003 	ldrb	r3, [r3, #3]
   37c60:	e1a03403 	lsl	r3, r3, #8
   37c64:	e1833002 	orr	r3, r3, r2
   37c68:	e6ff3073 	uxth	r3, r3
   37c6c:	e6bf3fb3 	rev16	r3, r3
   37c70:	e6ff2073 	uxth	r2, r3
   37c74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37c78:	e2833f8a 	add	r3, r3, #552	; 0x228
   37c7c:	e1c320b0 	strh	r2, [r3]
   37c80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37c84:	e593422c 	ldr	r4, [r3, #556]	; 0x22c
   37c88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37c8c:	e5933000 	ldr	r3, [r3]
   37c90:	e2833018 	add	r3, r3, #24
   37c94:	e5935000 	ldr	r5, [r3]
   37c98:	e51b3010 	ldr	r3, [fp, #-16]
   37c9c:	e2831004 	add	r1, r3, #4
   37ca0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37ca4:	e593222c 	ldr	r2, [r3, #556]	; 0x22c
   37ca8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37cac:	e2833f8a 	add	r3, r3, #552	; 0x228
   37cb0:	e1d330b0 	ldrh	r3, [r3]
   37cb4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   37cb8:	e12fff35 	blx	r5
   37cbc:	e1a03000 	mov	r3, r0
   37cc0:	e1540003 	cmp	r4, r3
   37cc4:	03a03001 	moveq	r3, #1
   37cc8:	13a03000 	movne	r3, #0
   37ccc:	e6ef3073 	uxtb	r3, r3
   37cd0:	e3530000 	cmp	r3, #0
   37cd4:	0a00000f 	beq	37d18 <TFTPDaemon::HandleRecvData()+0x114>
   37cd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37cdc:	e593322c 	ldr	r3, [r3, #556]	; 0x22c
   37ce0:	e3530c02 	cmp	r3, #512	; 0x200
   37ce4:	2a000008 	bcs	37d0c <TFTPDaemon::HandleRecvData()+0x108>
   37ce8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37cec:	e3a02001 	mov	r2, #1
   37cf0:	e5c32232 	strb	r2, [r3, #562]	; 0x232
   37cf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37cf8:	e5933000 	ldr	r3, [r3]
   37cfc:	e2833010 	add	r3, r3, #16
   37d00:	e5933000 	ldr	r3, [r3]
   37d04:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   37d08:	e12fff33 	blx	r3
   37d0c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   37d10:	ebffff82 	bl	37b20 <TFTPDaemon::DoWriteAck()>
   37d14:	ea000006 	b	37d34 <TFTPDaemon::HandleRecvData()+0x130>
   37d18:	e59f2020 	ldr	r2, [pc, #32]	; 37d40 <TFTPDaemon::HandleRecvData()+0x13c>
   37d1c:	e3a01003 	mov	r1, #3
   37d20:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   37d24:	ebfffec1 	bl	37830 <TFTPDaemon::SendError(unsigned short, char const*)>
   37d28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   37d2c:	e3a02000 	mov	r2, #0
   37d30:	e5832004 	str	r2, [r3, #4]
   37d34:	e1a00000 	nop			; (mov r0, r0)
   37d38:	e24bd00c 	sub	sp, fp, #12
   37d3c:	e8bd8830 	pop	{r4, r5, fp, pc}
   37d40:	00049294 	.word	0x00049294

00037d44 <NetworkParams::Dump()>:
   37d44:	e12fff1e 	bx	lr

00037d48 <network::is_netmask_valid(unsigned int)>:
   37d48:	e3500000 	cmp	r0, #0
   37d4c:	012fff1e 	bxeq	lr
   37d50:	e6bf0f30 	rev	r0, r0
   37d54:	e1e03000 	mvn	r3, r0
   37d58:	e01030a3 	ands	r3, r0, r3, lsr #1
   37d5c:	03a00001 	moveq	r0, #1
   37d60:	13a00000 	movne	r0, #0
   37d64:	e12fff1e 	bx	lr

00037d68 <network::is_private_ip(unsigned int)>:
   37d68:	e1a03420 	lsr	r3, r0, #8
   37d6c:	e6ef0070 	uxtb	r0, r0
   37d70:	e35000ac 	cmp	r0, #172	; 0xac
   37d74:	e6ef3073 	uxtb	r3, r3
   37d78:	0a000005 	beq	37d94 <network::is_private_ip(unsigned int)+0x2c>
   37d7c:	e35000c0 	cmp	r0, #192	; 0xc0
   37d80:	0a000008 	beq	37da8 <network::is_private_ip(unsigned int)+0x40>
   37d84:	e350000a 	cmp	r0, #10
   37d88:	13a00000 	movne	r0, #0
   37d8c:	03a00001 	moveq	r0, #1
   37d90:	e12fff1e 	bx	lr
   37d94:	e2430010 	sub	r0, r3, #16
   37d98:	e350000f 	cmp	r0, #15
   37d9c:	83a00000 	movhi	r0, #0
   37da0:	93a00001 	movls	r0, #1
   37da4:	e12fff1e 	bx	lr
   37da8:	e35300a8 	cmp	r3, #168	; 0xa8
   37dac:	eafffff5 	b	37d88 <network::is_private_ip(unsigned int)+0x20>

00037db0 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
   37db0:	e92d4010 	push	{r4, lr}
   37db4:	e3a0205e 	mov	r2, #94	; 0x5e
   37db8:	e1a04000 	mov	r4, r0
   37dbc:	e4801004 	str	r1, [r0], #4
   37dc0:	e3a01000 	mov	r1, #0
   37dc4:	ebff6528 	bl	1126c <memset@plt>
   37dc8:	e3a03001 	mov	r3, #1
   37dcc:	e5c43018 	strb	r3, [r4, #24]
   37dd0:	e3a03000 	mov	r3, #0
   37dd4:	e5c43061 	strb	r3, [r4, #97]	; 0x61
   37dd8:	e1a00004 	mov	r0, r4
   37ddc:	e8bd8010 	pop	{r4, pc}

00037de0 <NetworkParams::Load()>:
   37de0:	e3a03000 	mov	r3, #0
   37de4:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
   37de8:	e1a02000 	mov	r2, r0
   37dec:	e5803004 	str	r3, [r0, #4]
   37df0:	e1a04000 	mov	r4, r0
   37df4:	e59f1068 	ldr	r1, [pc, #104]	; 37e64 <NetworkParams::Load()+0x84>
   37df8:	e1a0000d 	mov	r0, sp
   37dfc:	eb00106d 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   37e00:	e59f1060 	ldr	r1, [pc, #96]	; 37e68 <NetworkParams::Load()+0x88>
   37e04:	e1a0000d 	mov	r0, sp
   37e08:	eb00108a 	bl	3c038 <ReadConfigFile::Read(char const*)>
   37e0c:	e2505000 	subs	r5, r0, #0
   37e10:	e5940000 	ldr	r0, [r4]
   37e14:	0a00000a 	beq	37e44 <NetworkParams::Load()+0x64>
   37e18:	e3500000 	cmp	r0, #0
   37e1c:	0a000003 	beq	37e30 <NetworkParams::Load()+0x50>
   37e20:	e5903000 	ldr	r3, [r0]
   37e24:	e2841004 	add	r1, r4, #4
   37e28:	e5933008 	ldr	r3, [r3, #8]
   37e2c:	e12fff33 	blx	r3
   37e30:	e1a0000d 	mov	r0, sp
   37e34:	eb001070 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   37e38:	e1a00005 	mov	r0, r5
   37e3c:	e28dd00c 	add	sp, sp, #12
   37e40:	e8bd8030 	pop	{r4, r5, pc}
   37e44:	e3500000 	cmp	r0, #0
   37e48:	0afffff8 	beq	37e30 <NetworkParams::Load()+0x50>
   37e4c:	e5903000 	ldr	r3, [r0]
   37e50:	e2841004 	add	r1, r4, #4
   37e54:	e3a05001 	mov	r5, #1
   37e58:	e593300c 	ldr	r3, [r3, #12]
   37e5c:	e12fff33 	blx	r3
   37e60:	eafffff2 	b	37e30 <NetworkParams::Load()+0x50>
   37e64:	0003807c 	.word	0x0003807c
   37e68:	00049318 	.word	0x00049318

00037e6c <NetworkParams::Load(char const*, unsigned int)>:
   37e6c:	e5903000 	ldr	r3, [r0]
   37e70:	e3530000 	cmp	r3, #0
   37e74:	012fff1e 	bxeq	lr
   37e78:	e3a03000 	mov	r3, #0
   37e7c:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   37e80:	e1a06002 	mov	r6, r2
   37e84:	e5803004 	str	r3, [r0, #4]
   37e88:	e1a05001 	mov	r5, r1
   37e8c:	e1a04000 	mov	r4, r0
   37e90:	e1a02000 	mov	r2, r0
   37e94:	e59f1038 	ldr	r1, [pc, #56]	; 37ed4 <NetworkParams::Load(char const*, unsigned int)+0x68>
   37e98:	e1a0000d 	mov	r0, sp
   37e9c:	eb001045 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   37ea0:	e1a02006 	mov	r2, r6
   37ea4:	e1a01005 	mov	r1, r5
   37ea8:	e1a0000d 	mov	r0, sp
   37eac:	eb0010ac 	bl	3c164 <ReadConfigFile::Read(char const*, unsigned int)>
   37eb0:	e1a01004 	mov	r1, r4
   37eb4:	e4910004 	ldr	r0, [r1], #4
   37eb8:	e5903000 	ldr	r3, [r0]
   37ebc:	e5933008 	ldr	r3, [r3, #8]
   37ec0:	e12fff33 	blx	r3
   37ec4:	e1a0000d 	mov	r0, sp
   37ec8:	eb00104b 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   37ecc:	e28dd008 	add	sp, sp, #8
   37ed0:	e8bd8070 	pop	{r4, r5, r6, pc}
   37ed4:	0003807c 	.word	0x0003807c

00037ed8 <NetworkParams::callbackFunction(char const*)>:
   37ed8:	e92d4030 	push	{r4, r5, lr}
   37edc:	e1a05001 	mov	r5, r1
   37ee0:	e24dd014 	sub	sp, sp, #20
   37ee4:	e1a04000 	mov	r4, r0
   37ee8:	e28d2007 	add	r2, sp, #7
   37eec:	e59f1170 	ldr	r1, [pc, #368]	; 38064 <NetworkParams::callbackFunction(char const*)+0x18c>
   37ef0:	e1a00005 	mov	r0, r5
   37ef4:	eb000f52 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   37ef8:	e3500000 	cmp	r0, #0
   37efc:	1a00000a 	bne	37f2c <NetworkParams::callbackFunction(char const*)+0x54>
   37f00:	e5dd2007 	ldrb	r2, [sp, #7]
   37f04:	e5943004 	ldr	r3, [r4, #4]
   37f08:	e3520000 	cmp	r2, #0
   37f0c:	13c33001 	bicne	r3, r3, #1
   37f10:	03833001 	orreq	r3, r3, #1
   37f14:	e2922000 	adds	r2, r2, #0
   37f18:	13a02001 	movne	r2, #1
   37f1c:	e5843004 	str	r3, [r4, #4]
   37f20:	e5c42018 	strb	r2, [r4, #24]
   37f24:	e28dd014 	add	sp, sp, #20
   37f28:	e8bd8030 	pop	{r4, r5, pc}
   37f2c:	e28d2007 	add	r2, sp, #7
   37f30:	e59f1130 	ldr	r1, [pc, #304]	; 38068 <NetworkParams::callbackFunction(char const*)+0x190>
   37f34:	e1a00005 	mov	r0, r5
   37f38:	eb000f41 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   37f3c:	e3500000 	cmp	r0, #0
   37f40:	1a000009 	bne	37f6c <NetworkParams::callbackFunction(char const*)+0x94>
   37f44:	e5dd2007 	ldrb	r2, [sp, #7]
   37f48:	e5943004 	ldr	r3, [r4, #4]
   37f4c:	e2421001 	sub	r1, r2, #1
   37f50:	e3510004 	cmp	r1, #4
   37f54:	93833c01 	orrls	r3, r3, #256	; 0x100
   37f58:	83c33c01 	bichi	r3, r3, #256	; 0x100
   37f5c:	95843004 	strls	r3, [r4, #4]
   37f60:	95c42061 	strbls	r2, [r4, #97]	; 0x61
   37f64:	85843004 	strhi	r3, [r4, #4]
   37f68:	85c40061 	strbhi	r0, [r4, #97]	; 0x61
   37f6c:	e28d2008 	add	r2, sp, #8
   37f70:	e59f10f4 	ldr	r1, [pc, #244]	; 3806c <NetworkParams::callbackFunction(char const*)+0x194>
   37f74:	e1a00005 	mov	r0, r5
   37f78:	eb000efb 	bl	3bb6c <Sscan::IpAddress(char const*, char const*, unsigned int&)>
   37f7c:	e3500000 	cmp	r0, #0
   37f80:	1a00000e 	bne	37fc0 <NetworkParams::callbackFunction(char const*)+0xe8>
   37f84:	e59d2008 	ldr	r2, [sp, #8]
   37f88:	e1a00002 	mov	r0, r2
   37f8c:	ebffff75 	bl	37d68 <network::is_private_ip(unsigned int)>
   37f90:	e5943004 	ldr	r3, [r4, #4]
   37f94:	e3500000 	cmp	r0, #0
   37f98:	1a000004 	bne	37fb0 <NetworkParams::callbackFunction(char const*)+0xd8>
   37f9c:	e6ef1072 	uxtb	r1, r2
   37fa0:	e3520000 	cmp	r2, #0
   37fa4:	13510002 	cmpne	r1, #2
   37fa8:	13c33002 	bicne	r3, r3, #2
   37fac:	1a000001 	bne	37fb8 <NetworkParams::callbackFunction(char const*)+0xe0>
   37fb0:	e3833002 	orr	r3, r3, #2
   37fb4:	e5842008 	str	r2, [r4, #8]
   37fb8:	e5843004 	str	r3, [r4, #4]
   37fbc:	eaffffd8 	b	37f24 <NetworkParams::callbackFunction(char const*)+0x4c>
   37fc0:	e28d2008 	add	r2, sp, #8
   37fc4:	e59f10a4 	ldr	r1, [pc, #164]	; 38070 <NetworkParams::callbackFunction(char const*)+0x198>
   37fc8:	e1a00005 	mov	r0, r5
   37fcc:	eb000ee6 	bl	3bb6c <Sscan::IpAddress(char const*, char const*, unsigned int&)>
   37fd0:	e3500000 	cmp	r0, #0
   37fd4:	1a000008 	bne	37ffc <NetworkParams::callbackFunction(char const*)+0x124>
   37fd8:	e59d2008 	ldr	r2, [sp, #8]
   37fdc:	e1a00002 	mov	r0, r2
   37fe0:	ebffff58 	bl	37d48 <network::is_netmask_valid(unsigned int)>
   37fe4:	e5943004 	ldr	r3, [r4, #4]
   37fe8:	e3500000 	cmp	r0, #0
   37fec:	1584200c 	strne	r2, [r4, #12]
   37ff0:	13833004 	orrne	r3, r3, #4
   37ff4:	03c33004 	biceq	r3, r3, #4
   37ff8:	eaffffee 	b	37fb8 <NetworkParams::callbackFunction(char const*)+0xe0>
   37ffc:	e28d2008 	add	r2, sp, #8
   38000:	e59f106c 	ldr	r1, [pc, #108]	; 38074 <NetworkParams::callbackFunction(char const*)+0x19c>
   38004:	e1a00005 	mov	r0, r5
   38008:	eb000ed7 	bl	3bb6c <Sscan::IpAddress(char const*, char const*, unsigned int&)>
   3800c:	e3500000 	cmp	r0, #0
   38010:	1a000004 	bne	38028 <NetworkParams::callbackFunction(char const*)+0x150>
   38014:	e59d3008 	ldr	r3, [sp, #8]
   38018:	e5843010 	str	r3, [r4, #16]
   3801c:	e5943004 	ldr	r3, [r4, #4]
   38020:	e3833008 	orr	r3, r3, #8
   38024:	eaffffe3 	b	37fb8 <NetworkParams::callbackFunction(char const*)+0xe0>
   38028:	e3a0303f 	mov	r3, #63	; 0x3f
   3802c:	e58d300c 	str	r3, [sp, #12]
   38030:	e2842019 	add	r2, r4, #25
   38034:	e28d300c 	add	r3, sp, #12
   38038:	e59f1038 	ldr	r1, [pc, #56]	; 38078 <NetworkParams::callbackFunction(char const*)+0x1a0>
   3803c:	e1a00005 	mov	r0, r5
   38040:	eb000d6b 	bl	3b5f4 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
   38044:	e3500000 	cmp	r0, #0
   38048:	1affffb5 	bne	37f24 <NetworkParams::callbackFunction(char const*)+0x4c>
   3804c:	e59d300c 	ldr	r3, [sp, #12]
   38050:	e0843003 	add	r3, r4, r3
   38054:	e5c30019 	strb	r0, [r3, #25]
   38058:	e5943004 	ldr	r3, [r4, #4]
   3805c:	e3833020 	orr	r3, r3, #32
   38060:	eaffffd4 	b	37fb8 <NetworkParams::callbackFunction(char const*)+0xe0>
   38064:	00049324 	.word	0x00049324
   38068:	00049330 	.word	0x00049330
   3806c:	00049340 	.word	0x00049340
   38070:	0004934c 	.word	0x0004934c
   38074:	00049358 	.word	0x00049358
   38078:	00049368 	.word	0x00049368

0003807c <NetworkParams::staticCallbackFunction(void*, char const*)>:
   3807c:	eaffff95 	b	37ed8 <NetworkParams::callbackFunction(char const*)>

00038080 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>:
   38080:	e3510000 	cmp	r1, #0
   38084:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   38088:	e1a04000 	mov	r4, r0
   3808c:	e24dd01c 	sub	sp, sp, #28
   38090:	e1a05002 	mov	r5, r2
   38094:	e1a06003 	mov	r6, r3
   38098:	e2800004 	add	r0, r0, #4
   3809c:	0a00006c 	beq	38254 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1d4>
   380a0:	e3a0205e 	mov	r2, #94	; 0x5e
   380a4:	ebff64d6 	bl	11404 <memcpy@plt>
   380a8:	e1a02005 	mov	r2, r5
   380ac:	e1a03006 	mov	r3, r6
   380b0:	e59f11b8 	ldr	r1, [pc, #440]	; 38270 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>
   380b4:	e28d000c 	add	r0, sp, #12
   380b8:	eb000ef9 	bl	3bca4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
   380bc:	e5945004 	ldr	r5, [r4, #4]
   380c0:	e3a01002 	mov	r1, #2
   380c4:	e1a00005 	mov	r0, r5
   380c8:	eb000081 	bl	382d4 <NetworkParams::isMaskSet(unsigned int) const [clone .isra.3]>
   380cc:	e3500000 	cmp	r0, #0
   380d0:	1a000003 	bne	380e4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x64>
   380d4:	ebff8183 	bl	186e8 <Network::Get()>
   380d8:	e5900010 	ldr	r0, [r0, #16]
   380dc:	eb000079 	bl	382c8 <Network::GetIp() const [clone .isra.0]>
   380e0:	e5840008 	str	r0, [r4, #8]
   380e4:	e3a01004 	mov	r1, #4
   380e8:	e1a00005 	mov	r0, r5
   380ec:	eb000078 	bl	382d4 <NetworkParams::isMaskSet(unsigned int) const [clone .isra.3]>
   380f0:	e3500000 	cmp	r0, #0
   380f4:	1a000003 	bne	38108 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x88>
   380f8:	ebff817a 	bl	186e8 <Network::Get()>
   380fc:	e5900018 	ldr	r0, [r0, #24]
   38100:	eb000072 	bl	382d0 <Network::GetNetmask() const [clone .isra.2]>
   38104:	e584000c 	str	r0, [r4, #12]
   38108:	e3a01008 	mov	r1, #8
   3810c:	e1a00005 	mov	r0, r5
   38110:	eb00006f 	bl	382d4 <NetworkParams::isMaskSet(unsigned int) const [clone .isra.3]>
   38114:	e3500000 	cmp	r0, #0
   38118:	1a000003 	bne	3812c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
   3811c:	ebff8171 	bl	186e8 <Network::Get()>
   38120:	e5900014 	ldr	r0, [r0, #20]
   38124:	eb000068 	bl	382cc <Network::GetGatewayIp() const [clone .isra.1]>
   38128:	e5840010 	str	r0, [r4, #16]
   3812c:	e3a01020 	mov	r1, #32
   38130:	e1a00005 	mov	r0, r5
   38134:	eb000066 	bl	382d4 <NetworkParams::isMaskSet(unsigned int) const [clone .isra.3]>
   38138:	e2846019 	add	r6, r4, #25
   3813c:	e2507000 	subs	r7, r0, #0
   38140:	1a000006 	bne	38160 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xe0>
   38144:	ebff8167 	bl	186e8 <Network::Get()>
   38148:	ebffb57c 	bl	25740 <Network::GetHostName() const>
   3814c:	e3a0203f 	mov	r2, #63	; 0x3f
   38150:	e1a01000 	mov	r1, r0
   38154:	e1a00006 	mov	r0, r6
   38158:	ebff64d0 	bl	114a0 <strncpy@plt>
   3815c:	e5c47058 	strb	r7, [r4, #88]	; 0x58
   38160:	e3a01001 	mov	r1, #1
   38164:	e1a00005 	mov	r0, r5
   38168:	eb000059 	bl	382d4 <NetworkParams::isMaskSet(unsigned int) const [clone .isra.3]>
   3816c:	e3a05001 	mov	r5, #1
   38170:	e5d42018 	ldrb	r2, [r4, #24]
   38174:	e58d5000 	str	r5, [sp]
   38178:	e59f10f4 	ldr	r1, [pc, #244]	; 38274 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f4>
   3817c:	e1a03000 	mov	r3, r0
   38180:	e28d000c 	add	r0, sp, #12
   38184:	ebff916a 	bl	1c734 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)>
   38188:	e5940004 	ldr	r0, [r4, #4]
   3818c:	e3a01c01 	mov	r1, #256	; 0x100
   38190:	eb00004f 	bl	382d4 <NetworkParams::isMaskSet(unsigned int) const [clone .isra.3]>
   38194:	e5d42061 	ldrb	r2, [r4, #97]	; 0x61
   38198:	e58d5000 	str	r5, [sp]
   3819c:	e59f10d4 	ldr	r1, [pc, #212]	; 38278 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f8>
   381a0:	e1a03000 	mov	r3, r0
   381a4:	e28d000c 	add	r0, sp, #12
   381a8:	ebffaf84 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   381ac:	e59f10c8 	ldr	r1, [pc, #200]	; 3827c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1fc>
   381b0:	e28d000c 	add	r0, sp, #12
   381b4:	eb000f24 	bl	3be4c <PropertiesBuilder::AddComment(char const*)>
   381b8:	e5940004 	ldr	r0, [r4, #4]
   381bc:	e3a01002 	mov	r1, #2
   381c0:	eb000043 	bl	382d4 <NetworkParams::isMaskSet(unsigned int) const [clone .isra.3]>
   381c4:	e5942008 	ldr	r2, [r4, #8]
   381c8:	e59f10b0 	ldr	r1, [pc, #176]	; 38280 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x200>
   381cc:	e1a03000 	mov	r3, r0
   381d0:	e28d000c 	add	r0, sp, #12
   381d4:	eb000ee6 	bl	3bd74 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
   381d8:	e5940004 	ldr	r0, [r4, #4]
   381dc:	e3a01004 	mov	r1, #4
   381e0:	eb00003b 	bl	382d4 <NetworkParams::isMaskSet(unsigned int) const [clone .isra.3]>
   381e4:	e594200c 	ldr	r2, [r4, #12]
   381e8:	e59f1094 	ldr	r1, [pc, #148]	; 38284 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x204>
   381ec:	e1a03000 	mov	r3, r0
   381f0:	e28d000c 	add	r0, sp, #12
   381f4:	eb000ede 	bl	3bd74 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
   381f8:	e5940004 	ldr	r0, [r4, #4]
   381fc:	e3a01008 	mov	r1, #8
   38200:	eb000033 	bl	382d4 <NetworkParams::isMaskSet(unsigned int) const [clone .isra.3]>
   38204:	e5942010 	ldr	r2, [r4, #16]
   38208:	e59f1078 	ldr	r1, [pc, #120]	; 38288 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>
   3820c:	e1a03000 	mov	r3, r0
   38210:	e28d000c 	add	r0, sp, #12
   38214:	eb000ed6 	bl	3bd74 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
   38218:	e5940004 	ldr	r0, [r4, #4]
   3821c:	e3a01020 	mov	r1, #32
   38220:	eb00002b 	bl	382d4 <NetworkParams::isMaskSet(unsigned int) const [clone .isra.3]>
   38224:	e1a02006 	mov	r2, r6
   38228:	e59f105c 	ldr	r1, [pc, #92]	; 3828c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x20c>
   3822c:	e58d5000 	str	r5, [sp]
   38230:	e1a03000 	mov	r3, r0
   38234:	e28d000c 	add	r0, sp, #12
   38238:	ebff9157 	bl	1c79c <bool PropertiesBuilder::Add<char*>(char const*, char*, bool, unsigned int)>
   3823c:	e28d000c 	add	r0, sp, #12
   38240:	ebff7122 	bl	146d0 <PropertiesBuilder::GetSize()>
   38244:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   38248:	e5830000 	str	r0, [r3]
   3824c:	e28dd01c 	add	sp, sp, #28
   38250:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   38254:	e5943000 	ldr	r3, [r4]
   38258:	e1a01000 	mov	r1, r0
   3825c:	e1a00003 	mov	r0, r3
   38260:	e5932000 	ldr	r2, [r3]
   38264:	e592200c 	ldr	r2, [r2, #12]
   38268:	e12fff32 	blx	r2
   3826c:	eaffff8d 	b	380a8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x28>
   38270:	00049318 	.word	0x00049318
   38274:	00049324 	.word	0x00049324
   38278:	00049330 	.word	0x00049330
   3827c:	0004930c 	.word	0x0004930c
   38280:	00049340 	.word	0x00049340
   38284:	0004934c 	.word	0x0004934c
   38288:	00049358 	.word	0x00049358
   3828c:	00049368 	.word	0x00049368

00038290 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
   38290:	e590c000 	ldr	ip, [r0]
   38294:	e35c0000 	cmp	ip, #0
   38298:	1a000001 	bne	382a4 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x14>
   3829c:	e583c000 	str	ip, [r3]
   382a0:	e12fff1e 	bx	lr
   382a4:	e1a0c003 	mov	ip, r3
   382a8:	e92d4007 	push	{r0, r1, r2, lr}
   382ac:	e1a03002 	mov	r3, r2
   382b0:	e58dc000 	str	ip, [sp]
   382b4:	e1a02001 	mov	r2, r1
   382b8:	e3a01000 	mov	r1, #0
   382bc:	ebffff6f 	bl	38080 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>
   382c0:	e28dd00c 	add	sp, sp, #12
   382c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000382c8 <Network::GetIp() const [clone .isra.0]>:
   382c8:	e12fff1e 	bx	lr

000382cc <Network::GetGatewayIp() const [clone .isra.1]>:
   382cc:	e12fff1e 	bx	lr

000382d0 <Network::GetNetmask() const [clone .isra.2]>:
   382d0:	e12fff1e 	bx	lr

000382d4 <NetworkParams::isMaskSet(unsigned int) const [clone .isra.3]>:
   382d4:	e1d13000 	bics	r3, r1, r0
   382d8:	03a00001 	moveq	r0, #1
   382dc:	13a00000 	movne	r0, #0
   382e0:	e12fff1e 	bx	lr

000382e4 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
   382e4:	e92d4010 	push	{r4, lr}
   382e8:	e3a02020 	mov	r2, #32
   382ec:	e1a04000 	mov	r4, r0
   382f0:	e4801004 	str	r1, [r0], #4
   382f4:	e3a01000 	mov	r1, #0
   382f8:	ebff63db 	bl	1126c <memset@plt>
   382fc:	e59f3008 	ldr	r3, [pc, #8]	; 3830c <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)+0x28>
   38300:	e1a00004 	mov	r0, r4
   38304:	e1c432b4 	strh	r3, [r4, #36]	; 0x24
   38308:	e8bd8010 	pop	{r4, pc}
   3830c:	00007f05 	.word	0x00007f05

00038310 <DisplayUdfParams::Load()>:
   38310:	e3a03000 	mov	r3, #0
   38314:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
   38318:	e1a02000 	mov	r2, r0
   3831c:	e5803004 	str	r3, [r0, #4]
   38320:	e1a04000 	mov	r4, r0
   38324:	e59f1068 	ldr	r1, [pc, #104]	; 38394 <DisplayUdfParams::Load()+0x84>
   38328:	e1a0000d 	mov	r0, sp
   3832c:	eb000f21 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   38330:	e59f1060 	ldr	r1, [pc, #96]	; 38398 <DisplayUdfParams::Load()+0x88>
   38334:	e1a0000d 	mov	r0, sp
   38338:	eb000f3e 	bl	3c038 <ReadConfigFile::Read(char const*)>
   3833c:	e2505000 	subs	r5, r0, #0
   38340:	e5940000 	ldr	r0, [r4]
   38344:	0a00000a 	beq	38374 <DisplayUdfParams::Load()+0x64>
   38348:	e3500000 	cmp	r0, #0
   3834c:	0a000003 	beq	38360 <DisplayUdfParams::Load()+0x50>
   38350:	e5903000 	ldr	r3, [r0]
   38354:	e2841004 	add	r1, r4, #4
   38358:	e5933008 	ldr	r3, [r3, #8]
   3835c:	e12fff33 	blx	r3
   38360:	e1a0000d 	mov	r0, sp
   38364:	eb000f24 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   38368:	e1a00005 	mov	r0, r5
   3836c:	e28dd00c 	add	sp, sp, #12
   38370:	e8bd8030 	pop	{r4, r5, pc}
   38374:	e3500000 	cmp	r0, #0
   38378:	0afffff8 	beq	38360 <DisplayUdfParams::Load()+0x50>
   3837c:	e5903000 	ldr	r3, [r0]
   38380:	e2841004 	add	r1, r4, #4
   38384:	e3a05001 	mov	r5, #1
   38388:	e593300c 	ldr	r3, [r3, #12]
   3838c:	e12fff33 	blx	r3
   38390:	eafffff2 	b	38360 <DisplayUdfParams::Load()+0x50>
   38394:	00038754 	.word	0x00038754
   38398:	000496a0 	.word	0x000496a0

0003839c <DisplayUdfParams::Load(char const*, unsigned int)>:
   3839c:	e5903000 	ldr	r3, [r0]
   383a0:	e3530000 	cmp	r3, #0
   383a4:	012fff1e 	bxeq	lr
   383a8:	e3a03000 	mov	r3, #0
   383ac:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   383b0:	e1a06002 	mov	r6, r2
   383b4:	e5803004 	str	r3, [r0, #4]
   383b8:	e1a05001 	mov	r5, r1
   383bc:	e1a04000 	mov	r4, r0
   383c0:	e1a02000 	mov	r2, r0
   383c4:	e59f1038 	ldr	r1, [pc, #56]	; 38404 <DisplayUdfParams::Load(char const*, unsigned int)+0x68>
   383c8:	e1a0000d 	mov	r0, sp
   383cc:	eb000ef9 	bl	3bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
   383d0:	e1a02006 	mov	r2, r6
   383d4:	e1a01005 	mov	r1, r5
   383d8:	e1a0000d 	mov	r0, sp
   383dc:	eb000f60 	bl	3c164 <ReadConfigFile::Read(char const*, unsigned int)>
   383e0:	e1a01004 	mov	r1, r4
   383e4:	e4910004 	ldr	r0, [r1], #4
   383e8:	e5903000 	ldr	r3, [r0]
   383ec:	e5933008 	ldr	r3, [r3, #8]
   383f0:	e12fff33 	blx	r3
   383f4:	e1a0000d 	mov	r0, sp
   383f8:	eb000eff 	bl	3bffc <ReadConfigFile::~ReadConfigFile()>
   383fc:	e28dd008 	add	sp, sp, #8
   38400:	e8bd8070 	pop	{r4, r5, r6, pc}
   38404:	00038754 	.word	0x00038754

00038408 <DisplayUdfParams::callbackFunction(char const*)>:
   38408:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3840c:	e1a06001 	mov	r6, r1
   38410:	e1a04000 	mov	r4, r0
   38414:	e28d2007 	add	r2, sp, #7
   38418:	e59f10f0 	ldr	r1, [pc, #240]	; 38510 <DisplayUdfParams::callbackFunction(char const*)+0x108>
   3841c:	e1a00006 	mov	r0, r6
   38420:	eb000e07 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   38424:	e3500000 	cmp	r0, #0
   38428:	1a000008 	bne	38450 <DisplayUdfParams::callbackFunction(char const*)+0x48>
   3842c:	e5dd2007 	ldrb	r2, [sp, #7]
   38430:	e5943004 	ldr	r3, [r4, #4]
   38434:	e352007f 	cmp	r2, #127	; 0x7f
   38438:	13833202 	orrne	r3, r3, #536870912	; 0x20000000
   3843c:	03c33202 	biceq	r3, r3, #536870912	; 0x20000000
   38440:	e5c42025 	strb	r2, [r4, #37]	; 0x25
   38444:	e5843004 	str	r3, [r4, #4]
   38448:	e28dd00c 	add	sp, sp, #12
   3844c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   38450:	e28d2007 	add	r2, sp, #7
   38454:	e59f10b8 	ldr	r1, [pc, #184]	; 38514 <DisplayUdfParams::callbackFunction(char const*)+0x10c>
   38458:	e1a00006 	mov	r0, r6
   3845c:	eb000df8 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   38460:	e3500000 	cmp	r0, #0
   38464:	1a000006 	bne	38484 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
   38468:	e5dd2007 	ldrb	r2, [sp, #7]
   3846c:	e5943004 	ldr	r3, [r4, #4]
   38470:	e3520005 	cmp	r2, #5
   38474:	e5c42024 	strb	r2, [r4, #36]	; 0x24
   38478:	13833201 	orrne	r3, r3, #268435456	; 0x10000000
   3847c:	03c33201 	biceq	r3, r3, #268435456	; 0x10000000
   38480:	eaffffef 	b	38444 <DisplayUdfParams::callbackFunction(char const*)+0x3c>
   38484:	e28d2007 	add	r2, sp, #7
   38488:	e59f1088 	ldr	r1, [pc, #136]	; 38518 <DisplayUdfParams::callbackFunction(char const*)+0x110>
   3848c:	e1a00006 	mov	r0, r6
   38490:	eb000deb 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   38494:	e3500000 	cmp	r0, #0
   38498:	13a05000 	movne	r5, #0
   3849c:	159f7078 	ldrne	r7, [pc, #120]	; 3851c <DisplayUdfParams::callbackFunction(char const*)+0x114>
   384a0:	1a000008 	bne	384c8 <DisplayUdfParams::callbackFunction(char const*)+0xc0>
   384a4:	e5dd2007 	ldrb	r2, [sp, #7]
   384a8:	e5943004 	ldr	r3, [r4, #4]
   384ac:	e3520000 	cmp	r2, #0
   384b0:	13833101 	orrne	r3, r3, #1073741824	; 0x40000000
   384b4:	03c33101 	biceq	r3, r3, #1073741824	; 0x40000000
   384b8:	eaffffe1 	b	38444 <DisplayUdfParams::callbackFunction(char const*)+0x3c>
   384bc:	e2855001 	add	r5, r5, #1
   384c0:	e3550014 	cmp	r5, #20
   384c4:	0affffdf 	beq	38448 <DisplayUdfParams::callbackFunction(char const*)+0x40>
   384c8:	e28d2007 	add	r2, sp, #7
   384cc:	e4971004 	ldr	r1, [r7], #4
   384d0:	e1a00006 	mov	r0, r6
   384d4:	eb000dda 	bl	3bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>
   384d8:	e3500000 	cmp	r0, #0
   384dc:	1afffff6 	bne	384bc <DisplayUdfParams::callbackFunction(char const*)+0xb4>
   384e0:	e5dd1007 	ldrb	r1, [sp, #7]
   384e4:	e3a03001 	mov	r3, #1
   384e8:	e5942004 	ldr	r2, [r4, #4]
   384ec:	e1a03513 	lsl	r3, r3, r5
   384f0:	e241c001 	sub	ip, r1, #1
   384f4:	e0845005 	add	r5, r4, r5
   384f8:	e35c0005 	cmp	ip, #5
   384fc:	95c51008 	strbls	r1, [r5, #8]
   38500:	91833002 	orrls	r3, r3, r2
   38504:	85c50008 	strbhi	r0, [r5, #8]
   38508:	81c23003 	bichi	r3, r2, r3
   3850c:	eaffffcc 	b	38444 <DisplayUdfParams::callbackFunction(char const*)+0x3c>
   38510:	000496ac 	.word	0x000496ac
   38514:	000496b8 	.word	0x000496b8
   38518:	000496c8 	.word	0x000496c8
   3851c:	000494c0 	.word	0x000494c0

00038520 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
   38520:	e3510000 	cmp	r1, #0
   38524:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   38528:	e280c004 	add	ip, r0, #4
   3852c:	e24dd018 	sub	sp, sp, #24
   38530:	e1a04000 	mov	r4, r0
   38534:	e1a05002 	mov	r5, r2
   38538:	e1a06003 	mov	r6, r3
   3853c:	0a000042 	beq	3864c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>
   38540:	e1a0000c 	mov	r0, ip
   38544:	e2813020 	add	r3, r1, #32
   38548:	e4912004 	ldr	r2, [r1], #4
   3854c:	e1510003 	cmp	r1, r3
   38550:	e4802004 	str	r2, [r0], #4
   38554:	1afffffb 	bne	38548 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x28>
   38558:	e1d130b0 	ldrh	r3, [r1]
   3855c:	e1c030b0 	strh	r3, [r0]
   38560:	e1a03006 	mov	r3, r6
   38564:	e1a02005 	mov	r2, r5
   38568:	e59f10f4 	ldr	r1, [pc, #244]	; 38664 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x144>
   3856c:	e28d000c 	add	r0, sp, #12
   38570:	eb000dcb 	bl	3bca4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
   38574:	e3a01202 	mov	r1, #536870912	; 0x20000000
   38578:	e5940004 	ldr	r0, [r4, #4]
   3857c:	eb000085 	bl	38798 <DisplayUdfParams::isMaskSet(unsigned int) const [clone .isra.3]>
   38580:	e3a05001 	mov	r5, #1
   38584:	e5d42025 	ldrb	r2, [r4, #37]	; 0x25
   38588:	e59f10d8 	ldr	r1, [pc, #216]	; 38668 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x148>
   3858c:	e58d5000 	str	r5, [sp]
   38590:	e59f70d4 	ldr	r7, [pc, #212]	; 3866c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x14c>
   38594:	e3a06000 	mov	r6, #0
   38598:	e2849008 	add	r9, r4, #8
   3859c:	e1a03000 	mov	r3, r0
   385a0:	e28d000c 	add	r0, sp, #12
   385a4:	ebffae85 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   385a8:	e3a01201 	mov	r1, #268435456	; 0x10000000
   385ac:	e5940004 	ldr	r0, [r4, #4]
   385b0:	eb000078 	bl	38798 <DisplayUdfParams::isMaskSet(unsigned int) const [clone .isra.3]>
   385b4:	e5d42024 	ldrb	r2, [r4, #36]	; 0x24
   385b8:	e59f10b0 	ldr	r1, [pc, #176]	; 38670 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x150>
   385bc:	e58d5000 	str	r5, [sp]
   385c0:	e1a03000 	mov	r3, r0
   385c4:	e28d000c 	add	r0, sp, #12
   385c8:	ebffae7c 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   385cc:	e3a01101 	mov	r1, #1073741824	; 0x40000000
   385d0:	e5940004 	ldr	r0, [r4, #4]
   385d4:	eb00006f 	bl	38798 <DisplayUdfParams::isMaskSet(unsigned int) const [clone .isra.3]>
   385d8:	e58d5000 	str	r5, [sp]
   385dc:	e59f1090 	ldr	r1, [pc, #144]	; 38674 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x154>
   385e0:	e1a03000 	mov	r3, r0
   385e4:	e1a02000 	mov	r2, r0
   385e8:	e28d000c 	add	r0, sp, #12
   385ec:	ebff9050 	bl	1c734 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)>
   385f0:	e4978004 	ldr	r8, [r7], #4
   385f4:	e5d83000 	ldrb	r3, [r8]
   385f8:	e3530000 	cmp	r3, #0
   385fc:	0a000009 	beq	38628 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x108>
   38600:	e1a01615 	lsl	r1, r5, r6
   38604:	e5940004 	ldr	r0, [r4, #4]
   38608:	eb000062 	bl	38798 <DisplayUdfParams::isMaskSet(unsigned int) const [clone .isra.3]>
   3860c:	e7d9a006 	ldrb	sl, [r9, r6]
   38610:	e1a01008 	mov	r1, r8
   38614:	e58d5000 	str	r5, [sp]
   38618:	e1a0200a 	mov	r2, sl
   3861c:	e1a03000 	mov	r3, r0
   38620:	e28d000c 	add	r0, sp, #12
   38624:	ebffae65 	bl	23fc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int)>
   38628:	e2866001 	add	r6, r6, #1
   3862c:	e3560014 	cmp	r6, #20
   38630:	1affffee 	bne	385f0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xd0>
   38634:	e28d000c 	add	r0, sp, #12
   38638:	ebff7024 	bl	146d0 <PropertiesBuilder::GetSize()>
   3863c:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   38640:	e5830000 	str	r0, [r3]
   38644:	e28dd018 	add	sp, sp, #24
   38648:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3864c:	e5900000 	ldr	r0, [r0]
   38650:	e1a0100c 	mov	r1, ip
   38654:	e5903000 	ldr	r3, [r0]
   38658:	e593300c 	ldr	r3, [r3, #12]
   3865c:	e12fff33 	blx	r3
   38660:	eaffffbe 	b	38560 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x40>
   38664:	000496a0 	.word	0x000496a0
   38668:	000496ac 	.word	0x000496ac
   3866c:	000494c0 	.word	0x000494c0
   38670:	000496b8 	.word	0x000496b8
   38674:	000496c8 	.word	0x000496c8

00038678 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
   38678:	e590c000 	ldr	ip, [r0]
   3867c:	e35c0000 	cmp	ip, #0
   38680:	1a000001 	bne	3868c <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x14>
   38684:	e583c000 	str	ip, [r3]
   38688:	e12fff1e 	bx	lr
   3868c:	e1a0c003 	mov	ip, r3
   38690:	e92d4007 	push	{r0, r1, r2, lr}
   38694:	e1a03002 	mov	r3, r2
   38698:	e58dc000 	str	ip, [sp]
   3869c:	e1a02001 	mov	r2, r1
   386a0:	e3a01000 	mov	r1, #0
   386a4:	ebffff9d 	bl	38520 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
   386a8:	e28dd00c 	add	sp, sp, #12
   386ac:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000386b0 <DisplayUdfParams::Set(DisplayUdf*)>:
   386b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   386b4:	e1a04000 	mov	r4, r0
   386b8:	e1a06001 	mov	r6, r1
   386bc:	e5900004 	ldr	r0, [r0, #4]
   386c0:	e3a01202 	mov	r1, #536870912	; 0x20000000
   386c4:	eb000033 	bl	38798 <DisplayUdfParams::isMaskSet(unsigned int) const [clone .isra.3]>
   386c8:	e3500000 	cmp	r0, #0
   386cc:	0a000002 	beq	386dc <DisplayUdfParams::Set(DisplayUdf*)+0x2c>
   386d0:	e5d41025 	ldrb	r1, [r4, #37]	; 0x25
   386d4:	e5960018 	ldr	r0, [r6, #24]
   386d8:	eb000024 	bl	38770 <Display::SetContrast(unsigned char) [clone .isra.1]>
   386dc:	e3a01201 	mov	r1, #268435456	; 0x10000000
   386e0:	e5940004 	ldr	r0, [r4, #4]
   386e4:	eb00002b 	bl	38798 <DisplayUdfParams::isMaskSet(unsigned int) const [clone .isra.3]>
   386e8:	e3500000 	cmp	r0, #0
   386ec:	0a000002 	beq	386fc <DisplayUdfParams::Set(DisplayUdf*)+0x4c>
   386f0:	e5d41024 	ldrb	r1, [r4, #36]	; 0x24
   386f4:	e2860014 	add	r0, r6, #20
   386f8:	eb000017 	bl	3875c <Display::SetSleepTimeout(unsigned int) [clone .isra.0]>
   386fc:	e3a01101 	mov	r1, #1073741824	; 0x40000000
   38700:	e5940004 	ldr	r0, [r4, #4]
   38704:	eb000023 	bl	38798 <DisplayUdfParams::isMaskSet(unsigned int) const [clone .isra.3]>
   38708:	e3a05000 	mov	r5, #0
   3870c:	e3a07001 	mov	r7, #1
   38710:	e2848008 	add	r8, r4, #8
   38714:	e1a01000 	mov	r1, r0
   38718:	e5960018 	ldr	r0, [r6, #24]
   3871c:	eb000018 	bl	38784 <Display::SetFlipVertically(bool) [clone .isra.2]>
   38720:	e1a01517 	lsl	r1, r7, r5
   38724:	e5940004 	ldr	r0, [r4, #4]
   38728:	eb00001a 	bl	38798 <DisplayUdfParams::isMaskSet(unsigned int) const [clone .isra.3]>
   3872c:	e3500000 	cmp	r0, #0
   38730:	0a000003 	beq	38744 <DisplayUdfParams::Set(DisplayUdf*)+0x94>
   38734:	e1a02005 	mov	r2, r5
   38738:	e7d81005 	ldrb	r1, [r8, r5]
   3873c:	e1a00006 	mov	r0, r6
   38740:	eb000190 	bl	38d88 <DisplayUdf::Set(unsigned int, displayudf::Labels)>
   38744:	e2855001 	add	r5, r5, #1
   38748:	e3550014 	cmp	r5, #20
   3874c:	1afffff3 	bne	38720 <DisplayUdfParams::Set(DisplayUdf*)+0x70>
   38750:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00038754 <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
   38754:	eaffff2b 	b	38408 <DisplayUdfParams::callbackFunction(char const*)>

00038758 <DisplayUdfParams::Dump()>:
   38758:	e12fff1e 	bx	lr

0003875c <Display::SetSleepTimeout(unsigned int) [clone .isra.0]>:
   3875c:	e59f3008 	ldr	r3, [pc, #8]	; 3876c <Display::SetSleepTimeout(unsigned int) [clone .isra.0]+0x10>
   38760:	e0010193 	mul	r1, r3, r1
   38764:	e5801000 	str	r1, [r0]
   38768:	e12fff1e 	bx	lr
   3876c:	0000ea60 	.word	0x0000ea60

00038770 <Display::SetContrast(unsigned char) [clone .isra.1]>:
   38770:	e2503000 	subs	r3, r0, #0
   38774:	012fff1e 	bxeq	lr
   38778:	e5933000 	ldr	r3, [r3]
   3877c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   38780:	e12fff13 	bx	r3

00038784 <Display::SetFlipVertically(bool) [clone .isra.2]>:
   38784:	e2503000 	subs	r3, r0, #0
   38788:	012fff1e 	bxeq	lr
   3878c:	e5933000 	ldr	r3, [r3]
   38790:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   38794:	e12fff13 	bx	r3

00038798 <DisplayUdfParams::isMaskSet(unsigned int) const [clone .isra.3]>:
   38798:	e1d13000 	bics	r3, r1, r0
   3879c:	03a00001 	moveq	r0, #1
   387a0:	13a00000 	movne	r0, #0
   387a4:	e12fff1e 	bx	lr

000387a8 <Display::ClearLine(unsigned int)>:
   387a8:	e92d4800 	push	{fp, lr}
   387ac:	e28db004 	add	fp, sp, #4
   387b0:	e24dd008 	sub	sp, sp, #8
   387b4:	e50b0008 	str	r0, [fp, #-8]
   387b8:	e50b100c 	str	r1, [fp, #-12]
   387bc:	e51b3008 	ldr	r3, [fp, #-8]
   387c0:	e5933018 	ldr	r3, [r3, #24]
   387c4:	e3530000 	cmp	r3, #0
   387c8:	0a00000a 	beq	387f8 <Display::ClearLine(unsigned int)+0x50>
   387cc:	e51b3008 	ldr	r3, [fp, #-8]
   387d0:	e5932018 	ldr	r2, [r3, #24]
   387d4:	e51b3008 	ldr	r3, [fp, #-8]
   387d8:	e5933018 	ldr	r3, [r3, #24]
   387dc:	e5933000 	ldr	r3, [r3]
   387e0:	e2833010 	add	r3, r3, #16
   387e4:	e5933000 	ldr	r3, [r3]
   387e8:	e51b100c 	ldr	r1, [fp, #-12]
   387ec:	e1a00002 	mov	r0, r2
   387f0:	e12fff33 	blx	r3
   387f4:	ea000000 	b	387fc <Display::ClearLine(unsigned int)+0x54>
   387f8:	e1a00000 	nop			; (mov r0, r0)
   387fc:	e24bd004 	sub	sp, fp, #4
   38800:	e8bd8800 	pop	{fp, pc}

00038804 <ArtNetRdmResponder::GetDmxStartAddress(unsigned short)>:
   38804:	e92d4800 	push	{fp, lr}
   38808:	e28db004 	add	fp, sp, #4
   3880c:	e24dd008 	sub	sp, sp, #8
   38810:	e50b0008 	str	r0, [fp, #-8]
   38814:	e1a03001 	mov	r3, r1
   38818:	e14b30ba 	strh	r3, [fp, #-10]
   3881c:	e51b3008 	ldr	r3, [fp, #-8]
   38820:	e2833004 	add	r3, r3, #4
   38824:	e15b20ba 	ldrh	r2, [fp, #-10]
   38828:	e1a01002 	mov	r1, r2
   3882c:	e1a00003 	mov	r0, r3
   38830:	ebff727e 	bl	15230 <RDMDeviceResponder::GetDmxStartAddress(unsigned short)>
   38834:	e1a03000 	mov	r3, r0
   38838:	e1a00003 	mov	r0, r3
   3883c:	e24bd004 	sub	sp, fp, #4
   38840:	e8bd8800 	pop	{fp, pc}

00038844 <ArtNetRdmResponder::GetDmxFootPrint(unsigned short)>:
   38844:	e92d4800 	push	{fp, lr}
   38848:	e28db004 	add	fp, sp, #4
   3884c:	e24dd008 	sub	sp, sp, #8
   38850:	e50b0008 	str	r0, [fp, #-8]
   38854:	e1a03001 	mov	r3, r1
   38858:	e14b30ba 	strh	r3, [fp, #-10]
   3885c:	e51b3008 	ldr	r3, [fp, #-8]
   38860:	e2833004 	add	r3, r3, #4
   38864:	e15b20ba 	ldrh	r2, [fp, #-10]
   38868:	e1a01002 	mov	r1, r2
   3886c:	e1a00003 	mov	r0, r3
   38870:	ebff72b3 	bl	15344 <RDMDeviceResponder::GetDmxFootPrint(unsigned short)>
   38874:	e1a03000 	mov	r3, r0
   38878:	e1a00003 	mov	r0, r3
   3887c:	e24bd004 	sub	sp, fp, #4
   38880:	e8bd8800 	pop	{fp, pc}

00038884 <ArtNetRdmResponder::Get()>:
   38884:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   38888:	e28db000 	add	fp, sp, #0
   3888c:	e59f3010 	ldr	r3, [pc, #16]	; 388a4 <ArtNetRdmResponder::Get()+0x20>
   38890:	e5933000 	ldr	r3, [r3]
   38894:	e1a00003 	mov	r0, r3
   38898:	e28bd000 	add	sp, fp, #0
   3889c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   388a0:	e12fff1e 	bx	lr
   388a4:	0005c2a0 	.word	0x0005c2a0

000388a8 <DisplayUdf::ShowDmxStartAddress()>:
   388a8:	e92d4800 	push	{fp, lr}
   388ac:	e28db004 	add	fp, sp, #4
   388b0:	e24dd018 	sub	sp, sp, #24
   388b4:	e50b0010 	str	r0, [fp, #-16]
   388b8:	ebfffff1 	bl	38884 <ArtNetRdmResponder::Get()>
   388bc:	e1a03000 	mov	r3, r0
   388c0:	e3a01000 	mov	r1, #0
   388c4:	e1a00003 	mov	r0, r3
   388c8:	ebffffcd 	bl	38804 <ArtNetRdmResponder::GetDmxStartAddress(unsigned short)>
   388cc:	e1a03000 	mov	r3, r0
   388d0:	e14b30b6 	strh	r3, [fp, #-6]
   388d4:	ebffffea 	bl	38884 <ArtNetRdmResponder::Get()>
   388d8:	e1a03000 	mov	r3, r0
   388dc:	e3a01000 	mov	r1, #0
   388e0:	e1a00003 	mov	r0, r3
   388e4:	ebffffd6 	bl	38844 <ArtNetRdmResponder::GetDmxFootPrint(unsigned short)>
   388e8:	e1a03000 	mov	r3, r0
   388ec:	e14b30b8 	strh	r3, [fp, #-8]
   388f0:	e51b0010 	ldr	r0, [fp, #-16]
   388f4:	e51b3010 	ldr	r3, [fp, #-16]
   388f8:	e5d33049 	ldrb	r3, [r3, #73]	; 0x49
   388fc:	e1a01003 	mov	r1, r3
   38900:	e15b20b6 	ldrh	r2, [fp, #-6]
   38904:	e15b30b8 	ldrh	r3, [fp, #-8]
   38908:	e58d3000 	str	r3, [sp]
   3890c:	e1a03002 	mov	r3, r2
   38910:	e59f200c 	ldr	r2, [pc, #12]	; 38924 <DisplayUdf::ShowDmxStartAddress()+0x7c>
   38914:	ebff6501 	bl	11d20 <Display::Printf(unsigned int, char const*, ...)>
   38918:	e1a00000 	nop			; (mov r0, r0)
   3891c:	e24bd004 	sub	sp, fp, #4
   38920:	e8bd8800 	pop	{fp, pc}
   38924:	00049640 	.word	0x00049640

00038928 <DisplayUdf::ShowIpAddress()>:
   38928:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3892c:	e28db020 	add	fp, sp, #32
   38930:	e24dd024 	sub	sp, sp, #36	; 0x24
   38934:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   38938:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   3893c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   38940:	e5d3303e 	ldrb	r3, [r3, #62]	; 0x3e
   38944:	e1a01003 	mov	r1, r3
   38948:	e1a00002 	mov	r0, r2
   3894c:	ebffff95 	bl	387a8 <Display::ClearLine(unsigned int)>
   38950:	e51b7028 	ldr	r7, [fp, #-40]	; 0xffffffd8
   38954:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   38958:	e5d3303e 	ldrb	r3, [r3, #62]	; 0x3e
   3895c:	e1a0a003 	mov	sl, r3
   38960:	ebff7f60 	bl	186e8 <Network::Get()>
   38964:	e1a03000 	mov	r3, r0
   38968:	e1a00003 	mov	r0, r3
   3896c:	ebff7f53 	bl	186c0 <Network::GetIp() const>
   38970:	e1a03000 	mov	r3, r0
   38974:	e6ef8073 	uxtb	r8, r3
   38978:	ebff7f5a 	bl	186e8 <Network::Get()>
   3897c:	e1a03000 	mov	r3, r0
   38980:	e1a00003 	mov	r0, r3
   38984:	ebff7f4d 	bl	186c0 <Network::GetIp() const>
   38988:	e1a03000 	mov	r3, r0
   3898c:	e1a03423 	lsr	r3, r3, #8
   38990:	e6ef4073 	uxtb	r4, r3
   38994:	ebff7f53 	bl	186e8 <Network::Get()>
   38998:	e1a03000 	mov	r3, r0
   3899c:	e1a00003 	mov	r0, r3
   389a0:	ebff7f46 	bl	186c0 <Network::GetIp() const>
   389a4:	e1a03000 	mov	r3, r0
   389a8:	e1a03823 	lsr	r3, r3, #16
   389ac:	e6ef5073 	uxtb	r5, r3
   389b0:	ebff7f4c 	bl	186e8 <Network::Get()>
   389b4:	e1a03000 	mov	r3, r0
   389b8:	e1a00003 	mov	r0, r3
   389bc:	ebff7f3f 	bl	186c0 <Network::GetIp() const>
   389c0:	e1a03000 	mov	r3, r0
   389c4:	e1a03c23 	lsr	r3, r3, #24
   389c8:	e6ef6073 	uxtb	r6, r3
   389cc:	ebff7f45 	bl	186e8 <Network::Get()>
   389d0:	e1a03000 	mov	r3, r0
   389d4:	e1a00003 	mov	r0, r3
   389d8:	ebfff38c 	bl	35810 <Network::GetNetmaskCIDR() const>
   389dc:	e1a09000 	mov	r9, r0
   389e0:	ebff7f40 	bl	186e8 <Network::Get()>
   389e4:	e1a03000 	mov	r3, r0
   389e8:	e1a00003 	mov	r0, r3
   389ec:	ebfff39d 	bl	35868 <Network::GetAddressingMode()>
   389f0:	e1a03000 	mov	r3, r0
   389f4:	e58d3010 	str	r3, [sp, #16]
   389f8:	e58d900c 	str	r9, [sp, #12]
   389fc:	e58d6008 	str	r6, [sp, #8]
   38a00:	e58d5004 	str	r5, [sp, #4]
   38a04:	e58d4000 	str	r4, [sp]
   38a08:	e1a03008 	mov	r3, r8
   38a0c:	e59f2014 	ldr	r2, [pc, #20]	; 38a28 <DisplayUdf::ShowIpAddress()+0x100>
   38a10:	e1a0100a 	mov	r1, sl
   38a14:	e1a00007 	mov	r0, r7
   38a18:	ebff64c0 	bl	11d20 <Display::Printf(unsigned int, char const*, ...)>
   38a1c:	e1a00000 	nop			; (mov r0, r0)
   38a20:	e24bd020 	sub	sp, fp, #32
   38a24:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38a28:	00049650 	.word	0x00049650

00038a2c <DisplayUdf::ShowNetmask()>:
   38a2c:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   38a30:	e28db018 	add	fp, sp, #24
   38a34:	e24dd01c 	sub	sp, sp, #28
   38a38:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   38a3c:	e51b6020 	ldr	r6, [fp, #-32]	; 0xffffffe0
   38a40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   38a44:	e5d33048 	ldrb	r3, [r3, #72]	; 0x48
   38a48:	e1a08003 	mov	r8, r3
   38a4c:	ebff7f25 	bl	186e8 <Network::Get()>
   38a50:	e1a03000 	mov	r3, r0
   38a54:	e1a00003 	mov	r0, r3
   38a58:	ebffa854 	bl	22bb0 <Network::GetNetmask() const>
   38a5c:	e1a03000 	mov	r3, r0
   38a60:	e6ef7073 	uxtb	r7, r3
   38a64:	ebff7f1f 	bl	186e8 <Network::Get()>
   38a68:	e1a03000 	mov	r3, r0
   38a6c:	e1a00003 	mov	r0, r3
   38a70:	ebffa84e 	bl	22bb0 <Network::GetNetmask() const>
   38a74:	e1a03000 	mov	r3, r0
   38a78:	e1a03423 	lsr	r3, r3, #8
   38a7c:	e6ef4073 	uxtb	r4, r3
   38a80:	ebff7f18 	bl	186e8 <Network::Get()>
   38a84:	e1a03000 	mov	r3, r0
   38a88:	e1a00003 	mov	r0, r3
   38a8c:	ebffa847 	bl	22bb0 <Network::GetNetmask() const>
   38a90:	e1a03000 	mov	r3, r0
   38a94:	e1a03823 	lsr	r3, r3, #16
   38a98:	e6ef5073 	uxtb	r5, r3
   38a9c:	ebff7f11 	bl	186e8 <Network::Get()>
   38aa0:	e1a03000 	mov	r3, r0
   38aa4:	e1a00003 	mov	r0, r3
   38aa8:	ebffa840 	bl	22bb0 <Network::GetNetmask() const>
   38aac:	e1a03000 	mov	r3, r0
   38ab0:	e1a03c23 	lsr	r3, r3, #24
   38ab4:	e6ef3073 	uxtb	r3, r3
   38ab8:	e58d3008 	str	r3, [sp, #8]
   38abc:	e58d5004 	str	r5, [sp, #4]
   38ac0:	e58d4000 	str	r4, [sp]
   38ac4:	e1a03007 	mov	r3, r7
   38ac8:	e59f201c 	ldr	r2, [pc, #28]	; 38aec <DisplayUdf::ShowNetmask()+0xc0>
   38acc:	e1a01008 	mov	r1, r8
   38ad0:	e1a00006 	mov	r0, r6
   38ad4:	ebff6491 	bl	11d20 <Display::Printf(unsigned int, char const*, ...)>
   38ad8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   38adc:	ebffff91 	bl	38928 <DisplayUdf::ShowIpAddress()>
   38ae0:	e1a00000 	nop			; (mov r0, r0)
   38ae4:	e24bd018 	sub	sp, fp, #24
   38ae8:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   38aec:	00049664 	.word	0x00049664

00038af0 <DisplayUdf::ShowGatewayIp()>:
   38af0:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   38af4:	e28db018 	add	fp, sp, #24
   38af8:	e24dd01c 	sub	sp, sp, #28
   38afc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   38b00:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   38b04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   38b08:	e5d3304e 	ldrb	r3, [r3, #78]	; 0x4e
   38b0c:	e1a01003 	mov	r1, r3
   38b10:	e1a00002 	mov	r0, r2
   38b14:	ebffff23 	bl	387a8 <Display::ClearLine(unsigned int)>
   38b18:	e51b6020 	ldr	r6, [fp, #-32]	; 0xffffffe0
   38b1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   38b20:	e5d3304e 	ldrb	r3, [r3, #78]	; 0x4e
   38b24:	e1a08003 	mov	r8, r3
   38b28:	ebff7eee 	bl	186e8 <Network::Get()>
   38b2c:	e1a03000 	mov	r3, r0
   38b30:	e1a00003 	mov	r0, r3
   38b34:	ebffa813 	bl	22b88 <Network::GetGatewayIp() const>
   38b38:	e1a03000 	mov	r3, r0
   38b3c:	e6ef7073 	uxtb	r7, r3
   38b40:	ebff7ee8 	bl	186e8 <Network::Get()>
   38b44:	e1a03000 	mov	r3, r0
   38b48:	e1a00003 	mov	r0, r3
   38b4c:	ebffa80d 	bl	22b88 <Network::GetGatewayIp() const>
   38b50:	e1a03000 	mov	r3, r0
   38b54:	e1a03423 	lsr	r3, r3, #8
   38b58:	e6ef4073 	uxtb	r4, r3
   38b5c:	ebff7ee1 	bl	186e8 <Network::Get()>
   38b60:	e1a03000 	mov	r3, r0
   38b64:	e1a00003 	mov	r0, r3
   38b68:	ebffa806 	bl	22b88 <Network::GetGatewayIp() const>
   38b6c:	e1a03000 	mov	r3, r0
   38b70:	e1a03823 	lsr	r3, r3, #16
   38b74:	e6ef5073 	uxtb	r5, r3
   38b78:	ebff7eda 	bl	186e8 <Network::Get()>
   38b7c:	e1a03000 	mov	r3, r0
   38b80:	e1a00003 	mov	r0, r3
   38b84:	ebffa7ff 	bl	22b88 <Network::GetGatewayIp() const>
   38b88:	e1a03000 	mov	r3, r0
   38b8c:	e1a03c23 	lsr	r3, r3, #24
   38b90:	e6ef3073 	uxtb	r3, r3
   38b94:	e58d3008 	str	r3, [sp, #8]
   38b98:	e58d5004 	str	r5, [sp, #4]
   38b9c:	e58d4000 	str	r4, [sp]
   38ba0:	e1a03007 	mov	r3, r7
   38ba4:	e59f2014 	ldr	r2, [pc, #20]	; 38bc0 <DisplayUdf::ShowGatewayIp()+0xd0>
   38ba8:	e1a01008 	mov	r1, r8
   38bac:	e1a00006 	mov	r0, r6
   38bb0:	ebff645a 	bl	11d20 <Display::Printf(unsigned int, char const*, ...)>
   38bb4:	e1a00000 	nop			; (mov r0, r0)
   38bb8:	e24bd018 	sub	sp, fp, #24
   38bbc:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   38bc0:	00049674 	.word	0x00049674

00038bc4 <DisplayUdf::ShowHostName()>:
   38bc4:	e92d4830 	push	{r4, r5, fp, lr}
   38bc8:	e28db00c 	add	fp, sp, #12
   38bcc:	e24dd008 	sub	sp, sp, #8
   38bd0:	e50b0010 	str	r0, [fp, #-16]
   38bd4:	e51b2010 	ldr	r2, [fp, #-16]
   38bd8:	e51b3010 	ldr	r3, [fp, #-16]
   38bdc:	e5d33043 	ldrb	r3, [r3, #67]	; 0x43
   38be0:	e1a01003 	mov	r1, r3
   38be4:	e1a00002 	mov	r0, r2
   38be8:	ebfffeee 	bl	387a8 <Display::ClearLine(unsigned int)>
   38bec:	e51b4010 	ldr	r4, [fp, #-16]
   38bf0:	e51b3010 	ldr	r3, [fp, #-16]
   38bf4:	e5d33043 	ldrb	r3, [r3, #67]	; 0x43
   38bf8:	e1a05003 	mov	r5, r3
   38bfc:	ebff7eb9 	bl	186e8 <Network::Get()>
   38c00:	e1a03000 	mov	r3, r0
   38c04:	e1a00003 	mov	r0, r3
   38c08:	ebffb2cc 	bl	25740 <Network::GetHostName() const>
   38c0c:	e1a03000 	mov	r3, r0
   38c10:	e1a02003 	mov	r2, r3
   38c14:	e1a01005 	mov	r1, r5
   38c18:	e1a00004 	mov	r0, r4
   38c1c:	ebff6408 	bl	11c44 <Display::Write(unsigned int, char const*)>
   38c20:	e1a00000 	nop			; (mov r0, r0)
   38c24:	e24bd00c 	sub	sp, fp, #12
   38c28:	e8bd8830 	pop	{r4, r5, fp, pc}

00038c2c <FirmwareVersion::GetVersion()>:
   38c2c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   38c30:	e28db000 	add	fp, sp, #0
   38c34:	e24dd00c 	sub	sp, sp, #12
   38c38:	e50b0008 	str	r0, [fp, #-8]
   38c3c:	e59f300c 	ldr	r3, [pc, #12]	; 38c50 <FirmwareVersion::GetVersion()+0x24>
   38c40:	e1a00003 	mov	r0, r3
   38c44:	e28bd000 	add	sp, fp, #0
   38c48:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   38c4c:	e12fff1e 	bx	lr
   38c50:	0005f380 	.word	0x0005f380

00038c54 <FirmwareVersion::Get()>:
   38c54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   38c58:	e28db000 	add	fp, sp, #0
   38c5c:	e59f3010 	ldr	r3, [pc, #16]	; 38c74 <FirmwareVersion::Get()+0x20>
   38c60:	e5933000 	ldr	r3, [r3]
   38c64:	e1a00003 	mov	r0, r3
   38c68:	e28bd000 	add	sp, fp, #0
   38c6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   38c70:	e12fff1e 	bx	lr
   38c74:	0005f3d8 	.word	0x0005f3d8

00038c78 <DisplayUdf::DisplayUdf()>:
   38c78:	e92d4800 	push	{fp, lr}
   38c7c:	e28db004 	add	fp, sp, #4
   38c80:	e24dd010 	sub	sp, sp, #16
   38c84:	e50b0010 	str	r0, [fp, #-16]
   38c88:	e51b3010 	ldr	r3, [fp, #-16]
   38c8c:	e1a00003 	mov	r0, r3
   38c90:	eb0002cb 	bl	397c4 <Display::Display()>
   38c94:	e51b3010 	ldr	r3, [fp, #-16]
   38c98:	e3a02000 	mov	r2, #0
   38c9c:	e5832050 	str	r2, [r3, #80]	; 0x50
   38ca0:	e51b3010 	ldr	r3, [fp, #-16]
   38ca4:	e3a02002 	mov	r2, #2
   38ca8:	e5832054 	str	r2, [r3, #84]	; 0x54
   38cac:	e51b3010 	ldr	r3, [fp, #-16]
   38cb0:	e3a02000 	mov	r2, #0
   38cb4:	e5832058 	str	r2, [r3, #88]	; 0x58
   38cb8:	e59f2060 	ldr	r2, [pc, #96]	; 38d20 <DisplayUdf::DisplayUdf()+0xa8>
   38cbc:	e51b3010 	ldr	r3, [fp, #-16]
   38cc0:	e5823000 	str	r3, [r2]
   38cc4:	e3a03000 	mov	r3, #0
   38cc8:	e50b3008 	str	r3, [fp, #-8]
   38ccc:	e51b3008 	ldr	r3, [fp, #-8]
   38cd0:	e3530013 	cmp	r3, #19
   38cd4:	8a00000d 	bhi	38d10 <DisplayUdf::DisplayUdf()+0x98>
   38cd8:	e51b3008 	ldr	r3, [fp, #-8]
   38cdc:	e6ef3073 	uxtb	r3, r3
   38ce0:	e2833001 	add	r3, r3, #1
   38ce4:	e6ef1073 	uxtb	r1, r3
   38ce8:	e51b2010 	ldr	r2, [fp, #-16]
   38cec:	e51b3008 	ldr	r3, [fp, #-8]
   38cf0:	e0823003 	add	r3, r2, r3
   38cf4:	e283303c 	add	r3, r3, #60	; 0x3c
   38cf8:	e1a02001 	mov	r2, r1
   38cfc:	e5c32000 	strb	r2, [r3]
   38d00:	e51b3008 	ldr	r3, [fp, #-8]
   38d04:	e2833001 	add	r3, r3, #1
   38d08:	e50b3008 	str	r3, [fp, #-8]
   38d0c:	eaffffee 	b	38ccc <DisplayUdf::DisplayUdf()+0x54>
   38d10:	e51b3010 	ldr	r3, [fp, #-16]
   38d14:	e1a00003 	mov	r0, r3
   38d18:	e24bd004 	sub	sp, fp, #4
   38d1c:	e8bd8800 	pop	{fp, pc}
   38d20:	0005f2e8 	.word	0x0005f2e8

00038d24 <DisplayUdf::SetTitle(char const*, ...)>:
   38d24:	e92d000e 	push	{r1, r2, r3}
   38d28:	e92d4800 	push	{fp, lr}
   38d2c:	e28db004 	add	fp, sp, #4
   38d30:	e24dd014 	sub	sp, sp, #20
   38d34:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
   38d38:	e28b3008 	add	r3, fp, #8
   38d3c:	e50b3010 	str	r3, [fp, #-16]
   38d40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   38d44:	e283001c 	add	r0, r3, #28
   38d48:	e51b3010 	ldr	r3, [fp, #-16]
   38d4c:	e59b2004 	ldr	r2, [fp, #4]
   38d50:	e3a0101f 	mov	r1, #31
   38d54:	ebff61e9 	bl	11500 <vsnprintf@plt>
   38d58:	e50b000c 	str	r0, [fp, #-12]
   38d5c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   38d60:	e51b300c 	ldr	r3, [fp, #-12]
   38d64:	e0823003 	add	r3, r2, r3
   38d68:	e283301c 	add	r3, r3, #28
   38d6c:	e3a02000 	mov	r2, #0
   38d70:	e5c32000 	strb	r2, [r3]
   38d74:	e1a00000 	nop			; (mov r0, r0)
   38d78:	e24bd004 	sub	sp, fp, #4
   38d7c:	e8bd4800 	pop	{fp, lr}
   38d80:	e28dd00c 	add	sp, sp, #12
   38d84:	e12fff1e 	bx	lr

00038d88 <DisplayUdf::Set(unsigned int, displayudf::Labels)>:
   38d88:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   38d8c:	e28db000 	add	fp, sp, #0
   38d90:	e24dd01c 	sub	sp, sp, #28
   38d94:	e50b0010 	str	r0, [fp, #-16]
   38d98:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   38d9c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   38da0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   38da4:	e3530000 	cmp	r3, #0
   38da8:	0a000027 	beq	38e4c <DisplayUdf::Set(unsigned int, displayudf::Labels)+0xc4>
   38dac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   38db0:	e3530006 	cmp	r3, #6
   38db4:	8a000024 	bhi	38e4c <DisplayUdf::Set(unsigned int, displayudf::Labels)+0xc4>
   38db8:	e3a03000 	mov	r3, #0
   38dbc:	e50b3008 	str	r3, [fp, #-8]
   38dc0:	e51b3008 	ldr	r3, [fp, #-8]
   38dc4:	e3530013 	cmp	r3, #19
   38dc8:	8a000017 	bhi	38e2c <DisplayUdf::Set(unsigned int, displayudf::Labels)+0xa4>
   38dcc:	e51b2010 	ldr	r2, [fp, #-16]
   38dd0:	e51b3008 	ldr	r3, [fp, #-8]
   38dd4:	e0823003 	add	r3, r2, r3
   38dd8:	e283303c 	add	r3, r3, #60	; 0x3c
   38ddc:	e5d32000 	ldrb	r2, [r3]
   38de0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   38de4:	e6ef3073 	uxtb	r3, r3
   38de8:	e1520003 	cmp	r2, r3
   38dec:	1a00000a 	bne	38e1c <DisplayUdf::Set(unsigned int, displayudf::Labels)+0x94>
   38df0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   38df4:	e51b2010 	ldr	r2, [fp, #-16]
   38df8:	e0823003 	add	r3, r2, r3
   38dfc:	e5d3103c 	ldrb	r1, [r3, #60]	; 0x3c
   38e00:	e51b2010 	ldr	r2, [fp, #-16]
   38e04:	e51b3008 	ldr	r3, [fp, #-8]
   38e08:	e0823003 	add	r3, r2, r3
   38e0c:	e283303c 	add	r3, r3, #60	; 0x3c
   38e10:	e1a02001 	mov	r2, r1
   38e14:	e5c32000 	strb	r2, [r3]
   38e18:	ea000003 	b	38e2c <DisplayUdf::Set(unsigned int, displayudf::Labels)+0xa4>
   38e1c:	e51b3008 	ldr	r3, [fp, #-8]
   38e20:	e2833001 	add	r3, r3, #1
   38e24:	e50b3008 	str	r3, [fp, #-8]
   38e28:	eaffffe4 	b	38dc0 <DisplayUdf::Set(unsigned int, displayudf::Labels)+0x38>
   38e2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   38e30:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   38e34:	e6ef1072 	uxtb	r1, r2
   38e38:	e51b2010 	ldr	r2, [fp, #-16]
   38e3c:	e0823003 	add	r3, r2, r3
   38e40:	e1a02001 	mov	r2, r1
   38e44:	e5c3203c 	strb	r2, [r3, #60]	; 0x3c
   38e48:	ea000000 	b	38e50 <DisplayUdf::Set(unsigned int, displayudf::Labels)+0xc8>
   38e4c:	e1a00000 	nop			; (mov r0, r0)
   38e50:	e28bd000 	add	sp, fp, #0
   38e54:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   38e58:	e12fff1e 	bx	lr

00038e5c <DisplayUdf::Show()>:
   38e5c:	e92d4830 	push	{r4, r5, fp, lr}
   38e60:	e28db00c 	add	fp, sp, #12
   38e64:	e24dd020 	sub	sp, sp, #32
   38e68:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   38e6c:	e3a03000 	mov	r3, #0
   38e70:	e50b3010 	str	r3, [fp, #-16]
   38e74:	e51b3010 	ldr	r3, [fp, #-16]
   38e78:	e3530013 	cmp	r3, #19
   38e7c:	8a000010 	bhi	38ec4 <DisplayUdf::Show()+0x68>
   38e80:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   38e84:	e51b3010 	ldr	r3, [fp, #-16]
   38e88:	e0823003 	add	r3, r2, r3
   38e8c:	e283303c 	add	r3, r3, #60	; 0x3c
   38e90:	e5d33000 	ldrb	r3, [r3]
   38e94:	e3530006 	cmp	r3, #6
   38e98:	9a000005 	bls	38eb4 <DisplayUdf::Show()+0x58>
   38e9c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   38ea0:	e51b3010 	ldr	r3, [fp, #-16]
   38ea4:	e0823003 	add	r3, r2, r3
   38ea8:	e283303c 	add	r3, r3, #60	; 0x3c
   38eac:	e3e02000 	mvn	r2, #0
   38eb0:	e5c32000 	strb	r2, [r3]
   38eb4:	e51b3010 	ldr	r3, [fp, #-16]
   38eb8:	e2833001 	add	r3, r3, #1
   38ebc:	e50b3010 	str	r3, [fp, #-16]
   38ec0:	eaffffeb 	b	38e74 <DisplayUdf::Show()+0x18>
   38ec4:	e3a03001 	mov	r3, #1
   38ec8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   38ecc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   38ed0:	e3530005 	cmp	r3, #5
   38ed4:	8a000007 	bhi	38ef8 <DisplayUdf::Show()+0x9c>
   38ed8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   38edc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   38ee0:	e1a00003 	mov	r0, r3
   38ee4:	ebfffe2f 	bl	387a8 <Display::ClearLine(unsigned int)>
   38ee8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   38eec:	e2833001 	add	r3, r3, #1
   38ef0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   38ef4:	eafffff4 	b	38ecc <DisplayUdf::Show()+0x70>
   38ef8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   38efc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   38f00:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
   38f04:	e1a01003 	mov	r1, r3
   38f08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   38f0c:	e283301c 	add	r3, r3, #28
   38f10:	e1a02003 	mov	r2, r3
   38f14:	ebff634a 	bl	11c44 <Display::Write(unsigned int, char const*)>
   38f18:	e51b4020 	ldr	r4, [fp, #-32]	; 0xffffffe0
   38f1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   38f20:	e5d3303d 	ldrb	r3, [r3, #61]	; 0x3d
   38f24:	e1a05003 	mov	r5, r3
   38f28:	ebff61b4 	bl	11600 <Hardware::Get()>
   38f2c:	e1a02000 	mov	r2, r0
   38f30:	e24b3015 	sub	r3, fp, #21
   38f34:	e1a01003 	mov	r1, r3
   38f38:	e1a00002 	mov	r0, r2
   38f3c:	eb001b25 	bl	3fbd8 <Hardware::GetBoardName(unsigned char&)>
   38f40:	e1a03000 	mov	r3, r0
   38f44:	e1a02003 	mov	r2, r3
   38f48:	e1a01005 	mov	r1, r5
   38f4c:	e1a00004 	mov	r0, r4
   38f50:	ebff633b 	bl	11c44 <Display::Write(unsigned int, char const*)>
   38f54:	e51b4020 	ldr	r4, [fp, #-32]	; 0xffffffe0
   38f58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   38f5c:	e5d3303f 	ldrb	r3, [r3, #63]	; 0x3f
   38f60:	e1a05003 	mov	r5, r3
   38f64:	ebffff3a 	bl	38c54 <FirmwareVersion::Get()>
   38f68:	e1a03000 	mov	r3, r0
   38f6c:	e1a00003 	mov	r0, r3
   38f70:	ebffff2d 	bl	38c2c <FirmwareVersion::GetVersion()>
   38f74:	e1a03000 	mov	r3, r0
   38f78:	e58d3000 	str	r3, [sp]
   38f7c:	e3a03003 	mov	r3, #3
   38f80:	e59f203c 	ldr	r2, [pc, #60]	; 38fc4 <DisplayUdf::Show()+0x168>
   38f84:	e1a01005 	mov	r1, r5
   38f88:	e1a00004 	mov	r0, r4
   38f8c:	ebff6363 	bl	11d20 <Display::Printf(unsigned int, char const*, ...)>
   38f90:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   38f94:	ebfffe43 	bl	388a8 <DisplayUdf::ShowDmxStartAddress()>
   38f98:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   38f9c:	ebfffe61 	bl	38928 <DisplayUdf::ShowIpAddress()>
   38fa0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   38fa4:	ebfffed1 	bl	38af0 <DisplayUdf::ShowGatewayIp()>
   38fa8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   38fac:	ebfffe9e 	bl	38a2c <DisplayUdf::ShowNetmask()>
   38fb0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   38fb4:	ebffff02 	bl	38bc4 <DisplayUdf::ShowHostName()>
   38fb8:	e1a00000 	nop			; (mov r0, r0)
   38fbc:	e24bd00c 	sub	sp, fp, #12
   38fc0:	e8bd8830 	pop	{r4, r5, fp, pc}
   38fc4:	00049684 	.word	0x00049684

00038fc8 <artnet::get_protocol_mode(artnet::PortProtocol, bool)>:
   38fc8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   38fcc:	e28db000 	add	fp, sp, #0
   38fd0:	e24dd00c 	sub	sp, sp, #12
   38fd4:	e50b0008 	str	r0, [fp, #-8]
   38fd8:	e1a03001 	mov	r3, r1
   38fdc:	e54b3009 	strb	r3, [fp, #-9]
   38fe0:	e55b3009 	ldrb	r3, [fp, #-9]
   38fe4:	e3530000 	cmp	r3, #0
   38fe8:	0a000006 	beq	39008 <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x40>
   38fec:	e51b3008 	ldr	r3, [fp, #-8]
   38ff0:	e3530000 	cmp	r3, #0
   38ff4:	1a000001 	bne	39000 <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x38>
   38ff8:	e59f3034 	ldr	r3, [pc, #52]	; 39034 <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x6c>
   38ffc:	ea000008 	b	39024 <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x5c>
   39000:	e59f3030 	ldr	r3, [pc, #48]	; 39038 <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x70>
   39004:	ea000006 	b	39024 <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x5c>
   39008:	e51b3008 	ldr	r3, [fp, #-8]
   3900c:	e3530000 	cmp	r3, #0
   39010:	1a000001 	bne	3901c <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x54>
   39014:	e59f3020 	ldr	r3, [pc, #32]	; 3903c <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x74>
   39018:	ea000000 	b	39020 <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x58>
   3901c:	e59f301c 	ldr	r3, [pc, #28]	; 39040 <artnet::get_protocol_mode(artnet::PortProtocol, bool)+0x78>
   39020:	e1a00000 	nop			; (mov r0, r0)
   39024:	e1a00003 	mov	r0, r3
   39028:	e28bd000 	add	sp, fp, #0
   3902c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   39030:	e12fff1e 	bx	lr
   39034:	00049768 	.word	0x00049768
   39038:	00049770 	.word	0x00049770
   3903c:	00049778 	.word	0x00049778
   39040:	00049780 	.word	0x00049780

00039044 <lightset::get_merge_mode(lightset::MergeMode, bool)>:
   39044:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   39048:	e28db000 	add	fp, sp, #0
   3904c:	e24dd00c 	sub	sp, sp, #12
   39050:	e50b0008 	str	r0, [fp, #-8]
   39054:	e1a03001 	mov	r3, r1
   39058:	e54b3009 	strb	r3, [fp, #-9]
   3905c:	e55b3009 	ldrb	r3, [fp, #-9]
   39060:	e3530000 	cmp	r3, #0
   39064:	0a000006 	beq	39084 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x40>
   39068:	e51b3008 	ldr	r3, [fp, #-8]
   3906c:	e3530000 	cmp	r3, #0
   39070:	1a000001 	bne	3907c <lightset::get_merge_mode(lightset::MergeMode, bool)+0x38>
   39074:	e59f3030 	ldr	r3, [pc, #48]	; 390ac <lightset::get_merge_mode(lightset::MergeMode, bool)+0x68>
   39078:	ea000007 	b	3909c <lightset::get_merge_mode(lightset::MergeMode, bool)+0x58>
   3907c:	e59f302c 	ldr	r3, [pc, #44]	; 390b0 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x6c>
   39080:	ea000005 	b	3909c <lightset::get_merge_mode(lightset::MergeMode, bool)+0x58>
   39084:	e51b3008 	ldr	r3, [fp, #-8]
   39088:	e3530000 	cmp	r3, #0
   3908c:	1a000001 	bne	39098 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x54>
   39090:	e59f301c 	ldr	r3, [pc, #28]	; 390b4 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x70>
   39094:	ea000000 	b	3909c <lightset::get_merge_mode(lightset::MergeMode, bool)+0x58>
   39098:	e59f3018 	ldr	r3, [pc, #24]	; 390b8 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x74>
   3909c:	e1a00003 	mov	r0, r3
   390a0:	e28bd000 	add	sp, fp, #0
   390a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   390a8:	e12fff1e 	bx	lr
   390ac:	00049788 	.word	0x00049788
   390b0:	0004978c 	.word	0x0004978c
   390b4:	00049790 	.word	0x00049790
   390b8:	00049794 	.word	0x00049794

000390bc <ArtNetNode::GetActiveInputPorts() const>:
   390bc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   390c0:	e28db000 	add	fp, sp, #0
   390c4:	e24dd00c 	sub	sp, sp, #12
   390c8:	e50b0008 	str	r0, [fp, #-8]
   390cc:	e51b3008 	ldr	r3, [fp, #-8]
   390d0:	e5d3308f 	ldrb	r3, [r3, #143]	; 0x8f
   390d4:	e1a00003 	mov	r0, r3
   390d8:	e28bd000 	add	sp, fp, #0
   390dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   390e0:	e12fff1e 	bx	lr

000390e4 <ArtNetNode::GetShortName() const>:
   390e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   390e8:	e28db000 	add	fp, sp, #0
   390ec:	e24dd00c 	sub	sp, sp, #12
   390f0:	e50b0008 	str	r0, [fp, #-8]
   390f4:	e51b3008 	ldr	r3, [fp, #-8]
   390f8:	e2833014 	add	r3, r3, #20
   390fc:	e1a00003 	mov	r0, r3
   39100:	e28bd000 	add	sp, fp, #0
   39104:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   39108:	e12fff1e 	bx	lr

0003910c <ArtNetNode::GetDestinationIp(unsigned int) const>:
   3910c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   39110:	e28db000 	add	fp, sp, #0
   39114:	e24dd00c 	sub	sp, sp, #12
   39118:	e50b0008 	str	r0, [fp, #-8]
   3911c:	e50b100c 	str	r1, [fp, #-12]
   39120:	e51b300c 	ldr	r3, [fp, #-12]
   39124:	e3530003 	cmp	r3, #3
   39128:	8a000005 	bhi	39144 <ArtNetNode::GetDestinationIp(unsigned int) const+0x38>
   3912c:	e51b2008 	ldr	r2, [fp, #-8]
   39130:	e51b300c 	ldr	r3, [fp, #-12]
   39134:	e1a03203 	lsl	r3, r3, #4
   39138:	e0823003 	add	r3, r2, r3
   3913c:	e593311c 	ldr	r3, [r3, #284]	; 0x11c
   39140:	ea000000 	b	39148 <ArtNetNode::GetDestinationIp(unsigned int) const+0x3c>
   39144:	e3a03000 	mov	r3, #0
   39148:	e1a00003 	mov	r0, r3
   3914c:	e28bd000 	add	sp, fp, #0
   39150:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   39154:	e12fff1e 	bx	lr

00039158 <DisplayUdf::ShowDmxInfo()>:
   39158:	e92d4800 	push	{fp, lr}
   3915c:	e28db004 	add	fp, sp, #4
   39160:	e24dd010 	sub	sp, sp, #16
   39164:	e50b0008 	str	r0, [fp, #-8]
   39168:	e51b3008 	ldr	r3, [fp, #-8]
   3916c:	e5933054 	ldr	r3, [r3, #84]	; 0x54
   39170:	e3530002 	cmp	r3, #2
   39174:	0a000003 	beq	39188 <DisplayUdf::ShowDmxInfo()+0x30>
   39178:	e51b3008 	ldr	r3, [fp, #-8]
   3917c:	e5933058 	ldr	r3, [r3, #88]	; 0x58
   39180:	e3530000 	cmp	r3, #0
   39184:	1a000006 	bne	391a4 <DisplayUdf::ShowDmxInfo()+0x4c>
   39188:	e51b0008 	ldr	r0, [fp, #-8]
   3918c:	e51b3008 	ldr	r3, [fp, #-8]
   39190:	e5d3304f 	ldrb	r3, [r3, #79]	; 0x4f
   39194:	e59f2054 	ldr	r2, [pc, #84]	; 391f0 <DisplayUdf::ShowDmxInfo()+0x98>
   39198:	e1a01003 	mov	r1, r3
   3919c:	ebff62df 	bl	11d20 <Display::Printf(unsigned int, char const*, ...)>
   391a0:	ea000010 	b	391e8 <DisplayUdf::ShowDmxInfo()+0x90>
   391a4:	e51b0008 	ldr	r0, [fp, #-8]
   391a8:	e51b3008 	ldr	r3, [fp, #-8]
   391ac:	e5d3304f 	ldrb	r3, [r3, #79]	; 0x4f
   391b0:	e1a01003 	mov	r1, r3
   391b4:	e51b3008 	ldr	r3, [fp, #-8]
   391b8:	e5933054 	ldr	r3, [r3, #84]	; 0x54
   391bc:	e3530000 	cmp	r3, #0
   391c0:	1a000001 	bne	391cc <DisplayUdf::ShowDmxInfo()+0x74>
   391c4:	e59f2028 	ldr	r2, [pc, #40]	; 391f4 <DisplayUdf::ShowDmxInfo()+0x9c>
   391c8:	ea000000 	b	391d0 <DisplayUdf::ShowDmxInfo()+0x78>
   391cc:	e59f2024 	ldr	r2, [pc, #36]	; 391f8 <DisplayUdf::ShowDmxInfo()+0xa0>
   391d0:	e51b3008 	ldr	r3, [fp, #-8]
   391d4:	e5933058 	ldr	r3, [r3, #88]	; 0x58
   391d8:	e58d3000 	str	r3, [sp]
   391dc:	e1a03002 	mov	r3, r2
   391e0:	e59f2014 	ldr	r2, [pc, #20]	; 391fc <DisplayUdf::ShowDmxInfo()+0xa4>
   391e4:	ebff62cd 	bl	11d20 <Display::Printf(unsigned int, char const*, ...)>
   391e8:	e24bd004 	sub	sp, fp, #4
   391ec:	e8bd8800 	pop	{fp, pc}
   391f0:	00049798 	.word	0x00049798
   391f4:	000497a0 	.word	0x000497a0
   391f8:	000497a8 	.word	0x000497a8
   391fc:	000497b0 	.word	0x000497b0

00039200 <DisplayUdf::Show(ArtNetNode*, unsigned int)>:
   39200:	e92d4870 	push	{r4, r5, r6, fp, lr}
   39204:	e28db010 	add	fp, sp, #16
   39208:	e24dd014 	sub	sp, sp, #20
   3920c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   39210:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   39214:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   39218:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3921c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   39220:	e5832050 	str	r2, [r3, #80]	; 0x50
   39224:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   39228:	ebffff0b 	bl	38e5c <DisplayUdf::Show()>
   3922c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   39230:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   39234:	eb000017 	bl	39298 <DisplayUdf::ShowNodeName(ArtNetNode*)>
   39238:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   3923c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   39240:	eb00002d 	bl	392fc <DisplayUdf::ShowUniverse(ArtNetNode*)>
   39244:	e51b4018 	ldr	r4, [fp, #-24]	; 0xffffffe8
   39248:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3924c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
   39250:	e1a06003 	mov	r6, r3
   39254:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   39258:	ebff63f9 	bl	12244 <ArtNetNode::GetActiveOutputPorts() const>
   3925c:	e1a05000 	mov	r5, r0
   39260:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   39264:	ebffff94 	bl	390bc <ArtNetNode::GetActiveInputPorts() const>
   39268:	e1a03000 	mov	r3, r0
   3926c:	e0853003 	add	r3, r5, r3
   39270:	e59f201c 	ldr	r2, [pc, #28]	; 39294 <DisplayUdf::Show(ArtNetNode*, unsigned int)+0x94>
   39274:	e1a01006 	mov	r1, r6
   39278:	e1a00004 	mov	r0, r4
   3927c:	ebff62a7 	bl	11d20 <Display::Printf(unsigned int, char const*, ...)>
   39280:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   39284:	ebffffb3 	bl	39158 <DisplayUdf::ShowDmxInfo()>
   39288:	e1a00000 	nop			; (mov r0, r0)
   3928c:	e24bd010 	sub	sp, fp, #16
   39290:	e8bd8870 	pop	{r4, r5, r6, fp, pc}
   39294:	000497bc 	.word	0x000497bc

00039298 <DisplayUdf::ShowNodeName(ArtNetNode*)>:
   39298:	e92d4830 	push	{r4, r5, fp, lr}
   3929c:	e28db00c 	add	fp, sp, #12
   392a0:	e24dd008 	sub	sp, sp, #8
   392a4:	e50b0010 	str	r0, [fp, #-16]
   392a8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   392ac:	e51b2010 	ldr	r2, [fp, #-16]
   392b0:	e51b3010 	ldr	r3, [fp, #-16]
   392b4:	e5d33042 	ldrb	r3, [r3, #66]	; 0x42
   392b8:	e1a01003 	mov	r1, r3
   392bc:	e1a00002 	mov	r0, r2
   392c0:	ebfffd38 	bl	387a8 <Display::ClearLine(unsigned int)>
   392c4:	e51b4010 	ldr	r4, [fp, #-16]
   392c8:	e51b3010 	ldr	r3, [fp, #-16]
   392cc:	e5d33042 	ldrb	r3, [r3, #66]	; 0x42
   392d0:	e1a05003 	mov	r5, r3
   392d4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   392d8:	ebffff81 	bl	390e4 <ArtNetNode::GetShortName() const>
   392dc:	e1a03000 	mov	r3, r0
   392e0:	e1a02003 	mov	r2, r3
   392e4:	e1a01005 	mov	r1, r5
   392e8:	e1a00004 	mov	r0, r4
   392ec:	ebff6254 	bl	11c44 <Display::Write(unsigned int, char const*)>
   392f0:	e1a00000 	nop			; (mov r0, r0)
   392f4:	e24bd00c 	sub	sp, fp, #12
   392f8:	e8bd8830 	pop	{r4, r5, fp, pc}

000392fc <DisplayUdf::ShowUniverse(ArtNetNode*)>:
   392fc:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   39300:	e28db01c 	add	fp, sp, #28
   39304:	e24dd028 	sub	sp, sp, #40	; 0x28
   39308:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   3930c:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
   39310:	e3a03000 	mov	r3, #0
   39314:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   39318:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3931c:	e3530003 	cmp	r3, #3
   39320:	8a00004b 	bhi	39454 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x158>
   39324:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   39328:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   3932c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   39330:	e0823003 	add	r3, r2, r3
   39334:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   39338:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3933c:	e2833008 	add	r3, r3, #8
   39340:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
   39344:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   39348:	e35300ff 	cmp	r3, #255	; 0xff
   3934c:	0a00003c 	beq	39444 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x148>
   39350:	e24b202a 	sub	r2, fp, #42	; 0x2a
   39354:	e3a03001 	mov	r3, #1
   39358:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   3935c:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   39360:	ebff96cd 	bl	1ee9c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
   39364:	e1a03000 	mov	r3, r0
   39368:	e3530000 	cmp	r3, #0
   3936c:	0a000034 	beq	39444 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x148>
   39370:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   39374:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   39378:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   3937c:	e0823003 	add	r3, r2, r3
   39380:	e283303c 	add	r3, r3, #60	; 0x3c
   39384:	e5d33000 	ldrb	r3, [r3]
   39388:	e1a01003 	mov	r1, r3
   3938c:	ebfffd05 	bl	387a8 <Display::ClearLine(unsigned int)>
   39390:	e51b4030 	ldr	r4, [fp, #-48]	; 0xffffffd0
   39394:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   39398:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   3939c:	e0823003 	add	r3, r2, r3
   393a0:	e283303c 	add	r3, r3, #60	; 0x3c
   393a4:	e5d33000 	ldrb	r3, [r3]
   393a8:	e1a09003 	mov	r9, r3
   393ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   393b0:	e2835041 	add	r5, r3, #65	; 0x41
   393b4:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
   393b8:	e1a06003 	mov	r6, r3
   393bc:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   393c0:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   393c4:	ebff92c7 	bl	1dee8 <ArtNetNode::GetMergeMode(unsigned int) const>
   393c8:	e1a03000 	mov	r3, r0
   393cc:	e3a01001 	mov	r1, #1
   393d0:	e1a00003 	mov	r0, r3
   393d4:	ebffff1a 	bl	39044 <lightset::get_merge_mode(lightset::MergeMode, bool)>
   393d8:	e1a07000 	mov	r7, r0
   393dc:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   393e0:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   393e4:	ebff92e9 	bl	1df90 <ArtNetNode::GetPortProtocol(unsigned int) const>
   393e8:	e1a03000 	mov	r3, r0
   393ec:	e3a01001 	mov	r1, #1
   393f0:	e1a00003 	mov	r0, r3
   393f4:	ebfffef3 	bl	38fc8 <artnet::get_protocol_mode(artnet::PortProtocol, bool)>
   393f8:	e1a08000 	mov	r8, r0
   393fc:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   39400:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
   39404:	ebff9d92 	bl	20a54 <ArtNetNode::GetRdm(unsigned int) const>
   39408:	e1a03000 	mov	r3, r0
   3940c:	e3530000 	cmp	r3, #0
   39410:	0a000001 	beq	3941c <DisplayUdf::ShowUniverse(ArtNetNode*)+0x120>
   39414:	e59f3044 	ldr	r3, [pc, #68]	; 39460 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x164>
   39418:	ea000000 	b	39420 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x124>
   3941c:	e59f3040 	ldr	r3, [pc, #64]	; 39464 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x168>
   39420:	e58d300c 	str	r3, [sp, #12]
   39424:	e58d8008 	str	r8, [sp, #8]
   39428:	e58d7004 	str	r7, [sp, #4]
   3942c:	e58d6000 	str	r6, [sp]
   39430:	e1a03005 	mov	r3, r5
   39434:	e59f202c 	ldr	r2, [pc, #44]	; 39468 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x16c>
   39438:	e1a01009 	mov	r1, r9
   3943c:	e1a00004 	mov	r0, r4
   39440:	ebff6236 	bl	11d20 <Display::Printf(unsigned int, char const*, ...)>
   39444:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   39448:	e2833001 	add	r3, r3, #1
   3944c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   39450:	eaffffb0 	b	39318 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x1c>
   39454:	e1a00000 	nop			; (mov r0, r0)
   39458:	e24bd01c 	sub	sp, fp, #28
   3945c:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   39460:	000497c4 	.word	0x000497c4
   39464:	000497c8 	.word	0x000497c8
   39468:	000497cc 	.word	0x000497cc

0003946c <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
   3946c:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   39470:	e28db01c 	add	fp, sp, #28
   39474:	e24dd020 	sub	sp, sp, #32
   39478:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   3947c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
   39480:	e3a03000 	mov	r3, #0
   39484:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   39488:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3948c:	e3530003 	cmp	r3, #3
   39490:	8a00002c 	bhi	39548 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0xdc>
   39494:	e51b7028 	ldr	r7, [fp, #-40]	; 0xffffffd8
   39498:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3949c:	e283300e 	add	r3, r3, #14
   394a0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   394a4:	e0823003 	add	r3, r2, r3
   394a8:	e5d3303c 	ldrb	r3, [r3, #60]	; 0x3c
   394ac:	e1a09003 	mov	r9, r3
   394b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   394b4:	e2838041 	add	r8, r3, #65	; 0x41
   394b8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   394bc:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
   394c0:	ebffff11 	bl	3910c <ArtNetNode::GetDestinationIp(unsigned int) const>
   394c4:	e1a03000 	mov	r3, r0
   394c8:	e6ef4073 	uxtb	r4, r3
   394cc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   394d0:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
   394d4:	ebffff0c 	bl	3910c <ArtNetNode::GetDestinationIp(unsigned int) const>
   394d8:	e1a03000 	mov	r3, r0
   394dc:	e1a03423 	lsr	r3, r3, #8
   394e0:	e6ef5073 	uxtb	r5, r3
   394e4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   394e8:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
   394ec:	ebffff06 	bl	3910c <ArtNetNode::GetDestinationIp(unsigned int) const>
   394f0:	e1a03000 	mov	r3, r0
   394f4:	e1a03823 	lsr	r3, r3, #16
   394f8:	e6ef6073 	uxtb	r6, r3
   394fc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   39500:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
   39504:	ebffff00 	bl	3910c <ArtNetNode::GetDestinationIp(unsigned int) const>
   39508:	e1a03000 	mov	r3, r0
   3950c:	e1a03c23 	lsr	r3, r3, #24
   39510:	e6ef3073 	uxtb	r3, r3
   39514:	e58d300c 	str	r3, [sp, #12]
   39518:	e58d6008 	str	r6, [sp, #8]
   3951c:	e58d5004 	str	r5, [sp, #4]
   39520:	e58d4000 	str	r4, [sp]
   39524:	e1a03008 	mov	r3, r8
   39528:	e59f2024 	ldr	r2, [pc, #36]	; 39554 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0xe8>
   3952c:	e1a01009 	mov	r1, r9
   39530:	e1a00007 	mov	r0, r7
   39534:	ebff61f9 	bl	11d20 <Display::Printf(unsigned int, char const*, ...)>
   39538:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3953c:	e2833001 	add	r3, r3, #1
   39540:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   39544:	eaffffcf 	b	39488 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x1c>
   39548:	e1a00000 	nop			; (mov r0, r0)
   3954c:	e24bd01c 	sub	sp, fp, #28
   39550:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   39554:	000497dc 	.word	0x000497dc

00039558 <display::timeout::gpio_init()>:
   39558:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3955c:	e28db000 	add	fp, sp, #0
   39560:	e1a00000 	nop			; (mov r0, r0)
   39564:	e28bd000 	add	sp, fp, #0
   39568:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3956c:	e12fff1e 	bx	lr

00039570 <display::timeout::gpio_renew()>:
   39570:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   39574:	e28db000 	add	fp, sp, #0
   39578:	e3a03000 	mov	r3, #0
   3957c:	e1a00003 	mov	r0, r3
   39580:	e28bd000 	add	sp, fp, #0
   39584:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   39588:	e12fff1e 	bx	lr

0003958c <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>:
   3958c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   39590:	e28db000 	add	fp, sp, #0
   39594:	e24dd014 	sub	sp, sp, #20
   39598:	e50b0008 	str	r0, [fp, #-8]
   3959c:	e1a03001 	mov	r3, r1
   395a0:	e50b2010 	str	r2, [fp, #-16]
   395a4:	e54b3009 	strb	r3, [fp, #-9]
   395a8:	e51b3008 	ldr	r3, [fp, #-8]
   395ac:	e55b2009 	ldrb	r2, [fp, #-9]
   395b0:	e5c32000 	strb	r2, [r3]
   395b4:	e51b3008 	ldr	r3, [fp, #-8]
   395b8:	e51b2010 	ldr	r2, [fp, #-16]
   395bc:	e5832004 	str	r2, [r3, #4]
   395c0:	e51b3008 	ldr	r3, [fp, #-8]
   395c4:	e1a00003 	mov	r0, r3
   395c8:	e28bd000 	add	sp, fp, #0
   395cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   395d0:	e12fff1e 	bx	lr

000395d4 <HAL_I2C::IsConnected()>:
   395d4:	e92d4800 	push	{fp, lr}
   395d8:	e28db004 	add	fp, sp, #4
   395dc:	e24dd008 	sub	sp, sp, #8
   395e0:	e50b0008 	str	r0, [fp, #-8]
   395e4:	e51b3008 	ldr	r3, [fp, #-8]
   395e8:	e5d32000 	ldrb	r2, [r3]
   395ec:	e51b3008 	ldr	r3, [fp, #-8]
   395f0:	e5933004 	ldr	r3, [r3, #4]
   395f4:	e1a01003 	mov	r1, r3
   395f8:	e1a00002 	mov	r0, r2
   395fc:	eb000011 	bl	39648 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
   39600:	e1a03000 	mov	r3, r0
   39604:	e1a00003 	mov	r0, r3
   39608:	e24bd004 	sub	sp, fp, #4
   3960c:	e8bd8800 	pop	{fp, pc}

00039610 <HAL_I2C::IsConnected(unsigned char, unsigned int)>:
   39610:	e92d4800 	push	{fp, lr}
   39614:	e28db004 	add	fp, sp, #4
   39618:	e24dd008 	sub	sp, sp, #8
   3961c:	e1a03000 	mov	r3, r0
   39620:	e50b100c 	str	r1, [fp, #-12]
   39624:	e54b3005 	strb	r3, [fp, #-5]
   39628:	e55b3005 	ldrb	r3, [fp, #-5]
   3962c:	e51b100c 	ldr	r1, [fp, #-12]
   39630:	e1a00003 	mov	r0, r3
   39634:	eb000003 	bl	39648 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
   39638:	e1a03000 	mov	r3, r0
   3963c:	e1a00003 	mov	r0, r3
   39640:	e24bd004 	sub	sp, fp, #4
   39644:	e8bd8800 	pop	{fp, pc}

00039648 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
   39648:	e92d4800 	push	{fp, lr}
   3964c:	e28db004 	add	fp, sp, #4
   39650:	e24dd010 	sub	sp, sp, #16
   39654:	e1a03000 	mov	r3, r0
   39658:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   3965c:	e54b300d 	strb	r3, [fp, #-13]
   39660:	e55b300d 	ldrb	r3, [fp, #-13]
   39664:	e1a00003 	mov	r0, r3
   39668:	eb0024ee 	bl	42a28 <bcm2835_i2c_setSlaveAddress>
   3966c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   39670:	eb00251f 	bl	42af4 <bcm2835_i2c_set_baudrate>
   39674:	e55b300d 	ldrb	r3, [fp, #-13]
   39678:	e353002f 	cmp	r3, #47	; 0x2f
   3967c:	9a000002 	bls	3968c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x44>
   39680:	e55b300d 	ldrb	r3, [fp, #-13]
   39684:	e3530037 	cmp	r3, #55	; 0x37
   39688:	9a000005 	bls	396a4 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x5c>
   3968c:	e55b300d 	ldrb	r3, [fp, #-13]
   39690:	e353004f 	cmp	r3, #79	; 0x4f
   39694:	9a00000c 	bls	396cc <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x84>
   39698:	e55b300d 	ldrb	r3, [fp, #-13]
   3969c:	e353005f 	cmp	r3, #95	; 0x5f
   396a0:	8a000009 	bhi	396cc <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x84>
   396a4:	e24b3005 	sub	r3, fp, #5
   396a8:	e3a01001 	mov	r1, #1
   396ac:	e1a00003 	mov	r0, r3
   396b0:	eb00259e 	bl	42d30 <bcm2835_i2c_read>
   396b4:	e1a03000 	mov	r3, r0
   396b8:	e3530000 	cmp	r3, #0
   396bc:	03a03001 	moveq	r3, #1
   396c0:	13a03000 	movne	r3, #0
   396c4:	e6ef3073 	uxtb	r3, r3
   396c8:	ea000007 	b	396ec <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0xa4>
   396cc:	e3a01000 	mov	r1, #0
   396d0:	e3a00000 	mov	r0, #0
   396d4:	eb00251b 	bl	42b48 <bcm2835_i2c_write>
   396d8:	e1a03000 	mov	r3, r0
   396dc:	e3530000 	cmp	r3, #0
   396e0:	03a03001 	moveq	r3, #1
   396e4:	13a03000 	movne	r3, #0
   396e8:	e6ef3073 	uxtb	r3, r3
   396ec:	e1a00003 	mov	r0, r3
   396f0:	e24bd004 	sub	sp, fp, #4
   396f4:	e8bd8800 	pop	{fp, pc}

000396f8 <Display::PrintInfo()>:
   396f8:	e92d4800 	push	{fp, lr}
   396fc:	e28db004 	add	fp, sp, #4
   39700:	e24dd008 	sub	sp, sp, #8
   39704:	e50b0008 	str	r0, [fp, #-8]
   39708:	e51b3008 	ldr	r3, [fp, #-8]
   3970c:	e5933018 	ldr	r3, [r3, #24]
   39710:	e3530000 	cmp	r3, #0
   39714:	1a000002 	bne	39724 <Display::PrintInfo()+0x2c>
   39718:	e59f0030 	ldr	r0, [pc, #48]	; 39750 <Display::PrintInfo()+0x58>
   3971c:	ebff5ec0 	bl	11224 <puts@plt>
   39720:	ea000008 	b	39748 <Display::PrintInfo()+0x50>
   39724:	e51b3008 	ldr	r3, [fp, #-8]
   39728:	e5932018 	ldr	r2, [r3, #24]
   3972c:	e51b3008 	ldr	r3, [fp, #-8]
   39730:	e5933018 	ldr	r3, [r3, #24]
   39734:	e5933000 	ldr	r3, [r3]
   39738:	e2833034 	add	r3, r3, #52	; 0x34
   3973c:	e5933000 	ldr	r3, [r3]
   39740:	e1a00002 	mov	r0, r2
   39744:	e12fff33 	blx	r3
   39748:	e24bd004 	sub	sp, fp, #4
   3974c:	e8bd8800 	pop	{fp, pc}
   39750:	000498f8 	.word	0x000498f8

00039754 <Display::Detect7Segment()>:
   39754:	e92d4800 	push	{fp, lr}
   39758:	e28db004 	add	fp, sp, #4
   3975c:	e24dd008 	sub	sp, sp, #8
   39760:	e50b0008 	str	r0, [fp, #-8]
   39764:	e51b3008 	ldr	r3, [fp, #-8]
   39768:	e2833008 	add	r3, r3, #8
   3976c:	e1a00003 	mov	r0, r3
   39770:	ebffff97 	bl	395d4 <HAL_I2C::IsConnected()>
   39774:	e1a03000 	mov	r3, r0
   39778:	e1a02003 	mov	r2, r3
   3977c:	e51b3008 	ldr	r3, [fp, #-8]
   39780:	e5c32011 	strb	r2, [r3, #17]
   39784:	e51b3008 	ldr	r3, [fp, #-8]
   39788:	e5d33011 	ldrb	r3, [r3, #17]
   3978c:	e3530000 	cmp	r3, #0
   39790:	0a000008 	beq	397b8 <Display::Detect7Segment()+0x64>
   39794:	e51b3008 	ldr	r3, [fp, #-8]
   39798:	e2833008 	add	r3, r3, #8
   3979c:	e3a02000 	mov	r2, #0
   397a0:	e3a01000 	mov	r1, #0
   397a4:	e1a00003 	mov	r0, r3
   397a8:	ebff60be 	bl	11aa8 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
   397ac:	e3a01c3f 	mov	r1, #16128	; 0x3f00
   397b0:	e51b0008 	ldr	r0, [fp, #-8]
   397b4:	ebff621c 	bl	1202c <Display::Status(Display7SegmentMessage)>
   397b8:	e1a00000 	nop			; (mov r0, r0)
   397bc:	e24bd004 	sub	sp, fp, #4
   397c0:	e8bd8800 	pop	{fp, pc}

000397c4 <Display::Display()>:
   397c4:	e92d4800 	push	{fp, lr}
   397c8:	e28db004 	add	fp, sp, #4
   397cc:	e24dd008 	sub	sp, sp, #8
   397d0:	e50b0008 	str	r0, [fp, #-8]
   397d4:	e51b3008 	ldr	r3, [fp, #-8]
   397d8:	e3a02004 	mov	r2, #4
   397dc:	e5832000 	str	r2, [r3]
   397e0:	ebff5f86 	bl	11600 <Hardware::Get()>
   397e4:	e1a03000 	mov	r3, r0
   397e8:	e1a00003 	mov	r0, r3
   397ec:	eb001ab4 	bl	402c4 <Hardware::Millis()>
   397f0:	e1a02000 	mov	r2, r0
   397f4:	e51b3008 	ldr	r3, [fp, #-8]
   397f8:	e5832004 	str	r2, [r3, #4]
   397fc:	e51b3008 	ldr	r3, [fp, #-8]
   39800:	e2833008 	add	r3, r3, #8
   39804:	e59f20b8 	ldr	r2, [pc, #184]	; 398c4 <Display::Display()+0x100>
   39808:	e3a01021 	mov	r1, #33	; 0x21
   3980c:	e1a00003 	mov	r0, r3
   39810:	ebffff5d 	bl	3958c <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>
   39814:	e51b3008 	ldr	r3, [fp, #-8]
   39818:	e3a02000 	mov	r2, #0
   3981c:	e5c32010 	strb	r2, [r3, #16]
   39820:	e51b3008 	ldr	r3, [fp, #-8]
   39824:	e3a02000 	mov	r2, #0
   39828:	e5c32011 	strb	r2, [r3, #17]
   3982c:	e51b3008 	ldr	r3, [fp, #-8]
   39830:	e59f2090 	ldr	r2, [pc, #144]	; 398c8 <Display::Display()+0x104>
   39834:	e5832014 	str	r2, [r3, #20]
   39838:	e51b3008 	ldr	r3, [fp, #-8]
   3983c:	e3a02000 	mov	r2, #0
   39840:	e5832018 	str	r2, [r3, #24]
   39844:	e59f3080 	ldr	r3, [pc, #128]	; 398cc <Display::Display()+0x108>
   39848:	e5933000 	ldr	r3, [r3]
   3984c:	e3530000 	cmp	r3, #0
   39850:	0a000004 	beq	39868 <Display::Display()+0xa4>
   39854:	e59f3074 	ldr	r3, [pc, #116]	; 398d0 <Display::Display()+0x10c>
   39858:	e3a02031 	mov	r2, #49	; 0x31
   3985c:	e59f1070 	ldr	r1, [pc, #112]	; 398d4 <Display::Display()+0x110>
   39860:	e59f0070 	ldr	r0, [pc, #112]	; 398d8 <Display::Display()+0x114>
   39864:	ebff5eaa 	bl	11314 <__assert_fail@plt>
   39868:	e59f205c 	ldr	r2, [pc, #92]	; 398cc <Display::Display()+0x108>
   3986c:	e51b3008 	ldr	r3, [fp, #-8]
   39870:	e5823000 	str	r3, [r2]
   39874:	e51b3008 	ldr	r3, [fp, #-8]
   39878:	e5933018 	ldr	r3, [r3, #24]
   3987c:	e3530000 	cmp	r3, #0
   39880:	1a000002 	bne	39890 <Display::Display()+0xcc>
   39884:	e3a01002 	mov	r1, #2
   39888:	e51b0008 	ldr	r0, [fp, #-8]
   3988c:	eb000098 	bl	39af4 <Display::Detect(display::Type)>
   39890:	e51b0008 	ldr	r0, [fp, #-8]
   39894:	ebffffae 	bl	39754 <Display::Detect7Segment()>
   39898:	e51b3008 	ldr	r3, [fp, #-8]
   3989c:	e5933018 	ldr	r3, [r3, #24]
   398a0:	e3530000 	cmp	r3, #0
   398a4:	0a000000 	beq	398ac <Display::Display()+0xe8>
   398a8:	ebffff2a 	bl	39558 <display::timeout::gpio_init()>
   398ac:	e51b0008 	ldr	r0, [fp, #-8]
   398b0:	ebffff90 	bl	396f8 <Display::PrintInfo()>
   398b4:	e51b3008 	ldr	r3, [fp, #-8]
   398b8:	e1a00003 	mov	r0, r3
   398bc:	e24bd004 	sub	sp, fp, #4
   398c0:	e8bd8800 	pop	{fp, pc}
   398c4:	00061a80 	.word	0x00061a80
   398c8:	000493e0 	.word	0x000493e0
   398cc:	0005f2ec 	.word	0x0005f2ec
   398d0:	00049954 	.word	0x00049954
   398d4:	0004990c 	.word	0x0004990c
   398d8:	00049920 	.word	0x00049920

000398dc <Display::Display(unsigned int)>:
   398dc:	e92d4800 	push	{fp, lr}
   398e0:	e28db004 	add	fp, sp, #4
   398e4:	e24dd008 	sub	sp, sp, #8
   398e8:	e50b0008 	str	r0, [fp, #-8]
   398ec:	e50b100c 	str	r1, [fp, #-12]
   398f0:	e51b3008 	ldr	r3, [fp, #-8]
   398f4:	e3a02004 	mov	r2, #4
   398f8:	e5832000 	str	r2, [r3]
   398fc:	ebff5f3f 	bl	11600 <Hardware::Get()>
   39900:	e1a03000 	mov	r3, r0
   39904:	e1a00003 	mov	r0, r3
   39908:	eb001a6d 	bl	402c4 <Hardware::Millis()>
   3990c:	e1a02000 	mov	r2, r0
   39910:	e51b3008 	ldr	r3, [fp, #-8]
   39914:	e5832004 	str	r2, [r3, #4]
   39918:	e51b3008 	ldr	r3, [fp, #-8]
   3991c:	e2833008 	add	r3, r3, #8
   39920:	e59f20a8 	ldr	r2, [pc, #168]	; 399d0 <Display::Display(unsigned int)+0xf4>
   39924:	e3a01021 	mov	r1, #33	; 0x21
   39928:	e1a00003 	mov	r0, r3
   3992c:	ebffff16 	bl	3958c <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>
   39930:	e51b3008 	ldr	r3, [fp, #-8]
   39934:	e3a02000 	mov	r2, #0
   39938:	e5c32010 	strb	r2, [r3, #16]
   3993c:	e51b3008 	ldr	r3, [fp, #-8]
   39940:	e3a02000 	mov	r2, #0
   39944:	e5c32011 	strb	r2, [r3, #17]
   39948:	e51b3008 	ldr	r3, [fp, #-8]
   3994c:	e59f2080 	ldr	r2, [pc, #128]	; 399d4 <Display::Display(unsigned int)+0xf8>
   39950:	e5832014 	str	r2, [r3, #20]
   39954:	e51b3008 	ldr	r3, [fp, #-8]
   39958:	e3a02000 	mov	r2, #0
   3995c:	e5832018 	str	r2, [r3, #24]
   39960:	e59f3070 	ldr	r3, [pc, #112]	; 399d8 <Display::Display(unsigned int)+0xfc>
   39964:	e5933000 	ldr	r3, [r3]
   39968:	e3530000 	cmp	r3, #0
   3996c:	0a000004 	beq	39984 <Display::Display(unsigned int)+0xa8>
   39970:	e59f3064 	ldr	r3, [pc, #100]	; 399dc <Display::Display(unsigned int)+0x100>
   39974:	e3a02046 	mov	r2, #70	; 0x46
   39978:	e59f1060 	ldr	r1, [pc, #96]	; 399e0 <Display::Display(unsigned int)+0x104>
   3997c:	e59f0060 	ldr	r0, [pc, #96]	; 399e4 <Display::Display(unsigned int)+0x108>
   39980:	ebff5e63 	bl	11314 <__assert_fail@plt>
   39984:	e59f204c 	ldr	r2, [pc, #76]	; 399d8 <Display::Display(unsigned int)+0xfc>
   39988:	e51b3008 	ldr	r3, [fp, #-8]
   3998c:	e5823000 	str	r3, [r2]
   39990:	e51b100c 	ldr	r1, [fp, #-12]
   39994:	e51b0008 	ldr	r0, [fp, #-8]
   39998:	eb0000b4 	bl	39c70 <Display::Detect(unsigned int)>
   3999c:	e51b0008 	ldr	r0, [fp, #-8]
   399a0:	ebffff6b 	bl	39754 <Display::Detect7Segment()>
   399a4:	e51b3008 	ldr	r3, [fp, #-8]
   399a8:	e5933018 	ldr	r3, [r3, #24]
   399ac:	e3530000 	cmp	r3, #0
   399b0:	0a000000 	beq	399b8 <Display::Display(unsigned int)+0xdc>
   399b4:	ebfffee7 	bl	39558 <display::timeout::gpio_init()>
   399b8:	e51b0008 	ldr	r0, [fp, #-8]
   399bc:	ebffff4d 	bl	396f8 <Display::PrintInfo()>
   399c0:	e51b3008 	ldr	r3, [fp, #-8]
   399c4:	e1a00003 	mov	r0, r3
   399c8:	e24bd004 	sub	sp, fp, #4
   399cc:	e8bd8800 	pop	{fp, pc}
   399d0:	00061a80 	.word	0x00061a80
   399d4:	000493e0 	.word	0x000493e0
   399d8:	0005f2ec 	.word	0x0005f2ec
   399dc:	00049968 	.word	0x00049968
   399e0:	0004990c 	.word	0x0004990c
   399e4:	00049920 	.word	0x00049920

000399e8 <Display::Display(display::Type)>:
   399e8:	e92d4800 	push	{fp, lr}
   399ec:	e28db004 	add	fp, sp, #4
   399f0:	e24dd008 	sub	sp, sp, #8
   399f4:	e50b0008 	str	r0, [fp, #-8]
   399f8:	e50b100c 	str	r1, [fp, #-12]
   399fc:	e51b3008 	ldr	r3, [fp, #-8]
   39a00:	e51b200c 	ldr	r2, [fp, #-12]
   39a04:	e5832000 	str	r2, [r3]
   39a08:	ebff5efc 	bl	11600 <Hardware::Get()>
   39a0c:	e1a03000 	mov	r3, r0
   39a10:	e1a00003 	mov	r0, r3
   39a14:	eb001a2a 	bl	402c4 <Hardware::Millis()>
   39a18:	e1a02000 	mov	r2, r0
   39a1c:	e51b3008 	ldr	r3, [fp, #-8]
   39a20:	e5832004 	str	r2, [r3, #4]
   39a24:	e51b3008 	ldr	r3, [fp, #-8]
   39a28:	e2833008 	add	r3, r3, #8
   39a2c:	e59f20a8 	ldr	r2, [pc, #168]	; 39adc <Display::Display(display::Type)+0xf4>
   39a30:	e3a01021 	mov	r1, #33	; 0x21
   39a34:	e1a00003 	mov	r0, r3
   39a38:	ebfffed3 	bl	3958c <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>
   39a3c:	e51b3008 	ldr	r3, [fp, #-8]
   39a40:	e3a02000 	mov	r2, #0
   39a44:	e5c32010 	strb	r2, [r3, #16]
   39a48:	e51b3008 	ldr	r3, [fp, #-8]
   39a4c:	e3a02000 	mov	r2, #0
   39a50:	e5c32011 	strb	r2, [r3, #17]
   39a54:	e51b3008 	ldr	r3, [fp, #-8]
   39a58:	e59f2080 	ldr	r2, [pc, #128]	; 39ae0 <Display::Display(display::Type)+0xf8>
   39a5c:	e5832014 	str	r2, [r3, #20]
   39a60:	e51b3008 	ldr	r3, [fp, #-8]
   39a64:	e3a02000 	mov	r2, #0
   39a68:	e5832018 	str	r2, [r3, #24]
   39a6c:	e59f3070 	ldr	r3, [pc, #112]	; 39ae4 <Display::Display(display::Type)+0xfc>
   39a70:	e5933000 	ldr	r3, [r3]
   39a74:	e3530000 	cmp	r3, #0
   39a78:	0a000004 	beq	39a90 <Display::Display(display::Type)+0xa8>
   39a7c:	e59f3064 	ldr	r3, [pc, #100]	; 39ae8 <Display::Display(display::Type)+0x100>
   39a80:	e3a02055 	mov	r2, #85	; 0x55
   39a84:	e59f1060 	ldr	r1, [pc, #96]	; 39aec <Display::Display(display::Type)+0x104>
   39a88:	e59f0060 	ldr	r0, [pc, #96]	; 39af0 <Display::Display(display::Type)+0x108>
   39a8c:	ebff5e20 	bl	11314 <__assert_fail@plt>
   39a90:	e59f204c 	ldr	r2, [pc, #76]	; 39ae4 <Display::Display(display::Type)+0xfc>
   39a94:	e51b3008 	ldr	r3, [fp, #-8]
   39a98:	e5823000 	str	r3, [r2]
   39a9c:	e51b100c 	ldr	r1, [fp, #-12]
   39aa0:	e51b0008 	ldr	r0, [fp, #-8]
   39aa4:	eb000012 	bl	39af4 <Display::Detect(display::Type)>
   39aa8:	e51b0008 	ldr	r0, [fp, #-8]
   39aac:	ebffff28 	bl	39754 <Display::Detect7Segment()>
   39ab0:	e51b3008 	ldr	r3, [fp, #-8]
   39ab4:	e5933018 	ldr	r3, [r3, #24]
   39ab8:	e3530000 	cmp	r3, #0
   39abc:	0a000000 	beq	39ac4 <Display::Display(display::Type)+0xdc>
   39ac0:	ebfffea4 	bl	39558 <display::timeout::gpio_init()>
   39ac4:	e51b0008 	ldr	r0, [fp, #-8]
   39ac8:	ebffff0a 	bl	396f8 <Display::PrintInfo()>
   39acc:	e51b3008 	ldr	r3, [fp, #-8]
   39ad0:	e1a00003 	mov	r0, r3
   39ad4:	e24bd004 	sub	sp, fp, #4
   39ad8:	e8bd8800 	pop	{fp, pc}
   39adc:	00061a80 	.word	0x00061a80
   39ae0:	000493e0 	.word	0x000493e0
   39ae4:	0005f2ec 	.word	0x0005f2ec
   39ae8:	00049984 	.word	0x00049984
   39aec:	0004990c 	.word	0x0004990c
   39af0:	00049920 	.word	0x00049920

00039af4 <Display::Detect(display::Type)>:
   39af4:	e92d4810 	push	{r4, fp, lr}
   39af8:	e28db008 	add	fp, sp, #8
   39afc:	e24dd00c 	sub	sp, sp, #12
   39b00:	e50b0010 	str	r0, [fp, #-16]
   39b04:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   39b08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   39b0c:	e3530002 	cmp	r3, #2
   39b10:	0a000003 	beq	39b24 <Display::Detect(display::Type)+0x30>
   39b14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   39b18:	e3530004 	cmp	r3, #4
   39b1c:	0a000012 	beq	39b6c <Display::Detect(display::Type)+0x78>
   39b20:	ea000016 	b	39b80 <Display::Detect(display::Type)+0x8c>
   39b24:	e3a00034 	mov	r0, #52	; 0x34
   39b28:	ebff5d84 	bl	11140 <operator new(unsigned int)@plt>
   39b2c:	e1a03000 	mov	r3, r0
   39b30:	e1a04003 	mov	r4, r3
   39b34:	e3a01000 	mov	r1, #0
   39b38:	e1a00004 	mov	r0, r4
   39b3c:	eb00018f 	bl	3a180 <Ssd1306::Ssd1306(TOledPanel)>
   39b40:	e51b3010 	ldr	r3, [fp, #-16]
   39b44:	e5834018 	str	r4, [r3, #24]
   39b48:	e51b3010 	ldr	r3, [fp, #-16]
   39b4c:	e5933018 	ldr	r3, [r3, #24]
   39b50:	e3530000 	cmp	r3, #0
   39b54:	1a000008 	bne	39b7c <Display::Detect(display::Type)+0x88>
   39b58:	e59f3104 	ldr	r3, [pc, #260]	; 39c64 <Display::Detect(display::Type)+0x170>
   39b5c:	e3a02077 	mov	r2, #119	; 0x77
   39b60:	e59f1100 	ldr	r1, [pc, #256]	; 39c68 <Display::Detect(display::Type)+0x174>
   39b64:	e59f0100 	ldr	r0, [pc, #256]	; 39c6c <Display::Detect(display::Type)+0x178>
   39b68:	ebff5de9 	bl	11314 <__assert_fail@plt>
   39b6c:	e51b3010 	ldr	r3, [fp, #-16]
   39b70:	e3a02004 	mov	r2, #4
   39b74:	e5832000 	str	r2, [r3]
   39b78:	ea000000 	b	39b80 <Display::Detect(display::Type)+0x8c>
   39b7c:	e1a00000 	nop			; (mov r0, r0)
   39b80:	e51b3010 	ldr	r3, [fp, #-16]
   39b84:	e5933018 	ldr	r3, [r3, #24]
   39b88:	e3530000 	cmp	r3, #0
   39b8c:	0a00002a 	beq	39c3c <Display::Detect(display::Type)+0x148>
   39b90:	e51b3010 	ldr	r3, [fp, #-16]
   39b94:	e5932018 	ldr	r2, [r3, #24]
   39b98:	e51b3010 	ldr	r3, [fp, #-16]
   39b9c:	e5933018 	ldr	r3, [r3, #24]
   39ba0:	e5933000 	ldr	r3, [r3]
   39ba4:	e2833008 	add	r3, r3, #8
   39ba8:	e5933000 	ldr	r3, [r3]
   39bac:	e1a00002 	mov	r0, r2
   39bb0:	e12fff33 	blx	r3
   39bb4:	e1a03000 	mov	r3, r0
   39bb8:	e2233001 	eor	r3, r3, #1
   39bbc:	e6ef3073 	uxtb	r3, r3
   39bc0:	e3530000 	cmp	r3, #0
   39bc4:	0a000013 	beq	39c18 <Display::Detect(display::Type)+0x124>
   39bc8:	e51b3010 	ldr	r3, [fp, #-16]
   39bcc:	e5933018 	ldr	r3, [r3, #24]
   39bd0:	e3530000 	cmp	r3, #0
   39bd4:	0a000008 	beq	39bfc <Display::Detect(display::Type)+0x108>
   39bd8:	e51b3010 	ldr	r3, [fp, #-16]
   39bdc:	e5932018 	ldr	r2, [r3, #24]
   39be0:	e51b3010 	ldr	r3, [fp, #-16]
   39be4:	e5933018 	ldr	r3, [r3, #24]
   39be8:	e5933000 	ldr	r3, [r3]
   39bec:	e2833004 	add	r3, r3, #4
   39bf0:	e5933000 	ldr	r3, [r3]
   39bf4:	e1a00002 	mov	r0, r2
   39bf8:	e12fff33 	blx	r3
   39bfc:	e51b3010 	ldr	r3, [fp, #-16]
   39c00:	e3a02000 	mov	r2, #0
   39c04:	e5832018 	str	r2, [r3, #24]
   39c08:	e51b3010 	ldr	r3, [fp, #-16]
   39c0c:	e3a02004 	mov	r2, #4
   39c10:	e5832000 	str	r2, [r3]
   39c14:	ea000008 	b	39c3c <Display::Detect(display::Type)+0x148>
   39c18:	e51b3010 	ldr	r3, [fp, #-16]
   39c1c:	e5932018 	ldr	r2, [r3, #24]
   39c20:	e51b3010 	ldr	r3, [fp, #-16]
   39c24:	e5933018 	ldr	r3, [r3, #24]
   39c28:	e5933000 	ldr	r3, [r3]
   39c2c:	e283300c 	add	r3, r3, #12
   39c30:	e5933000 	ldr	r3, [r3]
   39c34:	e1a00002 	mov	r0, r2
   39c38:	e12fff33 	blx	r3
   39c3c:	e51b3010 	ldr	r3, [fp, #-16]
   39c40:	e5933018 	ldr	r3, [r3, #24]
   39c44:	e3530000 	cmp	r3, #0
   39c48:	1a000002 	bne	39c58 <Display::Detect(display::Type)+0x164>
   39c4c:	e51b3010 	ldr	r3, [fp, #-16]
   39c50:	e3a02000 	mov	r2, #0
   39c54:	e5832014 	str	r2, [r3, #20]
   39c58:	e1a00000 	nop			; (mov r0, r0)
   39c5c:	e24bd008 	sub	sp, fp, #8
   39c60:	e8bd8810 	pop	{r4, fp, pc}
   39c64:	000499a4 	.word	0x000499a4
   39c68:	0004990c 	.word	0x0004990c
   39c6c:	00049934 	.word	0x00049934

00039c70 <Display::Detect(unsigned int)>:
   39c70:	e92d4810 	push	{r4, fp, lr}
   39c74:	e28db008 	add	fp, sp, #8
   39c78:	e24dd00c 	sub	sp, sp, #12
   39c7c:	e50b0010 	str	r0, [fp, #-16]
   39c80:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   39c84:	e59f1120 	ldr	r1, [pc, #288]	; 39dac <Display::Detect(unsigned int)+0x13c>
   39c88:	e3a0003c 	mov	r0, #60	; 0x3c
   39c8c:	ebfffe5f 	bl	39610 <HAL_I2C::IsConnected(unsigned char, unsigned int)>
   39c90:	e1a03000 	mov	r3, r0
   39c94:	e3530000 	cmp	r3, #0
   39c98:	0a000039 	beq	39d84 <Display::Detect(unsigned int)+0x114>
   39c9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   39ca0:	e3530004 	cmp	r3, #4
   39ca4:	8a000011 	bhi	39cf0 <Display::Detect(unsigned int)+0x80>
   39ca8:	e3a00034 	mov	r0, #52	; 0x34
   39cac:	ebff5d23 	bl	11140 <operator new(unsigned int)@plt>
   39cb0:	e1a03000 	mov	r3, r0
   39cb4:	e1a04003 	mov	r4, r3
   39cb8:	e3a01001 	mov	r1, #1
   39cbc:	e1a00004 	mov	r0, r4
   39cc0:	eb00012e 	bl	3a180 <Ssd1306::Ssd1306(TOledPanel)>
   39cc4:	e51b3010 	ldr	r3, [fp, #-16]
   39cc8:	e5834018 	str	r4, [r3, #24]
   39ccc:	e51b3010 	ldr	r3, [fp, #-16]
   39cd0:	e5933018 	ldr	r3, [r3, #24]
   39cd4:	e3530000 	cmp	r3, #0
   39cd8:	1a000016 	bne	39d38 <Display::Detect(unsigned int)+0xc8>
   39cdc:	e59f30cc 	ldr	r3, [pc, #204]	; 39db0 <Display::Detect(unsigned int)+0x140>
   39ce0:	e3a0209c 	mov	r2, #156	; 0x9c
   39ce4:	e59f10c8 	ldr	r1, [pc, #200]	; 39db4 <Display::Detect(unsigned int)+0x144>
   39ce8:	e59f00c8 	ldr	r0, [pc, #200]	; 39db8 <Display::Detect(unsigned int)+0x148>
   39cec:	ebff5d88 	bl	11314 <__assert_fail@plt>
   39cf0:	e3a00034 	mov	r0, #52	; 0x34
   39cf4:	ebff5d11 	bl	11140 <operator new(unsigned int)@plt>
   39cf8:	e1a03000 	mov	r3, r0
   39cfc:	e1a04003 	mov	r4, r3
   39d00:	e3a01000 	mov	r1, #0
   39d04:	e1a00004 	mov	r0, r4
   39d08:	eb00011c 	bl	3a180 <Ssd1306::Ssd1306(TOledPanel)>
   39d0c:	e51b3010 	ldr	r3, [fp, #-16]
   39d10:	e5834018 	str	r4, [r3, #24]
   39d14:	e51b3010 	ldr	r3, [fp, #-16]
   39d18:	e5933018 	ldr	r3, [r3, #24]
   39d1c:	e3530000 	cmp	r3, #0
   39d20:	1a000004 	bne	39d38 <Display::Detect(unsigned int)+0xc8>
   39d24:	e59f3084 	ldr	r3, [pc, #132]	; 39db0 <Display::Detect(unsigned int)+0x140>
   39d28:	e3a0209f 	mov	r2, #159	; 0x9f
   39d2c:	e59f1080 	ldr	r1, [pc, #128]	; 39db4 <Display::Detect(unsigned int)+0x144>
   39d30:	e59f0080 	ldr	r0, [pc, #128]	; 39db8 <Display::Detect(unsigned int)+0x148>
   39d34:	ebff5d76 	bl	11314 <__assert_fail@plt>
   39d38:	e51b3010 	ldr	r3, [fp, #-16]
   39d3c:	e5932018 	ldr	r2, [r3, #24]
   39d40:	e51b3010 	ldr	r3, [fp, #-16]
   39d44:	e5933018 	ldr	r3, [r3, #24]
   39d48:	e5933000 	ldr	r3, [r3]
   39d4c:	e2833008 	add	r3, r3, #8
   39d50:	e5933000 	ldr	r3, [r3]
   39d54:	e1a00002 	mov	r0, r2
   39d58:	e12fff33 	blx	r3
   39d5c:	e1a03000 	mov	r3, r0
   39d60:	e3530000 	cmp	r3, #0
   39d64:	0a000006 	beq	39d84 <Display::Detect(unsigned int)+0x114>
   39d68:	e51b3010 	ldr	r3, [fp, #-16]
   39d6c:	e3a02002 	mov	r2, #2
   39d70:	e5832000 	str	r2, [r3]
   39d74:	e59f2040 	ldr	r2, [pc, #64]	; 39dbc <Display::Detect(unsigned int)+0x14c>
   39d78:	e3a01001 	mov	r1, #1
   39d7c:	e51b0010 	ldr	r0, [fp, #-16]
   39d80:	ebff5fe6 	bl	11d20 <Display::Printf(unsigned int, char const*, ...)>
   39d84:	e51b3010 	ldr	r3, [fp, #-16]
   39d88:	e5933018 	ldr	r3, [r3, #24]
   39d8c:	e3530000 	cmp	r3, #0
   39d90:	1a000002 	bne	39da0 <Display::Detect(unsigned int)+0x130>
   39d94:	e51b3010 	ldr	r3, [fp, #-16]
   39d98:	e3a02000 	mov	r2, #0
   39d9c:	e5832014 	str	r2, [r3, #20]
   39da0:	e1a00000 	nop			; (mov r0, r0)
   39da4:	e24bd008 	sub	sp, fp, #8
   39da8:	e8bd8810 	pop	{r4, fp, pc}
   39dac:	000186a0 	.word	0x000186a0
   39db0:	000499c8 	.word	0x000499c8
   39db4:	0004990c 	.word	0x0004990c
   39db8:	00049934 	.word	0x00049934
   39dbc:	0004994c 	.word	0x0004994c

00039dc0 <DisplaySet::~DisplaySet()>:
   39dc0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   39dc4:	e28db000 	add	fp, sp, #0
   39dc8:	e24dd00c 	sub	sp, sp, #12
   39dcc:	e50b0008 	str	r0, [fp, #-8]
   39dd0:	e59f2018 	ldr	r2, [pc, #24]	; 39df0 <DisplaySet::~DisplaySet()+0x30>
   39dd4:	e51b3008 	ldr	r3, [fp, #-8]
   39dd8:	e5832000 	str	r2, [r3]
   39ddc:	e51b3008 	ldr	r3, [fp, #-8]
   39de0:	e1a00003 	mov	r0, r3
   39de4:	e28bd000 	add	sp, fp, #0
   39de8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   39dec:	e12fff1e 	bx	lr
   39df0:	00049e08 	.word	0x00049e08

00039df4 <DisplaySet::~DisplaySet()>:
   39df4:	e92d4800 	push	{fp, lr}
   39df8:	e28db004 	add	fp, sp, #4
   39dfc:	e24dd008 	sub	sp, sp, #8
   39e00:	e50b0008 	str	r0, [fp, #-8]
   39e04:	e51b0008 	ldr	r0, [fp, #-8]
   39e08:	ebffffec 	bl	39dc0 <DisplaySet::~DisplaySet()>
   39e0c:	e51b0008 	ldr	r0, [fp, #-8]
   39e10:	ebff5d3c 	bl	11308 <operator delete(void*)@plt>
   39e14:	e51b3008 	ldr	r3, [fp, #-8]
   39e18:	e1a00003 	mov	r0, r3
   39e1c:	e24bd004 	sub	sp, fp, #4
   39e20:	e8bd8800 	pop	{fp, pc}

00039e24 <DisplaySet::SetSleep(bool)>:
   39e24:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   39e28:	e28db000 	add	fp, sp, #0
   39e2c:	e24dd00c 	sub	sp, sp, #12
   39e30:	e50b0008 	str	r0, [fp, #-8]
   39e34:	e1a03001 	mov	r3, r1
   39e38:	e54b3009 	strb	r3, [fp, #-9]
   39e3c:	e1a00000 	nop			; (mov r0, r0)
   39e40:	e28bd000 	add	sp, fp, #0
   39e44:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   39e48:	e12fff1e 	bx	lr

00039e4c <DisplaySet::SetContrast(unsigned char)>:
   39e4c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   39e50:	e28db000 	add	fp, sp, #0
   39e54:	e24dd00c 	sub	sp, sp, #12
   39e58:	e50b0008 	str	r0, [fp, #-8]
   39e5c:	e1a03001 	mov	r3, r1
   39e60:	e54b3009 	strb	r3, [fp, #-9]
   39e64:	e1a00000 	nop			; (mov r0, r0)
   39e68:	e28bd000 	add	sp, fp, #0
   39e6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   39e70:	e12fff1e 	bx	lr

00039e74 <DisplaySet::SetFlipVertically(bool)>:
   39e74:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   39e78:	e28db000 	add	fp, sp, #0
   39e7c:	e24dd00c 	sub	sp, sp, #12
   39e80:	e50b0008 	str	r0, [fp, #-8]
   39e84:	e1a03001 	mov	r3, r1
   39e88:	e54b3009 	strb	r3, [fp, #-9]
   39e8c:	e1a00000 	nop			; (mov r0, r0)
   39e90:	e28bd000 	add	sp, fp, #0
   39e94:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   39e98:	e12fff1e 	bx	lr

00039e9c <DisplaySet::PrintInfo()>:
   39e9c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   39ea0:	e28db000 	add	fp, sp, #0
   39ea4:	e24dd00c 	sub	sp, sp, #12
   39ea8:	e50b0008 	str	r0, [fp, #-8]
   39eac:	e1a00000 	nop			; (mov r0, r0)
   39eb0:	e28bd000 	add	sp, fp, #0
   39eb4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   39eb8:	e12fff1e 	bx	lr

00039ebc <HAL_I2C::Write(char)>:
   39ebc:	e92d4800 	push	{fp, lr}
   39ec0:	e28db004 	add	fp, sp, #4
   39ec4:	e24dd008 	sub	sp, sp, #8
   39ec8:	e50b0008 	str	r0, [fp, #-8]
   39ecc:	e1a03001 	mov	r3, r1
   39ed0:	e54b3009 	strb	r3, [fp, #-9]
   39ed4:	e51b0008 	ldr	r0, [fp, #-8]
   39ed8:	ebff5f0c 	bl	11b10 <HAL_I2C::Setup()>
   39edc:	e24b3009 	sub	r3, fp, #9
   39ee0:	e3a01001 	mov	r1, #1
   39ee4:	e1a00003 	mov	r0, r3
   39ee8:	eb002316 	bl	42b48 <bcm2835_i2c_write>
   39eec:	e1a00000 	nop			; (mov r0, r0)
   39ef0:	e24bd004 	sub	sp, fp, #4
   39ef4:	e8bd8800 	pop	{fp, pc}

00039ef8 <HAL_I2C::Write(char const*, unsigned int)>:
   39ef8:	e92d4800 	push	{fp, lr}
   39efc:	e28db004 	add	fp, sp, #4
   39f00:	e24dd010 	sub	sp, sp, #16
   39f04:	e50b0008 	str	r0, [fp, #-8]
   39f08:	e50b100c 	str	r1, [fp, #-12]
   39f0c:	e50b2010 	str	r2, [fp, #-16]
   39f10:	e51b0008 	ldr	r0, [fp, #-8]
   39f14:	ebff5efd 	bl	11b10 <HAL_I2C::Setup()>
   39f18:	e51b1010 	ldr	r1, [fp, #-16]
   39f1c:	e51b000c 	ldr	r0, [fp, #-12]
   39f20:	eb002308 	bl	42b48 <bcm2835_i2c_write>
   39f24:	e1a00000 	nop			; (mov r0, r0)
   39f28:	e24bd004 	sub	sp, fp, #4
   39f2c:	e8bd8800 	pop	{fp, pc}

00039f30 <HAL_I2C::WriteRegister(unsigned char, unsigned char)>:
   39f30:	e92d4800 	push	{fp, lr}
   39f34:	e28db004 	add	fp, sp, #4
   39f38:	e24dd010 	sub	sp, sp, #16
   39f3c:	e50b0010 	str	r0, [fp, #-16]
   39f40:	e1a03001 	mov	r3, r1
   39f44:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   39f48:	e1a03002 	mov	r3, r2
   39f4c:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
   39f50:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   39f54:	e54b3008 	strb	r3, [fp, #-8]
   39f58:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
   39f5c:	e54b3007 	strb	r3, [fp, #-7]
   39f60:	e51b0010 	ldr	r0, [fp, #-16]
   39f64:	ebff5ee9 	bl	11b10 <HAL_I2C::Setup()>
   39f68:	e24b3008 	sub	r3, fp, #8
   39f6c:	e3a01002 	mov	r1, #2
   39f70:	e1a00003 	mov	r0, r3
   39f74:	eb0022f3 	bl	42b48 <bcm2835_i2c_write>
   39f78:	e1a00000 	nop			; (mov r0, r0)
   39f7c:	e24bd004 	sub	sp, fp, #4
   39f80:	e8bd8800 	pop	{fp, pc}

00039f84 <HAL_I2C::Read(char*, unsigned int)>:
   39f84:	e92d4800 	push	{fp, lr}
   39f88:	e28db004 	add	fp, sp, #4
   39f8c:	e24dd010 	sub	sp, sp, #16
   39f90:	e50b0008 	str	r0, [fp, #-8]
   39f94:	e50b100c 	str	r1, [fp, #-12]
   39f98:	e50b2010 	str	r2, [fp, #-16]
   39f9c:	e51b0008 	ldr	r0, [fp, #-8]
   39fa0:	ebff5eda 	bl	11b10 <HAL_I2C::Setup()>
   39fa4:	e51b1010 	ldr	r1, [fp, #-16]
   39fa8:	e51b000c 	ldr	r0, [fp, #-12]
   39fac:	eb00235f 	bl	42d30 <bcm2835_i2c_read>
   39fb0:	e1a03000 	mov	r3, r0
   39fb4:	e1a00003 	mov	r0, r3
   39fb8:	e24bd004 	sub	sp, fp, #4
   39fbc:	e8bd8800 	pop	{fp, pc}

00039fc0 <Ssd1306::~Ssd1306()>:
   39fc0:	e92d4800 	push	{fp, lr}
   39fc4:	e28db004 	add	fp, sp, #4
   39fc8:	e24dd008 	sub	sp, sp, #8
   39fcc:	e50b0008 	str	r0, [fp, #-8]
   39fd0:	e59f204c 	ldr	r2, [pc, #76]	; 3a024 <Ssd1306::~Ssd1306()+0x64>
   39fd4:	e51b3008 	ldr	r3, [fp, #-8]
   39fd8:	e5832000 	str	r2, [r3]
   39fdc:	e51b3008 	ldr	r3, [fp, #-8]
   39fe0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   39fe4:	e3530000 	cmp	r3, #0
   39fe8:	0a000003 	beq	39ffc <Ssd1306::~Ssd1306()+0x3c>
   39fec:	e51b3008 	ldr	r3, [fp, #-8]
   39ff0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   39ff4:	e1a00003 	mov	r0, r3
   39ff8:	ebff5ce6 	bl	11398 <operator delete[](void*)@plt>
   39ffc:	e51b3008 	ldr	r3, [fp, #-8]
   3a000:	e3a02000 	mov	r2, #0
   3a004:	e5832028 	str	r2, [r3, #40]	; 0x28
   3a008:	e51b3008 	ldr	r3, [fp, #-8]
   3a00c:	e1a00003 	mov	r0, r3
   3a010:	ebffff6a 	bl	39dc0 <DisplaySet::~DisplaySet()>
   3a014:	e51b3008 	ldr	r3, [fp, #-8]
   3a018:	e1a00003 	mov	r0, r3
   3a01c:	e24bd004 	sub	sp, fp, #4
   3a020:	e8bd8800 	pop	{fp, pc}
   3a024:	00049dc8 	.word	0x00049dc8

0003a028 <Ssd1306::~Ssd1306()>:
   3a028:	e92d4800 	push	{fp, lr}
   3a02c:	e28db004 	add	fp, sp, #4
   3a030:	e24dd008 	sub	sp, sp, #8
   3a034:	e50b0008 	str	r0, [fp, #-8]
   3a038:	e51b0008 	ldr	r0, [fp, #-8]
   3a03c:	ebffffdf 	bl	39fc0 <Ssd1306::~Ssd1306()>
   3a040:	e51b0008 	ldr	r0, [fp, #-8]
   3a044:	ebff5caf 	bl	11308 <operator delete(void*)@plt>
   3a048:	e51b3008 	ldr	r3, [fp, #-8]
   3a04c:	e1a00003 	mov	r0, r3
   3a050:	e24bd004 	sub	sp, fp, #4
   3a054:	e8bd8800 	pop	{fp, pc}

0003a058 <DisplaySet::DisplaySet()>:
   3a058:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3a05c:	e28db000 	add	fp, sp, #0
   3a060:	e24dd00c 	sub	sp, sp, #12
   3a064:	e50b0008 	str	r0, [fp, #-8]
   3a068:	e59f2030 	ldr	r2, [pc, #48]	; 3a0a0 <DisplaySet::DisplaySet()+0x48>
   3a06c:	e51b3008 	ldr	r3, [fp, #-8]
   3a070:	e5832000 	str	r2, [r3]
   3a074:	e51b3008 	ldr	r3, [fp, #-8]
   3a078:	e3a0207f 	mov	r2, #127	; 0x7f
   3a07c:	e5c3200c 	strb	r2, [r3, #12]
   3a080:	e51b3008 	ldr	r3, [fp, #-8]
   3a084:	e3a02000 	mov	r2, #0
   3a088:	e5c3200d 	strb	r2, [r3, #13]
   3a08c:	e51b3008 	ldr	r3, [fp, #-8]
   3a090:	e1a00003 	mov	r0, r3
   3a094:	e28bd000 	add	sp, fp, #0
   3a098:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3a09c:	e12fff1e 	bx	lr
   3a0a0:	00049e08 	.word	0x00049e08

0003a0a4 <Ssd1306::Ssd1306()>:
   3a0a4:	e92d4800 	push	{fp, lr}
   3a0a8:	e28db004 	add	fp, sp, #4
   3a0ac:	e24dd008 	sub	sp, sp, #8
   3a0b0:	e50b0008 	str	r0, [fp, #-8]
   3a0b4:	e51b3008 	ldr	r3, [fp, #-8]
   3a0b8:	e1a00003 	mov	r0, r3
   3a0bc:	ebffffe5 	bl	3a058 <DisplaySet::DisplaySet()>
   3a0c0:	e59f20a0 	ldr	r2, [pc, #160]	; 3a168 <Ssd1306::Ssd1306()+0xc4>
   3a0c4:	e51b3008 	ldr	r3, [fp, #-8]
   3a0c8:	e5832000 	str	r2, [r3]
   3a0cc:	e51b3008 	ldr	r3, [fp, #-8]
   3a0d0:	e2833010 	add	r3, r3, #16
   3a0d4:	e59f2090 	ldr	r2, [pc, #144]	; 3a16c <Ssd1306::Ssd1306()+0xc8>
   3a0d8:	e3a0103c 	mov	r1, #60	; 0x3c
   3a0dc:	e1a00003 	mov	r0, r3
   3a0e0:	ebfffd29 	bl	3958c <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>
   3a0e4:	e51b3008 	ldr	r3, [fp, #-8]
   3a0e8:	e3a02000 	mov	r2, #0
   3a0ec:	e5832018 	str	r2, [r3, #24]
   3a0f0:	e51b3008 	ldr	r3, [fp, #-8]
   3a0f4:	e3a02000 	mov	r2, #0
   3a0f8:	e5c3201c 	strb	r2, [r3, #28]
   3a0fc:	e51b3008 	ldr	r3, [fp, #-8]
   3a100:	e3a02000 	mov	r2, #0
   3a104:	e5832024 	str	r2, [r3, #36]	; 0x24
   3a108:	e51b3008 	ldr	r3, [fp, #-8]
   3a10c:	e3a02000 	mov	r2, #0
   3a110:	e5832028 	str	r2, [r3, #40]	; 0x28
   3a114:	e51b3008 	ldr	r3, [fp, #-8]
   3a118:	e3a02000 	mov	r2, #0
   3a11c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
   3a120:	e59f3048 	ldr	r3, [pc, #72]	; 3a170 <Ssd1306::Ssd1306()+0xcc>
   3a124:	e5933000 	ldr	r3, [r3]
   3a128:	e3530000 	cmp	r3, #0
   3a12c:	0a000004 	beq	3a144 <Ssd1306::Ssd1306()+0xa0>
   3a130:	e59f303c 	ldr	r3, [pc, #60]	; 3a174 <Ssd1306::Ssd1306()+0xd0>
   3a134:	e3a020d7 	mov	r2, #215	; 0xd7
   3a138:	e59f1038 	ldr	r1, [pc, #56]	; 3a178 <Ssd1306::Ssd1306()+0xd4>
   3a13c:	e59f0038 	ldr	r0, [pc, #56]	; 3a17c <Ssd1306::Ssd1306()+0xd8>
   3a140:	ebff5c73 	bl	11314 <__assert_fail@plt>
   3a144:	e59f2024 	ldr	r2, [pc, #36]	; 3a170 <Ssd1306::Ssd1306()+0xcc>
   3a148:	e51b3008 	ldr	r3, [fp, #-8]
   3a14c:	e5823000 	str	r3, [r2]
   3a150:	e51b0008 	ldr	r0, [fp, #-8]
   3a154:	eb00030f 	bl	3ad98 <Ssd1306::InitMembers()>
   3a158:	e51b3008 	ldr	r3, [fp, #-8]
   3a15c:	e1a00003 	mov	r0, r3
   3a160:	e24bd004 	sub	sp, fp, #4
   3a164:	e8bd8800 	pop	{fp, pc}
   3a168:	00049dc8 	.word	0x00049dc8
   3a16c:	00061a80 	.word	0x00061a80
   3a170:	0005f378 	.word	0x0005f378
   3a174:	00049e40 	.word	0x00049e40
   3a178:	00049d38 	.word	0x00049d38
   3a17c:	00049d4c 	.word	0x00049d4c

0003a180 <Ssd1306::Ssd1306(TOledPanel)>:
   3a180:	e92d4800 	push	{fp, lr}
   3a184:	e28db004 	add	fp, sp, #4
   3a188:	e24dd008 	sub	sp, sp, #8
   3a18c:	e50b0008 	str	r0, [fp, #-8]
   3a190:	e50b100c 	str	r1, [fp, #-12]
   3a194:	e51b3008 	ldr	r3, [fp, #-8]
   3a198:	e1a00003 	mov	r0, r3
   3a19c:	ebffffad 	bl	3a058 <DisplaySet::DisplaySet()>
   3a1a0:	e59f20a0 	ldr	r2, [pc, #160]	; 3a248 <Ssd1306::Ssd1306(TOledPanel)+0xc8>
   3a1a4:	e51b3008 	ldr	r3, [fp, #-8]
   3a1a8:	e5832000 	str	r2, [r3]
   3a1ac:	e51b3008 	ldr	r3, [fp, #-8]
   3a1b0:	e2833010 	add	r3, r3, #16
   3a1b4:	e59f2090 	ldr	r2, [pc, #144]	; 3a24c <Ssd1306::Ssd1306(TOledPanel)+0xcc>
   3a1b8:	e3a0103c 	mov	r1, #60	; 0x3c
   3a1bc:	e1a00003 	mov	r0, r3
   3a1c0:	ebfffcf1 	bl	3958c <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>
   3a1c4:	e51b3008 	ldr	r3, [fp, #-8]
   3a1c8:	e51b200c 	ldr	r2, [fp, #-12]
   3a1cc:	e5832018 	str	r2, [r3, #24]
   3a1d0:	e51b3008 	ldr	r3, [fp, #-8]
   3a1d4:	e3a02000 	mov	r2, #0
   3a1d8:	e5c3201c 	strb	r2, [r3, #28]
   3a1dc:	e51b3008 	ldr	r3, [fp, #-8]
   3a1e0:	e3a02000 	mov	r2, #0
   3a1e4:	e5832024 	str	r2, [r3, #36]	; 0x24
   3a1e8:	e51b3008 	ldr	r3, [fp, #-8]
   3a1ec:	e3a02000 	mov	r2, #0
   3a1f0:	e5832028 	str	r2, [r3, #40]	; 0x28
   3a1f4:	e51b3008 	ldr	r3, [fp, #-8]
   3a1f8:	e3a02000 	mov	r2, #0
   3a1fc:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
   3a200:	e59f3048 	ldr	r3, [pc, #72]	; 3a250 <Ssd1306::Ssd1306(TOledPanel)+0xd0>
   3a204:	e5933000 	ldr	r3, [r3]
   3a208:	e3530000 	cmp	r3, #0
   3a20c:	0a000004 	beq	3a224 <Ssd1306::Ssd1306(TOledPanel)+0xa4>
   3a210:	e59f303c 	ldr	r3, [pc, #60]	; 3a254 <Ssd1306::Ssd1306(TOledPanel)+0xd4>
   3a214:	e3a020de 	mov	r2, #222	; 0xde
   3a218:	e59f1038 	ldr	r1, [pc, #56]	; 3a258 <Ssd1306::Ssd1306(TOledPanel)+0xd8>
   3a21c:	e59f0038 	ldr	r0, [pc, #56]	; 3a25c <Ssd1306::Ssd1306(TOledPanel)+0xdc>
   3a220:	ebff5c3b 	bl	11314 <__assert_fail@plt>
   3a224:	e59f2024 	ldr	r2, [pc, #36]	; 3a250 <Ssd1306::Ssd1306(TOledPanel)+0xd0>
   3a228:	e51b3008 	ldr	r3, [fp, #-8]
   3a22c:	e5823000 	str	r3, [r2]
   3a230:	e51b0008 	ldr	r0, [fp, #-8]
   3a234:	eb0002d7 	bl	3ad98 <Ssd1306::InitMembers()>
   3a238:	e51b3008 	ldr	r3, [fp, #-8]
   3a23c:	e1a00003 	mov	r0, r3
   3a240:	e24bd004 	sub	sp, fp, #4
   3a244:	e8bd8800 	pop	{fp, pc}
   3a248:	00049dc8 	.word	0x00049dc8
   3a24c:	00061a80 	.word	0x00061a80
   3a250:	0005f378 	.word	0x0005f378
   3a254:	00049e54 	.word	0x00049e54
   3a258:	00049d38 	.word	0x00049d38
   3a25c:	00049d4c 	.word	0x00049d4c

0003a260 <Ssd1306::Ssd1306(unsigned char, TOledPanel)>:
   3a260:	e92d4800 	push	{fp, lr}
   3a264:	e28db004 	add	fp, sp, #4
   3a268:	e24dd010 	sub	sp, sp, #16
   3a26c:	e50b0008 	str	r0, [fp, #-8]
   3a270:	e1a03001 	mov	r3, r1
   3a274:	e50b2010 	str	r2, [fp, #-16]
   3a278:	e54b3009 	strb	r3, [fp, #-9]
   3a27c:	e51b3008 	ldr	r3, [fp, #-8]
   3a280:	e1a00003 	mov	r0, r3
   3a284:	ebffff73 	bl	3a058 <DisplaySet::DisplaySet()>
   3a288:	e59f20b4 	ldr	r2, [pc, #180]	; 3a344 <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0xe4>
   3a28c:	e51b3008 	ldr	r3, [fp, #-8]
   3a290:	e5832000 	str	r2, [r3]
   3a294:	e51b3008 	ldr	r3, [fp, #-8]
   3a298:	e2830010 	add	r0, r3, #16
   3a29c:	e55b3009 	ldrb	r3, [fp, #-9]
   3a2a0:	e3530000 	cmp	r3, #0
   3a2a4:	0a000001 	beq	3a2b0 <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0x50>
   3a2a8:	e55b3009 	ldrb	r3, [fp, #-9]
   3a2ac:	ea000000 	b	3a2b4 <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0x54>
   3a2b0:	e3a0303c 	mov	r3, #60	; 0x3c
   3a2b4:	e59f208c 	ldr	r2, [pc, #140]	; 3a348 <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0xe8>
   3a2b8:	e1a01003 	mov	r1, r3
   3a2bc:	ebfffcb2 	bl	3958c <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>
   3a2c0:	e51b3008 	ldr	r3, [fp, #-8]
   3a2c4:	e51b2010 	ldr	r2, [fp, #-16]
   3a2c8:	e5832018 	str	r2, [r3, #24]
   3a2cc:	e51b3008 	ldr	r3, [fp, #-8]
   3a2d0:	e3a02000 	mov	r2, #0
   3a2d4:	e5c3201c 	strb	r2, [r3, #28]
   3a2d8:	e51b3008 	ldr	r3, [fp, #-8]
   3a2dc:	e3a02000 	mov	r2, #0
   3a2e0:	e5832024 	str	r2, [r3, #36]	; 0x24
   3a2e4:	e51b3008 	ldr	r3, [fp, #-8]
   3a2e8:	e3a02000 	mov	r2, #0
   3a2ec:	e5832028 	str	r2, [r3, #40]	; 0x28
   3a2f0:	e51b3008 	ldr	r3, [fp, #-8]
   3a2f4:	e3a02000 	mov	r2, #0
   3a2f8:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
   3a2fc:	e59f3048 	ldr	r3, [pc, #72]	; 3a34c <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0xec>
   3a300:	e5933000 	ldr	r3, [r3]
   3a304:	e3530000 	cmp	r3, #0
   3a308:	0a000004 	beq	3a320 <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0xc0>
   3a30c:	e59f303c 	ldr	r3, [pc, #60]	; 3a350 <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0xf0>
   3a310:	e3a020e5 	mov	r2, #229	; 0xe5
   3a314:	e59f1038 	ldr	r1, [pc, #56]	; 3a354 <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0xf4>
   3a318:	e59f0038 	ldr	r0, [pc, #56]	; 3a358 <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0xf8>
   3a31c:	ebff5bfc 	bl	11314 <__assert_fail@plt>
   3a320:	e59f2024 	ldr	r2, [pc, #36]	; 3a34c <Ssd1306::Ssd1306(unsigned char, TOledPanel)+0xec>
   3a324:	e51b3008 	ldr	r3, [fp, #-8]
   3a328:	e5823000 	str	r3, [r2]
   3a32c:	e51b0008 	ldr	r0, [fp, #-8]
   3a330:	eb000298 	bl	3ad98 <Ssd1306::InitMembers()>
   3a334:	e51b3008 	ldr	r3, [fp, #-8]
   3a338:	e1a00003 	mov	r0, r3
   3a33c:	e24bd004 	sub	sp, fp, #4
   3a340:	e8bd8800 	pop	{fp, pc}
   3a344:	00049dc8 	.word	0x00049dc8
   3a348:	00061a80 	.word	0x00061a80
   3a34c:	0005f378 	.word	0x0005f378
   3a350:	00049e74 	.word	0x00049e74
   3a354:	00049d38 	.word	0x00049d38
   3a358:	00049d4c 	.word	0x00049d4c

0003a35c <Ssd1306::PrintInfo()>:
   3a35c:	e92d4800 	push	{fp, lr}
   3a360:	e28db004 	add	fp, sp, #4
   3a364:	e24dd008 	sub	sp, sp, #8
   3a368:	e50b0008 	str	r0, [fp, #-8]
   3a36c:	e51b3008 	ldr	r3, [fp, #-8]
   3a370:	e5d3301c 	ldrb	r3, [r3, #28]
   3a374:	e3530000 	cmp	r3, #0
   3a378:	0a000001 	beq	3a384 <Ssd1306::PrintInfo()+0x28>
   3a37c:	e59f1028 	ldr	r1, [pc, #40]	; 3a3ac <Ssd1306::PrintInfo()+0x50>
   3a380:	ea000000 	b	3a388 <Ssd1306::PrintInfo()+0x2c>
   3a384:	e59f1024 	ldr	r1, [pc, #36]	; 3a3b0 <Ssd1306::PrintInfo()+0x54>
   3a388:	e51b3008 	ldr	r3, [fp, #-8]
   3a38c:	e5932008 	ldr	r2, [r3, #8]
   3a390:	e51b3008 	ldr	r3, [fp, #-8]
   3a394:	e5933004 	ldr	r3, [r3, #4]
   3a398:	e59f0014 	ldr	r0, [pc, #20]	; 3a3b4 <Ssd1306::PrintInfo()+0x58>
   3a39c:	ebff5b94 	bl	111f4 <printf@plt>
   3a3a0:	e1a00000 	nop			; (mov r0, r0)
   3a3a4:	e24bd004 	sub	sp, fp, #4
   3a3a8:	e8bd8800 	pop	{fp, pc}
   3a3ac:	00049d60 	.word	0x00049d60
   3a3b0:	00049d68 	.word	0x00049d68
   3a3b4:	00049d70 	.word	0x00049d70

0003a3b8 <Ssd1306::CheckSH1106()>:
   3a3b8:	e92d4800 	push	{fp, lr}
   3a3bc:	e28db004 	add	fp, sp, #4
   3a3c0:	e24dd020 	sub	sp, sp, #32
   3a3c4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   3a3c8:	e3a01000 	mov	r1, #0
   3a3cc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3a3d0:	eb0002ba 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3a3d4:	e3a01090 	mov	r1, #144	; 0x90
   3a3d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3a3dc:	eb0002b7 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3a3e0:	e3a010b0 	mov	r1, #176	; 0xb0
   3a3e4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3a3e8:	eb0002b4 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3a3ec:	e59f2114 	ldr	r2, [pc, #276]	; 3a508 <Ssd1306::CheckSH1106()+0x150>
   3a3f0:	e24b300c 	sub	r3, fp, #12
   3a3f4:	e8920003 	ldm	r2, {r0, r1}
   3a3f8:	e5830000 	str	r0, [r3]
   3a3fc:	e2833004 	add	r3, r3, #4
   3a400:	e5c31000 	strb	r1, [r3]
   3a404:	e24b300c 	sub	r3, fp, #12
   3a408:	e3a02005 	mov	r2, #5
   3a40c:	e1a01003 	mov	r1, r3
   3a410:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3a414:	eb0002b8 	bl	3aefc <Ssd1306::SendData(unsigned char const*, unsigned int)>
   3a418:	e3a01000 	mov	r1, #0
   3a41c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3a420:	eb0002a6 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3a424:	e3a01090 	mov	r1, #144	; 0x90
   3a428:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3a42c:	eb0002a3 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3a430:	e3a010b0 	mov	r1, #176	; 0xb0
   3a434:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3a438:	eb0002a0 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3a43c:	e24b3014 	sub	r3, fp, #20
   3a440:	e3a02000 	mov	r2, #0
   3a444:	e5832000 	str	r2, [r3]
   3a448:	e5c32004 	strb	r2, [r3, #4]
   3a44c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3a450:	e2833010 	add	r3, r3, #16
   3a454:	e3a01040 	mov	r1, #64	; 0x40
   3a458:	e1a00003 	mov	r0, r3
   3a45c:	ebfffe96 	bl	39ebc <HAL_I2C::Write(char)>
   3a460:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3a464:	e2833010 	add	r3, r3, #16
   3a468:	e24b1014 	sub	r1, fp, #20
   3a46c:	e3a02005 	mov	r2, #5
   3a470:	e1a00003 	mov	r0, r3
   3a474:	ebfffec2 	bl	39f84 <HAL_I2C::Read(char*, unsigned int)>
   3a478:	e55b3014 	ldrb	r3, [fp, #-20]	; 0xffffffec
   3a47c:	e1a01003 	mov	r1, r3
   3a480:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
   3a484:	e1a00003 	mov	r0, r3
   3a488:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
   3a48c:	e1a0c003 	mov	ip, r3
   3a490:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   3a494:	e55b2010 	ldrb	r2, [fp, #-16]
   3a498:	e58d2004 	str	r2, [sp, #4]
   3a49c:	e58d3000 	str	r3, [sp]
   3a4a0:	e1a0300c 	mov	r3, ip
   3a4a4:	e1a02000 	mov	r2, r0
   3a4a8:	e59f005c 	ldr	r0, [pc, #92]	; 3a50c <Ssd1306::CheckSH1106()+0x154>
   3a4ac:	ebff5b50 	bl	111f4 <printf@plt>
   3a4b0:	e24b3014 	sub	r3, fp, #20
   3a4b4:	e2831001 	add	r1, r3, #1
   3a4b8:	e24b300c 	sub	r3, fp, #12
   3a4bc:	e2833001 	add	r3, r3, #1
   3a4c0:	e3a02004 	mov	r2, #4
   3a4c4:	e1a00003 	mov	r0, r3
   3a4c8:	ebff5bfa 	bl	114b8 <memcmp@plt>
   3a4cc:	e1a03000 	mov	r3, r0
   3a4d0:	e3530000 	cmp	r3, #0
   3a4d4:	03a03001 	moveq	r3, #1
   3a4d8:	13a03000 	movne	r3, #0
   3a4dc:	e6ef2073 	uxtb	r2, r3
   3a4e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3a4e4:	e5c3201c 	strb	r2, [r3, #28]
   3a4e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3a4ec:	e5d3301c 	ldrb	r3, [r3, #28]
   3a4f0:	e1a01003 	mov	r1, r3
   3a4f4:	e59f0014 	ldr	r0, [pc, #20]	; 3a510 <Ssd1306::CheckSH1106()+0x158>
   3a4f8:	ebff5b3d 	bl	111f4 <printf@plt>
   3a4fc:	e1a00000 	nop			; (mov r0, r0)
   3a500:	e24bd004 	sub	sp, fp, #4
   3a504:	e8bd8800 	pop	{fp, pc}
   3a508:	00049dac 	.word	0x00049dac
   3a50c:	00049d7c 	.word	0x00049d7c
   3a510:	00049d98 	.word	0x00049d98

0003a514 <Ssd1306::Start()>:
   3a514:	e92d4800 	push	{fp, lr}
   3a518:	e28db004 	add	fp, sp, #4
   3a51c:	e24dd018 	sub	sp, sp, #24
   3a520:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   3a524:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3a528:	e2833010 	add	r3, r3, #16
   3a52c:	e1a00003 	mov	r0, r3
   3a530:	ebfffc27 	bl	395d4 <HAL_I2C::IsConnected()>
   3a534:	e1a03000 	mov	r3, r0
   3a538:	e2233001 	eor	r3, r3, #1
   3a53c:	e6ef3073 	uxtb	r3, r3
   3a540:	e3530000 	cmp	r3, #0
   3a544:	0a000001 	beq	3a550 <Ssd1306::Start()+0x3c>
   3a548:	e3a03000 	mov	r3, #0
   3a54c:	ea00004a 	b	3a67c <Ssd1306::Start()+0x168>
   3a550:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3a554:	e5933018 	ldr	r3, [r3, #24]
   3a558:	e3530000 	cmp	r3, #0
   3a55c:	0a000004 	beq	3a574 <Ssd1306::Start()+0x60>
   3a560:	e3530000 	cmp	r3, #0
   3a564:	ba000026 	blt	3a604 <Ssd1306::Start()+0xf0>
   3a568:	e3530002 	cmp	r3, #2
   3a56c:	ca000024 	bgt	3a604 <Ssd1306::Start()+0xf0>
   3a570:	ea000011 	b	3a5bc <Ssd1306::Start()+0xa8>
   3a574:	e3a03000 	mov	r3, #0
   3a578:	e50b3008 	str	r3, [fp, #-8]
   3a57c:	e51b3008 	ldr	r3, [fp, #-8]
   3a580:	e3530017 	cmp	r3, #23
   3a584:	8a00000a 	bhi	3a5b4 <Ssd1306::Start()+0xa0>
   3a588:	e59f20f8 	ldr	r2, [pc, #248]	; 3a688 <Ssd1306::Start()+0x174>
   3a58c:	e51b3008 	ldr	r3, [fp, #-8]
   3a590:	e0823003 	add	r3, r2, r3
   3a594:	e5d33000 	ldrb	r3, [r3]
   3a598:	e1a01003 	mov	r1, r3
   3a59c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3a5a0:	eb000246 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3a5a4:	e51b3008 	ldr	r3, [fp, #-8]
   3a5a8:	e2833001 	add	r3, r3, #1
   3a5ac:	e50b3008 	str	r3, [fp, #-8]
   3a5b0:	eafffff1 	b	3a57c <Ssd1306::Start()+0x68>
   3a5b4:	e1a00000 	nop			; (mov r0, r0)
   3a5b8:	ea000013 	b	3a60c <Ssd1306::Start()+0xf8>
   3a5bc:	e3a03000 	mov	r3, #0
   3a5c0:	e50b300c 	str	r3, [fp, #-12]
   3a5c4:	e51b300c 	ldr	r3, [fp, #-12]
   3a5c8:	e3530017 	cmp	r3, #23
   3a5cc:	8a00000a 	bhi	3a5fc <Ssd1306::Start()+0xe8>
   3a5d0:	e59f20b4 	ldr	r2, [pc, #180]	; 3a68c <Ssd1306::Start()+0x178>
   3a5d4:	e51b300c 	ldr	r3, [fp, #-12]
   3a5d8:	e0823003 	add	r3, r2, r3
   3a5dc:	e5d33000 	ldrb	r3, [r3]
   3a5e0:	e1a01003 	mov	r1, r3
   3a5e4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3a5e8:	eb000234 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3a5ec:	e51b300c 	ldr	r3, [fp, #-12]
   3a5f0:	e2833001 	add	r3, r3, #1
   3a5f4:	e50b300c 	str	r3, [fp, #-12]
   3a5f8:	eafffff1 	b	3a5c4 <Ssd1306::Start()+0xb0>
   3a5fc:	e1a00000 	nop			; (mov r0, r0)
   3a600:	ea000001 	b	3a60c <Ssd1306::Start()+0xf8>
   3a604:	e3a03000 	mov	r3, #0
   3a608:	ea00001b 	b	3a67c <Ssd1306::Start()+0x168>
   3a60c:	e3a03000 	mov	r3, #0
   3a610:	e50b3010 	str	r3, [fp, #-16]
   3a614:	e51b3010 	ldr	r3, [fp, #-16]
   3a618:	e3530085 	cmp	r3, #133	; 0x85
   3a61c:	8a000008 	bhi	3a644 <Ssd1306::Start()+0x130>
   3a620:	e59f2068 	ldr	r2, [pc, #104]	; 3a690 <Ssd1306::Start()+0x17c>
   3a624:	e51b3010 	ldr	r3, [fp, #-16]
   3a628:	e0823003 	add	r3, r2, r3
   3a62c:	e3a02000 	mov	r2, #0
   3a630:	e5c32000 	strb	r2, [r3]
   3a634:	e51b3010 	ldr	r3, [fp, #-16]
   3a638:	e2833001 	add	r3, r3, #1
   3a63c:	e50b3010 	str	r3, [fp, #-16]
   3a640:	eafffff3 	b	3a614 <Ssd1306::Start()+0x100>
   3a644:	e59f3044 	ldr	r3, [pc, #68]	; 3a690 <Ssd1306::Start()+0x17c>
   3a648:	e3a02040 	mov	r2, #64	; 0x40
   3a64c:	e5c32000 	strb	r2, [r3]
   3a650:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3a654:	ebffff57 	bl	3a3b8 <Ssd1306::CheckSH1106()>
   3a658:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3a65c:	eb00000c 	bl	3a694 <Ssd1306::Cls()>
   3a660:	e3a010af 	mov	r1, #175	; 0xaf
   3a664:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3a668:	eb000214 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3a66c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3a670:	e3a02001 	mov	r2, #1
   3a674:	e5c3200d 	strb	r2, [r3, #13]
   3a678:	e3a03001 	mov	r3, #1
   3a67c:	e1a00003 	mov	r0, r3
   3a680:	e24bd004 	sub	sp, fp, #4
   3a684:	e8bd8800 	pop	{fp, pc}
   3a688:	00049d08 	.word	0x00049d08
   3a68c:	00049d20 	.word	0x00049d20
   3a690:	0005f2f0 	.word	0x0005f2f0

0003a694 <Ssd1306::Cls()>:
   3a694:	e92d4800 	push	{fp, lr}
   3a698:	e28db004 	add	fp, sp, #4
   3a69c:	e24dd010 	sub	sp, sp, #16
   3a6a0:	e50b0010 	str	r0, [fp, #-16]
   3a6a4:	e3a03000 	mov	r3, #0
   3a6a8:	e54b3005 	strb	r3, [fp, #-5]
   3a6ac:	e51b3010 	ldr	r3, [fp, #-16]
   3a6b0:	e5d3301c 	ldrb	r3, [r3, #28]
   3a6b4:	e3530000 	cmp	r3, #0
   3a6b8:	0a000001 	beq	3a6c4 <Ssd1306::Cls()+0x30>
   3a6bc:	e3a03004 	mov	r3, #4
   3a6c0:	e54b3005 	strb	r3, [fp, #-5]
   3a6c4:	e3a03000 	mov	r3, #0
   3a6c8:	e50b300c 	str	r3, [fp, #-12]
   3a6cc:	e51b3010 	ldr	r3, [fp, #-16]
   3a6d0:	e5933020 	ldr	r3, [r3, #32]
   3a6d4:	e51b200c 	ldr	r2, [fp, #-12]
   3a6d8:	e1520003 	cmp	r2, r3
   3a6dc:	2a000030 	bcs	3a7a4 <Ssd1306::Cls()+0x110>
   3a6e0:	e55b3005 	ldrb	r3, [fp, #-5]
   3a6e4:	e203300f 	and	r3, r3, #15
   3a6e8:	e6ef3073 	uxtb	r3, r3
   3a6ec:	e1a01003 	mov	r1, r3
   3a6f0:	e51b0010 	ldr	r0, [fp, #-16]
   3a6f4:	eb0001f1 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3a6f8:	e55b3005 	ldrb	r3, [fp, #-5]
   3a6fc:	e3833010 	orr	r3, r3, #16
   3a700:	e6ef3073 	uxtb	r3, r3
   3a704:	e1a01003 	mov	r1, r3
   3a708:	e51b0010 	ldr	r0, [fp, #-16]
   3a70c:	eb0001eb 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3a710:	e51b300c 	ldr	r3, [fp, #-12]
   3a714:	e6ef3073 	uxtb	r3, r3
   3a718:	e1e03003 	mvn	r3, r3
   3a71c:	e203304f 	and	r3, r3, #79	; 0x4f
   3a720:	e1e03003 	mvn	r3, r3
   3a724:	e6ef3073 	uxtb	r3, r3
   3a728:	e1a01003 	mov	r1, r3
   3a72c:	e51b0010 	ldr	r0, [fp, #-16]
   3a730:	eb0001e2 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3a734:	e51b3010 	ldr	r3, [fp, #-16]
   3a738:	e5933018 	ldr	r3, [r3, #24]
   3a73c:	e3530000 	cmp	r3, #0
   3a740:	0a000004 	beq	3a758 <Ssd1306::Cls()+0xc4>
   3a744:	e3530000 	cmp	r3, #0
   3a748:	ba000010 	blt	3a790 <Ssd1306::Cls()+0xfc>
   3a74c:	e3530002 	cmp	r3, #2
   3a750:	ca00000e 	bgt	3a790 <Ssd1306::Cls()+0xfc>
   3a754:	ea000006 	b	3a774 <Ssd1306::Cls()+0xe0>
   3a758:	e55b3005 	ldrb	r3, [fp, #-5]
   3a75c:	e2833081 	add	r3, r3, #129	; 0x81
   3a760:	e1a02003 	mov	r2, r3
   3a764:	e59f10b4 	ldr	r1, [pc, #180]	; 3a820 <Ssd1306::Cls()+0x18c>
   3a768:	e51b0010 	ldr	r0, [fp, #-16]
   3a76c:	eb0001e2 	bl	3aefc <Ssd1306::SendData(unsigned char const*, unsigned int)>
   3a770:	ea000007 	b	3a794 <Ssd1306::Cls()+0x100>
   3a774:	e55b3005 	ldrb	r3, [fp, #-5]
   3a778:	e2833081 	add	r3, r3, #129	; 0x81
   3a77c:	e1a02003 	mov	r2, r3
   3a780:	e59f1098 	ldr	r1, [pc, #152]	; 3a820 <Ssd1306::Cls()+0x18c>
   3a784:	e51b0010 	ldr	r0, [fp, #-16]
   3a788:	eb0001db 	bl	3aefc <Ssd1306::SendData(unsigned char const*, unsigned int)>
   3a78c:	ea000000 	b	3a794 <Ssd1306::Cls()+0x100>
   3a790:	e1a00000 	nop			; (mov r0, r0)
   3a794:	e51b300c 	ldr	r3, [fp, #-12]
   3a798:	e2833001 	add	r3, r3, #1
   3a79c:	e50b300c 	str	r3, [fp, #-12]
   3a7a0:	eaffffc9 	b	3a6cc <Ssd1306::Cls()+0x38>
   3a7a4:	e55b3005 	ldrb	r3, [fp, #-5]
   3a7a8:	e203300f 	and	r3, r3, #15
   3a7ac:	e6ef3073 	uxtb	r3, r3
   3a7b0:	e1a01003 	mov	r1, r3
   3a7b4:	e51b0010 	ldr	r0, [fp, #-16]
   3a7b8:	eb0001c0 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3a7bc:	e55b3005 	ldrb	r3, [fp, #-5]
   3a7c0:	e3833010 	orr	r3, r3, #16
   3a7c4:	e6ef3073 	uxtb	r3, r3
   3a7c8:	e1a01003 	mov	r1, r3
   3a7cc:	e51b0010 	ldr	r0, [fp, #-16]
   3a7d0:	eb0001ba 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3a7d4:	e3a010b0 	mov	r1, #176	; 0xb0
   3a7d8:	e51b0010 	ldr	r0, [fp, #-16]
   3a7dc:	eb0001b7 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3a7e0:	e51b3010 	ldr	r3, [fp, #-16]
   3a7e4:	e3a02000 	mov	r2, #0
   3a7e8:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
   3a7ec:	e51b3010 	ldr	r3, [fp, #-16]
   3a7f0:	e5930028 	ldr	r0, [r3, #40]	; 0x28
   3a7f4:	e51b3010 	ldr	r3, [fp, #-16]
   3a7f8:	e5933004 	ldr	r3, [r3, #4]
   3a7fc:	e51b2010 	ldr	r2, [fp, #-16]
   3a800:	e5922008 	ldr	r2, [r2, #8]
   3a804:	e0030392 	mul	r3, r2, r3
   3a808:	e1a02003 	mov	r2, r3
   3a80c:	e3a01020 	mov	r1, #32
   3a810:	ebff5a95 	bl	1126c <memset@plt>
   3a814:	e1a00000 	nop			; (mov r0, r0)
   3a818:	e24bd004 	sub	sp, fp, #4
   3a81c:	e8bd8800 	pop	{fp, pc}
   3a820:	0005f2f0 	.word	0x0005f2f0

0003a824 <Ssd1306::PutChar(int)>:
   3a824:	e92d4800 	push	{fp, lr}
   3a828:	e28db004 	add	fp, sp, #4
   3a82c:	e24dd010 	sub	sp, sp, #16
   3a830:	e50b0010 	str	r0, [fp, #-16]
   3a834:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   3a838:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3a83c:	e353001f 	cmp	r3, #31
   3a840:	da000002 	ble	3a850 <Ssd1306::PutChar(int)+0x2c>
   3a844:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3a848:	e353007f 	cmp	r3, #127	; 0x7f
   3a84c:	da000004 	ble	3a864 <Ssd1306::PutChar(int)+0x40>
   3a850:	e3a03020 	mov	r3, #32
   3a854:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   3a858:	e3a03000 	mov	r3, #0
   3a85c:	e50b3008 	str	r3, [fp, #-8]
   3a860:	ea000002 	b	3a870 <Ssd1306::PutChar(int)+0x4c>
   3a864:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3a868:	e2433020 	sub	r3, r3, #32
   3a86c:	e50b3008 	str	r3, [fp, #-8]
   3a870:	e51b3010 	ldr	r3, [fp, #-16]
   3a874:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   3a878:	e51b3010 	ldr	r3, [fp, #-16]
   3a87c:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
   3a880:	e2831001 	add	r1, r3, #1
   3a884:	e6ff0071 	uxth	r0, r1
   3a888:	e51b1010 	ldr	r1, [fp, #-16]
   3a88c:	e1c102bc 	strh	r0, [r1, #44]	; 0x2c
   3a890:	e0823003 	add	r3, r2, r3
   3a894:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   3a898:	e6ef2072 	uxtb	r2, r2
   3a89c:	e5c32000 	strb	r2, [r3]
   3a8a0:	e51b2008 	ldr	r2, [fp, #-8]
   3a8a4:	e1a03002 	mov	r3, r2
   3a8a8:	e1a03183 	lsl	r3, r3, #3
   3a8ac:	e0433002 	sub	r3, r3, r2
   3a8b0:	e1a02003 	mov	r2, r3
   3a8b4:	e59f3020 	ldr	r3, [pc, #32]	; 3a8dc <Ssd1306::PutChar(int)+0xb8>
   3a8b8:	e0823003 	add	r3, r2, r3
   3a8bc:	e50b300c 	str	r3, [fp, #-12]
   3a8c0:	e3a02007 	mov	r2, #7
   3a8c4:	e51b100c 	ldr	r1, [fp, #-12]
   3a8c8:	e51b0010 	ldr	r0, [fp, #-16]
   3a8cc:	eb00018a 	bl	3aefc <Ssd1306::SendData(unsigned char const*, unsigned int)>
   3a8d0:	e1a00000 	nop			; (mov r0, r0)
   3a8d4:	e24bd004 	sub	sp, fp, #4
   3a8d8:	e8bd8800 	pop	{fp, pc}
   3a8dc:	00049a68 	.word	0x00049a68

0003a8e0 <Ssd1306::PutString(char const*)>:
   3a8e0:	e92d4800 	push	{fp, lr}
   3a8e4:	e28db004 	add	fp, sp, #4
   3a8e8:	e24dd010 	sub	sp, sp, #16
   3a8ec:	e50b0010 	str	r0, [fp, #-16]
   3a8f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   3a8f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3a8f8:	e50b3008 	str	r3, [fp, #-8]
   3a8fc:	e3a03000 	mov	r3, #0
   3a900:	e50b300c 	str	r3, [fp, #-12]
   3a904:	e51b3008 	ldr	r3, [fp, #-8]
   3a908:	e5d33000 	ldrb	r3, [r3]
   3a90c:	e3530000 	cmp	r3, #0
   3a910:	0a00000b 	beq	3a944 <Ssd1306::PutString(char const*)+0x64>
   3a914:	e51b3008 	ldr	r3, [fp, #-8]
   3a918:	e5d33000 	ldrb	r3, [r3]
   3a91c:	e1a01003 	mov	r1, r3
   3a920:	e51b0010 	ldr	r0, [fp, #-16]
   3a924:	ebffffbe 	bl	3a824 <Ssd1306::PutChar(int)>
   3a928:	e51b3008 	ldr	r3, [fp, #-8]
   3a92c:	e2833001 	add	r3, r3, #1
   3a930:	e50b3008 	str	r3, [fp, #-8]
   3a934:	e51b300c 	ldr	r3, [fp, #-12]
   3a938:	e2833001 	add	r3, r3, #1
   3a93c:	e50b300c 	str	r3, [fp, #-12]
   3a940:	eaffffef 	b	3a904 <Ssd1306::PutString(char const*)+0x24>
   3a944:	e1a00000 	nop			; (mov r0, r0)
   3a948:	e24bd004 	sub	sp, fp, #4
   3a94c:	e8bd8800 	pop	{fp, pc}

0003a950 <Ssd1306::ClearLine(unsigned int)>:
   3a950:	e92d4800 	push	{fp, lr}
   3a954:	e28db004 	add	fp, sp, #4
   3a958:	e24dd008 	sub	sp, sp, #8
   3a95c:	e50b0008 	str	r0, [fp, #-8]
   3a960:	e50b100c 	str	r1, [fp, #-12]
   3a964:	e51b3008 	ldr	r3, [fp, #-8]
   3a968:	e5933008 	ldr	r3, [r3, #8]
   3a96c:	e51b200c 	ldr	r2, [fp, #-12]
   3a970:	e1520003 	cmp	r2, r3
   3a974:	83a03001 	movhi	r3, #1
   3a978:	93a03000 	movls	r3, #0
   3a97c:	e6ef3073 	uxtb	r3, r3
   3a980:	e3530000 	cmp	r3, #0
   3a984:	1a000014 	bne	3a9dc <Ssd1306::ClearLine(unsigned int)+0x8c>
   3a988:	e51b300c 	ldr	r3, [fp, #-12]
   3a98c:	e6ef3073 	uxtb	r3, r3
   3a990:	e2433001 	sub	r3, r3, #1
   3a994:	e6ef3073 	uxtb	r3, r3
   3a998:	e1a02003 	mov	r2, r3
   3a99c:	e3a01000 	mov	r1, #0
   3a9a0:	e51b0008 	ldr	r0, [fp, #-8]
   3a9a4:	eb000052 	bl	3aaf4 <Ssd1306::SetCursorPos(unsigned int, unsigned int)>
   3a9a8:	e3a02081 	mov	r2, #129	; 0x81
   3a9ac:	e59f1034 	ldr	r1, [pc, #52]	; 3a9e8 <Ssd1306::ClearLine(unsigned int)+0x98>
   3a9b0:	e51b0008 	ldr	r0, [fp, #-8]
   3a9b4:	eb000150 	bl	3aefc <Ssd1306::SendData(unsigned char const*, unsigned int)>
   3a9b8:	e51b300c 	ldr	r3, [fp, #-12]
   3a9bc:	e6ef3073 	uxtb	r3, r3
   3a9c0:	e2433001 	sub	r3, r3, #1
   3a9c4:	e6ef3073 	uxtb	r3, r3
   3a9c8:	e1a02003 	mov	r2, r3
   3a9cc:	e3a01000 	mov	r1, #0
   3a9d0:	e51b0008 	ldr	r0, [fp, #-8]
   3a9d4:	eb000046 	bl	3aaf4 <Ssd1306::SetCursorPos(unsigned int, unsigned int)>
   3a9d8:	ea000000 	b	3a9e0 <Ssd1306::ClearLine(unsigned int)+0x90>
   3a9dc:	e1a00000 	nop			; (mov r0, r0)
   3a9e0:	e24bd004 	sub	sp, fp, #4
   3a9e4:	e8bd8800 	pop	{fp, pc}
   3a9e8:	0005f2f0 	.word	0x0005f2f0

0003a9ec <Ssd1306::TextLine(unsigned int, char const*, unsigned int)>:
   3a9ec:	e92d4800 	push	{fp, lr}
   3a9f0:	e28db004 	add	fp, sp, #4
   3a9f4:	e24dd010 	sub	sp, sp, #16
   3a9f8:	e50b0008 	str	r0, [fp, #-8]
   3a9fc:	e50b100c 	str	r1, [fp, #-12]
   3aa00:	e50b2010 	str	r2, [fp, #-16]
   3aa04:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   3aa08:	e51b3008 	ldr	r3, [fp, #-8]
   3aa0c:	e5933008 	ldr	r3, [r3, #8]
   3aa10:	e51b200c 	ldr	r2, [fp, #-12]
   3aa14:	e1520003 	cmp	r2, r3
   3aa18:	83a03001 	movhi	r3, #1
   3aa1c:	93a03000 	movls	r3, #0
   3aa20:	e6ef3073 	uxtb	r3, r3
   3aa24:	e3530000 	cmp	r3, #0
   3aa28:	1a00000c 	bne	3aa60 <Ssd1306::TextLine(unsigned int, char const*, unsigned int)+0x74>
   3aa2c:	e51b300c 	ldr	r3, [fp, #-12]
   3aa30:	e6ef3073 	uxtb	r3, r3
   3aa34:	e2433001 	sub	r3, r3, #1
   3aa38:	e6ef3073 	uxtb	r3, r3
   3aa3c:	e1a02003 	mov	r2, r3
   3aa40:	e3a01000 	mov	r1, #0
   3aa44:	e51b0008 	ldr	r0, [fp, #-8]
   3aa48:	eb000029 	bl	3aaf4 <Ssd1306::SetCursorPos(unsigned int, unsigned int)>
   3aa4c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   3aa50:	e51b1010 	ldr	r1, [fp, #-16]
   3aa54:	e51b0008 	ldr	r0, [fp, #-8]
   3aa58:	eb000003 	bl	3aa6c <Ssd1306::Text(char const*, unsigned int)>
   3aa5c:	ea000000 	b	3aa64 <Ssd1306::TextLine(unsigned int, char const*, unsigned int)+0x78>
   3aa60:	e1a00000 	nop			; (mov r0, r0)
   3aa64:	e24bd004 	sub	sp, fp, #4
   3aa68:	e8bd8800 	pop	{fp, pc}

0003aa6c <Ssd1306::Text(char const*, unsigned int)>:
   3aa6c:	e92d4800 	push	{fp, lr}
   3aa70:	e28db004 	add	fp, sp, #4
   3aa74:	e24dd018 	sub	sp, sp, #24
   3aa78:	e50b0010 	str	r0, [fp, #-16]
   3aa7c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   3aa80:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   3aa84:	e51b3010 	ldr	r3, [fp, #-16]
   3aa88:	e5933004 	ldr	r3, [r3, #4]
   3aa8c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   3aa90:	e1520003 	cmp	r2, r3
   3aa94:	9a000002 	bls	3aaa4 <Ssd1306::Text(char const*, unsigned int)+0x38>
   3aa98:	e51b3010 	ldr	r3, [fp, #-16]
   3aa9c:	e5933004 	ldr	r3, [r3, #4]
   3aaa0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   3aaa4:	e3a03000 	mov	r3, #0
   3aaa8:	e50b3008 	str	r3, [fp, #-8]
   3aaac:	e51b2008 	ldr	r2, [fp, #-8]
   3aab0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3aab4:	e1520003 	cmp	r2, r3
   3aab8:	2a00000a 	bcs	3aae8 <Ssd1306::Text(char const*, unsigned int)+0x7c>
   3aabc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   3aac0:	e51b3008 	ldr	r3, [fp, #-8]
   3aac4:	e0823003 	add	r3, r2, r3
   3aac8:	e5d33000 	ldrb	r3, [r3]
   3aacc:	e1a01003 	mov	r1, r3
   3aad0:	e51b0010 	ldr	r0, [fp, #-16]
   3aad4:	ebffff52 	bl	3a824 <Ssd1306::PutChar(int)>
   3aad8:	e51b3008 	ldr	r3, [fp, #-8]
   3aadc:	e2833001 	add	r3, r3, #1
   3aae0:	e50b3008 	str	r3, [fp, #-8]
   3aae4:	eafffff0 	b	3aaac <Ssd1306::Text(char const*, unsigned int)+0x40>
   3aae8:	e1a00000 	nop			; (mov r0, r0)
   3aaec:	e24bd004 	sub	sp, fp, #4
   3aaf0:	e8bd8800 	pop	{fp, pc}

0003aaf4 <Ssd1306::SetCursorPos(unsigned int, unsigned int)>:
   3aaf4:	e92d4800 	push	{fp, lr}
   3aaf8:	e28db004 	add	fp, sp, #4
   3aafc:	e24dd010 	sub	sp, sp, #16
   3ab00:	e50b0008 	str	r0, [fp, #-8]
   3ab04:	e50b100c 	str	r1, [fp, #-12]
   3ab08:	e50b2010 	str	r2, [fp, #-16]
   3ab0c:	e51b300c 	ldr	r3, [fp, #-12]
   3ab10:	e3530014 	cmp	r3, #20
   3ab14:	83a03001 	movhi	r3, #1
   3ab18:	93a03000 	movls	r3, #0
   3ab1c:	e6ef3073 	uxtb	r3, r3
   3ab20:	e3530000 	cmp	r3, #0
   3ab24:	1a000055 	bne	3ac80 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x18c>
   3ab28:	e51b3008 	ldr	r3, [fp, #-8]
   3ab2c:	e5933008 	ldr	r3, [r3, #8]
   3ab30:	e51b2010 	ldr	r2, [fp, #-16]
   3ab34:	e1520003 	cmp	r2, r3
   3ab38:	23a03001 	movcs	r3, #1
   3ab3c:	33a03000 	movcc	r3, #0
   3ab40:	e6ef3073 	uxtb	r3, r3
   3ab44:	e3530000 	cmp	r3, #0
   3ab48:	1a00004c 	bne	3ac80 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x18c>
   3ab4c:	e51b300c 	ldr	r3, [fp, #-12]
   3ab50:	e6ef3073 	uxtb	r3, r3
   3ab54:	e1a02003 	mov	r2, r3
   3ab58:	e1a02082 	lsl	r2, r2, #1
   3ab5c:	e0823003 	add	r3, r2, r3
   3ab60:	e1a03083 	lsl	r3, r3, #1
   3ab64:	e6ef3073 	uxtb	r3, r3
   3ab68:	e50b300c 	str	r3, [fp, #-12]
   3ab6c:	e51b3008 	ldr	r3, [fp, #-8]
   3ab70:	e5d3301c 	ldrb	r3, [r3, #28]
   3ab74:	e3530000 	cmp	r3, #0
   3ab78:	0a000004 	beq	3ab90 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x9c>
   3ab7c:	e51b300c 	ldr	r3, [fp, #-12]
   3ab80:	e6ef3073 	uxtb	r3, r3
   3ab84:	e2833004 	add	r3, r3, #4
   3ab88:	e6ef3073 	uxtb	r3, r3
   3ab8c:	e50b300c 	str	r3, [fp, #-12]
   3ab90:	e51b300c 	ldr	r3, [fp, #-12]
   3ab94:	e6ef3073 	uxtb	r3, r3
   3ab98:	e203300f 	and	r3, r3, #15
   3ab9c:	e6ef3073 	uxtb	r3, r3
   3aba0:	e1a01003 	mov	r1, r3
   3aba4:	e51b0008 	ldr	r0, [fp, #-8]
   3aba8:	eb0000c4 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3abac:	e51b300c 	ldr	r3, [fp, #-12]
   3abb0:	e1a03223 	lsr	r3, r3, #4
   3abb4:	e6ef3073 	uxtb	r3, r3
   3abb8:	e3833010 	orr	r3, r3, #16
   3abbc:	e6ef3073 	uxtb	r3, r3
   3abc0:	e1a01003 	mov	r1, r3
   3abc4:	e51b0008 	ldr	r0, [fp, #-8]
   3abc8:	eb0000bc 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3abcc:	e51b3010 	ldr	r3, [fp, #-16]
   3abd0:	e6ef3073 	uxtb	r3, r3
   3abd4:	e1e03003 	mvn	r3, r3
   3abd8:	e203304f 	and	r3, r3, #79	; 0x4f
   3abdc:	e1e03003 	mvn	r3, r3
   3abe0:	e6ef3073 	uxtb	r3, r3
   3abe4:	e1a01003 	mov	r1, r3
   3abe8:	e51b0008 	ldr	r0, [fp, #-8]
   3abec:	eb0000b3 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3abf0:	e51b3010 	ldr	r3, [fp, #-16]
   3abf4:	e6ff3073 	uxth	r3, r3
   3abf8:	e1a02003 	mov	r2, r3
   3abfc:	e1a02082 	lsl	r2, r2, #1
   3ac00:	e0823003 	add	r3, r2, r3
   3ac04:	e1a02003 	mov	r2, r3
   3ac08:	e1a02182 	lsl	r2, r2, #3
   3ac0c:	e0423003 	sub	r3, r2, r3
   3ac10:	e6ff2073 	uxth	r2, r3
   3ac14:	e51b300c 	ldr	r3, [fp, #-12]
   3ac18:	e59f106c 	ldr	r1, [pc, #108]	; 3ac8c <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x198>
   3ac1c:	e0831391 	umull	r1, r3, r1, r3
   3ac20:	e1a03123 	lsr	r3, r3, #2
   3ac24:	e6ff3073 	uxth	r3, r3
   3ac28:	e0823003 	add	r3, r2, r3
   3ac2c:	e6ff2073 	uxth	r2, r3
   3ac30:	e51b3008 	ldr	r3, [fp, #-8]
   3ac34:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
   3ac38:	e51b3008 	ldr	r3, [fp, #-8]
   3ac3c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   3ac40:	e3530001 	cmp	r3, #1
   3ac44:	1a000004 	bne	3ac5c <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x168>
   3ac48:	e51b0008 	ldr	r0, [fp, #-8]
   3ac4c:	eb000198 	bl	3b2b4 <Ssd1306::SetCursorOff()>
   3ac50:	e51b0008 	ldr	r0, [fp, #-8]
   3ac54:	eb0000d9 	bl	3afc0 <Ssd1306::SetCursorOn()>
   3ac58:	ea000009 	b	3ac84 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x190>
   3ac5c:	e51b3008 	ldr	r3, [fp, #-8]
   3ac60:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   3ac64:	e3530003 	cmp	r3, #3
   3ac68:	1a000005 	bne	3ac84 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x190>
   3ac6c:	e51b0008 	ldr	r0, [fp, #-8]
   3ac70:	eb00018f 	bl	3b2b4 <Ssd1306::SetCursorOff()>
   3ac74:	e51b0008 	ldr	r0, [fp, #-8]
   3ac78:	eb00012f 	bl	3b13c <Ssd1306::SetCursorBlinkOn()>
   3ac7c:	ea000000 	b	3ac84 <Ssd1306::SetCursorPos(unsigned int, unsigned int)+0x190>
   3ac80:	e1a00000 	nop			; (mov r0, r0)
   3ac84:	e24bd004 	sub	sp, fp, #4
   3ac88:	e8bd8800 	pop	{fp, pc}
   3ac8c:	aaaaaaab 	.word	0xaaaaaaab

0003ac90 <Ssd1306::SetSleep(bool)>:
   3ac90:	e92d4800 	push	{fp, lr}
   3ac94:	e28db004 	add	fp, sp, #4
   3ac98:	e24dd008 	sub	sp, sp, #8
   3ac9c:	e50b0008 	str	r0, [fp, #-8]
   3aca0:	e1a03001 	mov	r3, r1
   3aca4:	e54b3009 	strb	r3, [fp, #-9]
   3aca8:	e55b3009 	ldrb	r3, [fp, #-9]
   3acac:	e3530000 	cmp	r3, #0
   3acb0:	0a000003 	beq	3acc4 <Ssd1306::SetSleep(bool)+0x34>
   3acb4:	e3a010ae 	mov	r1, #174	; 0xae
   3acb8:	e51b0008 	ldr	r0, [fp, #-8]
   3acbc:	eb00007f 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3acc0:	ea000002 	b	3acd0 <Ssd1306::SetSleep(bool)+0x40>
   3acc4:	e3a010af 	mov	r1, #175	; 0xaf
   3acc8:	e51b0008 	ldr	r0, [fp, #-8]
   3accc:	eb00007b 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3acd0:	e1a00000 	nop			; (mov r0, r0)
   3acd4:	e24bd004 	sub	sp, fp, #4
   3acd8:	e8bd8800 	pop	{fp, pc}

0003acdc <Ssd1306::SetContrast(unsigned char)>:
   3acdc:	e92d4800 	push	{fp, lr}
   3ace0:	e28db004 	add	fp, sp, #4
   3ace4:	e24dd008 	sub	sp, sp, #8
   3ace8:	e50b0008 	str	r0, [fp, #-8]
   3acec:	e1a03001 	mov	r3, r1
   3acf0:	e54b3009 	strb	r3, [fp, #-9]
   3acf4:	e51b3008 	ldr	r3, [fp, #-8]
   3acf8:	e55b2009 	ldrb	r2, [fp, #-9]
   3acfc:	e5c3200c 	strb	r2, [r3, #12]
   3ad00:	e3a01081 	mov	r1, #129	; 0x81
   3ad04:	e51b0008 	ldr	r0, [fp, #-8]
   3ad08:	eb00006c 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3ad0c:	e55b3009 	ldrb	r3, [fp, #-9]
   3ad10:	e1a01003 	mov	r1, r3
   3ad14:	e51b0008 	ldr	r0, [fp, #-8]
   3ad18:	eb000068 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3ad1c:	e1a00000 	nop			; (mov r0, r0)
   3ad20:	e24bd004 	sub	sp, fp, #4
   3ad24:	e8bd8800 	pop	{fp, pc}

0003ad28 <Ssd1306::SetFlipVertically(bool)>:
   3ad28:	e92d4800 	push	{fp, lr}
   3ad2c:	e28db004 	add	fp, sp, #4
   3ad30:	e24dd008 	sub	sp, sp, #8
   3ad34:	e50b0008 	str	r0, [fp, #-8]
   3ad38:	e1a03001 	mov	r3, r1
   3ad3c:	e54b3009 	strb	r3, [fp, #-9]
   3ad40:	e51b3008 	ldr	r3, [fp, #-8]
   3ad44:	e55b2009 	ldrb	r2, [fp, #-9]
   3ad48:	e5c3200d 	strb	r2, [r3, #13]
   3ad4c:	e55b3009 	ldrb	r3, [fp, #-9]
   3ad50:	e3530000 	cmp	r3, #0
   3ad54:	0a000006 	beq	3ad74 <Ssd1306::SetFlipVertically(bool)+0x4c>
   3ad58:	e3a010c0 	mov	r1, #192	; 0xc0
   3ad5c:	e51b0008 	ldr	r0, [fp, #-8]
   3ad60:	eb000056 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3ad64:	e3a010a0 	mov	r1, #160	; 0xa0
   3ad68:	e51b0008 	ldr	r0, [fp, #-8]
   3ad6c:	eb000053 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3ad70:	ea000005 	b	3ad8c <Ssd1306::SetFlipVertically(bool)+0x64>
   3ad74:	e3a010c8 	mov	r1, #200	; 0xc8
   3ad78:	e51b0008 	ldr	r0, [fp, #-8]
   3ad7c:	eb00004f 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3ad80:	e3a010a1 	mov	r1, #161	; 0xa1
   3ad84:	e51b0008 	ldr	r0, [fp, #-8]
   3ad88:	eb00004c 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3ad8c:	e1a00000 	nop			; (mov r0, r0)
   3ad90:	e24bd004 	sub	sp, fp, #4
   3ad94:	e8bd8800 	pop	{fp, pc}

0003ad98 <Ssd1306::InitMembers()>:
   3ad98:	e92d4800 	push	{fp, lr}
   3ad9c:	e28db004 	add	fp, sp, #4
   3ada0:	e24dd008 	sub	sp, sp, #8
   3ada4:	e50b0008 	str	r0, [fp, #-8]
   3ada8:	e51b3008 	ldr	r3, [fp, #-8]
   3adac:	e5933018 	ldr	r3, [r3, #24]
   3adb0:	e3530000 	cmp	r3, #0
   3adb4:	0a000004 	beq	3adcc <Ssd1306::InitMembers()+0x34>
   3adb8:	e3530000 	cmp	r3, #0
   3adbc:	ba000010 	blt	3ae04 <Ssd1306::InitMembers()+0x6c>
   3adc0:	e3530002 	cmp	r3, #2
   3adc4:	ca00000e 	bgt	3ae04 <Ssd1306::InitMembers()+0x6c>
   3adc8:	ea000006 	b	3ade8 <Ssd1306::InitMembers()+0x50>
   3adcc:	e51b3008 	ldr	r3, [fp, #-8]
   3add0:	e3a02015 	mov	r2, #21
   3add4:	e5832004 	str	r2, [r3, #4]
   3add8:	e51b3008 	ldr	r3, [fp, #-8]
   3addc:	e3a02008 	mov	r2, #8
   3ade0:	e5832008 	str	r2, [r3, #8]
   3ade4:	ea00000d 	b	3ae20 <Ssd1306::InitMembers()+0x88>
   3ade8:	e51b3008 	ldr	r3, [fp, #-8]
   3adec:	e3a02015 	mov	r2, #21
   3adf0:	e5832004 	str	r2, [r3, #4]
   3adf4:	e51b3008 	ldr	r3, [fp, #-8]
   3adf8:	e3a02004 	mov	r2, #4
   3adfc:	e5832008 	str	r2, [r3, #8]
   3ae00:	ea000006 	b	3ae20 <Ssd1306::InitMembers()+0x88>
   3ae04:	e51b3008 	ldr	r3, [fp, #-8]
   3ae08:	e3a02015 	mov	r2, #21
   3ae0c:	e5832004 	str	r2, [r3, #4]
   3ae10:	e51b3008 	ldr	r3, [fp, #-8]
   3ae14:	e3a02008 	mov	r2, #8
   3ae18:	e5832008 	str	r2, [r3, #8]
   3ae1c:	e1a00000 	nop			; (mov r0, r0)
   3ae20:	e51b3008 	ldr	r3, [fp, #-8]
   3ae24:	e5933018 	ldr	r3, [r3, #24]
   3ae28:	e3530000 	cmp	r3, #0
   3ae2c:	1a000001 	bne	3ae38 <Ssd1306::InitMembers()+0xa0>
   3ae30:	e3a02008 	mov	r2, #8
   3ae34:	ea000000 	b	3ae3c <Ssd1306::InitMembers()+0xa4>
   3ae38:	e3a02004 	mov	r2, #4
   3ae3c:	e51b3008 	ldr	r3, [fp, #-8]
   3ae40:	e5832020 	str	r2, [r3, #32]
   3ae44:	e51b3008 	ldr	r3, [fp, #-8]
   3ae48:	e5932008 	ldr	r2, [r3, #8]
   3ae4c:	e1a03002 	mov	r3, r2
   3ae50:	e1a03083 	lsl	r3, r3, #1
   3ae54:	e0833002 	add	r3, r3, r2
   3ae58:	e1a02183 	lsl	r2, r3, #3
   3ae5c:	e0423003 	sub	r3, r2, r3
   3ae60:	e1a00003 	mov	r0, r3
   3ae64:	ebff590f 	bl	112a8 <operator new[](unsigned int)@plt>
   3ae68:	e1a03000 	mov	r3, r0
   3ae6c:	e1a02003 	mov	r2, r3
   3ae70:	e51b3008 	ldr	r3, [fp, #-8]
   3ae74:	e5832028 	str	r2, [r3, #40]	; 0x28
   3ae78:	e51b3008 	ldr	r3, [fp, #-8]
   3ae7c:	e3a02000 	mov	r2, #0
   3ae80:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
   3ae84:	e51b3008 	ldr	r3, [fp, #-8]
   3ae88:	e5930028 	ldr	r0, [r3, #40]	; 0x28
   3ae8c:	e51b3008 	ldr	r3, [fp, #-8]
   3ae90:	e5932008 	ldr	r2, [r3, #8]
   3ae94:	e1a03002 	mov	r3, r2
   3ae98:	e1a03083 	lsl	r3, r3, #1
   3ae9c:	e0833002 	add	r3, r3, r2
   3aea0:	e1a02183 	lsl	r2, r3, #3
   3aea4:	e0423003 	sub	r3, r2, r3
   3aea8:	e1a02003 	mov	r2, r3
   3aeac:	e3a01020 	mov	r1, #32
   3aeb0:	ebff58ed 	bl	1126c <memset@plt>
   3aeb4:	e1a00000 	nop			; (mov r0, r0)
   3aeb8:	e24bd004 	sub	sp, fp, #4
   3aebc:	e8bd8800 	pop	{fp, pc}

0003aec0 <Ssd1306::SendCommand(unsigned char)>:
   3aec0:	e92d4800 	push	{fp, lr}
   3aec4:	e28db004 	add	fp, sp, #4
   3aec8:	e24dd008 	sub	sp, sp, #8
   3aecc:	e50b0008 	str	r0, [fp, #-8]
   3aed0:	e1a03001 	mov	r3, r1
   3aed4:	e54b3009 	strb	r3, [fp, #-9]
   3aed8:	e51b3008 	ldr	r3, [fp, #-8]
   3aedc:	e2833010 	add	r3, r3, #16
   3aee0:	e55b2009 	ldrb	r2, [fp, #-9]
   3aee4:	e3a01000 	mov	r1, #0
   3aee8:	e1a00003 	mov	r0, r3
   3aeec:	ebfffc0f 	bl	39f30 <HAL_I2C::WriteRegister(unsigned char, unsigned char)>
   3aef0:	e1a00000 	nop			; (mov r0, r0)
   3aef4:	e24bd004 	sub	sp, fp, #4
   3aef8:	e8bd8800 	pop	{fp, pc}

0003aefc <Ssd1306::SendData(unsigned char const*, unsigned int)>:
   3aefc:	e92d4800 	push	{fp, lr}
   3af00:	e28db004 	add	fp, sp, #4
   3af04:	e24dd010 	sub	sp, sp, #16
   3af08:	e50b0008 	str	r0, [fp, #-8]
   3af0c:	e50b100c 	str	r1, [fp, #-12]
   3af10:	e50b2010 	str	r2, [fp, #-16]
   3af14:	e51b3008 	ldr	r3, [fp, #-8]
   3af18:	e2833010 	add	r3, r3, #16
   3af1c:	e51b2010 	ldr	r2, [fp, #-16]
   3af20:	e51b100c 	ldr	r1, [fp, #-12]
   3af24:	e1a00003 	mov	r0, r3
   3af28:	ebfffbf2 	bl	39ef8 <HAL_I2C::Write(char const*, unsigned int)>
   3af2c:	e1a00000 	nop			; (mov r0, r0)
   3af30:	e24bd004 	sub	sp, fp, #4
   3af34:	e8bd8800 	pop	{fp, pc}

0003af38 <Ssd1306::SetCursor(unsigned int)>:
   3af38:	e92d4800 	push	{fp, lr}
   3af3c:	e28db004 	add	fp, sp, #4
   3af40:	e24dd008 	sub	sp, sp, #8
   3af44:	e50b0008 	str	r0, [fp, #-8]
   3af48:	e50b100c 	str	r1, [fp, #-12]
   3af4c:	e51b3008 	ldr	r3, [fp, #-8]
   3af50:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   3af54:	e51b200c 	ldr	r2, [fp, #-12]
   3af58:	e1520003 	cmp	r2, r3
   3af5c:	0a000012 	beq	3afac <Ssd1306::SetCursor(unsigned int)+0x74>
   3af60:	e51b3008 	ldr	r3, [fp, #-8]
   3af64:	e51b200c 	ldr	r2, [fp, #-12]
   3af68:	e5832024 	str	r2, [r3, #36]	; 0x24
   3af6c:	e51b300c 	ldr	r3, [fp, #-12]
   3af70:	e3530001 	cmp	r3, #1
   3af74:	0a000006 	beq	3af94 <Ssd1306::SetCursor(unsigned int)+0x5c>
   3af78:	e3530003 	cmp	r3, #3
   3af7c:	0a000007 	beq	3afa0 <Ssd1306::SetCursor(unsigned int)+0x68>
   3af80:	e3530000 	cmp	r3, #0
   3af84:	1a00000a 	bne	3afb4 <Ssd1306::SetCursor(unsigned int)+0x7c>
   3af88:	e51b0008 	ldr	r0, [fp, #-8]
   3af8c:	eb0000c8 	bl	3b2b4 <Ssd1306::SetCursorOff()>
   3af90:	ea000008 	b	3afb8 <Ssd1306::SetCursor(unsigned int)+0x80>
   3af94:	e51b0008 	ldr	r0, [fp, #-8]
   3af98:	eb000008 	bl	3afc0 <Ssd1306::SetCursorOn()>
   3af9c:	ea000005 	b	3afb8 <Ssd1306::SetCursor(unsigned int)+0x80>
   3afa0:	e51b0008 	ldr	r0, [fp, #-8]
   3afa4:	eb000064 	bl	3b13c <Ssd1306::SetCursorBlinkOn()>
   3afa8:	ea000002 	b	3afb8 <Ssd1306::SetCursor(unsigned int)+0x80>
   3afac:	e1a00000 	nop			; (mov r0, r0)
   3afb0:	ea000000 	b	3afb8 <Ssd1306::SetCursor(unsigned int)+0x80>
   3afb4:	e1a00000 	nop			; (mov r0, r0)
   3afb8:	e24bd004 	sub	sp, fp, #4
   3afbc:	e8bd8800 	pop	{fp, pc}

0003afc0 <Ssd1306::SetCursorOn()>:
   3afc0:	e92d4800 	push	{fp, lr}
   3afc4:	e28db004 	add	fp, sp, #4
   3afc8:	e24dd018 	sub	sp, sp, #24
   3afcc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   3afd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3afd4:	e1d312bc 	ldrh	r1, [r3, #44]	; 0x2c
   3afd8:	e59f3154 	ldr	r3, [pc, #340]	; 3b134 <Ssd1306::SetCursorOn()+0x174>
   3afdc:	e0832193 	umull	r2, r3, r3, r1
   3afe0:	e0412003 	sub	r2, r1, r3
   3afe4:	e1a020a2 	lsr	r2, r2, #1
   3afe8:	e0833002 	add	r3, r3, r2
   3afec:	e1a02223 	lsr	r2, r3, #4
   3aff0:	e1a03002 	mov	r3, r2
   3aff4:	e1a03083 	lsl	r3, r3, #1
   3aff8:	e0833002 	add	r3, r3, r2
   3affc:	e1a02183 	lsl	r2, r3, #3
   3b000:	e0422003 	sub	r2, r2, r3
   3b004:	e0413002 	sub	r3, r1, r2
   3b008:	e6ff3073 	uxth	r3, r3
   3b00c:	e6ef2073 	uxtb	r2, r3
   3b010:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3b014:	e5c3202f 	strb	r2, [r3, #47]	; 0x2f
   3b018:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3b01c:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
   3b020:	e59f310c 	ldr	r3, [pc, #268]	; 3b134 <Ssd1306::SetCursorOn()+0x174>
   3b024:	e0831293 	umull	r1, r3, r3, r2
   3b028:	e0422003 	sub	r2, r2, r3
   3b02c:	e1a020a2 	lsr	r2, r2, #1
   3b030:	e0833002 	add	r3, r3, r2
   3b034:	e1a03223 	lsr	r3, r3, #4
   3b038:	e6ff3073 	uxth	r3, r3
   3b03c:	e6ef2073 	uxtb	r2, r3
   3b040:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3b044:	e5c32030 	strb	r2, [r3, #48]	; 0x30
   3b048:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3b04c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   3b050:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   3b054:	e1d222bc 	ldrh	r2, [r2, #44]	; 0x2c
   3b058:	e0833002 	add	r3, r3, r2
   3b05c:	e5d33000 	ldrb	r3, [r3]
   3b060:	e2433020 	sub	r3, r3, #32
   3b064:	e6ef2073 	uxtb	r2, r3
   3b068:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3b06c:	e5c3202e 	strb	r2, [r3, #46]	; 0x2e
   3b070:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3b074:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
   3b078:	e1a02003 	mov	r2, r3
   3b07c:	e1a03002 	mov	r3, r2
   3b080:	e1a03183 	lsl	r3, r3, #3
   3b084:	e0433002 	sub	r3, r3, r2
   3b088:	e2833001 	add	r3, r3, #1
   3b08c:	e59f20a4 	ldr	r2, [pc, #164]	; 3b138 <Ssd1306::SetCursorOn()+0x178>
   3b090:	e0833002 	add	r3, r3, r2
   3b094:	e50b3008 	str	r3, [fp, #-8]
   3b098:	e3a03040 	mov	r3, #64	; 0x40
   3b09c:	e54b3014 	strb	r3, [fp, #-20]	; 0xffffffec
   3b0a0:	e3a03001 	mov	r3, #1
   3b0a4:	e50b300c 	str	r3, [fp, #-12]
   3b0a8:	e51b300c 	ldr	r3, [fp, #-12]
   3b0ac:	e3530006 	cmp	r3, #6
   3b0b0:	8a000010 	bhi	3b0f8 <Ssd1306::SetCursorOn()+0x138>
   3b0b4:	e51b3008 	ldr	r3, [fp, #-8]
   3b0b8:	e5d33000 	ldrb	r3, [r3]
   3b0bc:	e1e03c83 	mvn	r3, r3, lsl #25
   3b0c0:	e1e03ca3 	mvn	r3, r3, lsr #25
   3b0c4:	e6ef1073 	uxtb	r1, r3
   3b0c8:	e24b2014 	sub	r2, fp, #20
   3b0cc:	e51b300c 	ldr	r3, [fp, #-12]
   3b0d0:	e0823003 	add	r3, r2, r3
   3b0d4:	e1a02001 	mov	r2, r1
   3b0d8:	e5c32000 	strb	r2, [r3]
   3b0dc:	e51b3008 	ldr	r3, [fp, #-8]
   3b0e0:	e2833001 	add	r3, r3, #1
   3b0e4:	e50b3008 	str	r3, [fp, #-8]
   3b0e8:	e51b300c 	ldr	r3, [fp, #-12]
   3b0ec:	e2833001 	add	r3, r3, #1
   3b0f0:	e50b300c 	str	r3, [fp, #-12]
   3b0f4:	eaffffeb 	b	3b0a8 <Ssd1306::SetCursorOn()+0xe8>
   3b0f8:	e24b3014 	sub	r3, fp, #20
   3b0fc:	e3a02007 	mov	r2, #7
   3b100:	e1a01003 	mov	r1, r3
   3b104:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3b108:	ebffff7b 	bl	3aefc <Ssd1306::SendData(unsigned char const*, unsigned int)>
   3b10c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3b110:	e5d3102f 	ldrb	r1, [r3, #47]	; 0x2f
   3b114:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3b118:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
   3b11c:	e1a02003 	mov	r2, r3
   3b120:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3b124:	eb00009f 	bl	3b3a8 <Ssd1306::SetColumnRow(unsigned char, unsigned char)>
   3b128:	e1a00000 	nop			; (mov r0, r0)
   3b12c:	e24bd004 	sub	sp, fp, #4
   3b130:	e8bd8800 	pop	{fp, pc}
   3b134:	86186187 	.word	0x86186187
   3b138:	00049a68 	.word	0x00049a68

0003b13c <Ssd1306::SetCursorBlinkOn()>:
   3b13c:	e92d4800 	push	{fp, lr}
   3b140:	e28db004 	add	fp, sp, #4
   3b144:	e24dd018 	sub	sp, sp, #24
   3b148:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   3b14c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3b150:	e1d312bc 	ldrh	r1, [r3, #44]	; 0x2c
   3b154:	e59f3150 	ldr	r3, [pc, #336]	; 3b2ac <Ssd1306::SetCursorBlinkOn()+0x170>
   3b158:	e0832193 	umull	r2, r3, r3, r1
   3b15c:	e0412003 	sub	r2, r1, r3
   3b160:	e1a020a2 	lsr	r2, r2, #1
   3b164:	e0833002 	add	r3, r3, r2
   3b168:	e1a02223 	lsr	r2, r3, #4
   3b16c:	e1a03002 	mov	r3, r2
   3b170:	e1a03083 	lsl	r3, r3, #1
   3b174:	e0833002 	add	r3, r3, r2
   3b178:	e1a02183 	lsl	r2, r3, #3
   3b17c:	e0422003 	sub	r2, r2, r3
   3b180:	e0413002 	sub	r3, r1, r2
   3b184:	e6ff3073 	uxth	r3, r3
   3b188:	e6ef2073 	uxtb	r2, r3
   3b18c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3b190:	e5c3202f 	strb	r2, [r3, #47]	; 0x2f
   3b194:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3b198:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
   3b19c:	e59f3108 	ldr	r3, [pc, #264]	; 3b2ac <Ssd1306::SetCursorBlinkOn()+0x170>
   3b1a0:	e0831293 	umull	r1, r3, r3, r2
   3b1a4:	e0422003 	sub	r2, r2, r3
   3b1a8:	e1a020a2 	lsr	r2, r2, #1
   3b1ac:	e0833002 	add	r3, r3, r2
   3b1b0:	e1a03223 	lsr	r3, r3, #4
   3b1b4:	e6ff3073 	uxth	r3, r3
   3b1b8:	e6ef2073 	uxtb	r2, r3
   3b1bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3b1c0:	e5c32030 	strb	r2, [r3, #48]	; 0x30
   3b1c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3b1c8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   3b1cc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   3b1d0:	e1d222bc 	ldrh	r2, [r2, #44]	; 0x2c
   3b1d4:	e0833002 	add	r3, r3, r2
   3b1d8:	e5d33000 	ldrb	r3, [r3]
   3b1dc:	e2433020 	sub	r3, r3, #32
   3b1e0:	e6ef2073 	uxtb	r2, r3
   3b1e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3b1e8:	e5c3202e 	strb	r2, [r3, #46]	; 0x2e
   3b1ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3b1f0:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
   3b1f4:	e1a02003 	mov	r2, r3
   3b1f8:	e1a03002 	mov	r3, r2
   3b1fc:	e1a03183 	lsl	r3, r3, #3
   3b200:	e0433002 	sub	r3, r3, r2
   3b204:	e2833001 	add	r3, r3, #1
   3b208:	e59f20a0 	ldr	r2, [pc, #160]	; 3b2b0 <Ssd1306::SetCursorBlinkOn()+0x174>
   3b20c:	e0833002 	add	r3, r3, r2
   3b210:	e50b3008 	str	r3, [fp, #-8]
   3b214:	e3a03040 	mov	r3, #64	; 0x40
   3b218:	e54b3014 	strb	r3, [fp, #-20]	; 0xffffffec
   3b21c:	e3a03001 	mov	r3, #1
   3b220:	e50b300c 	str	r3, [fp, #-12]
   3b224:	e51b300c 	ldr	r3, [fp, #-12]
   3b228:	e3530006 	cmp	r3, #6
   3b22c:	8a00000f 	bhi	3b270 <Ssd1306::SetCursorBlinkOn()+0x134>
   3b230:	e51b3008 	ldr	r3, [fp, #-8]
   3b234:	e5d33000 	ldrb	r3, [r3]
   3b238:	e1e03003 	mvn	r3, r3
   3b23c:	e6ef1073 	uxtb	r1, r3
   3b240:	e24b2014 	sub	r2, fp, #20
   3b244:	e51b300c 	ldr	r3, [fp, #-12]
   3b248:	e0823003 	add	r3, r2, r3
   3b24c:	e1a02001 	mov	r2, r1
   3b250:	e5c32000 	strb	r2, [r3]
   3b254:	e51b3008 	ldr	r3, [fp, #-8]
   3b258:	e2833001 	add	r3, r3, #1
   3b25c:	e50b3008 	str	r3, [fp, #-8]
   3b260:	e51b300c 	ldr	r3, [fp, #-12]
   3b264:	e2833001 	add	r3, r3, #1
   3b268:	e50b300c 	str	r3, [fp, #-12]
   3b26c:	eaffffec 	b	3b224 <Ssd1306::SetCursorBlinkOn()+0xe8>
   3b270:	e24b3014 	sub	r3, fp, #20
   3b274:	e3a02007 	mov	r2, #7
   3b278:	e1a01003 	mov	r1, r3
   3b27c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3b280:	ebffff1d 	bl	3aefc <Ssd1306::SendData(unsigned char const*, unsigned int)>
   3b284:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3b288:	e5d3102f 	ldrb	r1, [r3, #47]	; 0x2f
   3b28c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3b290:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
   3b294:	e1a02003 	mov	r2, r3
   3b298:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3b29c:	eb000041 	bl	3b3a8 <Ssd1306::SetColumnRow(unsigned char, unsigned char)>
   3b2a0:	e1a00000 	nop			; (mov r0, r0)
   3b2a4:	e24bd004 	sub	sp, fp, #4
   3b2a8:	e8bd8800 	pop	{fp, pc}
   3b2ac:	86186187 	.word	0x86186187
   3b2b0:	00049a68 	.word	0x00049a68

0003b2b4 <Ssd1306::SetCursorOff()>:
   3b2b4:	e92d4800 	push	{fp, lr}
   3b2b8:	e28db004 	add	fp, sp, #4
   3b2bc:	e24dd010 	sub	sp, sp, #16
   3b2c0:	e50b0010 	str	r0, [fp, #-16]
   3b2c4:	e51b3010 	ldr	r3, [fp, #-16]
   3b2c8:	e1d312bc 	ldrh	r1, [r3, #44]	; 0x2c
   3b2cc:	e59f30cc 	ldr	r3, [pc, #204]	; 3b3a0 <Ssd1306::SetCursorOff()+0xec>
   3b2d0:	e0832193 	umull	r2, r3, r3, r1
   3b2d4:	e0412003 	sub	r2, r1, r3
   3b2d8:	e1a020a2 	lsr	r2, r2, #1
   3b2dc:	e0833002 	add	r3, r3, r2
   3b2e0:	e1a02223 	lsr	r2, r3, #4
   3b2e4:	e1a03002 	mov	r3, r2
   3b2e8:	e1a03083 	lsl	r3, r3, #1
   3b2ec:	e0833002 	add	r3, r3, r2
   3b2f0:	e1a02183 	lsl	r2, r3, #3
   3b2f4:	e0422003 	sub	r2, r2, r3
   3b2f8:	e0413002 	sub	r3, r1, r2
   3b2fc:	e6ff3073 	uxth	r3, r3
   3b300:	e54b3005 	strb	r3, [fp, #-5]
   3b304:	e51b3010 	ldr	r3, [fp, #-16]
   3b308:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
   3b30c:	e59f308c 	ldr	r3, [pc, #140]	; 3b3a0 <Ssd1306::SetCursorOff()+0xec>
   3b310:	e0831293 	umull	r1, r3, r3, r2
   3b314:	e0422003 	sub	r2, r2, r3
   3b318:	e1a020a2 	lsr	r2, r2, #1
   3b31c:	e0833002 	add	r3, r3, r2
   3b320:	e1a03223 	lsr	r3, r3, #4
   3b324:	e6ff3073 	uxth	r3, r3
   3b328:	e54b3006 	strb	r3, [fp, #-6]
   3b32c:	e51b3010 	ldr	r3, [fp, #-16]
   3b330:	e5d3102f 	ldrb	r1, [r3, #47]	; 0x2f
   3b334:	e51b3010 	ldr	r3, [fp, #-16]
   3b338:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
   3b33c:	e1a02003 	mov	r2, r3
   3b340:	e51b0010 	ldr	r0, [fp, #-16]
   3b344:	eb000017 	bl	3b3a8 <Ssd1306::SetColumnRow(unsigned char, unsigned char)>
   3b348:	e51b3010 	ldr	r3, [fp, #-16]
   3b34c:	e5d3302e 	ldrb	r3, [r3, #46]	; 0x2e
   3b350:	e1a02003 	mov	r2, r3
   3b354:	e1a03002 	mov	r3, r2
   3b358:	e1a03183 	lsl	r3, r3, #3
   3b35c:	e0433002 	sub	r3, r3, r2
   3b360:	e1a02003 	mov	r2, r3
   3b364:	e59f3038 	ldr	r3, [pc, #56]	; 3b3a4 <Ssd1306::SetCursorOff()+0xf0>
   3b368:	e0823003 	add	r3, r2, r3
   3b36c:	e50b300c 	str	r3, [fp, #-12]
   3b370:	e3a02007 	mov	r2, #7
   3b374:	e51b100c 	ldr	r1, [fp, #-12]
   3b378:	e51b0010 	ldr	r0, [fp, #-16]
   3b37c:	ebfffede 	bl	3aefc <Ssd1306::SendData(unsigned char const*, unsigned int)>
   3b380:	e55b2006 	ldrb	r2, [fp, #-6]
   3b384:	e55b3005 	ldrb	r3, [fp, #-5]
   3b388:	e1a01003 	mov	r1, r3
   3b38c:	e51b0010 	ldr	r0, [fp, #-16]
   3b390:	eb000004 	bl	3b3a8 <Ssd1306::SetColumnRow(unsigned char, unsigned char)>
   3b394:	e1a00000 	nop			; (mov r0, r0)
   3b398:	e24bd004 	sub	sp, fp, #4
   3b39c:	e8bd8800 	pop	{fp, pc}
   3b3a0:	86186187 	.word	0x86186187
   3b3a4:	00049a68 	.word	0x00049a68

0003b3a8 <Ssd1306::SetColumnRow(unsigned char, unsigned char)>:
   3b3a8:	e92d4800 	push	{fp, lr}
   3b3ac:	e28db004 	add	fp, sp, #4
   3b3b0:	e24dd010 	sub	sp, sp, #16
   3b3b4:	e50b0010 	str	r0, [fp, #-16]
   3b3b8:	e1a03001 	mov	r3, r1
   3b3bc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   3b3c0:	e1a03002 	mov	r3, r2
   3b3c4:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
   3b3c8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   3b3cc:	e1a02003 	mov	r2, r3
   3b3d0:	e1a02082 	lsl	r2, r2, #1
   3b3d4:	e0823003 	add	r3, r2, r3
   3b3d8:	e1a03083 	lsl	r3, r3, #1
   3b3dc:	e54b3005 	strb	r3, [fp, #-5]
   3b3e0:	e51b3010 	ldr	r3, [fp, #-16]
   3b3e4:	e5d3301c 	ldrb	r3, [r3, #28]
   3b3e8:	e3530000 	cmp	r3, #0
   3b3ec:	0a000002 	beq	3b3fc <Ssd1306::SetColumnRow(unsigned char, unsigned char)+0x54>
   3b3f0:	e55b3005 	ldrb	r3, [fp, #-5]
   3b3f4:	e2833004 	add	r3, r3, #4
   3b3f8:	e54b3005 	strb	r3, [fp, #-5]
   3b3fc:	e55b3005 	ldrb	r3, [fp, #-5]
   3b400:	e203300f 	and	r3, r3, #15
   3b404:	e6ef3073 	uxtb	r3, r3
   3b408:	e1a01003 	mov	r1, r3
   3b40c:	e51b0010 	ldr	r0, [fp, #-16]
   3b410:	ebfffeaa 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3b414:	e55b3005 	ldrb	r3, [fp, #-5]
   3b418:	e1a03243 	asr	r3, r3, #4
   3b41c:	e6ef3073 	uxtb	r3, r3
   3b420:	e3833010 	orr	r3, r3, #16
   3b424:	e6ef3073 	uxtb	r3, r3
   3b428:	e1a01003 	mov	r1, r3
   3b42c:	e51b0010 	ldr	r0, [fp, #-16]
   3b430:	ebfffea2 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3b434:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
   3b438:	e1e03003 	mvn	r3, r3
   3b43c:	e203304f 	and	r3, r3, #79	; 0x4f
   3b440:	e1e03003 	mvn	r3, r3
   3b444:	e6ef3073 	uxtb	r3, r3
   3b448:	e1a01003 	mov	r1, r3
   3b44c:	e51b0010 	ldr	r0, [fp, #-16]
   3b450:	ebfffe9a 	bl	3aec0 <Ssd1306::SendCommand(unsigned char)>
   3b454:	e1a00000 	nop			; (mov r0, r0)
   3b458:	e24bd004 	sub	sp, fp, #4
   3b45c:	e8bd8800 	pop	{fp, pc}

0003b460 <Ssd1306::DumpShadowRam()>:
   3b460:	e92d4800 	push	{fp, lr}
   3b464:	e28db004 	add	fp, sp, #4
   3b468:	e24dd010 	sub	sp, sp, #16
   3b46c:	e50b0010 	str	r0, [fp, #-16]
   3b470:	e3a03000 	mov	r3, #0
   3b474:	e50b3008 	str	r3, [fp, #-8]
   3b478:	e51b3010 	ldr	r3, [fp, #-16]
   3b47c:	e5933008 	ldr	r3, [r3, #8]
   3b480:	e51b2008 	ldr	r2, [fp, #-8]
   3b484:	e1520003 	cmp	r2, r3
   3b488:	2a000010 	bcs	3b4d0 <Ssd1306::DumpShadowRam()+0x70>
   3b48c:	e51b3010 	ldr	r3, [fp, #-16]
   3b490:	e5931028 	ldr	r1, [r3, #40]	; 0x28
   3b494:	e51b2008 	ldr	r2, [fp, #-8]
   3b498:	e1a03002 	mov	r3, r2
   3b49c:	e1a03083 	lsl	r3, r3, #1
   3b4a0:	e0833002 	add	r3, r3, r2
   3b4a4:	e1a02183 	lsl	r2, r3, #3
   3b4a8:	e0423003 	sub	r3, r2, r3
   3b4ac:	e0813003 	add	r3, r1, r3
   3b4b0:	e3a02015 	mov	r2, #21
   3b4b4:	e51b1008 	ldr	r1, [fp, #-8]
   3b4b8:	e59f001c 	ldr	r0, [pc, #28]	; 3b4dc <Ssd1306::DumpShadowRam()+0x7c>
   3b4bc:	ebff574c 	bl	111f4 <printf@plt>
   3b4c0:	e51b3008 	ldr	r3, [fp, #-8]
   3b4c4:	e2833001 	add	r3, r3, #1
   3b4c8:	e50b3008 	str	r3, [fp, #-8]
   3b4cc:	eaffffe9 	b	3b478 <Ssd1306::DumpShadowRam()+0x18>
   3b4d0:	e1a00000 	nop			; (mov r0, r0)
   3b4d4:	e24bd004 	sub	sp, fp, #4
   3b4d8:	e8bd8800 	pop	{fp, pc}
   3b4dc:	00049db4 	.word	0x00049db4

0003b4e0 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>:
   3b4e0:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   3b4e4:	e1d050b6 	ldrh	r5, [r0, #6]
   3b4e8:	e1d060b4 	ldrh	r6, [r0, #4]
   3b4ec:	e59dc018 	ldr	ip, [sp, #24]
   3b4f0:	e1550006 	cmp	r5, r6
   3b4f4:	3a000002 	bcc	3b504 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x24>
   3b4f8:	e3a00000 	mov	r0, #0
   3b4fc:	e28dd008 	add	sp, sp, #8
   3b500:	e8bd8070 	pop	{r4, r5, r6, pc}
   3b504:	e1a0e003 	mov	lr, r3
   3b508:	e1a04000 	mov	r4, r0
   3b50c:	e5900000 	ldr	r0, [r0]
   3b510:	e35e0000 	cmp	lr, #0
   3b514:	e1a03001 	mov	r3, r1
   3b518:	e0800005 	add	r0, r0, r5
   3b51c:	e5d41008 	ldrb	r1, [r4, #8]
   3b520:	e0465005 	sub	r5, r6, r5
   3b524:	1a000005 	bne	3b540 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x60>
   3b528:	e3510000 	cmp	r1, #0
   3b52c:	1a000005 	bne	3b548 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x68>
   3b530:	e58d2004 	str	r2, [sp, #4]
   3b534:	e58dc000 	str	ip, [sp]
   3b538:	e59f2048 	ldr	r2, [pc, #72]	; 3b588 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xa8>
   3b53c:	ea000004 	b	3b554 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x74>
   3b540:	e3510000 	cmp	r1, #0
   3b544:	0a00000b 	beq	3b578 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x98>
   3b548:	e58d2004 	str	r2, [sp, #4]
   3b54c:	e59f2038 	ldr	r2, [pc, #56]	; 3b58c <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xac>
   3b550:	e58dc000 	str	ip, [sp]
   3b554:	e1a01005 	mov	r1, r5
   3b558:	ebff5746 	bl	11278 <snprintf@plt>
   3b55c:	e1550000 	cmp	r5, r0
   3b560:	baffffe4 	blt	3b4f8 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x18>
   3b564:	e1d430b6 	ldrh	r3, [r4, #6]
   3b568:	e0830000 	add	r0, r3, r0
   3b56c:	e1c400b6 	strh	r0, [r4, #6]
   3b570:	e3a00001 	mov	r0, #1
   3b574:	eaffffe0 	b	3b4fc <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x1c>
   3b578:	e58d2004 	str	r2, [sp, #4]
   3b57c:	e58dc000 	str	ip, [sp]
   3b580:	e59f2008 	ldr	r2, [pc, #8]	; 3b590 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xb0>
   3b584:	eafffff2 	b	3b554 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x74>
   3b588:	00049ea7 	.word	0x00049ea7
   3b58c:	00049e9a 	.word	0x00049e9a
   3b590:	00049ea8 	.word	0x00049ea8

0003b594 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
   3b594:	e92d4010 	push	{r4, lr}
   3b598:	e1a04002 	mov	r4, r2
   3b59c:	eb000380 	bl	3c3a4 <Sscan::checkName(char const*, char const*)>
   3b5a0:	e250c000 	subs	ip, r0, #0
   3b5a4:	0a00000e 	beq	3b5e4 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x50>
   3b5a8:	e3a01000 	mov	r1, #0
   3b5ac:	e3a0200a 	mov	r2, #10
   3b5b0:	e5dc3000 	ldrb	r3, [ip]
   3b5b4:	e2430030 	sub	r0, r3, #48	; 0x30
   3b5b8:	e3500009 	cmp	r0, #9
   3b5bc:	8a00000a 	bhi	3b5ec <Sscan::Uint16(char const*, char const*, unsigned short&)+0x58>
   3b5c0:	e0213192 	mla	r1, r2, r1, r3
   3b5c4:	e5fc3001 	ldrb	r3, [ip, #1]!
   3b5c8:	e2411030 	sub	r1, r1, #48	; 0x30
   3b5cc:	e21300df 	ands	r0, r3, #223	; 0xdf
   3b5d0:	1afffff6 	bne	3b5b0 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x1c>
   3b5d4:	e3510801 	cmp	r1, #65536	; 0x10000
   3b5d8:	2a000003 	bcs	3b5ec <Sscan::Uint16(char const*, char const*, unsigned short&)+0x58>
   3b5dc:	e1c410b0 	strh	r1, [r4]
   3b5e0:	e8bd8010 	pop	{r4, pc}
   3b5e4:	e3a00001 	mov	r0, #1
   3b5e8:	e8bd8010 	pop	{r4, pc}
   3b5ec:	e3a00002 	mov	r0, #2
   3b5f0:	e8bd8010 	pop	{r4, pc}

0003b5f4 <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
   3b5f4:	e92d4070 	push	{r4, r5, r6, lr}
   3b5f8:	e1a05002 	mov	r5, r2
   3b5fc:	e1a04003 	mov	r4, r3
   3b600:	eb000367 	bl	3c3a4 <Sscan::checkName(char const*, char const*)>
   3b604:	e3500000 	cmp	r0, #0
   3b608:	0a000011 	beq	3b654 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x60>
   3b60c:	e3a01000 	mov	r1, #0
   3b610:	e7d0c001 	ldrb	ip, [r0, r1]
   3b614:	e6ff3071 	uxth	r3, r1
   3b618:	e5942000 	ldr	r2, [r4]
   3b61c:	e35c0000 	cmp	ip, #0
   3b620:	0a000008 	beq	3b648 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x54>
   3b624:	e1530002 	cmp	r3, r2
   3b628:	3a000003 	bcc	3b63c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x48>
   3b62c:	e35c000a 	cmp	ip, #10
   3b630:	0a000004 	beq	3b648 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x54>
   3b634:	e3a00002 	mov	r0, #2
   3b638:	e8bd8070 	pop	{r4, r5, r6, pc}
   3b63c:	e7c5c001 	strb	ip, [r5, r1]
   3b640:	e2811001 	add	r1, r1, #1
   3b644:	eafffff1 	b	3b610 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x1c>
   3b648:	e5843000 	str	r3, [r4]
   3b64c:	e3a00000 	mov	r0, #0
   3b650:	e8bd8070 	pop	{r4, r5, r6, pc}
   3b654:	e3a00001 	mov	r0, #1
   3b658:	e8bd8070 	pop	{r4, r5, r6, pc}

0003b65c <properties::convert_json_file(char*, unsigned short, bool)>:
   3b65c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3b660:	e28db000 	add	fp, sp, #0
   3b664:	e24dd024 	sub	sp, sp, #36	; 0x24
   3b668:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   3b66c:	e1a03001 	mov	r3, r1
   3b670:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
   3b674:	e1a03002 	mov	r3, r2
   3b678:	e54b3023 	strb	r3, [fp, #-35]	; 0xffffffdd
   3b67c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3b680:	e50b3008 	str	r3, [fp, #-8]
   3b684:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3b688:	e50b300c 	str	r3, [fp, #-12]
   3b68c:	e51b3008 	ldr	r3, [fp, #-8]
   3b690:	e5d33000 	ldrb	r3, [r3]
   3b694:	e353007b 	cmp	r3, #123	; 0x7b
   3b698:	0a000001 	beq	3b6a4 <properties::convert_json_file(char*, unsigned short, bool)+0x48>
   3b69c:	e3e03000 	mvn	r3, #0
   3b6a0:	ea00012d 	b	3bb5c <properties::convert_json_file(char*, unsigned short, bool)+0x500>
   3b6a4:	e3a03001 	mov	r3, #1
   3b6a8:	e50b3010 	str	r3, [fp, #-16]
   3b6ac:	e3a03001 	mov	r3, #1
   3b6b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   3b6b4:	e55b3023 	ldrb	r3, [fp, #-35]	; 0xffffffdd
   3b6b8:	e2233001 	eor	r3, r3, #1
   3b6bc:	e6ef3073 	uxtb	r3, r3
   3b6c0:	e3530000 	cmp	r3, #0
   3b6c4:	0a00004d 	beq	3b800 <properties::convert_json_file(char*, unsigned short, bool)+0x1a4>
   3b6c8:	e51b300c 	ldr	r3, [fp, #-12]
   3b6cc:	e3a02023 	mov	r2, #35	; 0x23
   3b6d0:	e5c32000 	strb	r2, [r3]
   3b6d4:	e51b300c 	ldr	r3, [fp, #-12]
   3b6d8:	e2833001 	add	r3, r3, #1
   3b6dc:	e50b300c 	str	r3, [fp, #-12]
   3b6e0:	e51b3008 	ldr	r3, [fp, #-8]
   3b6e4:	e2833001 	add	r3, r3, #1
   3b6e8:	e50b3008 	str	r3, [fp, #-8]
   3b6ec:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
   3b6f0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   3b6f4:	e1520003 	cmp	r2, r3
   3b6f8:	2a00000e 	bcs	3b738 <properties::convert_json_file(char*, unsigned short, bool)+0xdc>
   3b6fc:	e51b3008 	ldr	r3, [fp, #-8]
   3b700:	e2832001 	add	r2, r3, #1
   3b704:	e50b2008 	str	r2, [fp, #-8]
   3b708:	e5d33000 	ldrb	r3, [r3]
   3b70c:	e3530022 	cmp	r3, #34	; 0x22
   3b710:	03a03001 	moveq	r3, #1
   3b714:	13a03000 	movne	r3, #0
   3b718:	e6ef3073 	uxtb	r3, r3
   3b71c:	e3530000 	cmp	r3, #0
   3b720:	1a000003 	bne	3b734 <properties::convert_json_file(char*, unsigned short, bool)+0xd8>
   3b724:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3b728:	e2833001 	add	r3, r3, #1
   3b72c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   3b730:	eaffffed 	b	3b6ec <properties::convert_json_file(char*, unsigned short, bool)+0x90>
   3b734:	e1a00000 	nop			; (mov r0, r0)
   3b738:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
   3b73c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   3b740:	e1520003 	cmp	r2, r3
   3b744:	2a000012 	bcs	3b794 <properties::convert_json_file(char*, unsigned short, bool)+0x138>
   3b748:	e51b3008 	ldr	r3, [fp, #-8]
   3b74c:	e5d33000 	ldrb	r3, [r3]
   3b750:	e3530022 	cmp	r3, #34	; 0x22
   3b754:	0a00000e 	beq	3b794 <properties::convert_json_file(char*, unsigned short, bool)+0x138>
   3b758:	e51b2008 	ldr	r2, [fp, #-8]
   3b75c:	e2823001 	add	r3, r2, #1
   3b760:	e50b3008 	str	r3, [fp, #-8]
   3b764:	e51b300c 	ldr	r3, [fp, #-12]
   3b768:	e2831001 	add	r1, r3, #1
   3b76c:	e50b100c 	str	r1, [fp, #-12]
   3b770:	e5d22000 	ldrb	r2, [r2]
   3b774:	e5c32000 	strb	r2, [r3]
   3b778:	e51b3010 	ldr	r3, [fp, #-16]
   3b77c:	e2833001 	add	r3, r3, #1
   3b780:	e50b3010 	str	r3, [fp, #-16]
   3b784:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3b788:	e2833001 	add	r3, r3, #1
   3b78c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   3b790:	eaffffe8 	b	3b738 <properties::convert_json_file(char*, unsigned short, bool)+0xdc>
   3b794:	e51b300c 	ldr	r3, [fp, #-12]
   3b798:	e2832001 	add	r2, r3, #1
   3b79c:	e50b200c 	str	r2, [fp, #-12]
   3b7a0:	e3a0200a 	mov	r2, #10
   3b7a4:	e5c32000 	strb	r2, [r3]
   3b7a8:	e51b3010 	ldr	r3, [fp, #-16]
   3b7ac:	e2833001 	add	r3, r3, #1
   3b7b0:	e50b3010 	str	r3, [fp, #-16]
   3b7b4:	e51b3008 	ldr	r3, [fp, #-8]
   3b7b8:	e5d33000 	ldrb	r3, [r3]
   3b7bc:	e353007b 	cmp	r3, #123	; 0x7b
   3b7c0:	0a000007 	beq	3b7e4 <properties::convert_json_file(char*, unsigned short, bool)+0x188>
   3b7c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3b7c8:	e2832001 	add	r2, r3, #1
   3b7cc:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   3b7d0:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
   3b7d4:	e1530002 	cmp	r3, r2
   3b7d8:	2a000001 	bcs	3b7e4 <properties::convert_json_file(char*, unsigned short, bool)+0x188>
   3b7dc:	e3a03001 	mov	r3, #1
   3b7e0:	ea000000 	b	3b7e8 <properties::convert_json_file(char*, unsigned short, bool)+0x18c>
   3b7e4:	e3a03000 	mov	r3, #0
   3b7e8:	e3530000 	cmp	r3, #0
   3b7ec:	0a000016 	beq	3b84c <properties::convert_json_file(char*, unsigned short, bool)+0x1f0>
   3b7f0:	e51b3008 	ldr	r3, [fp, #-8]
   3b7f4:	e2833001 	add	r3, r3, #1
   3b7f8:	e50b3008 	str	r3, [fp, #-8]
   3b7fc:	eaffffec 	b	3b7b4 <properties::convert_json_file(char*, unsigned short, bool)+0x158>
   3b800:	e51b3008 	ldr	r3, [fp, #-8]
   3b804:	e5d33000 	ldrb	r3, [r3]
   3b808:	e353007b 	cmp	r3, #123	; 0x7b
   3b80c:	0a000007 	beq	3b830 <properties::convert_json_file(char*, unsigned short, bool)+0x1d4>
   3b810:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3b814:	e2832001 	add	r2, r3, #1
   3b818:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   3b81c:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
   3b820:	e1530002 	cmp	r3, r2
   3b824:	2a000001 	bcs	3b830 <properties::convert_json_file(char*, unsigned short, bool)+0x1d4>
   3b828:	e3a03001 	mov	r3, #1
   3b82c:	ea000000 	b	3b834 <properties::convert_json_file(char*, unsigned short, bool)+0x1d8>
   3b830:	e3a03000 	mov	r3, #0
   3b834:	e3530000 	cmp	r3, #0
   3b838:	0a000003 	beq	3b84c <properties::convert_json_file(char*, unsigned short, bool)+0x1f0>
   3b83c:	e51b3008 	ldr	r3, [fp, #-8]
   3b840:	e2833001 	add	r3, r3, #1
   3b844:	e50b3008 	str	r3, [fp, #-8]
   3b848:	eaffffec 	b	3b800 <properties::convert_json_file(char*, unsigned short, bool)+0x1a4>
   3b84c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
   3b850:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   3b854:	e1520003 	cmp	r2, r3
   3b858:	2a0000be 	bcs	3bb58 <properties::convert_json_file(char*, unsigned short, bool)+0x4fc>
   3b85c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3b860:	e2832001 	add	r2, r3, #1
   3b864:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   3b868:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
   3b86c:	e1530002 	cmp	r3, r2
   3b870:	33a03001 	movcc	r3, #1
   3b874:	23a03000 	movcs	r3, #0
   3b878:	e6ef3073 	uxtb	r3, r3
   3b87c:	e3530000 	cmp	r3, #0
   3b880:	0a00000b 	beq	3b8b4 <properties::convert_json_file(char*, unsigned short, bool)+0x258>
   3b884:	e51b3008 	ldr	r3, [fp, #-8]
   3b888:	e2832001 	add	r2, r3, #1
   3b88c:	e50b2008 	str	r2, [fp, #-8]
   3b890:	e5d33000 	ldrb	r3, [r3]
   3b894:	e3530022 	cmp	r3, #34	; 0x22
   3b898:	03a03001 	moveq	r3, #1
   3b89c:	13a03000 	movne	r3, #0
   3b8a0:	e6ef3073 	uxtb	r3, r3
   3b8a4:	e3530000 	cmp	r3, #0
   3b8a8:	1a000000 	bne	3b8b0 <properties::convert_json_file(char*, unsigned short, bool)+0x254>
   3b8ac:	eaffffea 	b	3b85c <properties::convert_json_file(char*, unsigned short, bool)+0x200>
   3b8b0:	e1a00000 	nop			; (mov r0, r0)
   3b8b4:	e51b3008 	ldr	r3, [fp, #-8]
   3b8b8:	e5d33000 	ldrb	r3, [r3]
   3b8bc:	e3530022 	cmp	r3, #34	; 0x22
   3b8c0:	0a000007 	beq	3b8e4 <properties::convert_json_file(char*, unsigned short, bool)+0x288>
   3b8c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3b8c8:	e2832001 	add	r2, r3, #1
   3b8cc:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   3b8d0:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
   3b8d4:	e1530002 	cmp	r3, r2
   3b8d8:	2a000001 	bcs	3b8e4 <properties::convert_json_file(char*, unsigned short, bool)+0x288>
   3b8dc:	e3a03001 	mov	r3, #1
   3b8e0:	ea000000 	b	3b8e8 <properties::convert_json_file(char*, unsigned short, bool)+0x28c>
   3b8e4:	e3a03000 	mov	r3, #0
   3b8e8:	e3530000 	cmp	r3, #0
   3b8ec:	0a00000b 	beq	3b920 <properties::convert_json_file(char*, unsigned short, bool)+0x2c4>
   3b8f0:	e51b2008 	ldr	r2, [fp, #-8]
   3b8f4:	e2823001 	add	r3, r2, #1
   3b8f8:	e50b3008 	str	r3, [fp, #-8]
   3b8fc:	e51b300c 	ldr	r3, [fp, #-12]
   3b900:	e2831001 	add	r1, r3, #1
   3b904:	e50b100c 	str	r1, [fp, #-12]
   3b908:	e5d22000 	ldrb	r2, [r2]
   3b90c:	e5c32000 	strb	r2, [r3]
   3b910:	e51b3010 	ldr	r3, [fp, #-16]
   3b914:	e2833001 	add	r3, r3, #1
   3b918:	e50b3010 	str	r3, [fp, #-16]
   3b91c:	eaffffe4 	b	3b8b4 <properties::convert_json_file(char*, unsigned short, bool)+0x258>
   3b920:	e51b3008 	ldr	r3, [fp, #-8]
   3b924:	e5d33000 	ldrb	r3, [r3]
   3b928:	e3530022 	cmp	r3, #34	; 0x22
   3b92c:	1a000007 	bne	3b950 <properties::convert_json_file(char*, unsigned short, bool)+0x2f4>
   3b930:	e51b300c 	ldr	r3, [fp, #-12]
   3b934:	e2832001 	add	r2, r3, #1
   3b938:	e50b200c 	str	r2, [fp, #-12]
   3b93c:	e3a0203d 	mov	r2, #61	; 0x3d
   3b940:	e5c32000 	strb	r2, [r3]
   3b944:	e51b3010 	ldr	r3, [fp, #-16]
   3b948:	e2833001 	add	r3, r3, #1
   3b94c:	e50b3010 	str	r3, [fp, #-16]
   3b950:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3b954:	e2832001 	add	r2, r3, #1
   3b958:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   3b95c:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
   3b960:	e1530002 	cmp	r3, r2
   3b964:	33a03001 	movcc	r3, #1
   3b968:	23a03000 	movcs	r3, #0
   3b96c:	e6ef3073 	uxtb	r3, r3
   3b970:	e3530000 	cmp	r3, #0
   3b974:	0a00000b 	beq	3b9a8 <properties::convert_json_file(char*, unsigned short, bool)+0x34c>
   3b978:	e51b3008 	ldr	r3, [fp, #-8]
   3b97c:	e2832001 	add	r2, r3, #1
   3b980:	e50b2008 	str	r2, [fp, #-8]
   3b984:	e5d33000 	ldrb	r3, [r3]
   3b988:	e353003a 	cmp	r3, #58	; 0x3a
   3b98c:	03a03001 	moveq	r3, #1
   3b990:	13a03000 	movne	r3, #0
   3b994:	e6ef3073 	uxtb	r3, r3
   3b998:	e3530000 	cmp	r3, #0
   3b99c:	1a000000 	bne	3b9a4 <properties::convert_json_file(char*, unsigned short, bool)+0x348>
   3b9a0:	eaffffea 	b	3b950 <properties::convert_json_file(char*, unsigned short, bool)+0x2f4>
   3b9a4:	e1a00000 	nop			; (mov r0, r0)
   3b9a8:	e51b3008 	ldr	r3, [fp, #-8]
   3b9ac:	e5d33000 	ldrb	r3, [r3]
   3b9b0:	e353002f 	cmp	r3, #47	; 0x2f
   3b9b4:	8a000007 	bhi	3b9d8 <properties::convert_json_file(char*, unsigned short, bool)+0x37c>
   3b9b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3b9bc:	e2832001 	add	r2, r3, #1
   3b9c0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   3b9c4:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
   3b9c8:	e1530002 	cmp	r3, r2
   3b9cc:	2a000001 	bcs	3b9d8 <properties::convert_json_file(char*, unsigned short, bool)+0x37c>
   3b9d0:	e3a03001 	mov	r3, #1
   3b9d4:	ea000000 	b	3b9dc <properties::convert_json_file(char*, unsigned short, bool)+0x380>
   3b9d8:	e3a03000 	mov	r3, #0
   3b9dc:	e3530000 	cmp	r3, #0
   3b9e0:	0a000003 	beq	3b9f4 <properties::convert_json_file(char*, unsigned short, bool)+0x398>
   3b9e4:	e51b3008 	ldr	r3, [fp, #-8]
   3b9e8:	e2833001 	add	r3, r3, #1
   3b9ec:	e50b3008 	str	r3, [fp, #-8]
   3b9f0:	eaffffec 	b	3b9a8 <properties::convert_json_file(char*, unsigned short, bool)+0x34c>
   3b9f4:	e51b3008 	ldr	r3, [fp, #-8]
   3b9f8:	e5d33000 	ldrb	r3, [r3]
   3b9fc:	e3530022 	cmp	r3, #34	; 0x22
   3ba00:	1a000002 	bne	3ba10 <properties::convert_json_file(char*, unsigned short, bool)+0x3b4>
   3ba04:	e51b3008 	ldr	r3, [fp, #-8]
   3ba08:	e2833001 	add	r3, r3, #1
   3ba0c:	e50b3008 	str	r3, [fp, #-8]
   3ba10:	e51b3008 	ldr	r3, [fp, #-8]
   3ba14:	e5d33000 	ldrb	r3, [r3]
   3ba18:	e3530022 	cmp	r3, #34	; 0x22
   3ba1c:	0a00000f 	beq	3ba60 <properties::convert_json_file(char*, unsigned short, bool)+0x404>
   3ba20:	e51b3008 	ldr	r3, [fp, #-8]
   3ba24:	e5d33000 	ldrb	r3, [r3]
   3ba28:	e353002c 	cmp	r3, #44	; 0x2c
   3ba2c:	0a00000b 	beq	3ba60 <properties::convert_json_file(char*, unsigned short, bool)+0x404>
   3ba30:	e51b3008 	ldr	r3, [fp, #-8]
   3ba34:	e5d33000 	ldrb	r3, [r3]
   3ba38:	e353007d 	cmp	r3, #125	; 0x7d
   3ba3c:	0a000007 	beq	3ba60 <properties::convert_json_file(char*, unsigned short, bool)+0x404>
   3ba40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3ba44:	e2832001 	add	r2, r3, #1
   3ba48:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   3ba4c:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
   3ba50:	e1530002 	cmp	r3, r2
   3ba54:	2a000001 	bcs	3ba60 <properties::convert_json_file(char*, unsigned short, bool)+0x404>
   3ba58:	e3a03001 	mov	r3, #1
   3ba5c:	ea000000 	b	3ba64 <properties::convert_json_file(char*, unsigned short, bool)+0x408>
   3ba60:	e3a03000 	mov	r3, #0
   3ba64:	e3530000 	cmp	r3, #0
   3ba68:	0a000014 	beq	3bac0 <properties::convert_json_file(char*, unsigned short, bool)+0x464>
   3ba6c:	e51b3008 	ldr	r3, [fp, #-8]
   3ba70:	e5d33000 	ldrb	r3, [r3]
   3ba74:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   3ba78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3ba7c:	e353001f 	cmp	r3, #31
   3ba80:	daffffe2 	ble	3ba10 <properties::convert_json_file(char*, unsigned short, bool)+0x3b4>
   3ba84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3ba88:	e353007a 	cmp	r3, #122	; 0x7a
   3ba8c:	caffffdf 	bgt	3ba10 <properties::convert_json_file(char*, unsigned short, bool)+0x3b4>
   3ba90:	e51b2008 	ldr	r2, [fp, #-8]
   3ba94:	e2823001 	add	r3, r2, #1
   3ba98:	e50b3008 	str	r3, [fp, #-8]
   3ba9c:	e51b300c 	ldr	r3, [fp, #-12]
   3baa0:	e2831001 	add	r1, r3, #1
   3baa4:	e50b100c 	str	r1, [fp, #-12]
   3baa8:	e5d22000 	ldrb	r2, [r2]
   3baac:	e5c32000 	strb	r2, [r3]
   3bab0:	e51b3010 	ldr	r3, [fp, #-16]
   3bab4:	e2833001 	add	r3, r3, #1
   3bab8:	e50b3010 	str	r3, [fp, #-16]
   3babc:	eaffffd3 	b	3ba10 <properties::convert_json_file(char*, unsigned short, bool)+0x3b4>
   3bac0:	e51b3008 	ldr	r3, [fp, #-8]
   3bac4:	e5d33000 	ldrb	r3, [r3]
   3bac8:	e3530022 	cmp	r3, #34	; 0x22
   3bacc:	0a000007 	beq	3baf0 <properties::convert_json_file(char*, unsigned short, bool)+0x494>
   3bad0:	e51b3008 	ldr	r3, [fp, #-8]
   3bad4:	e5d33000 	ldrb	r3, [r3]
   3bad8:	e353002c 	cmp	r3, #44	; 0x2c
   3badc:	0a000003 	beq	3baf0 <properties::convert_json_file(char*, unsigned short, bool)+0x494>
   3bae0:	e51b3008 	ldr	r3, [fp, #-8]
   3bae4:	e5d33000 	ldrb	r3, [r3]
   3bae8:	e353007d 	cmp	r3, #125	; 0x7d
   3baec:	1a000012 	bne	3bb3c <properties::convert_json_file(char*, unsigned short, bool)+0x4e0>
   3baf0:	e55b3023 	ldrb	r3, [fp, #-35]	; 0xffffffdd
   3baf4:	e2233001 	eor	r3, r3, #1
   3baf8:	e6ef3073 	uxtb	r3, r3
   3bafc:	e3530000 	cmp	r3, #0
   3bb00:	0a000005 	beq	3bb1c <properties::convert_json_file(char*, unsigned short, bool)+0x4c0>
   3bb04:	e51b300c 	ldr	r3, [fp, #-12]
   3bb08:	e2832001 	add	r2, r3, #1
   3bb0c:	e50b200c 	str	r2, [fp, #-12]
   3bb10:	e3a0200a 	mov	r2, #10
   3bb14:	e5c32000 	strb	r2, [r3]
   3bb18:	ea000004 	b	3bb30 <properties::convert_json_file(char*, unsigned short, bool)+0x4d4>
   3bb1c:	e51b300c 	ldr	r3, [fp, #-12]
   3bb20:	e2832001 	add	r2, r3, #1
   3bb24:	e50b200c 	str	r2, [fp, #-12]
   3bb28:	e3a02000 	mov	r2, #0
   3bb2c:	e5c32000 	strb	r2, [r3]
   3bb30:	e51b3010 	ldr	r3, [fp, #-16]
   3bb34:	e2833001 	add	r3, r3, #1
   3bb38:	e50b3010 	str	r3, [fp, #-16]
   3bb3c:	e51b3008 	ldr	r3, [fp, #-8]
   3bb40:	e2833001 	add	r3, r3, #1
   3bb44:	e50b3008 	str	r3, [fp, #-8]
   3bb48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3bb4c:	e2833001 	add	r3, r3, #1
   3bb50:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   3bb54:	eaffff3c 	b	3b84c <properties::convert_json_file(char*, unsigned short, bool)+0x1f0>
   3bb58:	e51b3010 	ldr	r3, [fp, #-16]
   3bb5c:	e1a00003 	mov	r0, r3
   3bb60:	e28bd000 	add	sp, fp, #0
   3bb64:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3bb68:	e12fff1e 	bx	lr

0003bb6c <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
   3bb6c:	e92d4073 	push	{r0, r1, r4, r5, r6, lr}
   3bb70:	e1a04002 	mov	r4, r2
   3bb74:	eb00020a 	bl	3c3a4 <Sscan::checkName(char const*, char const*)>
   3bb78:	e3500000 	cmp	r0, #0
   3bb7c:	03a00001 	moveq	r0, #1
   3bb80:	0a00000d 	beq	3bbbc <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x50>
   3bb84:	e3a02000 	mov	r2, #0
   3bb88:	e3a0500a 	mov	r5, #10
   3bb8c:	e28de004 	add	lr, sp, #4
   3bb90:	e1a03000 	mov	r3, r0
   3bb94:	e2806004 	add	r6, r0, #4
   3bb98:	e3a01000 	mov	r1, #0
   3bb9c:	e1a00003 	mov	r0, r3
   3bba0:	e4d0c001 	ldrb	ip, [r0], #1
   3bba4:	e35c0000 	cmp	ip, #0
   3bba8:	135c002e 	cmpne	ip, #46	; 0x2e
   3bbac:	0a00000b 	beq	3bbe0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x74>
   3bbb0:	e1500006 	cmp	r0, r6
   3bbb4:	1a000002 	bne	3bbc4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x58>
   3bbb8:	e3a00002 	mov	r0, #2
   3bbbc:	e28dd008 	add	sp, sp, #8
   3bbc0:	e8bd8070 	pop	{r4, r5, r6, pc}
   3bbc4:	e24c3030 	sub	r3, ip, #48	; 0x30
   3bbc8:	e3530009 	cmp	r3, #9
   3bbcc:	8afffff9 	bhi	3bbb8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x4c>
   3bbd0:	e021c195 	mla	r1, r5, r1, ip
   3bbd4:	e1a03000 	mov	r3, r0
   3bbd8:	e2411030 	sub	r1, r1, #48	; 0x30
   3bbdc:	eaffffee 	b	3bb9c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x30>
   3bbe0:	e35100ff 	cmp	r1, #255	; 0xff
   3bbe4:	8afffff3 	bhi	3bbb8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x4c>
   3bbe8:	e7c2100e 	strb	r1, [r2, lr]
   3bbec:	e2822001 	add	r2, r2, #1
   3bbf0:	e3520003 	cmp	r2, #3
   3bbf4:	1affffe5 	bne	3bb90 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x24>
   3bbf8:	e283e004 	add	lr, r3, #4
   3bbfc:	e3a0c000 	mov	ip, #0
   3bc00:	e3a0200a 	mov	r2, #10
   3bc04:	e5f31001 	ldrb	r1, [r3, #1]!
   3bc08:	e21100df 	ands	r0, r1, #223	; 0xdf
   3bc0c:	0a000006 	beq	3bc2c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xc0>
   3bc10:	e153000e 	cmp	r3, lr
   3bc14:	0affffe7 	beq	3bbb8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x4c>
   3bc18:	e2411030 	sub	r1, r1, #48	; 0x30
   3bc1c:	e3510009 	cmp	r1, #9
   3bc20:	8affffe4 	bhi	3bbb8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x4c>
   3bc24:	e02c1c92 	mla	ip, r2, ip, r1
   3bc28:	eafffff5 	b	3bc04 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x98>
   3bc2c:	e35c00ff 	cmp	ip, #255	; 0xff
   3bc30:	95cdc007 	strbls	ip, [sp, #7]
   3bc34:	959d3004 	ldrls	r3, [sp, #4]
   3bc38:	95843000 	strls	r3, [r4]
   3bc3c:	9affffde 	bls	3bbbc <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x50>
   3bc40:	eaffffdc 	b	3bbb8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x4c>

0003bc44 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
   3bc44:	e92d4010 	push	{r4, lr}
   3bc48:	e1a04002 	mov	r4, r2
   3bc4c:	eb0001d4 	bl	3c3a4 <Sscan::checkName(char const*, char const*)>
   3bc50:	e250c000 	subs	ip, r0, #0
   3bc54:	0a00000e 	beq	3bc94 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x50>
   3bc58:	e3a01000 	mov	r1, #0
   3bc5c:	e3a0200a 	mov	r2, #10
   3bc60:	e5dc3000 	ldrb	r3, [ip]
   3bc64:	e2430030 	sub	r0, r3, #48	; 0x30
   3bc68:	e3500009 	cmp	r0, #9
   3bc6c:	8a00000a 	bhi	3bc9c <Sscan::Uint8(char const*, char const*, unsigned char&)+0x58>
   3bc70:	e0213192 	mla	r1, r2, r1, r3
   3bc74:	e5fc3001 	ldrb	r3, [ip, #1]!
   3bc78:	e2411030 	sub	r1, r1, #48	; 0x30
   3bc7c:	e21300df 	ands	r0, r3, #223	; 0xdf
   3bc80:	1afffff6 	bne	3bc60 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x1c>
   3bc84:	e35100ff 	cmp	r1, #255	; 0xff
   3bc88:	8a000003 	bhi	3bc9c <Sscan::Uint8(char const*, char const*, unsigned char&)+0x58>
   3bc8c:	e5c41000 	strb	r1, [r4]
   3bc90:	e8bd8010 	pop	{r4, pc}
   3bc94:	e3a00001 	mov	r0, #1
   3bc98:	e8bd8010 	pop	{r4, pc}
   3bc9c:	e3a00002 	mov	r0, #2
   3bca0:	e8bd8010 	pop	{r4, pc}

0003bca4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
   3bca4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3bca8:	e1a07003 	mov	r7, r3
   3bcac:	e1c030b4 	strh	r3, [r0, #4]
   3bcb0:	e3a03000 	mov	r3, #0
   3bcb4:	e5802000 	str	r2, [r0]
   3bcb8:	e1c030b6 	strh	r3, [r0, #6]
   3bcbc:	e1a08001 	mov	r8, r1
   3bcc0:	e1a06000 	mov	r6, r0
   3bcc4:	e1a04002 	mov	r4, r2
   3bcc8:	ebff82f7 	bl	1c8ac <PropertiesConfig::IsJSON()>
   3bccc:	e6ff7077 	uxth	r7, r7
   3bcd0:	e1a09000 	mov	r9, r0
   3bcd4:	e5c60008 	strb	r0, [r6, #8]
   3bcd8:	e1a00008 	mov	r0, r8
   3bcdc:	ebff55d1 	bl	11428 <strlen@plt>
   3bce0:	e3590000 	cmp	r9, #0
   3bce4:	e1a05000 	mov	r5, r0
   3bce8:	0a000013 	beq	3bd3c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x98>
   3bcec:	e2809004 	add	r9, r0, #4
   3bcf0:	e1590007 	cmp	r9, r7
   3bcf4:	8a00000e 	bhi	3bd34 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x90>
   3bcf8:	e3a0707b 	mov	r7, #123	; 0x7b
   3bcfc:	e3a0a022 	mov	sl, #34	; 0x22
   3bd00:	e1a02000 	mov	r2, r0
   3bd04:	e5c47000 	strb	r7, [r4]
   3bd08:	e5c4a001 	strb	sl, [r4, #1]
   3bd0c:	e2840002 	add	r0, r4, #2
   3bd10:	e1a01008 	mov	r1, r8
   3bd14:	ebff55ba 	bl	11404 <memcpy@plt>
   3bd18:	e0843005 	add	r3, r4, r5
   3bd1c:	e3a0203a 	mov	r2, #58	; 0x3a
   3bd20:	e5c3a002 	strb	sl, [r3, #2]
   3bd24:	e5c32003 	strb	r2, [r3, #3]
   3bd28:	e7c47009 	strb	r7, [r4, r9]
   3bd2c:	e2854005 	add	r4, r5, #5
   3bd30:	e1c640b6 	strh	r4, [r6, #6]
   3bd34:	e1a00006 	mov	r0, r6
   3bd38:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3bd3c:	e2809002 	add	r9, r0, #2
   3bd40:	e1590007 	cmp	r9, r7
   3bd44:	8afffffa 	bhi	3bd34 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x90>
   3bd48:	e1a00004 	mov	r0, r4
   3bd4c:	e3a03023 	mov	r3, #35	; 0x23
   3bd50:	e4c03001 	strb	r3, [r0], #1
   3bd54:	e1a02005 	mov	r2, r5
   3bd58:	e1a01008 	mov	r1, r8
   3bd5c:	e0844005 	add	r4, r4, r5
   3bd60:	ebff55a7 	bl	11404 <memcpy@plt>
   3bd64:	e3a0300a 	mov	r3, #10
   3bd68:	e5c43001 	strb	r3, [r4, #1]
   3bd6c:	e1c690b6 	strh	r9, [r6, #6]
   3bd70:	eaffffef 	b	3bd34 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x90>

0003bd74 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
   3bd74:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3bd78:	e24dd014 	sub	sp, sp, #20
   3bd7c:	e1d0c0b6 	ldrh	ip, [r0, #6]
   3bd80:	e1d050b4 	ldrh	r5, [r0, #4]
   3bd84:	e15c0005 	cmp	ip, r5
   3bd88:	3a000002 	bcc	3bd98 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x24>
   3bd8c:	e3a00000 	mov	r0, #0
   3bd90:	e28dd014 	add	sp, sp, #20
   3bd94:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3bd98:	e1a04000 	mov	r4, r0
   3bd9c:	e5900000 	ldr	r0, [r0]
   3bda0:	e1a06003 	mov	r6, r3
   3bda4:	e080000c 	add	r0, r0, ip
   3bda8:	e1a03001 	mov	r3, r1
   3bdac:	e045500c 	sub	r5, r5, ip
   3bdb0:	e1a01422 	lsr	r1, r2, #8
   3bdb4:	e1a0c822 	lsr	ip, r2, #16
   3bdb8:	e3560000 	cmp	r6, #0
   3bdbc:	e6efe072 	uxtb	lr, r2
   3bdc0:	e5d47008 	ldrb	r7, [r4, #8]
   3bdc4:	e6ef1071 	uxtb	r1, r1
   3bdc8:	e6efc07c 	uxtb	ip, ip
   3bdcc:	e1a02c22 	lsr	r2, r2, #24
   3bdd0:	1a000006 	bne	3bdf0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>
   3bdd4:	e3570000 	cmp	r7, #0
   3bdd8:	1a000006 	bne	3bdf8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>
   3bddc:	e58d200c 	str	r2, [sp, #12]
   3bde0:	e98d1002 	stmib	sp, {r1, ip}
   3bde4:	e58de000 	str	lr, [sp]
   3bde8:	e59f2050 	ldr	r2, [pc, #80]	; 3be40 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xcc>
   3bdec:	ea000005 	b	3be08 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x94>
   3bdf0:	e3570000 	cmp	r7, #0
   3bdf4:	0a00000c 	beq	3be2c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xb8>
   3bdf8:	e58d200c 	str	r2, [sp, #12]
   3bdfc:	e59f2040 	ldr	r2, [pc, #64]	; 3be44 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xd0>
   3be00:	e98d1002 	stmib	sp, {r1, ip}
   3be04:	e58de000 	str	lr, [sp]
   3be08:	e1a01005 	mov	r1, r5
   3be0c:	ebff5519 	bl	11278 <snprintf@plt>
   3be10:	e1550000 	cmp	r5, r0
   3be14:	baffffdc 	blt	3bd8c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x18>
   3be18:	e1d430b6 	ldrh	r3, [r4, #6]
   3be1c:	e0830000 	add	r0, r3, r0
   3be20:	e1c400b6 	strh	r0, [r4, #6]
   3be24:	e3a00001 	mov	r0, #1
   3be28:	eaffffd8 	b	3bd90 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x1c>
   3be2c:	e58d200c 	str	r2, [sp, #12]
   3be30:	e98d1002 	stmib	sp, {r1, ip}
   3be34:	e58de000 	str	lr, [sp]
   3be38:	e59f2008 	ldr	r2, [pc, #8]	; 3be48 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xd4>
   3be3c:	eafffff1 	b	3be08 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x94>
   3be40:	00049edc 	.word	0x00049edc
   3be44:	00049ec8 	.word	0x00049ec8
   3be48:	00049edd 	.word	0x00049edd

0003be4c <PropertiesBuilder::AddComment(char const*)>:
   3be4c:	e92d4070 	push	{r4, r5, r6, lr}
   3be50:	e5d06008 	ldrb	r6, [r0, #8]
   3be54:	e3560000 	cmp	r6, #0
   3be58:	1a000010 	bne	3bea0 <PropertiesBuilder::AddComment(char const*)+0x54>
   3be5c:	e1d0c0b6 	ldrh	ip, [r0, #6]
   3be60:	e1d040b4 	ldrh	r4, [r0, #4]
   3be64:	e15c0004 	cmp	ip, r4
   3be68:	2a00000c 	bcs	3bea0 <PropertiesBuilder::AddComment(char const*)+0x54>
   3be6c:	e1a05000 	mov	r5, r0
   3be70:	e5900000 	ldr	r0, [r0]
   3be74:	e044400c 	sub	r4, r4, ip
   3be78:	e1a03001 	mov	r3, r1
   3be7c:	e59f2024 	ldr	r2, [pc, #36]	; 3bea8 <PropertiesBuilder::AddComment(char const*)+0x5c>
   3be80:	e1a01004 	mov	r1, r4
   3be84:	e080000c 	add	r0, r0, ip
   3be88:	ebff54fa 	bl	11278 <snprintf@plt>
   3be8c:	e1540000 	cmp	r4, r0
   3be90:	a3a06001 	movge	r6, #1
   3be94:	a1d530b6 	ldrhge	r3, [r5, #6]
   3be98:	a0833000 	addge	r3, r3, r0
   3be9c:	a1c530b6 	strhge	r3, [r5, #6]
   3bea0:	e1a00006 	mov	r0, r6
   3bea4:	e8bd8070 	pop	{r4, r5, r6, pc}
   3bea8:	00049eed 	.word	0x00049eed

0003beac <Sscan::Uint32(char const*, char const*, unsigned int&)>:
   3beac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3beb0:	e1a0a002 	mov	sl, r2
   3beb4:	eb00013a 	bl	3c3a4 <Sscan::checkName(char const*, char const*)>
   3beb8:	e2501000 	subs	r1, r0, #0
   3bebc:	0a000016 	beq	3bf1c <Sscan::Uint32(char const*, char const*, unsigned int&)+0x70>
   3bec0:	e3a08000 	mov	r8, #0
   3bec4:	e3a09000 	mov	r9, #0
   3bec8:	e3a0200a 	mov	r2, #10
   3becc:	e5d13000 	ldrb	r3, [r1]
   3bed0:	e2430030 	sub	r0, r3, #48	; 0x30
   3bed4:	e3500009 	cmp	r0, #9
   3bed8:	8a000011 	bhi	3bf24 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x78>
   3bedc:	e0854298 	umull	r4, r5, r8, r2
   3bee0:	e0255992 	mla	r5, r2, r9, r5
   3bee4:	e2546030 	subs	r6, r4, #48	; 0x30
   3bee8:	e2c57000 	sbc	r7, r5, #0
   3beec:	e0968003 	adds	r8, r6, r3
   3bef0:	e5f13001 	ldrb	r3, [r1, #1]!
   3bef4:	e2a79000 	adc	r9, r7, #0
   3bef8:	e21300df 	ands	r0, r3, #223	; 0xdf
   3befc:	1afffff2 	bne	3becc <Sscan::Uint32(char const*, char const*, unsigned int&)+0x20>
   3bf00:	e3a03000 	mov	r3, #0
   3bf04:	e3e02000 	mvn	r2, #0
   3bf08:	e1590003 	cmp	r9, r3
   3bf0c:	01580002 	cmpeq	r8, r2
   3bf10:	8a000003 	bhi	3bf24 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x78>
   3bf14:	e58a8000 	str	r8, [sl]
   3bf18:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3bf1c:	e3a00001 	mov	r0, #1
   3bf20:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3bf24:	e3a00002 	mov	r0, #2
   3bf28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003bf2c <Sscan::HexUint16(char const*, char const*, unsigned short&)>:
   3bf2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3bf30:	e1a06002 	mov	r6, r2
   3bf34:	eb00011a 	bl	3c3a4 <Sscan::checkName(char const*, char const*)>
   3bf38:	e2507000 	subs	r7, r0, #0
   3bf3c:	13a05000 	movne	r5, #0
   3bf40:	11c650b0 	strhne	r5, [r6]
   3bf44:	1a000001 	bne	3bf50 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x24>
   3bf48:	e3a00001 	mov	r0, #1
   3bf4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3bf50:	e7d74005 	ldrb	r4, [r7, r5]
   3bf54:	e3540000 	cmp	r4, #0
   3bf58:	0a000012 	beq	3bfa8 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x7c>
   3bf5c:	e3550004 	cmp	r5, #4
   3bf60:	0a00000d 	beq	3bf9c <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x70>
   3bf64:	e1a00004 	mov	r0, r4
   3bf68:	ebff5558 	bl	114d0 <isxdigit@plt>
   3bf6c:	e3500000 	cmp	r0, #0
   3bf70:	0afffff4 	beq	3bf48 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x1c>
   3bf74:	e3540039 	cmp	r4, #57	; 0x39
   3bf78:	83844020 	orrhi	r4, r4, #32
   3bf7c:	e1d630b0 	ldrh	r3, [r6]
   3bf80:	82444057 	subhi	r4, r4, #87	; 0x57
   3bf84:	92444030 	subls	r4, r4, #48	; 0x30
   3bf88:	e2855001 	add	r5, r5, #1
   3bf8c:	e6ef4074 	uxtb	r4, r4
   3bf90:	e1844203 	orr	r4, r4, r3, lsl #4
   3bf94:	e1c640b0 	strh	r4, [r6]
   3bf98:	eaffffec 	b	3bf50 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x24>
   3bf9c:	e2540020 	subs	r0, r4, #32
   3bfa0:	13a00001 	movne	r0, #1
   3bfa4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3bfa8:	e3550004 	cmp	r5, #4
   3bfac:	03a00000 	moveq	r0, #0
   3bfb0:	13a00002 	movne	r0, #2
   3bfb4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0003bfb8 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
   3bfb8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3bfbc:	e28db000 	add	fp, sp, #0
   3bfc0:	e24dd014 	sub	sp, sp, #20
   3bfc4:	e50b0008 	str	r0, [fp, #-8]
   3bfc8:	e50b100c 	str	r1, [fp, #-12]
   3bfcc:	e50b2010 	str	r2, [fp, #-16]
   3bfd0:	e51b3008 	ldr	r3, [fp, #-8]
   3bfd4:	e51b200c 	ldr	r2, [fp, #-12]
   3bfd8:	e5832000 	str	r2, [r3]
   3bfdc:	e51b3008 	ldr	r3, [fp, #-8]
   3bfe0:	e51b2010 	ldr	r2, [fp, #-16]
   3bfe4:	e5832004 	str	r2, [r3, #4]
   3bfe8:	e51b3008 	ldr	r3, [fp, #-8]
   3bfec:	e1a00003 	mov	r0, r3
   3bff0:	e28bd000 	add	sp, fp, #0
   3bff4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3bff8:	e12fff1e 	bx	lr

0003bffc <ReadConfigFile::~ReadConfigFile()>:
   3bffc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3c000:	e28db000 	add	fp, sp, #0
   3c004:	e24dd00c 	sub	sp, sp, #12
   3c008:	e50b0008 	str	r0, [fp, #-8]
   3c00c:	e51b3008 	ldr	r3, [fp, #-8]
   3c010:	e3a02000 	mov	r2, #0
   3c014:	e5832000 	str	r2, [r3]
   3c018:	e51b3008 	ldr	r3, [fp, #-8]
   3c01c:	e3a02000 	mov	r2, #0
   3c020:	e5832004 	str	r2, [r3, #4]
   3c024:	e51b3008 	ldr	r3, [fp, #-8]
   3c028:	e1a00003 	mov	r0, r3
   3c02c:	e28bd000 	add	sp, fp, #0
   3c030:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3c034:	e12fff1e 	bx	lr

0003c038 <ReadConfigFile::Read(char const*)>:
   3c038:	e92d4800 	push	{fp, lr}
   3c03c:	e28db004 	add	fp, sp, #4
   3c040:	e24dd098 	sub	sp, sp, #152	; 0x98
   3c044:	e50b0098 	str	r0, [fp, #-152]	; 0xffffff68
   3c048:	e50b109c 	str	r1, [fp, #-156]	; 0xffffff64
   3c04c:	e59f110c 	ldr	r1, [pc, #268]	; 3c160 <ReadConfigFile::Read(char const*)+0x128>
   3c050:	e51b009c 	ldr	r0, [fp, #-156]	; 0xffffff64
   3c054:	ebff5490 	bl	1129c <fopen@plt>
   3c058:	e50b0010 	str	r0, [fp, #-16]
   3c05c:	e51b3010 	ldr	r3, [fp, #-16]
   3c060:	e3530000 	cmp	r3, #0
   3c064:	0a000039 	beq	3c150 <ReadConfigFile::Read(char const*)+0x118>
   3c068:	e24b3090 	sub	r3, fp, #144	; 0x90
   3c06c:	e51b2010 	ldr	r2, [fp, #-16]
   3c070:	e3a0107f 	mov	r1, #127	; 0x7f
   3c074:	e1a00003 	mov	r0, r3
   3c078:	ebff54d8 	bl	113e0 <fgets@plt>
   3c07c:	e1a02000 	mov	r2, r0
   3c080:	e24b3090 	sub	r3, fp, #144	; 0x90
   3c084:	e1520003 	cmp	r2, r3
   3c088:	13a03001 	movne	r3, #1
   3c08c:	03a03000 	moveq	r3, #0
   3c090:	e6ef3073 	uxtb	r3, r3
   3c094:	e3530000 	cmp	r3, #0
   3c098:	1a000027 	bne	3c13c <ReadConfigFile::Read(char const*)+0x104>
   3c09c:	e55b3090 	ldrb	r3, [fp, #-144]	; 0xffffff70
   3c0a0:	e3530060 	cmp	r3, #96	; 0x60
   3c0a4:	9affffef 	bls	3c068 <ReadConfigFile::Read(char const*)+0x30>
   3c0a8:	e24b3090 	sub	r3, fp, #144	; 0x90
   3c0ac:	e50b3008 	str	r3, [fp, #-8]
   3c0b0:	e3a03000 	mov	r3, #0
   3c0b4:	e50b300c 	str	r3, [fp, #-12]
   3c0b8:	e51b300c 	ldr	r3, [fp, #-12]
   3c0bc:	e353007e 	cmp	r3, #126	; 0x7e
   3c0c0:	8a000015 	bhi	3c11c <ReadConfigFile::Read(char const*)+0xe4>
   3c0c4:	e51b3008 	ldr	r3, [fp, #-8]
   3c0c8:	e5d33000 	ldrb	r3, [r3]
   3c0cc:	e3530000 	cmp	r3, #0
   3c0d0:	0a000011 	beq	3c11c <ReadConfigFile::Read(char const*)+0xe4>
   3c0d4:	e51b3008 	ldr	r3, [fp, #-8]
   3c0d8:	e5d33000 	ldrb	r3, [r3]
   3c0dc:	e353000d 	cmp	r3, #13
   3c0e0:	0a000003 	beq	3c0f4 <ReadConfigFile::Read(char const*)+0xbc>
   3c0e4:	e51b3008 	ldr	r3, [fp, #-8]
   3c0e8:	e5d33000 	ldrb	r3, [r3]
   3c0ec:	e353000a 	cmp	r3, #10
   3c0f0:	1a000002 	bne	3c100 <ReadConfigFile::Read(char const*)+0xc8>
   3c0f4:	e51b3008 	ldr	r3, [fp, #-8]
   3c0f8:	e3a02000 	mov	r2, #0
   3c0fc:	e5c32000 	strb	r2, [r3]
   3c100:	e51b3008 	ldr	r3, [fp, #-8]
   3c104:	e2833001 	add	r3, r3, #1
   3c108:	e50b3008 	str	r3, [fp, #-8]
   3c10c:	e51b300c 	ldr	r3, [fp, #-12]
   3c110:	e2833001 	add	r3, r3, #1
   3c114:	e50b300c 	str	r3, [fp, #-12]
   3c118:	eaffffe6 	b	3c0b8 <ReadConfigFile::Read(char const*)+0x80>
   3c11c:	e51b3098 	ldr	r3, [fp, #-152]	; 0xffffff68
   3c120:	e5933000 	ldr	r3, [r3]
   3c124:	e51b2098 	ldr	r2, [fp, #-152]	; 0xffffff68
   3c128:	e5922004 	ldr	r2, [r2, #4]
   3c12c:	e24b1090 	sub	r1, fp, #144	; 0x90
   3c130:	e1a00002 	mov	r0, r2
   3c134:	e12fff33 	blx	r3
   3c138:	eaffffca 	b	3c068 <ReadConfigFile::Read(char const*)+0x30>
   3c13c:	e1a00000 	nop			; (mov r0, r0)
   3c140:	e51b0010 	ldr	r0, [fp, #-16]
   3c144:	ebff54c0 	bl	1144c <fclose@plt>
   3c148:	e3a03001 	mov	r3, #1
   3c14c:	ea000000 	b	3c154 <ReadConfigFile::Read(char const*)+0x11c>
   3c150:	e3a03000 	mov	r3, #0
   3c154:	e1a00003 	mov	r0, r3
   3c158:	e24bd004 	sub	sp, fp, #4
   3c15c:	e8bd8800 	pop	{fp, pc}
   3c160:	00049efc 	.word	0x00049efc

0003c164 <ReadConfigFile::Read(char const*, unsigned int)>:
   3c164:	e92d4800 	push	{fp, lr}
   3c168:	e28db004 	add	fp, sp, #4
   3c16c:	e24dd098 	sub	sp, sp, #152	; 0x98
   3c170:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
   3c174:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
   3c178:	e50b2098 	str	r2, [fp, #-152]	; 0xffffff68
   3c17c:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
   3c180:	e50b3008 	str	r3, [fp, #-8]
   3c184:	e51b3098 	ldr	r3, [fp, #-152]	; 0xffffff68
   3c188:	e3530000 	cmp	r3, #0
   3c18c:	0a00003e 	beq	3c28c <ReadConfigFile::Read(char const*, unsigned int)+0x128>
   3c190:	e24b308c 	sub	r3, fp, #140	; 0x8c
   3c194:	e50b300c 	str	r3, [fp, #-12]
   3c198:	e51b3098 	ldr	r3, [fp, #-152]	; 0xffffff68
   3c19c:	e3530000 	cmp	r3, #0
   3c1a0:	0a000018 	beq	3c208 <ReadConfigFile::Read(char const*, unsigned int)+0xa4>
   3c1a4:	e51b3008 	ldr	r3, [fp, #-8]
   3c1a8:	e5d33000 	ldrb	r3, [r3]
   3c1ac:	e353000d 	cmp	r3, #13
   3c1b0:	0a000014 	beq	3c208 <ReadConfigFile::Read(char const*, unsigned int)+0xa4>
   3c1b4:	e51b3008 	ldr	r3, [fp, #-8]
   3c1b8:	e5d33000 	ldrb	r3, [r3]
   3c1bc:	e353000a 	cmp	r3, #10
   3c1c0:	0a000010 	beq	3c208 <ReadConfigFile::Read(char const*, unsigned int)+0xa4>
   3c1c4:	e51b2008 	ldr	r2, [fp, #-8]
   3c1c8:	e2823001 	add	r3, r2, #1
   3c1cc:	e50b3008 	str	r3, [fp, #-8]
   3c1d0:	e51b300c 	ldr	r3, [fp, #-12]
   3c1d4:	e2831001 	add	r1, r3, #1
   3c1d8:	e50b100c 	str	r1, [fp, #-12]
   3c1dc:	e5d22000 	ldrb	r2, [r2]
   3c1e0:	e5c32000 	strb	r2, [r3]
   3c1e4:	e24b308c 	sub	r3, fp, #140	; 0x8c
   3c1e8:	e51b200c 	ldr	r2, [fp, #-12]
   3c1ec:	e0423003 	sub	r3, r2, r3
   3c1f0:	e353007f 	cmp	r3, #127	; 0x7f
   3c1f4:	ca000023 	bgt	3c288 <ReadConfigFile::Read(char const*, unsigned int)+0x124>
   3c1f8:	e51b3098 	ldr	r3, [fp, #-152]	; 0xffffff68
   3c1fc:	e2433001 	sub	r3, r3, #1
   3c200:	e50b3098 	str	r3, [fp, #-152]	; 0xffffff68
   3c204:	eaffffe3 	b	3c198 <ReadConfigFile::Read(char const*, unsigned int)+0x34>
   3c208:	e51b3098 	ldr	r3, [fp, #-152]	; 0xffffff68
   3c20c:	e3530000 	cmp	r3, #0
   3c210:	0a00000e 	beq	3c250 <ReadConfigFile::Read(char const*, unsigned int)+0xec>
   3c214:	e51b3008 	ldr	r3, [fp, #-8]
   3c218:	e5d33000 	ldrb	r3, [r3]
   3c21c:	e353000d 	cmp	r3, #13
   3c220:	0a000003 	beq	3c234 <ReadConfigFile::Read(char const*, unsigned int)+0xd0>
   3c224:	e51b3008 	ldr	r3, [fp, #-8]
   3c228:	e5d33000 	ldrb	r3, [r3]
   3c22c:	e353000a 	cmp	r3, #10
   3c230:	1a000006 	bne	3c250 <ReadConfigFile::Read(char const*, unsigned int)+0xec>
   3c234:	e51b3008 	ldr	r3, [fp, #-8]
   3c238:	e2833001 	add	r3, r3, #1
   3c23c:	e50b3008 	str	r3, [fp, #-8]
   3c240:	e51b3098 	ldr	r3, [fp, #-152]	; 0xffffff68
   3c244:	e2433001 	sub	r3, r3, #1
   3c248:	e50b3098 	str	r3, [fp, #-152]	; 0xffffff68
   3c24c:	eaffffed 	b	3c208 <ReadConfigFile::Read(char const*, unsigned int)+0xa4>
   3c250:	e55b308c 	ldrb	r3, [fp, #-140]	; 0xffffff74
   3c254:	e3530060 	cmp	r3, #96	; 0x60
   3c258:	9affffc9 	bls	3c184 <ReadConfigFile::Read(char const*, unsigned int)+0x20>
   3c25c:	e51b300c 	ldr	r3, [fp, #-12]
   3c260:	e3a02000 	mov	r2, #0
   3c264:	e5c32000 	strb	r2, [r3]
   3c268:	e51b3090 	ldr	r3, [fp, #-144]	; 0xffffff70
   3c26c:	e5933000 	ldr	r3, [r3]
   3c270:	e51b2090 	ldr	r2, [fp, #-144]	; 0xffffff70
   3c274:	e5922004 	ldr	r2, [r2, #4]
   3c278:	e24b108c 	sub	r1, fp, #140	; 0x8c
   3c27c:	e1a00002 	mov	r0, r2
   3c280:	e12fff33 	blx	r3
   3c284:	eaffffbe 	b	3c184 <ReadConfigFile::Read(char const*, unsigned int)+0x20>
   3c288:	e1a00000 	nop			; (mov r0, r0)
   3c28c:	e24bd004 	sub	sp, fp, #4
   3c290:	e8bd8800 	pop	{fp, pc}

0003c294 <Sscan::fromHex(char const*)>:
   3c294:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3c298:	e28db000 	add	fp, sp, #0
   3c29c:	e24dd014 	sub	sp, sp, #20
   3c2a0:	e50b0010 	str	r0, [fp, #-16]
   3c2a4:	e51b3010 	ldr	r3, [fp, #-16]
   3c2a8:	e2833001 	add	r3, r3, #1
   3c2ac:	e5d33000 	ldrb	r3, [r3]
   3c2b0:	e3530000 	cmp	r3, #0
   3c2b4:	0a000027 	beq	3c358 <Sscan::fromHex(char const*)+0xc4>
   3c2b8:	e51b3010 	ldr	r3, [fp, #-16]
   3c2bc:	e2833001 	add	r3, r3, #1
   3c2c0:	e5d33000 	ldrb	r3, [r3]
   3c2c4:	e3530039 	cmp	r3, #57	; 0x39
   3c2c8:	9a000006 	bls	3c2e8 <Sscan::fromHex(char const*)+0x54>
   3c2cc:	e51b3010 	ldr	r3, [fp, #-16]
   3c2d0:	e2833001 	add	r3, r3, #1
   3c2d4:	e5d33000 	ldrb	r3, [r3]
   3c2d8:	e3833020 	orr	r3, r3, #32
   3c2dc:	e6ef3073 	uxtb	r3, r3
   3c2e0:	e2433057 	sub	r3, r3, #87	; 0x57
   3c2e4:	ea000003 	b	3c2f8 <Sscan::fromHex(char const*)+0x64>
   3c2e8:	e51b3010 	ldr	r3, [fp, #-16]
   3c2ec:	e2833001 	add	r3, r3, #1
   3c2f0:	e5d33000 	ldrb	r3, [r3]
   3c2f4:	e2433030 	sub	r3, r3, #48	; 0x30
   3c2f8:	e50b3008 	str	r3, [fp, #-8]
   3c2fc:	e51b3010 	ldr	r3, [fp, #-16]
   3c300:	e5d33000 	ldrb	r3, [r3]
   3c304:	e3530039 	cmp	r3, #57	; 0x39
   3c308:	9a000005 	bls	3c324 <Sscan::fromHex(char const*)+0x90>
   3c30c:	e51b3010 	ldr	r3, [fp, #-16]
   3c310:	e5d33000 	ldrb	r3, [r3]
   3c314:	e3833020 	orr	r3, r3, #32
   3c318:	e6ef3073 	uxtb	r3, r3
   3c31c:	e2433057 	sub	r3, r3, #87	; 0x57
   3c320:	ea000002 	b	3c330 <Sscan::fromHex(char const*)+0x9c>
   3c324:	e51b3010 	ldr	r3, [fp, #-16]
   3c328:	e5d33000 	ldrb	r3, [r3]
   3c32c:	e2433030 	sub	r3, r3, #48	; 0x30
   3c330:	e50b300c 	str	r3, [fp, #-12]
   3c334:	e51b300c 	ldr	r3, [fp, #-12]
   3c338:	e1a03203 	lsl	r3, r3, #4
   3c33c:	e6af2073 	sxtb	r2, r3
   3c340:	e51b3008 	ldr	r3, [fp, #-8]
   3c344:	e6af3073 	sxtb	r3, r3
   3c348:	e1823003 	orr	r3, r2, r3
   3c34c:	e6af3073 	sxtb	r3, r3
   3c350:	e6ef3073 	uxtb	r3, r3
   3c354:	ea00000e 	b	3c394 <Sscan::fromHex(char const*)+0x100>
   3c358:	e51b3010 	ldr	r3, [fp, #-16]
   3c35c:	e5d33000 	ldrb	r3, [r3]
   3c360:	e3530039 	cmp	r3, #57	; 0x39
   3c364:	9a000006 	bls	3c384 <Sscan::fromHex(char const*)+0xf0>
   3c368:	e51b3010 	ldr	r3, [fp, #-16]
   3c36c:	e5d33000 	ldrb	r3, [r3]
   3c370:	e3833020 	orr	r3, r3, #32
   3c374:	e6ef3073 	uxtb	r3, r3
   3c378:	e2433057 	sub	r3, r3, #87	; 0x57
   3c37c:	e6ef3073 	uxtb	r3, r3
   3c380:	ea000003 	b	3c394 <Sscan::fromHex(char const*)+0x100>
   3c384:	e51b3010 	ldr	r3, [fp, #-16]
   3c388:	e5d33000 	ldrb	r3, [r3]
   3c38c:	e2433030 	sub	r3, r3, #48	; 0x30
   3c390:	e6ef3073 	uxtb	r3, r3
   3c394:	e1a00003 	mov	r0, r3
   3c398:	e28bd000 	add	sp, fp, #0
   3c39c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3c3a0:	e12fff1e 	bx	lr

0003c3a4 <Sscan::checkName(char const*, char const*)>:
   3c3a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3c3a8:	e28db000 	add	fp, sp, #0
   3c3ac:	e24dd00c 	sub	sp, sp, #12
   3c3b0:	e50b0008 	str	r0, [fp, #-8]
   3c3b4:	e50b100c 	str	r1, [fp, #-12]
   3c3b8:	e51b300c 	ldr	r3, [fp, #-12]
   3c3bc:	e5d33000 	ldrb	r3, [r3]
   3c3c0:	e3530000 	cmp	r3, #0
   3c3c4:	0a000013 	beq	3c418 <Sscan::checkName(char const*, char const*)+0x74>
   3c3c8:	e51b3008 	ldr	r3, [fp, #-8]
   3c3cc:	e5d33000 	ldrb	r3, [r3]
   3c3d0:	e3530000 	cmp	r3, #0
   3c3d4:	0a00000f 	beq	3c418 <Sscan::checkName(char const*, char const*)+0x74>
   3c3d8:	e51b300c 	ldr	r3, [fp, #-12]
   3c3dc:	e2832001 	add	r2, r3, #1
   3c3e0:	e50b200c 	str	r2, [fp, #-12]
   3c3e4:	e5d32000 	ldrb	r2, [r3]
   3c3e8:	e51b3008 	ldr	r3, [fp, #-8]
   3c3ec:	e2831001 	add	r1, r3, #1
   3c3f0:	e50b1008 	str	r1, [fp, #-8]
   3c3f4:	e5d33000 	ldrb	r3, [r3]
   3c3f8:	e1520003 	cmp	r2, r3
   3c3fc:	13a03001 	movne	r3, #1
   3c400:	03a03000 	moveq	r3, #0
   3c404:	e6ef3073 	uxtb	r3, r3
   3c408:	e3530000 	cmp	r3, #0
   3c40c:	0affffe9 	beq	3c3b8 <Sscan::checkName(char const*, char const*)+0x14>
   3c410:	e3a03000 	mov	r3, #0
   3c414:	ea00001c 	b	3c48c <Sscan::checkName(char const*, char const*)+0xe8>
   3c418:	e51b300c 	ldr	r3, [fp, #-12]
   3c41c:	e5d33000 	ldrb	r3, [r3]
   3c420:	e3530000 	cmp	r3, #0
   3c424:	0a000001 	beq	3c430 <Sscan::checkName(char const*, char const*)+0x8c>
   3c428:	e3a03000 	mov	r3, #0
   3c42c:	ea000016 	b	3c48c <Sscan::checkName(char const*, char const*)+0xe8>
   3c430:	e51b3008 	ldr	r3, [fp, #-8]
   3c434:	e2832001 	add	r2, r3, #1
   3c438:	e50b2008 	str	r2, [fp, #-8]
   3c43c:	e5d33000 	ldrb	r3, [r3]
   3c440:	e353003d 	cmp	r3, #61	; 0x3d
   3c444:	13a03001 	movne	r3, #1
   3c448:	03a03000 	moveq	r3, #0
   3c44c:	e6ef3073 	uxtb	r3, r3
   3c450:	e3530000 	cmp	r3, #0
   3c454:	0a000001 	beq	3c460 <Sscan::checkName(char const*, char const*)+0xbc>
   3c458:	e3a03000 	mov	r3, #0
   3c45c:	ea00000a 	b	3c48c <Sscan::checkName(char const*, char const*)+0xe8>
   3c460:	e51b3008 	ldr	r3, [fp, #-8]
   3c464:	e5d33000 	ldrb	r3, [r3]
   3c468:	e3530020 	cmp	r3, #32
   3c46c:	0a000003 	beq	3c480 <Sscan::checkName(char const*, char const*)+0xdc>
   3c470:	e51b3008 	ldr	r3, [fp, #-8]
   3c474:	e5d33000 	ldrb	r3, [r3]
   3c478:	e3530000 	cmp	r3, #0
   3c47c:	1a000001 	bne	3c488 <Sscan::checkName(char const*, char const*)+0xe4>
   3c480:	e3a03000 	mov	r3, #0
   3c484:	ea000000 	b	3c48c <Sscan::checkName(char const*, char const*)+0xe8>
   3c488:	e51b3008 	ldr	r3, [fp, #-8]
   3c48c:	e1a00003 	mov	r0, r3
   3c490:	e28bd000 	add	sp, fp, #0
   3c494:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3c498:	e12fff1e 	bx	lr

0003c49c <Sscan::Float(char const*, char const*, float&)>:
   3c49c:	e92d4070 	push	{r4, r5, r6, lr}
   3c4a0:	e1a04002 	mov	r4, r2
   3c4a4:	ebffffbe 	bl	3c3a4 <Sscan::checkName(char const*, char const*)>
   3c4a8:	e3500000 	cmp	r0, #0
   3c4ac:	0a00003c 	beq	3c5a4 <Sscan::Float(char const*, char const*, float&)+0x108>
   3c4b0:	e5d03000 	ldrb	r3, [r0]
   3c4b4:	e353002d 	cmp	r3, #45	; 0x2d
   3c4b8:	02800001 	addeq	r0, r0, #1
   3c4bc:	03a0e001 	moveq	lr, #1
   3c4c0:	e5d03000 	ldrb	r3, [r0]
   3c4c4:	13a0e000 	movne	lr, #0
   3c4c8:	e31300df 	tst	r3, #223	; 0xdf
   3c4cc:	13a03000 	movne	r3, #0
   3c4d0:	13a0c00a 	movne	ip, #10
   3c4d4:	1a000002 	bne	3c4e4 <Sscan::Float(char const*, char const*, float&)+0x48>
   3c4d8:	e3a00002 	mov	r0, #2
   3c4dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   3c4e0:	e1a00001 	mov	r0, r1
   3c4e4:	e5d02000 	ldrb	r2, [r0]
   3c4e8:	e2421030 	sub	r1, r2, #48	; 0x30
   3c4ec:	e3510009 	cmp	r1, #9
   3c4f0:	8afffff8 	bhi	3c4d8 <Sscan::Float(char const*, char const*, float&)+0x3c>
   3c4f4:	e023239c 	mla	r3, ip, r3, r2
   3c4f8:	e5d02001 	ldrb	r2, [r0, #1]
   3c4fc:	e2801001 	add	r1, r0, #1
   3c500:	e2433030 	sub	r3, r3, #48	; 0x30
   3c504:	e20200df 	and	r0, r2, #223	; 0xdf
   3c508:	e3500000 	cmp	r0, #0
   3c50c:	1352002e 	cmpne	r2, #46	; 0x2e
   3c510:	1afffff2 	bne	3c4e0 <Sscan::Float(char const*, char const*, float&)+0x44>
   3c514:	ee073a90 	vmov	s15, r3
   3c518:	eef87a67 	vcvt.f32.u32	s15, s15
   3c51c:	edc47a00 	vstr	s15, [r4]
   3c520:	e5d13000 	ldrb	r3, [r1]
   3c524:	e353002e 	cmp	r3, #46	; 0x2e
   3c528:	0a000006 	beq	3c548 <Sscan::Float(char const*, char const*, float&)+0xac>
   3c52c:	e35e0000 	cmp	lr, #0
   3c530:	1a000001 	bne	3c53c <Sscan::Float(char const*, char const*, float&)+0xa0>
   3c534:	e3a00000 	mov	r0, #0
   3c538:	e8bd8070 	pop	{r4, r5, r6, pc}
   3c53c:	eef17a67 	vneg.f32	s15, s15
   3c540:	edc47a00 	vstr	s15, [r4]
   3c544:	eafffffa 	b	3c534 <Sscan::Float(char const*, char const*, float&)+0x98>
   3c548:	e3a0c001 	mov	ip, #1
   3c54c:	e3a02000 	mov	r2, #0
   3c550:	e3a0500a 	mov	r5, #10
   3c554:	e5f13001 	ldrb	r3, [r1, #1]!
   3c558:	e21300df 	ands	r0, r3, #223	; 0xdf
   3c55c:	0a000005 	beq	3c578 <Sscan::Float(char const*, char const*, float&)+0xdc>
   3c560:	e2433030 	sub	r3, r3, #48	; 0x30
   3c564:	e3530009 	cmp	r3, #9
   3c568:	8affffda 	bhi	3c4d8 <Sscan::Float(char const*, char const*, float&)+0x3c>
   3c56c:	e0223295 	mla	r2, r5, r2, r3
   3c570:	e00c0c95 	mul	ip, r5, ip
   3c574:	eafffff6 	b	3c554 <Sscan::Float(char const*, char const*, float&)+0xb8>
   3c578:	ee072a10 	vmov	s14, r2
   3c57c:	e35e0000 	cmp	lr, #0
   3c580:	eeb86a47 	vcvt.f32.u32	s12, s14
   3c584:	ee07ca10 	vmov	s14, ip
   3c588:	eef86a47 	vcvt.f32.u32	s13, s14
   3c58c:	ee867a26 	vdiv.f32	s14, s12, s13
   3c590:	ee777a27 	vadd.f32	s15, s14, s15
   3c594:	0affffe9 	beq	3c540 <Sscan::Float(char const*, char const*, float&)+0xa4>
   3c598:	eef17a67 	vneg.f32	s15, s15
   3c59c:	edc47a00 	vstr	s15, [r4]
   3c5a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   3c5a4:	e3a00001 	mov	r0, #1
   3c5a8:	e8bd8070 	pop	{r4, r5, r6, pc}

0003c5ac <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)>:
   3c5ac:	e92d47f3 	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   3c5b0:	e1a07003 	mov	r7, r3
   3c5b4:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   3c5b8:	e3a03000 	mov	r3, #0
   3c5bc:	e1a06000 	mov	r6, r0
   3c5c0:	e4d0c001 	ldrb	ip, [r0], #1
   3c5c4:	e35c002c 	cmp	ip, #44	; 0x2c
   3c5c8:	135c0000 	cmpne	ip, #0
   3c5cc:	0a000004 	beq	3c5e4 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x38>
   3c5d0:	e5d2e000 	ldrb	lr, [r2]
   3c5d4:	e15e0003 	cmp	lr, r3
   3c5d8:	87c1c003 	strbhi	ip, [r1, r3]
   3c5dc:	82833001 	addhi	r3, r3, #1
   3c5e0:	8afffff5 	bhi	3c5bc <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x10>
   3c5e4:	e5c23000 	strb	r3, [r2]
   3c5e8:	e5d63000 	ldrb	r3, [r6]
   3c5ec:	e253402c 	subs	r4, r3, #44	; 0x2c
   3c5f0:	13a04001 	movne	r4, #1
   3c5f4:	e3530000 	cmp	r3, #0
   3c5f8:	03a04000 	moveq	r4, #0
   3c5fc:	e3540000 	cmp	r4, #0
   3c600:	13a00001 	movne	r0, #1
   3c604:	1a000011 	bne	3c650 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xa4>
   3c608:	e2866001 	add	r6, r6, #1
   3c60c:	e28da004 	add	sl, sp, #4
   3c610:	e5cd4005 	strb	r4, [sp, #5]
   3c614:	e1a09006 	mov	r9, r6
   3c618:	e4d68001 	ldrb	r8, [r6], #1
   3c61c:	e358003a 	cmp	r8, #58	; 0x3a
   3c620:	13580000 	cmpne	r8, #0
   3c624:	0a000014 	beq	3c67c <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xd0>
   3c628:	e3540002 	cmp	r4, #2
   3c62c:	1a000009 	bne	3c658 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xac>
   3c630:	e28d0004 	add	r0, sp, #4
   3c634:	ebffff16 	bl	3c294 <Sscan::fromHex(char const*)>
   3c638:	e3e03000 	mvn	r3, #0
   3c63c:	e5c70000 	strb	r0, [r7]
   3c640:	e5c53000 	strb	r3, [r5]
   3c644:	e5d93000 	ldrb	r3, [r9]
   3c648:	e21300df 	ands	r0, r3, #223	; 0xdf
   3c64c:	1a00000d 	bne	3c688 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xdc>
   3c650:	e28dd008 	add	sp, sp, #8
   3c654:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3c658:	e1a00008 	mov	r0, r8
   3c65c:	ebff539b 	bl	114d0 <isxdigit@plt>
   3c660:	e3500000 	cmp	r0, #0
   3c664:	1a000001 	bne	3c670 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xc4>
   3c668:	e3a00002 	mov	r0, #2
   3c66c:	eafffff7 	b	3c650 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xa4>
   3c670:	e7c4800a 	strb	r8, [r4, sl]
   3c674:	e2844001 	add	r4, r4, #1
   3c678:	eaffffe5 	b	3c614 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x68>
   3c67c:	e3540000 	cmp	r4, #0
   3c680:	0afffff8 	beq	3c668 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xbc>
   3c684:	eaffffe9 	b	3c630 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0x84>
   3c688:	e353003a 	cmp	r3, #58	; 0x3a
   3c68c:	1afffff5 	bne	3c668 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xbc>
   3c690:	e5d93001 	ldrb	r3, [r9, #1]
   3c694:	e2433030 	sub	r3, r3, #48	; 0x30
   3c698:	e3530009 	cmp	r3, #9
   3c69c:	8afffff1 	bhi	3c668 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xbc>
   3c6a0:	e6ef3073 	uxtb	r3, r3
   3c6a4:	e3530007 	cmp	r3, #7
   3c6a8:	95c53000 	strbls	r3, [r5]
   3c6ac:	93a00000 	movls	r0, #0
   3c6b0:	9affffe6 	bls	3c650 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xa4>
   3c6b4:	eaffffeb 	b	3c668 <Sscan::I2c(char const*, char*, unsigned char&, unsigned char&, unsigned char&)+0xbc>

0003c6b8 <LightSetChain::GetDmxStartAddress()>:
   3c6b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3c6bc:	e28db000 	add	fp, sp, #0
   3c6c0:	e24dd00c 	sub	sp, sp, #12
   3c6c4:	e50b0008 	str	r0, [fp, #-8]
   3c6c8:	e51b3008 	ldr	r3, [fp, #-8]
   3c6cc:	e1d330bc 	ldrh	r3, [r3, #12]
   3c6d0:	e1a00003 	mov	r0, r3
   3c6d4:	e28bd000 	add	sp, fp, #0
   3c6d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3c6dc:	e12fff1e 	bx	lr

0003c6e0 <LightSetChain::GetDmxFootprint()>:
   3c6e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3c6e4:	e28db000 	add	fp, sp, #0
   3c6e8:	e24dd00c 	sub	sp, sp, #12
   3c6ec:	e50b0008 	str	r0, [fp, #-8]
   3c6f0:	e51b3008 	ldr	r3, [fp, #-8]
   3c6f4:	e1d330be 	ldrh	r3, [r3, #14]
   3c6f8:	e1a00003 	mov	r0, r3
   3c6fc:	e28bd000 	add	sp, fp, #0
   3c700:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3c704:	e12fff1e 	bx	lr

0003c708 <LightSetChain::LightSetChain()>:
   3c708:	e92d4800 	push	{fp, lr}
   3c70c:	e28db004 	add	fp, sp, #4
   3c710:	e24dd010 	sub	sp, sp, #16
   3c714:	e50b0010 	str	r0, [fp, #-16]
   3c718:	e51b3010 	ldr	r3, [fp, #-16]
   3c71c:	e1a00003 	mov	r0, r3
   3c720:	ebffad4b 	bl	27c54 <LightSet::LightSet()>
   3c724:	e59f20d0 	ldr	r2, [pc, #208]	; 3c7fc <LightSetChain::LightSetChain()+0xf4>
   3c728:	e51b3010 	ldr	r3, [fp, #-16]
   3c72c:	e5832000 	str	r2, [r3]
   3c730:	e51b3010 	ldr	r3, [fp, #-16]
   3c734:	e3a02000 	mov	r2, #0
   3c738:	e5c32004 	strb	r2, [r3, #4]
   3c73c:	e51b3010 	ldr	r3, [fp, #-16]
   3c740:	e3e02000 	mvn	r2, #0
   3c744:	e1c320bc 	strh	r2, [r3, #12]
   3c748:	e51b3010 	ldr	r3, [fp, #-16]
   3c74c:	e3a02000 	mov	r2, #0
   3c750:	e1c320be 	strh	r2, [r3, #14]
   3c754:	e3a00080 	mov	r0, #128	; 0x80
   3c758:	ebff52d2 	bl	112a8 <operator new[](unsigned int)@plt>
   3c75c:	e1a03000 	mov	r3, r0
   3c760:	e1a02003 	mov	r2, r3
   3c764:	e51b3010 	ldr	r3, [fp, #-16]
   3c768:	e5832008 	str	r2, [r3, #8]
   3c76c:	e51b3010 	ldr	r3, [fp, #-16]
   3c770:	e5933008 	ldr	r3, [r3, #8]
   3c774:	e3530000 	cmp	r3, #0
   3c778:	1a000004 	bne	3c790 <LightSetChain::LightSetChain()+0x88>
   3c77c:	e59f307c 	ldr	r3, [pc, #124]	; 3c800 <LightSetChain::LightSetChain()+0xf8>
   3c780:	e3a02029 	mov	r2, #41	; 0x29
   3c784:	e59f1078 	ldr	r1, [pc, #120]	; 3c804 <LightSetChain::LightSetChain()+0xfc>
   3c788:	e59f0078 	ldr	r0, [pc, #120]	; 3c808 <LightSetChain::LightSetChain()+0x100>
   3c78c:	ebff52e0 	bl	11314 <__assert_fail@plt>
   3c790:	e3a03000 	mov	r3, #0
   3c794:	e50b3008 	str	r3, [fp, #-8]
   3c798:	e51b3008 	ldr	r3, [fp, #-8]
   3c79c:	e353000f 	cmp	r3, #15
   3c7a0:	8a000011 	bhi	3c7ec <LightSetChain::LightSetChain()+0xe4>
   3c7a4:	e51b3010 	ldr	r3, [fp, #-16]
   3c7a8:	e5932008 	ldr	r2, [r3, #8]
   3c7ac:	e51b3008 	ldr	r3, [fp, #-8]
   3c7b0:	e1a03183 	lsl	r3, r3, #3
   3c7b4:	e0823003 	add	r3, r2, r3
   3c7b8:	e3a02000 	mov	r2, #0
   3c7bc:	e5832000 	str	r2, [r3]
   3c7c0:	e51b3010 	ldr	r3, [fp, #-16]
   3c7c4:	e5932008 	ldr	r2, [r3, #8]
   3c7c8:	e51b3008 	ldr	r3, [fp, #-8]
   3c7cc:	e1a03183 	lsl	r3, r3, #3
   3c7d0:	e0823003 	add	r3, r2, r3
   3c7d4:	e3e02000 	mvn	r2, #0
   3c7d8:	e5832004 	str	r2, [r3, #4]
   3c7dc:	e51b3008 	ldr	r3, [fp, #-8]
   3c7e0:	e2833001 	add	r3, r3, #1
   3c7e4:	e50b3008 	str	r3, [fp, #-8]
   3c7e8:	eaffffea 	b	3c798 <LightSetChain::LightSetChain()+0x90>
   3c7ec:	e51b3010 	ldr	r3, [fp, #-16]
   3c7f0:	e1a00003 	mov	r0, r3
   3c7f4:	e24bd004 	sub	sp, fp, #4
   3c7f8:	e8bd8800 	pop	{fp, pc}
   3c7fc:	0004a19c 	.word	0x0004a19c
   3c800:	0004a1cc 	.word	0x0004a1cc
   3c804:	00049fd8 	.word	0x00049fd8
   3c808:	00049ff0 	.word	0x00049ff0

0003c80c <LightSetChain::~LightSetChain()>:
   3c80c:	e92d4800 	push	{fp, lr}
   3c810:	e28db004 	add	fp, sp, #4
   3c814:	e24dd008 	sub	sp, sp, #8
   3c818:	e50b0008 	str	r0, [fp, #-8]
   3c81c:	e59f2058 	ldr	r2, [pc, #88]	; 3c87c <LightSetChain::~LightSetChain()+0x70>
   3c820:	e51b3008 	ldr	r3, [fp, #-8]
   3c824:	e5832000 	str	r2, [r3]
   3c828:	e51b3008 	ldr	r3, [fp, #-8]
   3c82c:	e5933008 	ldr	r3, [r3, #8]
   3c830:	e3530000 	cmp	r3, #0
   3c834:	0a000003 	beq	3c848 <LightSetChain::~LightSetChain()+0x3c>
   3c838:	e51b3008 	ldr	r3, [fp, #-8]
   3c83c:	e5933008 	ldr	r3, [r3, #8]
   3c840:	e1a00003 	mov	r0, r3
   3c844:	ebff52d3 	bl	11398 <operator delete[](void*)@plt>
   3c848:	e51b3008 	ldr	r3, [fp, #-8]
   3c84c:	e3a02000 	mov	r2, #0
   3c850:	e5832008 	str	r2, [r3, #8]
   3c854:	e51b3008 	ldr	r3, [fp, #-8]
   3c858:	e3a02000 	mov	r2, #0
   3c85c:	e5c32004 	strb	r2, [r3, #4]
   3c860:	e51b3008 	ldr	r3, [fp, #-8]
   3c864:	e1a00003 	mov	r0, r3
   3c868:	ebffad06 	bl	27c88 <LightSet::~LightSet()>
   3c86c:	e51b3008 	ldr	r3, [fp, #-8]
   3c870:	e1a00003 	mov	r0, r3
   3c874:	e24bd004 	sub	sp, fp, #4
   3c878:	e8bd8800 	pop	{fp, pc}
   3c87c:	0004a19c 	.word	0x0004a19c

0003c880 <LightSetChain::~LightSetChain()>:
   3c880:	e92d4800 	push	{fp, lr}
   3c884:	e28db004 	add	fp, sp, #4
   3c888:	e24dd008 	sub	sp, sp, #8
   3c88c:	e50b0008 	str	r0, [fp, #-8]
   3c890:	e51b0008 	ldr	r0, [fp, #-8]
   3c894:	ebffffdc 	bl	3c80c <LightSetChain::~LightSetChain()>
   3c898:	e51b0008 	ldr	r0, [fp, #-8]
   3c89c:	ebff5299 	bl	11308 <operator delete(void*)@plt>
   3c8a0:	e51b3008 	ldr	r3, [fp, #-8]
   3c8a4:	e1a00003 	mov	r0, r3
   3c8a8:	e24bd004 	sub	sp, fp, #4
   3c8ac:	e8bd8800 	pop	{fp, pc}

0003c8b0 <LightSetChain::Start(unsigned int)>:
   3c8b0:	e92d4800 	push	{fp, lr}
   3c8b4:	e28db004 	add	fp, sp, #4
   3c8b8:	e24dd010 	sub	sp, sp, #16
   3c8bc:	e50b0010 	str	r0, [fp, #-16]
   3c8c0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   3c8c4:	e3a03000 	mov	r3, #0
   3c8c8:	e50b3008 	str	r3, [fp, #-8]
   3c8cc:	e51b3010 	ldr	r3, [fp, #-16]
   3c8d0:	e5d33004 	ldrb	r3, [r3, #4]
   3c8d4:	e1a02003 	mov	r2, r3
   3c8d8:	e51b3008 	ldr	r3, [fp, #-8]
   3c8dc:	e1530002 	cmp	r3, r2
   3c8e0:	2a000014 	bcs	3c938 <LightSetChain::Start(unsigned int)+0x88>
   3c8e4:	e51b3010 	ldr	r3, [fp, #-16]
   3c8e8:	e5932008 	ldr	r2, [r3, #8]
   3c8ec:	e51b3008 	ldr	r3, [fp, #-8]
   3c8f0:	e1a03183 	lsl	r3, r3, #3
   3c8f4:	e0823003 	add	r3, r2, r3
   3c8f8:	e5930000 	ldr	r0, [r3]
   3c8fc:	e51b3010 	ldr	r3, [fp, #-16]
   3c900:	e5932008 	ldr	r2, [r3, #8]
   3c904:	e51b3008 	ldr	r3, [fp, #-8]
   3c908:	e1a03183 	lsl	r3, r3, #3
   3c90c:	e0823003 	add	r3, r2, r3
   3c910:	e5933000 	ldr	r3, [r3]
   3c914:	e5933000 	ldr	r3, [r3]
   3c918:	e2833008 	add	r3, r3, #8
   3c91c:	e5933000 	ldr	r3, [r3]
   3c920:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   3c924:	e12fff33 	blx	r3
   3c928:	e51b3008 	ldr	r3, [fp, #-8]
   3c92c:	e2833001 	add	r3, r3, #1
   3c930:	e50b3008 	str	r3, [fp, #-8]
   3c934:	eaffffe4 	b	3c8cc <LightSetChain::Start(unsigned int)+0x1c>
   3c938:	e1a00000 	nop			; (mov r0, r0)
   3c93c:	e24bd004 	sub	sp, fp, #4
   3c940:	e8bd8800 	pop	{fp, pc}

0003c944 <LightSetChain::Stop(unsigned int)>:
   3c944:	e92d4800 	push	{fp, lr}
   3c948:	e28db004 	add	fp, sp, #4
   3c94c:	e24dd010 	sub	sp, sp, #16
   3c950:	e50b0010 	str	r0, [fp, #-16]
   3c954:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   3c958:	e3a03000 	mov	r3, #0
   3c95c:	e50b3008 	str	r3, [fp, #-8]
   3c960:	e51b3010 	ldr	r3, [fp, #-16]
   3c964:	e5d33004 	ldrb	r3, [r3, #4]
   3c968:	e1a02003 	mov	r2, r3
   3c96c:	e51b3008 	ldr	r3, [fp, #-8]
   3c970:	e1530002 	cmp	r3, r2
   3c974:	2a000014 	bcs	3c9cc <LightSetChain::Stop(unsigned int)+0x88>
   3c978:	e51b3010 	ldr	r3, [fp, #-16]
   3c97c:	e5932008 	ldr	r2, [r3, #8]
   3c980:	e51b3008 	ldr	r3, [fp, #-8]
   3c984:	e1a03183 	lsl	r3, r3, #3
   3c988:	e0823003 	add	r3, r2, r3
   3c98c:	e5930000 	ldr	r0, [r3]
   3c990:	e51b3010 	ldr	r3, [fp, #-16]
   3c994:	e5932008 	ldr	r2, [r3, #8]
   3c998:	e51b3008 	ldr	r3, [fp, #-8]
   3c99c:	e1a03183 	lsl	r3, r3, #3
   3c9a0:	e0823003 	add	r3, r2, r3
   3c9a4:	e5933000 	ldr	r3, [r3]
   3c9a8:	e5933000 	ldr	r3, [r3]
   3c9ac:	e283300c 	add	r3, r3, #12
   3c9b0:	e5933000 	ldr	r3, [r3]
   3c9b4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   3c9b8:	e12fff33 	blx	r3
   3c9bc:	e51b3008 	ldr	r3, [fp, #-8]
   3c9c0:	e2833001 	add	r3, r3, #1
   3c9c4:	e50b3008 	str	r3, [fp, #-8]
   3c9c8:	eaffffe4 	b	3c960 <LightSetChain::Stop(unsigned int)+0x1c>
   3c9cc:	e1a00000 	nop			; (mov r0, r0)
   3c9d0:	e24bd004 	sub	sp, fp, #4
   3c9d4:	e8bd8800 	pop	{fp, pc}

0003c9d8 <LightSetChain::SetData(unsigned int, unsigned char const*, unsigned int)>:
   3c9d8:	e92d4810 	push	{r4, fp, lr}
   3c9dc:	e28db008 	add	fp, sp, #8
   3c9e0:	e24dd01c 	sub	sp, sp, #28
   3c9e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   3c9e8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   3c9ec:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   3c9f0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   3c9f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3c9f8:	e3530000 	cmp	r3, #0
   3c9fc:	1a000004 	bne	3ca14 <LightSetChain::SetData(unsigned int, unsigned char const*, unsigned int)+0x3c>
   3ca00:	e59f3094 	ldr	r3, [pc, #148]	; 3ca9c <LightSetChain::SetData(unsigned int, unsigned char const*, unsigned int)+0xc4>
   3ca04:	e3a02044 	mov	r2, #68	; 0x44
   3ca08:	e59f1090 	ldr	r1, [pc, #144]	; 3caa0 <LightSetChain::SetData(unsigned int, unsigned char const*, unsigned int)+0xc8>
   3ca0c:	e59f0090 	ldr	r0, [pc, #144]	; 3caa4 <LightSetChain::SetData(unsigned int, unsigned char const*, unsigned int)+0xcc>
   3ca10:	ebff523f 	bl	11314 <__assert_fail@plt>
   3ca14:	e3a03000 	mov	r3, #0
   3ca18:	e50b3010 	str	r3, [fp, #-16]
   3ca1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3ca20:	e5d33004 	ldrb	r3, [r3, #4]
   3ca24:	e1a02003 	mov	r2, r3
   3ca28:	e51b3010 	ldr	r3, [fp, #-16]
   3ca2c:	e1530002 	cmp	r3, r2
   3ca30:	2a000016 	bcs	3ca90 <LightSetChain::SetData(unsigned int, unsigned char const*, unsigned int)+0xb8>
   3ca34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3ca38:	e5932008 	ldr	r2, [r3, #8]
   3ca3c:	e51b3010 	ldr	r3, [fp, #-16]
   3ca40:	e1a03183 	lsl	r3, r3, #3
   3ca44:	e0823003 	add	r3, r2, r3
   3ca48:	e5930000 	ldr	r0, [r3]
   3ca4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3ca50:	e5932008 	ldr	r2, [r3, #8]
   3ca54:	e51b3010 	ldr	r3, [fp, #-16]
   3ca58:	e1a03183 	lsl	r3, r3, #3
   3ca5c:	e0823003 	add	r3, r2, r3
   3ca60:	e5933000 	ldr	r3, [r3]
   3ca64:	e5933000 	ldr	r3, [r3]
   3ca68:	e2833010 	add	r3, r3, #16
   3ca6c:	e5934000 	ldr	r4, [r3]
   3ca70:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   3ca74:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   3ca78:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   3ca7c:	e12fff34 	blx	r4
   3ca80:	e51b3010 	ldr	r3, [fp, #-16]
   3ca84:	e2833001 	add	r3, r3, #1
   3ca88:	e50b3010 	str	r3, [fp, #-16]
   3ca8c:	eaffffe2 	b	3ca1c <LightSetChain::SetData(unsigned int, unsigned char const*, unsigned int)+0x44>
   3ca90:	e1a00000 	nop			; (mov r0, r0)
   3ca94:	e24bd008 	sub	sp, fp, #8
   3ca98:	e8bd8810 	pop	{r4, fp, pc}
   3ca9c:	0004a1ec 	.word	0x0004a1ec
   3caa0:	00049fd8 	.word	0x00049fd8
   3caa4:	0004a004 	.word	0x0004a004

0003caa8 <LightSetChain::Print()>:
   3caa8:	e92d4800 	push	{fp, lr}
   3caac:	e28db004 	add	fp, sp, #4
   3cab0:	e24dd010 	sub	sp, sp, #16
   3cab4:	e50b0010 	str	r0, [fp, #-16]
   3cab8:	e3a03000 	mov	r3, #0
   3cabc:	e50b3008 	str	r3, [fp, #-8]
   3cac0:	e51b3010 	ldr	r3, [fp, #-16]
   3cac4:	e5d33004 	ldrb	r3, [r3, #4]
   3cac8:	e1a02003 	mov	r2, r3
   3cacc:	e51b3008 	ldr	r3, [fp, #-8]
   3cad0:	e1530002 	cmp	r3, r2
   3cad4:	2a000014 	bcs	3cb2c <LightSetChain::Print()+0x84>
   3cad8:	e51b3010 	ldr	r3, [fp, #-16]
   3cadc:	e5932008 	ldr	r2, [r3, #8]
   3cae0:	e51b3008 	ldr	r3, [fp, #-8]
   3cae4:	e1a03183 	lsl	r3, r3, #3
   3cae8:	e0823003 	add	r3, r2, r3
   3caec:	e5931000 	ldr	r1, [r3]
   3caf0:	e51b3010 	ldr	r3, [fp, #-16]
   3caf4:	e5932008 	ldr	r2, [r3, #8]
   3caf8:	e51b3008 	ldr	r3, [fp, #-8]
   3cafc:	e1a03183 	lsl	r3, r3, #3
   3cb00:	e0823003 	add	r3, r2, r3
   3cb04:	e5933000 	ldr	r3, [r3]
   3cb08:	e5933000 	ldr	r3, [r3]
   3cb0c:	e283301c 	add	r3, r3, #28
   3cb10:	e5933000 	ldr	r3, [r3]
   3cb14:	e1a00001 	mov	r0, r1
   3cb18:	e12fff33 	blx	r3
   3cb1c:	e51b3008 	ldr	r3, [fp, #-8]
   3cb20:	e2833001 	add	r3, r3, #1
   3cb24:	e50b3008 	str	r3, [fp, #-8]
   3cb28:	eaffffe4 	b	3cac0 <LightSetChain::Print()+0x18>
   3cb2c:	e1a00000 	nop			; (mov r0, r0)
   3cb30:	e24bd004 	sub	sp, fp, #4
   3cb34:	e8bd8800 	pop	{fp, pc}

0003cb38 <LightSetChain::SetDmxStartAddress(unsigned short)>:
   3cb38:	e92d4800 	push	{fp, lr}
   3cb3c:	e28db004 	add	fp, sp, #4
   3cb40:	e24dd010 	sub	sp, sp, #16
   3cb44:	e50b0010 	str	r0, [fp, #-16]
   3cb48:	e1a03001 	mov	r3, r1
   3cb4c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   3cb50:	e3a03052 	mov	r3, #82	; 0x52
   3cb54:	e59f214c 	ldr	r2, [pc, #332]	; 3cca8 <LightSetChain::SetDmxStartAddress(unsigned short)+0x170>
   3cb58:	e59f114c 	ldr	r1, [pc, #332]	; 3ccac <LightSetChain::SetDmxStartAddress(unsigned short)+0x174>
   3cb5c:	e59f014c 	ldr	r0, [pc, #332]	; 3ccb0 <LightSetChain::SetDmxStartAddress(unsigned short)+0x178>
   3cb60:	ebff51a3 	bl	111f4 <printf@plt>
   3cb64:	e51b3010 	ldr	r3, [fp, #-16]
   3cb68:	e1d330bc 	ldrh	r3, [r3, #12]
   3cb6c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
   3cb70:	e1520003 	cmp	r2, r3
   3cb74:	1a000006 	bne	3cb94 <LightSetChain::SetDmxStartAddress(unsigned short)+0x5c>
   3cb78:	e3a03055 	mov	r3, #85	; 0x55
   3cb7c:	e59f2124 	ldr	r2, [pc, #292]	; 3cca8 <LightSetChain::SetDmxStartAddress(unsigned short)+0x170>
   3cb80:	e59f1124 	ldr	r1, [pc, #292]	; 3ccac <LightSetChain::SetDmxStartAddress(unsigned short)+0x174>
   3cb84:	e59f0128 	ldr	r0, [pc, #296]	; 3ccb4 <LightSetChain::SetDmxStartAddress(unsigned short)+0x17c>
   3cb88:	ebff5199 	bl	111f4 <printf@plt>
   3cb8c:	e3a03001 	mov	r3, #1
   3cb90:	ea000041 	b	3cc9c <LightSetChain::SetDmxStartAddress(unsigned short)+0x164>
   3cb94:	e3a03000 	mov	r3, #0
   3cb98:	e50b3008 	str	r3, [fp, #-8]
   3cb9c:	e51b3010 	ldr	r3, [fp, #-16]
   3cba0:	e5d33004 	ldrb	r3, [r3, #4]
   3cba4:	e1a02003 	mov	r2, r3
   3cba8:	e51b3008 	ldr	r3, [fp, #-8]
   3cbac:	e1530002 	cmp	r3, r2
   3cbb0:	2a000030 	bcs	3cc78 <LightSetChain::SetDmxStartAddress(unsigned short)+0x140>
   3cbb4:	e51b3010 	ldr	r3, [fp, #-16]
   3cbb8:	e5932008 	ldr	r2, [r3, #8]
   3cbbc:	e51b3008 	ldr	r3, [fp, #-8]
   3cbc0:	e1a03183 	lsl	r3, r3, #3
   3cbc4:	e0823003 	add	r3, r2, r3
   3cbc8:	e5931000 	ldr	r1, [r3]
   3cbcc:	e51b3010 	ldr	r3, [fp, #-16]
   3cbd0:	e5932008 	ldr	r2, [r3, #8]
   3cbd4:	e51b3008 	ldr	r3, [fp, #-8]
   3cbd8:	e1a03183 	lsl	r3, r3, #3
   3cbdc:	e0823003 	add	r3, r2, r3
   3cbe0:	e5933000 	ldr	r3, [r3]
   3cbe4:	e5933000 	ldr	r3, [r3]
   3cbe8:	e2833024 	add	r3, r3, #36	; 0x24
   3cbec:	e5933000 	ldr	r3, [r3]
   3cbf0:	e1a00001 	mov	r0, r1
   3cbf4:	e12fff33 	blx	r3
   3cbf8:	e1a03000 	mov	r3, r0
   3cbfc:	e14b30ba 	strh	r3, [fp, #-10]
   3cc00:	e51b3010 	ldr	r3, [fp, #-16]
   3cc04:	e1d330bc 	ldrh	r3, [r3, #12]
   3cc08:	e15b20ba 	ldrh	r2, [fp, #-10]
   3cc0c:	e0423003 	sub	r3, r2, r3
   3cc10:	e6ff2073 	uxth	r2, r3
   3cc14:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
   3cc18:	e0823003 	add	r3, r2, r3
   3cc1c:	e14b30bc 	strh	r3, [fp, #-12]
   3cc20:	e51b3010 	ldr	r3, [fp, #-16]
   3cc24:	e5932008 	ldr	r2, [r3, #8]
   3cc28:	e51b3008 	ldr	r3, [fp, #-8]
   3cc2c:	e1a03183 	lsl	r3, r3, #3
   3cc30:	e0823003 	add	r3, r2, r3
   3cc34:	e5930000 	ldr	r0, [r3]
   3cc38:	e51b3010 	ldr	r3, [fp, #-16]
   3cc3c:	e5932008 	ldr	r2, [r3, #8]
   3cc40:	e51b3008 	ldr	r3, [fp, #-8]
   3cc44:	e1a03183 	lsl	r3, r3, #3
   3cc48:	e0823003 	add	r3, r2, r3
   3cc4c:	e5933000 	ldr	r3, [r3]
   3cc50:	e5933000 	ldr	r3, [r3]
   3cc54:	e2833020 	add	r3, r3, #32
   3cc58:	e5933000 	ldr	r3, [r3]
   3cc5c:	e15b20bc 	ldrh	r2, [fp, #-12]
   3cc60:	e1a01002 	mov	r1, r2
   3cc64:	e12fff33 	blx	r3
   3cc68:	e51b3008 	ldr	r3, [fp, #-8]
   3cc6c:	e2833001 	add	r3, r3, #1
   3cc70:	e50b3008 	str	r3, [fp, #-8]
   3cc74:	eaffffc8 	b	3cb9c <LightSetChain::SetDmxStartAddress(unsigned short)+0x64>
   3cc78:	e51b3010 	ldr	r3, [fp, #-16]
   3cc7c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
   3cc80:	e1c320bc 	strh	r2, [r3, #12]
   3cc84:	e3a03062 	mov	r3, #98	; 0x62
   3cc88:	e59f2018 	ldr	r2, [pc, #24]	; 3cca8 <LightSetChain::SetDmxStartAddress(unsigned short)+0x170>
   3cc8c:	e59f1018 	ldr	r1, [pc, #24]	; 3ccac <LightSetChain::SetDmxStartAddress(unsigned short)+0x174>
   3cc90:	e59f001c 	ldr	r0, [pc, #28]	; 3ccb4 <LightSetChain::SetDmxStartAddress(unsigned short)+0x17c>
   3cc94:	ebff5156 	bl	111f4 <printf@plt>
   3cc98:	e3a03001 	mov	r3, #1
   3cc9c:	e1a00003 	mov	r0, r3
   3cca0:	e24bd004 	sub	sp, fp, #4
   3cca4:	e8bd8800 	pop	{fp, pc}
   3cca8:	0004a234 	.word	0x0004a234
   3ccac:	00049fd8 	.word	0x00049fd8
   3ccb0:	0004a018 	.word	0x0004a018
   3ccb4:	0004a028 	.word	0x0004a028

0003ccb8 <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
   3ccb8:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   3ccbc:	e28db018 	add	fp, sp, #24
   3ccc0:	e24dd034 	sub	sp, sp, #52	; 0x34
   3ccc4:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   3ccc8:	e1a03001 	mov	r3, r1
   3cccc:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
   3ccd0:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
   3ccd4:	e3a03067 	mov	r3, #103	; 0x67
   3ccd8:	e59f2308 	ldr	r2, [pc, #776]	; 3cfe8 <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x330>
   3ccdc:	e59f1308 	ldr	r1, [pc, #776]	; 3cfec <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x334>
   3cce0:	e59f0308 	ldr	r0, [pc, #776]	; 3cff0 <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x338>
   3cce4:	ebff5142 	bl	111f4 <printf@plt>
   3cce8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   3ccec:	e1d330be 	ldrh	r3, [r3, #14]
   3ccf0:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
   3ccf4:	e1520003 	cmp	r2, r3
   3ccf8:	9a000001 	bls	3cd04 <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x4c>
   3ccfc:	e3a03000 	mov	r3, #0
   3cd00:	ea0000b5 	b	3cfdc <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x324>
   3cd04:	e3a03000 	mov	r3, #0
   3cd08:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   3cd0c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   3cd10:	e5d33004 	ldrb	r3, [r3, #4]
   3cd14:	e1a02003 	mov	r2, r3
   3cd18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3cd1c:	e1530002 	cmp	r3, r2
   3cd20:	2a0000a7 	bcs	3cfc4 <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x30c>
   3cd24:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   3cd28:	e1d330bc 	ldrh	r3, [r3, #12]
   3cd2c:	e1a02003 	mov	r2, r3
   3cd30:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
   3cd34:	e0823003 	add	r3, r2, r3
   3cd38:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   3cd3c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   3cd40:	e6ff4073 	uxth	r4, r3
   3cd44:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   3cd48:	e5932008 	ldr	r2, [r3, #8]
   3cd4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3cd50:	e1a03183 	lsl	r3, r3, #3
   3cd54:	e0823003 	add	r3, r2, r3
   3cd58:	e5931000 	ldr	r1, [r3]
   3cd5c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   3cd60:	e5932008 	ldr	r2, [r3, #8]
   3cd64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3cd68:	e1a03183 	lsl	r3, r3, #3
   3cd6c:	e0823003 	add	r3, r2, r3
   3cd70:	e5933000 	ldr	r3, [r3]
   3cd74:	e5933000 	ldr	r3, [r3]
   3cd78:	e2833024 	add	r3, r3, #36	; 0x24
   3cd7c:	e5933000 	ldr	r3, [r3]
   3cd80:	e1a00001 	mov	r0, r1
   3cd84:	e12fff33 	blx	r3
   3cd88:	e1a03000 	mov	r3, r0
   3cd8c:	e0443003 	sub	r3, r4, r3
   3cd90:	e6ff3073 	uxth	r3, r3
   3cd94:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
   3cd98:	e15b53b2 	ldrh	r5, [fp, #-50]	; 0xffffffce
   3cd9c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   3cda0:	e1d330bc 	ldrh	r3, [r3, #12]
   3cda4:	e1a08003 	mov	r8, r3
   3cda8:	e51b6020 	ldr	r6, [fp, #-32]	; 0xffffffe0
   3cdac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   3cdb0:	e5932008 	ldr	r2, [r3, #8]
   3cdb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3cdb8:	e1a03183 	lsl	r3, r3, #3
   3cdbc:	e0823003 	add	r3, r2, r3
   3cdc0:	e5931000 	ldr	r1, [r3]
   3cdc4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   3cdc8:	e5932008 	ldr	r2, [r3, #8]
   3cdcc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3cdd0:	e1a03183 	lsl	r3, r3, #3
   3cdd4:	e0823003 	add	r3, r2, r3
   3cdd8:	e5933000 	ldr	r3, [r3]
   3cddc:	e5933000 	ldr	r3, [r3]
   3cde0:	e2833024 	add	r3, r3, #36	; 0x24
   3cde4:	e5933000 	ldr	r3, [r3]
   3cde8:	e1a00001 	mov	r0, r1
   3cdec:	e12fff33 	blx	r3
   3cdf0:	e1a03000 	mov	r3, r0
   3cdf4:	e1a07003 	mov	r7, r3
   3cdf8:	e51b4020 	ldr	r4, [fp, #-32]	; 0xffffffe0
   3cdfc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   3ce00:	e5932008 	ldr	r2, [r3, #8]
   3ce04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3ce08:	e1a03183 	lsl	r3, r3, #3
   3ce0c:	e0823003 	add	r3, r2, r3
   3ce10:	e5931000 	ldr	r1, [r3]
   3ce14:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   3ce18:	e5932008 	ldr	r2, [r3, #8]
   3ce1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3ce20:	e1a03183 	lsl	r3, r3, #3
   3ce24:	e0823003 	add	r3, r2, r3
   3ce28:	e5933000 	ldr	r3, [r3]
   3ce2c:	e5933000 	ldr	r3, [r3]
   3ce30:	e2833028 	add	r3, r3, #40	; 0x28
   3ce34:	e5933000 	ldr	r3, [r3]
   3ce38:	e1a00001 	mov	r0, r1
   3ce3c:	e12fff33 	blx	r3
   3ce40:	e1a03000 	mov	r3, r0
   3ce44:	e58d3008 	str	r3, [sp, #8]
   3ce48:	e58d4004 	str	r4, [sp, #4]
   3ce4c:	e58d7000 	str	r7, [sp]
   3ce50:	e1a03006 	mov	r3, r6
   3ce54:	e1a02008 	mov	r2, r8
   3ce58:	e1a01005 	mov	r1, r5
   3ce5c:	e59f0190 	ldr	r0, [pc, #400]	; 3cff4 <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x33c>
   3ce60:	ebff50e3 	bl	111f4 <printf@plt>
   3ce64:	e15b32f6 	ldrsh	r3, [fp, #-38]	; 0xffffffda
   3ce68:	e1a01003 	mov	r1, r3
   3ce6c:	e59f0184 	ldr	r0, [pc, #388]	; 3cff8 <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x340>
   3ce70:	ebff50df 	bl	111f4 <printf@plt>
   3ce74:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   3ce78:	e5932008 	ldr	r2, [r3, #8]
   3ce7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3ce80:	e1a03183 	lsl	r3, r3, #3
   3ce84:	e0823003 	add	r3, r2, r3
   3ce88:	e5931000 	ldr	r1, [r3]
   3ce8c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   3ce90:	e5932008 	ldr	r2, [r3, #8]
   3ce94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3ce98:	e1a03183 	lsl	r3, r3, #3
   3ce9c:	e0823003 	add	r3, r2, r3
   3cea0:	e5933000 	ldr	r3, [r3]
   3cea4:	e5933000 	ldr	r3, [r3]
   3cea8:	e2833024 	add	r3, r3, #36	; 0x24
   3ceac:	e5933000 	ldr	r3, [r3]
   3ceb0:	e1a00001 	mov	r0, r1
   3ceb4:	e12fff33 	blx	r3
   3ceb8:	e1a03000 	mov	r3, r0
   3cebc:	e1a04003 	mov	r4, r3
   3cec0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   3cec4:	e5932008 	ldr	r2, [r3, #8]
   3cec8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3cecc:	e1a03183 	lsl	r3, r3, #3
   3ced0:	e0823003 	add	r3, r2, r3
   3ced4:	e5931000 	ldr	r1, [r3]
   3ced8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   3cedc:	e5932008 	ldr	r2, [r3, #8]
   3cee0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3cee4:	e1a03183 	lsl	r3, r3, #3
   3cee8:	e0823003 	add	r3, r2, r3
   3ceec:	e5933000 	ldr	r3, [r3]
   3cef0:	e5933000 	ldr	r3, [r3]
   3cef4:	e2833028 	add	r3, r3, #40	; 0x28
   3cef8:	e5933000 	ldr	r3, [r3]
   3cefc:	e1a00001 	mov	r0, r1
   3cf00:	e12fff33 	blx	r3
   3cf04:	e1a03000 	mov	r3, r0
   3cf08:	e0843003 	add	r3, r4, r3
   3cf0c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   3cf10:	e1520003 	cmp	r2, r3
   3cf14:	aa000002 	bge	3cf24 <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x26c>
   3cf18:	e15b32f6 	ldrsh	r3, [fp, #-38]	; 0xffffffda
   3cf1c:	e3530000 	cmp	r3, #0
   3cf20:	aa000001 	bge	3cf2c <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x274>
   3cf24:	e3a03001 	mov	r3, #1
   3cf28:	ea000000 	b	3cf30 <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x278>
   3cf2c:	e3a03000 	mov	r3, #0
   3cf30:	e3530000 	cmp	r3, #0
   3cf34:	0a000002 	beq	3cf44 <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28c>
   3cf38:	e59f00bc 	ldr	r0, [pc, #188]	; 3cffc <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x344>
   3cf3c:	ebff50b8 	bl	11224 <puts@plt>
   3cf40:	ea00001b 	b	3cfb4 <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2fc>
   3cf44:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   3cf48:	e5932008 	ldr	r2, [r3, #8]
   3cf4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3cf50:	e1a03183 	lsl	r3, r3, #3
   3cf54:	e0823003 	add	r3, r2, r3
   3cf58:	e5930000 	ldr	r0, [r3]
   3cf5c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   3cf60:	e5932008 	ldr	r2, [r3, #8]
   3cf64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3cf68:	e1a03183 	lsl	r3, r3, #3
   3cf6c:	e0823003 	add	r3, r2, r3
   3cf70:	e5933000 	ldr	r3, [r3]
   3cf74:	e5933000 	ldr	r3, [r3]
   3cf78:	e283302c 	add	r3, r3, #44	; 0x2c
   3cf7c:	e5933000 	ldr	r3, [r3]
   3cf80:	e15b12b6 	ldrh	r1, [fp, #-38]	; 0xffffffda
   3cf84:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
   3cf88:	e12fff33 	blx	r3
   3cf8c:	e1a03000 	mov	r3, r0
   3cf90:	e3530000 	cmp	r3, #0
   3cf94:	0a000006 	beq	3cfb4 <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2fc>
   3cf98:	e3a03085 	mov	r3, #133	; 0x85
   3cf9c:	e59f2044 	ldr	r2, [pc, #68]	; 3cfe8 <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x330>
   3cfa0:	e59f1044 	ldr	r1, [pc, #68]	; 3cfec <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x334>
   3cfa4:	e59f0054 	ldr	r0, [pc, #84]	; 3d000 <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x348>
   3cfa8:	ebff5091 	bl	111f4 <printf@plt>
   3cfac:	e3a03001 	mov	r3, #1
   3cfb0:	ea000009 	b	3cfdc <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x324>
   3cfb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3cfb8:	e2833001 	add	r3, r3, #1
   3cfbc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   3cfc0:	eaffff51 	b	3cd0c <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x54>
   3cfc4:	e3a0308a 	mov	r3, #138	; 0x8a
   3cfc8:	e59f2018 	ldr	r2, [pc, #24]	; 3cfe8 <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x330>
   3cfcc:	e59f1018 	ldr	r1, [pc, #24]	; 3cfec <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x334>
   3cfd0:	e59f0028 	ldr	r0, [pc, #40]	; 3d000 <LightSetChain::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x348>
   3cfd4:	ebff5086 	bl	111f4 <printf@plt>
   3cfd8:	e3a03000 	mov	r3, #0
   3cfdc:	e1a00003 	mov	r0, r3
   3cfe0:	e24bd018 	sub	sp, fp, #24
   3cfe4:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   3cfe8:	0004a248 	.word	0x0004a248
   3cfec:	00049fd8 	.word	0x00049fd8
   3cff0:	0004a018 	.word	0x0004a018
   3cff4:	0004a038 	.word	0x0004a038
   3cff8:	0004a0c0 	.word	0x0004a0c0
   3cffc:	0004a0d0 	.word	0x0004a0d0
   3d000:	0004a028 	.word	0x0004a028

0003d004 <LightSetChain::Add(LightSet*, int)>:
   3d004:	e92d4810 	push	{r4, fp, lr}
   3d008:	e28db008 	add	fp, sp, #8
   3d00c:	e24dd01c 	sub	sp, sp, #28
   3d010:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   3d014:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   3d018:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   3d01c:	e3a0308f 	mov	r3, #143	; 0x8f
   3d020:	e59f23b4 	ldr	r2, [pc, #948]	; 3d3dc <LightSetChain::Add(LightSet*, int)+0x3d8>
   3d024:	e59f13b4 	ldr	r1, [pc, #948]	; 3d3e0 <LightSetChain::Add(LightSet*, int)+0x3dc>
   3d028:	e59f03b4 	ldr	r0, [pc, #948]	; 3d3e4 <LightSetChain::Add(LightSet*, int)+0x3e0>
   3d02c:	ebff5070 	bl	111f4 <printf@plt>
   3d030:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d034:	e5d33004 	ldrb	r3, [r3, #4]
   3d038:	e3530010 	cmp	r3, #16
   3d03c:	1a000006 	bne	3d05c <LightSetChain::Add(LightSet*, int)+0x58>
   3d040:	e3a03092 	mov	r3, #146	; 0x92
   3d044:	e59f2390 	ldr	r2, [pc, #912]	; 3d3dc <LightSetChain::Add(LightSet*, int)+0x3d8>
   3d048:	e59f1390 	ldr	r1, [pc, #912]	; 3d3e0 <LightSetChain::Add(LightSet*, int)+0x3dc>
   3d04c:	e59f0394 	ldr	r0, [pc, #916]	; 3d3e8 <LightSetChain::Add(LightSet*, int)+0x3e4>
   3d050:	ebff5067 	bl	111f4 <printf@plt>
   3d054:	e3a03000 	mov	r3, #0
   3d058:	ea0000dc 	b	3d3d0 <LightSetChain::Add(LightSet*, int)+0x3cc>
   3d05c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3d060:	e3530000 	cmp	r3, #0
   3d064:	0a0000d3 	beq	3d3b8 <LightSetChain::Add(LightSet*, int)+0x3b4>
   3d068:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d06c:	e1d330bc 	ldrh	r3, [r3, #12]
   3d070:	e1a01003 	mov	r1, r3
   3d074:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d078:	e1d330be 	ldrh	r3, [r3, #14]
   3d07c:	e1a02003 	mov	r2, r3
   3d080:	e59f0364 	ldr	r0, [pc, #868]	; 3d3ec <LightSetChain::Add(LightSet*, int)+0x3e8>
   3d084:	ebff505a 	bl	111f4 <printf@plt>
   3d088:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3d08c:	e5933000 	ldr	r3, [r3]
   3d090:	e2833024 	add	r3, r3, #36	; 0x24
   3d094:	e5933000 	ldr	r3, [r3]
   3d098:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   3d09c:	e12fff33 	blx	r3
   3d0a0:	e1a03000 	mov	r3, r0
   3d0a4:	e3530000 	cmp	r3, #0
   3d0a8:	0a000013 	beq	3d0fc <LightSetChain::Add(LightSet*, int)+0xf8>
   3d0ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3d0b0:	e5933000 	ldr	r3, [r3]
   3d0b4:	e2833028 	add	r3, r3, #40	; 0x28
   3d0b8:	e5933000 	ldr	r3, [r3]
   3d0bc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   3d0c0:	e12fff33 	blx	r3
   3d0c4:	e1a03000 	mov	r3, r0
   3d0c8:	e1a04003 	mov	r4, r3
   3d0cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3d0d0:	e5933000 	ldr	r3, [r3]
   3d0d4:	e2833024 	add	r3, r3, #36	; 0x24
   3d0d8:	e5933000 	ldr	r3, [r3]
   3d0dc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   3d0e0:	e12fff33 	blx	r3
   3d0e4:	e1a03000 	mov	r3, r0
   3d0e8:	e0443003 	sub	r3, r4, r3
   3d0ec:	e3530c02 	cmp	r3, #512	; 0x200
   3d0f0:	aa000001 	bge	3d0fc <LightSetChain::Add(LightSet*, int)+0xf8>
   3d0f4:	e3a03001 	mov	r3, #1
   3d0f8:	ea000000 	b	3d100 <LightSetChain::Add(LightSet*, int)+0xfc>
   3d0fc:	e3a03000 	mov	r3, #0
   3d100:	e54b300d 	strb	r3, [fp, #-13]
   3d104:	e55b300d 	ldrb	r3, [fp, #-13]
   3d108:	e3530000 	cmp	r3, #0
   3d10c:	0a0000a2 	beq	3d39c <LightSetChain::Add(LightSet*, int)+0x398>
   3d110:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d114:	e1d330bc 	ldrh	r3, [r3, #12]
   3d118:	e59f22d0 	ldr	r2, [pc, #720]	; 3d3f0 <LightSetChain::Add(LightSet*, int)+0x3ec>
   3d11c:	e1530002 	cmp	r3, r2
   3d120:	1a00002d 	bne	3d1dc <LightSetChain::Add(LightSet*, int)+0x1d8>
   3d124:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d128:	e5933008 	ldr	r3, [r3, #8]
   3d12c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   3d130:	e5832000 	str	r2, [r3]
   3d134:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d138:	e5933008 	ldr	r3, [r3, #8]
   3d13c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   3d140:	e5832004 	str	r2, [r3, #4]
   3d144:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d148:	e3a02001 	mov	r2, #1
   3d14c:	e5c32004 	strb	r2, [r3, #4]
   3d150:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3d154:	e5933000 	ldr	r3, [r3]
   3d158:	e2833024 	add	r3, r3, #36	; 0x24
   3d15c:	e5933000 	ldr	r3, [r3]
   3d160:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   3d164:	e12fff33 	blx	r3
   3d168:	e1a03000 	mov	r3, r0
   3d16c:	e1a02003 	mov	r2, r3
   3d170:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d174:	e1c320bc 	strh	r2, [r3, #12]
   3d178:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3d17c:	e5933000 	ldr	r3, [r3]
   3d180:	e2833028 	add	r3, r3, #40	; 0x28
   3d184:	e5933000 	ldr	r3, [r3]
   3d188:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   3d18c:	e12fff33 	blx	r3
   3d190:	e1a03000 	mov	r3, r0
   3d194:	e1a02003 	mov	r2, r3
   3d198:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d19c:	e1c320be 	strh	r2, [r3, #14]
   3d1a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d1a4:	e1d330bc 	ldrh	r3, [r3, #12]
   3d1a8:	e1a01003 	mov	r1, r3
   3d1ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d1b0:	e1d330be 	ldrh	r3, [r3, #14]
   3d1b4:	e1a02003 	mov	r2, r3
   3d1b8:	e59f022c 	ldr	r0, [pc, #556]	; 3d3ec <LightSetChain::Add(LightSet*, int)+0x3e8>
   3d1bc:	ebff500c 	bl	111f4 <printf@plt>
   3d1c0:	e3a030ab 	mov	r3, #171	; 0xab
   3d1c4:	e59f2210 	ldr	r2, [pc, #528]	; 3d3dc <LightSetChain::Add(LightSet*, int)+0x3d8>
   3d1c8:	e59f1210 	ldr	r1, [pc, #528]	; 3d3e0 <LightSetChain::Add(LightSet*, int)+0x3dc>
   3d1cc:	e59f0214 	ldr	r0, [pc, #532]	; 3d3e8 <LightSetChain::Add(LightSet*, int)+0x3e4>
   3d1d0:	ebff5007 	bl	111f4 <printf@plt>
   3d1d4:	e3a03001 	mov	r3, #1
   3d1d8:	ea00007c 	b	3d3d0 <LightSetChain::Add(LightSet*, int)+0x3cc>
   3d1dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d1e0:	e5932008 	ldr	r2, [r3, #8]
   3d1e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d1e8:	e5d33004 	ldrb	r3, [r3, #4]
   3d1ec:	e1a03183 	lsl	r3, r3, #3
   3d1f0:	e0823003 	add	r3, r2, r3
   3d1f4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   3d1f8:	e5832000 	str	r2, [r3]
   3d1fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d200:	e5932008 	ldr	r2, [r3, #8]
   3d204:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d208:	e5d33004 	ldrb	r3, [r3, #4]
   3d20c:	e1a03183 	lsl	r3, r3, #3
   3d210:	e0823003 	add	r3, r2, r3
   3d214:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   3d218:	e5832004 	str	r2, [r3, #4]
   3d21c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d220:	e5d33004 	ldrb	r3, [r3, #4]
   3d224:	e2833001 	add	r3, r3, #1
   3d228:	e6ef2073 	uxtb	r2, r3
   3d22c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d230:	e5c32004 	strb	r2, [r3, #4]
   3d234:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3d238:	e5933000 	ldr	r3, [r3]
   3d23c:	e2833024 	add	r3, r3, #36	; 0x24
   3d240:	e5933000 	ldr	r3, [r3]
   3d244:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   3d248:	e12fff33 	blx	r3
   3d24c:	e1a03000 	mov	r3, r0
   3d250:	e1a04003 	mov	r4, r3
   3d254:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3d258:	e5933000 	ldr	r3, [r3]
   3d25c:	e2833028 	add	r3, r3, #40	; 0x28
   3d260:	e5933000 	ldr	r3, [r3]
   3d264:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   3d268:	e12fff33 	blx	r3
   3d26c:	e1a03000 	mov	r3, r0
   3d270:	e1a02003 	mov	r2, r3
   3d274:	e1a01004 	mov	r1, r4
   3d278:	e59f0174 	ldr	r0, [pc, #372]	; 3d3f4 <LightSetChain::Add(LightSet*, int)+0x3f0>
   3d27c:	ebff4fdc 	bl	111f4 <printf@plt>
   3d280:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d284:	e1d320bc 	ldrh	r2, [r3, #12]
   3d288:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d28c:	e1d330be 	ldrh	r3, [r3, #14]
   3d290:	e0823003 	add	r3, r2, r3
   3d294:	e6ff3073 	uxth	r3, r3
   3d298:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
   3d29c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d2a0:	e283400c 	add	r4, r3, #12
   3d2a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3d2a8:	e5933000 	ldr	r3, [r3]
   3d2ac:	e2833024 	add	r3, r3, #36	; 0x24
   3d2b0:	e5933000 	ldr	r3, [r3]
   3d2b4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   3d2b8:	e12fff33 	blx	r3
   3d2bc:	e1a03000 	mov	r3, r0
   3d2c0:	e14b31b0 	strh	r3, [fp, #-16]
   3d2c4:	e24b3010 	sub	r3, fp, #16
   3d2c8:	e1a01003 	mov	r1, r3
   3d2cc:	e1a00004 	mov	r0, r4
   3d2d0:	ebff6ce8 	bl	18678 <unsigned short const& std::min<unsigned short>(unsigned short const&, unsigned short const&)>
   3d2d4:	e1a03000 	mov	r3, r0
   3d2d8:	e1d320b0 	ldrh	r2, [r3]
   3d2dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d2e0:	e1c320bc 	strh	r2, [r3, #12]
   3d2e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3d2e8:	e5933000 	ldr	r3, [r3]
   3d2ec:	e2833024 	add	r3, r3, #36	; 0x24
   3d2f0:	e5933000 	ldr	r3, [r3]
   3d2f4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   3d2f8:	e12fff33 	blx	r3
   3d2fc:	e1a03000 	mov	r3, r0
   3d300:	e1a04003 	mov	r4, r3
   3d304:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3d308:	e5933000 	ldr	r3, [r3]
   3d30c:	e2833028 	add	r3, r3, #40	; 0x28
   3d310:	e5933000 	ldr	r3, [r3]
   3d314:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   3d318:	e12fff33 	blx	r3
   3d31c:	e1a03000 	mov	r3, r0
   3d320:	e0843003 	add	r3, r4, r3
   3d324:	e6ff3073 	uxth	r3, r3
   3d328:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
   3d32c:	e24b2014 	sub	r2, fp, #20
   3d330:	e24b3012 	sub	r3, fp, #18
   3d334:	e1a01002 	mov	r1, r2
   3d338:	e1a00003 	mov	r0, r3
   3d33c:	ebffb1f4 	bl	29b14 <unsigned short const& std::max<unsigned short>(unsigned short const&, unsigned short const&)>
   3d340:	e1a03000 	mov	r3, r0
   3d344:	e1d320b0 	ldrh	r2, [r3]
   3d348:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d34c:	e1d330bc 	ldrh	r3, [r3, #12]
   3d350:	e0423003 	sub	r3, r2, r3
   3d354:	e6ff2073 	uxth	r2, r3
   3d358:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d35c:	e1c320be 	strh	r2, [r3, #14]
   3d360:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d364:	e1d330bc 	ldrh	r3, [r3, #12]
   3d368:	e1a01003 	mov	r1, r3
   3d36c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d370:	e1d330be 	ldrh	r3, [r3, #14]
   3d374:	e1a02003 	mov	r2, r3
   3d378:	e59f006c 	ldr	r0, [pc, #108]	; 3d3ec <LightSetChain::Add(LightSet*, int)+0x3e8>
   3d37c:	ebff4f9c 	bl	111f4 <printf@plt>
   3d380:	e3a030bf 	mov	r3, #191	; 0xbf
   3d384:	e59f2050 	ldr	r2, [pc, #80]	; 3d3dc <LightSetChain::Add(LightSet*, int)+0x3d8>
   3d388:	e59f1050 	ldr	r1, [pc, #80]	; 3d3e0 <LightSetChain::Add(LightSet*, int)+0x3dc>
   3d38c:	e59f0054 	ldr	r0, [pc, #84]	; 3d3e8 <LightSetChain::Add(LightSet*, int)+0x3e4>
   3d390:	ebff4f97 	bl	111f4 <printf@plt>
   3d394:	e3a03001 	mov	r3, #1
   3d398:	ea00000c 	b	3d3d0 <LightSetChain::Add(LightSet*, int)+0x3cc>
   3d39c:	e3a030c2 	mov	r3, #194	; 0xc2
   3d3a0:	e59f2034 	ldr	r2, [pc, #52]	; 3d3dc <LightSetChain::Add(LightSet*, int)+0x3d8>
   3d3a4:	e59f1034 	ldr	r1, [pc, #52]	; 3d3e0 <LightSetChain::Add(LightSet*, int)+0x3dc>
   3d3a8:	e59f0038 	ldr	r0, [pc, #56]	; 3d3e8 <LightSetChain::Add(LightSet*, int)+0x3e4>
   3d3ac:	ebff4f90 	bl	111f4 <printf@plt>
   3d3b0:	e3a03000 	mov	r3, #0
   3d3b4:	ea000005 	b	3d3d0 <LightSetChain::Add(LightSet*, int)+0x3cc>
   3d3b8:	e3a030c7 	mov	r3, #199	; 0xc7
   3d3bc:	e59f2018 	ldr	r2, [pc, #24]	; 3d3dc <LightSetChain::Add(LightSet*, int)+0x3d8>
   3d3c0:	e59f1018 	ldr	r1, [pc, #24]	; 3d3e0 <LightSetChain::Add(LightSet*, int)+0x3dc>
   3d3c4:	e59f001c 	ldr	r0, [pc, #28]	; 3d3e8 <LightSetChain::Add(LightSet*, int)+0x3e4>
   3d3c8:	ebff4f89 	bl	111f4 <printf@plt>
   3d3cc:	e3a03000 	mov	r3, #0
   3d3d0:	e1a00003 	mov	r0, r3
   3d3d4:	e24bd008 	sub	sp, fp, #8
   3d3d8:	e8bd8810 	pop	{r4, fp, pc}
   3d3dc:	0004a254 	.word	0x0004a254
   3d3e0:	00049fd8 	.word	0x00049fd8
   3d3e4:	0004a018 	.word	0x0004a018
   3d3e8:	0004a028 	.word	0x0004a028
   3d3ec:	0004a0dc 	.word	0x0004a0dc
   3d3f0:	0000ffff 	.word	0x0000ffff
   3d3f4:	0004a108 	.word	0x0004a108

0003d3f8 <LightSetChain::GetSize() const>:
   3d3f8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3d3fc:	e28db000 	add	fp, sp, #0
   3d400:	e24dd00c 	sub	sp, sp, #12
   3d404:	e50b0008 	str	r0, [fp, #-8]
   3d408:	e51b3008 	ldr	r3, [fp, #-8]
   3d40c:	e5d33004 	ldrb	r3, [r3, #4]
   3d410:	e1a00003 	mov	r0, r3
   3d414:	e28bd000 	add	sp, fp, #0
   3d418:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3d41c:	e12fff1e 	bx	lr

0003d420 <LightSetChain::GetType(unsigned char) const>:
   3d420:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3d424:	e28db000 	add	fp, sp, #0
   3d428:	e24dd00c 	sub	sp, sp, #12
   3d42c:	e50b0008 	str	r0, [fp, #-8]
   3d430:	e1a03001 	mov	r3, r1
   3d434:	e54b3009 	strb	r3, [fp, #-9]
   3d438:	e55b3009 	ldrb	r3, [fp, #-9]
   3d43c:	e3530010 	cmp	r3, #16
   3d440:	9a000001 	bls	3d44c <LightSetChain::GetType(unsigned char) const+0x2c>
   3d444:	e3e03000 	mvn	r3, #0
   3d448:	ea000005 	b	3d464 <LightSetChain::GetType(unsigned char) const+0x44>
   3d44c:	e51b3008 	ldr	r3, [fp, #-8]
   3d450:	e5932008 	ldr	r2, [r3, #8]
   3d454:	e55b3009 	ldrb	r3, [fp, #-9]
   3d458:	e1a03183 	lsl	r3, r3, #3
   3d45c:	e0823003 	add	r3, r2, r3
   3d460:	e5933004 	ldr	r3, [r3, #4]
   3d464:	e1a00003 	mov	r0, r3
   3d468:	e28bd000 	add	sp, fp, #0
   3d46c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3d470:	e12fff1e 	bx	lr

0003d474 <LightSetChain::GetLightSet(unsigned char)>:
   3d474:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3d478:	e28db000 	add	fp, sp, #0
   3d47c:	e24dd00c 	sub	sp, sp, #12
   3d480:	e50b0008 	str	r0, [fp, #-8]
   3d484:	e1a03001 	mov	r3, r1
   3d488:	e54b3009 	strb	r3, [fp, #-9]
   3d48c:	e55b3009 	ldrb	r3, [fp, #-9]
   3d490:	e3530010 	cmp	r3, #16
   3d494:	9a000001 	bls	3d4a0 <LightSetChain::GetLightSet(unsigned char)+0x2c>
   3d498:	e3a03000 	mov	r3, #0
   3d49c:	ea000005 	b	3d4b8 <LightSetChain::GetLightSet(unsigned char)+0x44>
   3d4a0:	e51b3008 	ldr	r3, [fp, #-8]
   3d4a4:	e5932008 	ldr	r2, [r3, #8]
   3d4a8:	e55b3009 	ldrb	r3, [fp, #-9]
   3d4ac:	e1a03183 	lsl	r3, r3, #3
   3d4b0:	e0823003 	add	r3, r2, r3
   3d4b4:	e5933000 	ldr	r3, [r3]
   3d4b8:	e1a00003 	mov	r0, r3
   3d4bc:	e28bd000 	add	sp, fp, #0
   3d4c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3d4c4:	e12fff1e 	bx	lr

0003d4c8 <LightSetChain::IsEmpty() const>:
   3d4c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3d4cc:	e28db000 	add	fp, sp, #0
   3d4d0:	e24dd00c 	sub	sp, sp, #12
   3d4d4:	e50b0008 	str	r0, [fp, #-8]
   3d4d8:	e51b3008 	ldr	r3, [fp, #-8]
   3d4dc:	e5d33004 	ldrb	r3, [r3, #4]
   3d4e0:	e3530000 	cmp	r3, #0
   3d4e4:	03a03001 	moveq	r3, #1
   3d4e8:	13a03000 	movne	r3, #0
   3d4ec:	e6ef3073 	uxtb	r3, r3
   3d4f0:	e1a00003 	mov	r0, r3
   3d4f4:	e28bd000 	add	sp, fp, #0
   3d4f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3d4fc:	e12fff1e 	bx	lr

0003d500 <LightSetChain::Exist(LightSet*)>:
   3d500:	e92d4800 	push	{fp, lr}
   3d504:	e28db004 	add	fp, sp, #4
   3d508:	e24dd008 	sub	sp, sp, #8
   3d50c:	e50b0008 	str	r0, [fp, #-8]
   3d510:	e50b100c 	str	r1, [fp, #-12]
   3d514:	e3a03001 	mov	r3, #1
   3d518:	e3e02000 	mvn	r2, #0
   3d51c:	e51b100c 	ldr	r1, [fp, #-12]
   3d520:	e51b0008 	ldr	r0, [fp, #-8]
   3d524:	eb000003 	bl	3d538 <LightSetChain::Exist(LightSet*, int, bool)>
   3d528:	e1a03000 	mov	r3, r0
   3d52c:	e1a00003 	mov	r0, r3
   3d530:	e24bd004 	sub	sp, fp, #4
   3d534:	e8bd8800 	pop	{fp, pc}

0003d538 <LightSetChain::Exist(LightSet*, int, bool)>:
   3d538:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3d53c:	e28db000 	add	fp, sp, #0
   3d540:	e24dd01c 	sub	sp, sp, #28
   3d544:	e50b0010 	str	r0, [fp, #-16]
   3d548:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   3d54c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   3d550:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   3d554:	e3a03000 	mov	r3, #0
   3d558:	e50b3008 	str	r3, [fp, #-8]
   3d55c:	e51b3010 	ldr	r3, [fp, #-16]
   3d560:	e5d33004 	ldrb	r3, [r3, #4]
   3d564:	e1a02003 	mov	r2, r3
   3d568:	e51b3008 	ldr	r3, [fp, #-8]
   3d56c:	e1530002 	cmp	r3, r2
   3d570:	2a00001a 	bcs	3d5e0 <LightSetChain::Exist(LightSet*, int, bool)+0xa8>
   3d574:	e51b3010 	ldr	r3, [fp, #-16]
   3d578:	e5932008 	ldr	r2, [r3, #8]
   3d57c:	e51b3008 	ldr	r3, [fp, #-8]
   3d580:	e1a03183 	lsl	r3, r3, #3
   3d584:	e0823003 	add	r3, r2, r3
   3d588:	e5933000 	ldr	r3, [r3]
   3d58c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   3d590:	e1520003 	cmp	r2, r3
   3d594:	1a00000d 	bne	3d5d0 <LightSetChain::Exist(LightSet*, int, bool)+0x98>
   3d598:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   3d59c:	e3530000 	cmp	r3, #0
   3d5a0:	1a000008 	bne	3d5c8 <LightSetChain::Exist(LightSet*, int, bool)+0x90>
   3d5a4:	e51b3010 	ldr	r3, [fp, #-16]
   3d5a8:	e5932008 	ldr	r2, [r3, #8]
   3d5ac:	e51b3008 	ldr	r3, [fp, #-8]
   3d5b0:	e1a03183 	lsl	r3, r3, #3
   3d5b4:	e0823003 	add	r3, r2, r3
   3d5b8:	e5933004 	ldr	r3, [r3, #4]
   3d5bc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   3d5c0:	e1520003 	cmp	r2, r3
   3d5c4:	1a000001 	bne	3d5d0 <LightSetChain::Exist(LightSet*, int, bool)+0x98>
   3d5c8:	e3a03001 	mov	r3, #1
   3d5cc:	ea000004 	b	3d5e4 <LightSetChain::Exist(LightSet*, int, bool)+0xac>
   3d5d0:	e51b3008 	ldr	r3, [fp, #-8]
   3d5d4:	e2833001 	add	r3, r3, #1
   3d5d8:	e50b3008 	str	r3, [fp, #-8]
   3d5dc:	eaffffde 	b	3d55c <LightSetChain::Exist(LightSet*, int, bool)+0x24>
   3d5e0:	e3a03000 	mov	r3, #0
   3d5e4:	e1a00003 	mov	r0, r3
   3d5e8:	e28bd000 	add	sp, fp, #0
   3d5ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3d5f0:	e12fff1e 	bx	lr

0003d5f4 <LightSetChain::Dump(unsigned char)>:
   3d5f4:	e92d4800 	push	{fp, lr}
   3d5f8:	e28db004 	add	fp, sp, #4
   3d5fc:	e24dd010 	sub	sp, sp, #16
   3d600:	e50b0010 	str	r0, [fp, #-16]
   3d604:	e1a03001 	mov	r3, r1
   3d608:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   3d60c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   3d610:	e3530010 	cmp	r3, #16
   3d614:	9a000001 	bls	3d620 <LightSetChain::Dump(unsigned char)+0x2c>
   3d618:	e3a03010 	mov	r3, #16
   3d61c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   3d620:	e51b3010 	ldr	r3, [fp, #-16]
   3d624:	e5d33004 	ldrb	r3, [r3, #4]
   3d628:	e1a02003 	mov	r2, r3
   3d62c:	e3a01010 	mov	r1, #16
   3d630:	e59f0084 	ldr	r0, [pc, #132]	; 3d6bc <LightSetChain::Dump(unsigned char)+0xc8>
   3d634:	ebff4eee 	bl	111f4 <printf@plt>
   3d638:	e59f0080 	ldr	r0, [pc, #128]	; 3d6c0 <LightSetChain::Dump(unsigned char)+0xcc>
   3d63c:	ebff4ef8 	bl	11224 <puts@plt>
   3d640:	e3a03000 	mov	r3, #0
   3d644:	e50b3008 	str	r3, [fp, #-8]
   3d648:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   3d64c:	e51b2008 	ldr	r2, [fp, #-8]
   3d650:	e1520003 	cmp	r2, r3
   3d654:	2a000013 	bcs	3d6a8 <LightSetChain::Dump(unsigned char)+0xb4>
   3d658:	e51b3010 	ldr	r3, [fp, #-16]
   3d65c:	e5932008 	ldr	r2, [r3, #8]
   3d660:	e51b3008 	ldr	r3, [fp, #-8]
   3d664:	e1a03183 	lsl	r3, r3, #3
   3d668:	e0823003 	add	r3, r2, r3
   3d66c:	e5931000 	ldr	r1, [r3]
   3d670:	e51b3010 	ldr	r3, [fp, #-16]
   3d674:	e5932008 	ldr	r2, [r3, #8]
   3d678:	e51b3008 	ldr	r3, [fp, #-8]
   3d67c:	e1a03183 	lsl	r3, r3, #3
   3d680:	e0823003 	add	r3, r2, r3
   3d684:	e5933004 	ldr	r3, [r3, #4]
   3d688:	e1a02001 	mov	r2, r1
   3d68c:	e51b1008 	ldr	r1, [fp, #-8]
   3d690:	e59f002c 	ldr	r0, [pc, #44]	; 3d6c4 <LightSetChain::Dump(unsigned char)+0xd0>
   3d694:	ebff4ed6 	bl	111f4 <printf@plt>
   3d698:	e51b3008 	ldr	r3, [fp, #-8]
   3d69c:	e2833001 	add	r3, r3, #1
   3d6a0:	e50b3008 	str	r3, [fp, #-8]
   3d6a4:	eaffffe7 	b	3d648 <LightSetChain::Dump(unsigned char)+0x54>
   3d6a8:	e3a0000a 	mov	r0, #10
   3d6ac:	ebff4eeb 	bl	11260 <putchar@plt>
   3d6b0:	e1a00000 	nop			; (mov r0, r0)
   3d6b4:	e24bd004 	sub	sp, fp, #4
   3d6b8:	e8bd8800 	pop	{fp, pc}
   3d6bc:	0004a150 	.word	0x0004a150
   3d6c0:	0004a174 	.word	0x0004a174
   3d6c4:	0004a188 	.word	0x0004a188

0003d6c8 <LightSetChain::Dump()>:
   3d6c8:	e92d4800 	push	{fp, lr}
   3d6cc:	e28db004 	add	fp, sp, #4
   3d6d0:	e24dd008 	sub	sp, sp, #8
   3d6d4:	e50b0008 	str	r0, [fp, #-8]
   3d6d8:	e51b3008 	ldr	r3, [fp, #-8]
   3d6dc:	e5d33004 	ldrb	r3, [r3, #4]
   3d6e0:	e1a01003 	mov	r1, r3
   3d6e4:	e51b0008 	ldr	r0, [fp, #-8]
   3d6e8:	ebffffc1 	bl	3d5f4 <LightSetChain::Dump(unsigned char)>
   3d6ec:	e1a00000 	nop			; (mov r0, r0)
   3d6f0:	e24bd004 	sub	sp, fp, #4
   3d6f4:	e8bd8800 	pop	{fp, pc}

0003d6f8 <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)>:
   3d6f8:	e92d4800 	push	{fp, lr}
   3d6fc:	e28db004 	add	fp, sp, #4
   3d700:	e24dd018 	sub	sp, sp, #24
   3d704:	e50b0010 	str	r0, [fp, #-16]
   3d708:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   3d70c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   3d710:	e51b3010 	ldr	r3, [fp, #-16]
   3d714:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   3d718:	e5832000 	str	r2, [r3]
   3d71c:	e51b3010 	ldr	r3, [fp, #-16]
   3d720:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   3d724:	e5832004 	str	r2, [r3, #4]
   3d728:	e51b3010 	ldr	r3, [fp, #-16]
   3d72c:	e3a02000 	mov	r2, #0
   3d730:	e5832008 	str	r2, [r3, #8]
   3d734:	e3a0302e 	mov	r3, #46	; 0x2e
   3d738:	e59f20d8 	ldr	r2, [pc, #216]	; 3d818 <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)+0x120>
   3d73c:	e59f10d8 	ldr	r1, [pc, #216]	; 3d81c <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)+0x124>
   3d740:	e59f00d8 	ldr	r0, [pc, #216]	; 3d820 <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)+0x128>
   3d744:	ebff4eaa 	bl	111f4 <printf@plt>
   3d748:	e51b3010 	ldr	r3, [fp, #-16]
   3d74c:	e5933000 	ldr	r3, [r3]
   3d750:	e3530000 	cmp	r3, #0
   3d754:	1a000004 	bne	3d76c <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)+0x74>
   3d758:	e59f30c4 	ldr	r3, [pc, #196]	; 3d824 <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)+0x12c>
   3d75c:	e3a02030 	mov	r2, #48	; 0x30
   3d760:	e59f10b4 	ldr	r1, [pc, #180]	; 3d81c <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)+0x124>
   3d764:	e59f00bc 	ldr	r0, [pc, #188]	; 3d828 <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)+0x130>
   3d768:	ebff4ee9 	bl	11314 <__assert_fail@plt>
   3d76c:	e51b3010 	ldr	r3, [fp, #-16]
   3d770:	e5933004 	ldr	r3, [r3, #4]
   3d774:	e3530000 	cmp	r3, #0
   3d778:	1a000004 	bne	3d790 <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)+0x98>
   3d77c:	e59f30a0 	ldr	r3, [pc, #160]	; 3d824 <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)+0x12c>
   3d780:	e3a02031 	mov	r2, #49	; 0x31
   3d784:	e59f1090 	ldr	r1, [pc, #144]	; 3d81c <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)+0x124>
   3d788:	e59f009c 	ldr	r0, [pc, #156]	; 3d82c <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)+0x134>
   3d78c:	ebff4ee0 	bl	11314 <__assert_fail@plt>
   3d790:	e3a03000 	mov	r3, #0
   3d794:	e50b3008 	str	r3, [fp, #-8]
   3d798:	e51b3010 	ldr	r3, [fp, #-16]
   3d79c:	e5933004 	ldr	r3, [r3, #4]
   3d7a0:	e51b2008 	ldr	r2, [fp, #-8]
   3d7a4:	e1520003 	cmp	r2, r3
   3d7a8:	2a000011 	bcs	3d7f4 <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)+0xfc>
   3d7ac:	e51b3010 	ldr	r3, [fp, #-16]
   3d7b0:	e5932000 	ldr	r2, [r3]
   3d7b4:	e51b3008 	ldr	r3, [fp, #-8]
   3d7b8:	e1a03103 	lsl	r3, r3, #2
   3d7bc:	e0823003 	add	r3, r2, r3
   3d7c0:	e3a02000 	mov	r2, #0
   3d7c4:	e5c32002 	strb	r2, [r3, #2]
   3d7c8:	e51b3010 	ldr	r3, [fp, #-16]
   3d7cc:	e5932000 	ldr	r2, [r3]
   3d7d0:	e51b3008 	ldr	r3, [fp, #-8]
   3d7d4:	e1a03103 	lsl	r3, r3, #2
   3d7d8:	e0823003 	add	r3, r2, r3
   3d7dc:	e3e02000 	mvn	r2, #0
   3d7e0:	e1c320b0 	strh	r2, [r3]
   3d7e4:	e51b3008 	ldr	r3, [fp, #-8]
   3d7e8:	e2833001 	add	r3, r3, #1
   3d7ec:	e50b3008 	str	r3, [fp, #-8]
   3d7f0:	eaffffe8 	b	3d798 <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)+0xa0>
   3d7f4:	e3a03038 	mov	r3, #56	; 0x38
   3d7f8:	e59f2018 	ldr	r2, [pc, #24]	; 3d818 <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)+0x120>
   3d7fc:	e59f1018 	ldr	r1, [pc, #24]	; 3d81c <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)+0x124>
   3d800:	e59f0028 	ldr	r0, [pc, #40]	; 3d830 <DmxSlotInfo::DmxSlotInfo(lightset::SlotInfo*, unsigned int)+0x138>
   3d804:	ebff4e7a 	bl	111f4 <printf@plt>
   3d808:	e51b3010 	ldr	r3, [fp, #-16]
   3d80c:	e1a00003 	mov	r0, r3
   3d810:	e24bd004 	sub	sp, fp, #4
   3d814:	e8bd8800 	pop	{fp, pc}
   3d818:	0004a37c 	.word	0x0004a37c
   3d81c:	0004a268 	.word	0x0004a268
   3d820:	0004a27c 	.word	0x0004a27c
   3d824:	0004a388 	.word	0x0004a388
   3d828:	0004a28c 	.word	0x0004a28c
   3d82c:	0004a2ac 	.word	0x0004a2ac
   3d830:	0004a2bc 	.word	0x0004a2bc

0003d834 <DmxSlotInfo::~DmxSlotInfo()>:
   3d834:	e92d4800 	push	{fp, lr}
   3d838:	e28db004 	add	fp, sp, #4
   3d83c:	e24dd008 	sub	sp, sp, #8
   3d840:	e50b0008 	str	r0, [fp, #-8]
   3d844:	e3a0303c 	mov	r3, #60	; 0x3c
   3d848:	e59f2068 	ldr	r2, [pc, #104]	; 3d8b8 <DmxSlotInfo::~DmxSlotInfo()+0x84>
   3d84c:	e59f1068 	ldr	r1, [pc, #104]	; 3d8bc <DmxSlotInfo::~DmxSlotInfo()+0x88>
   3d850:	e59f0068 	ldr	r0, [pc, #104]	; 3d8c0 <DmxSlotInfo::~DmxSlotInfo()+0x8c>
   3d854:	ebff4e66 	bl	111f4 <printf@plt>
   3d858:	e51b3008 	ldr	r3, [fp, #-8]
   3d85c:	e5933008 	ldr	r3, [r3, #8]
   3d860:	e3530000 	cmp	r3, #0
   3d864:	0a00000a 	beq	3d894 <DmxSlotInfo::~DmxSlotInfo()+0x60>
   3d868:	e51b3008 	ldr	r3, [fp, #-8]
   3d86c:	e5933008 	ldr	r3, [r3, #8]
   3d870:	e3530000 	cmp	r3, #0
   3d874:	0a000003 	beq	3d888 <DmxSlotInfo::~DmxSlotInfo()+0x54>
   3d878:	e51b3008 	ldr	r3, [fp, #-8]
   3d87c:	e5933008 	ldr	r3, [r3, #8]
   3d880:	e1a00003 	mov	r0, r3
   3d884:	ebff4ec3 	bl	11398 <operator delete[](void*)@plt>
   3d888:	e51b3008 	ldr	r3, [fp, #-8]
   3d88c:	e3a02000 	mov	r2, #0
   3d890:	e5832008 	str	r2, [r3, #8]
   3d894:	e3a03043 	mov	r3, #67	; 0x43
   3d898:	e59f2018 	ldr	r2, [pc, #24]	; 3d8b8 <DmxSlotInfo::~DmxSlotInfo()+0x84>
   3d89c:	e59f1018 	ldr	r1, [pc, #24]	; 3d8bc <DmxSlotInfo::~DmxSlotInfo()+0x88>
   3d8a0:	e59f001c 	ldr	r0, [pc, #28]	; 3d8c4 <DmxSlotInfo::~DmxSlotInfo()+0x90>
   3d8a4:	ebff4e52 	bl	111f4 <printf@plt>
   3d8a8:	e51b3008 	ldr	r3, [fp, #-8]
   3d8ac:	e1a00003 	mov	r0, r3
   3d8b0:	e24bd004 	sub	sp, fp, #4
   3d8b4:	e8bd8800 	pop	{fp, pc}
   3d8b8:	0004a3c0 	.word	0x0004a3c0
   3d8bc:	0004a268 	.word	0x0004a268
   3d8c0:	0004a27c 	.word	0x0004a27c
   3d8c4:	0004a2bc 	.word	0x0004a2bc

0003d8c8 <DmxSlotInfo::FromString(char const*, unsigned int&)>:
   3d8c8:	e92d4800 	push	{fp, lr}
   3d8cc:	e28db004 	add	fp, sp, #4
   3d8d0:	e24dd028 	sub	sp, sp, #40	; 0x28
   3d8d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   3d8d8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   3d8dc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   3d8e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3d8e4:	e3530000 	cmp	r3, #0
   3d8e8:	1a000004 	bne	3d900 <DmxSlotInfo::FromString(char const*, unsigned int&)+0x38>
   3d8ec:	e59f3118 	ldr	r3, [pc, #280]	; 3da0c <DmxSlotInfo::FromString(char const*, unsigned int&)+0x144>
   3d8f0:	e3a02047 	mov	r2, #71	; 0x47
   3d8f4:	e59f1114 	ldr	r1, [pc, #276]	; 3da10 <DmxSlotInfo::FromString(char const*, unsigned int&)+0x148>
   3d8f8:	e59f0114 	ldr	r0, [pc, #276]	; 3da14 <DmxSlotInfo::FromString(char const*, unsigned int&)+0x14c>
   3d8fc:	ebff4e84 	bl	11314 <__assert_fail@plt>
   3d900:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3d904:	e50b3008 	str	r3, [fp, #-8]
   3d908:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3d90c:	e3a02000 	mov	r2, #0
   3d910:	e5832000 	str	r2, [r3]
   3d914:	e3a03000 	mov	r3, #0
   3d918:	e50b300c 	str	r3, [fp, #-12]
   3d91c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d920:	e5933004 	ldr	r3, [r3, #4]
   3d924:	e51b200c 	ldr	r2, [fp, #-12]
   3d928:	e1520003 	cmp	r2, r3
   3d92c:	2a000028 	bcs	3d9d4 <DmxSlotInfo::FromString(char const*, unsigned int&)+0x10c>
   3d930:	e3a03000 	mov	r3, #0
   3d934:	e54b300d 	strb	r3, [fp, #-13]
   3d938:	e51b3008 	ldr	r3, [fp, #-8]
   3d93c:	e3530000 	cmp	r3, #0
   3d940:	0a000022 	beq	3d9d0 <DmxSlotInfo::FromString(char const*, unsigned int&)+0x108>
   3d944:	e24b3014 	sub	r3, fp, #20
   3d948:	e24b200d 	sub	r2, fp, #13
   3d94c:	e51b1008 	ldr	r1, [fp, #-8]
   3d950:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3d954:	eb00015d 	bl	3ded0 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)>
   3d958:	e50b0008 	str	r0, [fp, #-8]
   3d95c:	e55b300d 	ldrb	r3, [fp, #-13]
   3d960:	e3530000 	cmp	r3, #0
   3d964:	0a000015 	beq	3d9c0 <DmxSlotInfo::FromString(char const*, unsigned int&)+0xf8>
   3d968:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d96c:	e5932000 	ldr	r2, [r3]
   3d970:	e51b300c 	ldr	r3, [fp, #-12]
   3d974:	e1a03103 	lsl	r3, r3, #2
   3d978:	e0823003 	add	r3, r2, r3
   3d97c:	e55b2012 	ldrb	r2, [fp, #-18]	; 0xffffffee
   3d980:	e5c32002 	strb	r2, [r3, #2]
   3d984:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3d988:	e5932000 	ldr	r2, [r3]
   3d98c:	e51b300c 	ldr	r3, [fp, #-12]
   3d990:	e1a03103 	lsl	r3, r3, #2
   3d994:	e0823003 	add	r3, r2, r3
   3d998:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
   3d99c:	e1c320b0 	strh	r2, [r3]
   3d9a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3d9a4:	e5932000 	ldr	r2, [r3]
   3d9a8:	e3a01001 	mov	r1, #1
   3d9ac:	e51b300c 	ldr	r3, [fp, #-12]
   3d9b0:	e1a03311 	lsl	r3, r1, r3
   3d9b4:	e1822003 	orr	r2, r2, r3
   3d9b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3d9bc:	e5832000 	str	r2, [r3]
   3d9c0:	e51b300c 	ldr	r3, [fp, #-12]
   3d9c4:	e2833001 	add	r3, r3, #1
   3d9c8:	e50b300c 	str	r3, [fp, #-12]
   3d9cc:	eaffffd2 	b	3d91c <DmxSlotInfo::FromString(char const*, unsigned int&)+0x54>
   3d9d0:	e1a00000 	nop			; (mov r0, r0)
   3d9d4:	e59f303c 	ldr	r3, [pc, #60]	; 3da18 <DmxSlotInfo::FromString(char const*, unsigned int&)+0x150>
   3d9d8:	e5930000 	ldr	r0, [r3]
   3d9dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3d9e0:	e5933000 	ldr	r3, [r3]
   3d9e4:	e58d3004 	str	r3, [sp, #4]
   3d9e8:	e3a0305e 	mov	r3, #94	; 0x5e
   3d9ec:	e58d3000 	str	r3, [sp]
   3d9f0:	e59f3018 	ldr	r3, [pc, #24]	; 3da10 <DmxSlotInfo::FromString(char const*, unsigned int&)+0x148>
   3d9f4:	e59f2020 	ldr	r2, [pc, #32]	; 3da1c <DmxSlotInfo::FromString(char const*, unsigned int&)+0x154>
   3d9f8:	e59f1020 	ldr	r1, [pc, #32]	; 3da20 <DmxSlotInfo::FromString(char const*, unsigned int&)+0x158>
   3d9fc:	ebff4e8f 	bl	11440 <fprintf@plt>
   3da00:	e1a00000 	nop			; (mov r0, r0)
   3da04:	e24bd004 	sub	sp, fp, #4
   3da08:	e8bd8800 	pop	{fp, pc}
   3da0c:	0004a3d0 	.word	0x0004a3d0
   3da10:	0004a268 	.word	0x0004a268
   3da14:	0004a2cc 	.word	0x0004a2cc
   3da18:	0005c298 	.word	0x0005c298
   3da1c:	0004a408 	.word	0x0004a408
   3da20:	0004a2e0 	.word	0x0004a2e0

0003da24 <DmxSlotInfo::ToString(unsigned int)>:
   3da24:	e92d4800 	push	{fp, lr}
   3da28:	e28db004 	add	fp, sp, #4
   3da2c:	e24dd020 	sub	sp, sp, #32
   3da30:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   3da34:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   3da38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3da3c:	e5933008 	ldr	r3, [r3, #8]
   3da40:	e3530000 	cmp	r3, #0
   3da44:	1a000017 	bne	3daa8 <DmxSlotInfo::ToString(unsigned int)+0x84>
   3da48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3da4c:	e5932004 	ldr	r2, [r3, #4]
   3da50:	e1a03002 	mov	r3, r2
   3da54:	e1a03183 	lsl	r3, r3, #3
   3da58:	e0433002 	sub	r3, r3, r2
   3da5c:	e1a00003 	mov	r0, r3
   3da60:	ebff4e10 	bl	112a8 <operator new[](unsigned int)@plt>
   3da64:	e1a03000 	mov	r3, r0
   3da68:	e1a02003 	mov	r2, r3
   3da6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3da70:	e5832008 	str	r2, [r3, #8]
   3da74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3da78:	e5933008 	ldr	r3, [r3, #8]
   3da7c:	e3530000 	cmp	r3, #0
   3da80:	1a000004 	bne	3da98 <DmxSlotInfo::ToString(unsigned int)+0x74>
   3da84:	e59f3398 	ldr	r3, [pc, #920]	; 3de24 <DmxSlotInfo::ToString(unsigned int)+0x400>
   3da88:	e3a02064 	mov	r2, #100	; 0x64
   3da8c:	e59f1394 	ldr	r1, [pc, #916]	; 3de28 <DmxSlotInfo::ToString(unsigned int)+0x404>
   3da90:	e59f0394 	ldr	r0, [pc, #916]	; 3de2c <DmxSlotInfo::ToString(unsigned int)+0x408>
   3da94:	ebff4e1e 	bl	11314 <__assert_fail@plt>
   3da98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3da9c:	e5933008 	ldr	r3, [r3, #8]
   3daa0:	e3a02000 	mov	r2, #0
   3daa4:	e5c32000 	strb	r2, [r3]
   3daa8:	e59f3380 	ldr	r3, [pc, #896]	; 3de30 <DmxSlotInfo::ToString(unsigned int)+0x40c>
   3daac:	e5930000 	ldr	r0, [r3]
   3dab0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3dab4:	e58d3004 	str	r3, [sp, #4]
   3dab8:	e3a03069 	mov	r3, #105	; 0x69
   3dabc:	e58d3000 	str	r3, [sp]
   3dac0:	e59f3360 	ldr	r3, [pc, #864]	; 3de28 <DmxSlotInfo::ToString(unsigned int)+0x404>
   3dac4:	e59f2368 	ldr	r2, [pc, #872]	; 3de34 <DmxSlotInfo::ToString(unsigned int)+0x410>
   3dac8:	e59f1368 	ldr	r1, [pc, #872]	; 3de38 <DmxSlotInfo::ToString(unsigned int)+0x414>
   3dacc:	ebff4e5b 	bl	11440 <fprintf@plt>
   3dad0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3dad4:	e3530000 	cmp	r3, #0
   3dad8:	1a000006 	bne	3daf8 <DmxSlotInfo::ToString(unsigned int)+0xd4>
   3dadc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3dae0:	e5933008 	ldr	r3, [r3, #8]
   3dae4:	e3a02000 	mov	r2, #0
   3dae8:	e5c32000 	strb	r2, [r3]
   3daec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3daf0:	e5933008 	ldr	r3, [r3, #8]
   3daf4:	ea0000c7 	b	3de18 <DmxSlotInfo::ToString(unsigned int)+0x3f4>
   3daf8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3dafc:	e5933008 	ldr	r3, [r3, #8]
   3db00:	e50b3008 	str	r3, [fp, #-8]
   3db04:	e3a03000 	mov	r3, #0
   3db08:	e50b300c 	str	r3, [fp, #-12]
   3db0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3db10:	e5933004 	ldr	r3, [r3, #4]
   3db14:	e51b200c 	ldr	r2, [fp, #-12]
   3db18:	e1520003 	cmp	r2, r3
   3db1c:	2a0000a4 	bcs	3ddb4 <DmxSlotInfo::ToString(unsigned int)+0x390>
   3db20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3db24:	e2033001 	and	r3, r3, #1
   3db28:	e3530000 	cmp	r3, #0
   3db2c:	0a000099 	beq	3dd98 <DmxSlotInfo::ToString(unsigned int)+0x374>
   3db30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3db34:	e5932000 	ldr	r2, [r3]
   3db38:	e51b300c 	ldr	r3, [fp, #-12]
   3db3c:	e1a03103 	lsl	r3, r3, #2
   3db40:	e0823003 	add	r3, r2, r3
   3db44:	e5d33002 	ldrb	r3, [r3, #2]
   3db48:	e54b300d 	strb	r3, [fp, #-13]
   3db4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3db50:	e5932000 	ldr	r2, [r3]
   3db54:	e51b300c 	ldr	r3, [fp, #-12]
   3db58:	e1a03103 	lsl	r3, r3, #2
   3db5c:	e0823003 	add	r3, r2, r3
   3db60:	e1d330b0 	ldrh	r3, [r3]
   3db64:	e14b31b0 	strh	r3, [fp, #-16]
   3db68:	e55b300d 	ldrb	r3, [fp, #-13]
   3db6c:	e1a03223 	lsr	r3, r3, #4
   3db70:	e6ef3073 	uxtb	r3, r3
   3db74:	e3530009 	cmp	r3, #9
   3db78:	8a000005 	bhi	3db94 <DmxSlotInfo::ToString(unsigned int)+0x170>
   3db7c:	e55b300d 	ldrb	r3, [fp, #-13]
   3db80:	e1a03223 	lsr	r3, r3, #4
   3db84:	e6ef3073 	uxtb	r3, r3
   3db88:	e2833030 	add	r3, r3, #48	; 0x30
   3db8c:	e6ef2073 	uxtb	r2, r3
   3db90:	ea000004 	b	3dba8 <DmxSlotInfo::ToString(unsigned int)+0x184>
   3db94:	e55b300d 	ldrb	r3, [fp, #-13]
   3db98:	e1a03223 	lsr	r3, r3, #4
   3db9c:	e6ef3073 	uxtb	r3, r3
   3dba0:	e2833037 	add	r3, r3, #55	; 0x37
   3dba4:	e6ef2073 	uxtb	r2, r3
   3dba8:	e51b3008 	ldr	r3, [fp, #-8]
   3dbac:	e2831001 	add	r1, r3, #1
   3dbb0:	e50b1008 	str	r1, [fp, #-8]
   3dbb4:	e5c32000 	strb	r2, [r3]
   3dbb8:	e55b300d 	ldrb	r3, [fp, #-13]
   3dbbc:	e203300f 	and	r3, r3, #15
   3dbc0:	e3530009 	cmp	r3, #9
   3dbc4:	ca000005 	bgt	3dbe0 <DmxSlotInfo::ToString(unsigned int)+0x1bc>
   3dbc8:	e55b300d 	ldrb	r3, [fp, #-13]
   3dbcc:	e203300f 	and	r3, r3, #15
   3dbd0:	e6ef3073 	uxtb	r3, r3
   3dbd4:	e2833030 	add	r3, r3, #48	; 0x30
   3dbd8:	e6ef2073 	uxtb	r2, r3
   3dbdc:	ea000004 	b	3dbf4 <DmxSlotInfo::ToString(unsigned int)+0x1d0>
   3dbe0:	e55b300d 	ldrb	r3, [fp, #-13]
   3dbe4:	e203300f 	and	r3, r3, #15
   3dbe8:	e6ef3073 	uxtb	r3, r3
   3dbec:	e2833037 	add	r3, r3, #55	; 0x37
   3dbf0:	e6ef2073 	uxtb	r2, r3
   3dbf4:	e51b3008 	ldr	r3, [fp, #-8]
   3dbf8:	e2831001 	add	r1, r3, #1
   3dbfc:	e50b1008 	str	r1, [fp, #-8]
   3dc00:	e5c32000 	strb	r2, [r3]
   3dc04:	e51b3008 	ldr	r3, [fp, #-8]
   3dc08:	e2832001 	add	r2, r3, #1
   3dc0c:	e50b2008 	str	r2, [fp, #-8]
   3dc10:	e3a0203a 	mov	r2, #58	; 0x3a
   3dc14:	e5c32000 	strb	r2, [r3]
   3dc18:	e15b31b0 	ldrh	r3, [fp, #-16]
   3dc1c:	e1a03623 	lsr	r3, r3, #12
   3dc20:	e6ff3073 	uxth	r3, r3
   3dc24:	e3530009 	cmp	r3, #9
   3dc28:	8a000006 	bhi	3dc48 <DmxSlotInfo::ToString(unsigned int)+0x224>
   3dc2c:	e15b31b0 	ldrh	r3, [fp, #-16]
   3dc30:	e1a03623 	lsr	r3, r3, #12
   3dc34:	e6ff3073 	uxth	r3, r3
   3dc38:	e6ef3073 	uxtb	r3, r3
   3dc3c:	e2833030 	add	r3, r3, #48	; 0x30
   3dc40:	e6ef2073 	uxtb	r2, r3
   3dc44:	ea000005 	b	3dc60 <DmxSlotInfo::ToString(unsigned int)+0x23c>
   3dc48:	e15b31b0 	ldrh	r3, [fp, #-16]
   3dc4c:	e1a03623 	lsr	r3, r3, #12
   3dc50:	e6ff3073 	uxth	r3, r3
   3dc54:	e6ef3073 	uxtb	r3, r3
   3dc58:	e2833037 	add	r3, r3, #55	; 0x37
   3dc5c:	e6ef2073 	uxtb	r2, r3
   3dc60:	e51b3008 	ldr	r3, [fp, #-8]
   3dc64:	e2831001 	add	r1, r3, #1
   3dc68:	e50b1008 	str	r1, [fp, #-8]
   3dc6c:	e5c32000 	strb	r2, [r3]
   3dc70:	e15b31b0 	ldrh	r3, [fp, #-16]
   3dc74:	e1a03443 	asr	r3, r3, #8
   3dc78:	e203300f 	and	r3, r3, #15
   3dc7c:	e3530009 	cmp	r3, #9
   3dc80:	ca000007 	bgt	3dca4 <DmxSlotInfo::ToString(unsigned int)+0x280>
   3dc84:	e15b31b0 	ldrh	r3, [fp, #-16]
   3dc88:	e1a03443 	asr	r3, r3, #8
   3dc8c:	e6ef3073 	uxtb	r3, r3
   3dc90:	e203300f 	and	r3, r3, #15
   3dc94:	e6ef3073 	uxtb	r3, r3
   3dc98:	e2833030 	add	r3, r3, #48	; 0x30
   3dc9c:	e6ef2073 	uxtb	r2, r3
   3dca0:	ea000006 	b	3dcc0 <DmxSlotInfo::ToString(unsigned int)+0x29c>
   3dca4:	e15b31b0 	ldrh	r3, [fp, #-16]
   3dca8:	e1a03443 	asr	r3, r3, #8
   3dcac:	e6ef3073 	uxtb	r3, r3
   3dcb0:	e203300f 	and	r3, r3, #15
   3dcb4:	e6ef3073 	uxtb	r3, r3
   3dcb8:	e2833037 	add	r3, r3, #55	; 0x37
   3dcbc:	e6ef2073 	uxtb	r2, r3
   3dcc0:	e51b3008 	ldr	r3, [fp, #-8]
   3dcc4:	e2831001 	add	r1, r3, #1
   3dcc8:	e50b1008 	str	r1, [fp, #-8]
   3dccc:	e5c32000 	strb	r2, [r3]
   3dcd0:	e15b31b0 	ldrh	r3, [fp, #-16]
   3dcd4:	e1a03243 	asr	r3, r3, #4
   3dcd8:	e203300f 	and	r3, r3, #15
   3dcdc:	e3530009 	cmp	r3, #9
   3dce0:	ca000007 	bgt	3dd04 <DmxSlotInfo::ToString(unsigned int)+0x2e0>
   3dce4:	e15b31b0 	ldrh	r3, [fp, #-16]
   3dce8:	e1a03243 	asr	r3, r3, #4
   3dcec:	e6ef3073 	uxtb	r3, r3
   3dcf0:	e203300f 	and	r3, r3, #15
   3dcf4:	e6ef3073 	uxtb	r3, r3
   3dcf8:	e2833030 	add	r3, r3, #48	; 0x30
   3dcfc:	e6ef2073 	uxtb	r2, r3
   3dd00:	ea000006 	b	3dd20 <DmxSlotInfo::ToString(unsigned int)+0x2fc>
   3dd04:	e15b31b0 	ldrh	r3, [fp, #-16]
   3dd08:	e1a03243 	asr	r3, r3, #4
   3dd0c:	e6ef3073 	uxtb	r3, r3
   3dd10:	e203300f 	and	r3, r3, #15
   3dd14:	e6ef3073 	uxtb	r3, r3
   3dd18:	e2833037 	add	r3, r3, #55	; 0x37
   3dd1c:	e6ef2073 	uxtb	r2, r3
   3dd20:	e51b3008 	ldr	r3, [fp, #-8]
   3dd24:	e2831001 	add	r1, r3, #1
   3dd28:	e50b1008 	str	r1, [fp, #-8]
   3dd2c:	e5c32000 	strb	r2, [r3]
   3dd30:	e15b31b0 	ldrh	r3, [fp, #-16]
   3dd34:	e203300f 	and	r3, r3, #15
   3dd38:	e3530009 	cmp	r3, #9
   3dd3c:	ca000006 	bgt	3dd5c <DmxSlotInfo::ToString(unsigned int)+0x338>
   3dd40:	e15b31b0 	ldrh	r3, [fp, #-16]
   3dd44:	e6ef3073 	uxtb	r3, r3
   3dd48:	e203300f 	and	r3, r3, #15
   3dd4c:	e6ef3073 	uxtb	r3, r3
   3dd50:	e2833030 	add	r3, r3, #48	; 0x30
   3dd54:	e6ef2073 	uxtb	r2, r3
   3dd58:	ea000005 	b	3dd74 <DmxSlotInfo::ToString(unsigned int)+0x350>
   3dd5c:	e15b31b0 	ldrh	r3, [fp, #-16]
   3dd60:	e6ef3073 	uxtb	r3, r3
   3dd64:	e203300f 	and	r3, r3, #15
   3dd68:	e6ef3073 	uxtb	r3, r3
   3dd6c:	e2833037 	add	r3, r3, #55	; 0x37
   3dd70:	e6ef2073 	uxtb	r2, r3
   3dd74:	e51b3008 	ldr	r3, [fp, #-8]
   3dd78:	e2831001 	add	r1, r3, #1
   3dd7c:	e50b1008 	str	r1, [fp, #-8]
   3dd80:	e5c32000 	strb	r2, [r3]
   3dd84:	e51b3008 	ldr	r3, [fp, #-8]
   3dd88:	e2832001 	add	r2, r3, #1
   3dd8c:	e50b2008 	str	r2, [fp, #-8]
   3dd90:	e3a0202c 	mov	r2, #44	; 0x2c
   3dd94:	e5c32000 	strb	r2, [r3]
   3dd98:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3dd9c:	e1a030a3 	lsr	r3, r3, #1
   3dda0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   3dda4:	e51b300c 	ldr	r3, [fp, #-12]
   3dda8:	e2833001 	add	r3, r3, #1
   3ddac:	e50b300c 	str	r3, [fp, #-12]
   3ddb0:	eaffff55 	b	3db0c <DmxSlotInfo::ToString(unsigned int)+0xe8>
   3ddb4:	e51b3008 	ldr	r3, [fp, #-8]
   3ddb8:	e2433001 	sub	r3, r3, #1
   3ddbc:	e50b3008 	str	r3, [fp, #-8]
   3ddc0:	e51b3008 	ldr	r3, [fp, #-8]
   3ddc4:	e3a02000 	mov	r2, #0
   3ddc8:	e5c32000 	strb	r2, [r3]
   3ddcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3ddd0:	e5933008 	ldr	r3, [r3, #8]
   3ddd4:	e51b2008 	ldr	r2, [fp, #-8]
   3ddd8:	e0423003 	sub	r3, r2, r3
   3dddc:	e1a01003 	mov	r1, r3
   3dde0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3dde4:	e5932004 	ldr	r2, [r3, #4]
   3dde8:	e1a03002 	mov	r3, r2
   3ddec:	e1a03183 	lsl	r3, r3, #3
   3ddf0:	e0433002 	sub	r3, r3, r2
   3ddf4:	e1510003 	cmp	r1, r3
   3ddf8:	9a000004 	bls	3de10 <DmxSlotInfo::ToString(unsigned int)+0x3ec>
   3ddfc:	e59f3020 	ldr	r3, [pc, #32]	; 3de24 <DmxSlotInfo::ToString(unsigned int)+0x400>
   3de00:	e3a02087 	mov	r2, #135	; 0x87
   3de04:	e59f101c 	ldr	r1, [pc, #28]	; 3de28 <DmxSlotInfo::ToString(unsigned int)+0x404>
   3de08:	e59f002c 	ldr	r0, [pc, #44]	; 3de3c <DmxSlotInfo::ToString(unsigned int)+0x418>
   3de0c:	ebff4d40 	bl	11314 <__assert_fail@plt>
   3de10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3de14:	e5933008 	ldr	r3, [r3, #8]
   3de18:	e1a00003 	mov	r0, r3
   3de1c:	e24bd004 	sub	sp, fp, #4
   3de20:	e8bd8800 	pop	{fp, pc}
   3de24:	0004a414 	.word	0x0004a414
   3de28:	0004a268 	.word	0x0004a268
   3de2c:	0004a300 	.word	0x0004a300
   3de30:	0005c298 	.word	0x0005c298
   3de34:	0004a440 	.word	0x0004a440
   3de38:	0004a2e0 	.word	0x0004a2e0
   3de3c:	0004a318 	.word	0x0004a318

0003de40 <DmxSlotInfo::Dump()>:
   3de40:	e92d4800 	push	{fp, lr}
   3de44:	e28db004 	add	fp, sp, #4
   3de48:	e24dd010 	sub	sp, sp, #16
   3de4c:	e50b0010 	str	r0, [fp, #-16]
   3de50:	e3a03000 	mov	r3, #0
   3de54:	e50b3008 	str	r3, [fp, #-8]
   3de58:	e51b3010 	ldr	r3, [fp, #-16]
   3de5c:	e5933004 	ldr	r3, [r3, #4]
   3de60:	e51b2008 	ldr	r2, [fp, #-8]
   3de64:	e1520003 	cmp	r2, r3
   3de68:	2a000014 	bcs	3dec0 <DmxSlotInfo::Dump()+0x80>
   3de6c:	e51b3010 	ldr	r3, [fp, #-16]
   3de70:	e5932000 	ldr	r2, [r3]
   3de74:	e51b3008 	ldr	r3, [fp, #-8]
   3de78:	e1a03103 	lsl	r3, r3, #2
   3de7c:	e0823003 	add	r3, r2, r3
   3de80:	e5d33002 	ldrb	r3, [r3, #2]
   3de84:	e1a01003 	mov	r1, r3
   3de88:	e51b3010 	ldr	r3, [fp, #-16]
   3de8c:	e5932000 	ldr	r2, [r3]
   3de90:	e51b3008 	ldr	r3, [fp, #-8]
   3de94:	e1a03103 	lsl	r3, r3, #2
   3de98:	e0823003 	add	r3, r2, r3
   3de9c:	e1d330b0 	ldrh	r3, [r3]
   3dea0:	e1a02001 	mov	r2, r1
   3dea4:	e51b1008 	ldr	r1, [fp, #-8]
   3dea8:	e59f001c 	ldr	r0, [pc, #28]	; 3decc <DmxSlotInfo::Dump()+0x8c>
   3deac:	ebff4cd0 	bl	111f4 <printf@plt>
   3deb0:	e51b3008 	ldr	r3, [fp, #-8]
   3deb4:	e2833001 	add	r3, r3, #1
   3deb8:	e50b3008 	str	r3, [fp, #-8]
   3debc:	eaffffe5 	b	3de58 <DmxSlotInfo::Dump()+0x18>
   3dec0:	e1a00000 	nop			; (mov r0, r0)
   3dec4:	e24bd004 	sub	sp, fp, #4
   3dec8:	e8bd8800 	pop	{fp, pc}
   3decc:	0004a354 	.word	0x0004a354

0003ded0 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)>:
   3ded0:	e92d4800 	push	{fp, lr}
   3ded4:	e28db004 	add	fp, sp, #4
   3ded8:	e24dd020 	sub	sp, sp, #32
   3dedc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   3dee0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   3dee4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   3dee8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   3deec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3def0:	e3530000 	cmp	r3, #0
   3def4:	1a000004 	bne	3df0c <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x3c>
   3def8:	e59f32d0 	ldr	r3, [pc, #720]	; 3e1d0 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x300>
   3defc:	e3a02093 	mov	r2, #147	; 0x93
   3df00:	e59f12cc 	ldr	r1, [pc, #716]	; 3e1d4 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x304>
   3df04:	e59f02cc 	ldr	r0, [pc, #716]	; 3e1d8 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x308>
   3df08:	ebff4d01 	bl	11314 <__assert_fail@plt>
   3df0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3df10:	e50b3008 	str	r3, [fp, #-8]
   3df14:	e3a03000 	mov	r3, #0
   3df18:	e54b3009 	strb	r3, [fp, #-9]
   3df1c:	e3a03000 	mov	r3, #0
   3df20:	e14b30bc 	strh	r3, [fp, #-12]
   3df24:	e55b3009 	ldrb	r3, [fp, #-9]
   3df28:	e3530001 	cmp	r3, #1
   3df2c:	8a00002e 	bhi	3dfec <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x11c>
   3df30:	e51b3008 	ldr	r3, [fp, #-8]
   3df34:	e5d33000 	ldrb	r3, [r3]
   3df38:	e353003a 	cmp	r3, #58	; 0x3a
   3df3c:	0a00002a 	beq	3dfec <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x11c>
   3df40:	e51b3008 	ldr	r3, [fp, #-8]
   3df44:	e5d33000 	ldrb	r3, [r3]
   3df48:	e1a00003 	mov	r0, r3
   3df4c:	ebff4d5f 	bl	114d0 <isxdigit@plt>
   3df50:	e1a03000 	mov	r3, r0
   3df54:	e3530000 	cmp	r3, #0
   3df58:	1a000004 	bne	3df70 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0xa0>
   3df5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3df60:	e3a02000 	mov	r2, #0
   3df64:	e5c32000 	strb	r2, [r3]
   3df68:	e3a03000 	mov	r3, #0
   3df6c:	ea000094 	b	3e1c4 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x2f4>
   3df70:	e51b3008 	ldr	r3, [fp, #-8]
   3df74:	e5d33000 	ldrb	r3, [r3]
   3df78:	e3530039 	cmp	r3, #57	; 0x39
   3df7c:	9a000006 	bls	3df9c <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0xcc>
   3df80:	e51b3008 	ldr	r3, [fp, #-8]
   3df84:	e5d33000 	ldrb	r3, [r3]
   3df88:	e3833020 	orr	r3, r3, #32
   3df8c:	e6ef3073 	uxtb	r3, r3
   3df90:	e2433057 	sub	r3, r3, #87	; 0x57
   3df94:	e6ef3073 	uxtb	r3, r3
   3df98:	ea000003 	b	3dfac <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0xdc>
   3df9c:	e51b3008 	ldr	r3, [fp, #-8]
   3dfa0:	e5d33000 	ldrb	r3, [r3]
   3dfa4:	e2433030 	sub	r3, r3, #48	; 0x30
   3dfa8:	e6ef3073 	uxtb	r3, r3
   3dfac:	e54b300d 	strb	r3, [fp, #-13]
   3dfb0:	e15b30bc 	ldrh	r3, [fp, #-12]
   3dfb4:	e1a03203 	lsl	r3, r3, #4
   3dfb8:	e6bf2073 	sxth	r2, r3
   3dfbc:	e55b300d 	ldrb	r3, [fp, #-13]
   3dfc0:	e6bf3073 	sxth	r3, r3
   3dfc4:	e1823003 	orr	r3, r2, r3
   3dfc8:	e6bf3073 	sxth	r3, r3
   3dfcc:	e14b30bc 	strh	r3, [fp, #-12]
   3dfd0:	e51b3008 	ldr	r3, [fp, #-8]
   3dfd4:	e2833001 	add	r3, r3, #1
   3dfd8:	e50b3008 	str	r3, [fp, #-8]
   3dfdc:	e55b3009 	ldrb	r3, [fp, #-9]
   3dfe0:	e2833001 	add	r3, r3, #1
   3dfe4:	e54b3009 	strb	r3, [fp, #-9]
   3dfe8:	eaffffcd 	b	3df24 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x54>
   3dfec:	e55b3009 	ldrb	r3, [fp, #-9]
   3dff0:	e3530002 	cmp	r3, #2
   3dff4:	0a000008 	beq	3e01c <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x14c>
   3dff8:	e51b3008 	ldr	r3, [fp, #-8]
   3dffc:	e5d33000 	ldrb	r3, [r3]
   3e000:	e353003a 	cmp	r3, #58	; 0x3a
   3e004:	0a000004 	beq	3e01c <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x14c>
   3e008:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3e00c:	e3a02000 	mov	r2, #0
   3e010:	e5c32000 	strb	r2, [r3]
   3e014:	e3a03000 	mov	r3, #0
   3e018:	ea000069 	b	3e1c4 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x2f4>
   3e01c:	e15b30bc 	ldrh	r3, [fp, #-12]
   3e020:	e6ef2073 	uxtb	r2, r3
   3e024:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   3e028:	e5c32002 	strb	r2, [r3, #2]
   3e02c:	e3a03000 	mov	r3, #0
   3e030:	e54b3009 	strb	r3, [fp, #-9]
   3e034:	e3a03000 	mov	r3, #0
   3e038:	e14b30bc 	strh	r3, [fp, #-12]
   3e03c:	e51b3008 	ldr	r3, [fp, #-8]
   3e040:	e2833001 	add	r3, r3, #1
   3e044:	e50b3008 	str	r3, [fp, #-8]
   3e048:	e55b3009 	ldrb	r3, [fp, #-9]
   3e04c:	e3530003 	cmp	r3, #3
   3e050:	8a000032 	bhi	3e120 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x250>
   3e054:	e51b3008 	ldr	r3, [fp, #-8]
   3e058:	e5d33000 	ldrb	r3, [r3]
   3e05c:	e353002c 	cmp	r3, #44	; 0x2c
   3e060:	0a00002e 	beq	3e120 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x250>
   3e064:	e51b3008 	ldr	r3, [fp, #-8]
   3e068:	e5d33000 	ldrb	r3, [r3]
   3e06c:	e3530000 	cmp	r3, #0
   3e070:	0a00002a 	beq	3e120 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x250>
   3e074:	e51b3008 	ldr	r3, [fp, #-8]
   3e078:	e5d33000 	ldrb	r3, [r3]
   3e07c:	e1a00003 	mov	r0, r3
   3e080:	ebff4d12 	bl	114d0 <isxdigit@plt>
   3e084:	e1a03000 	mov	r3, r0
   3e088:	e3530000 	cmp	r3, #0
   3e08c:	1a000004 	bne	3e0a4 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x1d4>
   3e090:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3e094:	e3a02000 	mov	r2, #0
   3e098:	e5c32000 	strb	r2, [r3]
   3e09c:	e3a03000 	mov	r3, #0
   3e0a0:	ea000047 	b	3e1c4 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x2f4>
   3e0a4:	e51b3008 	ldr	r3, [fp, #-8]
   3e0a8:	e5d33000 	ldrb	r3, [r3]
   3e0ac:	e3530039 	cmp	r3, #57	; 0x39
   3e0b0:	9a000006 	bls	3e0d0 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x200>
   3e0b4:	e51b3008 	ldr	r3, [fp, #-8]
   3e0b8:	e5d33000 	ldrb	r3, [r3]
   3e0bc:	e3833020 	orr	r3, r3, #32
   3e0c0:	e6ef3073 	uxtb	r3, r3
   3e0c4:	e2433057 	sub	r3, r3, #87	; 0x57
   3e0c8:	e6ef3073 	uxtb	r3, r3
   3e0cc:	ea000003 	b	3e0e0 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x210>
   3e0d0:	e51b3008 	ldr	r3, [fp, #-8]
   3e0d4:	e5d33000 	ldrb	r3, [r3]
   3e0d8:	e2433030 	sub	r3, r3, #48	; 0x30
   3e0dc:	e6ef3073 	uxtb	r3, r3
   3e0e0:	e54b300e 	strb	r3, [fp, #-14]
   3e0e4:	e15b30bc 	ldrh	r3, [fp, #-12]
   3e0e8:	e1a03203 	lsl	r3, r3, #4
   3e0ec:	e6bf2073 	sxth	r2, r3
   3e0f0:	e55b300e 	ldrb	r3, [fp, #-14]
   3e0f4:	e6bf3073 	sxth	r3, r3
   3e0f8:	e1823003 	orr	r3, r2, r3
   3e0fc:	e6bf3073 	sxth	r3, r3
   3e100:	e14b30bc 	strh	r3, [fp, #-12]
   3e104:	e51b3008 	ldr	r3, [fp, #-8]
   3e108:	e2833001 	add	r3, r3, #1
   3e10c:	e50b3008 	str	r3, [fp, #-8]
   3e110:	e55b3009 	ldrb	r3, [fp, #-9]
   3e114:	e2833001 	add	r3, r3, #1
   3e118:	e54b3009 	strb	r3, [fp, #-9]
   3e11c:	eaffffc9 	b	3e048 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x178>
   3e120:	e55b3009 	ldrb	r3, [fp, #-9]
   3e124:	e3530004 	cmp	r3, #4
   3e128:	0a000004 	beq	3e140 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x270>
   3e12c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3e130:	e3a02000 	mov	r2, #0
   3e134:	e5c32000 	strb	r2, [r3]
   3e138:	e3a03000 	mov	r3, #0
   3e13c:	ea000020 	b	3e1c4 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x2f4>
   3e140:	e51b3008 	ldr	r3, [fp, #-8]
   3e144:	e5d33000 	ldrb	r3, [r3]
   3e148:	e353002c 	cmp	r3, #44	; 0x2c
   3e14c:	0a00000c 	beq	3e184 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x2b4>
   3e150:	e51b3008 	ldr	r3, [fp, #-8]
   3e154:	e5d33000 	ldrb	r3, [r3]
   3e158:	e3530020 	cmp	r3, #32
   3e15c:	0a000008 	beq	3e184 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x2b4>
   3e160:	e51b3008 	ldr	r3, [fp, #-8]
   3e164:	e5d33000 	ldrb	r3, [r3]
   3e168:	e3530000 	cmp	r3, #0
   3e16c:	0a000004 	beq	3e184 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x2b4>
   3e170:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3e174:	e3a02000 	mov	r2, #0
   3e178:	e5c32000 	strb	r2, [r3]
   3e17c:	e3a03000 	mov	r3, #0
   3e180:	ea00000f 	b	3e1c4 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x2f4>
   3e184:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   3e188:	e15b20bc 	ldrh	r2, [fp, #-12]
   3e18c:	e1c320b0 	strh	r2, [r3]
   3e190:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3e194:	e3a02001 	mov	r2, #1
   3e198:	e5c32000 	strb	r2, [r3]
   3e19c:	e51b3008 	ldr	r3, [fp, #-8]
   3e1a0:	e5d33000 	ldrb	r3, [r3]
   3e1a4:	e3530000 	cmp	r3, #0
   3e1a8:	1a000001 	bne	3e1b4 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x2e4>
   3e1ac:	e3a03000 	mov	r3, #0
   3e1b0:	ea000003 	b	3e1c4 <DmxSlotInfo::Parse(char*, bool&, lightset::SlotInfo&)+0x2f4>
   3e1b4:	e51b3008 	ldr	r3, [fp, #-8]
   3e1b8:	e2833001 	add	r3, r3, #1
   3e1bc:	e50b3008 	str	r3, [fp, #-8]
   3e1c0:	e51b3008 	ldr	r3, [fp, #-8]
   3e1c4:	e1a00003 	mov	r0, r3
   3e1c8:	e24bd004 	sub	sp, fp, #4
   3e1cc:	e8bd8800 	pop	{fp, pc}
   3e1d0:	0004a44c 	.word	0x0004a44c
   3e1d4:	0004a268 	.word	0x0004a268
   3e1d8:	0004a36c 	.word	0x0004a36c

0003e1dc <LightSet::Print()>:
   3e1dc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3e1e0:	e28db000 	add	fp, sp, #0
   3e1e4:	e24dd00c 	sub	sp, sp, #12
   3e1e8:	e50b0008 	str	r0, [fp, #-8]
   3e1ec:	e1a00000 	nop			; (mov r0, r0)
   3e1f0:	e28bd000 	add	sp, fp, #0
   3e1f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3e1f8:	e12fff1e 	bx	lr

0003e1fc <LightSet::GetDmxStartAddress()>:
   3e1fc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3e200:	e28db000 	add	fp, sp, #0
   3e204:	e24dd00c 	sub	sp, sp, #12
   3e208:	e50b0008 	str	r0, [fp, #-8]
   3e20c:	e3a03001 	mov	r3, #1
   3e210:	e1a00003 	mov	r0, r3
   3e214:	e28bd000 	add	sp, fp, #0
   3e218:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3e21c:	e12fff1e 	bx	lr

0003e220 <LightSet::GetDmxFootprint()>:
   3e220:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3e224:	e28db000 	add	fp, sp, #0
   3e228:	e24dd00c 	sub	sp, sp, #12
   3e22c:	e50b0008 	str	r0, [fp, #-8]
   3e230:	e3a03c02 	mov	r3, #512	; 0x200
   3e234:	e1a00003 	mov	r0, r3
   3e238:	e28bd000 	add	sp, fp, #0
   3e23c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3e240:	e12fff1e 	bx	lr

0003e244 <LightSet::SetDmxStartAddress(unsigned short)>:
   3e244:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3e248:	e28db000 	add	fp, sp, #0
   3e24c:	e24dd00c 	sub	sp, sp, #12
   3e250:	e50b0008 	str	r0, [fp, #-8]
   3e254:	e1a03001 	mov	r3, r1
   3e258:	e14b30ba 	strh	r3, [fp, #-10]
   3e25c:	e3a03000 	mov	r3, #0
   3e260:	e1a00003 	mov	r0, r3
   3e264:	e28bd000 	add	sp, fp, #0
   3e268:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3e26c:	e12fff1e 	bx	lr

0003e270 <LightSet::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
   3e270:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3e274:	e28db000 	add	fp, sp, #0
   3e278:	e24dd014 	sub	sp, sp, #20
   3e27c:	e50b0008 	str	r0, [fp, #-8]
   3e280:	e1a03001 	mov	r3, r1
   3e284:	e50b2010 	str	r2, [fp, #-16]
   3e288:	e14b30ba 	strh	r3, [fp, #-10]
   3e28c:	e51b3010 	ldr	r3, [fp, #-16]
   3e290:	e3a02000 	mov	r2, #0
   3e294:	e5c32002 	strb	r2, [r3, #2]
   3e298:	e51b3010 	ldr	r3, [fp, #-16]
   3e29c:	e3a02001 	mov	r2, #1
   3e2a0:	e1c320b0 	strh	r2, [r3]
   3e2a4:	e3a03001 	mov	r3, #1
   3e2a8:	e1a00003 	mov	r0, r3
   3e2ac:	e28bd000 	add	sp, fp, #0
   3e2b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3e2b4:	e12fff1e 	bx	lr

0003e2b8 <sensor::HTU21D::HTU21D(unsigned char)>:
   3e2b8:	e92d4800 	push	{fp, lr}
   3e2bc:	e28db004 	add	fp, sp, #4
   3e2c0:	e24dd008 	sub	sp, sp, #8
   3e2c4:	e50b0008 	str	r0, [fp, #-8]
   3e2c8:	e1a03001 	mov	r3, r1
   3e2cc:	e54b3009 	strb	r3, [fp, #-9]
   3e2d0:	e51b0008 	ldr	r0, [fp, #-8]
   3e2d4:	e55b3009 	ldrb	r3, [fp, #-9]
   3e2d8:	e3530000 	cmp	r3, #0
   3e2dc:	0a000002 	beq	3e2ec <sensor::HTU21D::HTU21D(unsigned char)+0x34>
   3e2e0:	e24b3009 	sub	r3, fp, #9
   3e2e4:	e5d33000 	ldrb	r3, [r3]
   3e2e8:	ea000000 	b	3e2f0 <sensor::HTU21D::HTU21D(unsigned char)+0x38>
   3e2ec:	e3a03040 	mov	r3, #64	; 0x40
   3e2f0:	e59f203c 	ldr	r2, [pc, #60]	; 3e334 <sensor::HTU21D::HTU21D(unsigned char)+0x7c>
   3e2f4:	e1a01003 	mov	r1, r3
   3e2f8:	ebffeca3 	bl	3958c <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>
   3e2fc:	e51b3008 	ldr	r3, [fp, #-8]
   3e300:	e3a02000 	mov	r2, #0
   3e304:	e5c32008 	strb	r2, [r3, #8]
   3e308:	e51b3008 	ldr	r3, [fp, #-8]
   3e30c:	e1a00003 	mov	r0, r3
   3e310:	ebffecaf 	bl	395d4 <HAL_I2C::IsConnected()>
   3e314:	e1a03000 	mov	r3, r0
   3e318:	e1a02003 	mov	r2, r3
   3e31c:	e51b3008 	ldr	r3, [fp, #-8]
   3e320:	e5c32008 	strb	r2, [r3, #8]
   3e324:	e51b3008 	ldr	r3, [fp, #-8]
   3e328:	e1a00003 	mov	r0, r3
   3e32c:	e24bd004 	sub	sp, fp, #4
   3e330:	e8bd8800 	pop	{fp, pc}
   3e334:	00061a80 	.word	0x00061a80

0003e338 <sensor::HTU21D::GetTemperature()>:
   3e338:	e92d4800 	push	{fp, lr}
   3e33c:	e28db004 	add	fp, sp, #4
   3e340:	e24dd010 	sub	sp, sp, #16
   3e344:	e50b0010 	str	r0, [fp, #-16]
   3e348:	e3a010f3 	mov	r1, #243	; 0xf3
   3e34c:	e51b0010 	ldr	r0, [fp, #-16]
   3e350:	eb000028 	bl	3e3f8 <sensor::HTU21D::ReadRaw(unsigned char)>
   3e354:	e1a03000 	mov	r3, r0
   3e358:	ee073a90 	vmov	s15, r3
   3e35c:	eeb87a67 	vcvt.f32.u32	s14, s15
   3e360:	eddf6a09 	vldr	s13, [pc, #36]	; 3e38c <sensor::HTU21D::GetTemperature()+0x54>
   3e364:	eec77a26 	vdiv.f32	s15, s14, s13
   3e368:	ed4b7a02 	vstr	s15, [fp, #-8]
   3e36c:	ed5b7a02 	vldr	s15, [fp, #-8]
   3e370:	ed9f7a06 	vldr	s14, [pc, #24]	; 3e390 <sensor::HTU21D::GetTemperature()+0x58>
   3e374:	ee677a87 	vmul.f32	s15, s15, s14
   3e378:	ed9f7a05 	vldr	s14, [pc, #20]	; 3e394 <sensor::HTU21D::GetTemperature()+0x5c>
   3e37c:	ee777ac7 	vsub.f32	s15, s15, s14
   3e380:	eeb00a67 	vmov.f32	s0, s15
   3e384:	e24bd004 	sub	sp, fp, #4
   3e388:	e8bd8800 	pop	{fp, pc}
   3e38c:	47800000 	.word	0x47800000
   3e390:	432fb852 	.word	0x432fb852
   3e394:	423b6666 	.word	0x423b6666

0003e398 <sensor::HTU21D::GetHumidity()>:
   3e398:	e92d4800 	push	{fp, lr}
   3e39c:	e28db004 	add	fp, sp, #4
   3e3a0:	e24dd010 	sub	sp, sp, #16
   3e3a4:	e50b0010 	str	r0, [fp, #-16]
   3e3a8:	e3a010f5 	mov	r1, #245	; 0xf5
   3e3ac:	e51b0010 	ldr	r0, [fp, #-16]
   3e3b0:	eb000010 	bl	3e3f8 <sensor::HTU21D::ReadRaw(unsigned char)>
   3e3b4:	e1a03000 	mov	r3, r0
   3e3b8:	ee073a90 	vmov	s15, r3
   3e3bc:	eeb87a67 	vcvt.f32.u32	s14, s15
   3e3c0:	eddf6a09 	vldr	s13, [pc, #36]	; 3e3ec <sensor::HTU21D::GetHumidity()+0x54>
   3e3c4:	eec77a26 	vdiv.f32	s15, s14, s13
   3e3c8:	ed4b7a02 	vstr	s15, [fp, #-8]
   3e3cc:	ed5b7a02 	vldr	s15, [fp, #-8]
   3e3d0:	ed9f7a06 	vldr	s14, [pc, #24]	; 3e3f0 <sensor::HTU21D::GetHumidity()+0x58>
   3e3d4:	ee677a87 	vmul.f32	s15, s15, s14
   3e3d8:	ed9f7a05 	vldr	s14, [pc, #20]	; 3e3f4 <sensor::HTU21D::GetHumidity()+0x5c>
   3e3dc:	ee777ac7 	vsub.f32	s15, s15, s14
   3e3e0:	eeb00a67 	vmov.f32	s0, s15
   3e3e4:	e24bd004 	sub	sp, fp, #4
   3e3e8:	e8bd8800 	pop	{fp, pc}
   3e3ec:	47800000 	.word	0x47800000
   3e3f0:	42fa0000 	.word	0x42fa0000
   3e3f4:	40c00000 	.word	0x40c00000

0003e3f8 <sensor::HTU21D::ReadRaw(unsigned char)>:
   3e3f8:	e92d4800 	push	{fp, lr}
   3e3fc:	e28db004 	add	fp, sp, #4
   3e400:	e24dd018 	sub	sp, sp, #24
   3e404:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   3e408:	e1a03001 	mov	r3, r1
   3e40c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   3e410:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3e414:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
   3e418:	e1a01002 	mov	r1, r2
   3e41c:	e1a00003 	mov	r0, r3
   3e420:	ebffeea5 	bl	39ebc <HAL_I2C::Write(char)>
   3e424:	e24b3010 	sub	r3, fp, #16
   3e428:	e3a02000 	mov	r2, #0
   3e42c:	e1c320b0 	strh	r2, [r3]
   3e430:	e5c32002 	strb	r2, [r3, #2]
   3e434:	e3a03000 	mov	r3, #0
   3e438:	e50b3008 	str	r3, [fp, #-8]
   3e43c:	e51b3008 	ldr	r3, [fp, #-8]
   3e440:	e3530007 	cmp	r3, #7
   3e444:	8a00000f 	bhi	3e488 <sensor::HTU21D::ReadRaw(unsigned char)+0x90>
   3e448:	e59f0070 	ldr	r0, [pc, #112]	; 3e4c0 <sensor::HTU21D::ReadRaw(unsigned char)+0xc8>
   3e44c:	ebffa69a 	bl	27ebc <udelay>
   3e450:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3e454:	e24b1010 	sub	r1, fp, #16
   3e458:	e3a02003 	mov	r2, #3
   3e45c:	e1a00003 	mov	r0, r3
   3e460:	ebffeec7 	bl	39f84 <HAL_I2C::Read(char*, unsigned int)>
   3e464:	e55b3010 	ldrb	r3, [fp, #-16]
   3e468:	e2033003 	and	r3, r3, #3
   3e46c:	e3530002 	cmp	r3, #2
   3e470:	0a000003 	beq	3e484 <sensor::HTU21D::ReadRaw(unsigned char)+0x8c>
   3e474:	e51b3008 	ldr	r3, [fp, #-8]
   3e478:	e2833001 	add	r3, r3, #1
   3e47c:	e50b3008 	str	r3, [fp, #-8]
   3e480:	eaffffed 	b	3e43c <sensor::HTU21D::ReadRaw(unsigned char)+0x44>
   3e484:	e1a00000 	nop			; (mov r0, r0)
   3e488:	e55b3010 	ldrb	r3, [fp, #-16]
   3e48c:	e1a03403 	lsl	r3, r3, #8
   3e490:	e6bf2073 	sxth	r2, r3
   3e494:	e55b300f 	ldrb	r3, [fp, #-15]
   3e498:	e6bf3073 	sxth	r3, r3
   3e49c:	e1823003 	orr	r3, r2, r3
   3e4a0:	e6bf3073 	sxth	r3, r3
   3e4a4:	e14b30ba 	strh	r3, [fp, #-10]
   3e4a8:	e15b30ba 	ldrh	r3, [fp, #-10]
   3e4ac:	e3c33003 	bic	r3, r3, #3
   3e4b0:	e6ff3073 	uxth	r3, r3
   3e4b4:	e1a00003 	mov	r0, r3
   3e4b8:	e24bd004 	sub	sp, fp, #4
   3e4bc:	e8bd8800 	pop	{fp, pc}
   3e4c0:	00002710 	.word	0x00002710

0003e4c4 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>:
   3e4c4:	e92d4800 	push	{fp, lr}
   3e4c8:	e28db004 	add	fp, sp, #4
   3e4cc:	e24dd018 	sub	sp, sp, #24
   3e4d0:	e50b0010 	str	r0, [fp, #-16]
   3e4d4:	e1a03001 	mov	r3, r1
   3e4d8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   3e4dc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   3e4e0:	e3a03000 	mov	r3, #0
   3e4e4:	e14b30b8 	strh	r3, [fp, #-8]
   3e4e8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   3e4ec:	e54b3008 	strb	r3, [fp, #-8]
   3e4f0:	e51b0010 	ldr	r0, [fp, #-16]
   3e4f4:	ebff4d85 	bl	11b10 <HAL_I2C::Setup()>
   3e4f8:	e24b3008 	sub	r3, fp, #8
   3e4fc:	e3a01001 	mov	r1, #1
   3e500:	e1a00003 	mov	r0, r3
   3e504:	eb00118f 	bl	42b48 <bcm2835_i2c_write>
   3e508:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3e50c:	ebffa66a 	bl	27ebc <udelay>
   3e510:	e24b3008 	sub	r3, fp, #8
   3e514:	e3a01002 	mov	r1, #2
   3e518:	e1a00003 	mov	r0, r3
   3e51c:	eb001203 	bl	42d30 <bcm2835_i2c_read>
   3e520:	e55b3008 	ldrb	r3, [fp, #-8]
   3e524:	e1a03403 	lsl	r3, r3, #8
   3e528:	e6bf2073 	sxth	r2, r3
   3e52c:	e55b3007 	ldrb	r3, [fp, #-7]
   3e530:	e6bf3073 	sxth	r3, r3
   3e534:	e1823003 	orr	r3, r2, r3
   3e538:	e6bf3073 	sxth	r3, r3
   3e53c:	e6ff3073 	uxth	r3, r3
   3e540:	e1a00003 	mov	r0, r3
   3e544:	e24bd004 	sub	sp, fp, #4
   3e548:	e8bd8800 	pop	{fp, pc}

0003e54c <CEILING_POS(float)>:
   3e54c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3e550:	e28db000 	add	fp, sp, #0
   3e554:	e24dd014 	sub	sp, sp, #20
   3e558:	ed0b0a04 	vstr	s0, [fp, #-16]
   3e55c:	ed5b7a04 	vldr	s15, [fp, #-16]
   3e560:	eefd7ae7 	vcvt.s32.f32	s15, s15
   3e564:	ee173a90 	vmov	r3, s15
   3e568:	e50b3008 	str	r3, [fp, #-8]
   3e56c:	e51b3008 	ldr	r3, [fp, #-8]
   3e570:	ee073a90 	vmov	s15, r3
   3e574:	eef87ae7 	vcvt.f32.s32	s15, s15
   3e578:	ed1b7a04 	vldr	s14, [fp, #-16]
   3e57c:	eeb47a67 	vcmp.f32	s14, s15
   3e580:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   3e584:	1a000003 	bne	3e598 <CEILING_POS(float)+0x4c>
   3e588:	e51b3008 	ldr	r3, [fp, #-8]
   3e58c:	ee073a90 	vmov	s15, r3
   3e590:	eef87ae7 	vcvt.f32.s32	s15, s15
   3e594:	ea000003 	b	3e5a8 <CEILING_POS(float)+0x5c>
   3e598:	e51b3008 	ldr	r3, [fp, #-8]
   3e59c:	e2833001 	add	r3, r3, #1
   3e5a0:	ee073a90 	vmov	s15, r3
   3e5a4:	eef87ae7 	vcvt.f32.s32	s15, s15
   3e5a8:	eeb00a67 	vmov.f32	s0, s15
   3e5ac:	e28bd000 	add	sp, fp, #0
   3e5b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3e5b4:	e12fff1e 	bx	lr

0003e5b8 <sensor::INA219::INA219(unsigned char)>:
   3e5b8:	e92d4800 	push	{fp, lr}
   3e5bc:	e28db004 	add	fp, sp, #4
   3e5c0:	e24dd018 	sub	sp, sp, #24
   3e5c4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   3e5c8:	e1a03001 	mov	r3, r1
   3e5cc:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   3e5d0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3e5d4:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
   3e5d8:	e3530000 	cmp	r3, #0
   3e5dc:	0a000002 	beq	3e5ec <sensor::INA219::INA219(unsigned char)+0x34>
   3e5e0:	e24b3019 	sub	r3, fp, #25
   3e5e4:	e5d33000 	ldrb	r3, [r3]
   3e5e8:	ea000000 	b	3e5f0 <sensor::INA219::INA219(unsigned char)+0x38>
   3e5ec:	e3a03040 	mov	r3, #64	; 0x40
   3e5f0:	e59f2088 	ldr	r2, [pc, #136]	; 3e680 <sensor::INA219::INA219(unsigned char)+0xc8>
   3e5f4:	e1a01003 	mov	r1, r3
   3e5f8:	ebffebe3 	bl	3958c <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>
   3e5fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3e600:	e3a02000 	mov	r2, #0
   3e604:	e5c32008 	strb	r2, [r3, #8]
   3e608:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3e60c:	e1a00003 	mov	r0, r3
   3e610:	ebffebef 	bl	395d4 <HAL_I2C::IsConnected()>
   3e614:	e1a03000 	mov	r3, r0
   3e618:	e1a02003 	mov	r2, r3
   3e61c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3e620:	e5c32008 	strb	r2, [r3, #8]
   3e624:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3e628:	e5d33008 	ldrb	r3, [r3, #8]
   3e62c:	e3530000 	cmp	r3, #0
   3e630:	0a00000c 	beq	3e668 <sensor::INA219::INA219(unsigned char)+0xb0>
   3e634:	e59f2048 	ldr	r2, [pc, #72]	; 3e684 <sensor::INA219::INA219(unsigned char)+0xcc>
   3e638:	e24b3010 	sub	r3, fp, #16
   3e63c:	e8920007 	ldm	r2, {r0, r1, r2}
   3e640:	e8a30003 	stmia	r3!, {r0, r1}
   3e644:	e1c320b0 	strh	r2, [r3]
   3e648:	e24b3010 	sub	r3, fp, #16
   3e64c:	e1a01003 	mov	r1, r3
   3e650:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3e654:	eb00000b 	bl	3e688 <sensor::INA219::Configure(sensor::ina219::Config&)>
   3e658:	eddf0a06 	vldr	s1, [pc, #24]	; 3e678 <sensor::INA219::INA219(unsigned char)+0xc0>
   3e65c:	ed9f0a06 	vldr	s0, [pc, #24]	; 3e67c <sensor::INA219::INA219(unsigned char)+0xc4>
   3e660:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   3e664:	eb000064 	bl	3e7fc <sensor::INA219::Calibrate(float, float)>
   3e668:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3e66c:	e1a00003 	mov	r0, r3
   3e670:	e24bd004 	sub	sp, fp, #4
   3e674:	e8bd8800 	pop	{fp, pc}
   3e678:	40000000 	.word	0x40000000
   3e67c:	3dcccccd 	.word	0x3dcccccd
   3e680:	00061a80 	.word	0x00061a80
   3e684:	0004a6c4 	.word	0x0004a6c4

0003e688 <sensor::INA219::Configure(sensor::ina219::Config&)>:
   3e688:	e92d4800 	push	{fp, lr}
   3e68c:	e28db004 	add	fp, sp, #4
   3e690:	e24dd018 	sub	sp, sp, #24
   3e694:	e50b0010 	str	r0, [fp, #-16]
   3e698:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   3e69c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3e6a0:	e1d330b0 	ldrh	r3, [r3]
   3e6a4:	e3530000 	cmp	r3, #0
   3e6a8:	0a000005 	beq	3e6c4 <sensor::INA219::Configure(sensor::ina219::Config&)+0x3c>
   3e6ac:	e3530a02 	cmp	r3, #8192	; 0x2000
   3e6b0:	1a000007 	bne	3e6d4 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4c>
   3e6b4:	e51b3010 	ldr	r3, [fp, #-16]
   3e6b8:	e3a02442 	mov	r2, #1107296256	; 0x42000000
   3e6bc:	e5832018 	str	r2, [r3, #24]
   3e6c0:	ea000003 	b	3e6d4 <sensor::INA219::Configure(sensor::ina219::Config&)+0x4c>
   3e6c4:	e51b3010 	ldr	r3, [fp, #-16]
   3e6c8:	e59f2108 	ldr	r2, [pc, #264]	; 3e7d8 <sensor::INA219::Configure(sensor::ina219::Config&)+0x150>
   3e6cc:	e5832018 	str	r2, [r3, #24]
   3e6d0:	e1a00000 	nop			; (mov r0, r0)
   3e6d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3e6d8:	e1d330b2 	ldrh	r3, [r3, #2]
   3e6dc:	e3530b02 	cmp	r3, #2048	; 0x800
   3e6e0:	0a000010 	beq	3e728 <sensor::INA219::Configure(sensor::ina219::Config&)+0xa0>
   3e6e4:	e3530b02 	cmp	r3, #2048	; 0x800
   3e6e8:	ca000002 	bgt	3e6f8 <sensor::INA219::Configure(sensor::ina219::Config&)+0x70>
   3e6ec:	e3530000 	cmp	r3, #0
   3e6f0:	0a000010 	beq	3e738 <sensor::INA219::Configure(sensor::ina219::Config&)+0xb0>
   3e6f4:	ea000013 	b	3e748 <sensor::INA219::Configure(sensor::ina219::Config&)+0xc0>
   3e6f8:	e3530a01 	cmp	r3, #4096	; 0x1000
   3e6fc:	0a000005 	beq	3e718 <sensor::INA219::Configure(sensor::ina219::Config&)+0x90>
   3e700:	e3530b06 	cmp	r3, #6144	; 0x1800
   3e704:	1a00000f 	bne	3e748 <sensor::INA219::Configure(sensor::ina219::Config&)+0xc0>
   3e708:	e51b3010 	ldr	r3, [fp, #-16]
   3e70c:	e59f20c8 	ldr	r2, [pc, #200]	; 3e7dc <sensor::INA219::Configure(sensor::ina219::Config&)+0x154>
   3e710:	e5832014 	str	r2, [r3, #20]
   3e714:	ea00000b 	b	3e748 <sensor::INA219::Configure(sensor::ina219::Config&)+0xc0>
   3e718:	e51b3010 	ldr	r3, [fp, #-16]
   3e71c:	e59f20bc 	ldr	r2, [pc, #188]	; 3e7e0 <sensor::INA219::Configure(sensor::ina219::Config&)+0x158>
   3e720:	e5832014 	str	r2, [r3, #20]
   3e724:	ea000007 	b	3e748 <sensor::INA219::Configure(sensor::ina219::Config&)+0xc0>
   3e728:	e51b3010 	ldr	r3, [fp, #-16]
   3e72c:	e59f20b0 	ldr	r2, [pc, #176]	; 3e7e4 <sensor::INA219::Configure(sensor::ina219::Config&)+0x15c>
   3e730:	e5832014 	str	r2, [r3, #20]
   3e734:	ea000003 	b	3e748 <sensor::INA219::Configure(sensor::ina219::Config&)+0xc0>
   3e738:	e51b3010 	ldr	r3, [fp, #-16]
   3e73c:	e59f20a4 	ldr	r2, [pc, #164]	; 3e7e8 <sensor::INA219::Configure(sensor::ina219::Config&)+0x160>
   3e740:	e5832014 	str	r2, [r3, #20]
   3e744:	e1a00000 	nop			; (mov r0, r0)
   3e748:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3e74c:	e1d320b0 	ldrh	r2, [r3]
   3e750:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3e754:	e1d330b2 	ldrh	r3, [r3, #2]
   3e758:	e1823003 	orr	r3, r2, r3
   3e75c:	e6ff2073 	uxth	r2, r3
   3e760:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3e764:	e1d330b4 	ldrh	r3, [r3, #4]
   3e768:	e1823003 	orr	r3, r2, r3
   3e76c:	e6ff2073 	uxth	r2, r3
   3e770:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3e774:	e1d330b6 	ldrh	r3, [r3, #6]
   3e778:	e1823003 	orr	r3, r2, r3
   3e77c:	e6ff2073 	uxth	r2, r3
   3e780:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3e784:	e1d330b8 	ldrh	r3, [r3, #8]
   3e788:	e1823003 	orr	r3, r2, r3
   3e78c:	e14b30b6 	strh	r3, [fp, #-6]
   3e790:	e59f3054 	ldr	r3, [pc, #84]	; 3e7ec <sensor::INA219::Configure(sensor::ina219::Config&)+0x164>
   3e794:	e5930000 	ldr	r0, [r3]
   3e798:	e15b30b6 	ldrh	r3, [fp, #-6]
   3e79c:	e58d3004 	str	r3, [sp, #4]
   3e7a0:	e3a03062 	mov	r3, #98	; 0x62
   3e7a4:	e58d3000 	str	r3, [sp]
   3e7a8:	e59f3040 	ldr	r3, [pc, #64]	; 3e7f0 <sensor::INA219::Configure(sensor::ina219::Config&)+0x168>
   3e7ac:	e59f2040 	ldr	r2, [pc, #64]	; 3e7f4 <sensor::INA219::Configure(sensor::ina219::Config&)+0x16c>
   3e7b0:	e59f1040 	ldr	r1, [pc, #64]	; 3e7f8 <sensor::INA219::Configure(sensor::ina219::Config&)+0x170>
   3e7b4:	ebff4b21 	bl	11440 <fprintf@plt>
   3e7b8:	e51b3010 	ldr	r3, [fp, #-16]
   3e7bc:	e15b20b6 	ldrh	r2, [fp, #-6]
   3e7c0:	e3a01000 	mov	r1, #0
   3e7c4:	e1a00003 	mov	r0, r3
   3e7c8:	ebff4cb6 	bl	11aa8 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
   3e7cc:	e1a00000 	nop			; (mov r0, r0)
   3e7d0:	e24bd004 	sub	sp, fp, #4
   3e7d4:	e8bd8800 	pop	{fp, pc}
   3e7d8:	41800000 	.word	0x41800000
   3e7dc:	3ea3d70a 	.word	0x3ea3d70a
   3e7e0:	3e23d70a 	.word	0x3e23d70a
   3e7e4:	3da3d70a 	.word	0x3da3d70a
   3e7e8:	3d23d70a 	.word	0x3d23d70a
   3e7ec:	0005c298 	.word	0x0005c298
   3e7f0:	0004a6d0 	.word	0x0004a6d0
   3e7f4:	0004a728 	.word	0x0004a728
   3e7f8:	0004a6e0 	.word	0x0004a6e0

0003e7fc <sensor::INA219::Calibrate(float, float)>:
   3e7fc:	e92d4800 	push	{fp, lr}
   3e800:	e28db004 	add	fp, sp, #4
   3e804:	e24dd020 	sub	sp, sp, #32
   3e808:	e50b0010 	str	r0, [fp, #-16]
   3e80c:	ed0b0a05 	vstr	s0, [fp, #-20]	; 0xffffffec
   3e810:	ed4b0a06 	vstr	s1, [fp, #-24]	; 0xffffffe8
   3e814:	ed1b7a06 	vldr	s14, [fp, #-24]	; 0xffffffe8
   3e818:	eddf6a49 	vldr	s13, [pc, #292]	; 3e944 <sensor::INA219::Calibrate(float, float)+0x148>
   3e81c:	eec77a26 	vdiv.f32	s15, s14, s13
   3e820:	ed4b7a02 	vstr	s15, [fp, #-8]
   3e824:	e51b3010 	ldr	r3, [fp, #-16]
   3e828:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   3e82c:	e583201c 	str	r2, [r3, #28]
   3e830:	ed5b7a02 	vldr	s15, [fp, #-8]
   3e834:	ed9f7a43 	vldr	s14, [pc, #268]	; 3e948 <sensor::INA219::Calibrate(float, float)+0x14c>
   3e838:	ee677a87 	vmul.f32	s15, s15, s14
   3e83c:	eefc7ae7 	vcvt.u32.f32	s15, s15
   3e840:	ee173a90 	vmov	r3, s15
   3e844:	e6ff3073 	uxth	r3, r3
   3e848:	ee073a90 	vmov	s15, r3
   3e84c:	eef87a67 	vcvt.f32.u32	s15, s15
   3e850:	e51b3010 	ldr	r3, [fp, #-16]
   3e854:	edc37a03 	vstr	s15, [r3, #12]
   3e858:	e51b3010 	ldr	r3, [fp, #-16]
   3e85c:	ed937a03 	vldr	s14, [r3, #12]
   3e860:	eddf6a38 	vldr	s13, [pc, #224]	; 3e948 <sensor::INA219::Calibrate(float, float)+0x14c>
   3e864:	eec77a26 	vdiv.f32	s15, s14, s13
   3e868:	e51b3010 	ldr	r3, [fp, #-16]
   3e86c:	edc37a03 	vstr	s15, [r3, #12]
   3e870:	e51b3010 	ldr	r3, [fp, #-16]
   3e874:	ed937a03 	vldr	s14, [r3, #12]
   3e878:	eddf6a33 	vldr	s13, [pc, #204]	; 3e94c <sensor::INA219::Calibrate(float, float)+0x150>
   3e87c:	eec77a26 	vdiv.f32	s15, s14, s13
   3e880:	e51b3010 	ldr	r3, [fp, #-16]
   3e884:	edc37a03 	vstr	s15, [r3, #12]
   3e888:	e51b3010 	ldr	r3, [fp, #-16]
   3e88c:	edd37a03 	vldr	s15, [r3, #12]
   3e890:	eeb00a67 	vmov.f32	s0, s15
   3e894:	ebffff2c 	bl	3e54c <CEILING_POS(float)>
   3e898:	eef07a40 	vmov.f32	s15, s0
   3e89c:	e51b3010 	ldr	r3, [fp, #-16]
   3e8a0:	edc37a03 	vstr	s15, [r3, #12]
   3e8a4:	e51b3010 	ldr	r3, [fp, #-16]
   3e8a8:	edd37a03 	vldr	s15, [r3, #12]
   3e8ac:	ed9f7a26 	vldr	s14, [pc, #152]	; 3e94c <sensor::INA219::Calibrate(float, float)+0x150>
   3e8b0:	ee677a87 	vmul.f32	s15, s15, s14
   3e8b4:	e51b3010 	ldr	r3, [fp, #-16]
   3e8b8:	edc37a03 	vstr	s15, [r3, #12]
   3e8bc:	e51b3010 	ldr	r3, [fp, #-16]
   3e8c0:	edd37a03 	vldr	s15, [r3, #12]
   3e8c4:	ed9f7a21 	vldr	s14, [pc, #132]	; 3e950 <sensor::INA219::Calibrate(float, float)+0x154>
   3e8c8:	ee677a87 	vmul.f32	s15, s15, s14
   3e8cc:	e51b3010 	ldr	r3, [fp, #-16]
   3e8d0:	edc37a04 	vstr	s15, [r3, #16]
   3e8d4:	e51b3010 	ldr	r3, [fp, #-16]
   3e8d8:	ed937a03 	vldr	s14, [r3, #12]
   3e8dc:	e51b3010 	ldr	r3, [fp, #-16]
   3e8e0:	edd37a07 	vldr	s15, [r3, #28]
   3e8e4:	ee277a27 	vmul.f32	s14, s14, s15
   3e8e8:	eddf6a19 	vldr	s13, [pc, #100]	; 3e954 <sensor::INA219::Calibrate(float, float)+0x158>
   3e8ec:	eec67a87 	vdiv.f32	s15, s13, s14
   3e8f0:	eefc7ae7 	vcvt.u32.f32	s15, s15
   3e8f4:	ee173a90 	vmov	r3, s15
   3e8f8:	e14b30ba 	strh	r3, [fp, #-10]
   3e8fc:	e59f3054 	ldr	r3, [pc, #84]	; 3e958 <sensor::INA219::Calibrate(float, float)+0x15c>
   3e900:	e5930000 	ldr	r0, [r3]
   3e904:	e15b30ba 	ldrh	r3, [fp, #-10]
   3e908:	e58d3004 	str	r3, [sp, #4]
   3e90c:	e3a03076 	mov	r3, #118	; 0x76
   3e910:	e58d3000 	str	r3, [sp]
   3e914:	e59f3040 	ldr	r3, [pc, #64]	; 3e95c <sensor::INA219::Calibrate(float, float)+0x160>
   3e918:	e59f2040 	ldr	r2, [pc, #64]	; 3e960 <sensor::INA219::Calibrate(float, float)+0x164>
   3e91c:	e59f1040 	ldr	r1, [pc, #64]	; 3e964 <sensor::INA219::Calibrate(float, float)+0x168>
   3e920:	ebff4ac6 	bl	11440 <fprintf@plt>
   3e924:	e51b3010 	ldr	r3, [fp, #-16]
   3e928:	e15b20ba 	ldrh	r2, [fp, #-10]
   3e92c:	e3a01005 	mov	r1, #5
   3e930:	e1a00003 	mov	r0, r3
   3e934:	ebff4c5b 	bl	11aa8 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
   3e938:	e1a00000 	nop			; (mov r0, r0)
   3e93c:	e24bd004 	sub	sp, fp, #4
   3e940:	e8bd8800 	pop	{fp, pc}
   3e944:	46fffe00 	.word	0x46fffe00
   3e948:	4cbebc20 	.word	0x4cbebc20
   3e94c:	38d1b717 	.word	0x38d1b717
   3e950:	41a00000 	.word	0x41a00000
   3e954:	3d27c5ac 	.word	0x3d27c5ac
   3e958:	0005c298 	.word	0x0005c298
   3e95c:	0004a6d0 	.word	0x0004a6d0
   3e960:	0004a734 	.word	0x0004a734
   3e964:	0004a700 	.word	0x0004a700

0003e968 <sensor::INA219::GetShuntCurrent()>:
   3e968:	e92d4800 	push	{fp, lr}
   3e96c:	e28db004 	add	fp, sp, #4
   3e970:	e24dd010 	sub	sp, sp, #16
   3e974:	e50b0010 	str	r0, [fp, #-16]
   3e978:	e51b3010 	ldr	r3, [fp, #-16]
   3e97c:	e3a02e32 	mov	r2, #800	; 0x320
   3e980:	e3a01004 	mov	r1, #4
   3e984:	e1a00003 	mov	r0, r3
   3e988:	ebfffecd 	bl	3e4c4 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
   3e98c:	e1a03000 	mov	r3, r0
   3e990:	ee073a90 	vmov	s15, r3
   3e994:	eeb87ae7 	vcvt.f32.s32	s14, s15
   3e998:	e51b3010 	ldr	r3, [fp, #-16]
   3e99c:	edd37a03 	vldr	s15, [r3, #12]
   3e9a0:	ee677a27 	vmul.f32	s15, s14, s15
   3e9a4:	ed4b7a02 	vstr	s15, [fp, #-8]
   3e9a8:	e51b3008 	ldr	r3, [fp, #-8]
   3e9ac:	ee073a90 	vmov	s15, r3
   3e9b0:	eeb00a67 	vmov.f32	s0, s15
   3e9b4:	e24bd004 	sub	sp, fp, #4
   3e9b8:	e8bd8800 	pop	{fp, pc}

0003e9bc <sensor::INA219::GetBusVoltageRaw()>:
   3e9bc:	e92d4800 	push	{fp, lr}
   3e9c0:	e28db004 	add	fp, sp, #4
   3e9c4:	e24dd010 	sub	sp, sp, #16
   3e9c8:	e50b0010 	str	r0, [fp, #-16]
   3e9cc:	e51b3010 	ldr	r3, [fp, #-16]
   3e9d0:	e3a02e32 	mov	r2, #800	; 0x320
   3e9d4:	e3a01002 	mov	r1, #2
   3e9d8:	e1a00003 	mov	r0, r3
   3e9dc:	ebfffeb8 	bl	3e4c4 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
   3e9e0:	e1a03000 	mov	r3, r0
   3e9e4:	e14b30b6 	strh	r3, [fp, #-6]
   3e9e8:	e15b30b6 	ldrh	r3, [fp, #-6]
   3e9ec:	e1a031c3 	asr	r3, r3, #3
   3e9f0:	e14b30b6 	strh	r3, [fp, #-6]
   3e9f4:	e15b30b6 	ldrh	r3, [fp, #-6]
   3e9f8:	e1a03103 	lsl	r3, r3, #2
   3e9fc:	e6ff3073 	uxth	r3, r3
   3ea00:	e6bf3073 	sxth	r3, r3
   3ea04:	e1a00003 	mov	r0, r3
   3ea08:	e24bd004 	sub	sp, fp, #4
   3ea0c:	e8bd8800 	pop	{fp, pc}

0003ea10 <sensor::INA219::GetBusVoltage()>:
   3ea10:	e92d4800 	push	{fp, lr}
   3ea14:	e28db004 	add	fp, sp, #4
   3ea18:	e24dd008 	sub	sp, sp, #8
   3ea1c:	e50b0008 	str	r0, [fp, #-8]
   3ea20:	e51b0008 	ldr	r0, [fp, #-8]
   3ea24:	ebffffe4 	bl	3e9bc <sensor::INA219::GetBusVoltageRaw()>
   3ea28:	e1a03000 	mov	r3, r0
   3ea2c:	ee073a90 	vmov	s15, r3
   3ea30:	eef87ae7 	vcvt.f32.s32	s15, s15
   3ea34:	ed9f7a03 	vldr	s14, [pc, #12]	; 3ea48 <sensor::INA219::GetBusVoltage()+0x38>
   3ea38:	ee677a87 	vmul.f32	s15, s15, s14
   3ea3c:	eeb00a67 	vmov.f32	s0, s15
   3ea40:	e24bd004 	sub	sp, fp, #4
   3ea44:	e8bd8800 	pop	{fp, pc}
   3ea48:	3a83126f 	.word	0x3a83126f

0003ea4c <sensor::INA219::GetBusPower()>:
   3ea4c:	e92d4800 	push	{fp, lr}
   3ea50:	e28db004 	add	fp, sp, #4
   3ea54:	e24dd010 	sub	sp, sp, #16
   3ea58:	e50b0010 	str	r0, [fp, #-16]
   3ea5c:	e51b3010 	ldr	r3, [fp, #-16]
   3ea60:	e3a02e32 	mov	r2, #800	; 0x320
   3ea64:	e3a01003 	mov	r1, #3
   3ea68:	e1a00003 	mov	r0, r3
   3ea6c:	ebfffe94 	bl	3e4c4 <HAL_I2C::ReadRegister16DelayUs(unsigned char, unsigned int)>
   3ea70:	e1a03000 	mov	r3, r0
   3ea74:	ee073a90 	vmov	s15, r3
   3ea78:	eeb87ae7 	vcvt.f32.s32	s14, s15
   3ea7c:	e51b3010 	ldr	r3, [fp, #-16]
   3ea80:	edd37a04 	vldr	s15, [r3, #16]
   3ea84:	ee677a27 	vmul.f32	s15, s14, s15
   3ea88:	ed4b7a02 	vstr	s15, [fp, #-8]
   3ea8c:	e51b3008 	ldr	r3, [fp, #-8]
   3ea90:	ee073a90 	vmov	s15, r3
   3ea94:	eeb00a67 	vmov.f32	s0, s15
   3ea98:	e24bd004 	sub	sp, fp, #4
   3ea9c:	e8bd8800 	pop	{fp, pc}

0003eaa0 <HAL_I2C::Read16()>:
   3eaa0:	e92d4800 	push	{fp, lr}
   3eaa4:	e28db004 	add	fp, sp, #4
   3eaa8:	e24dd010 	sub	sp, sp, #16
   3eaac:	e50b0010 	str	r0, [fp, #-16]
   3eab0:	e3a03000 	mov	r3, #0
   3eab4:	e14b30b8 	strh	r3, [fp, #-8]
   3eab8:	e51b0010 	ldr	r0, [fp, #-16]
   3eabc:	ebff4c13 	bl	11b10 <HAL_I2C::Setup()>
   3eac0:	e24b3008 	sub	r3, fp, #8
   3eac4:	e3a01002 	mov	r1, #2
   3eac8:	e1a00003 	mov	r0, r3
   3eacc:	eb001097 	bl	42d30 <bcm2835_i2c_read>
   3ead0:	e55b3008 	ldrb	r3, [fp, #-8]
   3ead4:	e1a03403 	lsl	r3, r3, #8
   3ead8:	e6bf2073 	sxth	r2, r3
   3eadc:	e55b3007 	ldrb	r3, [fp, #-7]
   3eae0:	e6bf3073 	sxth	r3, r3
   3eae4:	e1823003 	orr	r3, r2, r3
   3eae8:	e6bf3073 	sxth	r3, r3
   3eaec:	e6ff3073 	uxth	r3, r3
   3eaf0:	e1a00003 	mov	r0, r3
   3eaf4:	e24bd004 	sub	sp, fp, #4
   3eaf8:	e8bd8800 	pop	{fp, pc}

0003eafc <HAL_I2C::ReadRegister16(unsigned char)>:
   3eafc:	e92d4800 	push	{fp, lr}
   3eb00:	e28db004 	add	fp, sp, #4
   3eb04:	e24dd010 	sub	sp, sp, #16
   3eb08:	e50b0010 	str	r0, [fp, #-16]
   3eb0c:	e1a03001 	mov	r3, r1
   3eb10:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
   3eb14:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   3eb18:	e54b3008 	strb	r3, [fp, #-8]
   3eb1c:	e51b0010 	ldr	r0, [fp, #-16]
   3eb20:	ebff4bfa 	bl	11b10 <HAL_I2C::Setup()>
   3eb24:	e24b3008 	sub	r3, fp, #8
   3eb28:	e3a01001 	mov	r1, #1
   3eb2c:	e1a00003 	mov	r0, r3
   3eb30:	eb001004 	bl	42b48 <bcm2835_i2c_write>
   3eb34:	e51b0010 	ldr	r0, [fp, #-16]
   3eb38:	ebffffd8 	bl	3eaa0 <HAL_I2C::Read16()>
   3eb3c:	e1a03000 	mov	r3, r0
   3eb40:	e1a00000 	nop			; (mov r0, r0)
   3eb44:	e1a00003 	mov	r0, r3
   3eb48:	e24bd004 	sub	sp, fp, #4
   3eb4c:	e8bd8800 	pop	{fp, pc}

0003eb50 <sensor::MCP9808::MCP9808(unsigned char)>:
   3eb50:	e92d4800 	push	{fp, lr}
   3eb54:	e28db004 	add	fp, sp, #4
   3eb58:	e24dd008 	sub	sp, sp, #8
   3eb5c:	e50b0008 	str	r0, [fp, #-8]
   3eb60:	e1a03001 	mov	r3, r1
   3eb64:	e54b3009 	strb	r3, [fp, #-9]
   3eb68:	e51b0008 	ldr	r0, [fp, #-8]
   3eb6c:	e55b3009 	ldrb	r3, [fp, #-9]
   3eb70:	e3530000 	cmp	r3, #0
   3eb74:	0a000002 	beq	3eb84 <sensor::MCP9808::MCP9808(unsigned char)+0x34>
   3eb78:	e24b3009 	sub	r3, fp, #9
   3eb7c:	e5d33000 	ldrb	r3, [r3]
   3eb80:	ea000000 	b	3eb88 <sensor::MCP9808::MCP9808(unsigned char)+0x38>
   3eb84:	e3a03018 	mov	r3, #24
   3eb88:	e59f20b4 	ldr	r2, [pc, #180]	; 3ec44 <sensor::MCP9808::MCP9808(unsigned char)+0xf4>
   3eb8c:	e1a01003 	mov	r1, r3
   3eb90:	ebffea7d 	bl	3958c <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>
   3eb94:	e51b3008 	ldr	r3, [fp, #-8]
   3eb98:	e3a02000 	mov	r2, #0
   3eb9c:	e5c32008 	strb	r2, [r3, #8]
   3eba0:	e51b3008 	ldr	r3, [fp, #-8]
   3eba4:	e1a00003 	mov	r0, r3
   3eba8:	ebffea89 	bl	395d4 <HAL_I2C::IsConnected()>
   3ebac:	e1a03000 	mov	r3, r0
   3ebb0:	e1a02003 	mov	r2, r3
   3ebb4:	e51b3008 	ldr	r3, [fp, #-8]
   3ebb8:	e5c32008 	strb	r2, [r3, #8]
   3ebbc:	e51b3008 	ldr	r3, [fp, #-8]
   3ebc0:	e5d33008 	ldrb	r3, [r3, #8]
   3ebc4:	e3530000 	cmp	r3, #0
   3ebc8:	0a00000a 	beq	3ebf8 <sensor::MCP9808::MCP9808(unsigned char)+0xa8>
   3ebcc:	e51b3008 	ldr	r3, [fp, #-8]
   3ebd0:	e3a01006 	mov	r1, #6
   3ebd4:	e1a00003 	mov	r0, r3
   3ebd8:	ebffffc7 	bl	3eafc <HAL_I2C::ReadRegister16(unsigned char)>
   3ebdc:	e1a03000 	mov	r3, r0
   3ebe0:	e3530054 	cmp	r3, #84	; 0x54
   3ebe4:	03a03001 	moveq	r3, #1
   3ebe8:	13a03000 	movne	r3, #0
   3ebec:	e6ef2073 	uxtb	r2, r3
   3ebf0:	e51b3008 	ldr	r3, [fp, #-8]
   3ebf4:	e5c32008 	strb	r2, [r3, #8]
   3ebf8:	e51b3008 	ldr	r3, [fp, #-8]
   3ebfc:	e5d33008 	ldrb	r3, [r3, #8]
   3ec00:	e3530000 	cmp	r3, #0
   3ec04:	0a00000a 	beq	3ec34 <sensor::MCP9808::MCP9808(unsigned char)+0xe4>
   3ec08:	e51b3008 	ldr	r3, [fp, #-8]
   3ec0c:	e3a01007 	mov	r1, #7
   3ec10:	e1a00003 	mov	r0, r3
   3ec14:	ebffffb8 	bl	3eafc <HAL_I2C::ReadRegister16(unsigned char)>
   3ec18:	e1a03000 	mov	r3, r0
   3ec1c:	e3530b01 	cmp	r3, #1024	; 0x400
   3ec20:	03a03001 	moveq	r3, #1
   3ec24:	13a03000 	movne	r3, #0
   3ec28:	e6ef2073 	uxtb	r2, r3
   3ec2c:	e51b3008 	ldr	r3, [fp, #-8]
   3ec30:	e5c32008 	strb	r2, [r3, #8]
   3ec34:	e51b3008 	ldr	r3, [fp, #-8]
   3ec38:	e1a00003 	mov	r0, r3
   3ec3c:	e24bd004 	sub	sp, fp, #4
   3ec40:	e8bd8800 	pop	{fp, pc}
   3ec44:	00061a80 	.word	0x00061a80

0003ec48 <sensor::MCP9808::Get()>:
   3ec48:	e92d4800 	push	{fp, lr}
   3ec4c:	e28db004 	add	fp, sp, #4
   3ec50:	e24dd010 	sub	sp, sp, #16
   3ec54:	e50b0010 	str	r0, [fp, #-16]
   3ec58:	e51b3010 	ldr	r3, [fp, #-16]
   3ec5c:	e3a01005 	mov	r1, #5
   3ec60:	e1a00003 	mov	r0, r3
   3ec64:	ebffffa4 	bl	3eafc <HAL_I2C::ReadRegister16(unsigned char)>
   3ec68:	e1a03000 	mov	r3, r0
   3ec6c:	e14b30ba 	strh	r3, [fp, #-10]
   3ec70:	e15b30ba 	ldrh	r3, [fp, #-10]
   3ec74:	e1a03a03 	lsl	r3, r3, #20
   3ec78:	e1a03a23 	lsr	r3, r3, #20
   3ec7c:	ee073a90 	vmov	s15, r3
   3ec80:	eef87ae7 	vcvt.f32.s32	s15, s15
   3ec84:	ed4b7a02 	vstr	s15, [fp, #-8]
   3ec88:	ed1b7a02 	vldr	s14, [fp, #-8]
   3ec8c:	eddf6a0e 	vldr	s13, [pc, #56]	; 3eccc <sensor::MCP9808::Get()+0x84>
   3ec90:	eec77a26 	vdiv.f32	s15, s14, s13
   3ec94:	ed4b7a02 	vstr	s15, [fp, #-8]
   3ec98:	e15b30ba 	ldrh	r3, [fp, #-10]
   3ec9c:	e2033a01 	and	r3, r3, #4096	; 0x1000
   3eca0:	e3530000 	cmp	r3, #0
   3eca4:	0a000003 	beq	3ecb8 <sensor::MCP9808::Get()+0x70>
   3eca8:	ed5b7a02 	vldr	s15, [fp, #-8]
   3ecac:	ed9f7a07 	vldr	s14, [pc, #28]	; 3ecd0 <sensor::MCP9808::Get()+0x88>
   3ecb0:	ee777ac7 	vsub.f32	s15, s15, s14
   3ecb4:	ed4b7a02 	vstr	s15, [fp, #-8]
   3ecb8:	e51b3008 	ldr	r3, [fp, #-8]
   3ecbc:	ee073a90 	vmov	s15, r3
   3ecc0:	eeb00a67 	vmov.f32	s0, s15
   3ecc4:	e24bd004 	sub	sp, fp, #4
   3ecc8:	e8bd8800 	pop	{fp, pc}
   3eccc:	41800000 	.word	0x41800000
   3ecd0:	43800000 	.word	0x43800000

0003ecd4 <sensor::BH170::BH170(unsigned char)>:
   3ecd4:	e92d4800 	push	{fp, lr}
   3ecd8:	e28db004 	add	fp, sp, #4
   3ecdc:	e24dd008 	sub	sp, sp, #8
   3ece0:	e50b0008 	str	r0, [fp, #-8]
   3ece4:	e1a03001 	mov	r3, r1
   3ece8:	e54b3009 	strb	r3, [fp, #-9]
   3ecec:	e51b0008 	ldr	r0, [fp, #-8]
   3ecf0:	e55b3009 	ldrb	r3, [fp, #-9]
   3ecf4:	e3530000 	cmp	r3, #0
   3ecf8:	0a000002 	beq	3ed08 <sensor::BH170::BH170(unsigned char)+0x34>
   3ecfc:	e24b3009 	sub	r3, fp, #9
   3ed00:	e5d33000 	ldrb	r3, [r3]
   3ed04:	ea000000 	b	3ed0c <sensor::BH170::BH170(unsigned char)+0x38>
   3ed08:	e3a03023 	mov	r3, #35	; 0x23
   3ed0c:	e59f206c 	ldr	r2, [pc, #108]	; 3ed80 <sensor::BH170::BH170(unsigned char)+0xac>
   3ed10:	e1a01003 	mov	r1, r3
   3ed14:	ebffea1c 	bl	3958c <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>
   3ed18:	e51b3008 	ldr	r3, [fp, #-8]
   3ed1c:	e3a02000 	mov	r2, #0
   3ed20:	e5c32008 	strb	r2, [r3, #8]
   3ed24:	e51b3008 	ldr	r3, [fp, #-8]
   3ed28:	e1a00003 	mov	r0, r3
   3ed2c:	ebffea28 	bl	395d4 <HAL_I2C::IsConnected()>
   3ed30:	e1a03000 	mov	r3, r0
   3ed34:	e1a02003 	mov	r2, r3
   3ed38:	e51b3008 	ldr	r3, [fp, #-8]
   3ed3c:	e5c32008 	strb	r2, [r3, #8]
   3ed40:	e51b3008 	ldr	r3, [fp, #-8]
   3ed44:	e5d33008 	ldrb	r3, [r3, #8]
   3ed48:	e3530000 	cmp	r3, #0
   3ed4c:	0a000007 	beq	3ed70 <sensor::BH170::BH170(unsigned char)+0x9c>
   3ed50:	e51b3008 	ldr	r3, [fp, #-8]
   3ed54:	e3a01001 	mov	r1, #1
   3ed58:	e1a00003 	mov	r0, r3
   3ed5c:	ebffec56 	bl	39ebc <HAL_I2C::Write(char)>
   3ed60:	e51b3008 	ldr	r3, [fp, #-8]
   3ed64:	e3a01010 	mov	r1, #16
   3ed68:	e1a00003 	mov	r0, r3
   3ed6c:	ebffec52 	bl	39ebc <HAL_I2C::Write(char)>
   3ed70:	e51b3008 	ldr	r3, [fp, #-8]
   3ed74:	e1a00003 	mov	r0, r3
   3ed78:	e24bd004 	sub	sp, fp, #4
   3ed7c:	e8bd8800 	pop	{fp, pc}
   3ed80:	00061a80 	.word	0x00061a80

0003ed84 <sensor::BH170::Get()>:
   3ed84:	e92d4800 	push	{fp, lr}
   3ed88:	e28db004 	add	fp, sp, #4
   3ed8c:	e24dd010 	sub	sp, sp, #16
   3ed90:	e50b0010 	str	r0, [fp, #-16]
   3ed94:	e51b3010 	ldr	r3, [fp, #-16]
   3ed98:	e1a00003 	mov	r0, r3
   3ed9c:	ebffff3f 	bl	3eaa0 <HAL_I2C::Read16()>
   3eda0:	e1a03000 	mov	r3, r0
   3eda4:	ee073a90 	vmov	s15, r3
   3eda8:	eeb87a67 	vcvt.f32.u32	s14, s15
   3edac:	eddf6a07 	vldr	s13, [pc, #28]	; 3edd0 <sensor::BH170::Get()+0x4c>
   3edb0:	eec77a26 	vdiv.f32	s15, s14, s13
   3edb4:	eefc7ae7 	vcvt.u32.f32	s15, s15
   3edb8:	ee173a90 	vmov	r3, s15
   3edbc:	e14b30b6 	strh	r3, [fp, #-6]
   3edc0:	e15b30b6 	ldrh	r3, [fp, #-6]
   3edc4:	e1a00003 	mov	r0, r3
   3edc8:	e24bd004 	sub	sp, fp, #4
   3edcc:	e8bd8800 	pop	{fp, pc}
   3edd0:	3f99999a 	.word	0x3f99999a

0003edd4 <sensor::SI7021::SI7021(unsigned char)>:
   3edd4:	e92d4800 	push	{fp, lr}
   3edd8:	e28db004 	add	fp, sp, #4
   3eddc:	e24dd008 	sub	sp, sp, #8
   3ede0:	e50b0008 	str	r0, [fp, #-8]
   3ede4:	e1a03001 	mov	r3, r1
   3ede8:	e54b3009 	strb	r3, [fp, #-9]
   3edec:	e51b0008 	ldr	r0, [fp, #-8]
   3edf0:	e55b3009 	ldrb	r3, [fp, #-9]
   3edf4:	e3530000 	cmp	r3, #0
   3edf8:	0a000002 	beq	3ee08 <sensor::SI7021::SI7021(unsigned char)+0x34>
   3edfc:	e24b3009 	sub	r3, fp, #9
   3ee00:	e5d33000 	ldrb	r3, [r3]
   3ee04:	ea000000 	b	3ee0c <sensor::SI7021::SI7021(unsigned char)+0x38>
   3ee08:	e3a03040 	mov	r3, #64	; 0x40
   3ee0c:	e59f203c 	ldr	r2, [pc, #60]	; 3ee50 <sensor::SI7021::SI7021(unsigned char)+0x7c>
   3ee10:	e1a01003 	mov	r1, r3
   3ee14:	ebffe9dc 	bl	3958c <HAL_I2C::HAL_I2C(unsigned char, unsigned int)>
   3ee18:	e51b3008 	ldr	r3, [fp, #-8]
   3ee1c:	e3a02000 	mov	r2, #0
   3ee20:	e5c32008 	strb	r2, [r3, #8]
   3ee24:	e51b3008 	ldr	r3, [fp, #-8]
   3ee28:	e1a00003 	mov	r0, r3
   3ee2c:	ebffe9e8 	bl	395d4 <HAL_I2C::IsConnected()>
   3ee30:	e1a03000 	mov	r3, r0
   3ee34:	e1a02003 	mov	r2, r3
   3ee38:	e51b3008 	ldr	r3, [fp, #-8]
   3ee3c:	e5c32008 	strb	r2, [r3, #8]
   3ee40:	e51b3008 	ldr	r3, [fp, #-8]
   3ee44:	e1a00003 	mov	r0, r3
   3ee48:	e24bd004 	sub	sp, fp, #4
   3ee4c:	e8bd8800 	pop	{fp, pc}
   3ee50:	00061a80 	.word	0x00061a80

0003ee54 <sensor::SI7021::GetTemperature()>:
   3ee54:	e92d4800 	push	{fp, lr}
   3ee58:	e28db004 	add	fp, sp, #4
   3ee5c:	e24dd010 	sub	sp, sp, #16
   3ee60:	e50b0010 	str	r0, [fp, #-16]
   3ee64:	e3a010f3 	mov	r1, #243	; 0xf3
   3ee68:	e51b0010 	ldr	r0, [fp, #-16]
   3ee6c:	eb000028 	bl	3ef14 <sensor::SI7021::ReadRaw(unsigned char)>
   3ee70:	e1a03000 	mov	r3, r0
   3ee74:	ee073a90 	vmov	s15, r3
   3ee78:	eeb87a67 	vcvt.f32.u32	s14, s15
   3ee7c:	eddf6a09 	vldr	s13, [pc, #36]	; 3eea8 <sensor::SI7021::GetTemperature()+0x54>
   3ee80:	eec77a26 	vdiv.f32	s15, s14, s13
   3ee84:	ed4b7a02 	vstr	s15, [fp, #-8]
   3ee88:	ed5b7a02 	vldr	s15, [fp, #-8]
   3ee8c:	ed9f7a06 	vldr	s14, [pc, #24]	; 3eeac <sensor::SI7021::GetTemperature()+0x58>
   3ee90:	ee677a87 	vmul.f32	s15, s15, s14
   3ee94:	ed9f7a05 	vldr	s14, [pc, #20]	; 3eeb0 <sensor::SI7021::GetTemperature()+0x5c>
   3ee98:	ee777ac7 	vsub.f32	s15, s15, s14
   3ee9c:	eeb00a67 	vmov.f32	s0, s15
   3eea0:	e24bd004 	sub	sp, fp, #4
   3eea4:	e8bd8800 	pop	{fp, pc}
   3eea8:	47800000 	.word	0x47800000
   3eeac:	432fb852 	.word	0x432fb852
   3eeb0:	423b6666 	.word	0x423b6666

0003eeb4 <sensor::SI7021::GetHumidity()>:
   3eeb4:	e92d4800 	push	{fp, lr}
   3eeb8:	e28db004 	add	fp, sp, #4
   3eebc:	e24dd010 	sub	sp, sp, #16
   3eec0:	e50b0010 	str	r0, [fp, #-16]
   3eec4:	e3a010f5 	mov	r1, #245	; 0xf5
   3eec8:	e51b0010 	ldr	r0, [fp, #-16]
   3eecc:	eb000010 	bl	3ef14 <sensor::SI7021::ReadRaw(unsigned char)>
   3eed0:	e1a03000 	mov	r3, r0
   3eed4:	ee073a90 	vmov	s15, r3
   3eed8:	eeb87a67 	vcvt.f32.u32	s14, s15
   3eedc:	eddf6a09 	vldr	s13, [pc, #36]	; 3ef08 <sensor::SI7021::GetHumidity()+0x54>
   3eee0:	eec77a26 	vdiv.f32	s15, s14, s13
   3eee4:	ed4b7a02 	vstr	s15, [fp, #-8]
   3eee8:	ed5b7a02 	vldr	s15, [fp, #-8]
   3eeec:	ed9f7a06 	vldr	s14, [pc, #24]	; 3ef0c <sensor::SI7021::GetHumidity()+0x58>
   3eef0:	ee677a87 	vmul.f32	s15, s15, s14
   3eef4:	ed9f7a05 	vldr	s14, [pc, #20]	; 3ef10 <sensor::SI7021::GetHumidity()+0x5c>
   3eef8:	ee777ac7 	vsub.f32	s15, s15, s14
   3eefc:	eeb00a67 	vmov.f32	s0, s15
   3ef00:	e24bd004 	sub	sp, fp, #4
   3ef04:	e8bd8800 	pop	{fp, pc}
   3ef08:	47800000 	.word	0x47800000
   3ef0c:	42fa0000 	.word	0x42fa0000
   3ef10:	40c00000 	.word	0x40c00000

0003ef14 <sensor::SI7021::ReadRaw(unsigned char)>:
   3ef14:	e92d4800 	push	{fp, lr}
   3ef18:	e28db004 	add	fp, sp, #4
   3ef1c:	e24dd018 	sub	sp, sp, #24
   3ef20:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   3ef24:	e1a03001 	mov	r3, r1
   3ef28:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
   3ef2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3ef30:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
   3ef34:	e1a01002 	mov	r1, r2
   3ef38:	e1a00003 	mov	r0, r3
   3ef3c:	ebffebde 	bl	39ebc <HAL_I2C::Write(char)>
   3ef40:	e24b3010 	sub	r3, fp, #16
   3ef44:	e3a02000 	mov	r2, #0
   3ef48:	e1c320b0 	strh	r2, [r3]
   3ef4c:	e5c32002 	strb	r2, [r3, #2]
   3ef50:	e3a03000 	mov	r3, #0
   3ef54:	e50b3008 	str	r3, [fp, #-8]
   3ef58:	e51b3008 	ldr	r3, [fp, #-8]
   3ef5c:	e3530007 	cmp	r3, #7
   3ef60:	8a00000f 	bhi	3efa4 <sensor::SI7021::ReadRaw(unsigned char)+0x90>
   3ef64:	e59f0070 	ldr	r0, [pc, #112]	; 3efdc <sensor::SI7021::ReadRaw(unsigned char)+0xc8>
   3ef68:	ebffa3d3 	bl	27ebc <udelay>
   3ef6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3ef70:	e24b1010 	sub	r1, fp, #16
   3ef74:	e3a02003 	mov	r2, #3
   3ef78:	e1a00003 	mov	r0, r3
   3ef7c:	ebffec00 	bl	39f84 <HAL_I2C::Read(char*, unsigned int)>
   3ef80:	e55b3010 	ldrb	r3, [fp, #-16]
   3ef84:	e2033003 	and	r3, r3, #3
   3ef88:	e3530002 	cmp	r3, #2
   3ef8c:	0a000003 	beq	3efa0 <sensor::SI7021::ReadRaw(unsigned char)+0x8c>
   3ef90:	e51b3008 	ldr	r3, [fp, #-8]
   3ef94:	e2833001 	add	r3, r3, #1
   3ef98:	e50b3008 	str	r3, [fp, #-8]
   3ef9c:	eaffffed 	b	3ef58 <sensor::SI7021::ReadRaw(unsigned char)+0x44>
   3efa0:	e1a00000 	nop			; (mov r0, r0)
   3efa4:	e55b3010 	ldrb	r3, [fp, #-16]
   3efa8:	e1a03403 	lsl	r3, r3, #8
   3efac:	e6bf2073 	sxth	r2, r3
   3efb0:	e55b300f 	ldrb	r3, [fp, #-15]
   3efb4:	e6bf3073 	sxth	r3, r3
   3efb8:	e1823003 	orr	r3, r2, r3
   3efbc:	e6bf3073 	sxth	r3, r3
   3efc0:	e14b30ba 	strh	r3, [fp, #-10]
   3efc4:	e15b30ba 	ldrh	r3, [fp, #-10]
   3efc8:	e3c33003 	bic	r3, r3, #3
   3efcc:	e6ff3073 	uxth	r3, r3
   3efd0:	e1a00003 	mov	r0, r3
   3efd4:	e24bd004 	sub	sp, fp, #4
   3efd8:	e8bd8800 	pop	{fp, pc}
   3efdc:	00002710 	.word	0x00002710

0003efe0 <console_status>:
   3efe0:	e92d4800 	push	{fp, lr}
   3efe4:	e28db004 	add	fp, sp, #4
   3efe8:	e24dd008 	sub	sp, sp, #8
   3efec:	e50b0008 	str	r0, [fp, #-8]
   3eff0:	e50b100c 	str	r1, [fp, #-12]
   3eff4:	e51b000c 	ldr	r0, [fp, #-12]
   3eff8:	ebff4889 	bl	11224 <puts@plt>
   3effc:	e1a00000 	nop			; (mov r0, r0)
   3f000:	e24bd004 	sub	sp, fp, #4
   3f004:	e8bd8800 	pop	{fp, pc}

0003f008 <Hardware::SetFrequency(unsigned int)>:
   3f008:	e92d4800 	push	{fp, lr}
   3f00c:	e28db004 	add	fp, sp, #4
   3f010:	e24dd008 	sub	sp, sp, #8
   3f014:	e50b0008 	str	r0, [fp, #-8]
   3f018:	e50b100c 	str	r1, [fp, #-12]
   3f01c:	e51b300c 	ldr	r3, [fp, #-12]
   3f020:	e3530000 	cmp	r3, #0
   3f024:	1a000003 	bne	3f038 <Hardware::SetFrequency(unsigned int)+0x30>
   3f028:	e3a01000 	mov	r1, #0
   3f02c:	e51b0008 	ldr	r0, [fp, #-8]
   3f030:	eb000421 	bl	400bc <Hardware::SetLed(hardware::LedStatus)>
   3f034:	ea000010 	b	3f07c <Hardware::SetFrequency(unsigned int)+0x74>
   3f038:	e51b300c 	ldr	r3, [fp, #-12]
   3f03c:	e3530014 	cmp	r3, #20
   3f040:	9a000003 	bls	3f054 <Hardware::SetFrequency(unsigned int)+0x4c>
   3f044:	e3a01001 	mov	r1, #1
   3f048:	e51b0008 	ldr	r0, [fp, #-8]
   3f04c:	eb00041a 	bl	400bc <Hardware::SetLed(hardware::LedStatus)>
   3f050:	ea000009 	b	3f07c <Hardware::SetFrequency(unsigned int)+0x74>
   3f054:	e51b300c 	ldr	r3, [fp, #-12]
   3f058:	e3530001 	cmp	r3, #1
   3f05c:	9a000003 	bls	3f070 <Hardware::SetFrequency(unsigned int)+0x68>
   3f060:	e3a01002 	mov	r1, #2
   3f064:	e51b0008 	ldr	r0, [fp, #-8]
   3f068:	eb000413 	bl	400bc <Hardware::SetLed(hardware::LedStatus)>
   3f06c:	ea000002 	b	3f07c <Hardware::SetFrequency(unsigned int)+0x74>
   3f070:	e3a01003 	mov	r1, #3
   3f074:	e51b0008 	ldr	r0, [fp, #-8]
   3f078:	eb00040f 	bl	400bc <Hardware::SetLed(hardware::LedStatus)>
   3f07c:	e1a00000 	nop			; (mov r0, r0)
   3f080:	e24bd004 	sub	sp, fp, #4
   3f084:	e8bd8800 	pop	{fp, pc}
   3f088:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   3f08c:	e28db000 	add	fp, sp, #0
   3f090:	e24dd00c 	sub	sp, sp, #12
   3f094:	e50b0008 	str	r0, [fp, #-8]
   3f098:	e1a00000 	nop			; (mov r0, r0)
   3f09c:	e28bd000 	add	sp, fp, #0
   3f0a0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   3f0a4:	e12fff1e 	bx	lr

0003f0a8 <Hardware::SetModeWithLock(hardware::ledblink::Mode, bool)>:
   3f0a8:	e92d4800 	push	{fp, lr}
   3f0ac:	e28db004 	add	fp, sp, #4
   3f0b0:	e24dd010 	sub	sp, sp, #16
   3f0b4:	e50b0008 	str	r0, [fp, #-8]
   3f0b8:	e50b100c 	str	r1, [fp, #-12]
   3f0bc:	e1a03002 	mov	r3, r2
   3f0c0:	e54b300d 	strb	r3, [fp, #-13]
   3f0c4:	e51b3008 	ldr	r3, [fp, #-8]
   3f0c8:	e3a02000 	mov	r2, #0
   3f0cc:	e5c32254 	strb	r2, [r3, #596]	; 0x254
   3f0d0:	e51b100c 	ldr	r1, [fp, #-12]
   3f0d4:	e51b0008 	ldr	r0, [fp, #-8]
   3f0d8:	eb000005 	bl	3f0f4 <Hardware::SetMode(hardware::ledblink::Mode)>
   3f0dc:	e51b3008 	ldr	r3, [fp, #-8]
   3f0e0:	e55b200d 	ldrb	r2, [fp, #-13]
   3f0e4:	e5c32254 	strb	r2, [r3, #596]	; 0x254
   3f0e8:	e1a00000 	nop			; (mov r0, r0)
   3f0ec:	e24bd004 	sub	sp, fp, #4
   3f0f0:	e8bd8800 	pop	{fp, pc}

0003f0f4 <Hardware::SetMode(hardware::ledblink::Mode)>:
   3f0f4:	e92d4800 	push	{fp, lr}
   3f0f8:	e28db004 	add	fp, sp, #4
   3f0fc:	e24dd010 	sub	sp, sp, #16
   3f100:	e50b0008 	str	r0, [fp, #-8]
   3f104:	e50b100c 	str	r1, [fp, #-12]
   3f108:	e51b3008 	ldr	r3, [fp, #-8]
   3f10c:	e5d33254 	ldrb	r3, [r3, #596]	; 0x254
   3f110:	e3530000 	cmp	r3, #0
   3f114:	1a00003e 	bne	3f214 <Hardware::SetMode(hardware::ledblink::Mode)+0x120>
   3f118:	e51b3008 	ldr	r3, [fp, #-8]
   3f11c:	e5933250 	ldr	r3, [r3, #592]	; 0x250
   3f120:	e51b200c 	ldr	r2, [fp, #-12]
   3f124:	e1520003 	cmp	r2, r3
   3f128:	0a000039 	beq	3f214 <Hardware::SetMode(hardware::ledblink::Mode)+0x120>
   3f12c:	e51b3008 	ldr	r3, [fp, #-8]
   3f130:	e51b200c 	ldr	r2, [fp, #-12]
   3f134:	e5832250 	str	r2, [r3, #592]	; 0x250
   3f138:	e51b3008 	ldr	r3, [fp, #-8]
   3f13c:	e5933250 	ldr	r3, [r3, #592]	; 0x250
   3f140:	e3530005 	cmp	r3, #5
   3f144:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   3f148:	ea00001d 	b	3f1c4 <Hardware::SetMode(hardware::ledblink::Mode)+0xd0>
   3f14c:	0003f164 	.word	0x0003f164
   3f150:	0003f174 	.word	0x0003f174
   3f154:	0003f184 	.word	0x0003f184
   3f158:	0003f194 	.word	0x0003f194
   3f15c:	0003f1a4 	.word	0x0003f1a4
   3f160:	0003f1b4 	.word	0x0003f1b4
   3f164:	e3a01000 	mov	r1, #0
   3f168:	e51b0008 	ldr	r0, [fp, #-8]
   3f16c:	ebffffa5 	bl	3f008 <Hardware::SetFrequency(unsigned int)>
   3f170:	ea000017 	b	3f1d4 <Hardware::SetMode(hardware::ledblink::Mode)+0xe0>
   3f174:	e3a010ff 	mov	r1, #255	; 0xff
   3f178:	e51b0008 	ldr	r0, [fp, #-8]
   3f17c:	ebffffa1 	bl	3f008 <Hardware::SetFrequency(unsigned int)>
   3f180:	ea000013 	b	3f1d4 <Hardware::SetMode(hardware::ledblink::Mode)+0xe0>
   3f184:	e3a01001 	mov	r1, #1
   3f188:	e51b0008 	ldr	r0, [fp, #-8]
   3f18c:	ebffff9d 	bl	3f008 <Hardware::SetFrequency(unsigned int)>
   3f190:	ea00000f 	b	3f1d4 <Hardware::SetMode(hardware::ledblink::Mode)+0xe0>
   3f194:	e3a01003 	mov	r1, #3
   3f198:	e51b0008 	ldr	r0, [fp, #-8]
   3f19c:	ebffff99 	bl	3f008 <Hardware::SetFrequency(unsigned int)>
   3f1a0:	ea00000b 	b	3f1d4 <Hardware::SetMode(hardware::ledblink::Mode)+0xe0>
   3f1a4:	e3a01005 	mov	r1, #5
   3f1a8:	e51b0008 	ldr	r0, [fp, #-8]
   3f1ac:	ebffff95 	bl	3f008 <Hardware::SetFrequency(unsigned int)>
   3f1b0:	ea000007 	b	3f1d4 <Hardware::SetMode(hardware::ledblink::Mode)+0xe0>
   3f1b4:	e3a01008 	mov	r1, #8
   3f1b8:	e51b0008 	ldr	r0, [fp, #-8]
   3f1bc:	ebffff91 	bl	3f008 <Hardware::SetFrequency(unsigned int)>
   3f1c0:	ea000003 	b	3f1d4 <Hardware::SetMode(hardware::ledblink::Mode)+0xe0>
   3f1c4:	e3a01000 	mov	r1, #0
   3f1c8:	e51b0008 	ldr	r0, [fp, #-8]
   3f1cc:	ebffff8d 	bl	3f008 <Hardware::SetFrequency(unsigned int)>
   3f1d0:	e1a00000 	nop			; (mov r0, r0)
   3f1d4:	e51b3008 	ldr	r3, [fp, #-8]
   3f1d8:	e5933250 	ldr	r3, [r3, #592]	; 0x250
   3f1dc:	e1a00003 	mov	r0, r3
   3f1e0:	ebff4d5a 	bl	12750 <hardware::ledblink::display(unsigned int)>
   3f1e4:	e59f3034 	ldr	r3, [pc, #52]	; 3f220 <Hardware::SetMode(hardware::ledblink::Mode)+0x12c>
   3f1e8:	e5930000 	ldr	r0, [r3]
   3f1ec:	e51b3008 	ldr	r3, [fp, #-8]
   3f1f0:	e5933250 	ldr	r3, [r3, #592]	; 0x250
   3f1f4:	e58d3004 	str	r3, [sp, #4]
   3f1f8:	e3a03050 	mov	r3, #80	; 0x50
   3f1fc:	e58d3000 	str	r3, [sp]
   3f200:	e59f301c 	ldr	r3, [pc, #28]	; 3f224 <Hardware::SetMode(hardware::ledblink::Mode)+0x130>
   3f204:	e59f201c 	ldr	r2, [pc, #28]	; 3f228 <Hardware::SetMode(hardware::ledblink::Mode)+0x134>
   3f208:	e59f101c 	ldr	r1, [pc, #28]	; 3f22c <Hardware::SetMode(hardware::ledblink::Mode)+0x138>
   3f20c:	ebff488b 	bl	11440 <fprintf@plt>
   3f210:	ea000000 	b	3f218 <Hardware::SetMode(hardware::ledblink::Mode)+0x124>
   3f214:	e1a00000 	nop			; (mov r0, r0)
   3f218:	e24bd004 	sub	sp, fp, #4
   3f21c:	e8bd8800 	pop	{fp, pc}
   3f220:	0005c298 	.word	0x0005c298
   3f224:	0004a7cc 	.word	0x0004a7cc
   3f228:	0004a7fc 	.word	0x0004a7fc
   3f22c:	0004a7e0 	.word	0x0004a7e0

0003f230 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
   3f230:	e3510000 	cmp	r1, #0
   3f234:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3f238:	e24dd024 	sub	sp, sp, #36	; 0x24
   3f23c:	1a000004 	bne	3f254 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x24>
   3f240:	e59f3104 	ldr	r3, [pc, #260]	; 3f34c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x11c>
   3f244:	e59f1104 	ldr	r1, [pc, #260]	; 3f350 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x120>
   3f248:	e59f0104 	ldr	r0, [pc, #260]	; 3f354 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x124>
   3f24c:	e3a0202d 	mov	r2, #45	; 0x2d
   3f250:	ebff482f 	bl	11314 <__assert_fail@plt>
   3f254:	e3520000 	cmp	r2, #0
   3f258:	1a000004 	bne	3f270 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x40>
   3f25c:	e59f30e8 	ldr	r3, [pc, #232]	; 3f34c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x11c>
   3f260:	e3a0202e 	mov	r2, #46	; 0x2e
   3f264:	e59f10e4 	ldr	r1, [pc, #228]	; 3f350 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x120>
   3f268:	e59f00e8 	ldr	r0, [pc, #232]	; 3f358 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x128>
   3f26c:	eafffff7 	b	3f250 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x20>
   3f270:	e3530000 	cmp	r3, #0
   3f274:	1a000004 	bne	3f28c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>
   3f278:	e59f30cc 	ldr	r3, [pc, #204]	; 3f34c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x11c>
   3f27c:	e3a0202f 	mov	r2, #47	; 0x2f
   3f280:	e59f10c8 	ldr	r1, [pc, #200]	; 3f350 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x120>
   3f284:	e59f00d0 	ldr	r0, [pc, #208]	; 3f35c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x12c>
   3f288:	eafffff0 	b	3f250 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x20>
   3f28c:	e1a06000 	mov	r6, r0
   3f290:	e59f00c8 	ldr	r0, [pc, #200]	; 3f360 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x130>
   3f294:	e590c000 	ldr	ip, [r0]
   3f298:	e35c0000 	cmp	ip, #0
   3f29c:	0a000004 	beq	3f2b4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x84>
   3f2a0:	e59f30a4 	ldr	r3, [pc, #164]	; 3f34c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x11c>
   3f2a4:	e3a02031 	mov	r2, #49	; 0x31
   3f2a8:	e59f10a0 	ldr	r1, [pc, #160]	; 3f350 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x120>
   3f2ac:	e59f00b0 	ldr	r0, [pc, #176]	; 3f364 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x134>
   3f2b0:	eaffffe6 	b	3f250 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x20>
   3f2b4:	e59f40ac 	ldr	r4, [pc, #172]	; 3f368 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x138>
   3f2b8:	e5806000 	str	r6, [r0]
   3f2bc:	e1d100b0 	ldrh	r0, [r1]
   3f2c0:	e5d11002 	ldrb	r1, [r1, #2]
   3f2c4:	e2845003 	add	r5, r4, #3
   3f2c8:	e1c400b0 	strh	r0, [r4]
   3f2cc:	e5c41002 	strb	r1, [r4, #2]
   3f2d0:	e5921000 	ldr	r1, [r2]
   3f2d4:	e284700e 	add	r7, r4, #14
   3f2d8:	e5841003 	str	r1, [r4, #3]
   3f2dc:	e5921004 	ldr	r1, [r2, #4]
   3f2e0:	e5841007 	str	r1, [r4, #7]
   3f2e4:	e1d210b8 	ldrh	r1, [r2, #8]
   3f2e8:	e1c410bb 	strh	r1, [r4, #11]
   3f2ec:	e5d2200a 	ldrb	r2, [r2, #10]
   3f2f0:	e5c4200d 	strb	r2, [r4, #13]
   3f2f4:	e5932000 	ldr	r2, [r3]
   3f2f8:	e584200e 	str	r2, [r4, #14]
   3f2fc:	e5932004 	ldr	r2, [r3, #4]
   3f300:	e5842012 	str	r2, [r4, #18]
   3f304:	ebff48bd 	bl	11600 <Hardware::Get()>
   3f308:	e28d101f 	add	r1, sp, #31
   3f30c:	eb000231 	bl	3fbd8 <Hardware::GetBoardName(unsigned char&)>
   3f310:	e3a03008 	mov	r3, #8
   3f314:	e58d3010 	str	r3, [sp, #16]
   3f318:	e3a0300b 	mov	r3, #11
   3f31c:	e58d7014 	str	r7, [sp, #20]
   3f320:	e58d500c 	str	r5, [sp, #12]
   3f324:	e58d4000 	str	r4, [sp]
   3f328:	e59f203c 	ldr	r2, [pc, #60]	; 3f36c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x13c>
   3f32c:	e3a0103f 	mov	r1, #63	; 0x3f
   3f330:	e98d0009 	stmib	sp, {r0, r3}
   3f334:	e3a03003 	mov	r3, #3
   3f338:	e59f0030 	ldr	r0, [pc, #48]	; 3f370 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x140>
   3f33c:	ebff47cd 	bl	11278 <snprintf@plt>
   3f340:	e1a00006 	mov	r0, r6
   3f344:	e28dd024 	add	sp, sp, #36	; 0x24
   3f348:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3f34c:	0004a898 	.word	0x0004a898
   3f350:	0004a810 	.word	0x0004a810
   3f354:	0004a828 	.word	0x0004a828
   3f358:	0004a83c 	.word	0x0004a83c
   3f35c:	0004a84d 	.word	0x0004a84d
   3f360:	0005f3d8 	.word	0x0005f3d8
   3f364:	0004a85e 	.word	0x0004a85e
   3f368:	0005f380 	.word	0x0005f380
   3f36c:	0004a871 	.word	0x0004a871
   3f370:	0005f398 	.word	0x0005f398

0003f374 <str_find_replace(char*, char const*, char const*)>:
   3f374:	e92d4810 	push	{r4, fp, lr}
   3f378:	e28db008 	add	fp, sp, #8
   3f37c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   3f380:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   3f384:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
   3f388:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
   3f38c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   3f390:	ebff4824 	bl	11428 <strlen@plt>
   3f394:	e1a04000 	mov	r4, r0
   3f398:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
   3f39c:	ebff4821 	bl	11428 <strlen@plt>
   3f3a0:	e1a03000 	mov	r3, r0
   3f3a4:	e1540003 	cmp	r4, r3
   3f3a8:	9a000004 	bls	3f3c0 <str_find_replace(char*, char const*, char const*)+0x4c>
   3f3ac:	e59f319c 	ldr	r3, [pc, #412]	; 3f550 <str_find_replace(char*, char const*, char const*)+0x1dc>
   3f3b0:	e3a02036 	mov	r2, #54	; 0x36
   3f3b4:	e59f1198 	ldr	r1, [pc, #408]	; 3f554 <str_find_replace(char*, char const*, char const*)+0x1e0>
   3f3b8:	e59f0198 	ldr	r0, [pc, #408]	; 3f558 <str_find_replace(char*, char const*, char const*)+0x1e4>
   3f3bc:	ebff47d4 	bl	11314 <__assert_fail@plt>
   3f3c0:	e3a03000 	mov	r3, #0
   3f3c4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   3f3c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3f3cc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   3f3d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3f3d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   3f3d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3f3dc:	e50b3010 	str	r3, [fp, #-16]
   3f3e0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   3f3e4:	e51b3010 	ldr	r3, [fp, #-16]
   3f3e8:	e0823003 	add	r3, r2, r3
   3f3ec:	e5d33000 	ldrb	r3, [r3]
   3f3f0:	e3530000 	cmp	r3, #0
   3f3f4:	0a000044 	beq	3f50c <str_find_replace(char*, char const*, char const*)+0x198>
   3f3f8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   3f3fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3f400:	e0823003 	add	r3, r2, r3
   3f404:	e5d32000 	ldrb	r2, [r3]
   3f408:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
   3f40c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3f410:	e0813003 	add	r3, r1, r3
   3f414:	e5d33000 	ldrb	r3, [r3]
   3f418:	e1520003 	cmp	r2, r3
   3f41c:	1a000027 	bne	3f4c0 <str_find_replace(char*, char const*, char const*)+0x14c>
   3f420:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3f424:	e2833001 	add	r3, r3, #1
   3f428:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   3f42c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3f430:	e2833001 	add	r3, r3, #1
   3f434:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   3f438:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   3f43c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   3f440:	e0823003 	add	r3, r2, r3
   3f444:	e5d33000 	ldrb	r3, [r3]
   3f448:	e3530000 	cmp	r3, #0
   3f44c:	1affffe3 	bne	3f3e0 <str_find_replace(char*, char const*, char const*)+0x6c>
   3f450:	e3a03000 	mov	r3, #0
   3f454:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   3f458:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   3f45c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3f460:	e0823003 	add	r3, r2, r3
   3f464:	e5d33000 	ldrb	r3, [r3]
   3f468:	e3530000 	cmp	r3, #0
   3f46c:	0a00000e 	beq	3f4ac <str_find_replace(char*, char const*, char const*)+0x138>
   3f470:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   3f474:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3f478:	e0822003 	add	r2, r2, r3
   3f47c:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   3f480:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3f484:	e0813003 	add	r3, r1, r3
   3f488:	e5d22000 	ldrb	r2, [r2]
   3f48c:	e5c32000 	strb	r2, [r3]
   3f490:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3f494:	e2833001 	add	r3, r3, #1
   3f498:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   3f49c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3f4a0:	e2833001 	add	r3, r3, #1
   3f4a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   3f4a8:	eaffffea 	b	3f458 <str_find_replace(char*, char const*, char const*)+0xe4>
   3f4ac:	e3a03000 	mov	r3, #0
   3f4b0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   3f4b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   3f4b8:	e50b3010 	str	r3, [fp, #-16]
   3f4bc:	eaffffc7 	b	3f3e0 <str_find_replace(char*, char const*, char const*)+0x6c>
   3f4c0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   3f4c4:	e51b3010 	ldr	r3, [fp, #-16]
   3f4c8:	e0822003 	add	r2, r2, r3
   3f4cc:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   3f4d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3f4d4:	e0813003 	add	r3, r1, r3
   3f4d8:	e5d22000 	ldrb	r2, [r2]
   3f4dc:	e5c32000 	strb	r2, [r3]
   3f4e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3f4e4:	e2833001 	add	r3, r3, #1
   3f4e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   3f4ec:	e51b3010 	ldr	r3, [fp, #-16]
   3f4f0:	e2833001 	add	r3, r3, #1
   3f4f4:	e50b3010 	str	r3, [fp, #-16]
   3f4f8:	e51b3010 	ldr	r3, [fp, #-16]
   3f4fc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   3f500:	e3a03000 	mov	r3, #0
   3f504:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   3f508:	eaffffb4 	b	3f3e0 <str_find_replace(char*, char const*, char const*)+0x6c>
   3f50c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   3f510:	e51b3010 	ldr	r3, [fp, #-16]
   3f514:	e1520003 	cmp	r2, r3
   3f518:	2a000008 	bcs	3f540 <str_find_replace(char*, char const*, char const*)+0x1cc>
   3f51c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   3f520:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3f524:	e0823003 	add	r3, r2, r3
   3f528:	e3a02000 	mov	r2, #0
   3f52c:	e5c32000 	strb	r2, [r3]
   3f530:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3f534:	e2833001 	add	r3, r3, #1
   3f538:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   3f53c:	eafffff2 	b	3f50c <str_find_replace(char*, char const*, char const*)+0x198>
   3f540:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   3f544:	e1a00003 	mov	r0, r3
   3f548:	e24bd008 	sub	sp, fp, #8
   3f54c:	e8bd8810 	pop	{r4, fp, pc}
   3f550:	0004ad74 	.word	0x0004ad74
   3f554:	0004a8e0 	.word	0x0004a8e0
   3f558:	0004a8f8 	.word	0x0004a8f8

0003f55c <Hardware::Hardware()>:
   3f55c:	e92d4800 	push	{fp, lr}
   3f560:	e28db004 	add	fp, sp, #4
   3f564:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
   3f568:	e50b00d0 	str	r0, [fp, #-208]	; 0xffffff30
   3f56c:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f570:	e3a02000 	mov	r2, #0
   3f574:	e5832000 	str	r2, [r3]
   3f578:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f57c:	e3a02006 	mov	r2, #6
   3f580:	e5832250 	str	r2, [r3, #592]	; 0x250
   3f584:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f588:	e3a02000 	mov	r2, #0
   3f58c:	e5c32254 	strb	r2, [r3, #596]	; 0x254
   3f590:	e59f23f0 	ldr	r2, [pc, #1008]	; 3f988 <Hardware::Hardware()+0x42c>
   3f594:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f598:	e5823000 	str	r3, [r2]
   3f59c:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f5a0:	e2833004 	add	r3, r3, #4
   3f5a4:	e59f23e0 	ldr	r2, [pc, #992]	; 3f98c <Hardware::Hardware()+0x430>
   3f5a8:	e3a01000 	mov	r1, #0
   3f5ac:	e1a00003 	mov	r0, r3
   3f5b0:	ebff472d 	bl	1126c <memset@plt>
   3f5b4:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f5b8:	e2833f62 	add	r3, r3, #392	; 0x188
   3f5bc:	e2833002 	add	r3, r3, #2
   3f5c0:	e59f13c8 	ldr	r1, [pc, #968]	; 3f990 <Hardware::Hardware()+0x434>
   3f5c4:	e1a02003 	mov	r2, r3
   3f5c8:	e1a03001 	mov	r3, r1
   3f5cc:	e8b30003 	ldm	r3!, {r0, r1}
   3f5d0:	e5820000 	str	r0, [r2]
   3f5d4:	e5821004 	str	r1, [r2, #4]
   3f5d8:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f5dc:	e2833f82 	add	r3, r3, #520	; 0x208
   3f5e0:	e2833002 	add	r3, r3, #2
   3f5e4:	e59f13a4 	ldr	r1, [pc, #932]	; 3f990 <Hardware::Hardware()+0x434>
   3f5e8:	e1a02003 	mov	r2, r3
   3f5ec:	e1a03001 	mov	r3, r1
   3f5f0:	e8b30003 	ldm	r3!, {r0, r1}
   3f5f4:	e5820000 	str	r0, [r2]
   3f5f8:	e5821004 	str	r1, [r2, #4]
   3f5fc:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f600:	e3a02000 	mov	r2, #0
   3f604:	e5c321ca 	strb	r2, [r3, #458]	; 0x1ca
   3f608:	e59f3384 	ldr	r3, [pc, #900]	; 3f994 <Hardware::Hardware()+0x438>
   3f60c:	e24bc024 	sub	ip, fp, #36	; 0x24
   3f610:	e1a0e003 	mov	lr, r3
   3f614:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3f618:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3f61c:	e89e0007 	ldm	lr, {r0, r1, r2}
   3f620:	e8ac0003 	stmia	ip!, {r0, r1}
   3f624:	e1cc20b0 	strh	r2, [ip]
   3f628:	e28cc002 	add	ip, ip, #2
   3f62c:	e1a03822 	lsr	r3, r2, #16
   3f630:	e5cc3000 	strb	r3, [ip]
   3f634:	e24b3024 	sub	r3, fp, #36	; 0x24
   3f638:	e59f1358 	ldr	r1, [pc, #856]	; 3f998 <Hardware::Hardware()+0x43c>
   3f63c:	e1a00003 	mov	r0, r3
   3f640:	ebff46c4 	bl	11158 <popen@plt>
   3f644:	e50b0008 	str	r0, [fp, #-8]
   3f648:	e24b3034 	sub	r3, fp, #52	; 0x34
   3f64c:	e51b2008 	ldr	r2, [fp, #-8]
   3f650:	e3a0100f 	mov	r1, #15
   3f654:	e1a00003 	mov	r0, r3
   3f658:	ebff4760 	bl	113e0 <fgets@plt>
   3f65c:	e1a03000 	mov	r3, r0
   3f660:	e3530000 	cmp	r3, #0
   3f664:	13a03001 	movne	r3, #1
   3f668:	03a03000 	moveq	r3, #0
   3f66c:	e6ef3073 	uxtb	r3, r3
   3f670:	e3530000 	cmp	r3, #0
   3f674:	0a000006 	beq	3f694 <Hardware::Hardware()+0x138>
   3f678:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f67c:	e3a02002 	mov	r2, #2
   3f680:	e5832000 	str	r2, [r3]
   3f684:	e59f0310 	ldr	r0, [pc, #784]	; 3f99c <Hardware::Hardware()+0x440>
   3f688:	ebff4715 	bl	112e4 <system@plt>
   3f68c:	e1a03000 	mov	r3, r0
   3f690:	e3530000 	cmp	r3, #0
   3f694:	e51b3008 	ldr	r3, [fp, #-8]
   3f698:	e3530000 	cmp	r3, #0
   3f69c:	0a000001 	beq	3f6a8 <Hardware::Hardware()+0x14c>
   3f6a0:	e51b0008 	ldr	r0, [fp, #-8]
   3f6a4:	ebff4738 	bl	1138c <pclose@plt>
   3f6a8:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f6ac:	e5933000 	ldr	r3, [r3]
   3f6b0:	e3530004 	cmp	r3, #4
   3f6b4:	0a000003 	beq	3f6c8 <Hardware::Hardware()+0x16c>
   3f6b8:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f6bc:	e2833004 	add	r3, r3, #4
   3f6c0:	e1a00003 	mov	r0, r3
   3f6c4:	ebff46d3 	bl	11218 <uname@plt>
   3f6c8:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f6cc:	e5933000 	ldr	r3, [r3]
   3f6d0:	e1a01003 	mov	r1, r3
   3f6d4:	e59f02c4 	ldr	r0, [pc, #708]	; 3f9a0 <Hardware::Hardware()+0x444>
   3f6d8:	ebff46c5 	bl	111f4 <printf@plt>
   3f6dc:	e59f32c0 	ldr	r3, [pc, #704]	; 3f9a4 <Hardware::Hardware()+0x448>
   3f6e0:	e24bc0a8 	sub	ip, fp, #168	; 0xa8
   3f6e4:	e1a0e003 	mov	lr, r3
   3f6e8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3f6ec:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3f6f0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3f6f4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3f6f8:	e89e0003 	ldm	lr, {r0, r1}
   3f6fc:	e88c0003 	stm	ip, {r0, r1}
   3f700:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f704:	e2832f82 	add	r2, r3, #520	; 0x208
   3f708:	e2822002 	add	r2, r2, #2
   3f70c:	e24b10a8 	sub	r1, fp, #168	; 0xa8
   3f710:	e3a03040 	mov	r3, #64	; 0x40
   3f714:	e51b00d0 	ldr	r0, [fp, #-208]	; 0xffffff30
   3f718:	eb00029f 	bl	4019c <Hardware::ExecCmd(char const*, char*, int)>
   3f71c:	e1a03000 	mov	r3, r0
   3f720:	e2233001 	eor	r3, r3, #1
   3f724:	e6ef3073 	uxtb	r3, r3
   3f728:	e3530000 	cmp	r3, #0
   3f72c:	0a00000f 	beq	3f770 <Hardware::Hardware()+0x214>
   3f730:	e59f3270 	ldr	r3, [pc, #624]	; 3f9a8 <Hardware::Hardware()+0x44c>
   3f734:	e24bc0cc 	sub	ip, fp, #204	; 0xcc
   3f738:	e1a0e003 	mov	lr, r3
   3f73c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3f740:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3f744:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3f748:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3f74c:	e59e3000 	ldr	r3, [lr]
   3f750:	e5cc3000 	strb	r3, [ip]
   3f754:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f758:	e2832f82 	add	r2, r3, #520	; 0x208
   3f75c:	e2822002 	add	r2, r2, #2
   3f760:	e24b10cc 	sub	r1, fp, #204	; 0xcc
   3f764:	e3a03040 	mov	r3, #64	; 0x40
   3f768:	e51b00d0 	ldr	r0, [fp, #-208]	; 0xffffff30
   3f76c:	eb00028a 	bl	4019c <Hardware::ExecCmd(char const*, char*, int)>
   3f770:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f774:	e2833f82 	add	r3, r3, #520	; 0x208
   3f778:	e2833002 	add	r3, r3, #2
   3f77c:	e59f2228 	ldr	r2, [pc, #552]	; 3f9ac <Hardware::Hardware()+0x450>
   3f780:	e59f1228 	ldr	r1, [pc, #552]	; 3f9b0 <Hardware::Hardware()+0x454>
   3f784:	e1a00003 	mov	r0, r3
   3f788:	ebfffef9 	bl	3f374 <str_find_replace(char*, char const*, char const*)>
   3f78c:	e59f2220 	ldr	r2, [pc, #544]	; 3f9b4 <Hardware::Hardware()+0x458>
   3f790:	e24b30a8 	sub	r3, fp, #168	; 0xa8
   3f794:	e1a01002 	mov	r1, r2
   3f798:	e3a0205d 	mov	r2, #93	; 0x5d
   3f79c:	e1a00003 	mov	r0, r3
   3f7a0:	ebff4717 	bl	11404 <memcpy@plt>
   3f7a4:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f7a8:	e2832f62 	add	r2, r3, #392	; 0x188
   3f7ac:	e2822002 	add	r2, r2, #2
   3f7b0:	e24b10a8 	sub	r1, fp, #168	; 0xa8
   3f7b4:	e3a03040 	mov	r3, #64	; 0x40
   3f7b8:	e51b00d0 	ldr	r0, [fp, #-208]	; 0xffffff30
   3f7bc:	eb000276 	bl	4019c <Hardware::ExecCmd(char const*, char*, int)>
   3f7c0:	e59f31f0 	ldr	r3, [pc, #496]	; 3f9b8 <Hardware::Hardware()+0x45c>
   3f7c4:	e24bc0a8 	sub	ip, fp, #168	; 0xa8
   3f7c8:	e1a0e003 	mov	lr, r3
   3f7cc:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3f7d0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3f7d4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3f7d8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3f7dc:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3f7e0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3f7e4:	e89e0003 	ldm	lr, {r0, r1}
   3f7e8:	e58c0000 	str	r0, [ip]
   3f7ec:	e28cc004 	add	ip, ip, #4
   3f7f0:	e1cc10b0 	strh	r1, [ip]
   3f7f4:	e28cc002 	add	ip, ip, #2
   3f7f8:	e1a03821 	lsr	r3, r1, #16
   3f7fc:	e5cc3000 	strb	r3, [ip]
   3f800:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f804:	e2832f72 	add	r2, r3, #456	; 0x1c8
   3f808:	e2822002 	add	r2, r2, #2
   3f80c:	e24b10a8 	sub	r1, fp, #168	; 0xa8
   3f810:	e3a03040 	mov	r3, #64	; 0x40
   3f814:	e51b00d0 	ldr	r0, [fp, #-208]	; 0xffffff30
   3f818:	eb00025f 	bl	4019c <Hardware::ExecCmd(char const*, char*, int)>
   3f81c:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f820:	e5933000 	ldr	r3, [r3]
   3f824:	e3530002 	cmp	r3, #2
   3f828:	1a000052 	bne	3f978 <Hardware::Hardware()+0x41c>
   3f82c:	e59f3188 	ldr	r3, [pc, #392]	; 3f9bc <Hardware::Hardware()+0x460>
   3f830:	e24bc0a8 	sub	ip, fp, #168	; 0xa8
   3f834:	e1a0e003 	mov	lr, r3
   3f838:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3f83c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3f840:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3f844:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3f848:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3f84c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3f850:	e89e0003 	ldm	lr, {r0, r1}
   3f854:	e58c0000 	str	r0, [ip]
   3f858:	e28cc004 	add	ip, ip, #4
   3f85c:	e1cc10b0 	strh	r1, [ip]
   3f860:	e28cc002 	add	ip, ip, #2
   3f864:	e1a03821 	lsr	r3, r1, #16
   3f868:	e5cc3000 	strb	r3, [ip]
   3f86c:	e24b2044 	sub	r2, fp, #68	; 0x44
   3f870:	e24b10a8 	sub	r1, fp, #168	; 0xa8
   3f874:	e3a03010 	mov	r3, #16
   3f878:	e51b00d0 	ldr	r0, [fp, #-208]	; 0xffffff30
   3f87c:	eb000246 	bl	4019c <Hardware::ExecCmd(char const*, char*, int)>
   3f880:	e24b3044 	sub	r3, fp, #68	; 0x44
   3f884:	e3a02010 	mov	r2, #16
   3f888:	e3a01000 	mov	r1, #0
   3f88c:	e1a00003 	mov	r0, r3
   3f890:	ebff463c 	bl	11188 <strtol@plt>
   3f894:	e1a03000 	mov	r3, r0
   3f898:	e1a02003 	mov	r2, r3
   3f89c:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f8a0:	e583224c 	str	r2, [r3, #588]	; 0x24c
   3f8a4:	ebff46c4 	bl	113bc <getuid@plt>
   3f8a8:	e1a03000 	mov	r3, r0
   3f8ac:	e3530000 	cmp	r3, #0
   3f8b0:	03a03001 	moveq	r3, #1
   3f8b4:	13a03000 	movne	r3, #0
   3f8b8:	e6ef3073 	uxtb	r3, r3
   3f8bc:	e3530000 	cmp	r3, #0
   3f8c0:	0a000029 	beq	3f96c <Hardware::Hardware()+0x410>
   3f8c4:	eb001087 	bl	43ae8 <bcm2835_init>
   3f8c8:	e1a03000 	mov	r3, r0
   3f8cc:	e3530000 	cmp	r3, #0
   3f8d0:	03a03001 	moveq	r3, #1
   3f8d4:	13a03000 	movne	r3, #0
   3f8d8:	e6ef3073 	uxtb	r3, r3
   3f8dc:	e3530000 	cmp	r3, #0
   3f8e0:	0a000005 	beq	3f8fc <Hardware::Hardware()+0x3a0>
   3f8e4:	e59f30d4 	ldr	r3, [pc, #212]	; 3f9c0 <Hardware::Hardware()+0x464>
   3f8e8:	e5933000 	ldr	r3, [r3]
   3f8ec:	e3a02016 	mov	r2, #22
   3f8f0:	e3a01001 	mov	r1, #1
   3f8f4:	e59f00c8 	ldr	r0, [pc, #200]	; 3f9c4 <Hardware::Hardware()+0x468>
   3f8f8:	ebff46be 	bl	113f8 <fwrite@plt>
   3f8fc:	eb000c0d 	bl	42938 <bcm2835_i2c_begin>
   3f900:	e1a03000 	mov	r3, r0
   3f904:	e3530000 	cmp	r3, #0
   3f908:	03a03001 	moveq	r3, #1
   3f90c:	13a03000 	movne	r3, #0
   3f910:	e6ef3073 	uxtb	r3, r3
   3f914:	e3530000 	cmp	r3, #0
   3f918:	0a000005 	beq	3f934 <Hardware::Hardware()+0x3d8>
   3f91c:	e59f309c 	ldr	r3, [pc, #156]	; 3f9c0 <Hardware::Hardware()+0x464>
   3f920:	e5933000 	ldr	r3, [r3]
   3f924:	e3a0201b 	mov	r2, #27
   3f928:	e3a01001 	mov	r1, #1
   3f92c:	e59f0094 	ldr	r0, [pc, #148]	; 3f9c8 <Hardware::Hardware()+0x46c>
   3f930:	ebff46b0 	bl	113f8 <fwrite@plt>
   3f934:	eb0007ea 	bl	418e4 <bcm2835_spi_begin>
   3f938:	e1a03000 	mov	r3, r0
   3f93c:	e3530000 	cmp	r3, #0
   3f940:	03a03001 	moveq	r3, #1
   3f944:	13a03000 	movne	r3, #0
   3f948:	e6ef3073 	uxtb	r3, r3
   3f94c:	e3530000 	cmp	r3, #0
   3f950:	0a000005 	beq	3f96c <Hardware::Hardware()+0x410>
   3f954:	e59f3064 	ldr	r3, [pc, #100]	; 3f9c0 <Hardware::Hardware()+0x464>
   3f958:	e5933000 	ldr	r3, [r3]
   3f95c:	e3a0201b 	mov	r2, #27
   3f960:	e3a01001 	mov	r1, #1
   3f964:	e59f0060 	ldr	r0, [pc, #96]	; 3f9cc <Hardware::Hardware()+0x470>
   3f968:	ebff46a2 	bl	113f8 <fwrite@plt>
   3f96c:	e24b3048 	sub	r3, fp, #72	; 0x48
   3f970:	e1a00003 	mov	r0, r3
   3f974:	eb00032e 	bl	40634 <I2cDetect::I2cDetect()>
   3f978:	e51b30d0 	ldr	r3, [fp, #-208]	; 0xffffff30
   3f97c:	e1a00003 	mov	r0, r3
   3f980:	e24bd004 	sub	sp, fp, #4
   3f984:	e8bd8800 	pop	{fp, pc}
   3f988:	0005f3dc 	.word	0x0005f3dc
   3f98c:	00000186 	.word	0x00000186
   3f990:	0004ad68 	.word	0x0004ad68
   3f994:	0004a98c 	.word	0x0004a98c
   3f998:	0004a918 	.word	0x0004a918
   3f99c:	0004ac60 	.word	0x0004ac60
   3f9a0:	0004a91c 	.word	0x0004a91c
   3f9a4:	0004a9a8 	.word	0x0004a9a8
   3f9a8:	0004a9d0 	.word	0x0004a9d0
   3f9ac:	0004a930 	.word	0x0004a930
   3f9b0:	0004a934 	.word	0x0004a934
   3f9b4:	0004a9f4 	.word	0x0004a9f4
   3f9b8:	0004aa54 	.word	0x0004aa54
   3f9bc:	0004aa8c 	.word	0x0004aa8c
   3f9c0:	0005c298 	.word	0x0005c298
   3f9c4:	0004a93c 	.word	0x0004a93c
   3f9c8:	0004a954 	.word	0x0004a954
   3f9cc:	0004a970 	.word	0x0004a970

0003f9d0 <Hardware::GetMachine(unsigned char&)>:
   3f9d0:	e92d4800 	push	{fp, lr}
   3f9d4:	e28db004 	add	fp, sp, #4
   3f9d8:	e24dd008 	sub	sp, sp, #8
   3f9dc:	e50b0008 	str	r0, [fp, #-8]
   3f9e0:	e50b100c 	str	r1, [fp, #-12]
   3f9e4:	e51b3008 	ldr	r3, [fp, #-8]
   3f9e8:	e2833f42 	add	r3, r3, #264	; 0x108
   3f9ec:	e1a00003 	mov	r0, r3
   3f9f0:	ebff468c 	bl	11428 <strlen@plt>
   3f9f4:	e1a03000 	mov	r3, r0
   3f9f8:	e6ef2073 	uxtb	r2, r3
   3f9fc:	e51b300c 	ldr	r3, [fp, #-12]
   3fa00:	e5c32000 	strb	r2, [r3]
   3fa04:	e51b3008 	ldr	r3, [fp, #-8]
   3fa08:	e2833f42 	add	r3, r3, #264	; 0x108
   3fa0c:	e1a00003 	mov	r0, r3
   3fa10:	e24bd004 	sub	sp, fp, #4
   3fa14:	e8bd8800 	pop	{fp, pc}

0003fa18 <Hardware::GetSysName(unsigned char&)>:
   3fa18:	e92d4800 	push	{fp, lr}
   3fa1c:	e28db004 	add	fp, sp, #4
   3fa20:	e24dd008 	sub	sp, sp, #8
   3fa24:	e50b0008 	str	r0, [fp, #-8]
   3fa28:	e50b100c 	str	r1, [fp, #-12]
   3fa2c:	e51b3008 	ldr	r3, [fp, #-8]
   3fa30:	e2833004 	add	r3, r3, #4
   3fa34:	e1a00003 	mov	r0, r3
   3fa38:	ebff467a 	bl	11428 <strlen@plt>
   3fa3c:	e1a03000 	mov	r3, r0
   3fa40:	e6ef2073 	uxtb	r2, r3
   3fa44:	e51b300c 	ldr	r3, [fp, #-12]
   3fa48:	e5c32000 	strb	r2, [r3]
   3fa4c:	e51b3008 	ldr	r3, [fp, #-8]
   3fa50:	e2833004 	add	r3, r3, #4
   3fa54:	e1a00003 	mov	r0, r3
   3fa58:	e24bd004 	sub	sp, fp, #4
   3fa5c:	e8bd8800 	pop	{fp, pc}

0003fa60 <Hardware::GetCpuName(unsigned char&)>:
   3fa60:	e92d4800 	push	{fp, lr}
   3fa64:	e28db004 	add	fp, sp, #4
   3fa68:	e24dd008 	sub	sp, sp, #8
   3fa6c:	e50b0008 	str	r0, [fp, #-8]
   3fa70:	e50b100c 	str	r1, [fp, #-12]
   3fa74:	e51b3008 	ldr	r3, [fp, #-8]
   3fa78:	e2833f62 	add	r3, r3, #392	; 0x188
   3fa7c:	e2833002 	add	r3, r3, #2
   3fa80:	e1a00003 	mov	r0, r3
   3fa84:	ebff4667 	bl	11428 <strlen@plt>
   3fa88:	e1a03000 	mov	r3, r0
   3fa8c:	e6ef2073 	uxtb	r2, r3
   3fa90:	e51b300c 	ldr	r3, [fp, #-12]
   3fa94:	e5c32000 	strb	r2, [r3]
   3fa98:	e51b3008 	ldr	r3, [fp, #-8]
   3fa9c:	e2833f62 	add	r3, r3, #392	; 0x188
   3faa0:	e2833002 	add	r3, r3, #2
   3faa4:	e1a00003 	mov	r0, r3
   3faa8:	e24bd004 	sub	sp, fp, #4
   3faac:	e8bd8800 	pop	{fp, pc}

0003fab0 <Hardware::GetSocName(unsigned char&)>:
   3fab0:	e92d4800 	push	{fp, lr}
   3fab4:	e28db004 	add	fp, sp, #4
   3fab8:	e24dd008 	sub	sp, sp, #8
   3fabc:	e50b0008 	str	r0, [fp, #-8]
   3fac0:	e50b100c 	str	r1, [fp, #-12]
   3fac4:	e51b3008 	ldr	r3, [fp, #-8]
   3fac8:	e2833f72 	add	r3, r3, #456	; 0x1c8
   3facc:	e2833002 	add	r3, r3, #2
   3fad0:	e1a00003 	mov	r0, r3
   3fad4:	ebff4653 	bl	11428 <strlen@plt>
   3fad8:	e1a03000 	mov	r3, r0
   3fadc:	e6ef2073 	uxtb	r2, r3
   3fae0:	e51b300c 	ldr	r3, [fp, #-12]
   3fae4:	e5c32000 	strb	r2, [r3]
   3fae8:	e51b3008 	ldr	r3, [fp, #-8]
   3faec:	e2833f72 	add	r3, r3, #456	; 0x1c8
   3faf0:	e2833002 	add	r3, r3, #2
   3faf4:	e1a00003 	mov	r0, r3
   3faf8:	e24bd004 	sub	sp, fp, #4
   3fafc:	e8bd8800 	pop	{fp, pc}

0003fb00 <Hardware::GetReleaseId()>:
   3fb00:	e92d4800 	push	{fp, lr}
   3fb04:	e28db004 	add	fp, sp, #4
   3fb08:	e24dd018 	sub	sp, sp, #24
   3fb0c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   3fb10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   3fb14:	e2833086 	add	r3, r3, #134	; 0x86
   3fb18:	e1a00003 	mov	r0, r3
   3fb1c:	ebff4641 	bl	11428 <strlen@plt>
   3fb20:	e50b0010 	str	r0, [fp, #-16]
   3fb24:	e3a03000 	mov	r3, #0
   3fb28:	e50b3008 	str	r3, [fp, #-8]
   3fb2c:	e3a03000 	mov	r3, #0
   3fb30:	e50b300c 	str	r3, [fp, #-12]
   3fb34:	e51b200c 	ldr	r2, [fp, #-12]
   3fb38:	e51b3010 	ldr	r3, [fp, #-16]
   3fb3c:	e1520003 	cmp	r2, r3
   3fb40:	2a000020 	bcs	3fbc8 <Hardware::GetReleaseId()+0xc8>
   3fb44:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   3fb48:	e51b300c 	ldr	r3, [fp, #-12]
   3fb4c:	e0823003 	add	r3, r2, r3
   3fb50:	e2833086 	add	r3, r3, #134	; 0x86
   3fb54:	e5d33000 	ldrb	r3, [r3]
   3fb58:	e2433030 	sub	r3, r3, #48	; 0x30
   3fb5c:	e3530009 	cmp	r3, #9
   3fb60:	8a000001 	bhi	3fb6c <Hardware::GetReleaseId()+0x6c>
   3fb64:	e3a03001 	mov	r3, #1
   3fb68:	ea000000 	b	3fb70 <Hardware::GetReleaseId()+0x70>
   3fb6c:	e3a03000 	mov	r3, #0
   3fb70:	e3530000 	cmp	r3, #0
   3fb74:	0a00000f 	beq	3fbb8 <Hardware::GetReleaseId()+0xb8>
   3fb78:	e51b2008 	ldr	r2, [fp, #-8]
   3fb7c:	e1a03002 	mov	r3, r2
   3fb80:	e1a03103 	lsl	r3, r3, #2
   3fb84:	e0833002 	add	r3, r3, r2
   3fb88:	e1a03083 	lsl	r3, r3, #1
   3fb8c:	e50b3008 	str	r3, [fp, #-8]
   3fb90:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   3fb94:	e51b300c 	ldr	r3, [fp, #-12]
   3fb98:	e0823003 	add	r3, r2, r3
   3fb9c:	e2833086 	add	r3, r3, #134	; 0x86
   3fba0:	e5d33000 	ldrb	r3, [r3]
   3fba4:	e1a02003 	mov	r2, r3
   3fba8:	e51b3008 	ldr	r3, [fp, #-8]
   3fbac:	e0823003 	add	r3, r2, r3
   3fbb0:	e2433030 	sub	r3, r3, #48	; 0x30
   3fbb4:	e50b3008 	str	r3, [fp, #-8]
   3fbb8:	e51b300c 	ldr	r3, [fp, #-12]
   3fbbc:	e2833001 	add	r3, r3, #1
   3fbc0:	e50b300c 	str	r3, [fp, #-12]
   3fbc4:	eaffffda 	b	3fb34 <Hardware::GetReleaseId()+0x34>
   3fbc8:	e51b3008 	ldr	r3, [fp, #-8]
   3fbcc:	e1a00003 	mov	r0, r3
   3fbd0:	e24bd004 	sub	sp, fp, #4
   3fbd4:	e8bd8800 	pop	{fp, pc}

0003fbd8 <Hardware::GetBoardName(unsigned char&)>:
   3fbd8:	e92d4800 	push	{fp, lr}
   3fbdc:	e28db004 	add	fp, sp, #4
   3fbe0:	e24dd008 	sub	sp, sp, #8
   3fbe4:	e50b0008 	str	r0, [fp, #-8]
   3fbe8:	e50b100c 	str	r1, [fp, #-12]
   3fbec:	e51b3008 	ldr	r3, [fp, #-8]
   3fbf0:	e2833f82 	add	r3, r3, #520	; 0x208
   3fbf4:	e2833002 	add	r3, r3, #2
   3fbf8:	e1a00003 	mov	r0, r3
   3fbfc:	ebff4609 	bl	11428 <strlen@plt>
   3fc00:	e1a03000 	mov	r3, r0
   3fc04:	e6ef2073 	uxtb	r2, r3
   3fc08:	e51b300c 	ldr	r3, [fp, #-12]
   3fc0c:	e5c32000 	strb	r2, [r3]
   3fc10:	e51b3008 	ldr	r3, [fp, #-8]
   3fc14:	e2833f82 	add	r3, r3, #520	; 0x208
   3fc18:	e2833002 	add	r3, r3, #2
   3fc1c:	e1a00003 	mov	r0, r3
   3fc20:	e24bd004 	sub	sp, fp, #4
   3fc24:	e8bd8800 	pop	{fp, pc}

0003fc28 <Hardware::GetUpTime()>:
   3fc28:	e92d4800 	push	{fp, lr}
   3fc2c:	e28db004 	add	fp, sp, #4
   3fc30:	e24dd050 	sub	sp, sp, #80	; 0x50
   3fc34:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
   3fc38:	e24b3048 	sub	r3, fp, #72	; 0x48
   3fc3c:	e1a00003 	mov	r0, r3
   3fc40:	ebff45c2 	bl	11350 <sysinfo@plt>
   3fc44:	e50b0008 	str	r0, [fp, #-8]
   3fc48:	e51b3008 	ldr	r3, [fp, #-8]
   3fc4c:	e3530000 	cmp	r3, #0
   3fc50:	0a000002 	beq	3fc60 <Hardware::GetUpTime()+0x38>
   3fc54:	e51b1008 	ldr	r1, [fp, #-8]
   3fc58:	e59f0010 	ldr	r0, [pc, #16]	; 3fc70 <Hardware::GetUpTime()+0x48>
   3fc5c:	ebff4564 	bl	111f4 <printf@plt>
   3fc60:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   3fc64:	e1a00003 	mov	r0, r3
   3fc68:	e24bd004 	sub	sp, fp, #4
   3fc6c:	e8bd8800 	pop	{fp, pc}
   3fc70:	0004aac4 	.word	0x0004aac4

0003fc74 <Hardware::SetSysTime(long)>:
   3fc74:	e92d4810 	push	{r4, fp, lr}
   3fc78:	e28db008 	add	fp, sp, #8
   3fc7c:	e24dd014 	sub	sp, sp, #20
   3fc80:	e50b0010 	str	r0, [fp, #-16]
   3fc84:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   3fc88:	e59f3048 	ldr	r3, [pc, #72]	; 3fcd8 <Hardware::SetSysTime(long)+0x64>
   3fc8c:	e5934000 	ldr	r4, [r3]
   3fc90:	e24b3014 	sub	r3, fp, #20
   3fc94:	e1a00003 	mov	r0, r3
   3fc98:	ebff458b 	bl	112cc <localtime@plt>
   3fc9c:	e1a03000 	mov	r3, r0
   3fca0:	e1a00003 	mov	r0, r3
   3fca4:	ebff4546 	bl	111c4 <asctime@plt>
   3fca8:	e1a03000 	mov	r3, r0
   3fcac:	e58d3004 	str	r3, [sp, #4]
   3fcb0:	e3a03e11 	mov	r3, #272	; 0x110
   3fcb4:	e58d3000 	str	r3, [sp]
   3fcb8:	e59f301c 	ldr	r3, [pc, #28]	; 3fcdc <Hardware::SetSysTime(long)+0x68>
   3fcbc:	e59f201c 	ldr	r2, [pc, #28]	; 3fce0 <Hardware::SetSysTime(long)+0x6c>
   3fcc0:	e59f101c 	ldr	r1, [pc, #28]	; 3fce4 <Hardware::SetSysTime(long)+0x70>
   3fcc4:	e1a00004 	mov	r0, r4
   3fcc8:	ebff45dc 	bl	11440 <fprintf@plt>
   3fccc:	e1a00000 	nop			; (mov r0, r0)
   3fcd0:	e24bd008 	sub	sp, fp, #8
   3fcd4:	e8bd8810 	pop	{r4, fp, pc}
   3fcd8:	0005c298 	.word	0x0005c298
   3fcdc:	0004a8e0 	.word	0x0004a8e0
   3fce0:	0004adac 	.word	0x0004adac
   3fce4:	0004aad8 	.word	0x0004aad8

0003fce8 <Hardware::SetTime(tm const*)>:
   3fce8:	e92d4810 	push	{r4, fp, lr}
   3fcec:	e28db008 	add	fp, sp, #8
   3fcf0:	e24dd014 	sub	sp, sp, #20
   3fcf4:	e50b0010 	str	r0, [fp, #-16]
   3fcf8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   3fcfc:	e59f303c 	ldr	r3, [pc, #60]	; 3fd40 <Hardware::SetTime(tm const*)+0x58>
   3fd00:	e5934000 	ldr	r4, [r3]
   3fd04:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   3fd08:	ebff452d 	bl	111c4 <asctime@plt>
   3fd0c:	e1a03000 	mov	r3, r0
   3fd10:	e58d3004 	str	r3, [sp, #4]
   3fd14:	e3a03f45 	mov	r3, #276	; 0x114
   3fd18:	e58d3000 	str	r3, [sp]
   3fd1c:	e59f3020 	ldr	r3, [pc, #32]	; 3fd44 <Hardware::SetTime(tm const*)+0x5c>
   3fd20:	e59f2020 	ldr	r2, [pc, #32]	; 3fd48 <Hardware::SetTime(tm const*)+0x60>
   3fd24:	e59f1020 	ldr	r1, [pc, #32]	; 3fd4c <Hardware::SetTime(tm const*)+0x64>
   3fd28:	e1a00004 	mov	r0, r4
   3fd2c:	ebff45c3 	bl	11440 <fprintf@plt>
   3fd30:	e3a03001 	mov	r3, #1
   3fd34:	e1a00003 	mov	r0, r3
   3fd38:	e24bd008 	sub	sp, fp, #8
   3fd3c:	e8bd8810 	pop	{r4, fp, pc}
   3fd40:	0005c298 	.word	0x0005c298
   3fd44:	0004a8e0 	.word	0x0004a8e0
   3fd48:	0004adb8 	.word	0x0004adb8
   3fd4c:	0004aad8 	.word	0x0004aad8

0003fd50 <Hardware::GetTime(tm*)>:
   3fd50:	e92d4800 	push	{fp, lr}
   3fd54:	e28db004 	add	fp, sp, #4
   3fd58:	e24dd010 	sub	sp, sp, #16
   3fd5c:	e50b0010 	str	r0, [fp, #-16]
   3fd60:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   3fd64:	e3a00000 	mov	r0, #0
   3fd68:	ebff45c6 	bl	11488 <time@plt>
   3fd6c:	e1a03000 	mov	r3, r0
   3fd70:	e50b300c 	str	r3, [fp, #-12]
   3fd74:	e24b300c 	sub	r3, fp, #12
   3fd78:	e1a00003 	mov	r0, r3
   3fd7c:	ebff4552 	bl	112cc <localtime@plt>
   3fd80:	e50b0008 	str	r0, [fp, #-8]
   3fd84:	e51b3008 	ldr	r3, [fp, #-8]
   3fd88:	e5932014 	ldr	r2, [r3, #20]
   3fd8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3fd90:	e5832014 	str	r2, [r3, #20]
   3fd94:	e51b3008 	ldr	r3, [fp, #-8]
   3fd98:	e5932010 	ldr	r2, [r3, #16]
   3fd9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3fda0:	e5832010 	str	r2, [r3, #16]
   3fda4:	e51b3008 	ldr	r3, [fp, #-8]
   3fda8:	e593200c 	ldr	r2, [r3, #12]
   3fdac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3fdb0:	e583200c 	str	r2, [r3, #12]
   3fdb4:	e51b3008 	ldr	r3, [fp, #-8]
   3fdb8:	e5932008 	ldr	r2, [r3, #8]
   3fdbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3fdc0:	e5832008 	str	r2, [r3, #8]
   3fdc4:	e51b3008 	ldr	r3, [fp, #-8]
   3fdc8:	e5932004 	ldr	r2, [r3, #4]
   3fdcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3fdd0:	e5832004 	str	r2, [r3, #4]
   3fdd4:	e51b3008 	ldr	r3, [fp, #-8]
   3fdd8:	e5932000 	ldr	r2, [r3]
   3fddc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   3fde0:	e5832000 	str	r2, [r3]
   3fde4:	e1a00000 	nop			; (mov r0, r0)
   3fde8:	e24bd004 	sub	sp, fp, #4
   3fdec:	e8bd8800 	pop	{fp, pc}

0003fdf0 <Hardware::Reboot()>:
   3fdf0:	e92d4800 	push	{fp, lr}
   3fdf4:	e28db004 	add	fp, sp, #4
   3fdf8:	e24dd008 	sub	sp, sp, #8
   3fdfc:	e50b0008 	str	r0, [fp, #-8]
   3fe00:	ebff4585 	bl	1141c <geteuid@plt>
   3fe04:	e1a03000 	mov	r3, r0
   3fe08:	e3530000 	cmp	r3, #0
   3fe0c:	03a03001 	moveq	r3, #1
   3fe10:	13a03000 	movne	r3, #0
   3fe14:	e6ef3073 	uxtb	r3, r3
   3fe18:	e3530000 	cmp	r3, #0
   3fe1c:	0a00000d 	beq	3fe58 <Hardware::Reboot()+0x68>
   3fe20:	ebff44c9 	bl	1114c <sync@plt>
   3fe24:	e59f0044 	ldr	r0, [pc, #68]	; 3fe70 <Hardware::Reboot()+0x80>
   3fe28:	ebff44f7 	bl	1120c <reboot@plt>
   3fe2c:	e1a03000 	mov	r3, r0
   3fe30:	e3530000 	cmp	r3, #0
   3fe34:	03a03001 	moveq	r3, #1
   3fe38:	13a03000 	movne	r3, #0
   3fe3c:	e6ef3073 	uxtb	r3, r3
   3fe40:	e3530000 	cmp	r3, #0
   3fe44:	0a000001 	beq	3fe50 <Hardware::Reboot()+0x60>
   3fe48:	e3a03001 	mov	r3, #1
   3fe4c:	ea000004 	b	3fe64 <Hardware::Reboot()+0x74>
   3fe50:	e59f001c 	ldr	r0, [pc, #28]	; 3fe74 <Hardware::Reboot()+0x84>
   3fe54:	ebff44f5 	bl	11230 <perror@plt>
   3fe58:	e59f0018 	ldr	r0, [pc, #24]	; 3fe78 <Hardware::Reboot()+0x88>
   3fe5c:	ebff44f0 	bl	11224 <puts@plt>
   3fe60:	e3a03000 	mov	r3, #0
   3fe64:	e1a00003 	mov	r0, r3
   3fe68:	e24bd004 	sub	sp, fp, #4
   3fe6c:	e8bd8800 	pop	{fp, pc}
   3fe70:	01234567 	.word	0x01234567
   3fe74:	0004aaf0 	.word	0x0004aaf0
   3fe78:	0004ab18 	.word	0x0004ab18

0003fe7c <Hardware::PowerOff()>:
   3fe7c:	e92d4800 	push	{fp, lr}
   3fe80:	e28db004 	add	fp, sp, #4
   3fe84:	e24dd008 	sub	sp, sp, #8
   3fe88:	e50b0008 	str	r0, [fp, #-8]
   3fe8c:	ebff4562 	bl	1141c <geteuid@plt>
   3fe90:	e1a03000 	mov	r3, r0
   3fe94:	e3530000 	cmp	r3, #0
   3fe98:	03a03001 	moveq	r3, #1
   3fe9c:	13a03000 	movne	r3, #0
   3fea0:	e6ef3073 	uxtb	r3, r3
   3fea4:	e3530000 	cmp	r3, #0
   3fea8:	0a00000f 	beq	3feec <Hardware::PowerOff()+0x70>
   3feac:	ebff44a6 	bl	1114c <sync@plt>
   3feb0:	e59f004c 	ldr	r0, [pc, #76]	; 3ff04 <Hardware::PowerOff()+0x88>
   3feb4:	ebff44d4 	bl	1120c <reboot@plt>
   3feb8:	e1a03000 	mov	r3, r0
   3febc:	e3530000 	cmp	r3, #0
   3fec0:	03a03001 	moveq	r3, #1
   3fec4:	13a03000 	movne	r3, #0
   3fec8:	e6ef3073 	uxtb	r3, r3
   3fecc:	e3530000 	cmp	r3, #0
   3fed0:	0a000001 	beq	3fedc <Hardware::PowerOff()+0x60>
   3fed4:	e3a03001 	mov	r3, #1
   3fed8:	ea000006 	b	3fef8 <Hardware::PowerOff()+0x7c>
   3fedc:	e59f0024 	ldr	r0, [pc, #36]	; 3ff08 <Hardware::PowerOff()+0x8c>
   3fee0:	ebff44d2 	bl	11230 <perror@plt>
   3fee4:	e3a03000 	mov	r3, #0
   3fee8:	ea000002 	b	3fef8 <Hardware::PowerOff()+0x7c>
   3feec:	e59f0018 	ldr	r0, [pc, #24]	; 3ff0c <Hardware::PowerOff()+0x90>
   3fef0:	ebff44cb 	bl	11224 <puts@plt>
   3fef4:	e3a03000 	mov	r3, #0
   3fef8:	e1a00003 	mov	r0, r3
   3fefc:	e24bd004 	sub	sp, fp, #4
   3ff00:	e8bd8800 	pop	{fp, pc}
   3ff04:	4321fedc 	.word	0x4321fedc
   3ff08:	0004ab4c 	.word	0x0004ab4c
   3ff0c:	0004ab74 	.word	0x0004ab74

0003ff10 <Hardware::GetCoreTemperature()>:
   3ff10:	e92d4800 	push	{fp, lr}
   3ff14:	e28db004 	add	fp, sp, #4
   3ff18:	e24dd060 	sub	sp, sp, #96	; 0x60
   3ff1c:	e50b0060 	str	r0, [fp, #-96]	; 0xffffffa0
   3ff20:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
   3ff24:	e5933000 	ldr	r3, [r3]
   3ff28:	e3530002 	cmp	r3, #2
   3ff2c:	1a000026 	bne	3ffcc <Hardware::GetCoreTemperature()+0xbc>
   3ff30:	e59f314c 	ldr	r3, [pc, #332]	; 40084 <Hardware::GetCoreTemperature()+0x174>
   3ff34:	e24bc058 	sub	ip, fp, #88	; 0x58
   3ff38:	e1a0e003 	mov	lr, r3
   3ff3c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3ff40:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3ff44:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3ff48:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3ff4c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3ff50:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3ff54:	e89e0007 	ldm	lr, {r0, r1, r2}
   3ff58:	e8ac0003 	stmia	ip!, {r0, r1}
   3ff5c:	e5cc2000 	strb	r2, [ip]
   3ff60:	e24b3058 	sub	r3, fp, #88	; 0x58
   3ff64:	e59f111c 	ldr	r1, [pc, #284]	; 40088 <Hardware::GetCoreTemperature()+0x178>
   3ff68:	e1a00003 	mov	r0, r3
   3ff6c:	ebff4479 	bl	11158 <popen@plt>
   3ff70:	e50b0008 	str	r0, [fp, #-8]
   3ff74:	e24b3014 	sub	r3, fp, #20
   3ff78:	e51b2008 	ldr	r2, [fp, #-8]
   3ff7c:	e3a01007 	mov	r1, #7
   3ff80:	e1a00003 	mov	r0, r3
   3ff84:	ebff4515 	bl	113e0 <fgets@plt>
   3ff88:	e1a03000 	mov	r3, r0
   3ff8c:	e3530000 	cmp	r3, #0
   3ff90:	03a03001 	moveq	r3, #1
   3ff94:	13a03000 	movne	r3, #0
   3ff98:	e6ef3073 	uxtb	r3, r3
   3ff9c:	e3530000 	cmp	r3, #0
   3ffa0:	0a000003 	beq	3ffb4 <Hardware::GetCoreTemperature()+0xa4>
   3ffa4:	e51b0008 	ldr	r0, [fp, #-8]
   3ffa8:	ebff44f7 	bl	1138c <pclose@plt>
   3ffac:	eddf7a33 	vldr	s15, [pc, #204]	; 40080 <Hardware::GetCoreTemperature()+0x170>
   3ffb0:	ea00002f 	b	40074 <Hardware::GetCoreTemperature()+0x164>
   3ffb4:	e24b3014 	sub	r3, fp, #20
   3ffb8:	e1a00003 	mov	r0, r3
   3ffbc:	ebff4525 	bl	11458 <atof@plt>
   3ffc0:	eeb07b40 	vmov.f64	d7, d0
   3ffc4:	eef77bc7 	vcvt.f32.f64	s15, d7
   3ffc8:	ea000029 	b	40074 <Hardware::GetCoreTemperature()+0x164>
   3ffcc:	e59f30b8 	ldr	r3, [pc, #184]	; 4008c <Hardware::GetCoreTemperature()+0x17c>
   3ffd0:	e24bc058 	sub	ip, fp, #88	; 0x58
   3ffd4:	e1a0e003 	mov	lr, r3
   3ffd8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3ffdc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3ffe0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3ffe4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3ffe8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3ffec:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3fff0:	e89e0003 	ldm	lr, {r0, r1}
   3fff4:	e58c0000 	str	r0, [ip]
   3fff8:	e28cc004 	add	ip, ip, #4
   3fffc:	e1cc10b0 	strh	r1, [ip]
   40000:	e28cc002 	add	ip, ip, #2
   40004:	e1a03821 	lsr	r3, r1, #16
   40008:	e5cc3000 	strb	r3, [ip]
   4000c:	e24b3058 	sub	r3, fp, #88	; 0x58
   40010:	e59f1070 	ldr	r1, [pc, #112]	; 40088 <Hardware::GetCoreTemperature()+0x178>
   40014:	e1a00003 	mov	r0, r3
   40018:	ebff444e 	bl	11158 <popen@plt>
   4001c:	e50b000c 	str	r0, [fp, #-12]
   40020:	e24b301c 	sub	r3, fp, #28
   40024:	e51b200c 	ldr	r2, [fp, #-12]
   40028:	e3a01007 	mov	r1, #7
   4002c:	e1a00003 	mov	r0, r3
   40030:	ebff44ea 	bl	113e0 <fgets@plt>
   40034:	e1a03000 	mov	r3, r0
   40038:	e3530000 	cmp	r3, #0
   4003c:	03a03001 	moveq	r3, #1
   40040:	13a03000 	movne	r3, #0
   40044:	e6ef3073 	uxtb	r3, r3
   40048:	e3530000 	cmp	r3, #0
   4004c:	0a000003 	beq	40060 <Hardware::GetCoreTemperature()+0x150>
   40050:	e51b000c 	ldr	r0, [fp, #-12]
   40054:	ebff44cc 	bl	1138c <pclose@plt>
   40058:	eddf7a08 	vldr	s15, [pc, #32]	; 40080 <Hardware::GetCoreTemperature()+0x170>
   4005c:	ea000004 	b	40074 <Hardware::GetCoreTemperature()+0x164>
   40060:	e24b301c 	sub	r3, fp, #28
   40064:	e1a00003 	mov	r0, r3
   40068:	ebff44fa 	bl	11458 <atof@plt>
   4006c:	eeb07b40 	vmov.f64	d7, d0
   40070:	eef77bc7 	vcvt.f32.f64	s15, d7
   40074:	eeb00a67 	vmov.f32	s0, s15
   40078:	e24bd004 	sub	sp, fp, #4
   4007c:	e8bd8800 	pop	{fp, pc}
   40080:	bf800000 	.word	0xbf800000
   40084:	0004aba8 	.word	0x0004aba8
   40088:	0004a918 	.word	0x0004a918
   4008c:	0004abe4 	.word	0x0004abe4

00040090 <Hardware::GetCoreTemperatureMax()>:
   40090:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   40094:	e28db000 	add	fp, sp, #0
   40098:	e24dd00c 	sub	sp, sp, #12
   4009c:	e50b0008 	str	r0, [fp, #-8]
   400a0:	e59f3010 	ldr	r3, [pc, #16]	; 400b8 <Hardware::GetCoreTemperatureMax()+0x28>
   400a4:	ee073a90 	vmov	s15, r3
   400a8:	eeb00a67 	vmov.f32	s0, s15
   400ac:	e28bd000 	add	sp, fp, #0
   400b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   400b4:	e12fff1e 	bx	lr
   400b8:	42aa0000 	.word	0x42aa0000

000400bc <Hardware::SetLed(hardware::LedStatus)>:
   400bc:	e92d4800 	push	{fp, lr}
   400c0:	e28db004 	add	fp, sp, #4
   400c4:	e24dd010 	sub	sp, sp, #16
   400c8:	e50b0010 	str	r0, [fp, #-16]
   400cc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   400d0:	e51b3010 	ldr	r3, [fp, #-16]
   400d4:	e5933000 	ldr	r3, [r3]
   400d8:	e3530002 	cmp	r3, #2
   400dc:	1a000027 	bne	40180 <Hardware::SetLed(hardware::LedStatus)+0xc4>
   400e0:	e59f30a0 	ldr	r3, [pc, #160]	; 40188 <Hardware::SetLed(hardware::LedStatus)+0xcc>
   400e4:	e5933000 	ldr	r3, [r3]
   400e8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   400ec:	e1520003 	cmp	r2, r3
   400f0:	0a000021 	beq	4017c <Hardware::SetLed(hardware::LedStatus)+0xc0>
   400f4:	e59f208c 	ldr	r2, [pc, #140]	; 40188 <Hardware::SetLed(hardware::LedStatus)+0xcc>
   400f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   400fc:	e5823000 	str	r3, [r2]
   40100:	e3a03000 	mov	r3, #0
   40104:	e50b3008 	str	r3, [fp, #-8]
   40108:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   4010c:	e3530003 	cmp	r3, #3
   40110:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   40114:	ea00000f 	b	40158 <Hardware::SetLed(hardware::LedStatus)+0x9c>
   40118:	00040128 	.word	0x00040128
   4011c:	00040134 	.word	0x00040134
   40120:	00040140 	.word	0x00040140
   40124:	0004014c 	.word	0x0004014c
   40128:	e59f305c 	ldr	r3, [pc, #92]	; 4018c <Hardware::SetLed(hardware::LedStatus)+0xd0>
   4012c:	e50b3008 	str	r3, [fp, #-8]
   40130:	ea000009 	b	4015c <Hardware::SetLed(hardware::LedStatus)+0xa0>
   40134:	e59f3054 	ldr	r3, [pc, #84]	; 40190 <Hardware::SetLed(hardware::LedStatus)+0xd4>
   40138:	e50b3008 	str	r3, [fp, #-8]
   4013c:	ea000006 	b	4015c <Hardware::SetLed(hardware::LedStatus)+0xa0>
   40140:	e59f304c 	ldr	r3, [pc, #76]	; 40194 <Hardware::SetLed(hardware::LedStatus)+0xd8>
   40144:	e50b3008 	str	r3, [fp, #-8]
   40148:	ea000003 	b	4015c <Hardware::SetLed(hardware::LedStatus)+0xa0>
   4014c:	e59f3044 	ldr	r3, [pc, #68]	; 40198 <Hardware::SetLed(hardware::LedStatus)+0xdc>
   40150:	e50b3008 	str	r3, [fp, #-8]
   40154:	ea000000 	b	4015c <Hardware::SetLed(hardware::LedStatus)+0xa0>
   40158:	e1a00000 	nop			; (mov r0, r0)
   4015c:	e51b3008 	ldr	r3, [fp, #-8]
   40160:	e3530000 	cmp	r3, #0
   40164:	0a000005 	beq	40180 <Hardware::SetLed(hardware::LedStatus)+0xc4>
   40168:	e51b0008 	ldr	r0, [fp, #-8]
   4016c:	ebff445c 	bl	112e4 <system@plt>
   40170:	e1a03000 	mov	r3, r0
   40174:	e3530000 	cmp	r3, #0
   40178:	ea000000 	b	40180 <Hardware::SetLed(hardware::LedStatus)+0xc4>
   4017c:	e1a00000 	nop			; (mov r0, r0)
   40180:	e24bd004 	sub	sp, fp, #4
   40184:	e8bd8800 	pop	{fp, pc}
   40188:	0005f3e0 	.word	0x0005f3e0
   4018c:	0004ac94 	.word	0x0004ac94
   40190:	0004acc8 	.word	0x0004acc8
   40194:	0004acfc 	.word	0x0004acfc
   40198:	0004ad34 	.word	0x0004ad34

0004019c <Hardware::ExecCmd(char const*, char*, int)>:
   4019c:	e92d4800 	push	{fp, lr}
   401a0:	e28db004 	add	fp, sp, #4
   401a4:	e24dd018 	sub	sp, sp, #24
   401a8:	e50b0010 	str	r0, [fp, #-16]
   401ac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   401b0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   401b4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   401b8:	e59f10a4 	ldr	r1, [pc, #164]	; 40264 <Hardware::ExecCmd(char const*, char*, int)+0xc8>
   401bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   401c0:	ebff43e4 	bl	11158 <popen@plt>
   401c4:	e50b0008 	str	r0, [fp, #-8]
   401c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   401cc:	e2433001 	sub	r3, r3, #1
   401d0:	e51b2008 	ldr	r2, [fp, #-8]
   401d4:	e1a01003 	mov	r1, r3
   401d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   401dc:	ebff447f 	bl	113e0 <fgets@plt>
   401e0:	e1a03000 	mov	r3, r0
   401e4:	e3530000 	cmp	r3, #0
   401e8:	03a03001 	moveq	r3, #1
   401ec:	13a03000 	movne	r3, #0
   401f0:	e6ef3073 	uxtb	r3, r3
   401f4:	e3530000 	cmp	r3, #0
   401f8:	0a000003 	beq	4020c <Hardware::ExecCmd(char const*, char*, int)+0x70>
   401fc:	e51b0008 	ldr	r0, [fp, #-8]
   40200:	ebff4461 	bl	1138c <pclose@plt>
   40204:	e3a03000 	mov	r3, #0
   40208:	ea000012 	b	40258 <Hardware::ExecCmd(char const*, char*, int)+0xbc>
   4020c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   40210:	ebff4484 	bl	11428 <strlen@plt>
   40214:	e50b000c 	str	r0, [fp, #-12]
   40218:	e51b300c 	ldr	r3, [fp, #-12]
   4021c:	e2433001 	sub	r3, r3, #1
   40220:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   40224:	e0823003 	add	r3, r2, r3
   40228:	e5d33000 	ldrb	r3, [r3]
   4022c:	e353001f 	cmp	r3, #31
   40230:	8a000005 	bhi	4024c <Hardware::ExecCmd(char const*, char*, int)+0xb0>
   40234:	e51b300c 	ldr	r3, [fp, #-12]
   40238:	e2433001 	sub	r3, r3, #1
   4023c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   40240:	e0823003 	add	r3, r2, r3
   40244:	e3a02000 	mov	r2, #0
   40248:	e5c32000 	strb	r2, [r3]
   4024c:	e51b0008 	ldr	r0, [fp, #-8]
   40250:	ebff444d 	bl	1138c <pclose@plt>
   40254:	e3a03001 	mov	r3, #1
   40258:	e1a00003 	mov	r0, r3
   4025c:	e24bd004 	sub	sp, fp, #4
   40260:	e8bd8800 	pop	{fp, pc}
   40264:	0004a918 	.word	0x0004a918

00040268 <Hardware::Micros()>:
   40268:	e92d4800 	push	{fp, lr}
   4026c:	e28db004 	add	fp, sp, #4
   40270:	e24dd010 	sub	sp, sp, #16
   40274:	e50b0010 	str	r0, [fp, #-16]
   40278:	e24b300c 	sub	r3, fp, #12
   4027c:	e3a01000 	mov	r1, #0
   40280:	e1a00003 	mov	r0, r3
   40284:	ebff43b6 	bl	11164 <gettimeofday@plt>
   40288:	e51b100c 	ldr	r1, [fp, #-12]
   4028c:	e1a02001 	mov	r2, r1
   40290:	e1a02282 	lsl	r2, r2, #5
   40294:	e0422001 	sub	r2, r2, r1
   40298:	e1a03302 	lsl	r3, r2, #6
   4029c:	e0433002 	sub	r3, r3, r2
   402a0:	e1a03183 	lsl	r3, r3, #3
   402a4:	e0833001 	add	r3, r3, r1
   402a8:	e1a03303 	lsl	r3, r3, #6
   402ac:	e1a02003 	mov	r2, r3
   402b0:	e51b3008 	ldr	r3, [fp, #-8]
   402b4:	e0823003 	add	r3, r2, r3
   402b8:	e1a00003 	mov	r0, r3
   402bc:	e24bd004 	sub	sp, fp, #4
   402c0:	e8bd8800 	pop	{fp, pc}

000402c4 <Hardware::Millis()>:
   402c4:	e92d4800 	push	{fp, lr}
   402c8:	e28db004 	add	fp, sp, #4
   402cc:	e24dd010 	sub	sp, sp, #16
   402d0:	e50b0010 	str	r0, [fp, #-16]
   402d4:	e24b300c 	sub	r3, fp, #12
   402d8:	e3a01000 	mov	r1, #0
   402dc:	e1a00003 	mov	r0, r3
   402e0:	ebff439f 	bl	11164 <gettimeofday@plt>
   402e4:	e51b200c 	ldr	r2, [fp, #-12]
   402e8:	e1a03002 	mov	r3, r2
   402ec:	e1a03283 	lsl	r3, r3, #5
   402f0:	e0433002 	sub	r3, r3, r2
   402f4:	e1a03103 	lsl	r3, r3, #2
   402f8:	e0833002 	add	r3, r3, r2
   402fc:	e1a03183 	lsl	r3, r3, #3
   40300:	e1a01003 	mov	r1, r3
   40304:	e51b3008 	ldr	r3, [fp, #-8]
   40308:	e59f201c 	ldr	r2, [pc, #28]	; 4032c <Hardware::Millis()+0x68>
   4030c:	e0c20392 	smull	r0, r2, r2, r3
   40310:	e1a02342 	asr	r2, r2, #6
   40314:	e1a03fc3 	asr	r3, r3, #31
   40318:	e0423003 	sub	r3, r2, r3
   4031c:	e0813003 	add	r3, r1, r3
   40320:	e1a00003 	mov	r0, r3
   40324:	e24bd004 	sub	sp, fp, #4
   40328:	e8bd8800 	pop	{fp, pc}
   4032c:	10624dd3 	.word	0x10624dd3

00040330 <Hardware::GetUuid(unsigned char*)>:
   40330:	e92d4800 	push	{fp, lr}
   40334:	e28db004 	add	fp, sp, #4
   40338:	e24dd058 	sub	sp, sp, #88	; 0x58
   4033c:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
   40340:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
   40344:	e59f3194 	ldr	r3, [pc, #404]	; 404e0 <Hardware::GetUuid(unsigned char*)+0x1b0>
   40348:	e24bc050 	sub	ip, fp, #80	; 0x50
   4034c:	e1a0e003 	mov	lr, r3
   40350:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   40354:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   40358:	e59e3000 	ldr	r3, [lr]
   4035c:	e58c3000 	str	r3, [ip]
   40360:	e24b203c 	sub	r2, fp, #60	; 0x3c
   40364:	e24b1050 	sub	r1, fp, #80	; 0x50
   40368:	e3a03026 	mov	r3, #38	; 0x26
   4036c:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
   40370:	ebffff89 	bl	4019c <Hardware::ExecCmd(char const*, char*, int)>
   40374:	e3a0300d 	mov	r3, #13
   40378:	e50b3008 	str	r3, [fp, #-8]
   4037c:	e51b3008 	ldr	r3, [fp, #-8]
   40380:	e3530000 	cmp	r3, #0
   40384:	0a00000d 	beq	403c0 <Hardware::GetUuid(unsigned char*)+0x90>
   40388:	e51b3008 	ldr	r3, [fp, #-8]
   4038c:	e2832013 	add	r2, r3, #19
   40390:	e51b3008 	ldr	r3, [fp, #-8]
   40394:	e2833017 	add	r3, r3, #23
   40398:	e24b1004 	sub	r1, fp, #4
   4039c:	e0812002 	add	r2, r1, r2
   403a0:	e5522038 	ldrb	r2, [r2, #-56]	; 0xffffffc8
   403a4:	e24b1004 	sub	r1, fp, #4
   403a8:	e0813003 	add	r3, r1, r3
   403ac:	e5432038 	strb	r2, [r3, #-56]	; 0xffffffc8
   403b0:	e51b3008 	ldr	r3, [fp, #-8]
   403b4:	e2433001 	sub	r3, r3, #1
   403b8:	e50b3008 	str	r3, [fp, #-8]
   403bc:	eaffffee 	b	4037c <Hardware::GetUuid(unsigned char*)+0x4c>
   403c0:	e3a03005 	mov	r3, #5
   403c4:	e50b300c 	str	r3, [fp, #-12]
   403c8:	e51b300c 	ldr	r3, [fp, #-12]
   403cc:	e3530000 	cmp	r3, #0
   403d0:	0a00000d 	beq	4040c <Hardware::GetUuid(unsigned char*)+0xdc>
   403d4:	e51b300c 	ldr	r3, [fp, #-12]
   403d8:	e283200f 	add	r2, r3, #15
   403dc:	e51b300c 	ldr	r3, [fp, #-12]
   403e0:	e2833012 	add	r3, r3, #18
   403e4:	e24b1004 	sub	r1, fp, #4
   403e8:	e0812002 	add	r2, r1, r2
   403ec:	e5522038 	ldrb	r2, [r2, #-56]	; 0xffffffc8
   403f0:	e24b1004 	sub	r1, fp, #4
   403f4:	e0813003 	add	r3, r1, r3
   403f8:	e5432038 	strb	r2, [r3, #-56]	; 0xffffffc8
   403fc:	e51b300c 	ldr	r3, [fp, #-12]
   40400:	e2433001 	sub	r3, r3, #1
   40404:	e50b300c 	str	r3, [fp, #-12]
   40408:	eaffffee 	b	403c8 <Hardware::GetUuid(unsigned char*)+0x98>
   4040c:	e3a03005 	mov	r3, #5
   40410:	e50b3010 	str	r3, [fp, #-16]
   40414:	e51b3010 	ldr	r3, [fp, #-16]
   40418:	e3530000 	cmp	r3, #0
   4041c:	0a00000d 	beq	40458 <Hardware::GetUuid(unsigned char*)+0x128>
   40420:	e51b3010 	ldr	r3, [fp, #-16]
   40424:	e283200b 	add	r2, r3, #11
   40428:	e51b3010 	ldr	r3, [fp, #-16]
   4042c:	e283300d 	add	r3, r3, #13
   40430:	e24b1004 	sub	r1, fp, #4
   40434:	e0812002 	add	r2, r1, r2
   40438:	e5522038 	ldrb	r2, [r2, #-56]	; 0xffffffc8
   4043c:	e24b1004 	sub	r1, fp, #4
   40440:	e0813003 	add	r3, r1, r3
   40444:	e5432038 	strb	r2, [r3, #-56]	; 0xffffffc8
   40448:	e51b3010 	ldr	r3, [fp, #-16]
   4044c:	e2433001 	sub	r3, r3, #1
   40450:	e50b3010 	str	r3, [fp, #-16]
   40454:	eaffffee 	b	40414 <Hardware::GetUuid(unsigned char*)+0xe4>
   40458:	e3a03005 	mov	r3, #5
   4045c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   40460:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   40464:	e3530000 	cmp	r3, #0
   40468:	0a00000d 	beq	404a4 <Hardware::GetUuid(unsigned char*)+0x174>
   4046c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   40470:	e2832007 	add	r2, r3, #7
   40474:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   40478:	e2833008 	add	r3, r3, #8
   4047c:	e24b1004 	sub	r1, fp, #4
   40480:	e0812002 	add	r2, r1, r2
   40484:	e5522038 	ldrb	r2, [r2, #-56]	; 0xffffffc8
   40488:	e24b1004 	sub	r1, fp, #4
   4048c:	e0813003 	add	r3, r1, r3
   40490:	e5432038 	strb	r2, [r3, #-56]	; 0xffffffc8
   40494:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   40498:	e2433001 	sub	r3, r3, #1
   4049c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   404a0:	eaffffee 	b	40460 <Hardware::GetUuid(unsigned char*)+0x130>
   404a4:	e3a0302d 	mov	r3, #45	; 0x2d
   404a8:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
   404ac:	e3a0302d 	mov	r3, #45	; 0x2d
   404b0:	e54b302a 	strb	r3, [fp, #-42]	; 0xffffffd6
   404b4:	e3a0302d 	mov	r3, #45	; 0x2d
   404b8:	e54b302f 	strb	r3, [fp, #-47]	; 0xffffffd1
   404bc:	e3a0302d 	mov	r3, #45	; 0x2d
   404c0:	e54b3034 	strb	r3, [fp, #-52]	; 0xffffffcc
   404c4:	e24b303c 	sub	r3, fp, #60	; 0x3c
   404c8:	e51b105c 	ldr	r1, [fp, #-92]	; 0xffffffa4
   404cc:	e1a00003 	mov	r0, r3
   404d0:	ebff43e3 	bl	11464 <uuid_parse@plt>
   404d4:	e1a00000 	nop			; (mov r0, r0)
   404d8:	e24bd004 	sub	sp, fp, #4
   404dc:	e8bd8800 	pop	{fp, pc}
   404e0:	0004ac1c 	.word	0x0004ac1c

000404e4 <Hardware::Print()>:
   404e4:	e92d4800 	push	{fp, lr}
   404e8:	e28db004 	add	fp, sp, #4
   404ec:	e24dd040 	sub	sp, sp, #64	; 0x40
   404f0:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
   404f4:	e3a03000 	mov	r3, #0
   404f8:	e54b3008 	strb	r3, [fp, #-8]
   404fc:	e24b303c 	sub	r3, fp, #60	; 0x3c
   40500:	e1a01003 	mov	r1, r3
   40504:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
   40508:	ebffff88 	bl	40330 <Hardware::GetUuid(unsigned char*)>
   4050c:	e24b202c 	sub	r2, fp, #44	; 0x2c
   40510:	e24b303c 	sub	r3, fp, #60	; 0x3c
   40514:	e1a01002 	mov	r1, r2
   40518:	e1a00003 	mov	r0, r3
   4051c:	ebff4376 	bl	112fc <uuid_unparse@plt>
   40520:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   40524:	e2833f62 	add	r3, r3, #392	; 0x188
   40528:	e2833002 	add	r3, r3, #2
   4052c:	e1a01003 	mov	r1, r3
   40530:	e59f004c 	ldr	r0, [pc, #76]	; 40584 <Hardware::Print()+0xa0>
   40534:	ebff432e 	bl	111f4 <printf@plt>
   40538:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   4053c:	e2833f72 	add	r3, r3, #456	; 0x1c8
   40540:	e2833002 	add	r3, r3, #2
   40544:	e1a01003 	mov	r1, r3
   40548:	e59f0038 	ldr	r0, [pc, #56]	; 40588 <Hardware::Print()+0xa4>
   4054c:	ebff4328 	bl	111f4 <printf@plt>
   40550:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   40554:	e2833f82 	add	r3, r3, #520	; 0x208
   40558:	e2833002 	add	r3, r3, #2
   4055c:	e1a01003 	mov	r1, r3
   40560:	e59f0024 	ldr	r0, [pc, #36]	; 4058c <Hardware::Print()+0xa8>
   40564:	ebff4322 	bl	111f4 <printf@plt>
   40568:	e24b302c 	sub	r3, fp, #44	; 0x2c
   4056c:	e1a01003 	mov	r1, r3
   40570:	e59f0018 	ldr	r0, [pc, #24]	; 40590 <Hardware::Print()+0xac>
   40574:	ebff431e 	bl	111f4 <printf@plt>
   40578:	e1a00000 	nop			; (mov r0, r0)
   4057c:	e24bd004 	sub	sp, fp, #4
   40580:	e8bd8800 	pop	{fp, pc}
   40584:	0004ac30 	.word	0x0004ac30
   40588:	0004ac3c 	.word	0x0004ac3c
   4058c:	0004ac48 	.word	0x0004ac48
   40590:	0004ac54 	.word	0x0004ac54

00040594 <i2c_is_connected(unsigned char)>:
   40594:	e92d4800 	push	{fp, lr}
   40598:	e28db004 	add	fp, sp, #4
   4059c:	e24dd010 	sub	sp, sp, #16
   405a0:	e1a03000 	mov	r3, r0
   405a4:	e54b300d 	strb	r3, [fp, #-13]
   405a8:	e55b300d 	ldrb	r3, [fp, #-13]
   405ac:	e1a00003 	mov	r0, r3
   405b0:	eb00091c 	bl	42a28 <bcm2835_i2c_setSlaveAddress>
   405b4:	e55b300d 	ldrb	r3, [fp, #-13]
   405b8:	e353002f 	cmp	r3, #47	; 0x2f
   405bc:	9a000002 	bls	405cc <i2c_is_connected(unsigned char)+0x38>
   405c0:	e55b300d 	ldrb	r3, [fp, #-13]
   405c4:	e3530037 	cmp	r3, #55	; 0x37
   405c8:	9a000005 	bls	405e4 <i2c_is_connected(unsigned char)+0x50>
   405cc:	e55b300d 	ldrb	r3, [fp, #-13]
   405d0:	e353004f 	cmp	r3, #79	; 0x4f
   405d4:	9a000009 	bls	40600 <i2c_is_connected(unsigned char)+0x6c>
   405d8:	e55b300d 	ldrb	r3, [fp, #-13]
   405dc:	e353005f 	cmp	r3, #95	; 0x5f
   405e0:	8a000006 	bhi	40600 <i2c_is_connected(unsigned char)+0x6c>
   405e4:	e24b3006 	sub	r3, fp, #6
   405e8:	e3a01001 	mov	r1, #1
   405ec:	e1a00003 	mov	r0, r3
   405f0:	eb0009ce 	bl	42d30 <bcm2835_i2c_read>
   405f4:	e1a03000 	mov	r3, r0
   405f8:	e54b3005 	strb	r3, [fp, #-5]
   405fc:	ea000004 	b	40614 <i2c_is_connected(unsigned char)+0x80>
   40600:	e3a01000 	mov	r1, #0
   40604:	e3a00000 	mov	r0, #0
   40608:	eb00094e 	bl	42b48 <bcm2835_i2c_write>
   4060c:	e1a03000 	mov	r3, r0
   40610:	e54b3005 	strb	r3, [fp, #-5]
   40614:	e55b3005 	ldrb	r3, [fp, #-5]
   40618:	e3530000 	cmp	r3, #0
   4061c:	03a03001 	moveq	r3, #1
   40620:	13a03000 	movne	r3, #0
   40624:	e6ef3073 	uxtb	r3, r3
   40628:	e1a00003 	mov	r0, r3
   4062c:	e24bd004 	sub	sp, fp, #4
   40630:	e8bd8800 	pop	{fp, pc}

00040634 <I2cDetect::I2cDetect()>:
   40634:	e92d4800 	push	{fp, lr}
   40638:	e28db004 	add	fp, sp, #4
   4063c:	e24dd010 	sub	sp, sp, #16
   40640:	e50b0010 	str	r0, [fp, #-16]
   40644:	e59f00fc 	ldr	r0, [pc, #252]	; 40748 <I2cDetect::I2cDetect()+0x114>
   40648:	eb000929 	bl	42af4 <bcm2835_i2c_set_baudrate>
   4064c:	e59f00f8 	ldr	r0, [pc, #248]	; 4074c <I2cDetect::I2cDetect()+0x118>
   40650:	ebff42f3 	bl	11224 <puts@plt>
   40654:	e3a03000 	mov	r3, #0
   40658:	e50b3008 	str	r3, [fp, #-8]
   4065c:	e51b3008 	ldr	r3, [fp, #-8]
   40660:	e353007f 	cmp	r3, #127	; 0x7f
   40664:	8a000032 	bhi	40734 <I2cDetect::I2cDetect()+0x100>
   40668:	e51b1008 	ldr	r1, [fp, #-8]
   4066c:	e59f00dc 	ldr	r0, [pc, #220]	; 40750 <I2cDetect::I2cDetect()+0x11c>
   40670:	ebff42df 	bl	111f4 <printf@plt>
   40674:	e3a03000 	mov	r3, #0
   40678:	e50b300c 	str	r3, [fp, #-12]
   4067c:	e51b300c 	ldr	r3, [fp, #-12]
   40680:	e353000f 	cmp	r3, #15
   40684:	8a000024 	bhi	4071c <I2cDetect::I2cDetect()+0xe8>
   40688:	e51b2008 	ldr	r2, [fp, #-8]
   4068c:	e51b300c 	ldr	r3, [fp, #-12]
   40690:	e0823003 	add	r3, r2, r3
   40694:	e3530002 	cmp	r3, #2
   40698:	9a000004 	bls	406b0 <I2cDetect::I2cDetect()+0x7c>
   4069c:	e51b2008 	ldr	r2, [fp, #-8]
   406a0:	e51b300c 	ldr	r3, [fp, #-12]
   406a4:	e0823003 	add	r3, r2, r3
   406a8:	e3530077 	cmp	r3, #119	; 0x77
   406ac:	9a000002 	bls	406bc <I2cDetect::I2cDetect()+0x88>
   406b0:	e59f009c 	ldr	r0, [pc, #156]	; 40754 <I2cDetect::I2cDetect()+0x120>
   406b4:	ebff42ce 	bl	111f4 <printf@plt>
   406b8:	ea000013 	b	4070c <I2cDetect::I2cDetect()+0xd8>
   406bc:	e51b3008 	ldr	r3, [fp, #-8]
   406c0:	e6ef2073 	uxtb	r2, r3
   406c4:	e51b300c 	ldr	r3, [fp, #-12]
   406c8:	e6ef3073 	uxtb	r3, r3
   406cc:	e0823003 	add	r3, r2, r3
   406d0:	e6ef3073 	uxtb	r3, r3
   406d4:	e1a00003 	mov	r0, r3
   406d8:	ebffffad 	bl	40594 <i2c_is_connected(unsigned char)>
   406dc:	e1a03000 	mov	r3, r0
   406e0:	e3530000 	cmp	r3, #0
   406e4:	0a000006 	beq	40704 <I2cDetect::I2cDetect()+0xd0>
   406e8:	e51b2008 	ldr	r2, [fp, #-8]
   406ec:	e51b300c 	ldr	r3, [fp, #-12]
   406f0:	e0823003 	add	r3, r2, r3
   406f4:	e1a01003 	mov	r1, r3
   406f8:	e59f0058 	ldr	r0, [pc, #88]	; 40758 <I2cDetect::I2cDetect()+0x124>
   406fc:	ebff42bc 	bl	111f4 <printf@plt>
   40700:	ea000001 	b	4070c <I2cDetect::I2cDetect()+0xd8>
   40704:	e59f0050 	ldr	r0, [pc, #80]	; 4075c <I2cDetect::I2cDetect()+0x128>
   40708:	ebff42b9 	bl	111f4 <printf@plt>
   4070c:	e51b300c 	ldr	r3, [fp, #-12]
   40710:	e2833001 	add	r3, r3, #1
   40714:	e50b300c 	str	r3, [fp, #-12]
   40718:	eaffffd7 	b	4067c <I2cDetect::I2cDetect()+0x48>
   4071c:	e59f003c 	ldr	r0, [pc, #60]	; 40760 <I2cDetect::I2cDetect()+0x12c>
   40720:	ebff42bf 	bl	11224 <puts@plt>
   40724:	e51b3008 	ldr	r3, [fp, #-8]
   40728:	e2833010 	add	r3, r3, #16
   4072c:	e50b3008 	str	r3, [fp, #-8]
   40730:	eaffffc9 	b	4065c <I2cDetect::I2cDetect()+0x28>
   40734:	eb00087f 	bl	42938 <bcm2835_i2c_begin>
   40738:	e51b3010 	ldr	r3, [fp, #-16]
   4073c:	e1a00003 	mov	r0, r3
   40740:	e24bd004 	sub	sp, fp, #4
   40744:	e8bd8800 	pop	{fp, pc}
   40748:	000186a0 	.word	0x000186a0
   4074c:	0004add0 	.word	0x0004add0
   40750:	0004ae08 	.word	0x0004ae08
   40754:	0004ae10 	.word	0x0004ae10
   40758:	0004ae14 	.word	0x0004ae14
   4075c:	0004ae1c 	.word	0x0004ae1c
   40760:	0004ae20 	.word	0x0004ae20

00040764 <bcm2835_correct_order>:
   40764:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   40768:	e28db000 	add	fp, sp, #0
   4076c:	e24dd00c 	sub	sp, sp, #12
   40770:	e1a03000 	mov	r3, r0
   40774:	e54b3005 	strb	r3, [fp, #-5]
   40778:	e59f302c 	ldr	r3, [pc, #44]	; 407ac <bcm2835_correct_order+0x48>
   4077c:	e5d33000 	ldrb	r3, [r3]
   40780:	e3530000 	cmp	r3, #0
   40784:	1a000003 	bne	40798 <bcm2835_correct_order+0x34>
   40788:	e55b3005 	ldrb	r3, [fp, #-5]
   4078c:	e59f201c 	ldr	r2, [pc, #28]	; 407b0 <bcm2835_correct_order+0x4c>
   40790:	e7d23003 	ldrb	r3, [r2, r3]
   40794:	ea000000 	b	4079c <bcm2835_correct_order+0x38>
   40798:	e55b3005 	ldrb	r3, [fp, #-5]
   4079c:	e1a00003 	mov	r0, r3
   407a0:	e28bd000 	add	sp, fp, #0
   407a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   407a8:	e12fff1e 	bx	lr
   407ac:	0005c190 	.word	0x0005c190
   407b0:	0005c194 	.word	0x0005c194

000407b4 <bcm2835_regbase>:
   407b4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   407b8:	e28db000 	add	fp, sp, #0
   407bc:	e24dd00c 	sub	sp, sp, #12
   407c0:	e1a03000 	mov	r3, r0
   407c4:	e54b3005 	strb	r3, [fp, #-5]
   407c8:	e55b3005 	ldrb	r3, [fp, #-5]
   407cc:	e2433001 	sub	r3, r3, #1
   407d0:	e3530009 	cmp	r3, #9
   407d4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   407d8:	ea000027 	b	4087c <bcm2835_regbase+0xc8>
   407dc:	00040804 	.word	0x00040804
   407e0:	00040810 	.word	0x00040810
   407e4:	0004081c 	.word	0x0004081c
   407e8:	00040828 	.word	0x00040828
   407ec:	00040834 	.word	0x00040834
   407f0:	00040840 	.word	0x00040840
   407f4:	0004084c 	.word	0x0004084c
   407f8:	00040858 	.word	0x00040858
   407fc:	00040864 	.word	0x00040864
   40800:	00040870 	.word	0x00040870
   40804:	e59f3084 	ldr	r3, [pc, #132]	; 40890 <bcm2835_regbase+0xdc>
   40808:	e5933000 	ldr	r3, [r3]
   4080c:	ea00001b 	b	40880 <bcm2835_regbase+0xcc>
   40810:	e59f307c 	ldr	r3, [pc, #124]	; 40894 <bcm2835_regbase+0xe0>
   40814:	e5933000 	ldr	r3, [r3]
   40818:	ea000018 	b	40880 <bcm2835_regbase+0xcc>
   4081c:	e59f3074 	ldr	r3, [pc, #116]	; 40898 <bcm2835_regbase+0xe4>
   40820:	e5933000 	ldr	r3, [r3]
   40824:	ea000015 	b	40880 <bcm2835_regbase+0xcc>
   40828:	e59f306c 	ldr	r3, [pc, #108]	; 4089c <bcm2835_regbase+0xe8>
   4082c:	e5933000 	ldr	r3, [r3]
   40830:	ea000012 	b	40880 <bcm2835_regbase+0xcc>
   40834:	e59f3064 	ldr	r3, [pc, #100]	; 408a0 <bcm2835_regbase+0xec>
   40838:	e5933000 	ldr	r3, [r3]
   4083c:	ea00000f 	b	40880 <bcm2835_regbase+0xcc>
   40840:	e59f305c 	ldr	r3, [pc, #92]	; 408a4 <bcm2835_regbase+0xf0>
   40844:	e5933000 	ldr	r3, [r3]
   40848:	ea00000c 	b	40880 <bcm2835_regbase+0xcc>
   4084c:	e59f3054 	ldr	r3, [pc, #84]	; 408a8 <bcm2835_regbase+0xf4>
   40850:	e5933000 	ldr	r3, [r3]
   40854:	ea000009 	b	40880 <bcm2835_regbase+0xcc>
   40858:	e59f3030 	ldr	r3, [pc, #48]	; 40890 <bcm2835_regbase+0xdc>
   4085c:	e5933000 	ldr	r3, [r3]
   40860:	ea000006 	b	40880 <bcm2835_regbase+0xcc>
   40864:	e59f3040 	ldr	r3, [pc, #64]	; 408ac <bcm2835_regbase+0xf8>
   40868:	e5933000 	ldr	r3, [r3]
   4086c:	ea000003 	b	40880 <bcm2835_regbase+0xcc>
   40870:	e59f3038 	ldr	r3, [pc, #56]	; 408b0 <bcm2835_regbase+0xfc>
   40874:	e5933000 	ldr	r3, [r3]
   40878:	ea000000 	b	40880 <bcm2835_regbase+0xcc>
   4087c:	e3e03000 	mvn	r3, #0
   40880:	e1a00003 	mov	r0, r3
   40884:	e28bd000 	add	sp, fp, #0
   40888:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   4088c:	e12fff1e 	bx	lr
   40890:	0005c184 	.word	0x0005c184
   40894:	0005c168 	.word	0x0005c168
   40898:	0005c16c 	.word	0x0005c16c
   4089c:	0005c170 	.word	0x0005c170
   408a0:	0005c174 	.word	0x0005c174
   408a4:	0005c178 	.word	0x0005c178
   408a8:	0005c17c 	.word	0x0005c17c
   408ac:	0005c188 	.word	0x0005c188
   408b0:	0005c18c 	.word	0x0005c18c

000408b4 <bcm2835_set_debug>:
   408b4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   408b8:	e28db000 	add	fp, sp, #0
   408bc:	e24dd00c 	sub	sp, sp, #12
   408c0:	e1a03000 	mov	r3, r0
   408c4:	e54b3005 	strb	r3, [fp, #-5]
   408c8:	e59f2014 	ldr	r2, [pc, #20]	; 408e4 <bcm2835_set_debug+0x30>
   408cc:	e55b3005 	ldrb	r3, [fp, #-5]
   408d0:	e5c23000 	strb	r3, [r2]
   408d4:	e1a00000 	nop			; (mov r0, r0)
   408d8:	e28bd000 	add	sp, fp, #0
   408dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   408e0:	e12fff1e 	bx	lr
   408e4:	0005f3e4 	.word	0x0005f3e4

000408e8 <bcm2835_version>:
   408e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   408ec:	e28db000 	add	fp, sp, #0
   408f0:	e59f300c 	ldr	r3, [pc, #12]	; 40904 <bcm2835_version+0x1c>
   408f4:	e1a00003 	mov	r0, r3
   408f8:	e28bd000 	add	sp, fp, #0
   408fc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   40900:	e12fff1e 	bx	lr
   40904:	00002748 	.word	0x00002748

00040908 <bcm2835_peri_read>:
   40908:	e92d4800 	push	{fp, lr}
   4090c:	e28db004 	add	fp, sp, #4
   40910:	e24dd010 	sub	sp, sp, #16
   40914:	e50b0010 	str	r0, [fp, #-16]
   40918:	e59f3040 	ldr	r3, [pc, #64]	; 40960 <bcm2835_peri_read+0x58>
   4091c:	e5d33000 	ldrb	r3, [r3]
   40920:	e3530000 	cmp	r3, #0
   40924:	0a000004 	beq	4093c <bcm2835_peri_read+0x34>
   40928:	e51b1010 	ldr	r1, [fp, #-16]
   4092c:	e59f0030 	ldr	r0, [pc, #48]	; 40964 <bcm2835_peri_read+0x5c>
   40930:	ebff422f 	bl	111f4 <printf@plt>
   40934:	e3a03000 	mov	r3, #0
   40938:	ea000005 	b	40954 <bcm2835_peri_read+0x4c>
   4093c:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
   40940:	e51b3010 	ldr	r3, [fp, #-16]
   40944:	e5933000 	ldr	r3, [r3]
   40948:	e50b3008 	str	r3, [fp, #-8]
   4094c:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
   40950:	e51b3008 	ldr	r3, [fp, #-8]
   40954:	e1a00003 	mov	r0, r3
   40958:	e24bd004 	sub	sp, fp, #4
   4095c:	e8bd8800 	pop	{fp, pc}
   40960:	0005f3e4 	.word	0x0005f3e4
   40964:	0004ae24 	.word	0x0004ae24

00040968 <bcm2835_peri_read_nb>:
   40968:	e92d4800 	push	{fp, lr}
   4096c:	e28db004 	add	fp, sp, #4
   40970:	e24dd008 	sub	sp, sp, #8
   40974:	e50b0008 	str	r0, [fp, #-8]
   40978:	e59f3030 	ldr	r3, [pc, #48]	; 409b0 <bcm2835_peri_read_nb+0x48>
   4097c:	e5d33000 	ldrb	r3, [r3]
   40980:	e3530000 	cmp	r3, #0
   40984:	0a000004 	beq	4099c <bcm2835_peri_read_nb+0x34>
   40988:	e51b1008 	ldr	r1, [fp, #-8]
   4098c:	e59f0020 	ldr	r0, [pc, #32]	; 409b4 <bcm2835_peri_read_nb+0x4c>
   40990:	ebff4217 	bl	111f4 <printf@plt>
   40994:	e3a03000 	mov	r3, #0
   40998:	ea000001 	b	409a4 <bcm2835_peri_read_nb+0x3c>
   4099c:	e51b3008 	ldr	r3, [fp, #-8]
   409a0:	e5933000 	ldr	r3, [r3]
   409a4:	e1a00003 	mov	r0, r3
   409a8:	e24bd004 	sub	sp, fp, #4
   409ac:	e8bd8800 	pop	{fp, pc}
   409b0:	0005f3e4 	.word	0x0005f3e4
   409b4:	0004ae44 	.word	0x0004ae44

000409b8 <bcm2835_peri_write>:
   409b8:	e92d4800 	push	{fp, lr}
   409bc:	e28db004 	add	fp, sp, #4
   409c0:	e24dd008 	sub	sp, sp, #8
   409c4:	e50b0008 	str	r0, [fp, #-8]
   409c8:	e50b100c 	str	r1, [fp, #-12]
   409cc:	e59f303c 	ldr	r3, [pc, #60]	; 40a10 <bcm2835_peri_write+0x58>
   409d0:	e5d33000 	ldrb	r3, [r3]
   409d4:	e3530000 	cmp	r3, #0
   409d8:	0a000004 	beq	409f0 <bcm2835_peri_write+0x38>
   409dc:	e51b200c 	ldr	r2, [fp, #-12]
   409e0:	e51b1008 	ldr	r1, [fp, #-8]
   409e4:	e59f0028 	ldr	r0, [pc, #40]	; 40a14 <bcm2835_peri_write+0x5c>
   409e8:	ebff4201 	bl	111f4 <printf@plt>
   409ec:	ea000004 	b	40a04 <bcm2835_peri_write+0x4c>
   409f0:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
   409f4:	e51b3008 	ldr	r3, [fp, #-8]
   409f8:	e51b200c 	ldr	r2, [fp, #-12]
   409fc:	e5832000 	str	r2, [r3]
   40a00:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
   40a04:	e1a00000 	nop			; (mov r0, r0)
   40a08:	e24bd004 	sub	sp, fp, #4
   40a0c:	e8bd8800 	pop	{fp, pc}
   40a10:	0005f3e4 	.word	0x0005f3e4
   40a14:	0004ae64 	.word	0x0004ae64

00040a18 <bcm2835_peri_write_nb>:
   40a18:	e92d4800 	push	{fp, lr}
   40a1c:	e28db004 	add	fp, sp, #4
   40a20:	e24dd008 	sub	sp, sp, #8
   40a24:	e50b0008 	str	r0, [fp, #-8]
   40a28:	e50b100c 	str	r1, [fp, #-12]
   40a2c:	e59f3034 	ldr	r3, [pc, #52]	; 40a68 <bcm2835_peri_write_nb+0x50>
   40a30:	e5d33000 	ldrb	r3, [r3]
   40a34:	e3530000 	cmp	r3, #0
   40a38:	0a000004 	beq	40a50 <bcm2835_peri_write_nb+0x38>
   40a3c:	e51b200c 	ldr	r2, [fp, #-12]
   40a40:	e51b1008 	ldr	r1, [fp, #-8]
   40a44:	e59f0020 	ldr	r0, [pc, #32]	; 40a6c <bcm2835_peri_write_nb+0x54>
   40a48:	ebff41e9 	bl	111f4 <printf@plt>
   40a4c:	ea000002 	b	40a5c <bcm2835_peri_write_nb+0x44>
   40a50:	e51b3008 	ldr	r3, [fp, #-8]
   40a54:	e51b200c 	ldr	r2, [fp, #-12]
   40a58:	e5832000 	str	r2, [r3]
   40a5c:	e1a00000 	nop			; (mov r0, r0)
   40a60:	e24bd004 	sub	sp, fp, #4
   40a64:	e8bd8800 	pop	{fp, pc}
   40a68:	0005f3e4 	.word	0x0005f3e4
   40a6c:	0004ae90 	.word	0x0004ae90

00040a70 <bcm2835_peri_set_bits>:
   40a70:	e92d4800 	push	{fp, lr}
   40a74:	e28db004 	add	fp, sp, #4
   40a78:	e24dd018 	sub	sp, sp, #24
   40a7c:	e50b0010 	str	r0, [fp, #-16]
   40a80:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   40a84:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   40a88:	e51b0010 	ldr	r0, [fp, #-16]
   40a8c:	ebffff9d 	bl	40908 <bcm2835_peri_read>
   40a90:	e50b0008 	str	r0, [fp, #-8]
   40a94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   40a98:	e1e02003 	mvn	r2, r3
   40a9c:	e51b3008 	ldr	r3, [fp, #-8]
   40aa0:	e0022003 	and	r2, r2, r3
   40aa4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   40aa8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   40aac:	e0033001 	and	r3, r3, r1
   40ab0:	e1823003 	orr	r3, r2, r3
   40ab4:	e50b3008 	str	r3, [fp, #-8]
   40ab8:	e51b1008 	ldr	r1, [fp, #-8]
   40abc:	e51b0010 	ldr	r0, [fp, #-16]
   40ac0:	ebffffbc 	bl	409b8 <bcm2835_peri_write>
   40ac4:	e1a00000 	nop			; (mov r0, r0)
   40ac8:	e24bd004 	sub	sp, fp, #4
   40acc:	e8bd8800 	pop	{fp, pc}

00040ad0 <bcm2835_gpio_fsel>:
   40ad0:	e92d4800 	push	{fp, lr}
   40ad4:	e28db004 	add	fp, sp, #4
   40ad8:	e24dd018 	sub	sp, sp, #24
   40adc:	e1a03000 	mov	r3, r0
   40ae0:	e1a02001 	mov	r2, r1
   40ae4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   40ae8:	e1a03002 	mov	r3, r2
   40aec:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
   40af0:	e59f3094 	ldr	r3, [pc, #148]	; 40b8c <bcm2835_gpio_fsel+0xbc>
   40af4:	e5932000 	ldr	r2, [r3]
   40af8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   40afc:	e59f108c 	ldr	r1, [pc, #140]	; 40b90 <bcm2835_gpio_fsel+0xc0>
   40b00:	e0831391 	umull	r1, r3, r1, r3
   40b04:	e1a031a3 	lsr	r3, r3, #3
   40b08:	e6ef3073 	uxtb	r3, r3
   40b0c:	e1a03103 	lsl	r3, r3, #2
   40b10:	e0823003 	add	r3, r2, r3
   40b14:	e50b3008 	str	r3, [fp, #-8]
   40b18:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
   40b1c:	e59f306c 	ldr	r3, [pc, #108]	; 40b90 <bcm2835_gpio_fsel+0xc0>
   40b20:	e0831293 	umull	r1, r3, r3, r2
   40b24:	e1a011a3 	lsr	r1, r3, #3
   40b28:	e1a03001 	mov	r3, r1
   40b2c:	e1a03103 	lsl	r3, r3, #2
   40b30:	e0833001 	add	r3, r3, r1
   40b34:	e1a03083 	lsl	r3, r3, #1
   40b38:	e0423003 	sub	r3, r2, r3
   40b3c:	e6ef3073 	uxtb	r3, r3
   40b40:	e1a02003 	mov	r2, r3
   40b44:	e1a02082 	lsl	r2, r2, #1
   40b48:	e0823003 	add	r3, r2, r3
   40b4c:	e54b3009 	strb	r3, [fp, #-9]
   40b50:	e55b3009 	ldrb	r3, [fp, #-9]
   40b54:	e3a02007 	mov	r2, #7
   40b58:	e1a03312 	lsl	r3, r2, r3
   40b5c:	e50b3010 	str	r3, [fp, #-16]
   40b60:	e55b2016 	ldrb	r2, [fp, #-22]	; 0xffffffea
   40b64:	e55b3009 	ldrb	r3, [fp, #-9]
   40b68:	e1a03312 	lsl	r3, r2, r3
   40b6c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   40b70:	e51b2010 	ldr	r2, [fp, #-16]
   40b74:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   40b78:	e51b0008 	ldr	r0, [fp, #-8]
   40b7c:	ebffffbb 	bl	40a70 <bcm2835_peri_set_bits>
   40b80:	e1a00000 	nop			; (mov r0, r0)
   40b84:	e24bd004 	sub	sp, fp, #4
   40b88:	e8bd8800 	pop	{fp, pc}
   40b8c:	0005c168 	.word	0x0005c168
   40b90:	cccccccd 	.word	0xcccccccd

00040b94 <bcm2835_gpio_set>:
   40b94:	e92d4800 	push	{fp, lr}
   40b98:	e28db004 	add	fp, sp, #4
   40b9c:	e24dd010 	sub	sp, sp, #16
   40ba0:	e1a03000 	mov	r3, r0
   40ba4:	e54b300d 	strb	r3, [fp, #-13]
   40ba8:	e59f304c 	ldr	r3, [pc, #76]	; 40bfc <bcm2835_gpio_set+0x68>
   40bac:	e5932000 	ldr	r2, [r3]
   40bb0:	e55b300d 	ldrb	r3, [fp, #-13]
   40bb4:	e1a032a3 	lsr	r3, r3, #5
   40bb8:	e6ef3073 	uxtb	r3, r3
   40bbc:	e2833007 	add	r3, r3, #7
   40bc0:	e1a03103 	lsl	r3, r3, #2
   40bc4:	e0823003 	add	r3, r2, r3
   40bc8:	e50b3008 	str	r3, [fp, #-8]
   40bcc:	e55b300d 	ldrb	r3, [fp, #-13]
   40bd0:	e203301f 	and	r3, r3, #31
   40bd4:	e54b3009 	strb	r3, [fp, #-9]
   40bd8:	e55b3009 	ldrb	r3, [fp, #-9]
   40bdc:	e3a02001 	mov	r2, #1
   40be0:	e1a03312 	lsl	r3, r2, r3
   40be4:	e1a01003 	mov	r1, r3
   40be8:	e51b0008 	ldr	r0, [fp, #-8]
   40bec:	ebffff71 	bl	409b8 <bcm2835_peri_write>
   40bf0:	e1a00000 	nop			; (mov r0, r0)
   40bf4:	e24bd004 	sub	sp, fp, #4
   40bf8:	e8bd8800 	pop	{fp, pc}
   40bfc:	0005c168 	.word	0x0005c168

00040c00 <bcm2835_gpio_clr>:
   40c00:	e92d4800 	push	{fp, lr}
   40c04:	e28db004 	add	fp, sp, #4
   40c08:	e24dd010 	sub	sp, sp, #16
   40c0c:	e1a03000 	mov	r3, r0
   40c10:	e54b300d 	strb	r3, [fp, #-13]
   40c14:	e59f304c 	ldr	r3, [pc, #76]	; 40c68 <bcm2835_gpio_clr+0x68>
   40c18:	e5932000 	ldr	r2, [r3]
   40c1c:	e55b300d 	ldrb	r3, [fp, #-13]
   40c20:	e1a032a3 	lsr	r3, r3, #5
   40c24:	e6ef3073 	uxtb	r3, r3
   40c28:	e283300a 	add	r3, r3, #10
   40c2c:	e1a03103 	lsl	r3, r3, #2
   40c30:	e0823003 	add	r3, r2, r3
   40c34:	e50b3008 	str	r3, [fp, #-8]
   40c38:	e55b300d 	ldrb	r3, [fp, #-13]
   40c3c:	e203301f 	and	r3, r3, #31
   40c40:	e54b3009 	strb	r3, [fp, #-9]
   40c44:	e55b3009 	ldrb	r3, [fp, #-9]
   40c48:	e3a02001 	mov	r2, #1
   40c4c:	e1a03312 	lsl	r3, r2, r3
   40c50:	e1a01003 	mov	r1, r3
   40c54:	e51b0008 	ldr	r0, [fp, #-8]
   40c58:	ebffff56 	bl	409b8 <bcm2835_peri_write>
   40c5c:	e1a00000 	nop			; (mov r0, r0)
   40c60:	e24bd004 	sub	sp, fp, #4
   40c64:	e8bd8800 	pop	{fp, pc}
   40c68:	0005c168 	.word	0x0005c168

00040c6c <bcm2835_gpio_set_multi>:
   40c6c:	e92d4800 	push	{fp, lr}
   40c70:	e28db004 	add	fp, sp, #4
   40c74:	e24dd010 	sub	sp, sp, #16
   40c78:	e50b0010 	str	r0, [fp, #-16]
   40c7c:	e59f3020 	ldr	r3, [pc, #32]	; 40ca4 <bcm2835_gpio_set_multi+0x38>
   40c80:	e5933000 	ldr	r3, [r3]
   40c84:	e283301c 	add	r3, r3, #28
   40c88:	e50b3008 	str	r3, [fp, #-8]
   40c8c:	e51b1010 	ldr	r1, [fp, #-16]
   40c90:	e51b0008 	ldr	r0, [fp, #-8]
   40c94:	ebffff47 	bl	409b8 <bcm2835_peri_write>
   40c98:	e1a00000 	nop			; (mov r0, r0)
   40c9c:	e24bd004 	sub	sp, fp, #4
   40ca0:	e8bd8800 	pop	{fp, pc}
   40ca4:	0005c168 	.word	0x0005c168

00040ca8 <bcm2835_gpio_clr_multi>:
   40ca8:	e92d4800 	push	{fp, lr}
   40cac:	e28db004 	add	fp, sp, #4
   40cb0:	e24dd010 	sub	sp, sp, #16
   40cb4:	e50b0010 	str	r0, [fp, #-16]
   40cb8:	e59f3020 	ldr	r3, [pc, #32]	; 40ce0 <bcm2835_gpio_clr_multi+0x38>
   40cbc:	e5933000 	ldr	r3, [r3]
   40cc0:	e2833028 	add	r3, r3, #40	; 0x28
   40cc4:	e50b3008 	str	r3, [fp, #-8]
   40cc8:	e51b1010 	ldr	r1, [fp, #-16]
   40ccc:	e51b0008 	ldr	r0, [fp, #-8]
   40cd0:	ebffff38 	bl	409b8 <bcm2835_peri_write>
   40cd4:	e1a00000 	nop			; (mov r0, r0)
   40cd8:	e24bd004 	sub	sp, fp, #4
   40cdc:	e8bd8800 	pop	{fp, pc}
   40ce0:	0005c168 	.word	0x0005c168

00040ce4 <bcm2835_gpio_lev>:
   40ce4:	e92d4800 	push	{fp, lr}
   40ce8:	e28db004 	add	fp, sp, #4
   40cec:	e24dd018 	sub	sp, sp, #24
   40cf0:	e1a03000 	mov	r3, r0
   40cf4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   40cf8:	e59f3068 	ldr	r3, [pc, #104]	; 40d68 <bcm2835_gpio_lev+0x84>
   40cfc:	e5932000 	ldr	r2, [r3]
   40d00:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   40d04:	e1a032a3 	lsr	r3, r3, #5
   40d08:	e6ef3073 	uxtb	r3, r3
   40d0c:	e283300d 	add	r3, r3, #13
   40d10:	e1a03103 	lsl	r3, r3, #2
   40d14:	e0823003 	add	r3, r2, r3
   40d18:	e50b3008 	str	r3, [fp, #-8]
   40d1c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   40d20:	e203301f 	and	r3, r3, #31
   40d24:	e54b3009 	strb	r3, [fp, #-9]
   40d28:	e51b0008 	ldr	r0, [fp, #-8]
   40d2c:	ebfffef5 	bl	40908 <bcm2835_peri_read>
   40d30:	e50b0010 	str	r0, [fp, #-16]
   40d34:	e55b3009 	ldrb	r3, [fp, #-9]
   40d38:	e3a02001 	mov	r2, #1
   40d3c:	e1a03312 	lsl	r3, r2, r3
   40d40:	e1a02003 	mov	r2, r3
   40d44:	e51b3010 	ldr	r3, [fp, #-16]
   40d48:	e0033002 	and	r3, r3, r2
   40d4c:	e3530000 	cmp	r3, #0
   40d50:	13a03001 	movne	r3, #1
   40d54:	03a03000 	moveq	r3, #0
   40d58:	e6ef3073 	uxtb	r3, r3
   40d5c:	e1a00003 	mov	r0, r3
   40d60:	e24bd004 	sub	sp, fp, #4
   40d64:	e8bd8800 	pop	{fp, pc}
   40d68:	0005c168 	.word	0x0005c168

00040d6c <bcm2835_gpio_eds>:
   40d6c:	e92d4800 	push	{fp, lr}
   40d70:	e28db004 	add	fp, sp, #4
   40d74:	e24dd018 	sub	sp, sp, #24
   40d78:	e1a03000 	mov	r3, r0
   40d7c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   40d80:	e59f3068 	ldr	r3, [pc, #104]	; 40df0 <bcm2835_gpio_eds+0x84>
   40d84:	e5932000 	ldr	r2, [r3]
   40d88:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   40d8c:	e1a032a3 	lsr	r3, r3, #5
   40d90:	e6ef3073 	uxtb	r3, r3
   40d94:	e2833010 	add	r3, r3, #16
   40d98:	e1a03103 	lsl	r3, r3, #2
   40d9c:	e0823003 	add	r3, r2, r3
   40da0:	e50b3008 	str	r3, [fp, #-8]
   40da4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   40da8:	e203301f 	and	r3, r3, #31
   40dac:	e54b3009 	strb	r3, [fp, #-9]
   40db0:	e51b0008 	ldr	r0, [fp, #-8]
   40db4:	ebfffed3 	bl	40908 <bcm2835_peri_read>
   40db8:	e50b0010 	str	r0, [fp, #-16]
   40dbc:	e55b3009 	ldrb	r3, [fp, #-9]
   40dc0:	e3a02001 	mov	r2, #1
   40dc4:	e1a03312 	lsl	r3, r2, r3
   40dc8:	e1a02003 	mov	r2, r3
   40dcc:	e51b3010 	ldr	r3, [fp, #-16]
   40dd0:	e0033002 	and	r3, r3, r2
   40dd4:	e3530000 	cmp	r3, #0
   40dd8:	13a03001 	movne	r3, #1
   40ddc:	03a03000 	moveq	r3, #0
   40de0:	e6ef3073 	uxtb	r3, r3
   40de4:	e1a00003 	mov	r0, r3
   40de8:	e24bd004 	sub	sp, fp, #4
   40dec:	e8bd8800 	pop	{fp, pc}
   40df0:	0005c168 	.word	0x0005c168

00040df4 <bcm2835_gpio_eds_multi>:
   40df4:	e92d4800 	push	{fp, lr}
   40df8:	e28db004 	add	fp, sp, #4
   40dfc:	e24dd010 	sub	sp, sp, #16
   40e00:	e50b0010 	str	r0, [fp, #-16]
   40e04:	e59f302c 	ldr	r3, [pc, #44]	; 40e38 <bcm2835_gpio_eds_multi+0x44>
   40e08:	e5933000 	ldr	r3, [r3]
   40e0c:	e2833040 	add	r3, r3, #64	; 0x40
   40e10:	e50b3008 	str	r3, [fp, #-8]
   40e14:	e51b0008 	ldr	r0, [fp, #-8]
   40e18:	ebfffeba 	bl	40908 <bcm2835_peri_read>
   40e1c:	e50b000c 	str	r0, [fp, #-12]
   40e20:	e51b200c 	ldr	r2, [fp, #-12]
   40e24:	e51b3010 	ldr	r3, [fp, #-16]
   40e28:	e0033002 	and	r3, r3, r2
   40e2c:	e1a00003 	mov	r0, r3
   40e30:	e24bd004 	sub	sp, fp, #4
   40e34:	e8bd8800 	pop	{fp, pc}
   40e38:	0005c168 	.word	0x0005c168

00040e3c <bcm2835_gpio_set_eds>:
   40e3c:	e92d4800 	push	{fp, lr}
   40e40:	e28db004 	add	fp, sp, #4
   40e44:	e24dd018 	sub	sp, sp, #24
   40e48:	e1a03000 	mov	r3, r0
   40e4c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   40e50:	e59f3050 	ldr	r3, [pc, #80]	; 40ea8 <bcm2835_gpio_set_eds+0x6c>
   40e54:	e5932000 	ldr	r2, [r3]
   40e58:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   40e5c:	e1a032a3 	lsr	r3, r3, #5
   40e60:	e6ef3073 	uxtb	r3, r3
   40e64:	e2833010 	add	r3, r3, #16
   40e68:	e1a03103 	lsl	r3, r3, #2
   40e6c:	e0823003 	add	r3, r2, r3
   40e70:	e50b3008 	str	r3, [fp, #-8]
   40e74:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   40e78:	e203301f 	and	r3, r3, #31
   40e7c:	e54b3009 	strb	r3, [fp, #-9]
   40e80:	e55b3009 	ldrb	r3, [fp, #-9]
   40e84:	e3a02001 	mov	r2, #1
   40e88:	e1a03312 	lsl	r3, r2, r3
   40e8c:	e50b3010 	str	r3, [fp, #-16]
   40e90:	e51b1010 	ldr	r1, [fp, #-16]
   40e94:	e51b0008 	ldr	r0, [fp, #-8]
   40e98:	ebfffec6 	bl	409b8 <bcm2835_peri_write>
   40e9c:	e1a00000 	nop			; (mov r0, r0)
   40ea0:	e24bd004 	sub	sp, fp, #4
   40ea4:	e8bd8800 	pop	{fp, pc}
   40ea8:	0005c168 	.word	0x0005c168

00040eac <bcm2835_gpio_set_eds_multi>:
   40eac:	e92d4800 	push	{fp, lr}
   40eb0:	e28db004 	add	fp, sp, #4
   40eb4:	e24dd010 	sub	sp, sp, #16
   40eb8:	e50b0010 	str	r0, [fp, #-16]
   40ebc:	e59f3020 	ldr	r3, [pc, #32]	; 40ee4 <bcm2835_gpio_set_eds_multi+0x38>
   40ec0:	e5933000 	ldr	r3, [r3]
   40ec4:	e2833040 	add	r3, r3, #64	; 0x40
   40ec8:	e50b3008 	str	r3, [fp, #-8]
   40ecc:	e51b1010 	ldr	r1, [fp, #-16]
   40ed0:	e51b0008 	ldr	r0, [fp, #-8]
   40ed4:	ebfffeb7 	bl	409b8 <bcm2835_peri_write>
   40ed8:	e1a00000 	nop			; (mov r0, r0)
   40edc:	e24bd004 	sub	sp, fp, #4
   40ee0:	e8bd8800 	pop	{fp, pc}
   40ee4:	0005c168 	.word	0x0005c168

00040ee8 <bcm2835_gpio_ren>:
   40ee8:	e92d4800 	push	{fp, lr}
   40eec:	e28db004 	add	fp, sp, #4
   40ef0:	e24dd018 	sub	sp, sp, #24
   40ef4:	e1a03000 	mov	r3, r0
   40ef8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   40efc:	e59f3054 	ldr	r3, [pc, #84]	; 40f58 <bcm2835_gpio_ren+0x70>
   40f00:	e5932000 	ldr	r2, [r3]
   40f04:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   40f08:	e1a032a3 	lsr	r3, r3, #5
   40f0c:	e6ef3073 	uxtb	r3, r3
   40f10:	e2833013 	add	r3, r3, #19
   40f14:	e1a03103 	lsl	r3, r3, #2
   40f18:	e0823003 	add	r3, r2, r3
   40f1c:	e50b3008 	str	r3, [fp, #-8]
   40f20:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   40f24:	e203301f 	and	r3, r3, #31
   40f28:	e54b3009 	strb	r3, [fp, #-9]
   40f2c:	e55b3009 	ldrb	r3, [fp, #-9]
   40f30:	e3a02001 	mov	r2, #1
   40f34:	e1a03312 	lsl	r3, r2, r3
   40f38:	e50b3010 	str	r3, [fp, #-16]
   40f3c:	e51b2010 	ldr	r2, [fp, #-16]
   40f40:	e51b1010 	ldr	r1, [fp, #-16]
   40f44:	e51b0008 	ldr	r0, [fp, #-8]
   40f48:	ebfffec8 	bl	40a70 <bcm2835_peri_set_bits>
   40f4c:	e1a00000 	nop			; (mov r0, r0)
   40f50:	e24bd004 	sub	sp, fp, #4
   40f54:	e8bd8800 	pop	{fp, pc}
   40f58:	0005c168 	.word	0x0005c168

00040f5c <bcm2835_gpio_clr_ren>:
   40f5c:	e92d4800 	push	{fp, lr}
   40f60:	e28db004 	add	fp, sp, #4
   40f64:	e24dd018 	sub	sp, sp, #24
   40f68:	e1a03000 	mov	r3, r0
   40f6c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   40f70:	e59f3054 	ldr	r3, [pc, #84]	; 40fcc <bcm2835_gpio_clr_ren+0x70>
   40f74:	e5932000 	ldr	r2, [r3]
   40f78:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   40f7c:	e1a032a3 	lsr	r3, r3, #5
   40f80:	e6ef3073 	uxtb	r3, r3
   40f84:	e2833013 	add	r3, r3, #19
   40f88:	e1a03103 	lsl	r3, r3, #2
   40f8c:	e0823003 	add	r3, r2, r3
   40f90:	e50b3008 	str	r3, [fp, #-8]
   40f94:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   40f98:	e203301f 	and	r3, r3, #31
   40f9c:	e54b3009 	strb	r3, [fp, #-9]
   40fa0:	e55b3009 	ldrb	r3, [fp, #-9]
   40fa4:	e3a02001 	mov	r2, #1
   40fa8:	e1a03312 	lsl	r3, r2, r3
   40fac:	e50b3010 	str	r3, [fp, #-16]
   40fb0:	e51b2010 	ldr	r2, [fp, #-16]
   40fb4:	e3a01000 	mov	r1, #0
   40fb8:	e51b0008 	ldr	r0, [fp, #-8]
   40fbc:	ebfffeab 	bl	40a70 <bcm2835_peri_set_bits>
   40fc0:	e1a00000 	nop			; (mov r0, r0)
   40fc4:	e24bd004 	sub	sp, fp, #4
   40fc8:	e8bd8800 	pop	{fp, pc}
   40fcc:	0005c168 	.word	0x0005c168

00040fd0 <bcm2835_gpio_fen>:
   40fd0:	e92d4800 	push	{fp, lr}
   40fd4:	e28db004 	add	fp, sp, #4
   40fd8:	e24dd018 	sub	sp, sp, #24
   40fdc:	e1a03000 	mov	r3, r0
   40fe0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   40fe4:	e59f3054 	ldr	r3, [pc, #84]	; 41040 <bcm2835_gpio_fen+0x70>
   40fe8:	e5932000 	ldr	r2, [r3]
   40fec:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   40ff0:	e1a032a3 	lsr	r3, r3, #5
   40ff4:	e6ef3073 	uxtb	r3, r3
   40ff8:	e2833016 	add	r3, r3, #22
   40ffc:	e1a03103 	lsl	r3, r3, #2
   41000:	e0823003 	add	r3, r2, r3
   41004:	e50b3008 	str	r3, [fp, #-8]
   41008:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   4100c:	e203301f 	and	r3, r3, #31
   41010:	e54b3009 	strb	r3, [fp, #-9]
   41014:	e55b3009 	ldrb	r3, [fp, #-9]
   41018:	e3a02001 	mov	r2, #1
   4101c:	e1a03312 	lsl	r3, r2, r3
   41020:	e50b3010 	str	r3, [fp, #-16]
   41024:	e51b2010 	ldr	r2, [fp, #-16]
   41028:	e51b1010 	ldr	r1, [fp, #-16]
   4102c:	e51b0008 	ldr	r0, [fp, #-8]
   41030:	ebfffe8e 	bl	40a70 <bcm2835_peri_set_bits>
   41034:	e1a00000 	nop			; (mov r0, r0)
   41038:	e24bd004 	sub	sp, fp, #4
   4103c:	e8bd8800 	pop	{fp, pc}
   41040:	0005c168 	.word	0x0005c168

00041044 <bcm2835_gpio_clr_fen>:
   41044:	e92d4800 	push	{fp, lr}
   41048:	e28db004 	add	fp, sp, #4
   4104c:	e24dd018 	sub	sp, sp, #24
   41050:	e1a03000 	mov	r3, r0
   41054:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   41058:	e59f3054 	ldr	r3, [pc, #84]	; 410b4 <bcm2835_gpio_clr_fen+0x70>
   4105c:	e5932000 	ldr	r2, [r3]
   41060:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   41064:	e1a032a3 	lsr	r3, r3, #5
   41068:	e6ef3073 	uxtb	r3, r3
   4106c:	e2833016 	add	r3, r3, #22
   41070:	e1a03103 	lsl	r3, r3, #2
   41074:	e0823003 	add	r3, r2, r3
   41078:	e50b3008 	str	r3, [fp, #-8]
   4107c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   41080:	e203301f 	and	r3, r3, #31
   41084:	e54b3009 	strb	r3, [fp, #-9]
   41088:	e55b3009 	ldrb	r3, [fp, #-9]
   4108c:	e3a02001 	mov	r2, #1
   41090:	e1a03312 	lsl	r3, r2, r3
   41094:	e50b3010 	str	r3, [fp, #-16]
   41098:	e51b2010 	ldr	r2, [fp, #-16]
   4109c:	e3a01000 	mov	r1, #0
   410a0:	e51b0008 	ldr	r0, [fp, #-8]
   410a4:	ebfffe71 	bl	40a70 <bcm2835_peri_set_bits>
   410a8:	e1a00000 	nop			; (mov r0, r0)
   410ac:	e24bd004 	sub	sp, fp, #4
   410b0:	e8bd8800 	pop	{fp, pc}
   410b4:	0005c168 	.word	0x0005c168

000410b8 <bcm2835_gpio_hen>:
   410b8:	e92d4800 	push	{fp, lr}
   410bc:	e28db004 	add	fp, sp, #4
   410c0:	e24dd018 	sub	sp, sp, #24
   410c4:	e1a03000 	mov	r3, r0
   410c8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   410cc:	e59f3054 	ldr	r3, [pc, #84]	; 41128 <bcm2835_gpio_hen+0x70>
   410d0:	e5932000 	ldr	r2, [r3]
   410d4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   410d8:	e1a032a3 	lsr	r3, r3, #5
   410dc:	e6ef3073 	uxtb	r3, r3
   410e0:	e2833019 	add	r3, r3, #25
   410e4:	e1a03103 	lsl	r3, r3, #2
   410e8:	e0823003 	add	r3, r2, r3
   410ec:	e50b3008 	str	r3, [fp, #-8]
   410f0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   410f4:	e203301f 	and	r3, r3, #31
   410f8:	e54b3009 	strb	r3, [fp, #-9]
   410fc:	e55b3009 	ldrb	r3, [fp, #-9]
   41100:	e3a02001 	mov	r2, #1
   41104:	e1a03312 	lsl	r3, r2, r3
   41108:	e50b3010 	str	r3, [fp, #-16]
   4110c:	e51b2010 	ldr	r2, [fp, #-16]
   41110:	e51b1010 	ldr	r1, [fp, #-16]
   41114:	e51b0008 	ldr	r0, [fp, #-8]
   41118:	ebfffe54 	bl	40a70 <bcm2835_peri_set_bits>
   4111c:	e1a00000 	nop			; (mov r0, r0)
   41120:	e24bd004 	sub	sp, fp, #4
   41124:	e8bd8800 	pop	{fp, pc}
   41128:	0005c168 	.word	0x0005c168

0004112c <bcm2835_gpio_clr_hen>:
   4112c:	e92d4800 	push	{fp, lr}
   41130:	e28db004 	add	fp, sp, #4
   41134:	e24dd018 	sub	sp, sp, #24
   41138:	e1a03000 	mov	r3, r0
   4113c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   41140:	e59f3054 	ldr	r3, [pc, #84]	; 4119c <bcm2835_gpio_clr_hen+0x70>
   41144:	e5932000 	ldr	r2, [r3]
   41148:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   4114c:	e1a032a3 	lsr	r3, r3, #5
   41150:	e6ef3073 	uxtb	r3, r3
   41154:	e2833019 	add	r3, r3, #25
   41158:	e1a03103 	lsl	r3, r3, #2
   4115c:	e0823003 	add	r3, r2, r3
   41160:	e50b3008 	str	r3, [fp, #-8]
   41164:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   41168:	e203301f 	and	r3, r3, #31
   4116c:	e54b3009 	strb	r3, [fp, #-9]
   41170:	e55b3009 	ldrb	r3, [fp, #-9]
   41174:	e3a02001 	mov	r2, #1
   41178:	e1a03312 	lsl	r3, r2, r3
   4117c:	e50b3010 	str	r3, [fp, #-16]
   41180:	e51b2010 	ldr	r2, [fp, #-16]
   41184:	e3a01000 	mov	r1, #0
   41188:	e51b0008 	ldr	r0, [fp, #-8]
   4118c:	ebfffe37 	bl	40a70 <bcm2835_peri_set_bits>
   41190:	e1a00000 	nop			; (mov r0, r0)
   41194:	e24bd004 	sub	sp, fp, #4
   41198:	e8bd8800 	pop	{fp, pc}
   4119c:	0005c168 	.word	0x0005c168

000411a0 <bcm2835_gpio_len>:
   411a0:	e92d4800 	push	{fp, lr}
   411a4:	e28db004 	add	fp, sp, #4
   411a8:	e24dd018 	sub	sp, sp, #24
   411ac:	e1a03000 	mov	r3, r0
   411b0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   411b4:	e59f3054 	ldr	r3, [pc, #84]	; 41210 <bcm2835_gpio_len+0x70>
   411b8:	e5932000 	ldr	r2, [r3]
   411bc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   411c0:	e1a032a3 	lsr	r3, r3, #5
   411c4:	e6ef3073 	uxtb	r3, r3
   411c8:	e283301c 	add	r3, r3, #28
   411cc:	e1a03103 	lsl	r3, r3, #2
   411d0:	e0823003 	add	r3, r2, r3
   411d4:	e50b3008 	str	r3, [fp, #-8]
   411d8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   411dc:	e203301f 	and	r3, r3, #31
   411e0:	e54b3009 	strb	r3, [fp, #-9]
   411e4:	e55b3009 	ldrb	r3, [fp, #-9]
   411e8:	e3a02001 	mov	r2, #1
   411ec:	e1a03312 	lsl	r3, r2, r3
   411f0:	e50b3010 	str	r3, [fp, #-16]
   411f4:	e51b2010 	ldr	r2, [fp, #-16]
   411f8:	e51b1010 	ldr	r1, [fp, #-16]
   411fc:	e51b0008 	ldr	r0, [fp, #-8]
   41200:	ebfffe1a 	bl	40a70 <bcm2835_peri_set_bits>
   41204:	e1a00000 	nop			; (mov r0, r0)
   41208:	e24bd004 	sub	sp, fp, #4
   4120c:	e8bd8800 	pop	{fp, pc}
   41210:	0005c168 	.word	0x0005c168

00041214 <bcm2835_gpio_clr_len>:
   41214:	e92d4800 	push	{fp, lr}
   41218:	e28db004 	add	fp, sp, #4
   4121c:	e24dd018 	sub	sp, sp, #24
   41220:	e1a03000 	mov	r3, r0
   41224:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   41228:	e59f3054 	ldr	r3, [pc, #84]	; 41284 <bcm2835_gpio_clr_len+0x70>
   4122c:	e5932000 	ldr	r2, [r3]
   41230:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   41234:	e1a032a3 	lsr	r3, r3, #5
   41238:	e6ef3073 	uxtb	r3, r3
   4123c:	e283301c 	add	r3, r3, #28
   41240:	e1a03103 	lsl	r3, r3, #2
   41244:	e0823003 	add	r3, r2, r3
   41248:	e50b3008 	str	r3, [fp, #-8]
   4124c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   41250:	e203301f 	and	r3, r3, #31
   41254:	e54b3009 	strb	r3, [fp, #-9]
   41258:	e55b3009 	ldrb	r3, [fp, #-9]
   4125c:	e3a02001 	mov	r2, #1
   41260:	e1a03312 	lsl	r3, r2, r3
   41264:	e50b3010 	str	r3, [fp, #-16]
   41268:	e51b2010 	ldr	r2, [fp, #-16]
   4126c:	e3a01000 	mov	r1, #0
   41270:	e51b0008 	ldr	r0, [fp, #-8]
   41274:	ebfffdfd 	bl	40a70 <bcm2835_peri_set_bits>
   41278:	e1a00000 	nop			; (mov r0, r0)
   4127c:	e24bd004 	sub	sp, fp, #4
   41280:	e8bd8800 	pop	{fp, pc}
   41284:	0005c168 	.word	0x0005c168

00041288 <bcm2835_gpio_aren>:
   41288:	e92d4800 	push	{fp, lr}
   4128c:	e28db004 	add	fp, sp, #4
   41290:	e24dd018 	sub	sp, sp, #24
   41294:	e1a03000 	mov	r3, r0
   41298:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   4129c:	e59f3054 	ldr	r3, [pc, #84]	; 412f8 <bcm2835_gpio_aren+0x70>
   412a0:	e5932000 	ldr	r2, [r3]
   412a4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   412a8:	e1a032a3 	lsr	r3, r3, #5
   412ac:	e6ef3073 	uxtb	r3, r3
   412b0:	e283301f 	add	r3, r3, #31
   412b4:	e1a03103 	lsl	r3, r3, #2
   412b8:	e0823003 	add	r3, r2, r3
   412bc:	e50b3008 	str	r3, [fp, #-8]
   412c0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   412c4:	e203301f 	and	r3, r3, #31
   412c8:	e54b3009 	strb	r3, [fp, #-9]
   412cc:	e55b3009 	ldrb	r3, [fp, #-9]
   412d0:	e3a02001 	mov	r2, #1
   412d4:	e1a03312 	lsl	r3, r2, r3
   412d8:	e50b3010 	str	r3, [fp, #-16]
   412dc:	e51b2010 	ldr	r2, [fp, #-16]
   412e0:	e51b1010 	ldr	r1, [fp, #-16]
   412e4:	e51b0008 	ldr	r0, [fp, #-8]
   412e8:	ebfffde0 	bl	40a70 <bcm2835_peri_set_bits>
   412ec:	e1a00000 	nop			; (mov r0, r0)
   412f0:	e24bd004 	sub	sp, fp, #4
   412f4:	e8bd8800 	pop	{fp, pc}
   412f8:	0005c168 	.word	0x0005c168

000412fc <bcm2835_gpio_clr_aren>:
   412fc:	e92d4800 	push	{fp, lr}
   41300:	e28db004 	add	fp, sp, #4
   41304:	e24dd018 	sub	sp, sp, #24
   41308:	e1a03000 	mov	r3, r0
   4130c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   41310:	e59f3054 	ldr	r3, [pc, #84]	; 4136c <bcm2835_gpio_clr_aren+0x70>
   41314:	e5932000 	ldr	r2, [r3]
   41318:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   4131c:	e1a032a3 	lsr	r3, r3, #5
   41320:	e6ef3073 	uxtb	r3, r3
   41324:	e283301f 	add	r3, r3, #31
   41328:	e1a03103 	lsl	r3, r3, #2
   4132c:	e0823003 	add	r3, r2, r3
   41330:	e50b3008 	str	r3, [fp, #-8]
   41334:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   41338:	e203301f 	and	r3, r3, #31
   4133c:	e54b3009 	strb	r3, [fp, #-9]
   41340:	e55b3009 	ldrb	r3, [fp, #-9]
   41344:	e3a02001 	mov	r2, #1
   41348:	e1a03312 	lsl	r3, r2, r3
   4134c:	e50b3010 	str	r3, [fp, #-16]
   41350:	e51b2010 	ldr	r2, [fp, #-16]
   41354:	e3a01000 	mov	r1, #0
   41358:	e51b0008 	ldr	r0, [fp, #-8]
   4135c:	ebfffdc3 	bl	40a70 <bcm2835_peri_set_bits>
   41360:	e1a00000 	nop			; (mov r0, r0)
   41364:	e24bd004 	sub	sp, fp, #4
   41368:	e8bd8800 	pop	{fp, pc}
   4136c:	0005c168 	.word	0x0005c168

00041370 <bcm2835_gpio_afen>:
   41370:	e92d4800 	push	{fp, lr}
   41374:	e28db004 	add	fp, sp, #4
   41378:	e24dd018 	sub	sp, sp, #24
   4137c:	e1a03000 	mov	r3, r0
   41380:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   41384:	e59f3054 	ldr	r3, [pc, #84]	; 413e0 <bcm2835_gpio_afen+0x70>
   41388:	e5932000 	ldr	r2, [r3]
   4138c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   41390:	e1a032a3 	lsr	r3, r3, #5
   41394:	e6ef3073 	uxtb	r3, r3
   41398:	e2833022 	add	r3, r3, #34	; 0x22
   4139c:	e1a03103 	lsl	r3, r3, #2
   413a0:	e0823003 	add	r3, r2, r3
   413a4:	e50b3008 	str	r3, [fp, #-8]
   413a8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   413ac:	e203301f 	and	r3, r3, #31
   413b0:	e54b3009 	strb	r3, [fp, #-9]
   413b4:	e55b3009 	ldrb	r3, [fp, #-9]
   413b8:	e3a02001 	mov	r2, #1
   413bc:	e1a03312 	lsl	r3, r2, r3
   413c0:	e50b3010 	str	r3, [fp, #-16]
   413c4:	e51b2010 	ldr	r2, [fp, #-16]
   413c8:	e51b1010 	ldr	r1, [fp, #-16]
   413cc:	e51b0008 	ldr	r0, [fp, #-8]
   413d0:	ebfffda6 	bl	40a70 <bcm2835_peri_set_bits>
   413d4:	e1a00000 	nop			; (mov r0, r0)
   413d8:	e24bd004 	sub	sp, fp, #4
   413dc:	e8bd8800 	pop	{fp, pc}
   413e0:	0005c168 	.word	0x0005c168

000413e4 <bcm2835_gpio_clr_afen>:
   413e4:	e92d4800 	push	{fp, lr}
   413e8:	e28db004 	add	fp, sp, #4
   413ec:	e24dd018 	sub	sp, sp, #24
   413f0:	e1a03000 	mov	r3, r0
   413f4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   413f8:	e59f3054 	ldr	r3, [pc, #84]	; 41454 <bcm2835_gpio_clr_afen+0x70>
   413fc:	e5932000 	ldr	r2, [r3]
   41400:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   41404:	e1a032a3 	lsr	r3, r3, #5
   41408:	e6ef3073 	uxtb	r3, r3
   4140c:	e2833022 	add	r3, r3, #34	; 0x22
   41410:	e1a03103 	lsl	r3, r3, #2
   41414:	e0823003 	add	r3, r2, r3
   41418:	e50b3008 	str	r3, [fp, #-8]
   4141c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   41420:	e203301f 	and	r3, r3, #31
   41424:	e54b3009 	strb	r3, [fp, #-9]
   41428:	e55b3009 	ldrb	r3, [fp, #-9]
   4142c:	e3a02001 	mov	r2, #1
   41430:	e1a03312 	lsl	r3, r2, r3
   41434:	e50b3010 	str	r3, [fp, #-16]
   41438:	e51b2010 	ldr	r2, [fp, #-16]
   4143c:	e3a01000 	mov	r1, #0
   41440:	e51b0008 	ldr	r0, [fp, #-8]
   41444:	ebfffd89 	bl	40a70 <bcm2835_peri_set_bits>
   41448:	e1a00000 	nop			; (mov r0, r0)
   4144c:	e24bd004 	sub	sp, fp, #4
   41450:	e8bd8800 	pop	{fp, pc}
   41454:	0005c168 	.word	0x0005c168

00041458 <bcm2835_gpio_pud>:
   41458:	e92d4800 	push	{fp, lr}
   4145c:	e28db004 	add	fp, sp, #4
   41460:	e24dd010 	sub	sp, sp, #16
   41464:	e1a03000 	mov	r3, r0
   41468:	e54b300d 	strb	r3, [fp, #-13]
   4146c:	e59f3024 	ldr	r3, [pc, #36]	; 41498 <bcm2835_gpio_pud+0x40>
   41470:	e5933000 	ldr	r3, [r3]
   41474:	e2833094 	add	r3, r3, #148	; 0x94
   41478:	e50b3008 	str	r3, [fp, #-8]
   4147c:	e55b300d 	ldrb	r3, [fp, #-13]
   41480:	e1a01003 	mov	r1, r3
   41484:	e51b0008 	ldr	r0, [fp, #-8]
   41488:	ebfffd4a 	bl	409b8 <bcm2835_peri_write>
   4148c:	e1a00000 	nop			; (mov r0, r0)
   41490:	e24bd004 	sub	sp, fp, #4
   41494:	e8bd8800 	pop	{fp, pc}
   41498:	0005c168 	.word	0x0005c168

0004149c <bcm2835_gpio_pudclk>:
   4149c:	e92d4800 	push	{fp, lr}
   414a0:	e28db004 	add	fp, sp, #4
   414a4:	e24dd010 	sub	sp, sp, #16
   414a8:	e1a03000 	mov	r3, r0
   414ac:	e1a02001 	mov	r2, r1
   414b0:	e54b300d 	strb	r3, [fp, #-13]
   414b4:	e1a03002 	mov	r3, r2
   414b8:	e54b300e 	strb	r3, [fp, #-14]
   414bc:	e59f3060 	ldr	r3, [pc, #96]	; 41524 <bcm2835_gpio_pudclk+0x88>
   414c0:	e5932000 	ldr	r2, [r3]
   414c4:	e55b300d 	ldrb	r3, [fp, #-13]
   414c8:	e1a032a3 	lsr	r3, r3, #5
   414cc:	e6ef3073 	uxtb	r3, r3
   414d0:	e2833026 	add	r3, r3, #38	; 0x26
   414d4:	e1a03103 	lsl	r3, r3, #2
   414d8:	e0823003 	add	r3, r2, r3
   414dc:	e50b3008 	str	r3, [fp, #-8]
   414e0:	e55b300d 	ldrb	r3, [fp, #-13]
   414e4:	e203301f 	and	r3, r3, #31
   414e8:	e54b3009 	strb	r3, [fp, #-9]
   414ec:	e55b300e 	ldrb	r3, [fp, #-14]
   414f0:	e3530000 	cmp	r3, #0
   414f4:	13a03001 	movne	r3, #1
   414f8:	03a03000 	moveq	r3, #0
   414fc:	e6ef3073 	uxtb	r3, r3
   41500:	e1a02003 	mov	r2, r3
   41504:	e55b3009 	ldrb	r3, [fp, #-9]
   41508:	e1a03312 	lsl	r3, r2, r3
   4150c:	e1a01003 	mov	r1, r3
   41510:	e51b0008 	ldr	r0, [fp, #-8]
   41514:	ebfffd27 	bl	409b8 <bcm2835_peri_write>
   41518:	e1a00000 	nop			; (mov r0, r0)
   4151c:	e24bd004 	sub	sp, fp, #4
   41520:	e8bd8800 	pop	{fp, pc}
   41524:	0005c168 	.word	0x0005c168

00041528 <bcm2835_gpio_pad>:
   41528:	e92d4800 	push	{fp, lr}
   4152c:	e28db004 	add	fp, sp, #4
   41530:	e24dd010 	sub	sp, sp, #16
   41534:	e1a03000 	mov	r3, r0
   41538:	e54b300d 	strb	r3, [fp, #-13]
   4153c:	e59f3044 	ldr	r3, [pc, #68]	; 41588 <bcm2835_gpio_pad+0x60>
   41540:	e5933000 	ldr	r3, [r3]
   41544:	e3730001 	cmn	r3, #1
   41548:	1a000001 	bne	41554 <bcm2835_gpio_pad+0x2c>
   4154c:	e3a03000 	mov	r3, #0
   41550:	ea000009 	b	4157c <bcm2835_gpio_pad+0x54>
   41554:	e59f302c 	ldr	r3, [pc, #44]	; 41588 <bcm2835_gpio_pad+0x60>
   41558:	e5932000 	ldr	r2, [r3]
   4155c:	e55b300d 	ldrb	r3, [fp, #-13]
   41560:	e283300b 	add	r3, r3, #11
   41564:	e1a03103 	lsl	r3, r3, #2
   41568:	e0823003 	add	r3, r2, r3
   4156c:	e50b3008 	str	r3, [fp, #-8]
   41570:	e51b0008 	ldr	r0, [fp, #-8]
   41574:	ebfffce3 	bl	40908 <bcm2835_peri_read>
   41578:	e1a03000 	mov	r3, r0
   4157c:	e1a00003 	mov	r0, r3
   41580:	e24bd004 	sub	sp, fp, #4
   41584:	e8bd8800 	pop	{fp, pc}
   41588:	0005c174 	.word	0x0005c174

0004158c <bcm2835_gpio_set_pad>:
   4158c:	e92d4800 	push	{fp, lr}
   41590:	e28db004 	add	fp, sp, #4
   41594:	e24dd010 	sub	sp, sp, #16
   41598:	e1a03000 	mov	r3, r0
   4159c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   415a0:	e54b300d 	strb	r3, [fp, #-13]
   415a4:	e59f3048 	ldr	r3, [pc, #72]	; 415f4 <bcm2835_gpio_set_pad+0x68>
   415a8:	e5933000 	ldr	r3, [r3]
   415ac:	e3730001 	cmn	r3, #1
   415b0:	0a00000c 	beq	415e8 <bcm2835_gpio_set_pad+0x5c>
   415b4:	e59f3038 	ldr	r3, [pc, #56]	; 415f4 <bcm2835_gpio_set_pad+0x68>
   415b8:	e5932000 	ldr	r2, [r3]
   415bc:	e55b300d 	ldrb	r3, [fp, #-13]
   415c0:	e283300b 	add	r3, r3, #11
   415c4:	e1a03103 	lsl	r3, r3, #2
   415c8:	e0823003 	add	r3, r2, r3
   415cc:	e50b3008 	str	r3, [fp, #-8]
   415d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   415d4:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   415d8:	e1a01003 	mov	r1, r3
   415dc:	e51b0008 	ldr	r0, [fp, #-8]
   415e0:	ebfffcf4 	bl	409b8 <bcm2835_peri_write>
   415e4:	ea000000 	b	415ec <bcm2835_gpio_set_pad+0x60>
   415e8:	e1a00000 	nop			; (mov r0, r0)
   415ec:	e24bd004 	sub	sp, fp, #4
   415f0:	e8bd8800 	pop	{fp, pc}
   415f4:	0005c174 	.word	0x0005c174

000415f8 <bcm2835_delay>:
   415f8:	e92d4800 	push	{fp, lr}
   415fc:	e28db004 	add	fp, sp, #4
   41600:	e24dd010 	sub	sp, sp, #16
   41604:	e50b0010 	str	r0, [fp, #-16]
   41608:	e51b3010 	ldr	r3, [fp, #-16]
   4160c:	e59f2078 	ldr	r2, [pc, #120]	; 4168c <bcm2835_delay+0x94>
   41610:	e0832392 	umull	r2, r3, r2, r3
   41614:	e1a03323 	lsr	r3, r3, #6
   41618:	e50b300c 	str	r3, [fp, #-12]
   4161c:	e51b1010 	ldr	r1, [fp, #-16]
   41620:	e59f3064 	ldr	r3, [pc, #100]	; 4168c <bcm2835_delay+0x94>
   41624:	e0832193 	umull	r2, r3, r3, r1
   41628:	e1a02323 	lsr	r2, r3, #6
   4162c:	e1a03002 	mov	r3, r2
   41630:	e1a03283 	lsl	r3, r3, #5
   41634:	e0433002 	sub	r3, r3, r2
   41638:	e1a03103 	lsl	r3, r3, #2
   4163c:	e0833002 	add	r3, r3, r2
   41640:	e1a03183 	lsl	r3, r3, #3
   41644:	e0412003 	sub	r2, r1, r3
   41648:	e1a01002 	mov	r1, r2
   4164c:	e1a02001 	mov	r2, r1
   41650:	e1a02282 	lsl	r2, r2, #5
   41654:	e0422001 	sub	r2, r2, r1
   41658:	e1a03302 	lsl	r3, r2, #6
   4165c:	e0433002 	sub	r3, r3, r2
   41660:	e1a03183 	lsl	r3, r3, #3
   41664:	e0833001 	add	r3, r3, r1
   41668:	e1a03303 	lsl	r3, r3, #6
   4166c:	e50b3008 	str	r3, [fp, #-8]
   41670:	e24b300c 	sub	r3, fp, #12
   41674:	e3a01000 	mov	r1, #0
   41678:	e1a00003 	mov	r0, r3
   4167c:	ebff3ef4 	bl	11254 <nanosleep@plt>
   41680:	e1a00000 	nop			; (mov r0, r0)
   41684:	e24bd004 	sub	sp, fp, #4
   41688:	e8bd8800 	pop	{fp, pc}
   4168c:	10624dd3 	.word	0x10624dd3

00041690 <bcm2835_delayMicroseconds>:
   41690:	e92d4800 	push	{fp, lr}
   41694:	e28db004 	add	fp, sp, #4
   41698:	e24dd018 	sub	sp, sp, #24
   4169c:	e14b01fc 	strd	r0, [fp, #-28]	; 0xffffffe4
   416a0:	e59f30d4 	ldr	r3, [pc, #212]	; 4177c <bcm2835_delayMicroseconds+0xec>
   416a4:	e5d33000 	ldrb	r3, [r3]
   416a8:	e3530000 	cmp	r3, #0
   416ac:	0a000003 	beq	416c0 <bcm2835_delayMicroseconds+0x30>
   416b0:	e14b21dc 	ldrd	r2, [fp, #-28]	; 0xffffffe4
   416b4:	e59f00c4 	ldr	r0, [pc, #196]	; 41780 <bcm2835_delayMicroseconds+0xf0>
   416b8:	ebff3ecd 	bl	111f4 <printf@plt>
   416bc:	ea00002c 	b	41774 <bcm2835_delayMicroseconds+0xe4>
   416c0:	eb000779 	bl	434ac <bcm2835_st_read>
   416c4:	e14b00fc 	strd	r0, [fp, #-12]
   416c8:	e14b20dc 	ldrd	r2, [fp, #-12]
   416cc:	e1923003 	orrs	r3, r2, r3
   416d0:	1a00000e 	bne	41710 <bcm2835_delayMicroseconds+0x80>
   416d4:	e3a03000 	mov	r3, #0
   416d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   416dc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   416e0:	e1a03002 	mov	r3, r2
   416e4:	e1a03283 	lsl	r3, r3, #5
   416e8:	e0433002 	sub	r3, r3, r2
   416ec:	e1a03103 	lsl	r3, r3, #2
   416f0:	e0833002 	add	r3, r3, r2
   416f4:	e1a03183 	lsl	r3, r3, #3
   416f8:	e50b3010 	str	r3, [fp, #-16]
   416fc:	e24b3014 	sub	r3, fp, #20
   41700:	e3a01000 	mov	r1, #0
   41704:	e1a00003 	mov	r0, r3
   41708:	ebff3ed1 	bl	11254 <nanosleep@plt>
   4170c:	ea000018 	b	41774 <bcm2835_delayMicroseconds+0xe4>
   41710:	e14b21dc 	ldrd	r2, [fp, #-28]	; 0xffffffe4
   41714:	e59f0068 	ldr	r0, [pc, #104]	; 41784 <bcm2835_delayMicroseconds+0xf4>
   41718:	e3a01000 	mov	r1, #0
   4171c:	e1530001 	cmp	r3, r1
   41720:	01520000 	cmpeq	r2, r0
   41724:	9a00000f 	bls	41768 <bcm2835_delayMicroseconds+0xd8>
   41728:	e3a03000 	mov	r3, #0
   4172c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   41730:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   41734:	e1a03002 	mov	r3, r2
   41738:	e1a03283 	lsl	r3, r3, #5
   4173c:	e0433002 	sub	r3, r3, r2
   41740:	e1a03103 	lsl	r3, r3, #2
   41744:	e0833002 	add	r3, r3, r2
   41748:	e1a03183 	lsl	r3, r3, #3
   4174c:	e2433bc3 	sub	r3, r3, #199680	; 0x30c00
   41750:	e2433d05 	sub	r3, r3, #320	; 0x140
   41754:	e50b3010 	str	r3, [fp, #-16]
   41758:	e24b3014 	sub	r3, fp, #20
   4175c:	e3a01000 	mov	r1, #0
   41760:	e1a00003 	mov	r0, r3
   41764:	ebff3eba 	bl	11254 <nanosleep@plt>
   41768:	e14b21dc 	ldrd	r2, [fp, #-28]	; 0xffffffe4
   4176c:	e14b00dc 	ldrd	r0, [fp, #-12]
   41770:	eb00079d 	bl	435ec <bcm2835_st_delay>
   41774:	e24bd004 	sub	sp, fp, #4
   41778:	e8bd8800 	pop	{fp, pc}
   4177c:	0005f3e4 	.word	0x0005f3e4
   41780:	0004aebc 	.word	0x0004aebc
   41784:	000001c2 	.word	0x000001c2

00041788 <bcm2835_gpio_write>:
   41788:	e92d4800 	push	{fp, lr}
   4178c:	e28db004 	add	fp, sp, #4
   41790:	e24dd008 	sub	sp, sp, #8
   41794:	e1a03000 	mov	r3, r0
   41798:	e1a02001 	mov	r2, r1
   4179c:	e54b3005 	strb	r3, [fp, #-5]
   417a0:	e1a03002 	mov	r3, r2
   417a4:	e54b3006 	strb	r3, [fp, #-6]
   417a8:	e55b3006 	ldrb	r3, [fp, #-6]
   417ac:	e3530000 	cmp	r3, #0
   417b0:	0a000003 	beq	417c4 <bcm2835_gpio_write+0x3c>
   417b4:	e55b3005 	ldrb	r3, [fp, #-5]
   417b8:	e1a00003 	mov	r0, r3
   417bc:	ebfffcf4 	bl	40b94 <bcm2835_gpio_set>
   417c0:	ea000002 	b	417d0 <bcm2835_gpio_write+0x48>
   417c4:	e55b3005 	ldrb	r3, [fp, #-5]
   417c8:	e1a00003 	mov	r0, r3
   417cc:	ebfffd0b 	bl	40c00 <bcm2835_gpio_clr>
   417d0:	e1a00000 	nop			; (mov r0, r0)
   417d4:	e24bd004 	sub	sp, fp, #4
   417d8:	e8bd8800 	pop	{fp, pc}

000417dc <bcm2835_gpio_write_multi>:
   417dc:	e92d4800 	push	{fp, lr}
   417e0:	e28db004 	add	fp, sp, #4
   417e4:	e24dd008 	sub	sp, sp, #8
   417e8:	e50b0008 	str	r0, [fp, #-8]
   417ec:	e1a03001 	mov	r3, r1
   417f0:	e54b3009 	strb	r3, [fp, #-9]
   417f4:	e55b3009 	ldrb	r3, [fp, #-9]
   417f8:	e3530000 	cmp	r3, #0
   417fc:	0a000002 	beq	4180c <bcm2835_gpio_write_multi+0x30>
   41800:	e51b0008 	ldr	r0, [fp, #-8]
   41804:	ebfffd18 	bl	40c6c <bcm2835_gpio_set_multi>
   41808:	ea000001 	b	41814 <bcm2835_gpio_write_multi+0x38>
   4180c:	e51b0008 	ldr	r0, [fp, #-8]
   41810:	ebfffd24 	bl	40ca8 <bcm2835_gpio_clr_multi>
   41814:	e1a00000 	nop			; (mov r0, r0)
   41818:	e24bd004 	sub	sp, fp, #4
   4181c:	e8bd8800 	pop	{fp, pc}

00041820 <bcm2835_gpio_write_mask>:
   41820:	e92d4800 	push	{fp, lr}
   41824:	e28db004 	add	fp, sp, #4
   41828:	e24dd008 	sub	sp, sp, #8
   4182c:	e50b0008 	str	r0, [fp, #-8]
   41830:	e50b100c 	str	r1, [fp, #-12]
   41834:	e51b2008 	ldr	r2, [fp, #-8]
   41838:	e51b300c 	ldr	r3, [fp, #-12]
   4183c:	e0033002 	and	r3, r3, r2
   41840:	e1a00003 	mov	r0, r3
   41844:	ebfffd08 	bl	40c6c <bcm2835_gpio_set_multi>
   41848:	e51b3008 	ldr	r3, [fp, #-8]
   4184c:	e1e02003 	mvn	r2, r3
   41850:	e51b300c 	ldr	r3, [fp, #-12]
   41854:	e0033002 	and	r3, r3, r2
   41858:	e1a00003 	mov	r0, r3
   4185c:	ebfffd11 	bl	40ca8 <bcm2835_gpio_clr_multi>
   41860:	e1a00000 	nop			; (mov r0, r0)
   41864:	e24bd004 	sub	sp, fp, #4
   41868:	e8bd8800 	pop	{fp, pc}

0004186c <bcm2835_gpio_set_pud>:
   4186c:	e92d4800 	push	{fp, lr}
   41870:	e28db004 	add	fp, sp, #4
   41874:	e24dd008 	sub	sp, sp, #8
   41878:	e1a03000 	mov	r3, r0
   4187c:	e1a02001 	mov	r2, r1
   41880:	e54b3005 	strb	r3, [fp, #-5]
   41884:	e1a03002 	mov	r3, r2
   41888:	e54b3006 	strb	r3, [fp, #-6]
   4188c:	e55b3006 	ldrb	r3, [fp, #-6]
   41890:	e1a00003 	mov	r0, r3
   41894:	ebfffeef 	bl	41458 <bcm2835_gpio_pud>
   41898:	e3a0000a 	mov	r0, #10
   4189c:	e3a01000 	mov	r1, #0
   418a0:	ebffff7a 	bl	41690 <bcm2835_delayMicroseconds>
   418a4:	e55b3005 	ldrb	r3, [fp, #-5]
   418a8:	e3a01001 	mov	r1, #1
   418ac:	e1a00003 	mov	r0, r3
   418b0:	ebfffef9 	bl	4149c <bcm2835_gpio_pudclk>
   418b4:	e3a0000a 	mov	r0, #10
   418b8:	e3a01000 	mov	r1, #0
   418bc:	ebffff73 	bl	41690 <bcm2835_delayMicroseconds>
   418c0:	e3a00000 	mov	r0, #0
   418c4:	ebfffee3 	bl	41458 <bcm2835_gpio_pud>
   418c8:	e55b3005 	ldrb	r3, [fp, #-5]
   418cc:	e3a01000 	mov	r1, #0
   418d0:	e1a00003 	mov	r0, r3
   418d4:	ebfffef0 	bl	4149c <bcm2835_gpio_pudclk>
   418d8:	e1a00000 	nop			; (mov r0, r0)
   418dc:	e24bd004 	sub	sp, fp, #4
   418e0:	e8bd8800 	pop	{fp, pc}

000418e4 <bcm2835_spi_begin>:
   418e4:	e92d4800 	push	{fp, lr}
   418e8:	e28db004 	add	fp, sp, #4
   418ec:	e24dd008 	sub	sp, sp, #8
   418f0:	e59f3080 	ldr	r3, [pc, #128]	; 41978 <bcm2835_spi_begin+0x94>
   418f4:	e5933000 	ldr	r3, [r3]
   418f8:	e3730001 	cmn	r3, #1
   418fc:	1a000001 	bne	41908 <bcm2835_spi_begin+0x24>
   41900:	e3a03000 	mov	r3, #0
   41904:	ea000018 	b	4196c <bcm2835_spi_begin+0x88>
   41908:	e3a01004 	mov	r1, #4
   4190c:	e3a00007 	mov	r0, #7
   41910:	ebfffc6e 	bl	40ad0 <bcm2835_gpio_fsel>
   41914:	e3a01004 	mov	r1, #4
   41918:	e3a00008 	mov	r0, #8
   4191c:	ebfffc6b 	bl	40ad0 <bcm2835_gpio_fsel>
   41920:	e3a01004 	mov	r1, #4
   41924:	e3a00009 	mov	r0, #9
   41928:	ebfffc68 	bl	40ad0 <bcm2835_gpio_fsel>
   4192c:	e3a01004 	mov	r1, #4
   41930:	e3a0000a 	mov	r0, #10
   41934:	ebfffc65 	bl	40ad0 <bcm2835_gpio_fsel>
   41938:	e3a01004 	mov	r1, #4
   4193c:	e3a0000b 	mov	r0, #11
   41940:	ebfffc62 	bl	40ad0 <bcm2835_gpio_fsel>
   41944:	e59f302c 	ldr	r3, [pc, #44]	; 41978 <bcm2835_spi_begin+0x94>
   41948:	e5933000 	ldr	r3, [r3]
   4194c:	e50b3008 	str	r3, [fp, #-8]
   41950:	e3a01000 	mov	r1, #0
   41954:	e51b0008 	ldr	r0, [fp, #-8]
   41958:	ebfffc16 	bl	409b8 <bcm2835_peri_write>
   4195c:	e3a01030 	mov	r1, #48	; 0x30
   41960:	e51b0008 	ldr	r0, [fp, #-8]
   41964:	ebfffc2b 	bl	40a18 <bcm2835_peri_write_nb>
   41968:	e3a03001 	mov	r3, #1
   4196c:	e1a00003 	mov	r0, r3
   41970:	e24bd004 	sub	sp, fp, #4
   41974:	e8bd8800 	pop	{fp, pc}
   41978:	0005c178 	.word	0x0005c178

0004197c <bcm2835_spi_end>:
   4197c:	e92d4800 	push	{fp, lr}
   41980:	e28db004 	add	fp, sp, #4
   41984:	e3a01000 	mov	r1, #0
   41988:	e3a00007 	mov	r0, #7
   4198c:	ebfffc4f 	bl	40ad0 <bcm2835_gpio_fsel>
   41990:	e3a01000 	mov	r1, #0
   41994:	e3a00008 	mov	r0, #8
   41998:	ebfffc4c 	bl	40ad0 <bcm2835_gpio_fsel>
   4199c:	e3a01000 	mov	r1, #0
   419a0:	e3a00009 	mov	r0, #9
   419a4:	ebfffc49 	bl	40ad0 <bcm2835_gpio_fsel>
   419a8:	e3a01000 	mov	r1, #0
   419ac:	e3a0000a 	mov	r0, #10
   419b0:	ebfffc46 	bl	40ad0 <bcm2835_gpio_fsel>
   419b4:	e3a01000 	mov	r1, #0
   419b8:	e3a0000b 	mov	r0, #11
   419bc:	ebfffc43 	bl	40ad0 <bcm2835_gpio_fsel>
   419c0:	e1a00000 	nop			; (mov r0, r0)
   419c4:	e8bd8800 	pop	{fp, pc}

000419c8 <bcm2835_spi_setBitOrder>:
   419c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   419cc:	e28db000 	add	fp, sp, #0
   419d0:	e24dd00c 	sub	sp, sp, #12
   419d4:	e1a03000 	mov	r3, r0
   419d8:	e54b3005 	strb	r3, [fp, #-5]
   419dc:	e59f2014 	ldr	r2, [pc, #20]	; 419f8 <bcm2835_spi_setBitOrder+0x30>
   419e0:	e55b3005 	ldrb	r3, [fp, #-5]
   419e4:	e5c23000 	strb	r3, [r2]
   419e8:	e1a00000 	nop			; (mov r0, r0)
   419ec:	e28bd000 	add	sp, fp, #0
   419f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   419f4:	e12fff1e 	bx	lr
   419f8:	0005c190 	.word	0x0005c190

000419fc <bcm2835_spi_setClockDivider>:
   419fc:	e92d4800 	push	{fp, lr}
   41a00:	e28db004 	add	fp, sp, #4
   41a04:	e24dd010 	sub	sp, sp, #16
   41a08:	e1a03000 	mov	r3, r0
   41a0c:	e14b30be 	strh	r3, [fp, #-14]
   41a10:	e59f3024 	ldr	r3, [pc, #36]	; 41a3c <bcm2835_spi_setClockDivider+0x40>
   41a14:	e5933000 	ldr	r3, [r3]
   41a18:	e2833008 	add	r3, r3, #8
   41a1c:	e50b3008 	str	r3, [fp, #-8]
   41a20:	e15b30be 	ldrh	r3, [fp, #-14]
   41a24:	e1a01003 	mov	r1, r3
   41a28:	e51b0008 	ldr	r0, [fp, #-8]
   41a2c:	ebfffbe1 	bl	409b8 <bcm2835_peri_write>
   41a30:	e1a00000 	nop			; (mov r0, r0)
   41a34:	e24bd004 	sub	sp, fp, #4
   41a38:	e8bd8800 	pop	{fp, pc}
   41a3c:	0005c178 	.word	0x0005c178

00041a40 <bcm2835_spi_set_speed_hz>:
   41a40:	e92d4800 	push	{fp, lr}
   41a44:	e28db004 	add	fp, sp, #4
   41a48:	e24dd010 	sub	sp, sp, #16
   41a4c:	e50b0010 	str	r0, [fp, #-16]
   41a50:	e51b1010 	ldr	r1, [fp, #-16]
   41a54:	e59f002c 	ldr	r0, [pc, #44]	; 41a88 <bcm2835_spi_set_speed_hz+0x48>
   41a58:	ebff3e5d 	bl	113d4 <__aeabi_uidiv@plt>
   41a5c:	e1a03000 	mov	r3, r0
   41a60:	e14b30b6 	strh	r3, [fp, #-6]
   41a64:	e15b30b6 	ldrh	r3, [fp, #-6]
   41a68:	e3c33001 	bic	r3, r3, #1
   41a6c:	e14b30b6 	strh	r3, [fp, #-6]
   41a70:	e15b30b6 	ldrh	r3, [fp, #-6]
   41a74:	e1a00003 	mov	r0, r3
   41a78:	ebffffdf 	bl	419fc <bcm2835_spi_setClockDivider>
   41a7c:	e1a00000 	nop			; (mov r0, r0)
   41a80:	e24bd004 	sub	sp, fp, #4
   41a84:	e8bd8800 	pop	{fp, pc}
   41a88:	0ee6b280 	.word	0x0ee6b280

00041a8c <bcm2835_spi_setDataMode>:
   41a8c:	e92d4800 	push	{fp, lr}
   41a90:	e28db004 	add	fp, sp, #4
   41a94:	e24dd010 	sub	sp, sp, #16
   41a98:	e1a03000 	mov	r3, r0
   41a9c:	e54b300d 	strb	r3, [fp, #-13]
   41aa0:	e59f3028 	ldr	r3, [pc, #40]	; 41ad0 <bcm2835_spi_setDataMode+0x44>
   41aa4:	e5933000 	ldr	r3, [r3]
   41aa8:	e50b3008 	str	r3, [fp, #-8]
   41aac:	e55b300d 	ldrb	r3, [fp, #-13]
   41ab0:	e1a03103 	lsl	r3, r3, #2
   41ab4:	e3a0200c 	mov	r2, #12
   41ab8:	e1a01003 	mov	r1, r3
   41abc:	e51b0008 	ldr	r0, [fp, #-8]
   41ac0:	ebfffbea 	bl	40a70 <bcm2835_peri_set_bits>
   41ac4:	e1a00000 	nop			; (mov r0, r0)
   41ac8:	e24bd004 	sub	sp, fp, #4
   41acc:	e8bd8800 	pop	{fp, pc}
   41ad0:	0005c178 	.word	0x0005c178

00041ad4 <bcm2835_spi_transfer>:
   41ad4:	e92d4800 	push	{fp, lr}
   41ad8:	e28db004 	add	fp, sp, #4
   41adc:	e24dd018 	sub	sp, sp, #24
   41ae0:	e1a03000 	mov	r3, r0
   41ae4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   41ae8:	e59f30cc 	ldr	r3, [pc, #204]	; 41bbc <bcm2835_spi_transfer+0xe8>
   41aec:	e5933000 	ldr	r3, [r3]
   41af0:	e50b3008 	str	r3, [fp, #-8]
   41af4:	e59f30c0 	ldr	r3, [pc, #192]	; 41bbc <bcm2835_spi_transfer+0xe8>
   41af8:	e5933000 	ldr	r3, [r3]
   41afc:	e2833004 	add	r3, r3, #4
   41b00:	e50b300c 	str	r3, [fp, #-12]
   41b04:	e3a02030 	mov	r2, #48	; 0x30
   41b08:	e3a01030 	mov	r1, #48	; 0x30
   41b0c:	e51b0008 	ldr	r0, [fp, #-8]
   41b10:	ebfffbd6 	bl	40a70 <bcm2835_peri_set_bits>
   41b14:	e3a02080 	mov	r2, #128	; 0x80
   41b18:	e3a01080 	mov	r1, #128	; 0x80
   41b1c:	e51b0008 	ldr	r0, [fp, #-8]
   41b20:	ebfffbd2 	bl	40a70 <bcm2835_peri_set_bits>
   41b24:	e1a00000 	nop			; (mov r0, r0)
   41b28:	e51b0008 	ldr	r0, [fp, #-8]
   41b2c:	ebfffb75 	bl	40908 <bcm2835_peri_read>
   41b30:	e1a03000 	mov	r3, r0
   41b34:	e2033701 	and	r3, r3, #262144	; 0x40000
   41b38:	e3530000 	cmp	r3, #0
   41b3c:	0afffff9 	beq	41b28 <bcm2835_spi_transfer+0x54>
   41b40:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   41b44:	e1a00003 	mov	r0, r3
   41b48:	ebfffb05 	bl	40764 <bcm2835_correct_order>
   41b4c:	e1a03000 	mov	r3, r0
   41b50:	e1a01003 	mov	r1, r3
   41b54:	e51b000c 	ldr	r0, [fp, #-12]
   41b58:	ebfffbae 	bl	40a18 <bcm2835_peri_write_nb>
   41b5c:	e1a00000 	nop			; (mov r0, r0)
   41b60:	e51b0008 	ldr	r0, [fp, #-8]
   41b64:	ebfffb7f 	bl	40968 <bcm2835_peri_read_nb>
   41b68:	e1a03000 	mov	r3, r0
   41b6c:	e2033801 	and	r3, r3, #65536	; 0x10000
   41b70:	e3530000 	cmp	r3, #0
   41b74:	0afffff9 	beq	41b60 <bcm2835_spi_transfer+0x8c>
   41b78:	e51b000c 	ldr	r0, [fp, #-12]
   41b7c:	ebfffb79 	bl	40968 <bcm2835_peri_read_nb>
   41b80:	e1a03000 	mov	r3, r0
   41b84:	e6ef3073 	uxtb	r3, r3
   41b88:	e1a00003 	mov	r0, r3
   41b8c:	ebfffaf4 	bl	40764 <bcm2835_correct_order>
   41b90:	e1a03000 	mov	r3, r0
   41b94:	e50b3010 	str	r3, [fp, #-16]
   41b98:	e3a02080 	mov	r2, #128	; 0x80
   41b9c:	e3a01000 	mov	r1, #0
   41ba0:	e51b0008 	ldr	r0, [fp, #-8]
   41ba4:	ebfffbb1 	bl	40a70 <bcm2835_peri_set_bits>
   41ba8:	e51b3010 	ldr	r3, [fp, #-16]
   41bac:	e6ef3073 	uxtb	r3, r3
   41bb0:	e1a00003 	mov	r0, r3
   41bb4:	e24bd004 	sub	sp, fp, #4
   41bb8:	e8bd8800 	pop	{fp, pc}
   41bbc:	0005c178 	.word	0x0005c178

00041bc0 <bcm2835_spi_transfernb>:
   41bc0:	e92d4810 	push	{r4, fp, lr}
   41bc4:	e28db008 	add	fp, sp, #8
   41bc8:	e24dd024 	sub	sp, sp, #36	; 0x24
   41bcc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   41bd0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   41bd4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
   41bd8:	e59f3160 	ldr	r3, [pc, #352]	; 41d40 <bcm2835_spi_transfernb+0x180>
   41bdc:	e5933000 	ldr	r3, [r3]
   41be0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   41be4:	e59f3154 	ldr	r3, [pc, #340]	; 41d40 <bcm2835_spi_transfernb+0x180>
   41be8:	e5933000 	ldr	r3, [r3]
   41bec:	e2833004 	add	r3, r3, #4
   41bf0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   41bf4:	e3a03000 	mov	r3, #0
   41bf8:	e50b3010 	str	r3, [fp, #-16]
   41bfc:	e3a03000 	mov	r3, #0
   41c00:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   41c04:	e3a02030 	mov	r2, #48	; 0x30
   41c08:	e3a01030 	mov	r1, #48	; 0x30
   41c0c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   41c10:	ebfffb96 	bl	40a70 <bcm2835_peri_set_bits>
   41c14:	e3a02080 	mov	r2, #128	; 0x80
   41c18:	e3a01080 	mov	r1, #128	; 0x80
   41c1c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   41c20:	ebfffb92 	bl	40a70 <bcm2835_peri_set_bits>
   41c24:	ea00002f 	b	41ce8 <bcm2835_spi_transfernb+0x128>
   41c28:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   41c2c:	e51b3010 	ldr	r3, [fp, #-16]
   41c30:	e0823003 	add	r3, r2, r3
   41c34:	e5d33000 	ldrb	r3, [r3]
   41c38:	e1a00003 	mov	r0, r3
   41c3c:	ebfffac8 	bl	40764 <bcm2835_correct_order>
   41c40:	e1a03000 	mov	r3, r0
   41c44:	e1a01003 	mov	r1, r3
   41c48:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   41c4c:	ebfffb71 	bl	40a18 <bcm2835_peri_write_nb>
   41c50:	e51b3010 	ldr	r3, [fp, #-16]
   41c54:	e2833001 	add	r3, r3, #1
   41c58:	e50b3010 	str	r3, [fp, #-16]
   41c5c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   41c60:	ebfffb28 	bl	40908 <bcm2835_peri_read>
   41c64:	e1a03000 	mov	r3, r0
   41c68:	e2033701 	and	r3, r3, #262144	; 0x40000
   41c6c:	e3530000 	cmp	r3, #0
   41c70:	0a000012 	beq	41cc0 <bcm2835_spi_transfernb+0x100>
   41c74:	e51b2010 	ldr	r2, [fp, #-16]
   41c78:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   41c7c:	e1520003 	cmp	r2, r3
   41c80:	3affffe8 	bcc	41c28 <bcm2835_spi_transfernb+0x68>
   41c84:	ea00000d 	b	41cc0 <bcm2835_spi_transfernb+0x100>
   41c88:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   41c8c:	ebfffb35 	bl	40968 <bcm2835_peri_read_nb>
   41c90:	e1a03000 	mov	r3, r0
   41c94:	e6ef1073 	uxtb	r1, r3
   41c98:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   41c9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   41ca0:	e0824003 	add	r4, r2, r3
   41ca4:	e1a00001 	mov	r0, r1
   41ca8:	ebfffaad 	bl	40764 <bcm2835_correct_order>
   41cac:	e1a03000 	mov	r3, r0
   41cb0:	e5c43000 	strb	r3, [r4]
   41cb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   41cb8:	e2833001 	add	r3, r3, #1
   41cbc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   41cc0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   41cc4:	ebfffb0f 	bl	40908 <bcm2835_peri_read>
   41cc8:	e1a03000 	mov	r3, r0
   41ccc:	e2033802 	and	r3, r3, #131072	; 0x20000
   41cd0:	e3530000 	cmp	r3, #0
   41cd4:	0a000003 	beq	41ce8 <bcm2835_spi_transfernb+0x128>
   41cd8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   41cdc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   41ce0:	e1520003 	cmp	r2, r3
   41ce4:	3affffe7 	bcc	41c88 <bcm2835_spi_transfernb+0xc8>
   41ce8:	e51b2010 	ldr	r2, [fp, #-16]
   41cec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   41cf0:	e1520003 	cmp	r2, r3
   41cf4:	3affffd8 	bcc	41c5c <bcm2835_spi_transfernb+0x9c>
   41cf8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   41cfc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   41d00:	e1520003 	cmp	r2, r3
   41d04:	3affffd4 	bcc	41c5c <bcm2835_spi_transfernb+0x9c>
   41d08:	e1a00000 	nop			; (mov r0, r0)
   41d0c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   41d10:	ebfffb14 	bl	40968 <bcm2835_peri_read_nb>
   41d14:	e1a03000 	mov	r3, r0
   41d18:	e2033801 	and	r3, r3, #65536	; 0x10000
   41d1c:	e3530000 	cmp	r3, #0
   41d20:	0afffff9 	beq	41d0c <bcm2835_spi_transfernb+0x14c>
   41d24:	e3a02080 	mov	r2, #128	; 0x80
   41d28:	e3a01000 	mov	r1, #0
   41d2c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   41d30:	ebfffb4e 	bl	40a70 <bcm2835_peri_set_bits>
   41d34:	e1a00000 	nop			; (mov r0, r0)
   41d38:	e24bd008 	sub	sp, fp, #8
   41d3c:	e8bd8810 	pop	{r4, fp, pc}
   41d40:	0005c178 	.word	0x0005c178

00041d44 <bcm2835_spi_writenb>:
   41d44:	e92d4800 	push	{fp, lr}
   41d48:	e28db004 	add	fp, sp, #4
   41d4c:	e24dd018 	sub	sp, sp, #24
   41d50:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   41d54:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   41d58:	e59f311c 	ldr	r3, [pc, #284]	; 41e7c <bcm2835_spi_writenb+0x138>
   41d5c:	e5933000 	ldr	r3, [r3]
   41d60:	e50b300c 	str	r3, [fp, #-12]
   41d64:	e59f3110 	ldr	r3, [pc, #272]	; 41e7c <bcm2835_spi_writenb+0x138>
   41d68:	e5933000 	ldr	r3, [r3]
   41d6c:	e2833004 	add	r3, r3, #4
   41d70:	e50b3010 	str	r3, [fp, #-16]
   41d74:	e3a02030 	mov	r2, #48	; 0x30
   41d78:	e3a01030 	mov	r1, #48	; 0x30
   41d7c:	e51b000c 	ldr	r0, [fp, #-12]
   41d80:	ebfffb3a 	bl	40a70 <bcm2835_peri_set_bits>
   41d84:	e3a02080 	mov	r2, #128	; 0x80
   41d88:	e3a01080 	mov	r1, #128	; 0x80
   41d8c:	e51b000c 	ldr	r0, [fp, #-12]
   41d90:	ebfffb36 	bl	40a70 <bcm2835_peri_set_bits>
   41d94:	e3a03000 	mov	r3, #0
   41d98:	e50b3008 	str	r3, [fp, #-8]
   41d9c:	ea00001c 	b	41e14 <bcm2835_spi_writenb+0xd0>
   41da0:	e1a00000 	nop			; (mov r0, r0)
   41da4:	e51b000c 	ldr	r0, [fp, #-12]
   41da8:	ebfffad6 	bl	40908 <bcm2835_peri_read>
   41dac:	e1a03000 	mov	r3, r0
   41db0:	e2033701 	and	r3, r3, #262144	; 0x40000
   41db4:	e3530000 	cmp	r3, #0
   41db8:	0afffff9 	beq	41da4 <bcm2835_spi_writenb+0x60>
   41dbc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   41dc0:	e51b3008 	ldr	r3, [fp, #-8]
   41dc4:	e0823003 	add	r3, r2, r3
   41dc8:	e5d33000 	ldrb	r3, [r3]
   41dcc:	e1a00003 	mov	r0, r3
   41dd0:	ebfffa63 	bl	40764 <bcm2835_correct_order>
   41dd4:	e1a03000 	mov	r3, r0
   41dd8:	e1a01003 	mov	r1, r3
   41ddc:	e51b0010 	ldr	r0, [fp, #-16]
   41de0:	ebfffb0c 	bl	40a18 <bcm2835_peri_write_nb>
   41de4:	ea000001 	b	41df0 <bcm2835_spi_writenb+0xac>
   41de8:	e51b0010 	ldr	r0, [fp, #-16]
   41dec:	ebfffadd 	bl	40968 <bcm2835_peri_read_nb>
   41df0:	e51b000c 	ldr	r0, [fp, #-12]
   41df4:	ebfffac3 	bl	40908 <bcm2835_peri_read>
   41df8:	e1a03000 	mov	r3, r0
   41dfc:	e2033802 	and	r3, r3, #131072	; 0x20000
   41e00:	e3530000 	cmp	r3, #0
   41e04:	1afffff7 	bne	41de8 <bcm2835_spi_writenb+0xa4>
   41e08:	e51b3008 	ldr	r3, [fp, #-8]
   41e0c:	e2833001 	add	r3, r3, #1
   41e10:	e50b3008 	str	r3, [fp, #-8]
   41e14:	e51b2008 	ldr	r2, [fp, #-8]
   41e18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   41e1c:	e1520003 	cmp	r2, r3
   41e20:	3affffde 	bcc	41da0 <bcm2835_spi_writenb+0x5c>
   41e24:	ea000007 	b	41e48 <bcm2835_spi_writenb+0x104>
   41e28:	e51b0010 	ldr	r0, [fp, #-16]
   41e2c:	ebfffacd 	bl	40968 <bcm2835_peri_read_nb>
   41e30:	e51b000c 	ldr	r0, [fp, #-12]
   41e34:	ebfffab3 	bl	40908 <bcm2835_peri_read>
   41e38:	e1a03000 	mov	r3, r0
   41e3c:	e2033802 	and	r3, r3, #131072	; 0x20000
   41e40:	e3530000 	cmp	r3, #0
   41e44:	1afffff7 	bne	41e28 <bcm2835_spi_writenb+0xe4>
   41e48:	e51b000c 	ldr	r0, [fp, #-12]
   41e4c:	ebfffac5 	bl	40968 <bcm2835_peri_read_nb>
   41e50:	e1a03000 	mov	r3, r0
   41e54:	e2033801 	and	r3, r3, #65536	; 0x10000
   41e58:	e3530000 	cmp	r3, #0
   41e5c:	0afffff3 	beq	41e30 <bcm2835_spi_writenb+0xec>
   41e60:	e3a02080 	mov	r2, #128	; 0x80
   41e64:	e3a01000 	mov	r1, #0
   41e68:	e51b000c 	ldr	r0, [fp, #-12]
   41e6c:	ebfffaff 	bl	40a70 <bcm2835_peri_set_bits>
   41e70:	e1a00000 	nop			; (mov r0, r0)
   41e74:	e24bd004 	sub	sp, fp, #4
   41e78:	e8bd8800 	pop	{fp, pc}
   41e7c:	0005c178 	.word	0x0005c178

00041e80 <bcm2835_spi_transfern>:
   41e80:	e92d4800 	push	{fp, lr}
   41e84:	e28db004 	add	fp, sp, #4
   41e88:	e24dd008 	sub	sp, sp, #8
   41e8c:	e50b0008 	str	r0, [fp, #-8]
   41e90:	e50b100c 	str	r1, [fp, #-12]
   41e94:	e51b200c 	ldr	r2, [fp, #-12]
   41e98:	e51b1008 	ldr	r1, [fp, #-8]
   41e9c:	e51b0008 	ldr	r0, [fp, #-8]
   41ea0:	ebffff46 	bl	41bc0 <bcm2835_spi_transfernb>
   41ea4:	e1a00000 	nop			; (mov r0, r0)
   41ea8:	e24bd004 	sub	sp, fp, #4
   41eac:	e8bd8800 	pop	{fp, pc}

00041eb0 <bcm2835_spi_chipSelect>:
   41eb0:	e92d4800 	push	{fp, lr}
   41eb4:	e28db004 	add	fp, sp, #4
   41eb8:	e24dd010 	sub	sp, sp, #16
   41ebc:	e1a03000 	mov	r3, r0
   41ec0:	e54b300d 	strb	r3, [fp, #-13]
   41ec4:	e59f3024 	ldr	r3, [pc, #36]	; 41ef0 <bcm2835_spi_chipSelect+0x40>
   41ec8:	e5933000 	ldr	r3, [r3]
   41ecc:	e50b3008 	str	r3, [fp, #-8]
   41ed0:	e55b300d 	ldrb	r3, [fp, #-13]
   41ed4:	e3a02003 	mov	r2, #3
   41ed8:	e1a01003 	mov	r1, r3
   41edc:	e51b0008 	ldr	r0, [fp, #-8]
   41ee0:	ebfffae2 	bl	40a70 <bcm2835_peri_set_bits>
   41ee4:	e1a00000 	nop			; (mov r0, r0)
   41ee8:	e24bd004 	sub	sp, fp, #4
   41eec:	e8bd8800 	pop	{fp, pc}
   41ef0:	0005c178 	.word	0x0005c178

00041ef4 <bcm2835_spi_setChipSelectPolarity>:
   41ef4:	e92d4800 	push	{fp, lr}
   41ef8:	e28db004 	add	fp, sp, #4
   41efc:	e24dd010 	sub	sp, sp, #16
   41f00:	e1a03000 	mov	r3, r0
   41f04:	e1a02001 	mov	r2, r1
   41f08:	e54b300d 	strb	r3, [fp, #-13]
   41f0c:	e1a03002 	mov	r3, r2
   41f10:	e54b300e 	strb	r3, [fp, #-14]
   41f14:	e59f3044 	ldr	r3, [pc, #68]	; 41f60 <bcm2835_spi_setChipSelectPolarity+0x6c>
   41f18:	e5933000 	ldr	r3, [r3]
   41f1c:	e50b3008 	str	r3, [fp, #-8]
   41f20:	e55b300d 	ldrb	r3, [fp, #-13]
   41f24:	e2833015 	add	r3, r3, #21
   41f28:	e54b3009 	strb	r3, [fp, #-9]
   41f2c:	e55b200e 	ldrb	r2, [fp, #-14]
   41f30:	e55b3009 	ldrb	r3, [fp, #-9]
   41f34:	e1a03312 	lsl	r3, r2, r3
   41f38:	e1a01003 	mov	r1, r3
   41f3c:	e55b3009 	ldrb	r3, [fp, #-9]
   41f40:	e3a02001 	mov	r2, #1
   41f44:	e1a03312 	lsl	r3, r2, r3
   41f48:	e1a02003 	mov	r2, r3
   41f4c:	e51b0008 	ldr	r0, [fp, #-8]
   41f50:	ebfffac6 	bl	40a70 <bcm2835_peri_set_bits>
   41f54:	e1a00000 	nop			; (mov r0, r0)
   41f58:	e24bd004 	sub	sp, fp, #4
   41f5c:	e8bd8800 	pop	{fp, pc}
   41f60:	0005c178 	.word	0x0005c178

00041f64 <bcm2835_spi_write>:
   41f64:	e92d4800 	push	{fp, lr}
   41f68:	e28db004 	add	fp, sp, #4
   41f6c:	e24dd010 	sub	sp, sp, #16
   41f70:	e1a03000 	mov	r3, r0
   41f74:	e14b30be 	strh	r3, [fp, #-14]
   41f78:	e59f30b4 	ldr	r3, [pc, #180]	; 42034 <bcm2835_spi_write+0xd0>
   41f7c:	e5933000 	ldr	r3, [r3]
   41f80:	e50b3008 	str	r3, [fp, #-8]
   41f84:	e59f30a8 	ldr	r3, [pc, #168]	; 42034 <bcm2835_spi_write+0xd0>
   41f88:	e5933000 	ldr	r3, [r3]
   41f8c:	e2833004 	add	r3, r3, #4
   41f90:	e50b300c 	str	r3, [fp, #-12]
   41f94:	e3a02030 	mov	r2, #48	; 0x30
   41f98:	e3a01030 	mov	r1, #48	; 0x30
   41f9c:	e51b0008 	ldr	r0, [fp, #-8]
   41fa0:	ebfffab2 	bl	40a70 <bcm2835_peri_set_bits>
   41fa4:	e3a02080 	mov	r2, #128	; 0x80
   41fa8:	e3a01080 	mov	r1, #128	; 0x80
   41fac:	e51b0008 	ldr	r0, [fp, #-8]
   41fb0:	ebfffaae 	bl	40a70 <bcm2835_peri_set_bits>
   41fb4:	e1a00000 	nop			; (mov r0, r0)
   41fb8:	e51b0008 	ldr	r0, [fp, #-8]
   41fbc:	ebfffa51 	bl	40908 <bcm2835_peri_read>
   41fc0:	e1a03000 	mov	r3, r0
   41fc4:	e2033701 	and	r3, r3, #262144	; 0x40000
   41fc8:	e3530000 	cmp	r3, #0
   41fcc:	0afffff9 	beq	41fb8 <bcm2835_spi_write+0x54>
   41fd0:	e15b30be 	ldrh	r3, [fp, #-14]
   41fd4:	e1a03423 	lsr	r3, r3, #8
   41fd8:	e6ff3073 	uxth	r3, r3
   41fdc:	e1a01003 	mov	r1, r3
   41fe0:	e51b000c 	ldr	r0, [fp, #-12]
   41fe4:	ebfffa8b 	bl	40a18 <bcm2835_peri_write_nb>
   41fe8:	e15b30be 	ldrh	r3, [fp, #-14]
   41fec:	e6ef3073 	uxtb	r3, r3
   41ff0:	e1a01003 	mov	r1, r3
   41ff4:	e51b000c 	ldr	r0, [fp, #-12]
   41ff8:	ebfffa86 	bl	40a18 <bcm2835_peri_write_nb>
   41ffc:	e1a00000 	nop			; (mov r0, r0)
   42000:	e51b0008 	ldr	r0, [fp, #-8]
   42004:	ebfffa57 	bl	40968 <bcm2835_peri_read_nb>
   42008:	e1a03000 	mov	r3, r0
   4200c:	e2033801 	and	r3, r3, #65536	; 0x10000
   42010:	e3530000 	cmp	r3, #0
   42014:	0afffff9 	beq	42000 <bcm2835_spi_write+0x9c>
   42018:	e3a02080 	mov	r2, #128	; 0x80
   4201c:	e3a01000 	mov	r1, #0
   42020:	e51b0008 	ldr	r0, [fp, #-8]
   42024:	ebfffa91 	bl	40a70 <bcm2835_peri_set_bits>
   42028:	e1a00000 	nop			; (mov r0, r0)
   4202c:	e24bd004 	sub	sp, fp, #4
   42030:	e8bd8800 	pop	{fp, pc}
   42034:	0005c178 	.word	0x0005c178

00042038 <bcm2835_aux_spi_begin>:
   42038:	e92d4800 	push	{fp, lr}
   4203c:	e28db004 	add	fp, sp, #4
   42040:	e24dd010 	sub	sp, sp, #16
   42044:	e59f30b4 	ldr	r3, [pc, #180]	; 42100 <bcm2835_aux_spi_begin+0xc8>
   42048:	e5933000 	ldr	r3, [r3]
   4204c:	e2833004 	add	r3, r3, #4
   42050:	e50b3008 	str	r3, [fp, #-8]
   42054:	e59f30a8 	ldr	r3, [pc, #168]	; 42104 <bcm2835_aux_spi_begin+0xcc>
   42058:	e5933000 	ldr	r3, [r3]
   4205c:	e50b300c 	str	r3, [fp, #-12]
   42060:	e59f309c 	ldr	r3, [pc, #156]	; 42104 <bcm2835_aux_spi_begin+0xcc>
   42064:	e5933000 	ldr	r3, [r3]
   42068:	e2833004 	add	r3, r3, #4
   4206c:	e50b3010 	str	r3, [fp, #-16]
   42070:	e59f308c 	ldr	r3, [pc, #140]	; 42104 <bcm2835_aux_spi_begin+0xcc>
   42074:	e5933000 	ldr	r3, [r3]
   42078:	e3730001 	cmn	r3, #1
   4207c:	1a000001 	bne	42088 <bcm2835_aux_spi_begin+0x50>
   42080:	e3a03000 	mov	r3, #0
   42084:	ea00001a 	b	420f4 <bcm2835_aux_spi_begin+0xbc>
   42088:	e3a01003 	mov	r1, #3
   4208c:	e3a00010 	mov	r0, #16
   42090:	ebfffa8e 	bl	40ad0 <bcm2835_gpio_fsel>
   42094:	e3a01003 	mov	r1, #3
   42098:	e3a00013 	mov	r0, #19
   4209c:	ebfffa8b 	bl	40ad0 <bcm2835_gpio_fsel>
   420a0:	e3a01003 	mov	r1, #3
   420a4:	e3a00014 	mov	r0, #20
   420a8:	ebfffa88 	bl	40ad0 <bcm2835_gpio_fsel>
   420ac:	e3a01003 	mov	r1, #3
   420b0:	e3a00015 	mov	r0, #21
   420b4:	ebfffa85 	bl	40ad0 <bcm2835_gpio_fsel>
   420b8:	e59f0048 	ldr	r0, [pc, #72]	; 42108 <bcm2835_aux_spi_begin+0xd0>
   420bc:	eb000022 	bl	4214c <bcm2835_aux_spi_CalcClockDivider>
   420c0:	e1a03000 	mov	r3, r0
   420c4:	e1a00003 	mov	r0, r3
   420c8:	eb00004b 	bl	421fc <bcm2835_aux_spi_setClockDivider>
   420cc:	e3a01002 	mov	r1, #2
   420d0:	e51b0008 	ldr	r0, [fp, #-8]
   420d4:	ebfffa37 	bl	409b8 <bcm2835_peri_write>
   420d8:	e3a01000 	mov	r1, #0
   420dc:	e51b0010 	ldr	r0, [fp, #-16]
   420e0:	ebfffa34 	bl	409b8 <bcm2835_peri_write>
   420e4:	e3a01c02 	mov	r1, #512	; 0x200
   420e8:	e51b000c 	ldr	r0, [fp, #-12]
   420ec:	ebfffa31 	bl	409b8 <bcm2835_peri_write>
   420f0:	e3a03001 	mov	r3, #1
   420f4:	e1a00003 	mov	r0, r3
   420f8:	e24bd004 	sub	sp, fp, #4
   420fc:	e8bd8800 	pop	{fp, pc}
   42100:	0005c188 	.word	0x0005c188
   42104:	0005c18c 	.word	0x0005c18c
   42108:	000f4240 	.word	0x000f4240

0004210c <bcm2835_aux_spi_end>:
   4210c:	e92d4800 	push	{fp, lr}
   42110:	e28db004 	add	fp, sp, #4
   42114:	e3a01000 	mov	r1, #0
   42118:	e3a00010 	mov	r0, #16
   4211c:	ebfffa6b 	bl	40ad0 <bcm2835_gpio_fsel>
   42120:	e3a01000 	mov	r1, #0
   42124:	e3a00013 	mov	r0, #19
   42128:	ebfffa68 	bl	40ad0 <bcm2835_gpio_fsel>
   4212c:	e3a01000 	mov	r1, #0
   42130:	e3a00014 	mov	r0, #20
   42134:	ebfffa65 	bl	40ad0 <bcm2835_gpio_fsel>
   42138:	e3a01000 	mov	r1, #0
   4213c:	e3a00015 	mov	r0, #21
   42140:	ebfffa62 	bl	40ad0 <bcm2835_gpio_fsel>
   42144:	e1a00000 	nop			; (mov r0, r0)
   42148:	e8bd8800 	pop	{fp, pc}

0004214c <bcm2835_aux_spi_CalcClockDivider>:
   4214c:	e92d4800 	push	{fp, lr}
   42150:	e28db004 	add	fp, sp, #4
   42154:	e24dd010 	sub	sp, sp, #16
   42158:	e50b0010 	str	r0, [fp, #-16]
   4215c:	e51b3010 	ldr	r3, [fp, #-16]
   42160:	e59f2084 	ldr	r2, [pc, #132]	; 421ec <bcm2835_aux_spi_CalcClockDivider+0xa0>
   42164:	e1530002 	cmp	r3, r2
   42168:	8a000002 	bhi	42178 <bcm2835_aux_spi_CalcClockDivider+0x2c>
   4216c:	e59f307c 	ldr	r3, [pc, #124]	; 421f0 <bcm2835_aux_spi_CalcClockDivider+0xa4>
   42170:	e50b3010 	str	r3, [fp, #-16]
   42174:	ea000005 	b	42190 <bcm2835_aux_spi_CalcClockDivider+0x44>
   42178:	e51b3010 	ldr	r3, [fp, #-16]
   4217c:	e59f2070 	ldr	r2, [pc, #112]	; 421f4 <bcm2835_aux_spi_CalcClockDivider+0xa8>
   42180:	e1530002 	cmp	r3, r2
   42184:	9a000001 	bls	42190 <bcm2835_aux_spi_CalcClockDivider+0x44>
   42188:	e59f3064 	ldr	r3, [pc, #100]	; 421f4 <bcm2835_aux_spi_CalcClockDivider+0xa8>
   4218c:	e50b3010 	str	r3, [fp, #-16]
   42190:	e51b2010 	ldr	r2, [fp, #-16]
   42194:	e59f3058 	ldr	r3, [pc, #88]	; 421f4 <bcm2835_aux_spi_CalcClockDivider+0xa8>
   42198:	e0823003 	add	r3, r2, r3
   4219c:	e1a03083 	lsl	r3, r3, #1
   421a0:	e2432001 	sub	r2, r3, #1
   421a4:	e51b3010 	ldr	r3, [fp, #-16]
   421a8:	e1a03083 	lsl	r3, r3, #1
   421ac:	e1a01003 	mov	r1, r3
   421b0:	e1a00002 	mov	r0, r2
   421b4:	ebff3c86 	bl	113d4 <__aeabi_uidiv@plt>
   421b8:	e1a03000 	mov	r3, r0
   421bc:	e6ff3073 	uxth	r3, r3
   421c0:	e2433001 	sub	r3, r3, #1
   421c4:	e14b30b6 	strh	r3, [fp, #-6]
   421c8:	e15b30b6 	ldrh	r3, [fp, #-6]
   421cc:	e3530a01 	cmp	r3, #4096	; 0x1000
   421d0:	3a000001 	bcc	421dc <bcm2835_aux_spi_CalcClockDivider+0x90>
   421d4:	e59f301c 	ldr	r3, [pc, #28]	; 421f8 <bcm2835_aux_spi_CalcClockDivider+0xac>
   421d8:	ea000000 	b	421e0 <bcm2835_aux_spi_CalcClockDivider+0x94>
   421dc:	e15b30b6 	ldrh	r3, [fp, #-6]
   421e0:	e1a00003 	mov	r0, r3
   421e4:	e24bd004 	sub	sp, fp, #4
   421e8:	e8bd8800 	pop	{fp, pc}
   421ec:	00007723 	.word	0x00007723
   421f0:	00007724 	.word	0x00007724
   421f4:	07735940 	.word	0x07735940
   421f8:	00000fff 	.word	0x00000fff

000421fc <bcm2835_aux_spi_setClockDivider>:
   421fc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   42200:	e28db000 	add	fp, sp, #0
   42204:	e24dd00c 	sub	sp, sp, #12
   42208:	e1a03000 	mov	r3, r0
   4220c:	e14b30b6 	strh	r3, [fp, #-6]
   42210:	e15b30b6 	ldrh	r3, [fp, #-6]
   42214:	e59f2010 	ldr	r2, [pc, #16]	; 4222c <bcm2835_aux_spi_setClockDivider+0x30>
   42218:	e5823000 	str	r3, [r2]
   4221c:	e1a00000 	nop			; (mov r0, r0)
   42220:	e28bd000 	add	sp, fp, #0
   42224:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   42228:	e12fff1e 	bx	lr
   4222c:	0005f3ec 	.word	0x0005f3ec

00042230 <bcm2835_aux_spi_write>:
   42230:	e92d4800 	push	{fp, lr}
   42234:	e28db004 	add	fp, sp, #4
   42238:	e24dd020 	sub	sp, sp, #32
   4223c:	e1a03000 	mov	r3, r0
   42240:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
   42244:	e59f30c8 	ldr	r3, [pc, #200]	; 42314 <bcm2835_aux_spi_write+0xe4>
   42248:	e5933000 	ldr	r3, [r3]
   4224c:	e50b3008 	str	r3, [fp, #-8]
   42250:	e59f30bc 	ldr	r3, [pc, #188]	; 42314 <bcm2835_aux_spi_write+0xe4>
   42254:	e5933000 	ldr	r3, [r3]
   42258:	e2833004 	add	r3, r3, #4
   4225c:	e50b300c 	str	r3, [fp, #-12]
   42260:	e59f30ac 	ldr	r3, [pc, #172]	; 42314 <bcm2835_aux_spi_write+0xe4>
   42264:	e5933000 	ldr	r3, [r3]
   42268:	e2833008 	add	r3, r3, #8
   4226c:	e50b3010 	str	r3, [fp, #-16]
   42270:	e59f309c 	ldr	r3, [pc, #156]	; 42314 <bcm2835_aux_spi_write+0xe4>
   42274:	e5933000 	ldr	r3, [r3]
   42278:	e2833020 	add	r3, r3, #32
   4227c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   42280:	e59f3090 	ldr	r3, [pc, #144]	; 42318 <bcm2835_aux_spi_write+0xe8>
   42284:	e5933000 	ldr	r3, [r3]
   42288:	e1a03a03 	lsl	r3, r3, #20
   4228c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   42290:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   42294:	e3833806 	orr	r3, r3, #393216	; 0x60000
   42298:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   4229c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   422a0:	e3833b02 	orr	r3, r3, #2048	; 0x800
   422a4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   422a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   422ac:	e3833040 	orr	r3, r3, #64	; 0x40
   422b0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   422b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   422b8:	e3833010 	orr	r3, r3, #16
   422bc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   422c0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   422c4:	e51b0008 	ldr	r0, [fp, #-8]
   422c8:	ebfff9ba 	bl	409b8 <bcm2835_peri_write>
   422cc:	e3a01002 	mov	r1, #2
   422d0:	e51b000c 	ldr	r0, [fp, #-12]
   422d4:	ebfff9b7 	bl	409b8 <bcm2835_peri_write>
   422d8:	e1a00000 	nop			; (mov r0, r0)
   422dc:	e51b0010 	ldr	r0, [fp, #-16]
   422e0:	ebfff988 	bl	40908 <bcm2835_peri_read>
   422e4:	e1a03000 	mov	r3, r0
   422e8:	e2033b01 	and	r3, r3, #1024	; 0x400
   422ec:	e3530000 	cmp	r3, #0
   422f0:	1afffff9 	bne	422dc <bcm2835_aux_spi_write+0xac>
   422f4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   422f8:	e1a03803 	lsl	r3, r3, #16
   422fc:	e1a01003 	mov	r1, r3
   42300:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   42304:	ebfff9ab 	bl	409b8 <bcm2835_peri_write>
   42308:	e1a00000 	nop			; (mov r0, r0)
   4230c:	e24bd004 	sub	sp, fp, #4
   42310:	e8bd8800 	pop	{fp, pc}
   42314:	0005c18c 	.word	0x0005c18c
   42318:	0005f3ec 	.word	0x0005f3ec

0004231c <bcm2835_aux_spi_writenb>:
   4231c:	e92d4800 	push	{fp, lr}
   42320:	e28db004 	add	fp, sp, #4
   42324:	e24dd038 	sub	sp, sp, #56	; 0x38
   42328:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
   4232c:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
   42330:	e59f31f4 	ldr	r3, [pc, #500]	; 4252c <bcm2835_aux_spi_writenb+0x210>
   42334:	e5933000 	ldr	r3, [r3]
   42338:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   4233c:	e59f31e8 	ldr	r3, [pc, #488]	; 4252c <bcm2835_aux_spi_writenb+0x210>
   42340:	e5933000 	ldr	r3, [r3]
   42344:	e2833004 	add	r3, r3, #4
   42348:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   4234c:	e59f31d8 	ldr	r3, [pc, #472]	; 4252c <bcm2835_aux_spi_writenb+0x210>
   42350:	e5933000 	ldr	r3, [r3]
   42354:	e2833008 	add	r3, r3, #8
   42358:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   4235c:	e59f31c8 	ldr	r3, [pc, #456]	; 4252c <bcm2835_aux_spi_writenb+0x210>
   42360:	e5933000 	ldr	r3, [r3]
   42364:	e2833030 	add	r3, r3, #48	; 0x30
   42368:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   4236c:	e59f31b8 	ldr	r3, [pc, #440]	; 4252c <bcm2835_aux_spi_writenb+0x210>
   42370:	e5933000 	ldr	r3, [r3]
   42374:	e2833020 	add	r3, r3, #32
   42378:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
   4237c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   42380:	e50b3008 	str	r3, [fp, #-8]
   42384:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   42388:	e50b300c 	str	r3, [fp, #-12]
   4238c:	e59f319c 	ldr	r3, [pc, #412]	; 42530 <bcm2835_aux_spi_writenb+0x214>
   42390:	e5933000 	ldr	r3, [r3]
   42394:	e1a03a03 	lsl	r3, r3, #20
   42398:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   4239c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   423a0:	e3833806 	orr	r3, r3, #393216	; 0x60000
   423a4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   423a8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   423ac:	e3833b02 	orr	r3, r3, #2048	; 0x800
   423b0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   423b4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   423b8:	e3833040 	orr	r3, r3, #64	; 0x40
   423bc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   423c0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   423c4:	e3833901 	orr	r3, r3, #16384	; 0x4000
   423c8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   423cc:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
   423d0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   423d4:	ebfff977 	bl	409b8 <bcm2835_peri_write>
   423d8:	e3a01002 	mov	r1, #2
   423dc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   423e0:	ebfff974 	bl	409b8 <bcm2835_peri_write>
   423e4:	ea00004a 	b	42514 <bcm2835_aux_spi_writenb+0x1f8>
   423e8:	e1a00000 	nop			; (mov r0, r0)
   423ec:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   423f0:	ebfff944 	bl	40908 <bcm2835_peri_read>
   423f4:	e1a03000 	mov	r3, r0
   423f8:	e2033b01 	and	r3, r3, #1024	; 0x400
   423fc:	e3530000 	cmp	r3, #0
   42400:	1afffff9 	bne	423ec <bcm2835_aux_spi_writenb+0xd0>
   42404:	e51b300c 	ldr	r3, [fp, #-12]
   42408:	e3530003 	cmp	r3, #3
   4240c:	31a03003 	movcc	r3, r3
   42410:	23a03003 	movcs	r3, #3
   42414:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
   42418:	e3a03000 	mov	r3, #0
   4241c:	e50b3010 	str	r3, [fp, #-16]
   42420:	e3a03000 	mov	r3, #0
   42424:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   42428:	ea000018 	b	42490 <bcm2835_aux_spi_writenb+0x174>
   4242c:	e51b3008 	ldr	r3, [fp, #-8]
   42430:	e3530000 	cmp	r3, #0
   42434:	0a000004 	beq	4244c <bcm2835_aux_spi_writenb+0x130>
   42438:	e51b3008 	ldr	r3, [fp, #-8]
   4243c:	e2832001 	add	r2, r3, #1
   42440:	e50b2008 	str	r2, [fp, #-8]
   42444:	e5d33000 	ldrb	r3, [r3]
   42448:	ea000000 	b	42450 <bcm2835_aux_spi_writenb+0x134>
   4244c:	e3a03000 	mov	r3, #0
   42450:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
   42454:	e55b1031 	ldrb	r1, [fp, #-49]	; 0xffffffcf
   42458:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   4245c:	e1a03002 	mov	r3, r2
   42460:	e1a03e83 	lsl	r3, r3, #29
   42464:	e0433002 	sub	r3, r3, r2
   42468:	e1a03183 	lsl	r3, r3, #3
   4246c:	e2833010 	add	r3, r3, #16
   42470:	e1a03311 	lsl	r3, r1, r3
   42474:	e1a02003 	mov	r2, r3
   42478:	e51b3010 	ldr	r3, [fp, #-16]
   4247c:	e1833002 	orr	r3, r3, r2
   42480:	e50b3010 	str	r3, [fp, #-16]
   42484:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   42488:	e2833001 	add	r3, r3, #1
   4248c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   42490:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   42494:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   42498:	e1520003 	cmp	r2, r3
   4249c:	3affffe2 	bcc	4242c <bcm2835_aux_spi_writenb+0x110>
   424a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   424a4:	e1a03183 	lsl	r3, r3, #3
   424a8:	e1a03c03 	lsl	r3, r3, #24
   424ac:	e51b2010 	ldr	r2, [fp, #-16]
   424b0:	e1823003 	orr	r3, r2, r3
   424b4:	e50b3010 	str	r3, [fp, #-16]
   424b8:	e51b200c 	ldr	r2, [fp, #-12]
   424bc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   424c0:	e0423003 	sub	r3, r2, r3
   424c4:	e50b300c 	str	r3, [fp, #-12]
   424c8:	e51b300c 	ldr	r3, [fp, #-12]
   424cc:	e3530000 	cmp	r3, #0
   424d0:	0a000003 	beq	424e4 <bcm2835_aux_spi_writenb+0x1c8>
   424d4:	e51b1010 	ldr	r1, [fp, #-16]
   424d8:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
   424dc:	ebfff935 	bl	409b8 <bcm2835_peri_write>
   424e0:	ea000002 	b	424f0 <bcm2835_aux_spi_writenb+0x1d4>
   424e4:	e51b1010 	ldr	r1, [fp, #-16]
   424e8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   424ec:	ebfff931 	bl	409b8 <bcm2835_peri_write>
   424f0:	e1a00000 	nop			; (mov r0, r0)
   424f4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   424f8:	ebfff902 	bl	40908 <bcm2835_peri_read>
   424fc:	e1a03000 	mov	r3, r0
   42500:	e2033040 	and	r3, r3, #64	; 0x40
   42504:	e3530000 	cmp	r3, #0
   42508:	1afffff9 	bne	424f4 <bcm2835_aux_spi_writenb+0x1d8>
   4250c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   42510:	ebfff8fc 	bl	40908 <bcm2835_peri_read>
   42514:	e51b300c 	ldr	r3, [fp, #-12]
   42518:	e3530000 	cmp	r3, #0
   4251c:	1affffb1 	bne	423e8 <bcm2835_aux_spi_writenb+0xcc>
   42520:	e1a00000 	nop			; (mov r0, r0)
   42524:	e24bd004 	sub	sp, fp, #4
   42528:	e8bd8800 	pop	{fp, pc}
   4252c:	0005c18c 	.word	0x0005c18c
   42530:	0005f3ec 	.word	0x0005f3ec

00042534 <bcm2835_aux_spi_transfernb>:
   42534:	e92d4800 	push	{fp, lr}
   42538:	e28db004 	add	fp, sp, #4
   4253c:	e24dd048 	sub	sp, sp, #72	; 0x48
   42540:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
   42544:	e50b1044 	str	r1, [fp, #-68]	; 0xffffffbc
   42548:	e50b2048 	str	r2, [fp, #-72]	; 0xffffffb8
   4254c:	e59f33ac 	ldr	r3, [pc, #940]	; 42900 <bcm2835_aux_spi_transfernb+0x3cc>
   42550:	e5933000 	ldr	r3, [r3]
   42554:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   42558:	e59f33a0 	ldr	r3, [pc, #928]	; 42900 <bcm2835_aux_spi_transfernb+0x3cc>
   4255c:	e5933000 	ldr	r3, [r3]
   42560:	e2833004 	add	r3, r3, #4
   42564:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   42568:	e59f3390 	ldr	r3, [pc, #912]	; 42900 <bcm2835_aux_spi_transfernb+0x3cc>
   4256c:	e5933000 	ldr	r3, [r3]
   42570:	e2833008 	add	r3, r3, #8
   42574:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
   42578:	e59f3380 	ldr	r3, [pc, #896]	; 42900 <bcm2835_aux_spi_transfernb+0x3cc>
   4257c:	e5933000 	ldr	r3, [r3]
   42580:	e2833030 	add	r3, r3, #48	; 0x30
   42584:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   42588:	e59f3370 	ldr	r3, [pc, #880]	; 42900 <bcm2835_aux_spi_transfernb+0x3cc>
   4258c:	e5933000 	ldr	r3, [r3]
   42590:	e2833020 	add	r3, r3, #32
   42594:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
   42598:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   4259c:	e50b3008 	str	r3, [fp, #-8]
   425a0:	e51b3044 	ldr	r3, [fp, #-68]	; 0xffffffbc
   425a4:	e50b300c 	str	r3, [fp, #-12]
   425a8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   425ac:	e50b3010 	str	r3, [fp, #-16]
   425b0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   425b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   425b8:	e59f3344 	ldr	r3, [pc, #836]	; 42904 <bcm2835_aux_spi_transfernb+0x3d0>
   425bc:	e5933000 	ldr	r3, [r3]
   425c0:	e1a03a03 	lsl	r3, r3, #20
   425c4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   425c8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   425cc:	e3833806 	orr	r3, r3, #393216	; 0x60000
   425d0:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   425d4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   425d8:	e3833b02 	orr	r3, r3, #2048	; 0x800
   425dc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   425e0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   425e4:	e3833040 	orr	r3, r3, #64	; 0x40
   425e8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   425ec:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   425f0:	e3833901 	orr	r3, r3, #16384	; 0x4000
   425f4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   425f8:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
   425fc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   42600:	ebfff8ec 	bl	409b8 <bcm2835_peri_write>
   42604:	e3a01002 	mov	r1, #2
   42608:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
   4260c:	ebfff8e9 	bl	409b8 <bcm2835_peri_write>
   42610:	ea0000b1 	b	428dc <bcm2835_aux_spi_transfernb+0x3a8>
   42614:	e51b3010 	ldr	r3, [fp, #-16]
   42618:	e3530003 	cmp	r3, #3
   4261c:	31a03003 	movcc	r3, r3
   42620:	23a03003 	movcs	r3, #3
   42624:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
   42628:	e3a03000 	mov	r3, #0
   4262c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   42630:	e3a03000 	mov	r3, #0
   42634:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   42638:	ea000018 	b	426a0 <bcm2835_aux_spi_transfernb+0x16c>
   4263c:	e51b3008 	ldr	r3, [fp, #-8]
   42640:	e3530000 	cmp	r3, #0
   42644:	0a000004 	beq	4265c <bcm2835_aux_spi_transfernb+0x128>
   42648:	e51b3008 	ldr	r3, [fp, #-8]
   4264c:	e2832001 	add	r2, r3, #1
   42650:	e50b2008 	str	r2, [fp, #-8]
   42654:	e5d33000 	ldrb	r3, [r3]
   42658:	ea000000 	b	42660 <bcm2835_aux_spi_transfernb+0x12c>
   4265c:	e3a03000 	mov	r3, #0
   42660:	e54b3039 	strb	r3, [fp, #-57]	; 0xffffffc7
   42664:	e55b1039 	ldrb	r1, [fp, #-57]	; 0xffffffc7
   42668:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   4266c:	e1a03002 	mov	r3, r2
   42670:	e1a03e83 	lsl	r3, r3, #29
   42674:	e0433002 	sub	r3, r3, r2
   42678:	e1a03183 	lsl	r3, r3, #3
   4267c:	e2833010 	add	r3, r3, #16
   42680:	e1a03311 	lsl	r3, r1, r3
   42684:	e1a02003 	mov	r2, r3
   42688:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   4268c:	e1833002 	orr	r3, r3, r2
   42690:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   42694:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   42698:	e2833001 	add	r3, r3, #1
   4269c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   426a0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   426a4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   426a8:	e1520003 	cmp	r2, r3
   426ac:	3affffe2 	bcc	4263c <bcm2835_aux_spi_transfernb+0x108>
   426b0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   426b4:	e1a03183 	lsl	r3, r3, #3
   426b8:	e1a03c03 	lsl	r3, r3, #24
   426bc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   426c0:	e1823003 	orr	r3, r2, r3
   426c4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   426c8:	e51b2010 	ldr	r2, [fp, #-16]
   426cc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   426d0:	e0423003 	sub	r3, r2, r3
   426d4:	e50b3010 	str	r3, [fp, #-16]
   426d8:	e51b3010 	ldr	r3, [fp, #-16]
   426dc:	e3530000 	cmp	r3, #0
   426e0:	0a000003 	beq	426f4 <bcm2835_aux_spi_transfernb+0x1c0>
   426e4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   426e8:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
   426ec:	ebfff8b1 	bl	409b8 <bcm2835_peri_write>
   426f0:	ea000002 	b	42700 <bcm2835_aux_spi_transfernb+0x1cc>
   426f4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   426f8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   426fc:	ebfff8ad 	bl	409b8 <bcm2835_peri_write>
   42700:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   42704:	ebfff87f 	bl	40908 <bcm2835_peri_read>
   42708:	e1a03000 	mov	r3, r0
   4270c:	e2033b01 	and	r3, r3, #1024	; 0x400
   42710:	e3530000 	cmp	r3, #0
   42714:	1a000030 	bne	427dc <bcm2835_aux_spi_transfernb+0x2a8>
   42718:	e51b3010 	ldr	r3, [fp, #-16]
   4271c:	e3530000 	cmp	r3, #0
   42720:	1affffbb 	bne	42614 <bcm2835_aux_spi_transfernb+0xe0>
   42724:	ea00002c 	b	427dc <bcm2835_aux_spi_transfernb+0x2a8>
   42728:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   4272c:	e3530003 	cmp	r3, #3
   42730:	31a03003 	movcc	r3, r3
   42734:	23a03003 	movcs	r3, #3
   42738:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
   4273c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   42740:	ebfff870 	bl	40908 <bcm2835_peri_read>
   42744:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   42748:	e51b3044 	ldr	r3, [fp, #-68]	; 0xffffffbc
   4274c:	e3530000 	cmp	r3, #0
   42750:	0a00001d 	beq	427cc <bcm2835_aux_spi_transfernb+0x298>
   42754:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   42758:	e3530002 	cmp	r3, #2
   4275c:	0a00000d 	beq	42798 <bcm2835_aux_spi_transfernb+0x264>
   42760:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   42764:	e3530003 	cmp	r3, #3
   42768:	0a000003 	beq	4277c <bcm2835_aux_spi_transfernb+0x248>
   4276c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   42770:	e3530001 	cmp	r3, #1
   42774:	0a00000e 	beq	427b4 <bcm2835_aux_spi_transfernb+0x280>
   42778:	ea000013 	b	427cc <bcm2835_aux_spi_transfernb+0x298>
   4277c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   42780:	e1a01823 	lsr	r1, r3, #16
   42784:	e51b300c 	ldr	r3, [fp, #-12]
   42788:	e2832001 	add	r2, r3, #1
   4278c:	e50b200c 	str	r2, [fp, #-12]
   42790:	e6ef2071 	uxtb	r2, r1
   42794:	e5c32000 	strb	r2, [r3]
   42798:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   4279c:	e1a01423 	lsr	r1, r3, #8
   427a0:	e51b300c 	ldr	r3, [fp, #-12]
   427a4:	e2832001 	add	r2, r3, #1
   427a8:	e50b200c 	str	r2, [fp, #-12]
   427ac:	e6ef2071 	uxtb	r2, r1
   427b0:	e5c32000 	strb	r2, [r3]
   427b4:	e51b300c 	ldr	r3, [fp, #-12]
   427b8:	e2832001 	add	r2, r3, #1
   427bc:	e50b200c 	str	r2, [fp, #-12]
   427c0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   427c4:	e6ef2072 	uxtb	r2, r2
   427c8:	e5c32000 	strb	r2, [r3]
   427cc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   427d0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   427d4:	e0423003 	sub	r3, r2, r3
   427d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   427dc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   427e0:	ebfff848 	bl	40908 <bcm2835_peri_read>
   427e4:	e1a03000 	mov	r3, r0
   427e8:	e2033080 	and	r3, r3, #128	; 0x80
   427ec:	e3530000 	cmp	r3, #0
   427f0:	1a000030 	bne	428b8 <bcm2835_aux_spi_transfernb+0x384>
   427f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   427f8:	e3530000 	cmp	r3, #0
   427fc:	1affffc9 	bne	42728 <bcm2835_aux_spi_transfernb+0x1f4>
   42800:	ea00002c 	b	428b8 <bcm2835_aux_spi_transfernb+0x384>
   42804:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   42808:	e3530003 	cmp	r3, #3
   4280c:	31a03003 	movcc	r3, r3
   42810:	23a03003 	movcs	r3, #3
   42814:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
   42818:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   4281c:	ebfff839 	bl	40908 <bcm2835_peri_read>
   42820:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   42824:	e51b3044 	ldr	r3, [fp, #-68]	; 0xffffffbc
   42828:	e3530000 	cmp	r3, #0
   4282c:	0a00001d 	beq	428a8 <bcm2835_aux_spi_transfernb+0x374>
   42830:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   42834:	e3530002 	cmp	r3, #2
   42838:	0a00000d 	beq	42874 <bcm2835_aux_spi_transfernb+0x340>
   4283c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   42840:	e3530003 	cmp	r3, #3
   42844:	0a000003 	beq	42858 <bcm2835_aux_spi_transfernb+0x324>
   42848:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   4284c:	e3530001 	cmp	r3, #1
   42850:	0a00000e 	beq	42890 <bcm2835_aux_spi_transfernb+0x35c>
   42854:	ea000013 	b	428a8 <bcm2835_aux_spi_transfernb+0x374>
   42858:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   4285c:	e1a01823 	lsr	r1, r3, #16
   42860:	e51b300c 	ldr	r3, [fp, #-12]
   42864:	e2832001 	add	r2, r3, #1
   42868:	e50b200c 	str	r2, [fp, #-12]
   4286c:	e6ef2071 	uxtb	r2, r1
   42870:	e5c32000 	strb	r2, [r3]
   42874:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   42878:	e1a01423 	lsr	r1, r3, #8
   4287c:	e51b300c 	ldr	r3, [fp, #-12]
   42880:	e2832001 	add	r2, r3, #1
   42884:	e50b200c 	str	r2, [fp, #-12]
   42888:	e6ef2071 	uxtb	r2, r1
   4288c:	e5c32000 	strb	r2, [r3]
   42890:	e51b300c 	ldr	r3, [fp, #-12]
   42894:	e2832001 	add	r2, r3, #1
   42898:	e50b200c 	str	r2, [fp, #-12]
   4289c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   428a0:	e6ef2072 	uxtb	r2, r2
   428a4:	e5c32000 	strb	r2, [r3]
   428a8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   428ac:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   428b0:	e0423003 	sub	r3, r2, r3
   428b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   428b8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
   428bc:	ebfff811 	bl	40908 <bcm2835_peri_read>
   428c0:	e1a03000 	mov	r3, r0
   428c4:	e2033040 	and	r3, r3, #64	; 0x40
   428c8:	e3530000 	cmp	r3, #0
   428cc:	1a000002 	bne	428dc <bcm2835_aux_spi_transfernb+0x3a8>
   428d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   428d4:	e3530000 	cmp	r3, #0
   428d8:	1affffc9 	bne	42804 <bcm2835_aux_spi_transfernb+0x2d0>
   428dc:	e51b3010 	ldr	r3, [fp, #-16]
   428e0:	e3530000 	cmp	r3, #0
   428e4:	1affff85 	bne	42700 <bcm2835_aux_spi_transfernb+0x1cc>
   428e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   428ec:	e3530000 	cmp	r3, #0
   428f0:	1affff82 	bne	42700 <bcm2835_aux_spi_transfernb+0x1cc>
   428f4:	e1a00000 	nop			; (mov r0, r0)
   428f8:	e24bd004 	sub	sp, fp, #4
   428fc:	e8bd8800 	pop	{fp, pc}
   42900:	0005c18c 	.word	0x0005c18c
   42904:	0005f3ec 	.word	0x0005f3ec

00042908 <bcm2835_aux_spi_transfern>:
   42908:	e92d4800 	push	{fp, lr}
   4290c:	e28db004 	add	fp, sp, #4
   42910:	e24dd008 	sub	sp, sp, #8
   42914:	e50b0008 	str	r0, [fp, #-8]
   42918:	e50b100c 	str	r1, [fp, #-12]
   4291c:	e51b200c 	ldr	r2, [fp, #-12]
   42920:	e51b1008 	ldr	r1, [fp, #-8]
   42924:	e51b0008 	ldr	r0, [fp, #-8]
   42928:	ebffff01 	bl	42534 <bcm2835_aux_spi_transfernb>
   4292c:	e1a00000 	nop			; (mov r0, r0)
   42930:	e24bd004 	sub	sp, fp, #4
   42934:	e8bd8800 	pop	{fp, pc}

00042938 <bcm2835_i2c_begin>:
   42938:	e92d4800 	push	{fp, lr}
   4293c:	e28db004 	add	fp, sp, #4
   42940:	e24dd008 	sub	sp, sp, #8
   42944:	e59f30a8 	ldr	r3, [pc, #168]	; 429f4 <bcm2835_i2c_begin+0xbc>
   42948:	e5933000 	ldr	r3, [r3]
   4294c:	e3730001 	cmn	r3, #1
   42950:	0a000003 	beq	42964 <bcm2835_i2c_begin+0x2c>
   42954:	e59f309c 	ldr	r3, [pc, #156]	; 429f8 <bcm2835_i2c_begin+0xc0>
   42958:	e5933000 	ldr	r3, [r3]
   4295c:	e3730001 	cmn	r3, #1
   42960:	1a000001 	bne	4296c <bcm2835_i2c_begin+0x34>
   42964:	e3a03000 	mov	r3, #0
   42968:	ea00001b 	b	429dc <bcm2835_i2c_begin+0xa4>
   4296c:	e59f3084 	ldr	r3, [pc, #132]	; 429f8 <bcm2835_i2c_begin+0xc0>
   42970:	e5933000 	ldr	r3, [r3]
   42974:	e2833014 	add	r3, r3, #20
   42978:	e50b3008 	str	r3, [fp, #-8]
   4297c:	e3a01004 	mov	r1, #4
   42980:	e3a00002 	mov	r0, #2
   42984:	ebfff851 	bl	40ad0 <bcm2835_gpio_fsel>
   42988:	e3a01004 	mov	r1, #4
   4298c:	e3a00003 	mov	r0, #3
   42990:	ebfff84e 	bl	40ad0 <bcm2835_gpio_fsel>
   42994:	e51b0008 	ldr	r0, [fp, #-8]
   42998:	ebfff7da 	bl	40908 <bcm2835_peri_read>
   4299c:	e1a03000 	mov	r3, r0
   429a0:	e14b30ba 	strh	r3, [fp, #-10]
   429a4:	e15b30ba 	ldrh	r3, [fp, #-10]
   429a8:	ee073a90 	vmov	s15, r3
   429ac:	eeb87a67 	vcvt.f32.u32	s14, s15
   429b0:	eddf6a0c 	vldr	s13, [pc, #48]	; 429e8 <bcm2835_i2c_begin+0xb0>
   429b4:	eec77a26 	vdiv.f32	s15, s14, s13
   429b8:	ed9f7a0b 	vldr	s14, [pc, #44]	; 429ec <bcm2835_i2c_begin+0xb4>
   429bc:	ee677a87 	vmul.f32	s15, s15, s14
   429c0:	ed9f7a0a 	vldr	s14, [pc, #40]	; 429f0 <bcm2835_i2c_begin+0xb8>
   429c4:	ee677a87 	vmul.f32	s15, s15, s14
   429c8:	eefd7ae7 	vcvt.s32.f32	s15, s15
   429cc:	ee172a90 	vmov	r2, s15
   429d0:	e59f3024 	ldr	r3, [pc, #36]	; 429fc <bcm2835_i2c_begin+0xc4>
   429d4:	e5832000 	str	r2, [r3]
   429d8:	e3a03001 	mov	r3, #1
   429dc:	e1a00003 	mov	r0, r3
   429e0:	e24bd004 	sub	sp, fp, #4
   429e4:	e8bd8800 	pop	{fp, pc}
   429e8:	4d6e6b28 	.word	0x4d6e6b28
   429ec:	49742400 	.word	0x49742400
   429f0:	41100000 	.word	0x41100000
   429f4:	0005c17c 	.word	0x0005c17c
   429f8:	0005c180 	.word	0x0005c180
   429fc:	0005f3e8 	.word	0x0005f3e8

00042a00 <bcm2835_i2c_end>:
   42a00:	e92d4800 	push	{fp, lr}
   42a04:	e28db004 	add	fp, sp, #4
   42a08:	e3a01000 	mov	r1, #0
   42a0c:	e3a00002 	mov	r0, #2
   42a10:	ebfff82e 	bl	40ad0 <bcm2835_gpio_fsel>
   42a14:	e3a01000 	mov	r1, #0
   42a18:	e3a00003 	mov	r0, #3
   42a1c:	ebfff82b 	bl	40ad0 <bcm2835_gpio_fsel>
   42a20:	e1a00000 	nop			; (mov r0, r0)
   42a24:	e8bd8800 	pop	{fp, pc}

00042a28 <bcm2835_i2c_setSlaveAddress>:
   42a28:	e92d4800 	push	{fp, lr}
   42a2c:	e28db004 	add	fp, sp, #4
   42a30:	e24dd010 	sub	sp, sp, #16
   42a34:	e1a03000 	mov	r3, r0
   42a38:	e54b300d 	strb	r3, [fp, #-13]
   42a3c:	e59f3024 	ldr	r3, [pc, #36]	; 42a68 <bcm2835_i2c_setSlaveAddress+0x40>
   42a40:	e5933000 	ldr	r3, [r3]
   42a44:	e283300c 	add	r3, r3, #12
   42a48:	e50b3008 	str	r3, [fp, #-8]
   42a4c:	e55b300d 	ldrb	r3, [fp, #-13]
   42a50:	e1a01003 	mov	r1, r3
   42a54:	e51b0008 	ldr	r0, [fp, #-8]
   42a58:	ebfff7d6 	bl	409b8 <bcm2835_peri_write>
   42a5c:	e1a00000 	nop			; (mov r0, r0)
   42a60:	e24bd004 	sub	sp, fp, #4
   42a64:	e8bd8800 	pop	{fp, pc}
   42a68:	0005c180 	.word	0x0005c180

00042a6c <bcm2835_i2c_setClockDivider>:
   42a6c:	e92d4800 	push	{fp, lr}
   42a70:	e28db004 	add	fp, sp, #4
   42a74:	e24dd010 	sub	sp, sp, #16
   42a78:	e1a03000 	mov	r3, r0
   42a7c:	e14b30be 	strh	r3, [fp, #-14]
   42a80:	e59f3064 	ldr	r3, [pc, #100]	; 42aec <bcm2835_i2c_setClockDivider+0x80>
   42a84:	e5933000 	ldr	r3, [r3]
   42a88:	e2833014 	add	r3, r3, #20
   42a8c:	e50b3008 	str	r3, [fp, #-8]
   42a90:	e15b30be 	ldrh	r3, [fp, #-14]
   42a94:	e1a01003 	mov	r1, r3
   42a98:	e51b0008 	ldr	r0, [fp, #-8]
   42a9c:	ebfff7c5 	bl	409b8 <bcm2835_peri_write>
   42aa0:	e15b30be 	ldrh	r3, [fp, #-14]
   42aa4:	ee073a90 	vmov	s15, r3
   42aa8:	eeb87a67 	vcvt.f32.u32	s14, s15
   42aac:	eddf6a0b 	vldr	s13, [pc, #44]	; 42ae0 <bcm2835_i2c_setClockDivider+0x74>
   42ab0:	eec77a26 	vdiv.f32	s15, s14, s13
   42ab4:	ed9f7a0a 	vldr	s14, [pc, #40]	; 42ae4 <bcm2835_i2c_setClockDivider+0x78>
   42ab8:	ee677a87 	vmul.f32	s15, s15, s14
   42abc:	ed9f7a09 	vldr	s14, [pc, #36]	; 42ae8 <bcm2835_i2c_setClockDivider+0x7c>
   42ac0:	ee677a87 	vmul.f32	s15, s15, s14
   42ac4:	eefd7ae7 	vcvt.s32.f32	s15, s15
   42ac8:	ee172a90 	vmov	r2, s15
   42acc:	e59f301c 	ldr	r3, [pc, #28]	; 42af0 <bcm2835_i2c_setClockDivider+0x84>
   42ad0:	e5832000 	str	r2, [r3]
   42ad4:	e1a00000 	nop			; (mov r0, r0)
   42ad8:	e24bd004 	sub	sp, fp, #4
   42adc:	e8bd8800 	pop	{fp, pc}
   42ae0:	4d6e6b28 	.word	0x4d6e6b28
   42ae4:	49742400 	.word	0x49742400
   42ae8:	41100000 	.word	0x41100000
   42aec:	0005c180 	.word	0x0005c180
   42af0:	0005f3e8 	.word	0x0005f3e8

00042af4 <bcm2835_i2c_set_baudrate>:
   42af4:	e92d4800 	push	{fp, lr}
   42af8:	e28db004 	add	fp, sp, #4
   42afc:	e24dd010 	sub	sp, sp, #16
   42b00:	e50b0010 	str	r0, [fp, #-16]
   42b04:	e51b1010 	ldr	r1, [fp, #-16]
   42b08:	e59f0030 	ldr	r0, [pc, #48]	; 42b40 <bcm2835_i2c_set_baudrate+0x4c>
   42b0c:	ebff3a30 	bl	113d4 <__aeabi_uidiv@plt>
   42b10:	e1a03000 	mov	r3, r0
   42b14:	e1a02003 	mov	r2, r3
   42b18:	e59f3024 	ldr	r3, [pc, #36]	; 42b44 <bcm2835_i2c_set_baudrate+0x50>
   42b1c:	e0033002 	and	r3, r3, r2
   42b20:	e50b3008 	str	r3, [fp, #-8]
   42b24:	e51b3008 	ldr	r3, [fp, #-8]
   42b28:	e6ff3073 	uxth	r3, r3
   42b2c:	e1a00003 	mov	r0, r3
   42b30:	ebffffcd 	bl	42a6c <bcm2835_i2c_setClockDivider>
   42b34:	e1a00000 	nop			; (mov r0, r0)
   42b38:	e24bd004 	sub	sp, fp, #4
   42b3c:	e8bd8800 	pop	{fp, pc}
   42b40:	0ee6b280 	.word	0x0ee6b280
   42b44:	0000fffe 	.word	0x0000fffe

00042b48 <bcm2835_i2c_write>:
   42b48:	e92d4800 	push	{fp, lr}
   42b4c:	e28db004 	add	fp, sp, #4
   42b50:	e24dd028 	sub	sp, sp, #40	; 0x28
   42b54:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   42b58:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
   42b5c:	e59f31c0 	ldr	r3, [pc, #448]	; 42d24 <bcm2835_i2c_write+0x1dc>
   42b60:	e5933000 	ldr	r3, [r3]
   42b64:	e2833008 	add	r3, r3, #8
   42b68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   42b6c:	e59f31b0 	ldr	r3, [pc, #432]	; 42d24 <bcm2835_i2c_write+0x1dc>
   42b70:	e5933000 	ldr	r3, [r3]
   42b74:	e2833010 	add	r3, r3, #16
   42b78:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   42b7c:	e59f31a0 	ldr	r3, [pc, #416]	; 42d24 <bcm2835_i2c_write+0x1dc>
   42b80:	e5933000 	ldr	r3, [r3]
   42b84:	e2833004 	add	r3, r3, #4
   42b88:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   42b8c:	e59f3190 	ldr	r3, [pc, #400]	; 42d24 <bcm2835_i2c_write+0x1dc>
   42b90:	e5933000 	ldr	r3, [r3]
   42b94:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   42b98:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   42b9c:	e50b3008 	str	r3, [fp, #-8]
   42ba0:	e3a03000 	mov	r3, #0
   42ba4:	e50b300c 	str	r3, [fp, #-12]
   42ba8:	e3a03000 	mov	r3, #0
   42bac:	e54b300d 	strb	r3, [fp, #-13]
   42bb0:	e3a02020 	mov	r2, #32
   42bb4:	e3a01020 	mov	r1, #32
   42bb8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   42bbc:	ebfff7ab 	bl	40a70 <bcm2835_peri_set_bits>
   42bc0:	e59f1160 	ldr	r1, [pc, #352]	; 42d28 <bcm2835_i2c_write+0x1e0>
   42bc4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   42bc8:	ebfff77a 	bl	409b8 <bcm2835_peri_write>
   42bcc:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
   42bd0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   42bd4:	ebfff777 	bl	409b8 <bcm2835_peri_write>
   42bd8:	ea00000c 	b	42c10 <bcm2835_i2c_write+0xc8>
   42bdc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   42be0:	e51b300c 	ldr	r3, [fp, #-12]
   42be4:	e0823003 	add	r3, r2, r3
   42be8:	e5d33000 	ldrb	r3, [r3]
   42bec:	e1a01003 	mov	r1, r3
   42bf0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   42bf4:	ebfff787 	bl	40a18 <bcm2835_peri_write_nb>
   42bf8:	e51b300c 	ldr	r3, [fp, #-12]
   42bfc:	e2833001 	add	r3, r3, #1
   42c00:	e50b300c 	str	r3, [fp, #-12]
   42c04:	e51b3008 	ldr	r3, [fp, #-8]
   42c08:	e2433001 	sub	r3, r3, #1
   42c0c:	e50b3008 	str	r3, [fp, #-8]
   42c10:	e51b3008 	ldr	r3, [fp, #-8]
   42c14:	e3530000 	cmp	r3, #0
   42c18:	0a000002 	beq	42c28 <bcm2835_i2c_write+0xe0>
   42c1c:	e51b300c 	ldr	r3, [fp, #-12]
   42c20:	e353000f 	cmp	r3, #15
   42c24:	9affffec 	bls	42bdc <bcm2835_i2c_write+0x94>
   42c28:	e59f10fc 	ldr	r1, [pc, #252]	; 42d2c <bcm2835_i2c_write+0x1e4>
   42c2c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   42c30:	ebfff760 	bl	409b8 <bcm2835_peri_write>
   42c34:	ea000015 	b	42c90 <bcm2835_i2c_write+0x148>
   42c38:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   42c3c:	e51b300c 	ldr	r3, [fp, #-12]
   42c40:	e0823003 	add	r3, r2, r3
   42c44:	e5d33000 	ldrb	r3, [r3]
   42c48:	e1a01003 	mov	r1, r3
   42c4c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   42c50:	ebfff758 	bl	409b8 <bcm2835_peri_write>
   42c54:	e51b300c 	ldr	r3, [fp, #-12]
   42c58:	e2833001 	add	r3, r3, #1
   42c5c:	e50b300c 	str	r3, [fp, #-12]
   42c60:	e51b3008 	ldr	r3, [fp, #-8]
   42c64:	e2433001 	sub	r3, r3, #1
   42c68:	e50b3008 	str	r3, [fp, #-8]
   42c6c:	e51b3008 	ldr	r3, [fp, #-8]
   42c70:	e3530000 	cmp	r3, #0
   42c74:	0a000005 	beq	42c90 <bcm2835_i2c_write+0x148>
   42c78:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   42c7c:	ebfff721 	bl	40908 <bcm2835_peri_read>
   42c80:	e1a03000 	mov	r3, r0
   42c84:	e2033010 	and	r3, r3, #16
   42c88:	e3530000 	cmp	r3, #0
   42c8c:	1affffe9 	bne	42c38 <bcm2835_i2c_write+0xf0>
   42c90:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   42c94:	ebfff71b 	bl	40908 <bcm2835_peri_read>
   42c98:	e1a03000 	mov	r3, r0
   42c9c:	e2033002 	and	r3, r3, #2
   42ca0:	e3530000 	cmp	r3, #0
   42ca4:	0afffff0 	beq	42c6c <bcm2835_i2c_write+0x124>
   42ca8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   42cac:	ebfff715 	bl	40908 <bcm2835_peri_read>
   42cb0:	e1a03000 	mov	r3, r0
   42cb4:	e2033c01 	and	r3, r3, #256	; 0x100
   42cb8:	e3530000 	cmp	r3, #0
   42cbc:	0a000002 	beq	42ccc <bcm2835_i2c_write+0x184>
   42cc0:	e3a03001 	mov	r3, #1
   42cc4:	e54b300d 	strb	r3, [fp, #-13]
   42cc8:	ea00000d 	b	42d04 <bcm2835_i2c_write+0x1bc>
   42ccc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   42cd0:	ebfff70c 	bl	40908 <bcm2835_peri_read>
   42cd4:	e1a03000 	mov	r3, r0
   42cd8:	e2033c02 	and	r3, r3, #512	; 0x200
   42cdc:	e3530000 	cmp	r3, #0
   42ce0:	0a000002 	beq	42cf0 <bcm2835_i2c_write+0x1a8>
   42ce4:	e3a03002 	mov	r3, #2
   42ce8:	e54b300d 	strb	r3, [fp, #-13]
   42cec:	ea000004 	b	42d04 <bcm2835_i2c_write+0x1bc>
   42cf0:	e51b3008 	ldr	r3, [fp, #-8]
   42cf4:	e3530000 	cmp	r3, #0
   42cf8:	0a000001 	beq	42d04 <bcm2835_i2c_write+0x1bc>
   42cfc:	e3a03004 	mov	r3, #4
   42d00:	e54b300d 	strb	r3, [fp, #-13]
   42d04:	e3a02002 	mov	r2, #2
   42d08:	e3a01002 	mov	r1, #2
   42d0c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   42d10:	ebfff756 	bl	40a70 <bcm2835_peri_set_bits>
   42d14:	e55b300d 	ldrb	r3, [fp, #-13]
   42d18:	e1a00003 	mov	r0, r3
   42d1c:	e24bd004 	sub	sp, fp, #4
   42d20:	e8bd8800 	pop	{fp, pc}
   42d24:	0005c180 	.word	0x0005c180
   42d28:	00000302 	.word	0x00000302
   42d2c:	00008080 	.word	0x00008080

00042d30 <bcm2835_i2c_read>:
   42d30:	e92d4800 	push	{fp, lr}
   42d34:	e28db004 	add	fp, sp, #4
   42d38:	e24dd028 	sub	sp, sp, #40	; 0x28
   42d3c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   42d40:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
   42d44:	e59f31c8 	ldr	r3, [pc, #456]	; 42f14 <bcm2835_i2c_read+0x1e4>
   42d48:	e5933000 	ldr	r3, [r3]
   42d4c:	e2833008 	add	r3, r3, #8
   42d50:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   42d54:	e59f31b8 	ldr	r3, [pc, #440]	; 42f14 <bcm2835_i2c_read+0x1e4>
   42d58:	e5933000 	ldr	r3, [r3]
   42d5c:	e2833010 	add	r3, r3, #16
   42d60:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   42d64:	e59f31a8 	ldr	r3, [pc, #424]	; 42f14 <bcm2835_i2c_read+0x1e4>
   42d68:	e5933000 	ldr	r3, [r3]
   42d6c:	e2833004 	add	r3, r3, #4
   42d70:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   42d74:	e59f3198 	ldr	r3, [pc, #408]	; 42f14 <bcm2835_i2c_read+0x1e4>
   42d78:	e5933000 	ldr	r3, [r3]
   42d7c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   42d80:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   42d84:	e50b3008 	str	r3, [fp, #-8]
   42d88:	e3a03000 	mov	r3, #0
   42d8c:	e50b300c 	str	r3, [fp, #-12]
   42d90:	e3a03000 	mov	r3, #0
   42d94:	e54b300d 	strb	r3, [fp, #-13]
   42d98:	e3a02020 	mov	r2, #32
   42d9c:	e3a01020 	mov	r1, #32
   42da0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   42da4:	ebfff731 	bl	40a70 <bcm2835_peri_set_bits>
   42da8:	e59f1168 	ldr	r1, [pc, #360]	; 42f18 <bcm2835_i2c_read+0x1e8>
   42dac:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   42db0:	ebfff718 	bl	40a18 <bcm2835_peri_write_nb>
   42db4:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
   42db8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   42dbc:	ebfff715 	bl	40a18 <bcm2835_peri_write_nb>
   42dc0:	e59f1154 	ldr	r1, [pc, #340]	; 42f1c <bcm2835_i2c_read+0x1ec>
   42dc4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   42dc8:	ebfff712 	bl	40a18 <bcm2835_peri_write_nb>
   42dcc:	ea000013 	b	42e20 <bcm2835_i2c_read+0xf0>
   42dd0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   42dd4:	ebfff6e3 	bl	40968 <bcm2835_peri_read_nb>
   42dd8:	e1a01000 	mov	r1, r0
   42ddc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   42de0:	e51b300c 	ldr	r3, [fp, #-12]
   42de4:	e0823003 	add	r3, r2, r3
   42de8:	e6ef2071 	uxtb	r2, r1
   42dec:	e5c32000 	strb	r2, [r3]
   42df0:	e51b300c 	ldr	r3, [fp, #-12]
   42df4:	e2833001 	add	r3, r3, #1
   42df8:	e50b300c 	str	r3, [fp, #-12]
   42dfc:	e51b3008 	ldr	r3, [fp, #-8]
   42e00:	e2433001 	sub	r3, r3, #1
   42e04:	e50b3008 	str	r3, [fp, #-8]
   42e08:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   42e0c:	ebfff6d5 	bl	40968 <bcm2835_peri_read_nb>
   42e10:	e1a03000 	mov	r3, r0
   42e14:	e2033020 	and	r3, r3, #32
   42e18:	e3530000 	cmp	r3, #0
   42e1c:	1affffeb 	bne	42dd0 <bcm2835_i2c_read+0xa0>
   42e20:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   42e24:	ebfff6cf 	bl	40968 <bcm2835_peri_read_nb>
   42e28:	e1a03000 	mov	r3, r0
   42e2c:	e2033002 	and	r3, r3, #2
   42e30:	e3530000 	cmp	r3, #0
   42e34:	0afffff3 	beq	42e08 <bcm2835_i2c_read+0xd8>
   42e38:	ea00000d 	b	42e74 <bcm2835_i2c_read+0x144>
   42e3c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   42e40:	ebfff6c8 	bl	40968 <bcm2835_peri_read_nb>
   42e44:	e1a01000 	mov	r1, r0
   42e48:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   42e4c:	e51b300c 	ldr	r3, [fp, #-12]
   42e50:	e0823003 	add	r3, r2, r3
   42e54:	e6ef2071 	uxtb	r2, r1
   42e58:	e5c32000 	strb	r2, [r3]
   42e5c:	e51b300c 	ldr	r3, [fp, #-12]
   42e60:	e2833001 	add	r3, r3, #1
   42e64:	e50b300c 	str	r3, [fp, #-12]
   42e68:	e51b3008 	ldr	r3, [fp, #-8]
   42e6c:	e2433001 	sub	r3, r3, #1
   42e70:	e50b3008 	str	r3, [fp, #-8]
   42e74:	e51b3008 	ldr	r3, [fp, #-8]
   42e78:	e3530000 	cmp	r3, #0
   42e7c:	0a000005 	beq	42e98 <bcm2835_i2c_read+0x168>
   42e80:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   42e84:	ebfff6b7 	bl	40968 <bcm2835_peri_read_nb>
   42e88:	e1a03000 	mov	r3, r0
   42e8c:	e2033020 	and	r3, r3, #32
   42e90:	e3530000 	cmp	r3, #0
   42e94:	1affffe8 	bne	42e3c <bcm2835_i2c_read+0x10c>
   42e98:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   42e9c:	ebfff699 	bl	40908 <bcm2835_peri_read>
   42ea0:	e1a03000 	mov	r3, r0
   42ea4:	e2033c01 	and	r3, r3, #256	; 0x100
   42ea8:	e3530000 	cmp	r3, #0
   42eac:	0a000002 	beq	42ebc <bcm2835_i2c_read+0x18c>
   42eb0:	e3a03001 	mov	r3, #1
   42eb4:	e54b300d 	strb	r3, [fp, #-13]
   42eb8:	ea00000d 	b	42ef4 <bcm2835_i2c_read+0x1c4>
   42ebc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   42ec0:	ebfff690 	bl	40908 <bcm2835_peri_read>
   42ec4:	e1a03000 	mov	r3, r0
   42ec8:	e2033c02 	and	r3, r3, #512	; 0x200
   42ecc:	e3530000 	cmp	r3, #0
   42ed0:	0a000002 	beq	42ee0 <bcm2835_i2c_read+0x1b0>
   42ed4:	e3a03002 	mov	r3, #2
   42ed8:	e54b300d 	strb	r3, [fp, #-13]
   42edc:	ea000004 	b	42ef4 <bcm2835_i2c_read+0x1c4>
   42ee0:	e51b3008 	ldr	r3, [fp, #-8]
   42ee4:	e3530000 	cmp	r3, #0
   42ee8:	0a000001 	beq	42ef4 <bcm2835_i2c_read+0x1c4>
   42eec:	e3a03004 	mov	r3, #4
   42ef0:	e54b300d 	strb	r3, [fp, #-13]
   42ef4:	e3a02002 	mov	r2, #2
   42ef8:	e3a01002 	mov	r1, #2
   42efc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   42f00:	ebfff6da 	bl	40a70 <bcm2835_peri_set_bits>
   42f04:	e55b300d 	ldrb	r3, [fp, #-13]
   42f08:	e1a00003 	mov	r0, r3
   42f0c:	e24bd004 	sub	sp, fp, #4
   42f10:	e8bd8800 	pop	{fp, pc}
   42f14:	0005c180 	.word	0x0005c180
   42f18:	00000302 	.word	0x00000302
   42f1c:	00008081 	.word	0x00008081

00042f20 <bcm2835_i2c_read_register_rs>:
   42f20:	e92d4800 	push	{fp, lr}
   42f24:	e28db004 	add	fp, sp, #4
   42f28:	e24dd030 	sub	sp, sp, #48	; 0x30
   42f2c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   42f30:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
   42f34:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
   42f38:	e59f3270 	ldr	r3, [pc, #624]	; 431b0 <bcm2835_i2c_read_register_rs+0x290>
   42f3c:	e5933000 	ldr	r3, [r3]
   42f40:	e2833008 	add	r3, r3, #8
   42f44:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   42f48:	e59f3260 	ldr	r3, [pc, #608]	; 431b0 <bcm2835_i2c_read_register_rs+0x290>
   42f4c:	e5933000 	ldr	r3, [r3]
   42f50:	e2833010 	add	r3, r3, #16
   42f54:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   42f58:	e59f3250 	ldr	r3, [pc, #592]	; 431b0 <bcm2835_i2c_read_register_rs+0x290>
   42f5c:	e5933000 	ldr	r3, [r3]
   42f60:	e2833004 	add	r3, r3, #4
   42f64:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   42f68:	e59f3240 	ldr	r3, [pc, #576]	; 431b0 <bcm2835_i2c_read_register_rs+0x290>
   42f6c:	e5933000 	ldr	r3, [r3]
   42f70:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   42f74:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   42f78:	e50b3008 	str	r3, [fp, #-8]
   42f7c:	e3a03000 	mov	r3, #0
   42f80:	e50b300c 	str	r3, [fp, #-12]
   42f84:	e3a03000 	mov	r3, #0
   42f88:	e54b300d 	strb	r3, [fp, #-13]
   42f8c:	e3a02020 	mov	r2, #32
   42f90:	e3a01020 	mov	r1, #32
   42f94:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   42f98:	ebfff6b4 	bl	40a70 <bcm2835_peri_set_bits>
   42f9c:	e59f1210 	ldr	r1, [pc, #528]	; 431b4 <bcm2835_i2c_read_register_rs+0x294>
   42fa0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   42fa4:	ebfff683 	bl	409b8 <bcm2835_peri_write>
   42fa8:	e3a01001 	mov	r1, #1
   42fac:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   42fb0:	ebfff680 	bl	409b8 <bcm2835_peri_write>
   42fb4:	e3a01902 	mov	r1, #32768	; 0x8000
   42fb8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   42fbc:	ebfff67d 	bl	409b8 <bcm2835_peri_write>
   42fc0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   42fc4:	e5d33000 	ldrb	r3, [r3]
   42fc8:	e1a01003 	mov	r1, r3
   42fcc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   42fd0:	ebfff678 	bl	409b8 <bcm2835_peri_write>
   42fd4:	e59f11dc 	ldr	r1, [pc, #476]	; 431b8 <bcm2835_i2c_read_register_rs+0x298>
   42fd8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   42fdc:	ebfff675 	bl	409b8 <bcm2835_peri_write>
   42fe0:	ea000005 	b	42ffc <bcm2835_i2c_read_register_rs+0xdc>
   42fe4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   42fe8:	ebfff646 	bl	40908 <bcm2835_peri_read>
   42fec:	e1a03000 	mov	r3, r0
   42ff0:	e2033002 	and	r3, r3, #2
   42ff4:	e3530000 	cmp	r3, #0
   42ff8:	1a000006 	bne	43018 <bcm2835_i2c_read_register_rs+0xf8>
   42ffc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   43000:	ebfff640 	bl	40908 <bcm2835_peri_read>
   43004:	e1a03000 	mov	r3, r0
   43008:	e2033001 	and	r3, r3, #1
   4300c:	e3530000 	cmp	r3, #0
   43010:	0afffff3 	beq	42fe4 <bcm2835_i2c_read_register_rs+0xc4>
   43014:	ea000000 	b	4301c <bcm2835_i2c_read_register_rs+0xfc>
   43018:	e1a00000 	nop			; (mov r0, r0)
   4301c:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   43020:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   43024:	ebfff663 	bl	409b8 <bcm2835_peri_write>
   43028:	e59f118c 	ldr	r1, [pc, #396]	; 431bc <bcm2835_i2c_read_register_rs+0x29c>
   4302c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   43030:	ebfff660 	bl	409b8 <bcm2835_peri_write>
   43034:	e59f3184 	ldr	r3, [pc, #388]	; 431c0 <bcm2835_i2c_read_register_rs+0x2a0>
   43038:	e5932000 	ldr	r2, [r3]
   4303c:	e1a03002 	mov	r3, r2
   43040:	e1a03083 	lsl	r3, r3, #1
   43044:	e0833002 	add	r3, r3, r2
   43048:	e1a02003 	mov	r2, r3
   4304c:	e1a03fc2 	asr	r3, r2, #31
   43050:	e1a00002 	mov	r0, r2
   43054:	e1a01003 	mov	r1, r3
   43058:	ebfff98c 	bl	41690 <bcm2835_delayMicroseconds>
   4305c:	ea000016 	b	430bc <bcm2835_i2c_read_register_rs+0x19c>
   43060:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   43064:	ebfff627 	bl	40908 <bcm2835_peri_read>
   43068:	e1a01000 	mov	r1, r0
   4306c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   43070:	e51b300c 	ldr	r3, [fp, #-12]
   43074:	e0823003 	add	r3, r2, r3
   43078:	e6ef2071 	uxtb	r2, r1
   4307c:	e5c32000 	strb	r2, [r3]
   43080:	e51b300c 	ldr	r3, [fp, #-12]
   43084:	e2833001 	add	r3, r3, #1
   43088:	e50b300c 	str	r3, [fp, #-12]
   4308c:	e51b3008 	ldr	r3, [fp, #-8]
   43090:	e2433001 	sub	r3, r3, #1
   43094:	e50b3008 	str	r3, [fp, #-8]
   43098:	e51b3008 	ldr	r3, [fp, #-8]
   4309c:	e3530000 	cmp	r3, #0
   430a0:	0a000005 	beq	430bc <bcm2835_i2c_read_register_rs+0x19c>
   430a4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   430a8:	ebfff616 	bl	40908 <bcm2835_peri_read>
   430ac:	e1a03000 	mov	r3, r0
   430b0:	e2033020 	and	r3, r3, #32
   430b4:	e3530000 	cmp	r3, #0
   430b8:	1affffe8 	bne	43060 <bcm2835_i2c_read_register_rs+0x140>
   430bc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   430c0:	ebfff610 	bl	40908 <bcm2835_peri_read>
   430c4:	e1a03000 	mov	r3, r0
   430c8:	e2033002 	and	r3, r3, #2
   430cc:	e3530000 	cmp	r3, #0
   430d0:	0afffff0 	beq	43098 <bcm2835_i2c_read_register_rs+0x178>
   430d4:	ea00000d 	b	43110 <bcm2835_i2c_read_register_rs+0x1f0>
   430d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   430dc:	ebfff609 	bl	40908 <bcm2835_peri_read>
   430e0:	e1a01000 	mov	r1, r0
   430e4:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   430e8:	e51b300c 	ldr	r3, [fp, #-12]
   430ec:	e0823003 	add	r3, r2, r3
   430f0:	e6ef2071 	uxtb	r2, r1
   430f4:	e5c32000 	strb	r2, [r3]
   430f8:	e51b300c 	ldr	r3, [fp, #-12]
   430fc:	e2833001 	add	r3, r3, #1
   43100:	e50b300c 	str	r3, [fp, #-12]
   43104:	e51b3008 	ldr	r3, [fp, #-8]
   43108:	e2433001 	sub	r3, r3, #1
   4310c:	e50b3008 	str	r3, [fp, #-8]
   43110:	e51b3008 	ldr	r3, [fp, #-8]
   43114:	e3530000 	cmp	r3, #0
   43118:	0a000005 	beq	43134 <bcm2835_i2c_read_register_rs+0x214>
   4311c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   43120:	ebfff5f8 	bl	40908 <bcm2835_peri_read>
   43124:	e1a03000 	mov	r3, r0
   43128:	e2033020 	and	r3, r3, #32
   4312c:	e3530000 	cmp	r3, #0
   43130:	1affffe8 	bne	430d8 <bcm2835_i2c_read_register_rs+0x1b8>
   43134:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   43138:	ebfff5f2 	bl	40908 <bcm2835_peri_read>
   4313c:	e1a03000 	mov	r3, r0
   43140:	e2033c01 	and	r3, r3, #256	; 0x100
   43144:	e3530000 	cmp	r3, #0
   43148:	0a000002 	beq	43158 <bcm2835_i2c_read_register_rs+0x238>
   4314c:	e3a03001 	mov	r3, #1
   43150:	e54b300d 	strb	r3, [fp, #-13]
   43154:	ea00000d 	b	43190 <bcm2835_i2c_read_register_rs+0x270>
   43158:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   4315c:	ebfff5e9 	bl	40908 <bcm2835_peri_read>
   43160:	e1a03000 	mov	r3, r0
   43164:	e2033c02 	and	r3, r3, #512	; 0x200
   43168:	e3530000 	cmp	r3, #0
   4316c:	0a000002 	beq	4317c <bcm2835_i2c_read_register_rs+0x25c>
   43170:	e3a03002 	mov	r3, #2
   43174:	e54b300d 	strb	r3, [fp, #-13]
   43178:	ea000004 	b	43190 <bcm2835_i2c_read_register_rs+0x270>
   4317c:	e51b3008 	ldr	r3, [fp, #-8]
   43180:	e3530000 	cmp	r3, #0
   43184:	0a000001 	beq	43190 <bcm2835_i2c_read_register_rs+0x270>
   43188:	e3a03004 	mov	r3, #4
   4318c:	e54b300d 	strb	r3, [fp, #-13]
   43190:	e3a02002 	mov	r2, #2
   43194:	e3a01002 	mov	r1, #2
   43198:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   4319c:	ebfff633 	bl	40a70 <bcm2835_peri_set_bits>
   431a0:	e55b300d 	ldrb	r3, [fp, #-13]
   431a4:	e1a00003 	mov	r0, r3
   431a8:	e24bd004 	sub	sp, fp, #4
   431ac:	e8bd8800 	pop	{fp, pc}
   431b0:	0005c180 	.word	0x0005c180
   431b4:	00000302 	.word	0x00000302
   431b8:	00008080 	.word	0x00008080
   431bc:	00008081 	.word	0x00008081
   431c0:	0005f3e8 	.word	0x0005f3e8

000431c4 <bcm2835_i2c_write_read_rs>:
   431c4:	e92d4800 	push	{fp, lr}
   431c8:	e28db004 	add	fp, sp, #4
   431cc:	e24dd030 	sub	sp, sp, #48	; 0x30
   431d0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   431d4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
   431d8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
   431dc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   431e0:	e59f32b0 	ldr	r3, [pc, #688]	; 43498 <bcm2835_i2c_write_read_rs+0x2d4>
   431e4:	e5933000 	ldr	r3, [r3]
   431e8:	e2833008 	add	r3, r3, #8
   431ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   431f0:	e59f32a0 	ldr	r3, [pc, #672]	; 43498 <bcm2835_i2c_write_read_rs+0x2d4>
   431f4:	e5933000 	ldr	r3, [r3]
   431f8:	e2833010 	add	r3, r3, #16
   431fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   43200:	e59f3290 	ldr	r3, [pc, #656]	; 43498 <bcm2835_i2c_write_read_rs+0x2d4>
   43204:	e5933000 	ldr	r3, [r3]
   43208:	e2833004 	add	r3, r3, #4
   4320c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   43210:	e59f3280 	ldr	r3, [pc, #640]	; 43498 <bcm2835_i2c_write_read_rs+0x2d4>
   43214:	e5933000 	ldr	r3, [r3]
   43218:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   4321c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   43220:	e50b3008 	str	r3, [fp, #-8]
   43224:	e3a03000 	mov	r3, #0
   43228:	e50b300c 	str	r3, [fp, #-12]
   4322c:	e3a03000 	mov	r3, #0
   43230:	e54b300d 	strb	r3, [fp, #-13]
   43234:	e3a02020 	mov	r2, #32
   43238:	e3a01020 	mov	r1, #32
   4323c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   43240:	ebfff60a 	bl	40a70 <bcm2835_peri_set_bits>
   43244:	e59f1250 	ldr	r1, [pc, #592]	; 4349c <bcm2835_i2c_write_read_rs+0x2d8>
   43248:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   4324c:	ebfff5d9 	bl	409b8 <bcm2835_peri_write>
   43250:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
   43254:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   43258:	ebfff5d6 	bl	409b8 <bcm2835_peri_write>
   4325c:	ea00000c 	b	43294 <bcm2835_i2c_write_read_rs+0xd0>
   43260:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   43264:	e51b300c 	ldr	r3, [fp, #-12]
   43268:	e0823003 	add	r3, r2, r3
   4326c:	e5d33000 	ldrb	r3, [r3]
   43270:	e1a01003 	mov	r1, r3
   43274:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   43278:	ebfff5e6 	bl	40a18 <bcm2835_peri_write_nb>
   4327c:	e51b300c 	ldr	r3, [fp, #-12]
   43280:	e2833001 	add	r3, r3, #1
   43284:	e50b300c 	str	r3, [fp, #-12]
   43288:	e51b3008 	ldr	r3, [fp, #-8]
   4328c:	e2433001 	sub	r3, r3, #1
   43290:	e50b3008 	str	r3, [fp, #-8]
   43294:	e51b3008 	ldr	r3, [fp, #-8]
   43298:	e3530000 	cmp	r3, #0
   4329c:	0a000002 	beq	432ac <bcm2835_i2c_write_read_rs+0xe8>
   432a0:	e51b300c 	ldr	r3, [fp, #-12]
   432a4:	e353000f 	cmp	r3, #15
   432a8:	9affffec 	bls	43260 <bcm2835_i2c_write_read_rs+0x9c>
   432ac:	e59f11ec 	ldr	r1, [pc, #492]	; 434a0 <bcm2835_i2c_write_read_rs+0x2dc>
   432b0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   432b4:	ebfff5bf 	bl	409b8 <bcm2835_peri_write>
   432b8:	ea000005 	b	432d4 <bcm2835_i2c_write_read_rs+0x110>
   432bc:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   432c0:	ebfff5a8 	bl	40968 <bcm2835_peri_read_nb>
   432c4:	e1a03000 	mov	r3, r0
   432c8:	e2033002 	and	r3, r3, #2
   432cc:	e3530000 	cmp	r3, #0
   432d0:	1a000006 	bne	432f0 <bcm2835_i2c_write_read_rs+0x12c>
   432d4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   432d8:	ebfff58a 	bl	40908 <bcm2835_peri_read>
   432dc:	e1a03000 	mov	r3, r0
   432e0:	e2033001 	and	r3, r3, #1
   432e4:	e3530000 	cmp	r3, #0
   432e8:	0afffff3 	beq	432bc <bcm2835_i2c_write_read_rs+0xf8>
   432ec:	ea000000 	b	432f4 <bcm2835_i2c_write_read_rs+0x130>
   432f0:	e1a00000 	nop			; (mov r0, r0)
   432f4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   432f8:	e50b3008 	str	r3, [fp, #-8]
   432fc:	e3a03000 	mov	r3, #0
   43300:	e50b300c 	str	r3, [fp, #-12]
   43304:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
   43308:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   4330c:	ebfff5a9 	bl	409b8 <bcm2835_peri_write>
   43310:	e59f118c 	ldr	r1, [pc, #396]	; 434a4 <bcm2835_i2c_write_read_rs+0x2e0>
   43314:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   43318:	ebfff5a6 	bl	409b8 <bcm2835_peri_write>
   4331c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   43320:	e2833001 	add	r3, r3, #1
   43324:	e59f217c 	ldr	r2, [pc, #380]	; 434a8 <bcm2835_i2c_write_read_rs+0x2e4>
   43328:	e5922000 	ldr	r2, [r2]
   4332c:	e0030392 	mul	r3, r2, r3
   43330:	e1a02003 	mov	r2, r3
   43334:	e3a03000 	mov	r3, #0
   43338:	e1a00002 	mov	r0, r2
   4333c:	e1a01003 	mov	r1, r3
   43340:	ebfff8d2 	bl	41690 <bcm2835_delayMicroseconds>
   43344:	ea000016 	b	433a4 <bcm2835_i2c_write_read_rs+0x1e0>
   43348:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   4334c:	ebfff585 	bl	40968 <bcm2835_peri_read_nb>
   43350:	e1a01000 	mov	r1, r0
   43354:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   43358:	e51b300c 	ldr	r3, [fp, #-12]
   4335c:	e0823003 	add	r3, r2, r3
   43360:	e6ef2071 	uxtb	r2, r1
   43364:	e5c32000 	strb	r2, [r3]
   43368:	e51b300c 	ldr	r3, [fp, #-12]
   4336c:	e2833001 	add	r3, r3, #1
   43370:	e50b300c 	str	r3, [fp, #-12]
   43374:	e51b3008 	ldr	r3, [fp, #-8]
   43378:	e2433001 	sub	r3, r3, #1
   4337c:	e50b3008 	str	r3, [fp, #-8]
   43380:	e51b3008 	ldr	r3, [fp, #-8]
   43384:	e3530000 	cmp	r3, #0
   43388:	0a000005 	beq	433a4 <bcm2835_i2c_write_read_rs+0x1e0>
   4338c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   43390:	ebfff55c 	bl	40908 <bcm2835_peri_read>
   43394:	e1a03000 	mov	r3, r0
   43398:	e2033020 	and	r3, r3, #32
   4339c:	e3530000 	cmp	r3, #0
   433a0:	1affffe8 	bne	43348 <bcm2835_i2c_write_read_rs+0x184>
   433a4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   433a8:	ebfff56e 	bl	40968 <bcm2835_peri_read_nb>
   433ac:	e1a03000 	mov	r3, r0
   433b0:	e2033002 	and	r3, r3, #2
   433b4:	e3530000 	cmp	r3, #0
   433b8:	0afffff0 	beq	43380 <bcm2835_i2c_write_read_rs+0x1bc>
   433bc:	ea00000d 	b	433f8 <bcm2835_i2c_write_read_rs+0x234>
   433c0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   433c4:	ebfff54f 	bl	40908 <bcm2835_peri_read>
   433c8:	e1a01000 	mov	r1, r0
   433cc:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   433d0:	e51b300c 	ldr	r3, [fp, #-12]
   433d4:	e0823003 	add	r3, r2, r3
   433d8:	e6ef2071 	uxtb	r2, r1
   433dc:	e5c32000 	strb	r2, [r3]
   433e0:	e51b300c 	ldr	r3, [fp, #-12]
   433e4:	e2833001 	add	r3, r3, #1
   433e8:	e50b300c 	str	r3, [fp, #-12]
   433ec:	e51b3008 	ldr	r3, [fp, #-8]
   433f0:	e2433001 	sub	r3, r3, #1
   433f4:	e50b3008 	str	r3, [fp, #-8]
   433f8:	e51b3008 	ldr	r3, [fp, #-8]
   433fc:	e3530000 	cmp	r3, #0
   43400:	0a000005 	beq	4341c <bcm2835_i2c_write_read_rs+0x258>
   43404:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   43408:	ebfff53e 	bl	40908 <bcm2835_peri_read>
   4340c:	e1a03000 	mov	r3, r0
   43410:	e2033020 	and	r3, r3, #32
   43414:	e3530000 	cmp	r3, #0
   43418:	1affffe8 	bne	433c0 <bcm2835_i2c_write_read_rs+0x1fc>
   4341c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   43420:	ebfff538 	bl	40908 <bcm2835_peri_read>
   43424:	e1a03000 	mov	r3, r0
   43428:	e2033c01 	and	r3, r3, #256	; 0x100
   4342c:	e3530000 	cmp	r3, #0
   43430:	0a000002 	beq	43440 <bcm2835_i2c_write_read_rs+0x27c>
   43434:	e3a03001 	mov	r3, #1
   43438:	e54b300d 	strb	r3, [fp, #-13]
   4343c:	ea00000d 	b	43478 <bcm2835_i2c_write_read_rs+0x2b4>
   43440:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   43444:	ebfff52f 	bl	40908 <bcm2835_peri_read>
   43448:	e1a03000 	mov	r3, r0
   4344c:	e2033c02 	and	r3, r3, #512	; 0x200
   43450:	e3530000 	cmp	r3, #0
   43454:	0a000002 	beq	43464 <bcm2835_i2c_write_read_rs+0x2a0>
   43458:	e3a03002 	mov	r3, #2
   4345c:	e54b300d 	strb	r3, [fp, #-13]
   43460:	ea000004 	b	43478 <bcm2835_i2c_write_read_rs+0x2b4>
   43464:	e51b3008 	ldr	r3, [fp, #-8]
   43468:	e3530000 	cmp	r3, #0
   4346c:	0a000001 	beq	43478 <bcm2835_i2c_write_read_rs+0x2b4>
   43470:	e3a03004 	mov	r3, #4
   43474:	e54b300d 	strb	r3, [fp, #-13]
   43478:	e3a02002 	mov	r2, #2
   4347c:	e3a01002 	mov	r1, #2
   43480:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   43484:	ebfff579 	bl	40a70 <bcm2835_peri_set_bits>
   43488:	e55b300d 	ldrb	r3, [fp, #-13]
   4348c:	e1a00003 	mov	r0, r3
   43490:	e24bd004 	sub	sp, fp, #4
   43494:	e8bd8800 	pop	{fp, pc}
   43498:	0005c180 	.word	0x0005c180
   4349c:	00000302 	.word	0x00000302
   434a0:	00008080 	.word	0x00008080
   434a4:	00008081 	.word	0x00008081
   434a8:	0005f3e8 	.word	0x0005f3e8

000434ac <bcm2835_st_read>:
   434ac:	e92d48f0 	push	{r4, r5, r6, r7, fp, lr}
   434b0:	e28db014 	add	fp, sp, #20
   434b4:	e24dd018 	sub	sp, sp, #24
   434b8:	e59f3128 	ldr	r3, [pc, #296]	; 435e8 <bcm2835_st_read+0x13c>
   434bc:	e5933000 	ldr	r3, [r3]
   434c0:	e3730001 	cmn	r3, #1
   434c4:	1a000002 	bne	434d4 <bcm2835_st_read+0x28>
   434c8:	e3a02000 	mov	r2, #0
   434cc:	e3a03000 	mov	r3, #0
   434d0:	ea000040 	b	435d8 <bcm2835_st_read+0x12c>
   434d4:	e59f310c 	ldr	r3, [pc, #268]	; 435e8 <bcm2835_st_read+0x13c>
   434d8:	e5933000 	ldr	r3, [r3]
   434dc:	e2833008 	add	r3, r3, #8
   434e0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   434e4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   434e8:	ebfff506 	bl	40908 <bcm2835_peri_read>
   434ec:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
   434f0:	e59f30f0 	ldr	r3, [pc, #240]	; 435e8 <bcm2835_st_read+0x13c>
   434f4:	e5933000 	ldr	r3, [r3]
   434f8:	e2833004 	add	r3, r3, #4
   434fc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   43500:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   43504:	ebfff4ff 	bl	40908 <bcm2835_peri_read>
   43508:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   4350c:	e59f30d4 	ldr	r3, [pc, #212]	; 435e8 <bcm2835_st_read+0x13c>
   43510:	e5933000 	ldr	r3, [r3]
   43514:	e2833008 	add	r3, r3, #8
   43518:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   4351c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   43520:	ebfff4f8 	bl	40908 <bcm2835_peri_read>
   43524:	e1a03000 	mov	r3, r0
   43528:	e1a02003 	mov	r2, r3
   4352c:	e3a03000 	mov	r3, #0
   43530:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
   43534:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   43538:	e1a02003 	mov	r2, r3
   4353c:	e3a03000 	mov	r3, #0
   43540:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
   43544:	e1510003 	cmp	r1, r3
   43548:	01500002 	cmpeq	r0, r2
   4354c:	1a00000d 	bne	43588 <bcm2835_st_read+0xdc>
   43550:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
   43554:	e3a02000 	mov	r2, #0
   43558:	e3a03000 	mov	r3, #0
   4355c:	e1a03000 	mov	r3, r0
   43560:	e3a02000 	mov	r2, #0
   43564:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
   43568:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   4356c:	e1a02003 	mov	r2, r3
   43570:	e3a03000 	mov	r3, #0
   43574:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
   43578:	e0906002 	adds	r6, r0, r2
   4357c:	e0a17003 	adc	r7, r1, r3
   43580:	e14b61fc 	strd	r6, [fp, #-28]	; 0xffffffe4
   43584:	ea000012 	b	435d4 <bcm2835_st_read+0x128>
   43588:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
   4358c:	e3a02000 	mov	r2, #0
   43590:	e3a03000 	mov	r3, #0
   43594:	e1a03000 	mov	r3, r0
   43598:	e3a02000 	mov	r2, #0
   4359c:	e14b21fc 	strd	r2, [fp, #-28]	; 0xffffffe4
   435a0:	e59f3040 	ldr	r3, [pc, #64]	; 435e8 <bcm2835_st_read+0x13c>
   435a4:	e5933000 	ldr	r3, [r3]
   435a8:	e2833004 	add	r3, r3, #4
   435ac:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
   435b0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   435b4:	ebfff4d3 	bl	40908 <bcm2835_peri_read>
   435b8:	e1a03000 	mov	r3, r0
   435bc:	e1a02003 	mov	r2, r3
   435c0:	e3a03000 	mov	r3, #0
   435c4:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
   435c8:	e0904002 	adds	r4, r0, r2
   435cc:	e0a15003 	adc	r5, r1, r3
   435d0:	e14b41fc 	strd	r4, [fp, #-28]	; 0xffffffe4
   435d4:	e14b21dc 	ldrd	r2, [fp, #-28]	; 0xffffffe4
   435d8:	e1a00002 	mov	r0, r2
   435dc:	e1a01003 	mov	r1, r3
   435e0:	e24bd014 	sub	sp, fp, #20
   435e4:	e8bd88f0 	pop	{r4, r5, r6, r7, fp, pc}
   435e8:	0005c184 	.word	0x0005c184

000435ec <bcm2835_st_delay>:
   435ec:	e92d4830 	push	{r4, r5, fp, lr}
   435f0:	e28db00c 	add	fp, sp, #12
   435f4:	e24dd018 	sub	sp, sp, #24
   435f8:	e14b01fc 	strd	r0, [fp, #-28]	; 0xffffffe4
   435fc:	e14b22f4 	strd	r2, [fp, #-36]	; 0xffffffdc
   43600:	e14b01dc 	ldrd	r0, [fp, #-28]	; 0xffffffe4
   43604:	e14b22d4 	ldrd	r2, [fp, #-36]	; 0xffffffdc
   43608:	e0904002 	adds	r4, r0, r2
   4360c:	e0a15003 	adc	r5, r1, r3
   43610:	e14b41f4 	strd	r4, [fp, #-20]	; 0xffffffec
   43614:	e1a00000 	nop			; (mov r0, r0)
   43618:	ebffffa3 	bl	434ac <bcm2835_st_read>
   4361c:	e14b21d4 	ldrd	r2, [fp, #-20]	; 0xffffffec
   43620:	e1530001 	cmp	r3, r1
   43624:	01520000 	cmpeq	r2, r0
   43628:	8afffffa 	bhi	43618 <bcm2835_st_delay+0x2c>
   4362c:	e1a00000 	nop			; (mov r0, r0)
   43630:	e24bd00c 	sub	sp, fp, #12
   43634:	e8bd8830 	pop	{r4, r5, fp, pc}

00043638 <bcm2835_pwm_set_clock>:
   43638:	e92d4800 	push	{fp, lr}
   4363c:	e28db004 	add	fp, sp, #4
   43640:	e24dd008 	sub	sp, sp, #8
   43644:	e50b0008 	str	r0, [fp, #-8]
   43648:	e59f30c4 	ldr	r3, [pc, #196]	; 43714 <bcm2835_pwm_set_clock+0xdc>
   4364c:	e5933000 	ldr	r3, [r3]
   43650:	e3730001 	cmn	r3, #1
   43654:	0a00002b 	beq	43708 <bcm2835_pwm_set_clock+0xd0>
   43658:	e59f30b8 	ldr	r3, [pc, #184]	; 43718 <bcm2835_pwm_set_clock+0xe0>
   4365c:	e5933000 	ldr	r3, [r3]
   43660:	e3730001 	cmn	r3, #1
   43664:	0a000027 	beq	43708 <bcm2835_pwm_set_clock+0xd0>
   43668:	e51b3008 	ldr	r3, [fp, #-8]
   4366c:	e1a03a03 	lsl	r3, r3, #20
   43670:	e1a03a23 	lsr	r3, r3, #20
   43674:	e50b3008 	str	r3, [fp, #-8]
   43678:	e59f3094 	ldr	r3, [pc, #148]	; 43714 <bcm2835_pwm_set_clock+0xdc>
   4367c:	e5933000 	ldr	r3, [r3]
   43680:	e28330a0 	add	r3, r3, #160	; 0xa0
   43684:	e59f1090 	ldr	r1, [pc, #144]	; 4371c <bcm2835_pwm_set_clock+0xe4>
   43688:	e1a00003 	mov	r0, r3
   4368c:	ebfff4c9 	bl	409b8 <bcm2835_peri_write>
   43690:	e3a0006e 	mov	r0, #110	; 0x6e
   43694:	ebfff7d7 	bl	415f8 <bcm2835_delay>
   43698:	ea000001 	b	436a4 <bcm2835_pwm_set_clock+0x6c>
   4369c:	e3a00001 	mov	r0, #1
   436a0:	ebfff7d4 	bl	415f8 <bcm2835_delay>
   436a4:	e59f3068 	ldr	r3, [pc, #104]	; 43714 <bcm2835_pwm_set_clock+0xdc>
   436a8:	e5933000 	ldr	r3, [r3]
   436ac:	e28330a0 	add	r3, r3, #160	; 0xa0
   436b0:	e1a00003 	mov	r0, r3
   436b4:	ebfff493 	bl	40908 <bcm2835_peri_read>
   436b8:	e1a03000 	mov	r3, r0
   436bc:	e2033080 	and	r3, r3, #128	; 0x80
   436c0:	e3530000 	cmp	r3, #0
   436c4:	1afffff4 	bne	4369c <bcm2835_pwm_set_clock+0x64>
   436c8:	e59f3044 	ldr	r3, [pc, #68]	; 43714 <bcm2835_pwm_set_clock+0xdc>
   436cc:	e5933000 	ldr	r3, [r3]
   436d0:	e28320a4 	add	r2, r3, #164	; 0xa4
   436d4:	e51b3008 	ldr	r3, [fp, #-8]
   436d8:	e1a03603 	lsl	r3, r3, #12
   436dc:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   436e0:	e1a01003 	mov	r1, r3
   436e4:	e1a00002 	mov	r0, r2
   436e8:	ebfff4b2 	bl	409b8 <bcm2835_peri_write>
   436ec:	e59f3020 	ldr	r3, [pc, #32]	; 43714 <bcm2835_pwm_set_clock+0xdc>
   436f0:	e5933000 	ldr	r3, [r3]
   436f4:	e28330a0 	add	r3, r3, #160	; 0xa0
   436f8:	e59f1020 	ldr	r1, [pc, #32]	; 43720 <bcm2835_pwm_set_clock+0xe8>
   436fc:	e1a00003 	mov	r0, r3
   43700:	ebfff4ac 	bl	409b8 <bcm2835_peri_write>
   43704:	ea000000 	b	4370c <bcm2835_pwm_set_clock+0xd4>
   43708:	e1a00000 	nop			; (mov r0, r0)
   4370c:	e24bd004 	sub	sp, fp, #4
   43710:	e8bd8800 	pop	{fp, pc}
   43714:	0005c170 	.word	0x0005c170
   43718:	0005c16c 	.word	0x0005c16c
   4371c:	5a000001 	.word	0x5a000001
   43720:	5a000011 	.word	0x5a000011

00043724 <bcm2835_pwm_set_mode>:
   43724:	e92d4800 	push	{fp, lr}
   43728:	e28db004 	add	fp, sp, #4
   4372c:	e24dd010 	sub	sp, sp, #16
   43730:	e1a03000 	mov	r3, r0
   43734:	e54b300d 	strb	r3, [fp, #-13]
   43738:	e1a03001 	mov	r3, r1
   4373c:	e54b300e 	strb	r3, [fp, #-14]
   43740:	e1a03002 	mov	r3, r2
   43744:	e54b300f 	strb	r3, [fp, #-15]
   43748:	e59f310c 	ldr	r3, [pc, #268]	; 4385c <bcm2835_pwm_set_mode+0x138>
   4374c:	e5933000 	ldr	r3, [r3]
   43750:	e3730001 	cmn	r3, #1
   43754:	0a00003d 	beq	43850 <bcm2835_pwm_set_mode+0x12c>
   43758:	e59f3100 	ldr	r3, [pc, #256]	; 43860 <bcm2835_pwm_set_mode+0x13c>
   4375c:	e5933000 	ldr	r3, [r3]
   43760:	e3730001 	cmn	r3, #1
   43764:	0a000039 	beq	43850 <bcm2835_pwm_set_mode+0x12c>
   43768:	e59f30f0 	ldr	r3, [pc, #240]	; 43860 <bcm2835_pwm_set_mode+0x13c>
   4376c:	e5933000 	ldr	r3, [r3]
   43770:	e1a00003 	mov	r0, r3
   43774:	ebfff463 	bl	40908 <bcm2835_peri_read>
   43778:	e50b0008 	str	r0, [fp, #-8]
   4377c:	e55b300d 	ldrb	r3, [fp, #-13]
   43780:	e3530000 	cmp	r3, #0
   43784:	1a000014 	bne	437dc <bcm2835_pwm_set_mode+0xb8>
   43788:	e55b300e 	ldrb	r3, [fp, #-14]
   4378c:	e3530000 	cmp	r3, #0
   43790:	0a000003 	beq	437a4 <bcm2835_pwm_set_mode+0x80>
   43794:	e51b3008 	ldr	r3, [fp, #-8]
   43798:	e3833080 	orr	r3, r3, #128	; 0x80
   4379c:	e50b3008 	str	r3, [fp, #-8]
   437a0:	ea000002 	b	437b0 <bcm2835_pwm_set_mode+0x8c>
   437a4:	e51b3008 	ldr	r3, [fp, #-8]
   437a8:	e3c33080 	bic	r3, r3, #128	; 0x80
   437ac:	e50b3008 	str	r3, [fp, #-8]
   437b0:	e55b300f 	ldrb	r3, [fp, #-15]
   437b4:	e3530000 	cmp	r3, #0
   437b8:	0a000003 	beq	437cc <bcm2835_pwm_set_mode+0xa8>
   437bc:	e51b3008 	ldr	r3, [fp, #-8]
   437c0:	e3833001 	orr	r3, r3, #1
   437c4:	e50b3008 	str	r3, [fp, #-8]
   437c8:	ea00001a 	b	43838 <bcm2835_pwm_set_mode+0x114>
   437cc:	e51b3008 	ldr	r3, [fp, #-8]
   437d0:	e3c33001 	bic	r3, r3, #1
   437d4:	e50b3008 	str	r3, [fp, #-8]
   437d8:	ea000016 	b	43838 <bcm2835_pwm_set_mode+0x114>
   437dc:	e55b300d 	ldrb	r3, [fp, #-13]
   437e0:	e3530001 	cmp	r3, #1
   437e4:	1a000013 	bne	43838 <bcm2835_pwm_set_mode+0x114>
   437e8:	e55b300e 	ldrb	r3, [fp, #-14]
   437ec:	e3530000 	cmp	r3, #0
   437f0:	0a000003 	beq	43804 <bcm2835_pwm_set_mode+0xe0>
   437f4:	e51b3008 	ldr	r3, [fp, #-8]
   437f8:	e3833902 	orr	r3, r3, #32768	; 0x8000
   437fc:	e50b3008 	str	r3, [fp, #-8]
   43800:	ea000002 	b	43810 <bcm2835_pwm_set_mode+0xec>
   43804:	e51b3008 	ldr	r3, [fp, #-8]
   43808:	e3c33902 	bic	r3, r3, #32768	; 0x8000
   4380c:	e50b3008 	str	r3, [fp, #-8]
   43810:	e55b300f 	ldrb	r3, [fp, #-15]
   43814:	e3530000 	cmp	r3, #0
   43818:	0a000003 	beq	4382c <bcm2835_pwm_set_mode+0x108>
   4381c:	e51b3008 	ldr	r3, [fp, #-8]
   43820:	e3833c01 	orr	r3, r3, #256	; 0x100
   43824:	e50b3008 	str	r3, [fp, #-8]
   43828:	ea000002 	b	43838 <bcm2835_pwm_set_mode+0x114>
   4382c:	e51b3008 	ldr	r3, [fp, #-8]
   43830:	e3c33c01 	bic	r3, r3, #256	; 0x100
   43834:	e50b3008 	str	r3, [fp, #-8]
   43838:	e59f3020 	ldr	r3, [pc, #32]	; 43860 <bcm2835_pwm_set_mode+0x13c>
   4383c:	e5933000 	ldr	r3, [r3]
   43840:	e51b1008 	ldr	r1, [fp, #-8]
   43844:	e1a00003 	mov	r0, r3
   43848:	ebfff472 	bl	40a18 <bcm2835_peri_write_nb>
   4384c:	ea000000 	b	43854 <bcm2835_pwm_set_mode+0x130>
   43850:	e1a00000 	nop			; (mov r0, r0)
   43854:	e24bd004 	sub	sp, fp, #4
   43858:	e8bd8800 	pop	{fp, pc}
   4385c:	0005c170 	.word	0x0005c170
   43860:	0005c16c 	.word	0x0005c16c

00043864 <bcm2835_pwm_set_range>:
   43864:	e92d4800 	push	{fp, lr}
   43868:	e28db004 	add	fp, sp, #4
   4386c:	e24dd008 	sub	sp, sp, #8
   43870:	e1a03000 	mov	r3, r0
   43874:	e50b100c 	str	r1, [fp, #-12]
   43878:	e54b3005 	strb	r3, [fp, #-5]
   4387c:	e59f3074 	ldr	r3, [pc, #116]	; 438f8 <bcm2835_pwm_set_range+0x94>
   43880:	e5933000 	ldr	r3, [r3]
   43884:	e3730001 	cmn	r3, #1
   43888:	0a000017 	beq	438ec <bcm2835_pwm_set_range+0x88>
   4388c:	e59f3068 	ldr	r3, [pc, #104]	; 438fc <bcm2835_pwm_set_range+0x98>
   43890:	e5933000 	ldr	r3, [r3]
   43894:	e3730001 	cmn	r3, #1
   43898:	0a000013 	beq	438ec <bcm2835_pwm_set_range+0x88>
   4389c:	e55b3005 	ldrb	r3, [fp, #-5]
   438a0:	e3530000 	cmp	r3, #0
   438a4:	1a000006 	bne	438c4 <bcm2835_pwm_set_range+0x60>
   438a8:	e59f304c 	ldr	r3, [pc, #76]	; 438fc <bcm2835_pwm_set_range+0x98>
   438ac:	e5933000 	ldr	r3, [r3]
   438b0:	e2833010 	add	r3, r3, #16
   438b4:	e51b100c 	ldr	r1, [fp, #-12]
   438b8:	e1a00003 	mov	r0, r3
   438bc:	ebfff455 	bl	40a18 <bcm2835_peri_write_nb>
   438c0:	ea00000a 	b	438f0 <bcm2835_pwm_set_range+0x8c>
   438c4:	e55b3005 	ldrb	r3, [fp, #-5]
   438c8:	e3530001 	cmp	r3, #1
   438cc:	1a000007 	bne	438f0 <bcm2835_pwm_set_range+0x8c>
   438d0:	e59f3024 	ldr	r3, [pc, #36]	; 438fc <bcm2835_pwm_set_range+0x98>
   438d4:	e5933000 	ldr	r3, [r3]
   438d8:	e2833020 	add	r3, r3, #32
   438dc:	e51b100c 	ldr	r1, [fp, #-12]
   438e0:	e1a00003 	mov	r0, r3
   438e4:	ebfff44b 	bl	40a18 <bcm2835_peri_write_nb>
   438e8:	ea000000 	b	438f0 <bcm2835_pwm_set_range+0x8c>
   438ec:	e1a00000 	nop			; (mov r0, r0)
   438f0:	e24bd004 	sub	sp, fp, #4
   438f4:	e8bd8800 	pop	{fp, pc}
   438f8:	0005c170 	.word	0x0005c170
   438fc:	0005c16c 	.word	0x0005c16c

00043900 <bcm2835_pwm_set_data>:
   43900:	e92d4800 	push	{fp, lr}
   43904:	e28db004 	add	fp, sp, #4
   43908:	e24dd008 	sub	sp, sp, #8
   4390c:	e1a03000 	mov	r3, r0
   43910:	e50b100c 	str	r1, [fp, #-12]
   43914:	e54b3005 	strb	r3, [fp, #-5]
   43918:	e59f3074 	ldr	r3, [pc, #116]	; 43994 <bcm2835_pwm_set_data+0x94>
   4391c:	e5933000 	ldr	r3, [r3]
   43920:	e3730001 	cmn	r3, #1
   43924:	0a000017 	beq	43988 <bcm2835_pwm_set_data+0x88>
   43928:	e59f3068 	ldr	r3, [pc, #104]	; 43998 <bcm2835_pwm_set_data+0x98>
   4392c:	e5933000 	ldr	r3, [r3]
   43930:	e3730001 	cmn	r3, #1
   43934:	0a000013 	beq	43988 <bcm2835_pwm_set_data+0x88>
   43938:	e55b3005 	ldrb	r3, [fp, #-5]
   4393c:	e3530000 	cmp	r3, #0
   43940:	1a000006 	bne	43960 <bcm2835_pwm_set_data+0x60>
   43944:	e59f304c 	ldr	r3, [pc, #76]	; 43998 <bcm2835_pwm_set_data+0x98>
   43948:	e5933000 	ldr	r3, [r3]
   4394c:	e2833014 	add	r3, r3, #20
   43950:	e51b100c 	ldr	r1, [fp, #-12]
   43954:	e1a00003 	mov	r0, r3
   43958:	ebfff42e 	bl	40a18 <bcm2835_peri_write_nb>
   4395c:	ea00000a 	b	4398c <bcm2835_pwm_set_data+0x8c>
   43960:	e55b3005 	ldrb	r3, [fp, #-5]
   43964:	e3530001 	cmp	r3, #1
   43968:	1a000007 	bne	4398c <bcm2835_pwm_set_data+0x8c>
   4396c:	e59f3024 	ldr	r3, [pc, #36]	; 43998 <bcm2835_pwm_set_data+0x98>
   43970:	e5933000 	ldr	r3, [r3]
   43974:	e2833024 	add	r3, r3, #36	; 0x24
   43978:	e51b100c 	ldr	r1, [fp, #-12]
   4397c:	e1a00003 	mov	r0, r3
   43980:	ebfff424 	bl	40a18 <bcm2835_peri_write_nb>
   43984:	ea000000 	b	4398c <bcm2835_pwm_set_data+0x8c>
   43988:	e1a00000 	nop			; (mov r0, r0)
   4398c:	e24bd004 	sub	sp, fp, #4
   43990:	e8bd8800 	pop	{fp, pc}
   43994:	0005c170 	.word	0x0005c170
   43998:	0005c16c 	.word	0x0005c16c

0004399c <malloc_aligned>:
   4399c:	e92d4810 	push	{r4, fp, lr}
   439a0:	e28db008 	add	fp, sp, #8
   439a4:	e24dd014 	sub	sp, sp, #20
   439a8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   439ac:	ebff36b8 	bl	11494 <__errno_location@plt>
   439b0:	e1a04000 	mov	r4, r0
   439b4:	e24b3010 	sub	r3, fp, #16
   439b8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   439bc:	e3a01a01 	mov	r1, #4096	; 0x1000
   439c0:	e1a00003 	mov	r0, r3
   439c4:	ebff35f2 	bl	11194 <posix_memalign@plt>
   439c8:	e1a03000 	mov	r3, r0
   439cc:	e5843000 	str	r3, [r4]
   439d0:	ebff36af 	bl	11494 <__errno_location@plt>
   439d4:	e1a03000 	mov	r3, r0
   439d8:	e5933000 	ldr	r3, [r3]
   439dc:	e3530000 	cmp	r3, #0
   439e0:	1a000001 	bne	439ec <malloc_aligned+0x50>
   439e4:	e51b3010 	ldr	r3, [fp, #-16]
   439e8:	ea000000 	b	439f0 <malloc_aligned+0x54>
   439ec:	e3a03000 	mov	r3, #0
   439f0:	e1a00003 	mov	r0, r3
   439f4:	e24bd008 	sub	sp, fp, #8
   439f8:	e8bd8810 	pop	{r4, fp, pc}

000439fc <mapmem>:
   439fc:	e92d4810 	push	{r4, fp, lr}
   43a00:	e28db008 	add	fp, sp, #8
   43a04:	e24dd024 	sub	sp, sp, #36	; 0x24
   43a08:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   43a0c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   43a10:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   43a14:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   43a18:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   43a1c:	e58d3004 	str	r3, [sp, #4]
   43a20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   43a24:	e58d3000 	str	r3, [sp]
   43a28:	e3a03001 	mov	r3, #1
   43a2c:	e3a02003 	mov	r2, #3
   43a30:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   43a34:	e3a00000 	mov	r0, #0
   43a38:	ebff362c 	bl	112f0 <mmap@plt>
   43a3c:	e50b0010 	str	r0, [fp, #-16]
   43a40:	e51b3010 	ldr	r3, [fp, #-16]
   43a44:	e3730001 	cmn	r3, #1
   43a48:	1a00000b 	bne	43a7c <mapmem+0x80>
   43a4c:	e59f3038 	ldr	r3, [pc, #56]	; 43a8c <mapmem+0x90>
   43a50:	e5934000 	ldr	r4, [r3]
   43a54:	ebff368e 	bl	11494 <__errno_location@plt>
   43a58:	e1a03000 	mov	r3, r0
   43a5c:	e5933000 	ldr	r3, [r3]
   43a60:	e1a00003 	mov	r0, r3
   43a64:	ebff35e5 	bl	11200 <strerror@plt>
   43a68:	e1a03000 	mov	r3, r0
   43a6c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   43a70:	e59f1018 	ldr	r1, [pc, #24]	; 43a90 <mapmem+0x94>
   43a74:	e1a00004 	mov	r0, r4
   43a78:	ebff3670 	bl	11440 <fprintf@plt>
   43a7c:	e51b3010 	ldr	r3, [fp, #-16]
   43a80:	e1a00003 	mov	r0, r3
   43a84:	e24bd008 	sub	sp, fp, #8
   43a88:	e8bd8810 	pop	{r4, fp, pc}
   43a8c:	0005c298 	.word	0x0005c298
   43a90:	0004aedc 	.word	0x0004aedc

00043a94 <unmapmem>:
   43a94:	e92d4800 	push	{fp, lr}
   43a98:	e28db004 	add	fp, sp, #4
   43a9c:	e24dd008 	sub	sp, sp, #8
   43aa0:	e50b0008 	str	r0, [fp, #-8]
   43aa4:	e50b100c 	str	r1, [fp, #-12]
   43aa8:	e51b3008 	ldr	r3, [fp, #-8]
   43aac:	e5933000 	ldr	r3, [r3]
   43ab0:	e3730001 	cmn	r3, #1
   43ab4:	0a000008 	beq	43adc <unmapmem+0x48>
   43ab8:	e51b3008 	ldr	r3, [fp, #-8]
   43abc:	e5933000 	ldr	r3, [r3]
   43ac0:	e51b100c 	ldr	r1, [fp, #-12]
   43ac4:	e1a00003 	mov	r0, r3
   43ac8:	ebff3659 	bl	11434 <munmap@plt>
   43acc:	e51b3008 	ldr	r3, [fp, #-8]
   43ad0:	e3e02000 	mvn	r2, #0
   43ad4:	e5832000 	str	r2, [r3]
   43ad8:	ea000000 	b	43ae0 <unmapmem+0x4c>
   43adc:	e1a00000 	nop			; (mov r0, r0)
   43ae0:	e24bd004 	sub	sp, fp, #4
   43ae4:	e8bd8800 	pop	{fp, pc}

00043ae8 <bcm2835_init>:
   43ae8:	e92d4810 	push	{r4, fp, lr}
   43aec:	e28db008 	add	fp, sp, #8
   43af0:	e24dd014 	sub	sp, sp, #20
   43af4:	e59f3494 	ldr	r3, [pc, #1172]	; 43f90 <bcm2835_init+0x4a8>
   43af8:	e5d33000 	ldrb	r3, [r3]
   43afc:	e3530000 	cmp	r3, #0
   43b00:	0a00003b 	beq	43bf4 <bcm2835_init+0x10c>
   43b04:	e59f3488 	ldr	r3, [pc, #1160]	; 43f94 <bcm2835_init+0x4ac>
   43b08:	e3a02202 	mov	r2, #536870912	; 0x20000000
   43b0c:	e5832000 	str	r2, [r3]
   43b10:	e59f347c 	ldr	r3, [pc, #1148]	; 43f94 <bcm2835_init+0x4ac>
   43b14:	e5933000 	ldr	r3, [r3]
   43b18:	e2833601 	add	r3, r3, #1048576	; 0x100000
   43b1c:	e59f2474 	ldr	r2, [pc, #1140]	; 43f98 <bcm2835_init+0x4b0>
   43b20:	e5823000 	str	r3, [r2]
   43b24:	e59f3468 	ldr	r3, [pc, #1128]	; 43f94 <bcm2835_init+0x4ac>
   43b28:	e5933000 	ldr	r3, [r3]
   43b2c:	e2833601 	add	r3, r3, #1048576	; 0x100000
   43b30:	e2833a01 	add	r3, r3, #4096	; 0x1000
   43b34:	e59f2460 	ldr	r2, [pc, #1120]	; 43f9c <bcm2835_init+0x4b4>
   43b38:	e5823000 	str	r3, [r2]
   43b3c:	e59f3450 	ldr	r3, [pc, #1104]	; 43f94 <bcm2835_init+0x4ac>
   43b40:	e5933000 	ldr	r3, [r3]
   43b44:	e2833602 	add	r3, r3, #2097152	; 0x200000
   43b48:	e59f2450 	ldr	r2, [pc, #1104]	; 43fa0 <bcm2835_init+0x4b8>
   43b4c:	e5823000 	str	r3, [r2]
   43b50:	e59f343c 	ldr	r3, [pc, #1084]	; 43f94 <bcm2835_init+0x4ac>
   43b54:	e5933000 	ldr	r3, [r3]
   43b58:	e2833983 	add	r3, r3, #2146304	; 0x20c000
   43b5c:	e59f2440 	ldr	r2, [pc, #1088]	; 43fa4 <bcm2835_init+0x4bc>
   43b60:	e5823000 	str	r3, [r2]
   43b64:	e59f3428 	ldr	r3, [pc, #1064]	; 43f94 <bcm2835_init+0x4ac>
   43b68:	e5933000 	ldr	r3, [r3]
   43b6c:	e2833981 	add	r3, r3, #2113536	; 0x204000
   43b70:	e59f2430 	ldr	r2, [pc, #1072]	; 43fa8 <bcm2835_init+0x4c0>
   43b74:	e5823000 	str	r3, [r2]
   43b78:	e59f3414 	ldr	r3, [pc, #1044]	; 43f94 <bcm2835_init+0x4ac>
   43b7c:	e5933000 	ldr	r3, [r3]
   43b80:	e2833981 	add	r3, r3, #2113536	; 0x204000
   43b84:	e2833a01 	add	r3, r3, #4096	; 0x1000
   43b88:	e59f241c 	ldr	r2, [pc, #1052]	; 43fac <bcm2835_init+0x4c4>
   43b8c:	e5823000 	str	r3, [r2]
   43b90:	e59f33fc 	ldr	r3, [pc, #1020]	; 43f94 <bcm2835_init+0x4ac>
   43b94:	e5933000 	ldr	r3, [r3]
   43b98:	e2833502 	add	r3, r3, #8388608	; 0x800000
   43b9c:	e2833901 	add	r3, r3, #16384	; 0x4000
   43ba0:	e59f2408 	ldr	r2, [pc, #1032]	; 43fb0 <bcm2835_init+0x4c8>
   43ba4:	e5823000 	str	r3, [r2]
   43ba8:	e59f33e4 	ldr	r3, [pc, #996]	; 43f94 <bcm2835_init+0x4ac>
   43bac:	e5933000 	ldr	r3, [r3]
   43bb0:	e2833a03 	add	r3, r3, #12288	; 0x3000
   43bb4:	e59f23f8 	ldr	r2, [pc, #1016]	; 43fb4 <bcm2835_init+0x4cc>
   43bb8:	e5823000 	str	r3, [r2]
   43bbc:	e59f33d0 	ldr	r3, [pc, #976]	; 43f94 <bcm2835_init+0x4ac>
   43bc0:	e5933000 	ldr	r3, [r3]
   43bc4:	e2833985 	add	r3, r3, #2179072	; 0x214000
   43bc8:	e2833a01 	add	r3, r3, #4096	; 0x1000
   43bcc:	e59f23e4 	ldr	r2, [pc, #996]	; 43fb8 <bcm2835_init+0x4d0>
   43bd0:	e5823000 	str	r3, [r2]
   43bd4:	e59f33b8 	ldr	r3, [pc, #952]	; 43f94 <bcm2835_init+0x4ac>
   43bd8:	e5933000 	ldr	r3, [r3]
   43bdc:	e2833985 	add	r3, r3, #2179072	; 0x214000
   43be0:	e2833d42 	add	r3, r3, #4224	; 0x1080
   43be4:	e59f23d0 	ldr	r2, [pc, #976]	; 43fbc <bcm2835_init+0x4d4>
   43be8:	e5823000 	str	r3, [r2]
   43bec:	e3a03001 	mov	r3, #1
   43bf0:	ea0000e3 	b	43f84 <bcm2835_init+0x49c>
   43bf4:	e59f13c4 	ldr	r1, [pc, #964]	; 43fc0 <bcm2835_init+0x4d8>
   43bf8:	e59f03c4 	ldr	r0, [pc, #964]	; 43fc4 <bcm2835_init+0x4dc>
   43bfc:	ebff35a6 	bl	1129c <fopen@plt>
   43c00:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   43c04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   43c08:	e3530000 	cmp	r3, #0
   43c0c:	0a000033 	beq	43ce0 <bcm2835_init+0x1f8>
   43c10:	e3a02000 	mov	r2, #0
   43c14:	e3a01004 	mov	r1, #4
   43c18:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   43c1c:	ebff355f 	bl	111a0 <fseek@plt>
   43c20:	e24b001c 	sub	r0, fp, #28
   43c24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   43c28:	e3a02004 	mov	r2, #4
   43c2c:	e3a01001 	mov	r1, #1
   43c30:	ebff35c3 	bl	11344 <fread@plt>
   43c34:	e1a03000 	mov	r3, r0
   43c38:	e3530004 	cmp	r3, #4
   43c3c:	1a00000c 	bne	43c74 <bcm2835_init+0x18c>
   43c40:	e55b301c 	ldrb	r3, [fp, #-28]	; 0xffffffe4
   43c44:	e1a02c03 	lsl	r2, r3, #24
   43c48:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
   43c4c:	e1a03803 	lsl	r3, r3, #16
   43c50:	e1822003 	orr	r2, r2, r3
   43c54:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
   43c58:	e1a03403 	lsl	r3, r3, #8
   43c5c:	e1823003 	orr	r3, r2, r3
   43c60:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
   43c64:	e1833002 	orr	r3, r3, r2
   43c68:	e1a02003 	mov	r2, r3
   43c6c:	e59f3354 	ldr	r3, [pc, #852]	; 43fc8 <bcm2835_init+0x4e0>
   43c70:	e5832000 	str	r2, [r3]
   43c74:	e3a02000 	mov	r2, #0
   43c78:	e3a01008 	mov	r1, #8
   43c7c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   43c80:	ebff3546 	bl	111a0 <fseek@plt>
   43c84:	e24b001c 	sub	r0, fp, #28
   43c88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   43c8c:	e3a02004 	mov	r2, #4
   43c90:	e3a01001 	mov	r1, #1
   43c94:	ebff35aa 	bl	11344 <fread@plt>
   43c98:	e1a03000 	mov	r3, r0
   43c9c:	e3530004 	cmp	r3, #4
   43ca0:	1a00000c 	bne	43cd8 <bcm2835_init+0x1f0>
   43ca4:	e55b301c 	ldrb	r3, [fp, #-28]	; 0xffffffe4
   43ca8:	e1a02c03 	lsl	r2, r3, #24
   43cac:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
   43cb0:	e1a03803 	lsl	r3, r3, #16
   43cb4:	e1822003 	orr	r2, r2, r3
   43cb8:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
   43cbc:	e1a03403 	lsl	r3, r3, #8
   43cc0:	e1823003 	orr	r3, r2, r3
   43cc4:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
   43cc8:	e1833002 	orr	r3, r3, r2
   43ccc:	e1a02003 	mov	r2, r3
   43cd0:	e59f32f4 	ldr	r3, [pc, #756]	; 43fcc <bcm2835_init+0x4e4>
   43cd4:	e5832000 	str	r2, [r3]
   43cd8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   43cdc:	ebff35da 	bl	1144c <fclose@plt>
   43ce0:	e3e03000 	mvn	r3, #0
   43ce4:	e50b3010 	str	r3, [fp, #-16]
   43ce8:	e3a03000 	mov	r3, #0
   43cec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   43cf0:	ebff35c9 	bl	1141c <geteuid@plt>
   43cf4:	e1a03000 	mov	r3, r0
   43cf8:	e3530000 	cmp	r3, #0
   43cfc:	1a00005b 	bne	43e70 <bcm2835_init+0x388>
   43d00:	e59f12c8 	ldr	r1, [pc, #712]	; 43fd0 <bcm2835_init+0x4e8>
   43d04:	e59f02c8 	ldr	r0, [pc, #712]	; 43fd4 <bcm2835_init+0x4ec>
   43d08:	ebff3584 	bl	11320 <open@plt>
   43d0c:	e50b0010 	str	r0, [fp, #-16]
   43d10:	e51b3010 	ldr	r3, [fp, #-16]
   43d14:	e3530000 	cmp	r3, #0
   43d18:	aa00000c 	bge	43d50 <bcm2835_init+0x268>
   43d1c:	e59f32b4 	ldr	r3, [pc, #692]	; 43fd8 <bcm2835_init+0x4f0>
   43d20:	e5934000 	ldr	r4, [r3]
   43d24:	ebff35da 	bl	11494 <__errno_location@plt>
   43d28:	e1a03000 	mov	r3, r0
   43d2c:	e5933000 	ldr	r3, [r3]
   43d30:	e1a00003 	mov	r0, r3
   43d34:	ebff3531 	bl	11200 <strerror@plt>
   43d38:	e1a03000 	mov	r3, r0
   43d3c:	e1a02003 	mov	r2, r3
   43d40:	e59f1294 	ldr	r1, [pc, #660]	; 43fdc <bcm2835_init+0x4f4>
   43d44:	e1a00004 	mov	r0, r4
   43d48:	ebff35bc 	bl	11440 <fprintf@plt>
   43d4c:	ea000082 	b	43f5c <bcm2835_init+0x474>
   43d50:	e59f3274 	ldr	r3, [pc, #628]	; 43fcc <bcm2835_init+0x4e4>
   43d54:	e5931000 	ldr	r1, [r3]
   43d58:	e59f3268 	ldr	r3, [pc, #616]	; 43fc8 <bcm2835_init+0x4e0>
   43d5c:	e5933000 	ldr	r3, [r3]
   43d60:	e51b2010 	ldr	r2, [fp, #-16]
   43d64:	e59f0274 	ldr	r0, [pc, #628]	; 43fe0 <bcm2835_init+0x4f8>
   43d68:	ebffff23 	bl	439fc <mapmem>
   43d6c:	e1a02000 	mov	r2, r0
   43d70:	e59f321c 	ldr	r3, [pc, #540]	; 43f94 <bcm2835_init+0x4ac>
   43d74:	e5832000 	str	r2, [r3]
   43d78:	e59f3214 	ldr	r3, [pc, #532]	; 43f94 <bcm2835_init+0x4ac>
   43d7c:	e5933000 	ldr	r3, [r3]
   43d80:	e3730001 	cmn	r3, #1
   43d84:	0a000071 	beq	43f50 <bcm2835_init+0x468>
   43d88:	e59f3204 	ldr	r3, [pc, #516]	; 43f94 <bcm2835_init+0x4ac>
   43d8c:	e5933000 	ldr	r3, [r3]
   43d90:	e2833602 	add	r3, r3, #2097152	; 0x200000
   43d94:	e59f2204 	ldr	r2, [pc, #516]	; 43fa0 <bcm2835_init+0x4b8>
   43d98:	e5823000 	str	r3, [r2]
   43d9c:	e59f31f0 	ldr	r3, [pc, #496]	; 43f94 <bcm2835_init+0x4ac>
   43da0:	e5933000 	ldr	r3, [r3]
   43da4:	e2833983 	add	r3, r3, #2146304	; 0x20c000
   43da8:	e59f21f4 	ldr	r2, [pc, #500]	; 43fa4 <bcm2835_init+0x4bc>
   43dac:	e5823000 	str	r3, [r2]
   43db0:	e59f31dc 	ldr	r3, [pc, #476]	; 43f94 <bcm2835_init+0x4ac>
   43db4:	e5933000 	ldr	r3, [r3]
   43db8:	e2833601 	add	r3, r3, #1048576	; 0x100000
   43dbc:	e2833a01 	add	r3, r3, #4096	; 0x1000
   43dc0:	e59f21d4 	ldr	r2, [pc, #468]	; 43f9c <bcm2835_init+0x4b4>
   43dc4:	e5823000 	str	r3, [r2]
   43dc8:	e59f31c4 	ldr	r3, [pc, #452]	; 43f94 <bcm2835_init+0x4ac>
   43dcc:	e5933000 	ldr	r3, [r3]
   43dd0:	e2833601 	add	r3, r3, #1048576	; 0x100000
   43dd4:	e59f21bc 	ldr	r2, [pc, #444]	; 43f98 <bcm2835_init+0x4b0>
   43dd8:	e5823000 	str	r3, [r2]
   43ddc:	e59f31b0 	ldr	r3, [pc, #432]	; 43f94 <bcm2835_init+0x4ac>
   43de0:	e5933000 	ldr	r3, [r3]
   43de4:	e2833981 	add	r3, r3, #2113536	; 0x204000
   43de8:	e59f21b8 	ldr	r2, [pc, #440]	; 43fa8 <bcm2835_init+0x4c0>
   43dec:	e5823000 	str	r3, [r2]
   43df0:	e59f319c 	ldr	r3, [pc, #412]	; 43f94 <bcm2835_init+0x4ac>
   43df4:	e5933000 	ldr	r3, [r3]
   43df8:	e2833981 	add	r3, r3, #2113536	; 0x204000
   43dfc:	e2833a01 	add	r3, r3, #4096	; 0x1000
   43e00:	e59f21a4 	ldr	r2, [pc, #420]	; 43fac <bcm2835_init+0x4c4>
   43e04:	e5823000 	str	r3, [r2]
   43e08:	e59f3184 	ldr	r3, [pc, #388]	; 43f94 <bcm2835_init+0x4ac>
   43e0c:	e5933000 	ldr	r3, [r3]
   43e10:	e2833502 	add	r3, r3, #8388608	; 0x800000
   43e14:	e2833901 	add	r3, r3, #16384	; 0x4000
   43e18:	e59f2190 	ldr	r2, [pc, #400]	; 43fb0 <bcm2835_init+0x4c8>
   43e1c:	e5823000 	str	r3, [r2]
   43e20:	e59f316c 	ldr	r3, [pc, #364]	; 43f94 <bcm2835_init+0x4ac>
   43e24:	e5933000 	ldr	r3, [r3]
   43e28:	e2833a03 	add	r3, r3, #12288	; 0x3000
   43e2c:	e59f2180 	ldr	r2, [pc, #384]	; 43fb4 <bcm2835_init+0x4cc>
   43e30:	e5823000 	str	r3, [r2]
   43e34:	e59f3158 	ldr	r3, [pc, #344]	; 43f94 <bcm2835_init+0x4ac>
   43e38:	e5933000 	ldr	r3, [r3]
   43e3c:	e2833985 	add	r3, r3, #2179072	; 0x214000
   43e40:	e2833a01 	add	r3, r3, #4096	; 0x1000
   43e44:	e59f216c 	ldr	r2, [pc, #364]	; 43fb8 <bcm2835_init+0x4d0>
   43e48:	e5823000 	str	r3, [r2]
   43e4c:	e59f3140 	ldr	r3, [pc, #320]	; 43f94 <bcm2835_init+0x4ac>
   43e50:	e5933000 	ldr	r3, [r3]
   43e54:	e2833985 	add	r3, r3, #2179072	; 0x214000
   43e58:	e2833d42 	add	r3, r3, #4224	; 0x1080
   43e5c:	e59f2158 	ldr	r2, [pc, #344]	; 43fbc <bcm2835_init+0x4d4>
   43e60:	e5823000 	str	r3, [r2]
   43e64:	e3a03001 	mov	r3, #1
   43e68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   43e6c:	ea00003a 	b	43f5c <bcm2835_init+0x474>
   43e70:	e59f1158 	ldr	r1, [pc, #344]	; 43fd0 <bcm2835_init+0x4e8>
   43e74:	e59f0168 	ldr	r0, [pc, #360]	; 43fe4 <bcm2835_init+0x4fc>
   43e78:	ebff3528 	bl	11320 <open@plt>
   43e7c:	e50b0010 	str	r0, [fp, #-16]
   43e80:	e51b3010 	ldr	r3, [fp, #-16]
   43e84:	e3530000 	cmp	r3, #0
   43e88:	aa00000c 	bge	43ec0 <bcm2835_init+0x3d8>
   43e8c:	e59f3144 	ldr	r3, [pc, #324]	; 43fd8 <bcm2835_init+0x4f0>
   43e90:	e5934000 	ldr	r4, [r3]
   43e94:	ebff357e 	bl	11494 <__errno_location@plt>
   43e98:	e1a03000 	mov	r3, r0
   43e9c:	e5933000 	ldr	r3, [r3]
   43ea0:	e1a00003 	mov	r0, r3
   43ea4:	ebff34d5 	bl	11200 <strerror@plt>
   43ea8:	e1a03000 	mov	r3, r0
   43eac:	e1a02003 	mov	r2, r3
   43eb0:	e59f1130 	ldr	r1, [pc, #304]	; 43fe8 <bcm2835_init+0x500>
   43eb4:	e1a00004 	mov	r0, r4
   43eb8:	ebff3560 	bl	11440 <fprintf@plt>
   43ebc:	ea000026 	b	43f5c <bcm2835_init+0x474>
   43ec0:	e59f3100 	ldr	r3, [pc, #256]	; 43fc8 <bcm2835_init+0x4e0>
   43ec4:	e3a02000 	mov	r2, #0
   43ec8:	e5832000 	str	r2, [r3]
   43ecc:	e59f30f8 	ldr	r3, [pc, #248]	; 43fcc <bcm2835_init+0x4e4>
   43ed0:	e5931000 	ldr	r1, [r3]
   43ed4:	e59f30ec 	ldr	r3, [pc, #236]	; 43fc8 <bcm2835_init+0x4e0>
   43ed8:	e5933000 	ldr	r3, [r3]
   43edc:	e51b2010 	ldr	r2, [fp, #-16]
   43ee0:	e59f00f8 	ldr	r0, [pc, #248]	; 43fe0 <bcm2835_init+0x4f8>
   43ee4:	ebfffec4 	bl	439fc <mapmem>
   43ee8:	e1a02000 	mov	r2, r0
   43eec:	e59f30a0 	ldr	r3, [pc, #160]	; 43f94 <bcm2835_init+0x4ac>
   43ef0:	e5832000 	str	r2, [r3]
   43ef4:	e59f3098 	ldr	r3, [pc, #152]	; 43f94 <bcm2835_init+0x4ac>
   43ef8:	e5933000 	ldr	r3, [r3]
   43efc:	e3730001 	cmn	r3, #1
   43f00:	0a000014 	beq	43f58 <bcm2835_init+0x470>
   43f04:	e59f3088 	ldr	r3, [pc, #136]	; 43f94 <bcm2835_init+0x4ac>
   43f08:	e5933000 	ldr	r3, [r3]
   43f0c:	e59f208c 	ldr	r2, [pc, #140]	; 43fa0 <bcm2835_init+0x4b8>
   43f10:	e5823000 	str	r3, [r2]
   43f14:	e59f3078 	ldr	r3, [pc, #120]	; 43f94 <bcm2835_init+0x4ac>
   43f18:	e5933000 	ldr	r3, [r3]
   43f1c:	e2833901 	add	r3, r3, #16384	; 0x4000
   43f20:	e59f2080 	ldr	r2, [pc, #128]	; 43fa8 <bcm2835_init+0x4c0>
   43f24:	e5823000 	str	r3, [r2]
   43f28:	e59f3070 	ldr	r3, [pc, #112]	; 43fa0 <bcm2835_init+0x4b8>
   43f2c:	e5931000 	ldr	r1, [r3]
   43f30:	e59f3070 	ldr	r3, [pc, #112]	; 43fa8 <bcm2835_init+0x4c0>
   43f34:	e5933000 	ldr	r3, [r3]
   43f38:	e1a02003 	mov	r2, r3
   43f3c:	e59f00a8 	ldr	r0, [pc, #168]	; 43fec <bcm2835_init+0x504>
   43f40:	ebff34ab 	bl	111f4 <printf@plt>
   43f44:	e3a03001 	mov	r3, #1
   43f48:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   43f4c:	ea000002 	b	43f5c <bcm2835_init+0x474>
   43f50:	e1a00000 	nop			; (mov r0, r0)
   43f54:	ea000000 	b	43f5c <bcm2835_init+0x474>
   43f58:	e1a00000 	nop			; (mov r0, r0)
   43f5c:	e51b3010 	ldr	r3, [fp, #-16]
   43f60:	e3530000 	cmp	r3, #0
   43f64:	ba000001 	blt	43f70 <bcm2835_init+0x488>
   43f68:	e51b0010 	ldr	r0, [fp, #-16]
   43f6c:	ebff34c4 	bl	11284 <close@plt>
   43f70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   43f74:	e3530000 	cmp	r3, #0
   43f78:	1a000000 	bne	43f80 <bcm2835_init+0x498>
   43f7c:	eb00001b 	bl	43ff0 <bcm2835_close>
   43f80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   43f84:	e1a00003 	mov	r0, r3
   43f88:	e24bd008 	sub	sp, fp, #8
   43f8c:	e8bd8810 	pop	{r4, fp, pc}
   43f90:	0005f3e4 	.word	0x0005f3e4
   43f94:	0005c164 	.word	0x0005c164
   43f98:	0005c174 	.word	0x0005c174
   43f9c:	0005c170 	.word	0x0005c170
   43fa0:	0005c168 	.word	0x0005c168
   43fa4:	0005c16c 	.word	0x0005c16c
   43fa8:	0005c178 	.word	0x0005c178
   43fac:	0005c17c 	.word	0x0005c17c
   43fb0:	0005c180 	.word	0x0005c180
   43fb4:	0005c184 	.word	0x0005c184
   43fb8:	0005c188 	.word	0x0005c188
   43fbc:	0005c18c 	.word	0x0005c18c
   43fc0:	0004af00 	.word	0x0004af00
   43fc4:	0004af04 	.word	0x0004af04
   43fc8:	0005c15c 	.word	0x0005c15c
   43fcc:	0005c160 	.word	0x0005c160
   43fd0:	00101002 	.word	0x00101002
   43fd4:	0004af24 	.word	0x0004af24
   43fd8:	0005c298 	.word	0x0005c298
   43fdc:	0004af30 	.word	0x0004af30
   43fe0:	0004af5c 	.word	0x0004af5c
   43fe4:	0004af64 	.word	0x0004af64
   43fe8:	0004af74 	.word	0x0004af74
   43fec:	0004afa4 	.word	0x0004afa4

00043ff0 <bcm2835_close>:
   43ff0:	e92d4800 	push	{fp, lr}
   43ff4:	e28db004 	add	fp, sp, #4
   43ff8:	e59f30b4 	ldr	r3, [pc, #180]	; 440b4 <bcm2835_close+0xc4>
   43ffc:	e5d33000 	ldrb	r3, [r3]
   44000:	e3530000 	cmp	r3, #0
   44004:	0a000001 	beq	44010 <bcm2835_close+0x20>
   44008:	e3a03001 	mov	r3, #1
   4400c:	ea000026 	b	440ac <bcm2835_close+0xbc>
   44010:	e59f30a0 	ldr	r3, [pc, #160]	; 440b8 <bcm2835_close+0xc8>
   44014:	e5933000 	ldr	r3, [r3]
   44018:	e1a01003 	mov	r1, r3
   4401c:	e59f0098 	ldr	r0, [pc, #152]	; 440bc <bcm2835_close+0xcc>
   44020:	ebfffe9b 	bl	43a94 <unmapmem>
   44024:	e59f3090 	ldr	r3, [pc, #144]	; 440bc <bcm2835_close+0xcc>
   44028:	e3e02000 	mvn	r2, #0
   4402c:	e5832000 	str	r2, [r3]
   44030:	e59f3088 	ldr	r3, [pc, #136]	; 440c0 <bcm2835_close+0xd0>
   44034:	e3e02000 	mvn	r2, #0
   44038:	e5832000 	str	r2, [r3]
   4403c:	e59f3080 	ldr	r3, [pc, #128]	; 440c4 <bcm2835_close+0xd4>
   44040:	e3e02000 	mvn	r2, #0
   44044:	e5832000 	str	r2, [r3]
   44048:	e59f3078 	ldr	r3, [pc, #120]	; 440c8 <bcm2835_close+0xd8>
   4404c:	e3e02000 	mvn	r2, #0
   44050:	e5832000 	str	r2, [r3]
   44054:	e59f3070 	ldr	r3, [pc, #112]	; 440cc <bcm2835_close+0xdc>
   44058:	e3e02000 	mvn	r2, #0
   4405c:	e5832000 	str	r2, [r3]
   44060:	e59f3068 	ldr	r3, [pc, #104]	; 440d0 <bcm2835_close+0xe0>
   44064:	e3e02000 	mvn	r2, #0
   44068:	e5832000 	str	r2, [r3]
   4406c:	e59f3060 	ldr	r3, [pc, #96]	; 440d4 <bcm2835_close+0xe4>
   44070:	e3e02000 	mvn	r2, #0
   44074:	e5832000 	str	r2, [r3]
   44078:	e59f3058 	ldr	r3, [pc, #88]	; 440d8 <bcm2835_close+0xe8>
   4407c:	e3e02000 	mvn	r2, #0
   44080:	e5832000 	str	r2, [r3]
   44084:	e59f3050 	ldr	r3, [pc, #80]	; 440dc <bcm2835_close+0xec>
   44088:	e3e02000 	mvn	r2, #0
   4408c:	e5832000 	str	r2, [r3]
   44090:	e59f3048 	ldr	r3, [pc, #72]	; 440e0 <bcm2835_close+0xf0>
   44094:	e3e02000 	mvn	r2, #0
   44098:	e5832000 	str	r2, [r3]
   4409c:	e59f3040 	ldr	r3, [pc, #64]	; 440e4 <bcm2835_close+0xf4>
   440a0:	e3e02000 	mvn	r2, #0
   440a4:	e5832000 	str	r2, [r3]
   440a8:	e3a03001 	mov	r3, #1
   440ac:	e1a00003 	mov	r0, r3
   440b0:	e8bd8800 	pop	{fp, pc}
   440b4:	0005f3e4 	.word	0x0005f3e4
   440b8:	0005c160 	.word	0x0005c160
   440bc:	0005c164 	.word	0x0005c164
   440c0:	0005c168 	.word	0x0005c168
   440c4:	0005c16c 	.word	0x0005c16c
   440c8:	0005c170 	.word	0x0005c170
   440cc:	0005c174 	.word	0x0005c174
   440d0:	0005c178 	.word	0x0005c178
   440d4:	0005c17c 	.word	0x0005c17c
   440d8:	0005c180 	.word	0x0005c180
   440dc:	0005c184 	.word	0x0005c184
   440e0:	0005c188 	.word	0x0005c188
   440e4:	0005c18c 	.word	0x0005c18c

000440e8 <__libc_csu_init>:
   440e8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   440ec:	e1a07000 	mov	r7, r0
   440f0:	e59f6048 	ldr	r6, [pc, #72]	; 44140 <__libc_csu_init+0x58>
   440f4:	e59f5048 	ldr	r5, [pc, #72]	; 44144 <__libc_csu_init+0x5c>
   440f8:	e08f6006 	add	r6, pc, r6
   440fc:	e08f5005 	add	r5, pc, r5
   44100:	e0466005 	sub	r6, r6, r5
   44104:	e1a08001 	mov	r8, r1
   44108:	e1a09002 	mov	r9, r2
   4410c:	ebff3403 	bl	11120 <_init>
   44110:	e1b06146 	asrs	r6, r6, #2
   44114:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   44118:	e3a04000 	mov	r4, #0
   4411c:	e2844001 	add	r4, r4, #1
   44120:	e4953004 	ldr	r3, [r5], #4
   44124:	e1a02009 	mov	r2, r9
   44128:	e1a01008 	mov	r1, r8
   4412c:	e1a00007 	mov	r0, r7
   44130:	e12fff33 	blx	r3
   44134:	e1560004 	cmp	r6, r4
   44138:	1afffff7 	bne	4411c <__libc_csu_init+0x34>
   4413c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   44140:	00017dec 	.word	0x00017dec
   44144:	00017de4 	.word	0x00017de4

00044148 <__libc_csu_fini>:
   44148:	e12fff1e 	bx	lr

Disassembly of section .fini:

0004414c <_fini>:
   4414c:	e92d4008 	push	{r3, lr}
   44150:	e8bd8008 	pop	{r3, pc}
