/**
 * @file hal_timers.h
 *
 */
/* Copyright (C) 2024 by Arjan van Vught mailto:info@gd32-dmx.org
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#ifndef HAL_TIMERS_H_
#define HAL_TIMERS_H_

#include <cstdint>

#include "hardware.h"

namespace hal {
#if !defined (CONFIG_HAL_TIMERS_COUNT)
# define CONFIG_HAL_TIMERS_COUNT 8
#endif

static constexpr uint32_t SOFTWARE_TIMERS_MAX = CONFIG_HAL_TIMERS_COUNT;

typedef void (*TimerCallback)();


class SoftwareTimer {
public:
	struct Timer {
	    uint32_t nExpireTime;
	    uint32_t nIntervalMillis;
	    int32_t nId;
	    TimerCallback callback;
	};

	static SoftwareTimer& Get() {
		static SoftwareTimer instance;
		return instance;
	}

	static int32_t Add(const uint32_t nIntervalMillis, const TimerCallback callback) {
		return Get().IAdd(nIntervalMillis, callback);
	}

	static bool Delete(const int32_t nId) {
	        return Get().IDelete(nId);
	}

	static bool Change(const int32_t nId, const uint32_t nIntervalMillis) {
	        return Get().IChange(nId, nIntervalMillis);
	}

	static void Run() {
		Get().IRun();
	}

private:
	int32_t IAdd(const uint32_t nIntervalMillis, const TimerCallback callback) {
	    if (m_nTimersCount >= SOFTWARE_TIMERS_MAX) {
#ifdef NDEBUG
            console_error("SoftwareTimerAdd\n");
#endif
	        return -1;
	    }

	    const auto nCurrentTime = Hardware::Millis();

	    Timer newTimer = {
	        .nExpireTime = nCurrentTime + nIntervalMillis,
	        .nIntervalMillis = nIntervalMillis,
	        .callback = callback,
			.nId = m_nNextId++
	    };

	    m_Timers[m_nTimersCount++] = newTimer;

	    return newTimer.nId;
	}

    bool IDelete(const int32_t nId) {
        for (uint32_t i = 0; i < m_nTimersCount; ++i) {
            if (m_Timers[i].nId == nId) {
                for (uint32_t j = i; j < m_nTimersCount - 1; ++j) {
                    m_Timers[j] = m_Timers[j + 1];
                }
                --m_nTimersCount;

                return true;
            }
        }

        return false;
    }

    bool IChange(const int32_t nId, const uint32_t nIntervalMillis) {
        for (uint32_t i = 0; i < m_nTimersCount; ++i) {
            if (m_Timers[i].nId == nId) {
            	m_Timers[i].nExpireTime = Hardware::Millis() + nIntervalMillis;
            	m_Timers[i].nIntervalMillis = nIntervalMillis;

            	return true;
            }
        }

        return false;
    }

	void IRun() {
	    const auto nCurrentTime = Hardware::Millis();

	    for (uint32_t i = 0; i < m_nTimersCount; i++) {
	        if (m_Timers[i].nExpireTime <= nCurrentTime) {
	        	m_Timers[i].callback();
	            m_Timers[i].nExpireTime = nCurrentTime + m_Timers[i].nIntervalMillis;
	        }
	    }
	}

private:
	Timer m_Timers[SOFTWARE_TIMERS_MAX];
	uint32_t m_nTimersCount;
	int32_t m_nNextId;
};

}  // namespace hal

#endif /* HAL_TIMERS_H_ */
