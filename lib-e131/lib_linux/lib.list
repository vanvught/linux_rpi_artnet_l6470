In archive lib_linux/libe131.a:

e117const.o:     file format elf64-x86-64


e131bridgeconst.o:     file format elf64-x86-64


e131bridge.o:     file format elf64-x86-64


Disassembly of section .text._ZN7networkL15convert_to_uintEhhhh:

0000000000000000 <network::convert_to_uint(unsigned char, unsigned char, unsigned char, unsigned char)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 c8                	mov    %ecx,%eax
   6:	89 f9                	mov    %edi,%ecx
   8:	88 4d fc             	mov    %cl,-0x4(%rbp)
   b:	89 f1                	mov    %esi,%ecx
   d:	88 4d f8             	mov    %cl,-0x8(%rbp)
  10:	88 55 f4             	mov    %dl,-0xc(%rbp)
  13:	88 45 f0             	mov    %al,-0x10(%rbp)
  16:	0f b6 55 fc          	movzbl -0x4(%rbp),%edx
  1a:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax
  1e:	c1 e0 08             	shl    $0x8,%eax
  21:	09 c2                	or     %eax,%edx
  23:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  27:	c1 e0 10             	shl    $0x10,%eax
  2a:	09 c2                	or     %eax,%edx
  2c:	0f b6 45 f0          	movzbl -0x10(%rbp),%eax
  30:	c1 e0 18             	shl    $0x18,%eax
  33:	09 d0                	or     %edx,%eax
  35:	5d                   	pop    %rbp
  36:	c3                   	ret    

Disassembly of section .text._ZNK7Network11GetHostNameEv:

0000000000000000 <Network::GetHostName() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 1c          	add    $0x1c,%rax
  14:	5d                   	pop    %rbp
  15:	c3                   	ret    

Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # f <Network::Get()+0xf>
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text._ZN4e131L24universe_to_multicast_ipEt:

0000000000000000 <e131::universe_to_multicast_ip(unsigned short)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	66 89 45 fc          	mov    %ax,-0x4(%rbp)
   e:	b9 00 00 00 00       	mov    $0x0,%ecx
  13:	ba 00 00 00 00       	mov    $0x0,%edx
  18:	be ff 00 00 00       	mov    $0xff,%esi
  1d:	bf ef 00 00 00       	mov    $0xef,%edi
  22:	e8 00 00 00 00       	call   27 <e131::universe_to_multicast_ip(unsigned short)+0x27>
  27:	89 c2                	mov    %eax,%edx
  29:	0f b7 45 fc          	movzwl -0x4(%rbp),%eax
  2d:	c1 e0 18             	shl    $0x18,%eax
  30:	09 c2                	or     %eax,%edx
  32:	0f b7 45 fc          	movzwl -0x4(%rbp),%eax
  36:	c1 e0 08             	shl    $0x8,%eax
  39:	25 00 00 ff 00       	and    $0xff0000,%eax
  3e:	09 d0                	or     %edx,%eax
  40:	c9                   	leave  
  41:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data3GetEv:

0000000000000000 <lightset::Data::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # f <lightset::Data::Get()+0xf>
   f:	84 c0                	test   %al,%al
  11:	0f 94 c0             	sete   %al
  14:	84 c0                	test   %al,%al
  16:	74 36                	je     4e <lightset::Data::Get()+0x4e>
  18:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1f <lightset::Data::Get()+0x1f>
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	call   27 <lightset::Data::Get()+0x27>
  27:	85 c0                	test   %eax,%eax
  29:	0f 95 c0             	setne  %al
  2c:	84 c0                	test   %al,%al
  2e:	74 1e                	je     4e <lightset::Data::Get()+0x4e>
  30:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 37 <lightset::Data::Get()+0x37>
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	call   3f <lightset::Data::Get()+0x3f>
  3f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 46 <lightset::Data::Get()+0x46>
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	call   4e <lightset::Data::Get()+0x4e>
  4e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 55 <lightset::Data::Get()+0x55>
  55:	5d                   	pop    %rbp
  56:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data10SetSourceAEjPKhj:

0000000000000000 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	89 7d fc             	mov    %edi,-0x4(%rbp)
   f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  13:	89 55 f8             	mov    %edx,-0x8(%rbp)
  16:	e8 00 00 00 00       	call   1b <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)+0x1b>
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  21:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  25:	8b 45 fc             	mov    -0x4(%rbp),%eax
  28:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2e:	89 c6                	mov    %eax,%esi
  30:	e8 00 00 00 00       	call   35 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)+0x35>
  35:	90                   	nop
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data12MergeSourceAEjPKhjNS_9MergeModeE:

0000000000000000 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 7d fc             	mov    %edi,-0x4(%rbp)
   f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  13:	89 55 f8             	mov    %edx,-0x8(%rbp)
  16:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  19:	e8 00 00 00 00       	call   1e <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x1e>
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	8b 75 ec             	mov    -0x14(%rbp),%esi
  24:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  27:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  2b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  2e:	41 89 f0             	mov    %esi,%r8d
  31:	89 c6                	mov    %eax,%esi
  33:	e8 00 00 00 00       	call   38 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x38>
  38:	90                   	nop
  39:	c9                   	leave  
  3a:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data10SetSourceBEjPKhj:

0000000000000000 <lightset::Data::SetSourceB(unsigned int, unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	89 7d fc             	mov    %edi,-0x4(%rbp)
   f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  13:	89 55 f8             	mov    %edx,-0x8(%rbp)
  16:	e8 00 00 00 00       	call   1b <lightset::Data::SetSourceB(unsigned int, unsigned char const*, unsigned int)+0x1b>
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  21:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  25:	8b 45 fc             	mov    -0x4(%rbp),%eax
  28:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  2e:	89 c6                	mov    %eax,%esi
  30:	e8 00 00 00 00       	call   35 <lightset::Data::SetSourceB(unsigned int, unsigned char const*, unsigned int)+0x35>
  35:	90                   	nop
  36:	c9                   	leave  
  37:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data12MergeSourceBEjPKhjNS_9MergeModeE:

0000000000000000 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	89 7d fc             	mov    %edi,-0x4(%rbp)
   f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  13:	89 55 f8             	mov    %edx,-0x8(%rbp)
  16:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  19:	e8 00 00 00 00       	call   1e <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x1e>
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	8b 75 ec             	mov    -0x14(%rbp),%esi
  24:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  27:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  2b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  2e:	41 89 f0             	mov    %esi,%r8d
  31:	89 c6                	mov    %eax,%esi
  33:	e8 00 00 00 00       	call   38 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x38>
  38:	90                   	nop
  39:	c9                   	leave  
  3a:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data6OutputEP8LightSetj:

0000000000000000 <lightset::Data::Output(LightSet*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	e8 00 00 00 00       	call   18 <lightset::Data::Output(LightSet*, unsigned int)+0x18>
  18:	48 89 c1             	mov    %rax,%rcx
  1b:	8b 55 f4             	mov    -0xc(%rbp),%edx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 c6             	mov    %rax,%rsi
  25:	48 89 cf             	mov    %rcx,%rdi
  28:	e8 00 00 00 00       	call   2d <lightset::Data::Output(LightSet*, unsigned int)+0x2d>
  2d:	90                   	nop
  2e:	c9                   	leave  
  2f:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data11ClearLengthEj:

0000000000000000 <lightset::Data::ClearLength(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	89 7d fc             	mov    %edi,-0x4(%rbp)
   f:	e8 00 00 00 00       	call   14 <lightset::Data::ClearLength(unsigned int)+0x14>
  14:	48 89 c2             	mov    %rax,%rdx
  17:	8b 45 fc             	mov    -0x4(%rbp),%eax
  1a:	89 c6                	mov    %eax,%esi
  1c:	48 89 d7             	mov    %rdx,%rdi
  1f:	e8 00 00 00 00       	call   24 <lightset::Data::ClearLength(unsigned int)+0x24>
  24:	90                   	nop
  25:	c9                   	leave  
  26:	c3                   	ret    

Disassembly of section .text._ZN8lightset4DataC2Ev:

0000000000000000 <lightset::Data::Data()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data13IMergeSourceAEjPKhjNS_9MergeModeE:

0000000000000000 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  1a:	44 89 45 d4          	mov    %r8d,-0x2c(%rbp)
  1e:	8b 55 e0             	mov    -0x20(%rbp),%edx
  21:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  24:	48 69 c8 04 06 00 00 	imul   $0x604,%rax,%rcx
  2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2f:	48 01 c1             	add    %rax,%rcx
  32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  36:	48 89 c6             	mov    %rax,%rsi
  39:	48 89 cf             	mov    %rcx,%rdi
  3c:	e8 00 00 00 00       	call   41 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x41>
  41:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  45:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  48:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  4f:	48 01 d0             	add    %rdx,%rax
  52:	48 8d 90 00 06 00 00 	lea    0x600(%rax),%rdx
  59:	8b 45 e0             	mov    -0x20(%rbp),%eax
  5c:	89 02                	mov    %eax,(%rdx)
  5e:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  62:	0f 85 81 00 00 00    	jne    e9 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0xe9>
  68:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  6f:	eb 6e                	jmp    df <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0xdf>
  71:	8b 55 fc             	mov    -0x4(%rbp),%edx
  74:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  77:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  7e:	48 01 d0             	add    %rdx,%rax
  81:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  88:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8c:	48 01 c2             	add    %rax,%rdx
  8f:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  92:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  95:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  9c:	48 01 c1             	add    %rax,%rcx
  9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a3:	48 01 c8             	add    %rcx,%rax
  a6:	48 89 d6             	mov    %rdx,%rsi
  a9:	48 89 c7             	mov    %rax,%rdi
  ac:	e8 00 00 00 00       	call   b1 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0xb1>
  b1:	0f b6 00             	movzbl (%rax),%eax
  b4:	88 45 fb             	mov    %al,-0x5(%rbp)
  b7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  bb:	8b 55 fc             	mov    -0x4(%rbp),%edx
  be:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  c1:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  c8:	48 01 c8             	add    %rcx,%rax
  cb:	48 01 d0             	add    %rdx,%rax
  ce:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
  d5:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  d9:	88 02                	mov    %al,(%rdx)
  db:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  df:	8b 45 fc             	mov    -0x4(%rbp),%eax
  e2:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  e5:	72 8a                	jb     71 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x71>
  e7:	eb 2a                	jmp    113 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x113>
  e9:	8b 55 e0             	mov    -0x20(%rbp),%edx
  ec:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  ef:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  f6:	48 8d 88 00 04 00 00 	lea    0x400(%rax),%rcx
  fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 101:	48 01 c1             	add    %rax,%rcx
 104:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 108:	48 89 c6             	mov    %rax,%rsi
 10b:	48 89 cf             	mov    %rcx,%rdi
 10e:	e8 00 00 00 00       	call   113 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x113>
 113:	c9                   	leave  
 114:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data13IMergeSourceBEjPKhjNS_9MergeModeE:

0000000000000000 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  17:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  1a:	44 89 45 d4          	mov    %r8d,-0x2c(%rbp)
  1e:	8b 55 e0             	mov    -0x20(%rbp),%edx
  21:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  24:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  2b:	48 8d 88 00 02 00 00 	lea    0x200(%rax),%rcx
  32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  36:	48 01 c1             	add    %rax,%rcx
  39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3d:	48 89 c6             	mov    %rax,%rsi
  40:	48 89 cf             	mov    %rcx,%rdi
  43:	e8 00 00 00 00       	call   48 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x48>
  48:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  4f:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  56:	48 01 d0             	add    %rdx,%rax
  59:	48 8d 90 00 06 00 00 	lea    0x600(%rax),%rdx
  60:	8b 45 e0             	mov    -0x20(%rbp),%eax
  63:	89 02                	mov    %eax,(%rdx)
  65:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  69:	0f 85 81 00 00 00    	jne    f0 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0xf0>
  6f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  76:	eb 6e                	jmp    e6 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0xe6>
  78:	8b 55 fc             	mov    -0x4(%rbp),%edx
  7b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  7e:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  85:	48 01 d0             	add    %rdx,%rax
  88:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  93:	48 01 c2             	add    %rax,%rdx
  96:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  99:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  9c:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  a3:	48 01 c1             	add    %rax,%rcx
  a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  aa:	48 01 c8             	add    %rcx,%rax
  ad:	48 89 d6             	mov    %rdx,%rsi
  b0:	48 89 c7             	mov    %rax,%rdi
  b3:	e8 00 00 00 00       	call   b8 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0xb8>
  b8:	0f b6 00             	movzbl (%rax),%eax
  bb:	88 45 fb             	mov    %al,-0x5(%rbp)
  be:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  c2:	8b 55 fc             	mov    -0x4(%rbp),%edx
  c5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  c8:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  cf:	48 01 c8             	add    %rcx,%rax
  d2:	48 01 d0             	add    %rdx,%rax
  d5:	48 8d 90 00 04 00 00 	lea    0x400(%rax),%rdx
  dc:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  e0:	88 02                	mov    %al,(%rdx)
  e2:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  e6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  e9:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  ec:	72 8a                	jb     78 <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x78>
  ee:	eb 2a                	jmp    11a <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x11a>
  f0:	8b 55 e0             	mov    -0x20(%rbp),%edx
  f3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  f6:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  fd:	48 8d 88 00 04 00 00 	lea    0x400(%rax),%rcx
 104:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 108:	48 01 c1             	add    %rax,%rcx
 10b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 10f:	48 89 c6             	mov    %rax,%rsi
 112:	48 89 cf             	mov    %rcx,%rdi
 115:	e8 00 00 00 00       	call   11a <lightset::Data::IMergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x11a>
 11a:	c9                   	leave  
 11b:	c3                   	ret    

Disassembly of section .text._ZNK8lightset4Data7IOutputEP8LightSetj:

0000000000000000 <lightset::Data::IOutput(LightSet*, unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	89 55 ec             	mov    %edx,-0x14(%rbp)
  17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1b:	48 8b 00             	mov    (%rax),%rax
  1e:	48 83 c0 20          	add    $0x20,%rax
  22:	4c 8b 00             	mov    (%rax),%r8
  25:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  29:	8b 45 ec             	mov    -0x14(%rbp),%eax
  2c:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  33:	48 01 d0             	add    %rdx,%rax
  36:	48 05 00 06 00 00    	add    $0x600,%rax
  3c:	8b 10                	mov    (%rax),%edx
  3e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  41:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  48:	48 8d 88 00 04 00 00 	lea    0x400(%rax),%rcx
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  53:	48 8d 3c 01          	lea    (%rcx,%rax,1),%rdi
  57:	8b 75 ec             	mov    -0x14(%rbp),%esi
  5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  5e:	89 d1                	mov    %edx,%ecx
  60:	48 89 fa             	mov    %rdi,%rdx
  63:	48 89 c7             	mov    %rax,%rdi
  66:	41 ff d0             	call   *%r8
  69:	90                   	nop
  6a:	c9                   	leave  
  6b:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data12IClearLengthEj:

0000000000000000 <lightset::Data::IClearLength(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  13:	8b 45 f4             	mov    -0xc(%rbp),%eax
  16:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  1d:	48 01 d0             	add    %rdx,%rax
  20:	48 05 00 06 00 00    	add    $0x600,%rax
  26:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  2c:	90                   	nop
  2d:	5d                   	pop    %rbp
  2e:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge13SetSourceNameEPKc:

0000000000000000 <E131Bridge::SetSourceName(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 8d 48 44          	lea    0x44(%rax),%rcx
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	ba 3f 00 00 00       	mov    $0x3f,%edx
  25:	48 89 c6             	mov    %rax,%rsi
  28:	48 89 cf             	mov    %rcx,%rdi
  2b:	e8 00 00 00 00       	call   30 <E131Bridge::SetSourceName(char const*)+0x30>
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	c6 80 83 00 00 00 00 	movb   $0x0,0x83(%rax)
  3b:	90                   	nop
  3c:	c9                   	leave  
  3d:	c3                   	ret    

Disassembly of section .text._ZN8Hardware7GetModeEv:

0000000000000000 <Hardware::GetMode()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	8b 80 50 02 00 00    	mov    0x250(%rax),%eax
  16:	5d                   	pop    %rbp
  17:	c3                   	ret    

Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # f <Hardware::Get()+0xf>
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text._ZN3halL12panel_led_onEj:

0000000000000000 <hal::panel_led_on(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text._ZN3halL13panel_led_offEj:

0000000000000000 <hal::panel_led_off(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text._ZN10E131BridgeC2Ev:

0000000000000000 <E131Bridge::E131Bridge()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 78          	sub    $0x78,%rsp
   d:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  24:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%rax)
  2a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  2e:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  35:	00 
  36:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  3a:	c6 40 10 01          	movb   $0x1,0x10(%rax)
  3e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  42:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%rax)
  49:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4d:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%rax)
  54:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  58:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  5f:	00 
  60:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  64:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  6b:	00 
  6c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  70:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%rax)
  77:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  7b:	48 c7 80 88 00 00 00 	movq   $0x0,0x88(%rax)
  82:	00 00 00 00 
  86:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8a:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 91 <E131Bridge::E131Bridge()+0x91>
  91:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
  98:	e9 8d 00 00 00       	jmp    12a <E131Bridge::E131Bridge()+0x12a>
  9d:	8b 55 9c             	mov    -0x64(%rbp),%edx
  a0:	48 89 d0             	mov    %rdx,%rax
  a3:	48 c1 e0 04          	shl    $0x4,%rax
  a7:	48 01 d0             	add    %rdx,%rax
  aa:	48 c1 e0 02          	shl    $0x2,%rax
  ae:	48 8d 90 20 05 00 00 	lea    0x520(%rax),%rdx
  b5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  b9:	48 01 d0             	add    %rdx,%rax
  bc:	48 83 c0 0c          	add    $0xc,%rax
  c0:	ba 44 00 00 00       	mov    $0x44,%edx
  c5:	be 00 00 00 00       	mov    $0x0,%esi
  ca:	48 89 c7             	mov    %rax,%rdi
  cd:	e8 00 00 00 00       	call   d2 <E131Bridge::E131Bridge()+0xd2>
  d2:	8b 55 9c             	mov    -0x64(%rbp),%edx
  d5:	48 89 d0             	mov    %rdx,%rax
  d8:	48 01 c0             	add    %rax,%rax
  db:	48 01 d0             	add    %rdx,%rax
  de:	48 c1 e0 02          	shl    $0x2,%rax
  e2:	48 8d 90 30 06 00 00 	lea    0x630(%rax),%rdx
  e9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  ed:	48 01 d0             	add    %rdx,%rax
  f0:	48 83 c0 0c          	add    $0xc,%rax
  f4:	ba 0c 00 00 00       	mov    $0xc,%edx
  f9:	be 00 00 00 00       	mov    $0x0,%esi
  fe:	48 89 c7             	mov    %rax,%rdi
 101:	e8 00 00 00 00       	call   106 <E131Bridge::E131Bridge()+0x106>
 106:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
 10a:	8b 55 9c             	mov    -0x64(%rbp),%edx
 10d:	48 89 d0             	mov    %rdx,%rax
 110:	48 01 c0             	add    %rax,%rax
 113:	48 01 d0             	add    %rdx,%rax
 116:	48 c1 e0 02          	shl    $0x2,%rax
 11a:	48 01 c8             	add    %rcx,%rax
 11d:	48 05 45 06 00 00    	add    $0x645,%rax
 123:	c6 00 64             	movb   $0x64,(%rax)
 126:	83 45 9c 01          	addl   $0x1,-0x64(%rbp)
 12a:	83 7d 9c 03          	cmpl   $0x3,-0x64(%rbp)
 12e:	0f 86 69 ff ff ff    	jbe    9d <E131Bridge::E131Bridge()+0x9d>
 134:	48 8b 45 88          	mov    -0x78(%rbp),%rax
 138:	48 05 0c 05 00 00    	add    $0x50c,%rax
 13e:	ba 20 00 00 00       	mov    $0x20,%edx
 143:	be 00 00 00 00       	mov    $0x0,%esi
 148:	48 89 c7             	mov    %rax,%rdi
 14b:	e8 00 00 00 00       	call   150 <E131Bridge::E131Bridge()+0x150>
 150:	48 8b 45 88          	mov    -0x78(%rbp),%rax
 154:	c6 80 24 05 00 00 01 	movb   $0x1,0x524(%rax)
 15b:	e8 00 00 00 00       	call   160 <E131Bridge::E131Bridge()+0x160>
 160:	48 89 c2             	mov    %rax,%rdx
 163:	48 8d 45 9b          	lea    -0x65(%rbp),%rax
 167:	48 89 c6             	mov    %rax,%rsi
 16a:	48 89 d7             	mov    %rdx,%rdi
 16d:	e8 00 00 00 00       	call   172 <E131Bridge::E131Bridge()+0x172>
 172:	48 89 c3             	mov    %rax,%rbx
 175:	e8 00 00 00 00       	call   17a <E131Bridge::E131Bridge()+0x17a>
 17a:	48 89 c7             	mov    %rax,%rdi
 17d:	e8 00 00 00 00       	call   182 <E131Bridge::E131Bridge()+0x182>
 182:	48 89 c2             	mov    %rax,%rdx
 185:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
 189:	49 89 d8             	mov    %rbx,%r8
 18c:	48 89 d1             	mov    %rdx,%rcx
 18f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 196 <E131Bridge::E131Bridge()+0x196>
 196:	be 40 00 00 00       	mov    $0x40,%esi
 19b:	48 89 c7             	mov    %rax,%rdi
 19e:	b8 00 00 00 00       	mov    $0x0,%eax
 1a3:	e8 00 00 00 00       	call   1a8 <E131Bridge::E131Bridge()+0x1a8>
 1a8:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
 1ac:	48 8b 45 88          	mov    -0x78(%rbp),%rax
 1b0:	48 89 d6             	mov    %rdx,%rsi
 1b3:	48 89 c7             	mov    %rax,%rdi
 1b6:	e8 00 00 00 00       	call   1bb <E131Bridge::E131Bridge()+0x1bb>
 1bb:	e8 00 00 00 00       	call   1c0 <E131Bridge::E131Bridge()+0x1c0>
 1c0:	be c0 15 00 00       	mov    $0x15c0,%esi
 1c5:	48 89 c7             	mov    %rax,%rdi
 1c8:	e8 00 00 00 00       	call   1cd <E131Bridge::E131Bridge()+0x1cd>
 1cd:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
 1d1:	89 02                	mov    %eax,(%rdx)
 1d3:	e8 00 00 00 00       	call   1d8 <E131Bridge::E131Bridge()+0x1d8>
 1d8:	48 89 c2             	mov    %rax,%rdx
 1db:	48 8b 45 88          	mov    -0x78(%rbp),%rax
 1df:	48 83 c0 34          	add    $0x34,%rax
 1e3:	48 89 c6             	mov    %rax,%rsi
 1e6:	48 89 d7             	mov    %rdx,%rdi
 1e9:	e8 00 00 00 00       	call   1ee <E131Bridge::E131Bridge()+0x1ee>
 1ee:	90                   	nop
 1ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1f3:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 1fa:	00 00 
 1fc:	74 05                	je     203 <E131Bridge::E131Bridge()+0x203>
 1fe:	e8 00 00 00 00       	call   203 <E131Bridge::E131Bridge()+0x203>
 203:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 207:	c9                   	leave  
 208:	c3                   	ret    

Disassembly of section .text._ZN10E131BridgeD2Ev:

0000000000000000 <E131Bridge::~E131Bridge()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge5StartEv:

0000000000000000 <E131Bridge::Start()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	e8 00 00 00 00       	call   15 <E131Bridge::Start()+0x15>
  15:	be 02 00 00 00       	mov    $0x2,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	call   22 <E131Bridge::Start()+0x22>
  22:	90                   	nop
  23:	c9                   	leave  
  24:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge4StopEv:

0000000000000000 <E131Bridge::Stop()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	c6 80 0c 05 00 00 01 	movb   $0x1,0x50c(%rax)
  1b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  22:	eb 60                	jmp    84 <E131Bridge::Stop()+0x84>
  24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  28:	48 8b 40 08          	mov    0x8(%rax),%rax
  2c:	48 85 c0             	test   %rax,%rax
  2f:	74 24                	je     55 <E131Bridge::Stop()+0x55>
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 8b 40 08          	mov    0x8(%rax),%rax
  39:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  3d:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  41:	48 8b 12             	mov    (%rdx),%rdx
  44:	48 83 c2 18          	add    $0x18,%rdx
  48:	48 8b 0a             	mov    (%rdx),%rcx
  4b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  4e:	89 d6                	mov    %edx,%esi
  50:	48 89 c7             	mov    %rax,%rdi
  53:	ff d1                	call   *%rcx
  55:	8b 45 fc             	mov    -0x4(%rbp),%eax
  58:	89 c7                	mov    %eax,%edi
  5a:	e8 00 00 00 00       	call   5f <E131Bridge::Stop()+0x5f>
  5f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  63:	8b 55 fc             	mov    -0x4(%rbp),%edx
  66:	48 89 d0             	mov    %rdx,%rax
  69:	48 c1 e0 04          	shl    $0x4,%rax
  6d:	48 01 d0             	add    %rdx,%rax
  70:	48 c1 e0 02          	shl    $0x2,%rax
  74:	48 01 c8             	add    %rcx,%rax
  77:	48 05 6c 05 00 00    	add    $0x56c,%rax
  7d:	c6 00 00             	movb   $0x0,(%rax)
  80:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  84:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  88:	76 9a                	jbe    24 <E131Bridge::Stop()+0x24>
  8a:	e8 00 00 00 00       	call   8f <E131Bridge::Stop()+0x8f>
  8f:	be 00 00 00 00       	mov    $0x0,%esi
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	call   9c <E131Bridge::Stop()+0x9c>
  9c:	90                   	nop
  9d:	c9                   	leave  
  9e:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge25SetSynchronizationAddressEbbt:

0000000000000000 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	89 c8                	mov    %ecx,%eax
  13:	89 f1                	mov    %esi,%ecx
  15:	88 4d d4             	mov    %cl,-0x2c(%rbp)
  18:	88 55 d0             	mov    %dl,-0x30(%rbp)
  1b:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
  1f:	80 7d d4 00          	cmpb   $0x0,-0x2c(%rbp)
  23:	74 10                	je     35 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x35>
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  29:	48 05 1e 05 00 00    	add    $0x51e,%rax
  2f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  33:	eb 18                	jmp    4d <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x4d>
  35:	80 7d d0 00          	cmpb   $0x0,-0x30(%rbp)
  39:	0f 84 81 00 00 00    	je     c0 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xc0>
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43:	48 05 20 05 00 00    	add    $0x520,%rax
  49:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  51:	0f b7 00             	movzwl (%rax),%eax
  54:	66 85 c0             	test   %ax,%ax
  57:	75 0d                	jne    66 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x66>
  59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5d:	0f b7 55 cc          	movzwl -0x34(%rbp),%edx
  61:	66 89 10             	mov    %dx,(%rax)
  64:	eb 33                	jmp    99 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x99>
  66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6a:	0f b7 00             	movzwl (%rax),%eax
  6d:	66 39 45 cc          	cmp    %ax,-0x34(%rbp)
  71:	74 50                	je     c3 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xc3>
  73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  77:	0f b7 00             	movzwl (%rax),%eax
  7a:	0f b7 d0             	movzwl %ax,%edx
  7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  81:	be 04 00 00 00       	mov    $0x4,%esi
  86:	48 89 c7             	mov    %rax,%rdi
  89:	e8 00 00 00 00       	call   8e <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x8e>
  8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  92:	0f b7 55 cc          	movzwl -0x34(%rbp),%edx
  96:	66 89 10             	mov    %dx,(%rax)
  99:	e8 00 00 00 00       	call   9e <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x9e>
  9e:	48 89 c3             	mov    %rax,%rbx
  a1:	0f b7 45 cc          	movzwl -0x34(%rbp),%eax
  a5:	89 c7                	mov    %eax,%edi
  a7:	e8 00 00 00 00       	call   ac <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xac>
  ac:	89 c2                	mov    %eax,%edx
  ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b2:	8b 00                	mov    (%rax),%eax
  b4:	89 c6                	mov    %eax,%esi
  b6:	48 89 df             	mov    %rbx,%rdi
  b9:	e8 00 00 00 00       	call   be <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xbe>
  be:	eb 04                	jmp    c4 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xc4>
  c0:	90                   	nop
  c1:	eb 01                	jmp    c4 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0xc4>
  c3:	90                   	nop
  c4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  c8:	c9                   	leave  
  c9:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge13LeaveUniverseEjt:

0000000000000000 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  14:	89 d0                	mov    %edx,%eax
  16:	66 89 45 d0          	mov    %ax,-0x30(%rbp)
  1a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  21:	eb 36                	jmp    59 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x59>
  23:	8b 45 ec             	mov    -0x14(%rbp),%eax
  26:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
  29:	74 29                	je     54 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x54>
  2b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  2f:	8b 55 ec             	mov    -0x14(%rbp),%edx
  32:	48 89 d0             	mov    %rdx,%rax
  35:	48 c1 e0 04          	shl    $0x4,%rax
  39:	48 01 d0             	add    %rdx,%rax
  3c:	48 c1 e0 02          	shl    $0x2,%rax
  40:	48 01 c8             	add    %rcx,%rax
  43:	48 05 2c 05 00 00    	add    $0x52c,%rax
  49:	0f b7 00             	movzwl (%rax),%eax
  4c:	66 39 45 d0          	cmp    %ax,-0x30(%rbp)
  50:	74 34                	je     86 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x86>
  52:	eb 01                	jmp    55 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x55>
  54:	90                   	nop
  55:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  59:	83 7d ec 03          	cmpl   $0x3,-0x14(%rbp)
  5d:	76 c4                	jbe    23 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x23>
  5f:	e8 00 00 00 00       	call   64 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x64>
  64:	48 89 c3             	mov    %rax,%rbx
  67:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  6b:	89 c7                	mov    %eax,%edi
  6d:	e8 00 00 00 00       	call   72 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x72>
  72:	89 c2                	mov    %eax,%edx
  74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  78:	8b 00                	mov    (%rax),%eax
  7a:	89 c6                	mov    %eax,%esi
  7c:	48 89 df             	mov    %rbx,%rdi
  7f:	e8 00 00 00 00       	call   84 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x84>
  84:	eb 01                	jmp    87 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x87>
  86:	90                   	nop
  87:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
  8b:	c9                   	leave  
  8c:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge11SetUniverseEjN8lightset7PortDirEt:

0000000000000000 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  14:	89 55 e0             	mov    %edx,-0x20(%rbp)
  17:	89 c8                	mov    %ecx,%eax
  19:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
  1d:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  21:	0f 85 e7 00 00 00    	jne    10e <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x10e>
  27:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  2b:	0f 87 dd 00 00 00    	ja     10e <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x10e>
  31:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  35:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  38:	48 89 d0             	mov    %rdx,%rax
  3b:	48 01 c0             	add    %rax,%rax
  3e:	48 01 d0             	add    %rdx,%rax
  41:	48 c1 e0 02          	shl    $0x2,%rax
  45:	48 01 c8             	add    %rcx,%rax
  48:	48 05 3e 06 00 00    	add    $0x63e,%rax
  4e:	0f b6 00             	movzbl (%rax),%eax
  51:	84 c0                	test   %al,%al
  53:	74 2b                	je     80 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x80>
  55:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  59:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  5c:	48 89 d0             	mov    %rdx,%rax
  5f:	48 01 c0             	add    %rax,%rax
  62:	48 01 d0             	add    %rdx,%rax
  65:	48 c1 e0 02          	shl    $0x2,%rax
  69:	48 01 c8             	add    %rcx,%rax
  6c:	48 05 3c 06 00 00    	add    $0x63c,%rax
  72:	0f b7 00             	movzwl (%rax),%eax
  75:	66 39 45 dc          	cmp    %ax,-0x24(%rbp)
  79:	75 3d                	jne    b8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xb8>
  7b:	e9 71 02 00 00       	jmp    2f1 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x2f1>
  80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  84:	0f b6 80 22 05 00 00 	movzbl 0x522(%rax),%eax
  8b:	8d 50 01             	lea    0x1(%rax),%edx
  8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  92:	88 90 22 05 00 00    	mov    %dl,0x522(%rax)
  98:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  9c:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  9f:	48 89 d0             	mov    %rdx,%rax
  a2:	48 01 c0             	add    %rax,%rax
  a5:	48 01 d0             	add    %rdx,%rax
  a8:	48 c1 e0 02          	shl    $0x2,%rax
  ac:	48 01 c8             	add    %rcx,%rax
  af:	48 05 3e 06 00 00    	add    $0x63e,%rax
  b5:	c6 00 01             	movb   $0x1,(%rax)
  b8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  bc:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  bf:	48 89 d0             	mov    %rdx,%rax
  c2:	48 01 c0             	add    %rax,%rax
  c5:	48 01 d0             	add    %rdx,%rax
  c8:	48 c1 e0 02          	shl    $0x2,%rax
  cc:	48 01 c8             	add    %rcx,%rax
  cf:	48 8d 90 3c 06 00 00 	lea    0x63c(%rax),%rdx
  d6:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  da:	66 89 02             	mov    %ax,(%rdx)
  dd:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  e1:	89 c7                	mov    %eax,%edi
  e3:	e8 00 00 00 00       	call   e8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xe8>
  e8:	89 c2                	mov    %eax,%edx
  ea:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  ee:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  f1:	48 89 c8             	mov    %rcx,%rax
  f4:	48 01 c0             	add    %rax,%rax
  f7:	48 01 c8             	add    %rcx,%rax
  fa:	48 c1 e0 02          	shl    $0x2,%rax
  fe:	48 01 f0             	add    %rsi,%rax
 101:	48 05 40 06 00 00    	add    $0x640,%rax
 107:	89 10                	mov    %edx,(%rax)
 109:	e9 e3 01 00 00       	jmp    2f1 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x2f1>
 10e:	83 7d e0 02          	cmpl   $0x2,-0x20(%rbp)
 112:	0f 85 e8 00 00 00    	jne    200 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x200>
 118:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
 11c:	77 73                	ja     191 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x191>
 11e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 122:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 125:	48 89 d0             	mov    %rdx,%rax
 128:	48 c1 e0 04          	shl    $0x4,%rax
 12c:	48 01 d0             	add    %rdx,%rax
 12f:	48 c1 e0 02          	shl    $0x2,%rax
 133:	48 01 c8             	add    %rcx,%rax
 136:	48 05 2e 05 00 00    	add    $0x52e,%rax
 13c:	0f b6 00             	movzbl (%rax),%eax
 13f:	84 c0                	test   %al,%al
 141:	74 4e                	je     191 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x191>
 143:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 147:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 14a:	48 89 d0             	mov    %rdx,%rax
 14d:	48 c1 e0 04          	shl    $0x4,%rax
 151:	48 01 d0             	add    %rdx,%rax
 154:	48 c1 e0 02          	shl    $0x2,%rax
 158:	48 01 c8             	add    %rcx,%rax
 15b:	48 05 2e 05 00 00    	add    $0x52e,%rax
 161:	c6 00 00             	movb   $0x0,(%rax)
 164:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 168:	0f b6 80 23 05 00 00 	movzbl 0x523(%rax),%eax
 16f:	8d 50 ff             	lea    -0x1(%rax),%edx
 172:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 176:	88 90 23 05 00 00    	mov    %dl,0x523(%rax)
 17c:	0f b7 55 dc          	movzwl -0x24(%rbp),%edx
 180:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
 183:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 187:	89 ce                	mov    %ecx,%esi
 189:	48 89 c7             	mov    %rax,%rdi
 18c:	e8 00 00 00 00       	call   191 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x191>
 191:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
 195:	0f 87 52 01 00 00    	ja     2ed <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x2ed>
 19b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 19f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 1a2:	48 89 d0             	mov    %rdx,%rax
 1a5:	48 01 c0             	add    %rax,%rax
 1a8:	48 01 d0             	add    %rdx,%rax
 1ab:	48 c1 e0 02          	shl    $0x2,%rax
 1af:	48 01 c8             	add    %rcx,%rax
 1b2:	48 05 3e 06 00 00    	add    $0x63e,%rax
 1b8:	0f b6 00             	movzbl (%rax),%eax
 1bb:	84 c0                	test   %al,%al
 1bd:	0f 84 2a 01 00 00    	je     2ed <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x2ed>
 1c3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 1c7:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 1ca:	48 89 d0             	mov    %rdx,%rax
 1cd:	48 01 c0             	add    %rax,%rax
 1d0:	48 01 d0             	add    %rdx,%rax
 1d3:	48 c1 e0 02          	shl    $0x2,%rax
 1d7:	48 01 c8             	add    %rcx,%rax
 1da:	48 05 3e 06 00 00    	add    $0x63e,%rax
 1e0:	c6 00 00             	movb   $0x0,(%rax)
 1e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1e7:	0f b6 80 22 05 00 00 	movzbl 0x522(%rax),%eax
 1ee:	8d 50 ff             	lea    -0x1(%rax),%edx
 1f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1f5:	88 90 22 05 00 00    	mov    %dl,0x522(%rax)
 1fb:	e9 ed 00 00 00       	jmp    2ed <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x2ed>
 200:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 204:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 207:	48 89 d0             	mov    %rdx,%rax
 20a:	48 c1 e0 04          	shl    $0x4,%rax
 20e:	48 01 d0             	add    %rdx,%rax
 211:	48 c1 e0 02          	shl    $0x2,%rax
 215:	48 01 c8             	add    %rcx,%rax
 218:	48 05 2e 05 00 00    	add    $0x52e,%rax
 21e:	0f b6 00             	movzbl (%rax),%eax
 221:	84 c0                	test   %al,%al
 223:	74 42                	je     267 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x267>
 225:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 229:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 22c:	48 89 d0             	mov    %rdx,%rax
 22f:	48 c1 e0 04          	shl    $0x4,%rax
 233:	48 01 d0             	add    %rdx,%rax
 236:	48 c1 e0 02          	shl    $0x2,%rax
 23a:	48 01 c8             	add    %rcx,%rax
 23d:	48 05 2c 05 00 00    	add    $0x52c,%rax
 243:	0f b7 00             	movzwl (%rax),%eax
 246:	66 39 45 dc          	cmp    %ax,-0x24(%rbp)
 24a:	0f 84 a0 00 00 00    	je     2f0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x2f0>
 250:	0f b7 55 dc          	movzwl -0x24(%rbp),%edx
 254:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
 257:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 25b:	89 ce                	mov    %ecx,%esi
 25d:	48 89 c7             	mov    %rax,%rdi
 260:	e8 00 00 00 00       	call   265 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x265>
 265:	eb 39                	jmp    2a0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x2a0>
 267:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 26b:	0f b6 80 23 05 00 00 	movzbl 0x523(%rax),%eax
 272:	8d 50 01             	lea    0x1(%rax),%edx
 275:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 279:	88 90 23 05 00 00    	mov    %dl,0x523(%rax)
 27f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 283:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 286:	48 89 d0             	mov    %rdx,%rax
 289:	48 c1 e0 04          	shl    $0x4,%rax
 28d:	48 01 d0             	add    %rdx,%rax
 290:	48 c1 e0 02          	shl    $0x2,%rax
 294:	48 01 c8             	add    %rcx,%rax
 297:	48 05 2e 05 00 00    	add    $0x52e,%rax
 29d:	c6 00 01             	movb   $0x1,(%rax)
 2a0:	e8 00 00 00 00       	call   2a5 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x2a5>
 2a5:	48 89 c3             	mov    %rax,%rbx
 2a8:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
 2ac:	89 c7                	mov    %eax,%edi
 2ae:	e8 00 00 00 00       	call   2b3 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x2b3>
 2b3:	89 c2                	mov    %eax,%edx
 2b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 2b9:	8b 00                	mov    (%rax),%eax
 2bb:	89 c6                	mov    %eax,%esi
 2bd:	48 89 df             	mov    %rbx,%rdi
 2c0:	e8 00 00 00 00       	call   2c5 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x2c5>
 2c5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 2c9:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 2cc:	48 89 d0             	mov    %rdx,%rax
 2cf:	48 c1 e0 04          	shl    $0x4,%rax
 2d3:	48 01 d0             	add    %rdx,%rax
 2d6:	48 c1 e0 02          	shl    $0x2,%rax
 2da:	48 01 c8             	add    %rcx,%rax
 2dd:	48 8d 90 2c 05 00 00 	lea    0x52c(%rax),%rdx
 2e4:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
 2e8:	66 89 02             	mov    %ax,(%rdx)
 2eb:	eb 04                	jmp    2f1 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x2f1>
 2ed:	90                   	nop
 2ee:	eb 01                	jmp    2f1 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x2f1>
 2f0:	90                   	nop
 2f1:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 2f5:	c9                   	leave  
 2f6:	c3                   	ret    

Disassembly of section .text._ZNK10E131Bridge11GetUniverseEjRtN8lightset7PortDirE:

0000000000000000 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  13:	89 4d f0             	mov    %ecx,-0x10(%rbp)
  16:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  1a:	75 56                	jne    72 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x72>
  1c:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
  20:	77 49                	ja     6b <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x6b>
  22:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  26:	8b 55 f4             	mov    -0xc(%rbp),%edx
  29:	48 89 d0             	mov    %rdx,%rax
  2c:	48 01 c0             	add    %rax,%rax
  2f:	48 01 d0             	add    %rdx,%rax
  32:	48 c1 e0 02          	shl    $0x2,%rax
  36:	48 01 c8             	add    %rcx,%rax
  39:	48 05 3c 06 00 00    	add    $0x63c,%rax
  3f:	0f b7 10             	movzwl (%rax),%edx
  42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  46:	66 89 10             	mov    %dx,(%rax)
  49:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  4d:	8b 55 f4             	mov    -0xc(%rbp),%edx
  50:	48 89 d0             	mov    %rdx,%rax
  53:	48 01 c0             	add    %rax,%rax
  56:	48 01 d0             	add    %rdx,%rax
  59:	48 c1 e0 02          	shl    $0x2,%rax
  5d:	48 01 c8             	add    %rcx,%rax
  60:	48 05 3e 06 00 00    	add    $0x63e,%rax
  66:	0f b6 00             	movzbl (%rax),%eax
  69:	eb 50                	jmp    bb <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0xbb>
  6b:	b8 00 00 00 00       	mov    $0x0,%eax
  70:	eb 49                	jmp    bb <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0xbb>
  72:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  76:	8b 55 f4             	mov    -0xc(%rbp),%edx
  79:	48 89 d0             	mov    %rdx,%rax
  7c:	48 c1 e0 04          	shl    $0x4,%rax
  80:	48 01 d0             	add    %rdx,%rax
  83:	48 c1 e0 02          	shl    $0x2,%rax
  87:	48 01 c8             	add    %rcx,%rax
  8a:	48 05 2c 05 00 00    	add    $0x52c,%rax
  90:	0f b7 10             	movzwl (%rax),%edx
  93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  97:	66 89 10             	mov    %dx,(%rax)
  9a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  9e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  a1:	48 89 d0             	mov    %rdx,%rax
  a4:	48 c1 e0 04          	shl    $0x4,%rax
  a8:	48 01 d0             	add    %rdx,%rax
  ab:	48 c1 e0 02          	shl    $0x2,%rax
  af:	48 01 c8             	add    %rcx,%rax
  b2:	48 05 2e 05 00 00    	add    $0x52e,%rax
  b8:	0f b6 00             	movzbl (%rax),%eax
  bb:	5d                   	pop    %rbp
  bc:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge17UpdateMergeStatusEj:

0000000000000000 <E131Bridge::UpdateMergeStatus(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  13:	0f b6 80 0d 05 00 00 	movzbl 0x50d(%rax),%eax
  1a:	83 f0 01             	xor    $0x1,%eax
  1d:	84 c0                	test   %al,%al
  1f:	74 16                	je     37 <E131Bridge::UpdateMergeStatus(unsigned int)+0x37>
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	c6 80 0d 05 00 00 01 	movb   $0x1,0x50d(%rax)
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	c6 80 10 05 00 00 01 	movb   $0x1,0x510(%rax)
  37:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  3b:	8b 55 f4             	mov    -0xc(%rbp),%edx
  3e:	48 89 d0             	mov    %rdx,%rax
  41:	48 c1 e0 04          	shl    $0x4,%rax
  45:	48 01 d0             	add    %rdx,%rax
  48:	48 c1 e0 02          	shl    $0x2,%rax
  4c:	48 01 c8             	add    %rcx,%rax
  4f:	48 05 6d 05 00 00    	add    $0x56d,%rax
  55:	c6 00 01             	movb   $0x1,(%rax)
  58:	90                   	nop
  59:	5d                   	pop    %rbp
  5a:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge18CheckMergeTimeoutsEj:

0000000000000000 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  17:	8b 48 14             	mov    0x14(%rax),%ecx
  1a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  1e:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  21:	48 89 d0             	mov    %rdx,%rax
  24:	48 c1 e0 04          	shl    $0x4,%rax
  28:	48 01 d0             	add    %rdx,%rax
  2b:	48 c1 e0 02          	shl    $0x2,%rax
  2f:	48 01 f0             	add    %rsi,%rax
  32:	48 05 30 05 00 00    	add    $0x530,%rax
  38:	8b 10                	mov    (%rax),%edx
  3a:	89 c8                	mov    %ecx,%eax
  3c:	29 d0                	sub    %edx,%eax
  3e:	89 45 f8             	mov    %eax,-0x8(%rbp)
  41:	81 7d f8 10 27 00 00 	cmpl   $0x2710,-0x8(%rbp)
  48:	76 7a                	jbe    c4 <E131Bridge::CheckMergeTimeouts(unsigned int)+0xc4>
  4a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4e:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  51:	48 89 d0             	mov    %rdx,%rax
  54:	48 c1 e0 04          	shl    $0x4,%rax
  58:	48 01 d0             	add    %rdx,%rax
  5b:	48 c1 e0 02          	shl    $0x2,%rax
  5f:	48 01 c8             	add    %rcx,%rax
  62:	48 05 34 05 00 00    	add    $0x534,%rax
  68:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  6e:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  71:	48 89 d0             	mov    %rdx,%rax
  74:	48 c1 e0 04          	shl    $0x4,%rax
  78:	48 01 d0             	add    %rdx,%rax
  7b:	48 c1 e0 02          	shl    $0x2,%rax
  7f:	48 8d 90 20 05 00 00 	lea    0x520(%rax),%rdx
  86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8a:	48 01 d0             	add    %rdx,%rax
  8d:	48 83 c0 18          	add    $0x18,%rax
  91:	ba 10 00 00 00       	mov    $0x10,%edx
  96:	be 00 00 00 00       	mov    $0x0,%esi
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	call   a3 <E131Bridge::CheckMergeTimeouts(unsigned int)+0xa3>
  a3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  a7:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  aa:	48 89 d0             	mov    %rdx,%rax
  ad:	48 c1 e0 04          	shl    $0x4,%rax
  b1:	48 01 d0             	add    %rdx,%rax
  b4:	48 c1 e0 02          	shl    $0x2,%rax
  b8:	48 01 c8             	add    %rcx,%rax
  bb:	48 05 6d 05 00 00    	add    $0x56d,%rax
  c1:	c6 00 00             	movb   $0x0,(%rax)
  c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c8:	8b 48 14             	mov    0x14(%rax),%ecx
  cb:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  cf:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  d2:	48 89 d0             	mov    %rdx,%rax
  d5:	48 c1 e0 04          	shl    $0x4,%rax
  d9:	48 01 d0             	add    %rdx,%rax
  dc:	48 c1 e0 02          	shl    $0x2,%rax
  e0:	48 01 f0             	add    %rsi,%rax
  e3:	48 05 4c 05 00 00    	add    $0x54c,%rax
  e9:	8b 10                	mov    (%rax),%edx
  eb:	89 c8                	mov    %ecx,%eax
  ed:	29 d0                	sub    %edx,%eax
  ef:	89 45 fc             	mov    %eax,-0x4(%rbp)
  f2:	81 7d fc 10 27 00 00 	cmpl   $0x2710,-0x4(%rbp)
  f9:	76 7a                	jbe    175 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x175>
  fb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  ff:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 102:	48 89 d0             	mov    %rdx,%rax
 105:	48 c1 e0 04          	shl    $0x4,%rax
 109:	48 01 d0             	add    %rdx,%rax
 10c:	48 c1 e0 02          	shl    $0x2,%rax
 110:	48 01 c8             	add    %rcx,%rax
 113:	48 05 50 05 00 00    	add    $0x550,%rax
 119:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
 11f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 122:	48 89 d0             	mov    %rdx,%rax
 125:	48 c1 e0 04          	shl    $0x4,%rax
 129:	48 01 d0             	add    %rdx,%rax
 12c:	48 c1 e0 02          	shl    $0x2,%rax
 130:	48 8d 90 40 05 00 00 	lea    0x540(%rax),%rdx
 137:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 13b:	48 01 d0             	add    %rdx,%rax
 13e:	48 83 c0 14          	add    $0x14,%rax
 142:	ba 10 00 00 00       	mov    $0x10,%edx
 147:	be 00 00 00 00       	mov    $0x0,%esi
 14c:	48 89 c7             	mov    %rax,%rdi
 14f:	e8 00 00 00 00       	call   154 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x154>
 154:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 158:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 15b:	48 89 d0             	mov    %rdx,%rax
 15e:	48 c1 e0 04          	shl    $0x4,%rax
 162:	48 01 d0             	add    %rdx,%rax
 165:	48 c1 e0 02          	shl    $0x2,%rax
 169:	48 01 c8             	add    %rcx,%rax
 16c:	48 05 6d 05 00 00    	add    $0x56d,%rax
 172:	c6 00 00             	movb   $0x0,(%rax)
 175:	c6 45 f3 00          	movb   $0x0,-0xd(%rbp)
 179:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
 180:	eb 33                	jmp    1b5 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x1b5>
 182:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 186:	8b 55 f4             	mov    -0xc(%rbp),%edx
 189:	48 89 d0             	mov    %rdx,%rax
 18c:	48 c1 e0 04          	shl    $0x4,%rax
 190:	48 01 d0             	add    %rdx,%rax
 193:	48 c1 e0 02          	shl    $0x2,%rax
 197:	48 01 c8             	add    %rcx,%rax
 19a:	48 05 6d 05 00 00    	add    $0x56d,%rax
 1a0:	0f b6 00             	movzbl (%rax),%eax
 1a3:	0a 45 f3             	or     -0xd(%rbp),%al
 1a6:	0f b6 c0             	movzbl %al,%eax
 1a9:	85 c0                	test   %eax,%eax
 1ab:	0f 95 c0             	setne  %al
 1ae:	88 45 f3             	mov    %al,-0xd(%rbp)
 1b1:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
 1b5:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
 1b9:	76 c7                	jbe    182 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x182>
 1bb:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
 1bf:	83 f0 01             	xor    $0x1,%eax
 1c2:	84 c0                	test   %al,%al
 1c4:	74 16                	je     1dc <E131Bridge::CheckMergeTimeouts(unsigned int)+0x1dc>
 1c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1ca:	c6 80 10 05 00 00 01 	movb   $0x1,0x510(%rax)
 1d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1d5:	c6 80 0d 05 00 00 00 	movb   $0x0,0x50d(%rax)
 1dc:	90                   	nop
 1dd:	c9                   	leave  
 1de:	c3                   	ret    

Disassembly of section .text._ZNK10E131Bridge17IsPriorityTimeOutEj:

0000000000000000 <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
   c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
   f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  13:	8b 48 14             	mov    0x14(%rax),%ecx
  16:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  1a:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  1d:	48 89 d0             	mov    %rdx,%rax
  20:	48 c1 e0 04          	shl    $0x4,%rax
  24:	48 01 d0             	add    %rdx,%rax
  27:	48 c1 e0 02          	shl    $0x2,%rax
  2b:	48 01 f0             	add    %rsi,%rax
  2e:	48 05 30 05 00 00    	add    $0x530,%rax
  34:	8b 10                	mov    (%rax),%edx
  36:	89 c8                	mov    %ecx,%eax
  38:	29 d0                	sub    %edx,%eax
  3a:	89 45 f8             	mov    %eax,-0x8(%rbp)
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	8b 48 14             	mov    0x14(%rax),%ecx
  44:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  48:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  4b:	48 89 d0             	mov    %rdx,%rax
  4e:	48 c1 e0 04          	shl    $0x4,%rax
  52:	48 01 d0             	add    %rdx,%rax
  55:	48 c1 e0 02          	shl    $0x2,%rax
  59:	48 01 f0             	add    %rsi,%rax
  5c:	48 05 4c 05 00 00    	add    $0x54c,%rax
  62:	8b 10                	mov    (%rax),%edx
  64:	89 c8                	mov    %ecx,%eax
  66:	29 d0                	sub    %edx,%eax
  68:	89 45 fc             	mov    %eax,-0x4(%rbp)
  6b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  6f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  72:	48 89 d0             	mov    %rdx,%rax
  75:	48 c1 e0 04          	shl    $0x4,%rax
  79:	48 01 d0             	add    %rdx,%rax
  7c:	48 c1 e0 02          	shl    $0x2,%rax
  80:	48 01 c8             	add    %rcx,%rax
  83:	48 05 34 05 00 00    	add    $0x534,%rax
  89:	8b 00                	mov    (%rax),%eax
  8b:	85 c0                	test   %eax,%eax
  8d:	74 4a                	je     d9 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0xd9>
  8f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  93:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  96:	48 89 d0             	mov    %rdx,%rax
  99:	48 c1 e0 04          	shl    $0x4,%rax
  9d:	48 01 d0             	add    %rdx,%rax
  a0:	48 c1 e0 02          	shl    $0x2,%rax
  a4:	48 01 c8             	add    %rcx,%rax
  a7:	48 05 50 05 00 00    	add    $0x550,%rax
  ad:	8b 00                	mov    (%rax),%eax
  af:	85 c0                	test   %eax,%eax
  b1:	74 26                	je     d9 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0xd9>
  b3:	81 7d f8 0f 27 00 00 	cmpl   $0x270f,-0x8(%rbp)
  ba:	76 09                	jbe    c5 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0xc5>
  bc:	81 7d fc 0f 27 00 00 	cmpl   $0x270f,-0x4(%rbp)
  c3:	77 0a                	ja     cf <E131Bridge::IsPriorityTimeOut(unsigned int) const+0xcf>
  c5:	b8 00 00 00 00       	mov    $0x0,%eax
  ca:	e9 bf 00 00 00       	jmp    18e <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x18e>
  cf:	b8 01 00 00 00       	mov    $0x1,%eax
  d4:	e9 b5 00 00 00       	jmp    18e <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x18e>
  d9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  dd:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  e0:	48 89 d0             	mov    %rdx,%rax
  e3:	48 c1 e0 04          	shl    $0x4,%rax
  e7:	48 01 d0             	add    %rdx,%rax
  ea:	48 c1 e0 02          	shl    $0x2,%rax
  ee:	48 01 c8             	add    %rcx,%rax
  f1:	48 05 34 05 00 00    	add    $0x534,%rax
  f7:	8b 00                	mov    (%rax),%eax
  f9:	85 c0                	test   %eax,%eax
  fb:	74 34                	je     131 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x131>
  fd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 101:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 104:	48 89 d0             	mov    %rdx,%rax
 107:	48 c1 e0 04          	shl    $0x4,%rax
 10b:	48 01 d0             	add    %rdx,%rax
 10e:	48 c1 e0 02          	shl    $0x2,%rax
 112:	48 01 c8             	add    %rcx,%rax
 115:	48 05 50 05 00 00    	add    $0x550,%rax
 11b:	8b 00                	mov    (%rax),%eax
 11d:	85 c0                	test   %eax,%eax
 11f:	75 10                	jne    131 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x131>
 121:	81 7d f8 10 27 00 00 	cmpl   $0x2710,-0x8(%rbp)
 128:	76 5f                	jbe    189 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x189>
 12a:	b8 01 00 00 00       	mov    $0x1,%eax
 12f:	eb 5d                	jmp    18e <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x18e>
 131:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 135:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 138:	48 89 d0             	mov    %rdx,%rax
 13b:	48 c1 e0 04          	shl    $0x4,%rax
 13f:	48 01 d0             	add    %rdx,%rax
 142:	48 c1 e0 02          	shl    $0x2,%rax
 146:	48 01 c8             	add    %rcx,%rax
 149:	48 05 34 05 00 00    	add    $0x534,%rax
 14f:	8b 00                	mov    (%rax),%eax
 151:	85 c0                	test   %eax,%eax
 153:	75 34                	jne    189 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x189>
 155:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 159:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 15c:	48 89 d0             	mov    %rdx,%rax
 15f:	48 c1 e0 04          	shl    $0x4,%rax
 163:	48 01 d0             	add    %rdx,%rax
 166:	48 c1 e0 02          	shl    $0x2,%rax
 16a:	48 01 c8             	add    %rcx,%rax
 16d:	48 05 50 05 00 00    	add    $0x550,%rax
 173:	8b 00                	mov    (%rax),%eax
 175:	85 c0                	test   %eax,%eax
 177:	74 10                	je     189 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x189>
 179:	81 7d fc 10 27 00 00 	cmpl   $0x2710,-0x4(%rbp)
 180:	76 07                	jbe    189 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x189>
 182:	b8 01 00 00 00       	mov    $0x1,%eax
 187:	eb 05                	jmp    18e <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x18e>
 189:	b8 00 00 00 00       	mov    $0x0,%eax
 18e:	5d                   	pop    %rbp
 18f:	c3                   	ret    

Disassembly of section .text._ZNK10E131Bridge12isIpCidMatchEPKN10e131bridge6SourceE:

0000000000000000 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  18:	8b 50 04             	mov    0x4(%rax),%edx
  1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1f:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax
  25:	39 c2                	cmp    %eax,%edx
  27:	74 07                	je     30 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x30>
  29:	b8 00 00 00 00       	mov    $0x0,%eax
  2e:	eb 33                	jmp    63 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x63>
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 8d 88 aa 00 00 00 	lea    0xaa(%rax),%rcx
  3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3f:	48 83 c0 08          	add    $0x8,%rax
  43:	ba 10 00 00 00       	mov    $0x10,%edx
  48:	48 89 ce             	mov    %rcx,%rsi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	call   53 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x53>
  53:	85 c0                	test   %eax,%eax
  55:	74 07                	je     5e <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x5e>
  57:	b8 00 00 00 00       	mov    $0x0,%eax
  5c:	eb 05                	jmp    63 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x63>
  5e:	b8 01 00 00 00       	mov    $0x1,%eax
  63:	c9                   	leave  
  64:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge9HandleDmxEv:

0000000000000000 <E131Bridge::HandleDmx()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 40          	sub    $0x40,%rsp
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  14:	48 05 12 01 00 00    	add    $0x112,%rax
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  22:	0f b7 80 0f 01 00 00 	movzwl 0x10f(%rax),%eax
  29:	0f b7 c0             	movzwl %ax,%eax
  2c:	66 c1 c0 08          	rol    $0x8,%ax
  30:	0f b7 c0             	movzwl %ax,%eax
  33:	83 e8 01             	sub    $0x1,%eax
  36:	89 45 dc             	mov    %eax,-0x24(%rbp)
  39:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  40:	e9 fa 07 00 00       	jmp    83f <E131Bridge::HandleDmx()+0x83f>
  45:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  49:	8b 55 d8             	mov    -0x28(%rbp),%edx
  4c:	48 89 d0             	mov    %rdx,%rax
  4f:	48 c1 e0 04          	shl    $0x4,%rax
  53:	48 01 d0             	add    %rdx,%rax
  56:	48 c1 e0 02          	shl    $0x2,%rax
  5a:	48 01 c8             	add    %rcx,%rax
  5d:	48 05 2e 05 00 00    	add    $0x52e,%rax
  63:	0f b6 00             	movzbl (%rax),%eax
  66:	83 f0 01             	xor    $0x1,%eax
  69:	84 c0                	test   %al,%al
  6b:	0f 85 ba 07 00 00    	jne    82b <E131Bridge::HandleDmx()+0x82b>
  71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  75:	0f b7 88 05 01 00 00 	movzwl 0x105(%rax),%ecx
  7c:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
  80:	8b 55 d8             	mov    -0x28(%rbp),%edx
  83:	48 89 d0             	mov    %rdx,%rax
  86:	48 c1 e0 04          	shl    $0x4,%rax
  8a:	48 01 d0             	add    %rdx,%rax
  8d:	48 c1 e0 02          	shl    $0x2,%rax
  91:	48 01 f0             	add    %rsi,%rax
  94:	48 05 2c 05 00 00    	add    $0x52c,%rax
  9a:	0f b7 00             	movzwl (%rax),%eax
  9d:	0f b7 c0             	movzwl %ax,%eax
  a0:	66 c1 c0 08          	rol    $0x8,%ax
  a4:	66 39 c1             	cmp    %ax,%cx
  a7:	0f 85 81 07 00 00    	jne    82e <E131Bridge::HandleDmx()+0x82e>
  ad:	8b 55 d8             	mov    -0x28(%rbp),%edx
  b0:	48 89 d0             	mov    %rdx,%rax
  b3:	48 c1 e0 04          	shl    $0x4,%rax
  b7:	48 01 d0             	add    %rdx,%rax
  ba:	48 c1 e0 02          	shl    $0x2,%rax
  be:	48 8d 90 20 05 00 00 	lea    0x520(%rax),%rdx
  c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  c9:	48 01 d0             	add    %rdx,%rax
  cc:	48 83 c0 10          	add    $0x10,%rax
  d0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  d4:	8b 55 d8             	mov    -0x28(%rbp),%edx
  d7:	48 89 d0             	mov    %rdx,%rax
  da:	48 c1 e0 04          	shl    $0x4,%rax
  de:	48 01 d0             	add    %rdx,%rax
  e1:	48 c1 e0 02          	shl    $0x2,%rax
  e5:	48 8d 90 40 05 00 00 	lea    0x540(%rax),%rdx
  ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  f0:	48 01 d0             	add    %rdx,%rax
  f3:	48 83 c0 0c          	add    $0xc,%rax
  f7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  ff:	8b 40 04             	mov    0x4(%rax),%eax
 102:	89 45 e0             	mov    %eax,-0x20(%rbp)
 105:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 109:	8b 40 04             	mov    0x4(%rax),%eax
 10c:	89 45 e4             	mov    %eax,-0x1c(%rbp)
 10f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 113:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 117:	48 89 d6             	mov    %rdx,%rsi
 11a:	48 89 c7             	mov    %rax,%rdi
 11d:	e8 00 00 00 00       	call   122 <E131Bridge::HandleDmx()+0x122>
 122:	88 45 d4             	mov    %al,-0x2c(%rbp)
 125:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 129:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 12d:	48 89 d6             	mov    %rdx,%rsi
 130:	48 89 c7             	mov    %rax,%rdi
 133:	e8 00 00 00 00       	call   138 <E131Bridge::HandleDmx()+0x138>
 138:	88 45 d5             	mov    %al,-0x2b(%rbp)
 13b:	80 7d d4 00          	cmpb   $0x0,-0x2c(%rbp)
 13f:	74 3d                	je     17e <E131Bridge::HandleDmx()+0x17e>
 141:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 145:	0f b6 90 03 01 00 00 	movzbl 0x103(%rax),%edx
 14c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 150:	0f b6 48 18          	movzbl 0x18(%rax),%ecx
 154:	89 d0                	mov    %edx,%eax
 156:	29 c8                	sub    %ecx,%eax
 158:	88 45 d7             	mov    %al,-0x29(%rbp)
 15b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 15f:	0f b6 90 03 01 00 00 	movzbl 0x103(%rax),%edx
 166:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 16a:	88 50 18             	mov    %dl,0x18(%rax)
 16d:	80 7d d7 00          	cmpb   $0x0,-0x29(%rbp)
 171:	7f 4d                	jg     1c0 <E131Bridge::HandleDmx()+0x1c0>
 173:	80 7d d7 ed          	cmpb   $0xed,-0x29(%rbp)
 177:	7c 47                	jl     1c0 <E131Bridge::HandleDmx()+0x1c0>
 179:	e9 bd 06 00 00       	jmp    83b <E131Bridge::HandleDmx()+0x83b>
 17e:	80 7d d5 00          	cmpb   $0x0,-0x2b(%rbp)
 182:	74 3c                	je     1c0 <E131Bridge::HandleDmx()+0x1c0>
 184:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 188:	0f b6 90 03 01 00 00 	movzbl 0x103(%rax),%edx
 18f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 193:	0f b6 48 18          	movzbl 0x18(%rax),%ecx
 197:	89 d0                	mov    %edx,%eax
 199:	29 c8                	sub    %ecx,%eax
 19b:	88 45 d6             	mov    %al,-0x2a(%rbp)
 19e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1a2:	0f b6 90 03 01 00 00 	movzbl 0x103(%rax),%edx
 1a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 1ad:	88 50 18             	mov    %dl,0x18(%rax)
 1b0:	80 7d d6 00          	cmpb   $0x0,-0x2a(%rbp)
 1b4:	7f 0a                	jg     1c0 <E131Bridge::HandleDmx()+0x1c0>
 1b6:	80 7d d6 ed          	cmpb   $0xed,-0x2a(%rbp)
 1ba:	0f 8d 71 06 00 00    	jge    831 <E131Bridge::HandleDmx()+0x831>
 1c0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1c4:	0f b6 80 04 01 00 00 	movzbl 0x104(%rax),%eax
 1cb:	84 c0                	test   %al,%al
 1cd:	0f 88 61 06 00 00    	js     834 <E131Bridge::HandleDmx()+0x834>
 1d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1d7:	0f b6 80 04 01 00 00 	movzbl 0x104(%rax),%eax
 1de:	0f b6 c0             	movzbl %al,%eax
 1e1:	83 e0 40             	and    $0x40,%eax
 1e4:	85 c0                	test   %eax,%eax
 1e6:	74 2b                	je     213 <E131Bridge::HandleDmx()+0x213>
 1e8:	80 7d d4 00          	cmpb   $0x0,-0x2c(%rbp)
 1ec:	75 0a                	jne    1f8 <E131Bridge::HandleDmx()+0x1f8>
 1ee:	80 7d d5 00          	cmpb   $0x0,-0x2b(%rbp)
 1f2:	0f 84 3f 06 00 00    	je     837 <E131Bridge::HandleDmx()+0x837>
 1f8:	0f b6 55 d5          	movzbl -0x2b(%rbp),%edx
 1fc:	0f b6 4d d4          	movzbl -0x2c(%rbp),%ecx
 200:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 204:	89 ce                	mov    %ecx,%esi
 206:	48 89 c7             	mov    %rax,%rdi
 209:	e8 00 00 00 00       	call   20e <E131Bridge::HandleDmx()+0x20e>
 20e:	e9 24 06 00 00       	jmp    837 <E131Bridge::HandleDmx()+0x837>
 213:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 217:	0f b6 80 0d 05 00 00 	movzbl 0x50d(%rax),%eax
 21e:	84 c0                	test   %al,%al
 220:	74 27                	je     249 <E131Bridge::HandleDmx()+0x249>
 222:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 226:	0f b6 80 11 05 00 00 	movzbl 0x511(%rax),%eax
 22d:	83 f0 01             	xor    $0x1,%eax
 230:	0f b6 c0             	movzbl %al,%eax
 233:	48 85 c0             	test   %rax,%rax
 236:	74 11                	je     249 <E131Bridge::HandleDmx()+0x249>
 238:	8b 55 d8             	mov    -0x28(%rbp),%edx
 23b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 23f:	89 d6                	mov    %edx,%esi
 241:	48 89 c7             	mov    %rax,%rdi
 244:	e8 00 00 00 00       	call   249 <E131Bridge::HandleDmx()+0x249>
 249:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 24d:	0f b6 90 00 01 00 00 	movzbl 0x100(%rax),%edx
 254:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 258:	0f b6 80 24 05 00 00 	movzbl 0x524(%rax),%eax
 25f:	38 c2                	cmp    %al,%dl
 261:	73 36                	jae    299 <E131Bridge::HandleDmx()+0x299>
 263:	8b 55 d8             	mov    -0x28(%rbp),%edx
 266:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 26a:	89 d6                	mov    %edx,%esi
 26c:	48 89 c7             	mov    %rax,%rdi
 26f:	e8 00 00 00 00       	call   274 <E131Bridge::HandleDmx()+0x274>
 274:	83 f0 01             	xor    $0x1,%eax
 277:	84 c0                	test   %al,%al
 279:	0f 85 bb 05 00 00    	jne    83a <E131Bridge::HandleDmx()+0x83a>
 27f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 283:	0f b6 90 00 01 00 00 	movzbl 0x100(%rax),%edx
 28a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 28e:	88 90 24 05 00 00    	mov    %dl,0x524(%rax)
 294:	e9 82 00 00 00       	jmp    31b <E131Bridge::HandleDmx()+0x31b>
 299:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 29d:	0f b6 90 00 01 00 00 	movzbl 0x100(%rax),%edx
 2a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 2a8:	0f b6 80 24 05 00 00 	movzbl 0x524(%rax),%eax
 2af:	38 c2                	cmp    %al,%dl
 2b1:	76 68                	jbe    31b <E131Bridge::HandleDmx()+0x31b>
 2b3:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
 2b7:	8b 55 d8             	mov    -0x28(%rbp),%edx
 2ba:	48 89 d0             	mov    %rdx,%rax
 2bd:	48 c1 e0 04          	shl    $0x4,%rax
 2c1:	48 01 d0             	add    %rdx,%rax
 2c4:	48 c1 e0 02          	shl    $0x2,%rax
 2c8:	48 01 c8             	add    %rcx,%rax
 2cb:	48 05 34 05 00 00    	add    $0x534,%rax
 2d1:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
 2d7:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
 2db:	8b 55 d8             	mov    -0x28(%rbp),%edx
 2de:	48 89 d0             	mov    %rdx,%rax
 2e1:	48 c1 e0 04          	shl    $0x4,%rax
 2e5:	48 01 d0             	add    %rdx,%rax
 2e8:	48 c1 e0 02          	shl    $0x2,%rax
 2ec:	48 01 c8             	add    %rcx,%rax
 2ef:	48 05 50 05 00 00    	add    $0x550,%rax
 2f5:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
 2fb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 2ff:	c6 80 0d 05 00 00 00 	movb   $0x0,0x50d(%rax)
 306:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 30a:	0f b6 90 00 01 00 00 	movzbl 0x100(%rax),%edx
 311:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 315:	88 90 24 05 00 00    	mov    %dl,0x524(%rax)
 31b:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
 31f:	75 6f                	jne    390 <E131Bridge::HandleDmx()+0x390>
 321:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
 325:	75 69                	jne    390 <E131Bridge::HandleDmx()+0x390>
 327:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 32b:	8b 90 90 00 00 00    	mov    0x90(%rax),%edx
 331:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 335:	89 50 04             	mov    %edx,0x4(%rax)
 338:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 33c:	0f b6 90 03 01 00 00 	movzbl 0x103(%rax),%edx
 343:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 347:	88 50 18             	mov    %dl,0x18(%rax)
 34a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 34e:	48 05 aa 00 00 00    	add    $0xaa,%rax
 354:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 358:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
 35c:	48 8b 50 08          	mov    0x8(%rax),%rdx
 360:	48 8b 00             	mov    (%rax),%rax
 363:	48 89 01             	mov    %rax,(%rcx)
 366:	48 89 51 08          	mov    %rdx,0x8(%rcx)
 36a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 36e:	8b 50 14             	mov    0x14(%rax),%edx
 371:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 375:	89 10                	mov    %edx,(%rax)
 377:	8b 55 dc             	mov    -0x24(%rbp),%edx
 37a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 37e:	8b 45 d8             	mov    -0x28(%rbp),%eax
 381:	48 89 ce             	mov    %rcx,%rsi
 384:	89 c7                	mov    %eax,%edi
 386:	e8 00 00 00 00       	call   38b <E131Bridge::HandleDmx()+0x38b>
 38b:	e9 e7 02 00 00       	jmp    677 <E131Bridge::HandleDmx()+0x677>
 390:	80 7d d4 00          	cmpb   $0x0,-0x2c(%rbp)
 394:	74 3e                	je     3d4 <E131Bridge::HandleDmx()+0x3d4>
 396:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
 39a:	75 38                	jne    3d4 <E131Bridge::HandleDmx()+0x3d4>
 39c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 3a0:	0f b6 90 03 01 00 00 	movzbl 0x103(%rax),%edx
 3a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 3ab:	88 50 18             	mov    %dl,0x18(%rax)
 3ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 3b2:	8b 50 14             	mov    0x14(%rax),%edx
 3b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 3b9:	89 10                	mov    %edx,(%rax)
 3bb:	8b 55 dc             	mov    -0x24(%rbp),%edx
 3be:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 3c2:	8b 45 d8             	mov    -0x28(%rbp),%eax
 3c5:	48 89 ce             	mov    %rcx,%rsi
 3c8:	89 c7                	mov    %eax,%edi
 3ca:	e8 00 00 00 00       	call   3cf <E131Bridge::HandleDmx()+0x3cf>
 3cf:	e9 a3 02 00 00       	jmp    677 <E131Bridge::HandleDmx()+0x677>
 3d4:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
 3d8:	75 3e                	jne    418 <E131Bridge::HandleDmx()+0x418>
 3da:	80 7d d5 00          	cmpb   $0x0,-0x2b(%rbp)
 3de:	74 38                	je     418 <E131Bridge::HandleDmx()+0x418>
 3e0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 3e4:	0f b6 90 03 01 00 00 	movzbl 0x103(%rax),%edx
 3eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 3ef:	88 50 18             	mov    %dl,0x18(%rax)
 3f2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 3f6:	8b 50 14             	mov    0x14(%rax),%edx
 3f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 3fd:	89 10                	mov    %edx,(%rax)
 3ff:	8b 55 dc             	mov    -0x24(%rbp),%edx
 402:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 406:	8b 45 d8             	mov    -0x28(%rbp),%eax
 409:	48 89 ce             	mov    %rcx,%rsi
 40c:	89 c7                	mov    %eax,%edi
 40e:	e8 00 00 00 00       	call   413 <E131Bridge::HandleDmx()+0x413>
 413:	e9 5f 02 00 00       	jmp    677 <E131Bridge::HandleDmx()+0x677>
 418:	0f b6 45 d4          	movzbl -0x2c(%rbp),%eax
 41c:	83 f0 01             	xor    $0x1,%eax
 41f:	84 c0                	test   %al,%al
 421:	0f 84 a1 00 00 00    	je     4c8 <E131Bridge::HandleDmx()+0x4c8>
 427:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
 42b:	0f 85 97 00 00 00    	jne    4c8 <E131Bridge::HandleDmx()+0x4c8>
 431:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 435:	8b 90 90 00 00 00    	mov    0x90(%rax),%edx
 43b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 43f:	89 50 04             	mov    %edx,0x4(%rax)
 442:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 446:	0f b6 90 03 01 00 00 	movzbl 0x103(%rax),%edx
 44d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 451:	88 50 18             	mov    %dl,0x18(%rax)
 454:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 458:	48 05 aa 00 00 00    	add    $0xaa,%rax
 45e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 462:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
 466:	48 8b 50 08          	mov    0x8(%rax),%rdx
 46a:	48 8b 00             	mov    (%rax),%rax
 46d:	48 89 01             	mov    %rax,(%rcx)
 470:	48 89 51 08          	mov    %rdx,0x8(%rcx)
 474:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 478:	8b 50 14             	mov    0x14(%rax),%edx
 47b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 47f:	89 10                	mov    %edx,(%rax)
 481:	8b 55 d8             	mov    -0x28(%rbp),%edx
 484:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 488:	89 d6                	mov    %edx,%esi
 48a:	48 89 c7             	mov    %rax,%rdi
 48d:	e8 00 00 00 00       	call   492 <E131Bridge::HandleDmx()+0x492>
 492:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
 496:	8b 55 d8             	mov    -0x28(%rbp),%edx
 499:	48 89 d0             	mov    %rdx,%rax
 49c:	48 c1 e0 04          	shl    $0x4,%rax
 4a0:	48 01 d0             	add    %rdx,%rax
 4a3:	48 c1 e0 02          	shl    $0x2,%rax
 4a7:	48 01 c8             	add    %rcx,%rax
 4aa:	48 05 68 05 00 00    	add    $0x568,%rax
 4b0:	8b 08                	mov    (%rax),%ecx
 4b2:	8b 55 dc             	mov    -0x24(%rbp),%edx
 4b5:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
 4b9:	8b 45 d8             	mov    -0x28(%rbp),%eax
 4bc:	89 c7                	mov    %eax,%edi
 4be:	e8 00 00 00 00       	call   4c3 <E131Bridge::HandleDmx()+0x4c3>
 4c3:	e9 af 01 00 00       	jmp    677 <E131Bridge::HandleDmx()+0x677>
 4c8:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
 4cc:	0f 85 a6 00 00 00    	jne    578 <E131Bridge::HandleDmx()+0x578>
 4d2:	0f b6 45 d5          	movzbl -0x2b(%rbp),%eax
 4d6:	83 f0 01             	xor    $0x1,%eax
 4d9:	84 c0                	test   %al,%al
 4db:	0f 84 97 00 00 00    	je     578 <E131Bridge::HandleDmx()+0x578>
 4e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 4e5:	8b 90 90 00 00 00    	mov    0x90(%rax),%edx
 4eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 4ef:	89 50 04             	mov    %edx,0x4(%rax)
 4f2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 4f6:	0f b6 90 03 01 00 00 	movzbl 0x103(%rax),%edx
 4fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 501:	88 50 18             	mov    %dl,0x18(%rax)
 504:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 508:	48 05 aa 00 00 00    	add    $0xaa,%rax
 50e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
 512:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
 516:	48 8b 50 08          	mov    0x8(%rax),%rdx
 51a:	48 8b 00             	mov    (%rax),%rax
 51d:	48 89 01             	mov    %rax,(%rcx)
 520:	48 89 51 08          	mov    %rdx,0x8(%rcx)
 524:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 528:	8b 50 14             	mov    0x14(%rax),%edx
 52b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 52f:	89 10                	mov    %edx,(%rax)
 531:	8b 55 d8             	mov    -0x28(%rbp),%edx
 534:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 538:	89 d6                	mov    %edx,%esi
 53a:	48 89 c7             	mov    %rax,%rdi
 53d:	e8 00 00 00 00       	call   542 <E131Bridge::HandleDmx()+0x542>
 542:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
 546:	8b 55 d8             	mov    -0x28(%rbp),%edx
 549:	48 89 d0             	mov    %rdx,%rax
 54c:	48 c1 e0 04          	shl    $0x4,%rax
 550:	48 01 d0             	add    %rdx,%rax
 553:	48 c1 e0 02          	shl    $0x2,%rax
 557:	48 01 c8             	add    %rcx,%rax
 55a:	48 05 68 05 00 00    	add    $0x568,%rax
 560:	8b 08                	mov    (%rax),%ecx
 562:	8b 55 dc             	mov    -0x24(%rbp),%edx
 565:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
 569:	8b 45 d8             	mov    -0x28(%rbp),%eax
 56c:	89 c7                	mov    %eax,%edi
 56e:	e8 00 00 00 00       	call   573 <E131Bridge::HandleDmx()+0x573>
 573:	e9 ff 00 00 00       	jmp    677 <E131Bridge::HandleDmx()+0x677>
 578:	80 7d d4 00          	cmpb   $0x0,-0x2c(%rbp)
 57c:	74 71                	je     5ef <E131Bridge::HandleDmx()+0x5ef>
 57e:	0f b6 45 d5          	movzbl -0x2b(%rbp),%eax
 582:	83 f0 01             	xor    $0x1,%eax
 585:	84 c0                	test   %al,%al
 587:	74 66                	je     5ef <E131Bridge::HandleDmx()+0x5ef>
 589:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 58d:	0f b6 90 03 01 00 00 	movzbl 0x103(%rax),%edx
 594:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 598:	88 50 18             	mov    %dl,0x18(%rax)
 59b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 59f:	8b 50 14             	mov    0x14(%rax),%edx
 5a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 5a6:	89 10                	mov    %edx,(%rax)
 5a8:	8b 55 d8             	mov    -0x28(%rbp),%edx
 5ab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 5af:	89 d6                	mov    %edx,%esi
 5b1:	48 89 c7             	mov    %rax,%rdi
 5b4:	e8 00 00 00 00       	call   5b9 <E131Bridge::HandleDmx()+0x5b9>
 5b9:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
 5bd:	8b 55 d8             	mov    -0x28(%rbp),%edx
 5c0:	48 89 d0             	mov    %rdx,%rax
 5c3:	48 c1 e0 04          	shl    $0x4,%rax
 5c7:	48 01 d0             	add    %rdx,%rax
 5ca:	48 c1 e0 02          	shl    $0x2,%rax
 5ce:	48 01 c8             	add    %rcx,%rax
 5d1:	48 05 68 05 00 00    	add    $0x568,%rax
 5d7:	8b 08                	mov    (%rax),%ecx
 5d9:	8b 55 dc             	mov    -0x24(%rbp),%edx
 5dc:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
 5e0:	8b 45 d8             	mov    -0x28(%rbp),%eax
 5e3:	89 c7                	mov    %eax,%edi
 5e5:	e8 00 00 00 00       	call   5ea <E131Bridge::HandleDmx()+0x5ea>
 5ea:	e9 88 00 00 00       	jmp    677 <E131Bridge::HandleDmx()+0x677>
 5ef:	0f b6 45 d4          	movzbl -0x2c(%rbp),%eax
 5f3:	83 f0 01             	xor    $0x1,%eax
 5f6:	84 c0                	test   %al,%al
 5f8:	74 69                	je     663 <E131Bridge::HandleDmx()+0x663>
 5fa:	80 7d d5 00          	cmpb   $0x0,-0x2b(%rbp)
 5fe:	74 63                	je     663 <E131Bridge::HandleDmx()+0x663>
 600:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 604:	0f b6 90 03 01 00 00 	movzbl 0x103(%rax),%edx
 60b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 60f:	88 50 18             	mov    %dl,0x18(%rax)
 612:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 616:	8b 50 14             	mov    0x14(%rax),%edx
 619:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 61d:	89 10                	mov    %edx,(%rax)
 61f:	8b 55 d8             	mov    -0x28(%rbp),%edx
 622:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 626:	89 d6                	mov    %edx,%esi
 628:	48 89 c7             	mov    %rax,%rdi
 62b:	e8 00 00 00 00       	call   630 <E131Bridge::HandleDmx()+0x630>
 630:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
 634:	8b 55 d8             	mov    -0x28(%rbp),%edx
 637:	48 89 d0             	mov    %rdx,%rax
 63a:	48 c1 e0 04          	shl    $0x4,%rax
 63e:	48 01 d0             	add    %rdx,%rax
 641:	48 c1 e0 02          	shl    $0x2,%rax
 645:	48 01 c8             	add    %rcx,%rax
 648:	48 05 68 05 00 00    	add    $0x568,%rax
 64e:	8b 08                	mov    (%rax),%ecx
 650:	8b 55 dc             	mov    -0x24(%rbp),%edx
 653:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
 657:	8b 45 d8             	mov    -0x28(%rbp),%eax
 65a:	89 c7                	mov    %eax,%edi
 65c:	e8 00 00 00 00       	call   661 <E131Bridge::HandleDmx()+0x661>
 661:	eb 14                	jmp    677 <E131Bridge::HandleDmx()+0x677>
 663:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 66a <E131Bridge::HandleDmx()+0x66a>
 66a:	48 89 c7             	mov    %rax,%rdi
 66d:	e8 00 00 00 00       	call   672 <E131Bridge::HandleDmx()+0x672>
 672:	e9 d2 01 00 00       	jmp    849 <E131Bridge::HandleDmx()+0x849>
 677:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 67b:	0f b6 80 04 01 00 00 	movzbl 0x104(%rax),%eax
 682:	0f b6 c0             	movzbl %al,%eax
 685:	83 e0 20             	and    $0x20,%eax
 688:	85 c0                	test   %eax,%eax
 68a:	0f 85 c2 00 00 00    	jne    752 <E131Bridge::HandleDmx()+0x752>
 690:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 694:	0f b7 80 01 01 00 00 	movzwl 0x101(%rax),%eax
 69b:	66 85 c0             	test   %ax,%ax
 69e:	0f 84 b9 00 00 00    	je     75d <E131Bridge::HandleDmx()+0x75d>
 6a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 6a8:	0f b6 80 0f 05 00 00 	movzbl 0x50f(%rax),%eax
 6af:	83 f0 01             	xor    $0x1,%eax
 6b2:	84 c0                	test   %al,%al
 6b4:	0f 84 a3 00 00 00    	je     75d <E131Bridge::HandleDmx()+0x75d>
 6ba:	0f b6 45 d4          	movzbl -0x2c(%rbp),%eax
 6be:	83 f0 01             	xor    $0x1,%eax
 6c1:	84 c0                	test   %al,%al
 6c3:	74 4c                	je     711 <E131Bridge::HandleDmx()+0x711>
 6c5:	0f b6 45 d5          	movzbl -0x2b(%rbp),%eax
 6c9:	83 f0 01             	xor    $0x1,%eax
 6cc:	84 c0                	test   %al,%al
 6ce:	74 41                	je     711 <E131Bridge::HandleDmx()+0x711>
 6d0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 6d4:	0f b7 80 01 01 00 00 	movzwl 0x101(%rax),%eax
 6db:	0f b7 c0             	movzwl %ax,%eax
 6de:	66 c1 c0 08          	rol    $0x8,%ax
 6e2:	0f b7 c8             	movzwl %ax,%ecx
 6e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 6e9:	8b 40 04             	mov    0x4(%rax),%eax
 6ec:	85 c0                	test   %eax,%eax
 6ee:	0f 95 c0             	setne  %al
 6f1:	0f b6 d0             	movzbl %al,%edx
 6f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 6f8:	8b 40 04             	mov    0x4(%rax),%eax
 6fb:	85 c0                	test   %eax,%eax
 6fd:	0f 95 c0             	setne  %al
 700:	0f b6 f0             	movzbl %al,%esi
 703:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 707:	48 89 c7             	mov    %rax,%rdi
 70a:	e8 00 00 00 00       	call   70f <E131Bridge::HandleDmx()+0x70f>
 70f:	eb 29                	jmp    73a <E131Bridge::HandleDmx()+0x73a>
 711:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 715:	0f b7 80 01 01 00 00 	movzwl 0x101(%rax),%eax
 71c:	0f b7 c0             	movzwl %ax,%eax
 71f:	66 c1 c0 08          	rol    $0x8,%ax
 723:	0f b7 c8             	movzwl %ax,%ecx
 726:	0f b6 55 d5          	movzbl -0x2b(%rbp),%edx
 72a:	0f b6 75 d4          	movzbl -0x2c(%rbp),%esi
 72e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 732:	48 89 c7             	mov    %rax,%rdi
 735:	e8 00 00 00 00       	call   73a <E131Bridge::HandleDmx()+0x73a>
 73a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 73e:	c6 80 0f 05 00 00 01 	movb   $0x1,0x50f(%rax)
 745:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 749:	c6 80 0e 05 00 00 01 	movb   $0x1,0x50e(%rax)
 750:	eb 0b                	jmp    75d <E131Bridge::HandleDmx()+0x75d>
 752:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 756:	c6 80 0f 05 00 00 00 	movb   $0x0,0x50f(%rax)
 75d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 761:	0f b6 80 0e 05 00 00 	movzbl 0x50e(%rax),%eax
 768:	83 f0 01             	xor    $0x1,%eax
 76b:	84 c0                	test   %al,%al
 76d:	75 13                	jne    782 <E131Bridge::HandleDmx()+0x782>
 76f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 773:	0f b6 80 12 05 00 00 	movzbl 0x512(%rax),%eax
 77a:	84 c0                	test   %al,%al
 77c:	0f 84 8d 00 00 00    	je     80f <E131Bridge::HandleDmx()+0x80f>
 782:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 786:	48 8b 40 08          	mov    0x8(%rax),%rax
 78a:	8b 55 d8             	mov    -0x28(%rbp),%edx
 78d:	89 d6                	mov    %edx,%esi
 78f:	48 89 c7             	mov    %rax,%rdi
 792:	e8 00 00 00 00       	call   797 <E131Bridge::HandleDmx()+0x797>
 797:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
 79b:	8b 55 d8             	mov    -0x28(%rbp),%edx
 79e:	48 89 d0             	mov    %rdx,%rax
 7a1:	48 c1 e0 04          	shl    $0x4,%rax
 7a5:	48 01 d0             	add    %rdx,%rax
 7a8:	48 c1 e0 02          	shl    $0x2,%rax
 7ac:	48 01 c8             	add    %rcx,%rax
 7af:	48 05 6e 05 00 00    	add    $0x56e,%rax
 7b5:	0f b6 00             	movzbl (%rax),%eax
 7b8:	83 f0 01             	xor    $0x1,%eax
 7bb:	84 c0                	test   %al,%al
 7bd:	74 50                	je     80f <E131Bridge::HandleDmx()+0x80f>
 7bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 7c3:	48 8b 40 08          	mov    0x8(%rax),%rax
 7c7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
 7cb:	48 8b 52 08          	mov    0x8(%rdx),%rdx
 7cf:	48 8b 12             	mov    (%rdx),%rdx
 7d2:	48 83 c2 10          	add    $0x10,%rdx
 7d6:	48 8b 0a             	mov    (%rdx),%rcx
 7d9:	8b 55 d8             	mov    -0x28(%rbp),%edx
 7dc:	89 d6                	mov    %edx,%esi
 7de:	48 89 c7             	mov    %rax,%rdi
 7e1:	ff d1                	call   *%rcx
 7e3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 7e7:	c6 80 10 05 00 00 01 	movb   $0x1,0x510(%rax)
 7ee:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
 7f2:	8b 55 d8             	mov    -0x28(%rbp),%edx
 7f5:	48 89 d0             	mov    %rdx,%rax
 7f8:	48 c1 e0 04          	shl    $0x4,%rax
 7fc:	48 01 d0             	add    %rdx,%rax
 7ff:	48 c1 e0 02          	shl    $0x2,%rax
 803:	48 01 c8             	add    %rcx,%rax
 806:	48 05 6e 05 00 00    	add    $0x56e,%rax
 80c:	c6 00 01             	movb   $0x1,(%rax)
 80f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 813:	0f b6 80 25 05 00 00 	movzbl 0x525(%rax),%eax
 81a:	83 c8 02             	or     $0x2,%eax
 81d:	89 c2                	mov    %eax,%edx
 81f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 823:	88 90 25 05 00 00    	mov    %dl,0x525(%rax)
 829:	eb 10                	jmp    83b <E131Bridge::HandleDmx()+0x83b>
 82b:	90                   	nop
 82c:	eb 0d                	jmp    83b <E131Bridge::HandleDmx()+0x83b>
 82e:	90                   	nop
 82f:	eb 0a                	jmp    83b <E131Bridge::HandleDmx()+0x83b>
 831:	90                   	nop
 832:	eb 07                	jmp    83b <E131Bridge::HandleDmx()+0x83b>
 834:	90                   	nop
 835:	eb 04                	jmp    83b <E131Bridge::HandleDmx()+0x83b>
 837:	90                   	nop
 838:	eb 01                	jmp    83b <E131Bridge::HandleDmx()+0x83b>
 83a:	90                   	nop
 83b:	83 45 d8 01          	addl   $0x1,-0x28(%rbp)
 83f:	83 7d d8 03          	cmpl   $0x3,-0x28(%rbp)
 843:	0f 86 fc f7 ff ff    	jbe    45 <E131Bridge::HandleDmx()+0x45>
 849:	c9                   	leave  
 84a:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge27SetNetworkDataLossConditionEbb:

0000000000000000 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	89 f1                	mov    %esi,%ecx
  12:	89 d0                	mov    %edx,%eax
  14:	89 ca                	mov    %ecx,%edx
  16:	88 55 e4             	mov    %dl,-0x1c(%rbp)
  19:	88 45 e0             	mov    %al,-0x20(%rbp)
  1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  20:	c6 80 10 05 00 00 01 	movb   $0x1,0x510(%rax)
  27:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
  2b:	80 7d e4 00          	cmpb   $0x0,-0x1c(%rbp)
  2f:	0f 84 ac 01 00 00    	je     1e1 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x1e1>
  35:	80 7d e0 00          	cmpb   $0x0,-0x20(%rbp)
  39:	0f 84 a2 01 00 00    	je     1e1 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x1e1>
  3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43:	c6 80 0c 05 00 00 01 	movb   $0x1,0x50c(%rax)
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	c6 80 0d 05 00 00 00 	movb   $0x0,0x50d(%rax)
  55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  59:	c6 80 0e 05 00 00 00 	movb   $0x0,0x50e(%rax)
  60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  64:	c6 80 0f 05 00 00 00 	movb   $0x0,0x50f(%rax)
  6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6f:	c6 80 24 05 00 00 01 	movb   $0x1,0x524(%rax)
  76:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  7d:	e9 50 01 00 00       	jmp    1d2 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x1d2>
  82:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  86:	8b 55 f8             	mov    -0x8(%rbp),%edx
  89:	48 89 d0             	mov    %rdx,%rax
  8c:	48 c1 e0 04          	shl    $0x4,%rax
  90:	48 01 d0             	add    %rdx,%rax
  93:	48 c1 e0 02          	shl    $0x2,%rax
  97:	48 01 c8             	add    %rcx,%rax
  9a:	48 05 6e 05 00 00    	add    $0x56e,%rax
  a0:	0f b6 00             	movzbl (%rax),%eax
  a3:	84 c0                	test   %al,%al
  a5:	0f 84 23 01 00 00    	je     1ce <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x1ce>
  ab:	c6 45 f7 01          	movb   $0x1,-0x9(%rbp)
  af:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  b3:	8b 55 f8             	mov    -0x8(%rbp),%edx
  b6:	48 89 d0             	mov    %rdx,%rax
  b9:	48 c1 e0 04          	shl    $0x4,%rax
  bd:	48 01 d0             	add    %rdx,%rax
  c0:	48 c1 e0 02          	shl    $0x2,%rax
  c4:	48 01 c8             	add    %rcx,%rax
  c7:	48 05 34 05 00 00    	add    $0x534,%rax
  cd:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  d3:	8b 55 f8             	mov    -0x8(%rbp),%edx
  d6:	48 89 d0             	mov    %rdx,%rax
  d9:	48 c1 e0 04          	shl    $0x4,%rax
  dd:	48 01 d0             	add    %rdx,%rax
  e0:	48 c1 e0 02          	shl    $0x2,%rax
  e4:	48 8d 90 20 05 00 00 	lea    0x520(%rax),%rdx
  eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  ef:	48 01 d0             	add    %rdx,%rax
  f2:	48 83 c0 18          	add    $0x18,%rax
  f6:	ba 10 00 00 00       	mov    $0x10,%edx
  fb:	be 00 00 00 00       	mov    $0x0,%esi
 100:	48 89 c7             	mov    %rax,%rdi
 103:	e8 00 00 00 00       	call   108 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x108>
 108:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 10c:	8b 55 f8             	mov    -0x8(%rbp),%edx
 10f:	48 89 d0             	mov    %rdx,%rax
 112:	48 c1 e0 04          	shl    $0x4,%rax
 116:	48 01 d0             	add    %rdx,%rax
 119:	48 c1 e0 02          	shl    $0x2,%rax
 11d:	48 01 c8             	add    %rcx,%rax
 120:	48 05 50 05 00 00    	add    $0x550,%rax
 126:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
 12c:	8b 55 f8             	mov    -0x8(%rbp),%edx
 12f:	48 89 d0             	mov    %rdx,%rax
 132:	48 c1 e0 04          	shl    $0x4,%rax
 136:	48 01 d0             	add    %rdx,%rax
 139:	48 c1 e0 02          	shl    $0x2,%rax
 13d:	48 8d 90 40 05 00 00 	lea    0x540(%rax),%rdx
 144:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 148:	48 01 d0             	add    %rdx,%rax
 14b:	48 83 c0 14          	add    $0x14,%rax
 14f:	ba 10 00 00 00       	mov    $0x10,%edx
 154:	be 00 00 00 00       	mov    $0x0,%esi
 159:	48 89 c7             	mov    %rax,%rdi
 15c:	e8 00 00 00 00       	call   161 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x161>
 161:	8b 45 f8             	mov    -0x8(%rbp),%eax
 164:	89 c7                	mov    %eax,%edi
 166:	e8 00 00 00 00       	call   16b <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x16b>
 16b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 16f:	8b 55 f8             	mov    -0x8(%rbp),%edx
 172:	48 89 d0             	mov    %rdx,%rax
 175:	48 c1 e0 04          	shl    $0x4,%rax
 179:	48 01 d0             	add    %rdx,%rax
 17c:	48 c1 e0 02          	shl    $0x2,%rax
 180:	48 01 c8             	add    %rcx,%rax
 183:	48 05 6c 05 00 00    	add    $0x56c,%rax
 189:	c6 00 00             	movb   $0x0,(%rax)
 18c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 190:	8b 55 f8             	mov    -0x8(%rbp),%edx
 193:	48 89 d0             	mov    %rdx,%rax
 196:	48 c1 e0 04          	shl    $0x4,%rax
 19a:	48 01 d0             	add    %rdx,%rax
 19d:	48 c1 e0 02          	shl    $0x2,%rax
 1a1:	48 01 c8             	add    %rcx,%rax
 1a4:	48 05 6e 05 00 00    	add    $0x56e,%rax
 1aa:	c6 00 00             	movb   $0x0,(%rax)
 1ad:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 1b1:	8b 55 f8             	mov    -0x8(%rbp),%edx
 1b4:	48 89 d0             	mov    %rdx,%rax
 1b7:	48 c1 e0 04          	shl    $0x4,%rax
 1bb:	48 01 d0             	add    %rdx,%rax
 1be:	48 c1 e0 02          	shl    $0x2,%rax
 1c2:	48 01 c8             	add    %rcx,%rax
 1c5:	48 05 6d 05 00 00    	add    $0x56d,%rax
 1cb:	c6 00 00             	movb   $0x0,(%rax)
 1ce:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
 1d2:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
 1d6:	0f 86 a6 fe ff ff    	jbe    82 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x82>
 1dc:	e9 f5 01 00 00       	jmp    3d6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x3d6>
 1e1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
 1e8:	e9 df 01 00 00       	jmp    3cc <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x3cc>
 1ed:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 1f1:	8b 55 fc             	mov    -0x4(%rbp),%edx
 1f4:	48 89 d0             	mov    %rdx,%rax
 1f7:	48 c1 e0 04          	shl    $0x4,%rax
 1fb:	48 01 d0             	add    %rdx,%rax
 1fe:	48 c1 e0 02          	shl    $0x2,%rax
 202:	48 01 c8             	add    %rcx,%rax
 205:	48 05 6e 05 00 00    	add    $0x56e,%rax
 20b:	0f b6 00             	movzbl (%rax),%eax
 20e:	84 c0                	test   %al,%al
 210:	0f 84 b2 01 00 00    	je     3c8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x3c8>
 216:	80 7d e4 00          	cmpb   $0x0,-0x1c(%rbp)
 21a:	0f 84 9e 00 00 00    	je     2be <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2be>
 220:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 224:	8b 55 fc             	mov    -0x4(%rbp),%edx
 227:	48 89 d0             	mov    %rdx,%rax
 22a:	48 c1 e0 04          	shl    $0x4,%rax
 22e:	48 01 d0             	add    %rdx,%rax
 231:	48 c1 e0 02          	shl    $0x2,%rax
 235:	48 01 c8             	add    %rcx,%rax
 238:	48 05 34 05 00 00    	add    $0x534,%rax
 23e:	8b 00                	mov    (%rax),%eax
 240:	85 c0                	test   %eax,%eax
 242:	74 7a                	je     2be <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2be>
 244:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 248:	8b 55 fc             	mov    -0x4(%rbp),%edx
 24b:	48 89 d0             	mov    %rdx,%rax
 24e:	48 c1 e0 04          	shl    $0x4,%rax
 252:	48 01 d0             	add    %rdx,%rax
 255:	48 c1 e0 02          	shl    $0x2,%rax
 259:	48 01 c8             	add    %rcx,%rax
 25c:	48 05 34 05 00 00    	add    $0x534,%rax
 262:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
 268:	8b 55 fc             	mov    -0x4(%rbp),%edx
 26b:	48 89 d0             	mov    %rdx,%rax
 26e:	48 c1 e0 04          	shl    $0x4,%rax
 272:	48 01 d0             	add    %rdx,%rax
 275:	48 c1 e0 02          	shl    $0x2,%rax
 279:	48 8d 90 20 05 00 00 	lea    0x520(%rax),%rdx
 280:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 284:	48 01 d0             	add    %rdx,%rax
 287:	48 83 c0 18          	add    $0x18,%rax
 28b:	ba 10 00 00 00       	mov    $0x10,%edx
 290:	be 00 00 00 00       	mov    $0x0,%esi
 295:	48 89 c7             	mov    %rax,%rdi
 298:	e8 00 00 00 00       	call   29d <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x29d>
 29d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 2a1:	8b 55 fc             	mov    -0x4(%rbp),%edx
 2a4:	48 89 d0             	mov    %rdx,%rax
 2a7:	48 c1 e0 04          	shl    $0x4,%rax
 2ab:	48 01 d0             	add    %rdx,%rax
 2ae:	48 c1 e0 02          	shl    $0x2,%rax
 2b2:	48 01 c8             	add    %rcx,%rax
 2b5:	48 05 6d 05 00 00    	add    $0x56d,%rax
 2bb:	c6 00 00             	movb   $0x0,(%rax)
 2be:	80 7d e0 00          	cmpb   $0x0,-0x20(%rbp)
 2c2:	0f 84 9e 00 00 00    	je     366 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x366>
 2c8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 2cc:	8b 55 fc             	mov    -0x4(%rbp),%edx
 2cf:	48 89 d0             	mov    %rdx,%rax
 2d2:	48 c1 e0 04          	shl    $0x4,%rax
 2d6:	48 01 d0             	add    %rdx,%rax
 2d9:	48 c1 e0 02          	shl    $0x2,%rax
 2dd:	48 01 c8             	add    %rcx,%rax
 2e0:	48 05 50 05 00 00    	add    $0x550,%rax
 2e6:	8b 00                	mov    (%rax),%eax
 2e8:	85 c0                	test   %eax,%eax
 2ea:	74 7a                	je     366 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x366>
 2ec:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 2f0:	8b 55 fc             	mov    -0x4(%rbp),%edx
 2f3:	48 89 d0             	mov    %rdx,%rax
 2f6:	48 c1 e0 04          	shl    $0x4,%rax
 2fa:	48 01 d0             	add    %rdx,%rax
 2fd:	48 c1 e0 02          	shl    $0x2,%rax
 301:	48 01 c8             	add    %rcx,%rax
 304:	48 05 50 05 00 00    	add    $0x550,%rax
 30a:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
 310:	8b 55 fc             	mov    -0x4(%rbp),%edx
 313:	48 89 d0             	mov    %rdx,%rax
 316:	48 c1 e0 04          	shl    $0x4,%rax
 31a:	48 01 d0             	add    %rdx,%rax
 31d:	48 c1 e0 02          	shl    $0x2,%rax
 321:	48 8d 90 40 05 00 00 	lea    0x540(%rax),%rdx
 328:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 32c:	48 01 d0             	add    %rdx,%rax
 32f:	48 83 c0 14          	add    $0x14,%rax
 333:	ba 10 00 00 00       	mov    $0x10,%edx
 338:	be 00 00 00 00       	mov    $0x0,%esi
 33d:	48 89 c7             	mov    %rax,%rdi
 340:	e8 00 00 00 00       	call   345 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x345>
 345:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 349:	8b 55 fc             	mov    -0x4(%rbp),%edx
 34c:	48 89 d0             	mov    %rdx,%rax
 34f:	48 c1 e0 04          	shl    $0x4,%rax
 353:	48 01 d0             	add    %rdx,%rax
 356:	48 c1 e0 02          	shl    $0x2,%rax
 35a:	48 01 c8             	add    %rcx,%rax
 35d:	48 05 6d 05 00 00    	add    $0x56d,%rax
 363:	c6 00 00             	movb   $0x0,(%rax)
 366:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 36a:	0f b6 80 0d 05 00 00 	movzbl 0x50d(%rax),%eax
 371:	83 f0 01             	xor    $0x1,%eax
 374:	84 c0                	test   %al,%al
 376:	74 50                	je     3c8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x3c8>
 378:	c6 45 f7 01          	movb   $0x1,-0x9(%rbp)
 37c:	8b 45 fc             	mov    -0x4(%rbp),%eax
 37f:	89 c7                	mov    %eax,%edi
 381:	e8 00 00 00 00       	call   386 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x386>
 386:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 38a:	8b 55 fc             	mov    -0x4(%rbp),%edx
 38d:	48 89 d0             	mov    %rdx,%rax
 390:	48 c1 e0 04          	shl    $0x4,%rax
 394:	48 01 d0             	add    %rdx,%rax
 397:	48 c1 e0 02          	shl    $0x2,%rax
 39b:	48 01 c8             	add    %rcx,%rax
 39e:	48 05 6c 05 00 00    	add    $0x56c,%rax
 3a4:	c6 00 00             	movb   $0x0,(%rax)
 3a7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 3ab:	8b 55 fc             	mov    -0x4(%rbp),%edx
 3ae:	48 89 d0             	mov    %rdx,%rax
 3b1:	48 c1 e0 04          	shl    $0x4,%rax
 3b5:	48 01 d0             	add    %rdx,%rax
 3b8:	48 c1 e0 02          	shl    $0x2,%rax
 3bc:	48 01 c8             	add    %rcx,%rax
 3bf:	48 05 6e 05 00 00    	add    $0x56e,%rax
 3c5:	c6 00 00             	movb   $0x0,(%rax)
 3c8:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
 3cc:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
 3d0:	0f 86 17 fe ff ff    	jbe    1ed <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x1ed>
 3d6:	80 7d f7 00          	cmpb   $0x0,-0x9(%rbp)
 3da:	74 65                	je     441 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x441>
 3dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 3e0:	8b 80 28 05 00 00    	mov    0x528(%rax),%eax
 3e6:	83 f8 02             	cmp    $0x2,%eax
 3e9:	74 34                	je     41f <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x41f>
 3eb:	83 f8 02             	cmp    $0x2,%eax
 3ee:	7f 50                	jg     440 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x440>
 3f0:	85 c0                	test   %eax,%eax
 3f2:	74 4c                	je     440 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x440>
 3f4:	83 f8 01             	cmp    $0x1,%eax
 3f7:	75 47                	jne    440 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x440>
 3f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 3fd:	48 8b 40 08          	mov    0x8(%rax),%rax
 401:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 405:	48 8b 52 08          	mov    0x8(%rdx),%rdx
 409:	48 8b 12             	mov    (%rdx),%rdx
 40c:	48 83 c2 28          	add    $0x28,%rdx
 410:	48 8b 12             	mov    (%rdx),%rdx
 413:	be 01 00 00 00       	mov    $0x1,%esi
 418:	48 89 c7             	mov    %rax,%rdi
 41b:	ff d2                	call   *%rdx
 41d:	eb 22                	jmp    441 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x441>
 41f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 423:	48 8b 40 08          	mov    0x8(%rax),%rax
 427:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 42b:	48 8b 52 08          	mov    0x8(%rdx),%rdx
 42f:	48 8b 12             	mov    (%rdx),%rdx
 432:	48 83 c2 30          	add    $0x30,%rdx
 436:	48 8b 12             	mov    (%rdx),%rdx
 439:	48 89 c7             	mov    %rax,%rdi
 43c:	ff d2                	call   *%rdx
 43e:	eb 01                	jmp    441 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x441>
 440:	90                   	nop
 441:	e8 00 00 00 00       	call   446 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x446>
 446:	be 02 00 00 00       	mov    $0x2,%esi
 44b:	48 89 c7             	mov    %rax,%rdi
 44e:	e8 00 00 00 00       	call   453 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x453>
 453:	bf 00 00 00 00       	mov    $0x0,%edi
 458:	e8 00 00 00 00       	call   45d <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x45d>
 45d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 461:	0f b6 80 25 05 00 00 	movzbl 0x525(%rax),%eax
 468:	83 e0 fd             	and    $0xfffffffd,%eax
 46b:	89 c2                	mov    %eax,%edx
 46d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 471:	88 90 25 05 00 00    	mov    %dl,0x525(%rax)
 477:	90                   	nop
 478:	c9                   	leave  
 479:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge11IsValidRootEv:

0000000000000000 <E131Bridge::IsValidRoot()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 05 98 00 00 00    	add    $0x98,%rax
  1a:	ba 0c 00 00 00       	mov    $0xc,%edx
  1f:	48 8d 0d 00 00 00 00 	lea    0x0(%rip),%rcx        # 26 <E131Bridge::IsValidRoot()+0x26>
  26:	48 89 ce             	mov    %rcx,%rsi
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	call   31 <E131Bridge::IsValidRoot()+0x31>
  31:	85 c0                	test   %eax,%eax
  33:	74 07                	je     3c <E131Bridge::IsValidRoot()+0x3c>
  35:	b8 00 00 00 00       	mov    $0x0,%eax
  3a:	eb 2e                	jmp    6a <E131Bridge::IsValidRoot()+0x6a>
  3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40:	8b 80 a6 00 00 00    	mov    0xa6(%rax),%eax
  46:	3d 00 00 00 04       	cmp    $0x4000000,%eax
  4b:	74 18                	je     65 <E131Bridge::IsValidRoot()+0x65>
  4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  51:	8b 80 a6 00 00 00    	mov    0xa6(%rax),%eax
  57:	3d 00 00 00 08       	cmp    $0x8000000,%eax
  5c:	74 07                	je     65 <E131Bridge::IsValidRoot()+0x65>
  5e:	b8 00 00 00 00       	mov    $0x0,%eax
  63:	eb 05                	jmp    6a <E131Bridge::IsValidRoot()+0x6a>
  65:	b8 01 00 00 00       	mov    $0x1,%eax
  6a:	c9                   	leave  
  6b:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge17IsValidDataPacketEv:

0000000000000000 <E131Bridge::IsValidDataPacket()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	0f b6 80 09 01 00 00 	movzbl 0x109(%rax),%eax
  17:	3c 02                	cmp    $0x2,%al
  19:	74 07                	je     22 <E131Bridge::IsValidDataPacket()+0x22>
  1b:	b8 00 00 00 00       	mov    $0x0,%eax
  20:	eb 4a                	jmp    6c <E131Bridge::IsValidDataPacket()+0x6c>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	0f b6 80 0a 01 00 00 	movzbl 0x10a(%rax),%eax
  2d:	3c a1                	cmp    $0xa1,%al
  2f:	74 07                	je     38 <E131Bridge::IsValidDataPacket()+0x38>
  31:	b8 00 00 00 00       	mov    $0x0,%eax
  36:	eb 34                	jmp    6c <E131Bridge::IsValidDataPacket()+0x6c>
  38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3c:	0f b7 80 0b 01 00 00 	movzwl 0x10b(%rax),%eax
  43:	66 85 c0             	test   %ax,%ax
  46:	74 07                	je     4f <E131Bridge::IsValidDataPacket()+0x4f>
  48:	b8 00 00 00 00       	mov    $0x0,%eax
  4d:	eb 1d                	jmp    6c <E131Bridge::IsValidDataPacket()+0x6c>
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  53:	0f b7 80 0d 01 00 00 	movzwl 0x10d(%rax),%eax
  5a:	66 3d 00 01          	cmp    $0x100,%ax
  5e:	74 07                	je     67 <E131Bridge::IsValidDataPacket()+0x67>
  60:	b8 00 00 00 00       	mov    $0x0,%eax
  65:	eb 05                	jmp    6c <E131Bridge::IsValidDataPacket()+0x6c>
  67:	b8 01 00 00 00       	mov    $0x1,%eax
  6c:	5d                   	pop    %rbp
  6d:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge3RunEv:

0000000000000000 <E131Bridge::Run()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	e8 00 00 00 00       	call   24 <E131Bridge::Run()+0x24>
  24:	48 89 c7             	mov    %rax,%rdi
  27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2b:	48 8d b0 90 00 00 00 	lea    0x90(%rax),%rsi
  32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  36:	48 8d 90 94 00 00 00 	lea    0x94(%rax),%rdx
  3d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41:	8b 00                	mov    (%rax),%eax
  43:	48 8d 4d ec          	lea    -0x14(%rbp),%rcx
  47:	49 89 c9             	mov    %rcx,%r9
  4a:	49 89 f0             	mov    %rsi,%r8
  4d:	b9 78 04 00 00       	mov    $0x478,%ecx
  52:	89 c6                	mov    %eax,%esi
  54:	e8 00 00 00 00       	call   59 <E131Bridge::Run()+0x59>
  59:	66 89 45 ee          	mov    %ax,-0x12(%rbp)
  5d:	e8 00 00 00 00       	call   62 <E131Bridge::Run()+0x62>
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	call   6a <E131Bridge::Run()+0x6a>
  6a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  6e:	89 42 14             	mov    %eax,0x14(%rdx)
  71:	66 83 7d ee 00       	cmpw   $0x0,-0x12(%rbp)
  76:	0f 94 c0             	sete   %al
  79:	0f b6 c0             	movzbl %al,%eax
  7c:	48 85 c0             	test   %rax,%rax
  7f:	0f 84 03 01 00 00    	je     188 <E131Bridge::Run()+0x188>
  85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  89:	0f b6 80 23 05 00 00 	movzbl 0x523(%rax),%eax
  90:	84 c0                	test   %al,%al
  92:	0f 84 81 00 00 00    	je     119 <E131Bridge::Run()+0x119>
  98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  9c:	8b 50 14             	mov    0x14(%rax),%edx
  9f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a3:	8b 48 18             	mov    0x18(%rax),%ecx
  a6:	89 d0                	mov    %edx,%eax
  a8:	29 c8                	sub    %ecx,%eax
  aa:	3d c3 09 00 00       	cmp    $0x9c3,%eax
  af:	76 35                	jbe    e6 <E131Bridge::Run()+0xe6>
  b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b5:	48 8b 40 08          	mov    0x8(%rax),%rax
  b9:	48 85 c0             	test   %rax,%rax
  bc:	74 28                	je     e6 <E131Bridge::Run()+0xe6>
  be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  c2:	0f b6 80 0c 05 00 00 	movzbl 0x50c(%rax),%eax
  c9:	83 f0 01             	xor    $0x1,%eax
  cc:	84 c0                	test   %al,%al
  ce:	74 16                	je     e6 <E131Bridge::Run()+0xe6>
  d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d4:	ba 01 00 00 00       	mov    $0x1,%edx
  d9:	be 01 00 00 00       	mov    $0x1,%esi
  de:	48 89 c7             	mov    %rax,%rdi
  e1:	e8 00 00 00 00       	call   e6 <E131Bridge::Run()+0xe6>
  e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ea:	8b 50 14             	mov    0x14(%rax),%edx
  ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f1:	8b 48 18             	mov    0x18(%rax),%ecx
  f4:	89 d0                	mov    %edx,%eax
  f6:	29 c8                	sub    %ecx,%eax
  f8:	3d e7 03 00 00       	cmp    $0x3e7,%eax
  fd:	76 1a                	jbe    119 <E131Bridge::Run()+0x119>
  ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 103:	0f b6 80 25 05 00 00 	movzbl 0x525(%rax),%eax
 10a:	83 e0 fd             	and    $0xfffffffd,%eax
 10d:	89 c2                	mov    %eax,%edx
 10f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 113:	88 90 25 05 00 00    	mov    %dl,0x525(%rax)
 119:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 11d:	0f b6 40 10          	movzbl 0x10(%rax),%eax
 121:	84 c0                	test   %al,%al
 123:	74 19                	je     13e <E131Bridge::Run()+0x13e>
 125:	e8 00 00 00 00       	call   12a <E131Bridge::Run()+0x12a>
 12a:	48 89 c7             	mov    %rax,%rdi
 12d:	e8 00 00 00 00       	call   132 <E131Bridge::Run()+0x132>
 132:	83 f8 04             	cmp    $0x4,%eax
 135:	74 07                	je     13e <E131Bridge::Run()+0x13e>
 137:	b8 01 00 00 00       	mov    $0x1,%eax
 13c:	eb 05                	jmp    143 <E131Bridge::Run()+0x143>
 13e:	b8 00 00 00 00       	mov    $0x0,%eax
 143:	84 c0                	test   %al,%al
 145:	0f 84 b2 01 00 00    	je     2fd <E131Bridge::Run()+0x2fd>
 14b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 14f:	0f b6 80 25 05 00 00 	movzbl 0x525(%rax),%eax
 156:	84 c0                	test   %al,%al
 158:	74 17                	je     171 <E131Bridge::Run()+0x171>
 15a:	e8 00 00 00 00       	call   15f <E131Bridge::Run()+0x15f>
 15f:	be 03 00 00 00       	mov    $0x3,%esi
 164:	48 89 c7             	mov    %rax,%rdi
 167:	e8 00 00 00 00       	call   16c <E131Bridge::Run()+0x16c>
 16c:	e9 8c 01 00 00       	jmp    2fd <E131Bridge::Run()+0x2fd>
 171:	e8 00 00 00 00       	call   176 <E131Bridge::Run()+0x176>
 176:	be 02 00 00 00       	mov    $0x2,%esi
 17b:	48 89 c7             	mov    %rax,%rdi
 17e:	e8 00 00 00 00       	call   183 <E131Bridge::Run()+0x183>
 183:	e9 75 01 00 00       	jmp    2fd <E131Bridge::Run()+0x2fd>
 188:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 18c:	48 89 c7             	mov    %rax,%rdi
 18f:	e8 00 00 00 00       	call   194 <E131Bridge::Run()+0x194>
 194:	83 f0 01             	xor    $0x1,%eax
 197:	0f b6 c0             	movzbl %al,%eax
 19a:	48 85 c0             	test   %rax,%rax
 19d:	0f 95 c0             	setne  %al
 1a0:	84 c0                	test   %al,%al
 1a2:	0f 85 58 01 00 00    	jne    300 <E131Bridge::Run()+0x300>
 1a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ac:	c6 80 0c 05 00 00 00 	movb   $0x0,0x50c(%rax)
 1b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1b7:	8b 50 14             	mov    0x14(%rax),%edx
 1ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1be:	89 50 18             	mov    %edx,0x18(%rax)
 1c1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1c5:	0f b6 80 0e 05 00 00 	movzbl 0x50e(%rax),%eax
 1cc:	84 c0                	test   %al,%al
 1ce:	74 39                	je     209 <E131Bridge::Run()+0x209>
 1d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1d4:	0f b6 80 0f 05 00 00 	movzbl 0x50f(%rax),%eax
 1db:	83 f0 01             	xor    $0x1,%eax
 1de:	84 c0                	test   %al,%al
 1e0:	74 27                	je     209 <E131Bridge::Run()+0x209>
 1e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1e6:	8b 50 14             	mov    0x14(%rax),%edx
 1e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ed:	8b 88 14 05 00 00    	mov    0x514(%rax),%ecx
 1f3:	89 d0                	mov    %edx,%eax
 1f5:	29 c8                	sub    %ecx,%eax
 1f7:	3d c3 09 00 00       	cmp    $0x9c3,%eax
 1fc:	76 0b                	jbe    209 <E131Bridge::Run()+0x209>
 1fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 202:	c6 80 0e 05 00 00 00 	movb   $0x0,0x50e(%rax)
 209:	c6 45 eb 00          	movb   $0x0,-0x15(%rbp)
 20d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 211:	48 8b 40 08          	mov    0x8(%rax),%rax
 215:	48 85 c0             	test   %rax,%rax
 218:	74 62                	je     27c <E131Bridge::Run()+0x27c>
 21a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 21e:	8b 80 a6 00 00 00    	mov    0xa6(%rax),%eax
 224:	0f c8                	bswap  %eax
 226:	89 45 f0             	mov    %eax,-0x10(%rbp)
 229:	83 7d f0 04          	cmpl   $0x4,-0x10(%rbp)
 22d:	75 22                	jne    251 <E131Bridge::Run()+0x251>
 22f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 233:	48 89 c7             	mov    %rax,%rdi
 236:	e8 00 00 00 00       	call   23b <E131Bridge::Run()+0x23b>
 23b:	84 c0                	test   %al,%al
 23d:	74 3d                	je     27c <E131Bridge::Run()+0x27c>
 23f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 243:	48 89 c7             	mov    %rax,%rdi
 246:	e8 00 00 00 00       	call   24b <E131Bridge::Run()+0x24b>
 24b:	c6 45 eb 01          	movb   $0x1,-0x15(%rbp)
 24f:	eb 2b                	jmp    27c <E131Bridge::Run()+0x27c>
 251:	83 7d f0 08          	cmpl   $0x8,-0x10(%rbp)
 255:	75 25                	jne    27c <E131Bridge::Run()+0x27c>
 257:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 25b:	8b 80 bc 00 00 00    	mov    0xbc(%rax),%eax
 261:	0f c8                	bswap  %eax
 263:	89 45 f4             	mov    %eax,-0xc(%rbp)
 266:	83 7d f4 01          	cmpl   $0x1,-0xc(%rbp)
 26a:	75 10                	jne    27c <E131Bridge::Run()+0x27c>
 26c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 270:	48 89 c7             	mov    %rax,%rdi
 273:	e8 00 00 00 00       	call   278 <E131Bridge::Run()+0x278>
 278:	c6 45 eb 01          	movb   $0x1,-0x15(%rbp)
 27c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 280:	0f b6 40 10          	movzbl 0x10(%rax),%eax
 284:	84 c0                	test   %al,%al
 286:	74 19                	je     2a1 <E131Bridge::Run()+0x2a1>
 288:	e8 00 00 00 00       	call   28d <E131Bridge::Run()+0x28d>
 28d:	48 89 c7             	mov    %rax,%rdi
 290:	e8 00 00 00 00       	call   295 <E131Bridge::Run()+0x295>
 295:	83 f8 04             	cmp    $0x4,%eax
 298:	74 07                	je     2a1 <E131Bridge::Run()+0x2a1>
 29a:	b8 01 00 00 00       	mov    $0x1,%eax
 29f:	eb 05                	jmp    2a6 <E131Bridge::Run()+0x2a6>
 2a1:	b8 00 00 00 00       	mov    $0x0,%eax
 2a6:	84 c0                	test   %al,%al
 2a8:	74 35                	je     2df <E131Bridge::Run()+0x2df>
 2aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 2ae:	0f b6 80 25 05 00 00 	movzbl 0x525(%rax),%eax
 2b5:	84 c0                	test   %al,%al
 2b7:	74 14                	je     2cd <E131Bridge::Run()+0x2cd>
 2b9:	e8 00 00 00 00       	call   2be <E131Bridge::Run()+0x2be>
 2be:	be 03 00 00 00       	mov    $0x3,%esi
 2c3:	48 89 c7             	mov    %rax,%rdi
 2c6:	e8 00 00 00 00       	call   2cb <E131Bridge::Run()+0x2cb>
 2cb:	eb 12                	jmp    2df <E131Bridge::Run()+0x2df>
 2cd:	e8 00 00 00 00       	call   2d2 <E131Bridge::Run()+0x2d2>
 2d2:	be 02 00 00 00       	mov    $0x2,%esi
 2d7:	48 89 c7             	mov    %rax,%rdi
 2da:	e8 00 00 00 00       	call   2df <E131Bridge::Run()+0x2df>
 2df:	80 7d eb 00          	cmpb   $0x0,-0x15(%rbp)
 2e3:	74 0c                	je     2f1 <E131Bridge::Run()+0x2f1>
 2e5:	bf 00 00 00 00       	mov    $0x0,%edi
 2ea:	e8 00 00 00 00       	call   2ef <E131Bridge::Run()+0x2ef>
 2ef:	eb 10                	jmp    301 <E131Bridge::Run()+0x301>
 2f1:	bf 00 00 00 00       	mov    $0x0,%edi
 2f6:	e8 00 00 00 00       	call   2fb <E131Bridge::Run()+0x2fb>
 2fb:	eb 04                	jmp    301 <E131Bridge::Run()+0x301>
 2fd:	90                   	nop
 2fe:	eb 01                	jmp    301 <E131Bridge::Run()+0x301>
 300:	90                   	nop
 301:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 305:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 30c:	00 00 
 30e:	74 05                	je     315 <E131Bridge::Run()+0x315>
 310:	e8 00 00 00 00       	call   315 <E131Bridge::Run()+0x315>
 315:	c9                   	leave  
 316:	c3                   	ret    

Disassembly of section .text._ZSt3maxIhERKT_S2_S2_:

0000000000000000 <unsigned char const& std::max<unsigned char>(unsigned char const&, unsigned char const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b6 10             	movzbl (%rax),%edx
  17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1b:	0f b6 00             	movzbl (%rax),%eax
  1e:	38 c2                	cmp    %al,%dl
  20:	73 06                	jae    28 <unsigned char const& std::max<unsigned char>(unsigned char const&, unsigned char const&)+0x28>
  22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  26:	eb 04                	jmp    2c <unsigned char const& std::max<unsigned char>(unsigned char const&, unsigned char const&)+0x2c>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	5d                   	pop    %rbp
  2d:	c3                   	ret    

e131bridgediscoverypacket.o:     file format elf64-x86-64


Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # f <Network::Get()+0xf>
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge19FillDiscoveryPacketEv:

0000000000000000 <E131Bridge::FillDiscoveryPacket()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b6 80 22 05 00 00 	movzbl 0x522(%rax),%eax
  1b:	0f b6 d0             	movzbl %al,%edx
  1e:	b8 00 02 00 00       	mov    $0x200,%eax
  23:	29 d0                	sub    %edx,%eax
  25:	01 c0                	add    %eax,%eax
  27:	ba 78 04 00 00       	mov    $0x478,%edx
  2c:	29 c2                	sub    %eax,%edx
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	66 89 90 1c 05 00 00 	mov    %dx,0x51c(%rax)
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	48 8b 40 28          	mov    0x28(%rax),%rax
  41:	ba 78 04 00 00       	mov    $0x478,%edx
  46:	be 00 00 00 00       	mov    $0x0,%esi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	call   53 <E131Bridge::FillDiscoveryPacket()+0x53>
  53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  57:	48 8b 40 28          	mov    0x28(%rax),%rax
  5b:	66 c7 00 00 10       	movw   $0x1000,(%rax)
  60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  64:	48 8b 40 28          	mov    0x28(%rax),%rax
  68:	48 83 c0 04          	add    $0x4,%rax
  6c:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 73 <E131Bridge::FillDiscoveryPacket()+0x73>
  73:	48 89 10             	mov    %rdx,(%rax)
  76:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 7c <E131Bridge::FillDiscoveryPacket()+0x7c>
  7c:	89 50 08             	mov    %edx,0x8(%rax)
  7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  83:	0f b6 80 22 05 00 00 	movzbl 0x522(%rax),%eax
  8a:	0f b6 d0             	movzbl %al,%edx
  8d:	b8 00 02 00 00       	mov    $0x200,%eax
  92:	29 d0                	sub    %edx,%eax
  94:	89 c2                	mov    %eax,%edx
  96:	b8 34 02 00 00       	mov    $0x234,%eax
  9b:	29 d0                	sub    %edx,%eax
  9d:	01 c0                	add    %eax,%eax
  9f:	80 cc 70             	or     $0x70,%ah
  a2:	0f b7 d0             	movzwl %ax,%edx
  a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a9:	48 8b 40 28          	mov    0x28(%rax),%rax
  ad:	66 c1 c2 08          	rol    $0x8,%dx
  b1:	66 89 50 10          	mov    %dx,0x10(%rax)
  b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b9:	48 8b 40 28          	mov    0x28(%rax),%rax
  bd:	c7 40 12 00 00 00 08 	movl   $0x8000000,0x12(%rax)
  c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c8:	48 8d 50 34          	lea    0x34(%rax),%rdx
  cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d0:	48 8b 40 28          	mov    0x28(%rax),%rax
  d4:	48 8d 48 16          	lea    0x16(%rax),%rcx
  d8:	48 8b 02             	mov    (%rdx),%rax
  db:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  df:	48 89 01             	mov    %rax,(%rcx)
  e2:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ea:	0f b6 80 22 05 00 00 	movzbl 0x522(%rax),%eax
  f1:	0f b6 d0             	movzbl %al,%edx
  f4:	b8 00 02 00 00       	mov    $0x200,%eax
  f9:	29 d0                	sub    %edx,%eax
  fb:	89 c2                	mov    %eax,%edx
  fd:	b8 29 02 00 00       	mov    $0x229,%eax
 102:	29 d0                	sub    %edx,%eax
 104:	01 c0                	add    %eax,%eax
 106:	80 cc 70             	or     $0x70,%ah
 109:	0f b7 d0             	movzwl %ax,%edx
 10c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 110:	48 8b 40 28          	mov    0x28(%rax),%rax
 114:	66 c1 c2 08          	rol    $0x8,%dx
 118:	66 89 50 26          	mov    %dx,0x26(%rax)
 11c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 120:	48 8b 40 28          	mov    0x28(%rax),%rax
 124:	c7 40 28 00 00 00 02 	movl   $0x2000000,0x28(%rax)
 12b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 12f:	48 8d 48 44          	lea    0x44(%rax),%rcx
 133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 137:	48 8b 40 28          	mov    0x28(%rax),%rax
 13b:	48 83 c0 2c          	add    $0x2c,%rax
 13f:	ba 40 00 00 00       	mov    $0x40,%edx
 144:	48 89 ce             	mov    %rcx,%rsi
 147:	48 89 c7             	mov    %rax,%rdi
 14a:	e8 00 00 00 00       	call   14f <E131Bridge::FillDiscoveryPacket()+0x14f>
 14f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 153:	0f b6 80 22 05 00 00 	movzbl 0x522(%rax),%eax
 15a:	0f b6 d0             	movzbl %al,%edx
 15d:	b8 00 02 00 00       	mov    $0x200,%eax
 162:	29 d0                	sub    %edx,%eax
 164:	89 c2                	mov    %eax,%edx
 166:	b8 04 02 00 00       	mov    $0x204,%eax
 16b:	29 d0                	sub    %edx,%eax
 16d:	01 c0                	add    %eax,%eax
 16f:	80 cc 70             	or     $0x70,%ah
 172:	0f b7 d0             	movzwl %ax,%edx
 175:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 179:	48 8b 40 28          	mov    0x28(%rax),%rax
 17d:	66 c1 c2 08          	rol    $0x8,%dx
 181:	66 89 50 70          	mov    %dx,0x70(%rax)
 185:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 189:	48 8b 40 28          	mov    0x28(%rax),%rax
 18d:	c7 40 72 00 00 00 01 	movl   $0x1000000,0x72(%rax)
 194:	90                   	nop
 195:	c9                   	leave  
 196:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge19SendDiscoveryPacketEv:

0000000000000000 <E131Bridge::SendDiscoveryPacket()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  23:	8b 50 14             	mov    0x14(%rax),%edx
  26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2a:	8b 88 18 05 00 00    	mov    0x518(%rax),%ecx
  30:	89 d0                	mov    %edx,%eax
  32:	29 c8                	sub    %ecx,%eax
  34:	3d 0f 27 00 00       	cmp    $0x270f,%eax
  39:	0f 86 ba 00 00 00    	jbe    f9 <E131Bridge::SendDiscoveryPacket()+0xf9>
  3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  43:	8b 50 14             	mov    0x14(%rax),%edx
  46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4a:	89 90 18 05 00 00    	mov    %edx,0x518(%rax)
  50:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5b:	0f b6 80 22 05 00 00 	movzbl 0x522(%rax),%eax
  62:	84 c0                	test   %al,%al
  64:	74 58                	je     be <E131Bridge::SendDiscoveryPacket()+0xbe>
  66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  6d:	eb 49                	jmp    b8 <E131Bridge::SendDiscoveryPacket()+0xb8>
  6f:	48 8d 55 ee          	lea    -0x12(%rbp),%rdx
  73:	8b 75 f4             	mov    -0xc(%rbp),%esi
  76:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7a:	b9 00 00 00 00       	mov    $0x0,%ecx
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	call   87 <E131Bridge::SendDiscoveryPacket()+0x87>
  87:	84 c0                	test   %al,%al
  89:	74 29                	je     b4 <E131Bridge::SendDiscoveryPacket()+0xb4>
  8b:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  8f:	0f b7 f0             	movzwl %ax,%esi
  92:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  96:	48 8b 40 28          	mov    0x28(%rax),%rax
  9a:	8b 55 f0             	mov    -0x10(%rbp),%edx
  9d:	8d 4a 01             	lea    0x1(%rdx),%ecx
  a0:	89 4d f0             	mov    %ecx,-0x10(%rbp)
  a3:	89 f1                	mov    %esi,%ecx
  a5:	66 c1 c1 08          	rol    $0x8,%cx
  a9:	89 d2                	mov    %edx,%edx
  ab:	48 83 c2 38          	add    $0x38,%rdx
  af:	66 89 4c 50 08       	mov    %cx,0x8(%rax,%rdx,2)
  b4:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  b8:	83 7d f4 03          	cmpl   $0x3,-0xc(%rbp)
  bc:	76 b1                	jbe    6f <E131Bridge::SendDiscoveryPacket()+0x6f>
  be:	e8 00 00 00 00       	call   c3 <E131Bridge::SendDiscoveryPacket()+0xc3>
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ca:	8b 70 30             	mov    0x30(%rax),%esi
  cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d1:	0f b7 80 1c 05 00 00 	movzwl 0x51c(%rax),%eax
  d8:	0f b7 c8             	movzwl %ax,%ecx
  db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  df:	48 8b 50 28          	mov    0x28(%rax),%rdx
  e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  e7:	8b 00                	mov    (%rax),%eax
  e9:	41 b9 c0 15 00 00    	mov    $0x15c0,%r9d
  ef:	41 89 f0             	mov    %esi,%r8d
  f2:	89 c6                	mov    %eax,%esi
  f4:	e8 00 00 00 00       	call   f9 <E131Bridge::SendDiscoveryPacket()+0xf9>
  f9:	90                   	nop
  fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  fe:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 105:	00 00 
 107:	74 05                	je     10e <E131Bridge::SendDiscoveryPacket()+0x10e>
 109:	e8 00 00 00 00       	call   10e <E131Bridge::SendDiscoveryPacket()+0x10e>
 10e:	c9                   	leave  
 10f:	c3                   	ret    

e131bridgehandledmxin.o:     file format elf64-x86-64


Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # f <Network::Get()+0xf>
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text._ZN3halL12panel_led_onEj:

0000000000000000 <hal::panel_led_on(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text._ZN3halL13panel_led_offEj:

0000000000000000 <hal::panel_led_off(unsigned int)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 7d fc             	mov    %edi,-0x4(%rbp)
   7:	90                   	nop
   8:	5d                   	pop    %rbp
   9:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge14FillDataPacketEv:

0000000000000000 <E131Bridge::FillDataPacket()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 20          	mov    0x20(%rax),%rax
  18:	66 c7 00 00 10       	movw   $0x1000,(%rax)
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 8b 40 20          	mov    0x20(%rax),%rax
  25:	66 c7 40 02 00 00    	movw   $0x0,0x2(%rax)
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 8b 40 20          	mov    0x20(%rax),%rax
  33:	48 83 c0 04          	add    $0x4,%rax
  37:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 3e <E131Bridge::FillDataPacket()+0x3e>
  3e:	48 89 10             	mov    %rdx,(%rax)
  41:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 47 <E131Bridge::FillDataPacket()+0x47>
  47:	89 50 08             	mov    %edx,0x8(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8b 40 20          	mov    0x20(%rax),%rax
  52:	c7 40 12 00 00 00 04 	movl   $0x4000000,0x12(%rax)
  59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5d:	48 8d 50 34          	lea    0x34(%rax),%rdx
  61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  65:	48 8b 40 20          	mov    0x20(%rax),%rax
  69:	48 8d 48 16          	lea    0x16(%rax),%rcx
  6d:	48 8b 02             	mov    (%rdx),%rax
  70:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  74:	48 89 01             	mov    %rax,(%rcx)
  77:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7f:	48 8b 40 20          	mov    0x20(%rax),%rax
  83:	c7 40 28 00 00 00 02 	movl   $0x2000000,0x28(%rax)
  8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8e:	48 8d 48 44          	lea    0x44(%rax),%rcx
  92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  96:	48 8b 40 20          	mov    0x20(%rax),%rax
  9a:	48 83 c0 2c          	add    $0x2c,%rax
  9e:	ba 40 00 00 00       	mov    $0x40,%edx
  a3:	48 89 ce             	mov    %rcx,%rsi
  a6:	48 89 c7             	mov    %rax,%rdi
  a9:	e8 00 00 00 00       	call   ae <E131Bridge::FillDataPacket()+0xae>
  ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b2:	48 8b 40 20          	mov    0x20(%rax),%rax
  b6:	66 c7 40 6d 00 00    	movw   $0x0,0x6d(%rax)
  bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c0:	48 8b 40 20          	mov    0x20(%rax),%rax
  c4:	c6 40 70 00          	movb   $0x0,0x70(%rax)
  c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  cc:	48 8b 40 20          	mov    0x20(%rax),%rax
  d0:	c6 40 75 02          	movb   $0x2,0x75(%rax)
  d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d8:	48 8b 40 20          	mov    0x20(%rax),%rax
  dc:	c6 40 76 a1          	movb   $0xa1,0x76(%rax)
  e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e4:	48 8b 40 20          	mov    0x20(%rax),%rax
  e8:	66 c7 40 77 00 00    	movw   $0x0,0x77(%rax)
  ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f2:	48 8b 40 20          	mov    0x20(%rax),%rax
  f6:	66 c7 40 79 00 01    	movw   $0x100,0x79(%rax)
  fc:	90                   	nop
  fd:	c9                   	leave  
  fe:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge11HandleDmxInEv:

0000000000000000 <E131Bridge::HandleDmxIn()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  17:	00 00 
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	31 c0                	xor    %eax,%eax
  1f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  26:	e9 92 02 00 00       	jmp    2bd <E131Bridge::HandleDmxIn()+0x2bd>
  2b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  2f:	8b 55 ec             	mov    -0x14(%rbp),%edx
  32:	48 89 d0             	mov    %rdx,%rax
  35:	48 01 c0             	add    %rax,%rax
  38:	48 01 d0             	add    %rdx,%rax
  3b:	48 c1 e0 02          	shl    $0x2,%rax
  3f:	48 01 c8             	add    %rcx,%rax
  42:	48 05 3e 06 00 00    	add    $0x63e,%rax
  48:	0f b6 00             	movzbl (%rax),%eax
  4b:	84 c0                	test   %al,%al
  4d:	0f 84 66 02 00 00    	je     2b9 <E131Bridge::HandleDmxIn()+0x2b9>
  53:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
  57:	48 8d 4d e4          	lea    -0x1c(%rbp),%rcx
  5b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  5e:	48 89 ce             	mov    %rcx,%rsi
  61:	89 c7                	mov    %eax,%edi
  63:	e8 00 00 00 00       	call   68 <E131Bridge::HandleDmxIn()+0x68>
  68:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  6c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  71:	0f 84 ed 01 00 00    	je     264 <E131Bridge::HandleDmxIn()+0x264>
  77:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  7a:	83 c0 6d             	add    $0x6d,%eax
  7d:	80 cc 70             	or     $0x70,%ah
  80:	0f b7 d0             	movzwl %ax,%edx
  83:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  87:	48 8b 40 20          	mov    0x20(%rax),%rax
  8b:	66 c1 c2 08          	rol    $0x8,%dx
  8f:	66 89 50 10          	mov    %dx,0x10(%rax)
  93:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  96:	83 c0 57             	add    $0x57,%eax
  99:	80 cc 70             	or     $0x70,%ah
  9c:	0f b7 d0             	movzwl %ax,%edx
  9f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a3:	48 8b 40 20          	mov    0x20(%rax),%rax
  a7:	66 c1 c2 08          	rol    $0x8,%dx
  ab:	66 89 50 26          	mov    %dx,0x26(%rax)
  af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b3:	48 8b 50 20          	mov    0x20(%rax),%rdx
  b7:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
  bb:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  be:	48 89 c8             	mov    %rcx,%rax
  c1:	48 01 c0             	add    %rax,%rax
  c4:	48 01 c8             	add    %rcx,%rax
  c7:	48 c1 e0 02          	shl    $0x2,%rax
  cb:	48 01 f0             	add    %rsi,%rax
  ce:	48 05 45 06 00 00    	add    $0x645,%rax
  d4:	0f b6 00             	movzbl (%rax),%eax
  d7:	88 42 6c             	mov    %al,0x6c(%rdx)
  da:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  de:	8b 55 ec             	mov    -0x14(%rbp),%edx
  e1:	48 89 d0             	mov    %rdx,%rax
  e4:	48 01 c0             	add    %rax,%rax
  e7:	48 01 d0             	add    %rdx,%rax
  ea:	48 c1 e0 02          	shl    $0x2,%rax
  ee:	48 01 c8             	add    %rcx,%rax
  f1:	48 05 44 06 00 00    	add    $0x644,%rax
  f7:	0f b6 10             	movzbl (%rax),%edx
  fa:	8d 4a 01             	lea    0x1(%rdx),%ecx
  fd:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
 101:	8b 75 ec             	mov    -0x14(%rbp),%esi
 104:	48 89 f0             	mov    %rsi,%rax
 107:	48 01 c0             	add    %rax,%rax
 10a:	48 01 f0             	add    %rsi,%rax
 10d:	48 c1 e0 02          	shl    $0x2,%rax
 111:	48 01 f8             	add    %rdi,%rax
 114:	48 05 44 06 00 00    	add    $0x644,%rax
 11a:	88 08                	mov    %cl,(%rax)
 11c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 120:	48 8b 40 20          	mov    0x20(%rax),%rax
 124:	88 50 6f             	mov    %dl,0x6f(%rax)
 127:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 12b:	8b 55 ec             	mov    -0x14(%rbp),%edx
 12e:	48 89 d0             	mov    %rdx,%rax
 131:	48 01 c0             	add    %rax,%rax
 134:	48 01 d0             	add    %rdx,%rax
 137:	48 c1 e0 02          	shl    $0x2,%rax
 13b:	48 01 c8             	add    %rcx,%rax
 13e:	48 05 3c 06 00 00    	add    $0x63c,%rax
 144:	0f b7 00             	movzwl (%rax),%eax
 147:	0f b7 d0             	movzwl %ax,%edx
 14a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 14e:	48 8b 40 20          	mov    0x20(%rax),%rax
 152:	66 c1 c2 08          	rol    $0x8,%dx
 156:	66 89 50 71          	mov    %dx,0x71(%rax)
 15a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 15d:	83 c0 0a             	add    $0xa,%eax
 160:	80 cc 70             	or     $0x70,%ah
 163:	0f b7 d0             	movzwl %ax,%edx
 166:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 16a:	48 8b 40 20          	mov    0x20(%rax),%rax
 16e:	66 c1 c2 08          	rol    $0x8,%dx
 172:	66 89 50 73          	mov    %dx,0x73(%rax)
 176:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 179:	89 c2                	mov    %eax,%edx
 17b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 17f:	48 8b 40 20          	mov    0x20(%rax),%rax
 183:	48 8d 48 7d          	lea    0x7d(%rax),%rcx
 187:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 18b:	48 89 c6             	mov    %rax,%rsi
 18e:	48 89 cf             	mov    %rcx,%rdi
 191:	e8 00 00 00 00       	call   196 <E131Bridge::HandleDmxIn()+0x196>
 196:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 199:	0f b7 d0             	movzwl %ax,%edx
 19c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1a0:	48 8b 40 20          	mov    0x20(%rax),%rax
 1a4:	66 c1 c2 08          	rol    $0x8,%dx
 1a8:	66 89 50 7b          	mov    %dx,0x7b(%rax)
 1ac:	e8 00 00 00 00       	call   1b1 <E131Bridge::HandleDmxIn()+0x1b1>
 1b1:	48 89 c7             	mov    %rax,%rdi
 1b4:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 1b8:	8b 55 ec             	mov    -0x14(%rbp),%edx
 1bb:	48 89 d0             	mov    %rdx,%rax
 1be:	48 01 c0             	add    %rax,%rax
 1c1:	48 01 d0             	add    %rdx,%rax
 1c4:	48 c1 e0 02          	shl    $0x2,%rax
 1c8:	48 01 c8             	add    %rcx,%rax
 1cb:	48 05 40 06 00 00    	add    $0x640,%rax
 1d1:	8b 30                	mov    (%rax),%esi
 1d3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 1d6:	83 c0 7d             	add    $0x7d,%eax
 1d9:	0f b7 c8             	movzwl %ax,%ecx
 1dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1e0:	48 8b 50 20          	mov    0x20(%rax),%rdx
 1e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1e8:	8b 00                	mov    (%rax),%eax
 1ea:	41 b9 c0 15 00 00    	mov    $0x15c0,%r9d
 1f0:	41 89 f0             	mov    %esi,%r8d
 1f3:	89 c6                	mov    %eax,%esi
 1f5:	e8 00 00 00 00       	call   1fa <E131Bridge::HandleDmxIn()+0x1fa>
 1fa:	8b 45 ec             	mov    -0x14(%rbp),%eax
 1fd:	ba 01 00 00 00       	mov    $0x1,%edx
 202:	89 c1                	mov    %eax,%ecx
 204:	d3 e2                	shl    %cl,%edx
 206:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 20c <E131Bridge::HandleDmxIn()+0x20c>
 20c:	21 c2                	and    %eax,%edx
 20e:	8b 45 ec             	mov    -0x14(%rbp),%eax
 211:	be 01 00 00 00       	mov    $0x1,%esi
 216:	89 c1                	mov    %eax,%ecx
 218:	d3 e6                	shl    %cl,%esi
 21a:	89 f0                	mov    %esi,%eax
 21c:	39 c2                	cmp    %eax,%edx
 21e:	0f 84 95 00 00 00    	je     2b9 <E131Bridge::HandleDmxIn()+0x2b9>
 224:	8b 45 ec             	mov    -0x14(%rbp),%eax
 227:	ba 01 00 00 00       	mov    $0x1,%edx
 22c:	89 c1                	mov    %eax,%ecx
 22e:	d3 e2                	shl    %cl,%edx
 230:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 236 <E131Bridge::HandleDmxIn()+0x236>
 236:	09 d0                	or     %edx,%eax
 238:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 23e <E131Bridge::HandleDmxIn()+0x23e>
 23e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 242:	0f b6 80 25 05 00 00 	movzbl 0x525(%rax),%eax
 249:	83 c8 01             	or     $0x1,%eax
 24c:	89 c2                	mov    %eax,%edx
 24e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 252:	88 90 25 05 00 00    	mov    %dl,0x525(%rax)
 258:	bf 00 00 00 00       	mov    $0x0,%edi
 25d:	e8 00 00 00 00       	call   262 <E131Bridge::HandleDmxIn()+0x262>
 262:	eb 55                	jmp    2b9 <E131Bridge::HandleDmxIn()+0x2b9>
 264:	8b 45 e8             	mov    -0x18(%rbp),%eax
 267:	85 c0                	test   %eax,%eax
 269:	75 4e                	jne    2b9 <E131Bridge::HandleDmxIn()+0x2b9>
 26b:	8b 45 ec             	mov    -0x14(%rbp),%eax
 26e:	ba 01 00 00 00       	mov    $0x1,%edx
 273:	89 c1                	mov    %eax,%ecx
 275:	d3 e2                	shl    %cl,%edx
 277:	89 d0                	mov    %edx,%eax
 279:	f7 d0                	not    %eax
 27b:	89 c2                	mov    %eax,%edx
 27d:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 283 <E131Bridge::HandleDmxIn()+0x283>
 283:	21 d0                	and    %edx,%eax
 285:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 28b <E131Bridge::HandleDmxIn()+0x28b>
 28b:	bf 00 00 00 00       	mov    $0x0,%edi
 290:	e8 00 00 00 00       	call   295 <E131Bridge::HandleDmxIn()+0x295>
 295:	8b 05 00 00 00 00    	mov    0x0(%rip),%eax        # 29b <E131Bridge::HandleDmxIn()+0x29b>
 29b:	85 c0                	test   %eax,%eax
 29d:	75 1a                	jne    2b9 <E131Bridge::HandleDmxIn()+0x2b9>
 29f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 2a3:	0f b6 80 25 05 00 00 	movzbl 0x525(%rax),%eax
 2aa:	83 e0 fe             	and    $0xfffffffe,%eax
 2ad:	89 c2                	mov    %eax,%edx
 2af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 2b3:	88 90 25 05 00 00    	mov    %dl,0x525(%rax)
 2b9:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
 2bd:	83 7d ec 03          	cmpl   $0x3,-0x14(%rbp)
 2c1:	0f 86 64 fd ff ff    	jbe    2b <E131Bridge::HandleDmxIn()+0x2b>
 2c7:	90                   	nop
 2c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 2cc:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 2d3:	00 00 
 2d5:	74 05                	je     2dc <E131Bridge::HandleDmxIn()+0x2dc>
 2d7:	e8 00 00 00 00       	call   2dc <E131Bridge::HandleDmxIn()+0x2dc>
 2dc:	c9                   	leave  
 2dd:	c3                   	ret    

e131bridgehandlesynchronization.o:     file format elf64-x86-64


Disassembly of section .text._ZN8lightset4Data3GetEv:

0000000000000000 <lightset::Data::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # f <lightset::Data::Get()+0xf>
   f:	84 c0                	test   %al,%al
  11:	0f 94 c0             	sete   %al
  14:	84 c0                	test   %al,%al
  16:	74 36                	je     4e <lightset::Data::Get()+0x4e>
  18:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1f <lightset::Data::Get()+0x1f>
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	call   27 <lightset::Data::Get()+0x27>
  27:	85 c0                	test   %eax,%eax
  29:	0f 95 c0             	setne  %al
  2c:	84 c0                	test   %al,%al
  2e:	74 1e                	je     4e <lightset::Data::Get()+0x4e>
  30:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 37 <lightset::Data::Get()+0x37>
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	call   3f <lightset::Data::Get()+0x3f>
  3f:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 46 <lightset::Data::Get()+0x46>
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	call   4e <lightset::Data::Get()+0x4e>
  4e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 55 <lightset::Data::Get()+0x55>
  55:	5d                   	pop    %rbp
  56:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data6OutputEP8LightSetj:

0000000000000000 <lightset::Data::Output(LightSet*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 75 f4             	mov    %esi,-0xc(%rbp)
  13:	e8 00 00 00 00       	call   18 <lightset::Data::Output(LightSet*, unsigned int)+0x18>
  18:	48 89 c1             	mov    %rax,%rcx
  1b:	8b 55 f4             	mov    -0xc(%rbp),%edx
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 89 c6             	mov    %rax,%rsi
  25:	48 89 cf             	mov    %rcx,%rdi
  28:	e8 00 00 00 00       	call   2d <lightset::Data::Output(LightSet*, unsigned int)+0x2d>
  2d:	90                   	nop
  2e:	c9                   	leave  
  2f:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data11ClearLengthEj:

0000000000000000 <lightset::Data::ClearLength(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	89 7d fc             	mov    %edi,-0x4(%rbp)
   f:	e8 00 00 00 00       	call   14 <lightset::Data::ClearLength(unsigned int)+0x14>
  14:	48 89 c2             	mov    %rax,%rdx
  17:	8b 45 fc             	mov    -0x4(%rbp),%eax
  1a:	89 c6                	mov    %eax,%esi
  1c:	48 89 d7             	mov    %rdx,%rdi
  1f:	e8 00 00 00 00       	call   24 <lightset::Data::ClearLength(unsigned int)+0x24>
  24:	90                   	nop
  25:	c9                   	leave  
  26:	c3                   	ret    

Disassembly of section .text._ZN8lightset4DataC2Ev:

0000000000000000 <lightset::Data::Data()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	90                   	nop
   d:	5d                   	pop    %rbp
   e:	c3                   	ret    

Disassembly of section .text._ZNK8lightset4Data7IOutputEP8LightSetj:

0000000000000000 <lightset::Data::IOutput(LightSet*, unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	89 55 ec             	mov    %edx,-0x14(%rbp)
  17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1b:	48 8b 00             	mov    (%rax),%rax
  1e:	48 83 c0 20          	add    $0x20,%rax
  22:	4c 8b 00             	mov    (%rax),%r8
  25:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  29:	8b 45 ec             	mov    -0x14(%rbp),%eax
  2c:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  33:	48 01 d0             	add    %rdx,%rax
  36:	48 05 00 06 00 00    	add    $0x600,%rax
  3c:	8b 10                	mov    (%rax),%edx
  3e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  41:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  48:	48 8d 88 00 04 00 00 	lea    0x400(%rax),%rcx
  4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  53:	48 8d 3c 01          	lea    (%rcx,%rax,1),%rdi
  57:	8b 75 ec             	mov    -0x14(%rbp),%esi
  5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  5e:	89 d1                	mov    %edx,%ecx
  60:	48 89 fa             	mov    %rdi,%rdx
  63:	48 89 c7             	mov    %rax,%rdi
  66:	41 ff d0             	call   *%r8
  69:	90                   	nop
  6a:	c9                   	leave  
  6b:	c3                   	ret    

Disassembly of section .text._ZN8lightset4Data12IClearLengthEj:

0000000000000000 <lightset::Data::IClearLength(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 75 f4             	mov    %esi,-0xc(%rbp)
   f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  13:	8b 45 f4             	mov    -0xc(%rbp),%eax
  16:	48 69 c0 04 06 00 00 	imul   $0x604,%rax,%rax
  1d:	48 01 d0             	add    %rdx,%rax
  20:	48 05 00 06 00 00    	add    $0x600,%rax
  26:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  2c:	90                   	nop
  2d:	5d                   	pop    %rbp
  2e:	c3                   	ret    

Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # f <Hardware::Get()+0xf>
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge21HandleSynchronizationEv:

0000000000000000 <E131Bridge::HandleSynchronization()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	0f b7 80 c1 00 00 00 	movzwl 0xc1(%rax),%eax
  1b:	0f b7 c0             	movzwl %ax,%eax
  1e:	66 c1 c0 08          	rol    $0x8,%ax
  22:	66 89 45 fa          	mov    %ax,-0x6(%rbp)
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	0f b7 80 1e 05 00 00 	movzwl 0x51e(%rax),%eax
  31:	66 39 45 fa          	cmp    %ax,-0x6(%rbp)
  35:	74 28                	je     5f <E131Bridge::HandleSynchronization()+0x5f>
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	0f b7 80 20 05 00 00 	movzwl 0x520(%rax),%eax
  42:	66 39 45 fa          	cmp    %ax,-0x6(%rbp)
  46:	74 17                	je     5f <E131Bridge::HandleSynchronization()+0x5f>
  48:	e8 00 00 00 00       	call   4d <E131Bridge::HandleSynchronization()+0x4d>
  4d:	be 02 00 00 00       	mov    $0x2,%esi
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	call   5a <E131Bridge::HandleSynchronization()+0x5a>
  5a:	e9 15 01 00 00       	jmp    174 <E131Bridge::HandleSynchronization()+0x174>
  5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  63:	8b 50 14             	mov    0x14(%rax),%edx
  66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6a:	89 90 14 05 00 00    	mov    %edx,0x514(%rax)
  70:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  77:	e9 b9 00 00 00       	jmp    135 <E131Bridge::HandleSynchronization()+0x135>
  7c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80:	8b 55 fc             	mov    -0x4(%rbp),%edx
  83:	48 89 d0             	mov    %rdx,%rax
  86:	48 c1 e0 04          	shl    $0x4,%rax
  8a:	48 01 d0             	add    %rdx,%rax
  8d:	48 c1 e0 02          	shl    $0x2,%rax
  91:	48 01 c8             	add    %rcx,%rax
  94:	48 05 2e 05 00 00    	add    $0x52e,%rax
  9a:	0f b6 00             	movzbl (%rax),%eax
  9d:	84 c0                	test   %al,%al
  9f:	0f 84 8c 00 00 00    	je     131 <E131Bridge::HandleSynchronization()+0x131>
  a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a9:	48 8b 40 08          	mov    0x8(%rax),%rax
  ad:	8b 55 fc             	mov    -0x4(%rbp),%edx
  b0:	89 d6                	mov    %edx,%esi
  b2:	48 89 c7             	mov    %rax,%rdi
  b5:	e8 00 00 00 00       	call   ba <E131Bridge::HandleSynchronization()+0xba>
  ba:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  be:	8b 55 fc             	mov    -0x4(%rbp),%edx
  c1:	48 89 d0             	mov    %rdx,%rax
  c4:	48 c1 e0 04          	shl    $0x4,%rax
  c8:	48 01 d0             	add    %rdx,%rax
  cb:	48 c1 e0 02          	shl    $0x2,%rax
  cf:	48 01 c8             	add    %rcx,%rax
  d2:	48 05 6e 05 00 00    	add    $0x56e,%rax
  d8:	0f b6 00             	movzbl (%rax),%eax
  db:	83 f0 01             	xor    $0x1,%eax
  de:	84 c0                	test   %al,%al
  e0:	74 45                	je     127 <E131Bridge::HandleSynchronization()+0x127>
  e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  e6:	48 8b 40 08          	mov    0x8(%rax),%rax
  ea:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  ee:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  f2:	48 8b 12             	mov    (%rdx),%rdx
  f5:	48 83 c2 10          	add    $0x10,%rdx
  f9:	48 8b 0a             	mov    (%rdx),%rcx
  fc:	8b 55 fc             	mov    -0x4(%rbp),%edx
  ff:	89 d6                	mov    %edx,%esi
 101:	48 89 c7             	mov    %rax,%rdi
 104:	ff d1                	call   *%rcx
 106:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 10a:	8b 55 fc             	mov    -0x4(%rbp),%edx
 10d:	48 89 d0             	mov    %rdx,%rax
 110:	48 c1 e0 04          	shl    $0x4,%rax
 114:	48 01 d0             	add    %rdx,%rax
 117:	48 c1 e0 02          	shl    $0x2,%rax
 11b:	48 01 c8             	add    %rcx,%rax
 11e:	48 05 6e 05 00 00    	add    $0x56e,%rax
 124:	c6 00 01             	movb   $0x1,(%rax)
 127:	8b 45 fc             	mov    -0x4(%rbp),%eax
 12a:	89 c7                	mov    %eax,%edi
 12c:	e8 00 00 00 00       	call   131 <E131Bridge::HandleSynchronization()+0x131>
 131:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
 135:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
 139:	0f 86 3d ff ff ff    	jbe    7c <E131Bridge::HandleSynchronization()+0x7c>
 13f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 143:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
 14a:	48 85 c0             	test   %rax,%rax
 14d:	74 25                	je     174 <E131Bridge::HandleSynchronization()+0x174>
 14f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 153:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
 15a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 15e:	48 8b 92 88 00 00 00 	mov    0x88(%rdx),%rdx
 165:	48 8b 12             	mov    (%rdx),%rdx
 168:	48 83 c2 10          	add    $0x10,%rdx
 16c:	48 8b 12             	mov    (%rdx),%rdx
 16f:	48 89 c7             	mov    %rax,%rdi
 172:	ff d2                	call   *%rdx
 174:	c9                   	leave  
 175:	c3                   	ret    

e131bridgeprint.o:     file format elf64-x86-64


Disassembly of section .text._ZN8lightsetL14get_merge_modeENS_9MergeModeEb:

0000000000000000 <lightset::get_merge_mode(lightset::MergeMode, bool)>:
   0:	40 84 f6             	test   %sil,%sil
   3:	74 12                	je     17 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x17>
   5:	85 ff                	test   %edi,%edi
   7:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # e <lightset::get_merge_mode(lightset::MergeMode, bool)+0xe>
   e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 15 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x15>
  15:	eb 10                	jmp    27 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x27>
  17:	85 ff                	test   %edi,%edi
  19:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 20 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x20>
  20:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 27 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x27>
  27:	48 0f 45 c2          	cmovne %rdx,%rax
  2b:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge5PrintEv:

0000000000000000 <E131Bridge::Print()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	55                   	push   %rbp
   9:	53                   	push   %rbx
   a:	48 89 fb             	mov    %rdi,%rbx
   d:	48 83 c7 34          	add    $0x34,%rdi
  11:	48 83 ec 38          	sub    $0x38,%rsp
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
  23:	31 c0                	xor    %eax,%eax
  25:	48 8d 6c 24 03       	lea    0x3(%rsp),%rbp
  2a:	c6 44 24 27 00       	movb   $0x0,0x27(%rsp)
  2f:	48 89 ee             	mov    %rbp,%rsi
  32:	e8 00 00 00 00       	call   37 <E131Bridge::Print()+0x37>
  37:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 3e <E131Bridge::Print()+0x3e>
  3e:	e8 00 00 00 00       	call   43 <E131Bridge::Print()+0x43>
  43:	0f b6 15 00 00 00 00 	movzbl 0x0(%rip),%edx        # 4a <E131Bridge::Print()+0x4a>
  4a:	0f b6 35 00 00 00 00 	movzbl 0x0(%rip),%esi        # 51 <E131Bridge::Print()+0x51>
  51:	31 c0                	xor    %eax,%eax
  53:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 5a <E131Bridge::Print()+0x5a>
  5a:	e8 00 00 00 00       	call   5f <E131Bridge::Print()+0x5f>
  5f:	31 c0                	xor    %eax,%eax
  61:	48 89 ee             	mov    %rbp,%rsi
  64:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 6b <E131Bridge::Print()+0x6b>
  6b:	e8 00 00 00 00       	call   70 <E131Bridge::Print()+0x70>
  70:	80 bb 23 05 00 00 00 	cmpb   $0x0,0x523(%rbx)
  77:	74 5c                	je     d5 <E131Bridge::Print()+0xd5>
  79:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 80 <E131Bridge::Print()+0x80>
  80:	31 ed                	xor    %ebp,%ebp
  82:	4c 8d 2d 00 00 00 00 	lea    0x0(%rip),%r13        # 89 <E131Bridge::Print()+0x89>
  89:	e8 00 00 00 00       	call   8e <E131Bridge::Print()+0x8e>
  8e:	48 89 e2             	mov    %rsp,%rdx
  91:	b9 01 00 00 00       	mov    $0x1,%ecx
  96:	89 ee                	mov    %ebp,%esi
  98:	48 89 df             	mov    %rbx,%rdi
  9b:	e8 00 00 00 00       	call   a0 <E131Bridge::Print()+0xa0>
  a0:	84 c0                	test   %al,%al
  a2:	74 28                	je     cc <E131Bridge::Print()+0xcc>
  a4:	48 6b c5 44          	imul   $0x44,%rbp,%rax
  a8:	be 01 00 00 00       	mov    $0x1,%esi
  ad:	8b bc 03 68 05 00 00 	mov    0x568(%rbx,%rax,1),%edi
  b4:	e8 00 00 00 00       	call   b9 <E131Bridge::Print()+0xb9>
  b9:	0f b7 14 24          	movzwl (%rsp),%edx
  bd:	89 ee                	mov    %ebp,%esi
  bf:	4c 89 ef             	mov    %r13,%rdi
  c2:	48 89 c1             	mov    %rax,%rcx
  c5:	31 c0                	xor    %eax,%eax
  c7:	e8 00 00 00 00       	call   cc <E131Bridge::Print()+0xcc>
  cc:	48 ff c5             	inc    %rbp
  cf:	48 83 fd 04          	cmp    $0x4,%rbp
  d3:	75 b9                	jne    8e <E131Bridge::Print()+0x8e>
  d5:	80 bb 12 05 00 00 00 	cmpb   $0x0,0x512(%rbx)
  dc:	74 0c                	je     ea <E131Bridge::Print()+0xea>
  de:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # e5 <E131Bridge::Print()+0xe5>
  e5:	e8 00 00 00 00       	call   ea <E131Bridge::Print()+0xea>
  ea:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
  ef:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  f6:	00 00 
  f8:	74 05                	je     ff <E131Bridge::Print()+0xff>
  fa:	e8 00 00 00 00       	call   ff <E131Bridge::Print()+0xff>
  ff:	48 83 c4 38          	add    $0x38,%rsp
 103:	5b                   	pop    %rbx
 104:	5d                   	pop    %rbp
 105:	41 5c                	pop    %r12
 107:	41 5d                	pop    %r13
 109:	c3                   	ret    

e131msgconst.o:     file format elf64-x86-64


e131paramsconst.o:     file format elf64-x86-64


e131params.o:     file format elf64-x86-64


Disassembly of section .text._ZN8lightsetL14get_merge_modeEPKc:

0000000000000000 <lightset::get_merge_mode(char const*)>:
   0:	31 c0                	xor    %eax,%eax
   2:	48 85 ff             	test   %rdi,%rdi
   5:	74 23                	je     2a <lightset::get_merge_mode(char const*)+0x2a>
   7:	8a 17                	mov    (%rdi),%dl
   9:	83 ca 20             	or     $0x20,%edx
   c:	80 fa 6c             	cmp    $0x6c,%dl
   f:	75 19                	jne    2a <lightset::get_merge_mode(char const*)+0x2a>
  11:	8a 57 01             	mov    0x1(%rdi),%dl
  14:	83 ca 20             	or     $0x20,%edx
  17:	80 fa 74             	cmp    $0x74,%dl
  1a:	75 0e                	jne    2a <lightset::get_merge_mode(char const*)+0x2a>
  1c:	8a 47 02             	mov    0x2(%rdi),%al
  1f:	83 c8 20             	or     $0x20,%eax
  22:	3c 70                	cmp    $0x70,%al
  24:	0f 94 c0             	sete   %al
  27:	0f b6 c0             	movzbl %al,%eax
  2a:	c3                   	ret    

Disassembly of section .text._ZN8lightsetL14get_merge_modeENS_9MergeModeEb:

0000000000000000 <lightset::get_merge_mode(lightset::MergeMode, bool)>:
   0:	40 84 f6             	test   %sil,%sil
   3:	74 12                	je     17 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x17>
   5:	85 ff                	test   %edi,%edi
   7:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # e <lightset::get_merge_mode(lightset::MergeMode, bool)+0xe>
   e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 15 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x15>
  15:	eb 10                	jmp    27 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x27>
  17:	85 ff                	test   %edi,%edi
  19:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 20 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x20>
  20:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 27 <lightset::get_merge_mode(lightset::MergeMode, bool)+0x27>
  27:	48 0f 45 c2          	cmovne %rdx,%rax
  2b:	c3                   	ret    

Disassembly of section .text._ZN8lightsetL14get_merge_modeEjb:

0000000000000000 <lightset::get_merge_mode(unsigned int, bool)>:
   0:	40 0f b6 f6          	movzbl %sil,%esi
   4:	e9 00 00 00 00       	jmp    9 <.LC14>

Disassembly of section .text._ZN8lightsetL12get_failsafeEPKc:

0000000000000000 <lightset::get_failsafe(char const*)>:
   0:	55                   	push   %rbp
   1:	ba 04 00 00 00       	mov    $0x4,%edx
   6:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # d <lightset::get_failsafe(char const*)+0xd>
   d:	48 89 fd             	mov    %rdi,%rbp
  10:	e8 00 00 00 00       	call   15 <lightset::get_failsafe(char const*)+0x15>
  15:	85 c0                	test   %eax,%eax
  17:	74 5e                	je     77 <lightset::get_failsafe(char const*)+0x77>
  19:	ba 03 00 00 00       	mov    $0x3,%edx
  1e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 25 <lightset::get_failsafe(char const*)+0x25>
  25:	48 89 ef             	mov    %rbp,%rdi
  28:	e8 00 00 00 00       	call   2d <lightset::get_failsafe(char const*)+0x2d>
  2d:	41 89 c0             	mov    %eax,%r8d
  30:	b8 01 00 00 00       	mov    $0x1,%eax
  35:	45 85 c0             	test   %r8d,%r8d
  38:	74 3d                	je     77 <lightset::get_failsafe(char const*)+0x77>
  3a:	ba 02 00 00 00       	mov    $0x2,%edx
  3f:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 46 <lightset::get_failsafe(char const*)+0x46>
  46:	48 89 ef             	mov    %rbp,%rdi
  49:	e8 00 00 00 00       	call   4e <lightset::get_failsafe(char const*)+0x4e>
  4e:	41 89 c0             	mov    %eax,%r8d
  51:	b8 02 00 00 00       	mov    $0x2,%eax
  56:	45 85 c0             	test   %r8d,%r8d
  59:	74 1c                	je     77 <lightset::get_failsafe(char const*)+0x77>
  5b:	ba 08 00 00 00       	mov    $0x8,%edx
  60:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 67 <lightset::get_failsafe(char const*)+0x67>
  67:	48 89 ef             	mov    %rbp,%rdi
  6a:	e8 00 00 00 00       	call   6f <lightset::get_failsafe(char const*)+0x6f>
  6f:	83 f8 01             	cmp    $0x1,%eax
  72:	19 c0                	sbb    %eax,%eax
  74:	83 e0 03             	and    $0x3,%eax
  77:	5d                   	pop    %rbp
  78:	c3                   	ret    

Disassembly of section .text._ZN8lightsetL12get_failsafeENS_8FailSafeE:

0000000000000000 <lightset::get_failsafe(lightset::FailSafe)>:
   0:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 7 <lightset::get_failsafe(lightset::FailSafe)+0x7>
   7:	83 ff 02             	cmp    $0x2,%edi
   a:	74 1d                	je     29 <lightset::get_failsafe(lightset::FailSafe)+0x29>
   c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 13 <lightset::get_failsafe(lightset::FailSafe)+0x13>
  13:	7f 14                	jg     29 <lightset::get_failsafe(lightset::FailSafe)+0x29>
  15:	85 ff                	test   %edi,%edi
  17:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1e <lightset::get_failsafe(lightset::FailSafe)+0x1e>
  1e:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 25 <lightset::get_failsafe(lightset::FailSafe)+0x25>
  25:	48 0f 44 c2          	cmove  %rdx,%rax
  29:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge11SetFailSafeEN8lightset8FailSafeE:

0000000000000000 <E131Bridge::SetFailSafe(lightset::FailSafe)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	89 b7 28 05 00 00    	mov    %esi,0x528(%rdi)
   a:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge12SetMergeModeEjN8lightset9MergeModeE:

0000000000000000 <E131Bridge::SetMergeMode(unsigned int, lightset::MergeMode)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	89 f6                	mov    %esi,%esi
   6:	48 6b f6 44          	imul   $0x44,%rsi,%rsi
   a:	89 94 3e 68 05 00 00 	mov    %edx,0x568(%rsi,%rdi,1)
  11:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge22SetDisableMergeTimeoutEb:

0000000000000000 <E131Bridge::SetDisableMergeTimeout(bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	40 88 b7 11 05 00 00 	mov    %sil,0x511(%rdi)
   b:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge11SetPriorityEhj:

0000000000000000 <E131Bridge::SetPriority(unsigned char, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	8d 46 ff             	lea    -0x1(%rsi),%eax
   7:	3c c7                	cmp    $0xc7,%al
   9:	77 0e                	ja     19 <E131Bridge::SetPriority(unsigned char, unsigned int)+0x19>
   b:	89 d2                	mov    %edx,%edx
   d:	48 6b d2 0c          	imul   $0xc,%rdx,%rdx
  11:	40 88 b4 17 45 06 00 	mov    %sil,0x645(%rdi,%rdx,1)
  18:	00 
  19:	c3                   	ret    

Disassembly of section .text._ZN10E131Bridge3GetEv:

0000000000000000 <E131Bridge::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # b <E131Bridge::Get()+0xb>
   b:	c3                   	ret    

Disassembly of section .text._ZNK10E131Params9isMaskSetEj:

0000000000000000 <E131Params::isMaskSet(unsigned int) const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	8b 47 08             	mov    0x8(%rdi),%eax
   7:	21 f0                	and    %esi,%eax
   9:	39 f0                	cmp    %esi,%eax
   b:	0f 94 c0             	sete   %al
   e:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddEPKcb:

0000000000000000 <PropertiesBuilder::Add(char const*, bool)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	0f b6 d2             	movzbl %dl,%edx
   7:	41 b8 01 00 00 00    	mov    $0x1,%r8d
   d:	89 d1                	mov    %edx,%ecx
   f:	e9 00 00 00 00       	jmp    14 <.LC10+0x2>

Disassembly of section .text._ZN17PropertiesBuilder7GetSizeEv:

0000000000000000 <PropertiesBuilder::GetSize()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	80 7f 0c 00          	cmpb   $0x0,0xc(%rdi)
   8:	74 1b                	je     25 <PropertiesBuilder::GetSize()+0x25>
   a:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
   e:	48 8b 17             	mov    (%rdi),%rdx
  11:	c6 44 02 ff 7d       	movb   $0x7d,-0x1(%rdx,%rax,1)
  16:	0f b7 47 0a          	movzwl 0xa(%rdi),%eax
  1a:	48 8b 17             	mov    (%rdi),%rdx
  1d:	c6 04 02 7d          	movb   $0x7d,(%rdx,%rax,1)
  21:	66 ff 47 0a          	incw   0xa(%rdi)
  25:	66 8b 47 0a          	mov    0xa(%rdi),%ax
  29:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIPcEEiS1_jPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fa             	mov    %rdi,%r10
   7:	48 89 f7             	mov    %rsi,%rdi
   a:	89 d6                	mov    %edx,%esi
   c:	41 8a 42 0c          	mov    0xc(%r10),%al
  10:	45 84 c9             	test   %r9b,%r9b
  13:	75 06                	jne    1b <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x1b>
  15:	84 c0                	test   %al,%al
  17:	75 0d                	jne    26 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x26>
  19:	eb 14                	jmp    2f <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x2f>
  1b:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 22 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x22>
  22:	84 c0                	test   %al,%al
  24:	74 10                	je     36 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x36>
  26:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 2d <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x2d>
  2d:	eb 07                	jmp    36 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x36>
  2f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 36 <int PropertiesBuilder::add_part<char*>(char*, unsigned int, char const*, char*, bool, unsigned int)+0x36>
  36:	31 c0                	xor    %eax,%eax
  38:	e9 00 00 00 00       	jmp    3d <.LC10+0x2b>

Disassembly of section .text._ZN17PropertiesBuilder8add_partIPKcEEiPcjS2_T_bj:

0000000000000000 <int PropertiesBuilder::add_part<char const*>(char*, unsigned int, char const*, char const*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	45 0f b6 c9          	movzbl %r9b,%r9d
   8:	e9 00 00 00 00       	jmp    d <.LC3+0x1>

Disassembly of section .text._ZN10E131ParamsC2EP15E131ParamsStore:

0000000000000000 <E131Params::E131Params(E131ParamsStore*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 89 37             	mov    %rsi,(%rdi)
   7:	48 8d 77 08          	lea    0x8(%rdi),%rsi
   b:	48 89 fa             	mov    %rdi,%rdx
   e:	31 c0                	xor    %eax,%eax
  10:	b9 19 00 00 00       	mov    $0x19,%ecx
  15:	48 89 f7             	mov    %rsi,%rdi
  18:	f3 aa                	rep stos %al,%es:(%rdi)
  1a:	c7 42 23 64 64 64 64 	movl   $0x64646464,0x23(%rdx)
  21:	48 b8 01 00 02 00 03 	movabs $0x4000300020001,%rax
  28:	00 04 00 
  2b:	48 89 42 0f          	mov    %rax,0xf(%rdx)
  2f:	66 c7 42 21 55 00    	movw   $0x55,0x21(%rdx)
  35:	c3                   	ret    

Disassembly of section .text._ZN10E131Params4LoadEv:

0000000000000000 <E131Params::Load()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 54                	push   %r12
   6:	48 89 fa             	mov    %rdi,%rdx
   9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 10 <E131Params::Load()+0x10>
  10:	55                   	push   %rbp
  11:	53                   	push   %rbx
  12:	48 89 fb             	mov    %rdi,%rbx
  15:	48 83 ec 20          	sub    $0x20,%rsp
  19:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  20:	00 00 
  22:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  27:	31 c0                	xor    %eax,%eax
  29:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  30:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  35:	48 89 ef             	mov    %rbp,%rdi
  38:	e8 00 00 00 00       	call   3d <E131Params::Load()+0x3d>
  3d:	48 89 ef             	mov    %rbp,%rdi
  40:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 47 <E131Params::Load()+0x47>
  47:	e8 00 00 00 00       	call   4c <E131Params::Load()+0x4c>
  4c:	48 8b 3b             	mov    (%rbx),%rdi
  4f:	84 c0                	test   %al,%al
  51:	41 89 c4             	mov    %eax,%r12d
  54:	74 11                	je     67 <E131Params::Load()+0x67>
  56:	48 85 ff             	test   %rdi,%rdi
  59:	74 1e                	je     79 <E131Params::Load()+0x79>
  5b:	48 8b 07             	mov    (%rdi),%rax
  5e:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  62:	ff 50 10             	call   *0x10(%rax)
  65:	eb 12                	jmp    79 <E131Params::Load()+0x79>
  67:	48 85 ff             	test   %rdi,%rdi
  6a:	74 0d                	je     79 <E131Params::Load()+0x79>
  6c:	48 8b 07             	mov    (%rdi),%rax
  6f:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  73:	41 b4 01             	mov    $0x1,%r12b
  76:	ff 50 18             	call   *0x18(%rax)
  79:	48 89 ef             	mov    %rbp,%rdi
  7c:	e8 00 00 00 00       	call   81 <E131Params::Load()+0x81>
  81:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  86:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  8d:	00 00 
  8f:	74 05                	je     96 <E131Params::Load()+0x96>
  91:	e8 00 00 00 00       	call   96 <E131Params::Load()+0x96>
  96:	48 83 c4 20          	add    $0x20,%rsp
  9a:	44 89 e0             	mov    %r12d,%eax
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	41 5c                	pop    %r12
  a1:	c3                   	ret    

Disassembly of section .text._ZN10E131Params4LoadEPKcj:

0000000000000000 <E131Params::Load(char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	55                   	push   %rbp
   9:	53                   	push   %rbx
   a:	48 83 ec 28          	sub    $0x28,%rsp
   e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  15:	00 00 
  17:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  1c:	31 c0                	xor    %eax,%eax
  1e:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  22:	74 4a                	je     6e <E131Params::Load(char const*, unsigned int)+0x6e>
  24:	c7 47 08 00 00 00 00 	movl   $0x0,0x8(%rdi)
  2b:	48 89 fb             	mov    %rdi,%rbx
  2e:	49 89 f4             	mov    %rsi,%r12
  31:	41 89 d5             	mov    %edx,%r13d
  34:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
  39:	48 89 fa             	mov    %rdi,%rdx
  3c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 43 <E131Params::Load(char const*, unsigned int)+0x43>
  43:	48 89 ef             	mov    %rbp,%rdi
  46:	e8 00 00 00 00       	call   4b <E131Params::Load(char const*, unsigned int)+0x4b>
  4b:	44 89 ea             	mov    %r13d,%edx
  4e:	4c 89 e6             	mov    %r12,%rsi
  51:	48 89 ef             	mov    %rbp,%rdi
  54:	e8 00 00 00 00       	call   59 <E131Params::Load(char const*, unsigned int)+0x59>
  59:	48 8b 3b             	mov    (%rbx),%rdi
  5c:	48 8d 73 08          	lea    0x8(%rbx),%rsi
  60:	48 8b 07             	mov    (%rdi),%rax
  63:	ff 50 10             	call   *0x10(%rax)
  66:	48 89 ef             	mov    %rbp,%rdi
  69:	e8 00 00 00 00       	call   6e <E131Params::Load(char const*, unsigned int)+0x6e>
  6e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  73:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  7a:	00 00 
  7c:	74 05                	je     83 <E131Params::Load(char const*, unsigned int)+0x83>
  7e:	e8 00 00 00 00       	call   83 <E131Params::Load(char const*, unsigned int)+0x83>
  83:	48 83 c4 28          	add    $0x28,%rsp
  87:	5b                   	pop    %rbx
  88:	5d                   	pop    %rbp
  89:	41 5c                	pop    %r12
  8b:	41 5d                	pop    %r13
  8d:	c3                   	ret    

Disassembly of section .text._ZN10E131Params16callbackFunctionEPKc:

0000000000000000 <E131Params::callbackFunction(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 57                	push   %r15
   6:	41 56                	push   %r14
   8:	41 55                	push   %r13
   a:	49 89 f5             	mov    %rsi,%r13
   d:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 14 <E131Params::callbackFunction(char const*)+0x14>
  14:	41 54                	push   %r12
  16:	45 31 e4             	xor    %r12d,%r12d
  19:	55                   	push   %rbp
  1a:	53                   	push   %rbx
  1b:	48 89 fb             	mov    %rdi,%rbx
  1e:	4c 89 ef             	mov    %r13,%rdi
  21:	48 83 ec 28          	sub    $0x28,%rsp
  25:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2c:	00 00 
  2e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  33:	31 c0                	xor    %eax,%eax
  35:	4c 8d 74 24 04       	lea    0x4(%rsp),%r14
  3a:	4c 8d 7c 24 08       	lea    0x8(%rsp),%r15
  3f:	c7 44 24 04 08 00 00 	movl   $0x8,0x4(%rsp)
  46:	00 
  47:	4c 89 f1             	mov    %r14,%rcx
  4a:	4c 89 fa             	mov    %r15,%rdx
  4d:	e8 00 00 00 00       	call   52 <E131Params::callbackFunction(char const*)+0x52>
  52:	85 c0                	test   %eax,%eax
  54:	75 5b                	jne    b1 <E131Params::callbackFunction(char const*)+0xb1>
  56:	4c 89 ff             	mov    %r15,%rdi
  59:	e8 00 00 00 00       	call   5e <E131Params::callbackFunction(char const*)+0x5e>
  5e:	8b 53 08             	mov    0x8(%rbx),%edx
  61:	85 c0                	test   %eax,%eax
  63:	75 05                	jne    6a <E131Params::callbackFunction(char const*)+0x6a>
  65:	83 e2 fe             	and    $0xfffffffe,%edx
  68:	eb 03                	jmp    6d <E131Params::callbackFunction(char const*)+0x6d>
  6a:	83 ca 01             	or     $0x1,%edx
  6d:	0f b6 c0             	movzbl %al,%eax
  70:	89 53 08             	mov    %edx,0x8(%rbx)
  73:	66 89 43 0d          	mov    %ax,0xd(%rbx)
  77:	e9 ec 00 00 00       	jmp    168 <E131Params::callbackFunction(char const*)+0x168>
  7c:	49 6b f4 12          	imul   $0x12,%r12,%rsi
  80:	4c 89 f1             	mov    %r14,%rcx
  83:	4c 89 fa             	mov    %r15,%rdx
  86:	4c 89 ef             	mov    %r13,%rdi
  89:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 90 <E131Params::callbackFunction(char const*)+0x90>
  90:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%rsp)
  97:	00 
  98:	48 01 c6             	add    %rax,%rsi
  9b:	e8 00 00 00 00       	call   a0 <E131Params::callbackFunction(char const*)+0xa0>
  a0:	85 c0                	test   %eax,%eax
  a2:	74 68                	je     10c <E131Params::callbackFunction(char const*)+0x10c>
  a4:	49 ff c4             	inc    %r12
  a7:	49 83 fc 04          	cmp    $0x4,%r12
  ab:	0f 84 8a 00 00 00    	je     13b <E131Params::callbackFunction(char const*)+0x13b>
  b1:	4c 89 e6             	mov    %r12,%rsi
  b4:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # bb <E131Params::callbackFunction(char const*)+0xbb>
  bb:	4c 89 ef             	mov    %r13,%rdi
  be:	44 89 e5             	mov    %r12d,%ebp
  c1:	48 c1 e6 04          	shl    $0x4,%rsi
  c5:	48 8d 54 24 02       	lea    0x2(%rsp),%rdx
  ca:	48 01 c6             	add    %rax,%rsi
  cd:	e8 00 00 00 00       	call   d2 <E131Params::callbackFunction(char const*)+0xd2>
  d2:	85 c0                	test   %eax,%eax
  d4:	75 a6                	jne    7c <E131Params::callbackFunction(char const*)+0x7c>
  d6:	66 8b 74 24 02       	mov    0x2(%rsp),%si
  db:	89 e9                	mov    %ebp,%ecx
  dd:	b8 10 00 00 00       	mov    $0x10,%eax
  e2:	8b 53 08             	mov    0x8(%rbx),%edx
  e5:	d3 e0                	shl    %cl,%eax
  e7:	8d 4e ff             	lea    -0x1(%rsi),%ecx
  ea:	66 81 f9 fe f9       	cmp    $0xf9fe,%cx
  ef:	76 0f                	jbe    100 <E131Params::callbackFunction(char const*)+0x100>
  f1:	41 ff c4             	inc    %r12d
  f4:	f7 d0                	not    %eax
  f6:	66 44 89 64 6b 0f    	mov    %r12w,0xf(%rbx,%rbp,2)
  fc:	21 d0                	and    %edx,%eax
  fe:	eb 65                	jmp    165 <E131Params::callbackFunction(char const*)+0x165>
 100:	09 c2                	or     %eax,%edx
 102:	66 89 74 6b 0f       	mov    %si,0xf(%rbx,%rbp,2)
 107:	89 53 08             	mov    %edx,0x8(%rbx)
 10a:	eb 5c                	jmp    168 <E131Params::callbackFunction(char const*)+0x168>
 10c:	4c 89 ff             	mov    %r15,%rdi
 10f:	89 e9                	mov    %ebp,%ecx
 111:	e8 00 00 00 00       	call   116 <E131Params::callbackFunction(char const*)+0x116>
 116:	41 89 c0             	mov    %eax,%r8d
 119:	b8 00 01 00 00       	mov    $0x100,%eax
 11e:	d3 e0                	shl    %cl,%eax
 120:	41 ff c8             	dec    %r8d
 123:	75 0a                	jne    12f <E131Params::callbackFunction(char const*)+0x12f>
 125:	c6 44 2b 18 01       	movb   $0x1,0x18(%rbx,%rbp,1)
 12a:	09 43 08             	or     %eax,0x8(%rbx)
 12d:	eb 39                	jmp    168 <E131Params::callbackFunction(char const*)+0x168>
 12f:	c6 44 2b 18 00       	movb   $0x0,0x18(%rbx,%rbp,1)
 134:	f7 d0                	not    %eax
 136:	21 43 08             	and    %eax,0x8(%rbx)
 139:	eb 2d                	jmp    168 <E131Params::callbackFunction(char const*)+0x168>
 13b:	48 8d 54 24 01       	lea    0x1(%rsp),%rdx
 140:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 147 <E131Params::callbackFunction(char const*)+0x147>
 147:	4c 89 ef             	mov    %r13,%rdi
 14a:	e8 00 00 00 00       	call   14f <E131Params::callbackFunction(char const*)+0x14f>
 14f:	85 c0                	test   %eax,%eax
 151:	75 15                	jne    168 <E131Params::callbackFunction(char const*)+0x168>
 153:	80 7c 24 01 00       	cmpb   $0x0,0x1(%rsp)
 158:	8b 43 08             	mov    0x8(%rbx),%eax
 15b:	74 05                	je     162 <E131Params::callbackFunction(char const*)+0x162>
 15d:	80 cc 20             	or     $0x20,%ah
 160:	eb 03                	jmp    165 <E131Params::callbackFunction(char const*)+0x165>
 162:	80 e4 df             	and    $0xdf,%ah
 165:	89 43 08             	mov    %eax,0x8(%rbx)
 168:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
 16d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 174:	00 00 
 176:	74 05                	je     17d <E131Params::callbackFunction(char const*)+0x17d>
 178:	e8 00 00 00 00       	call   17d <E131Params::callbackFunction(char const*)+0x17d>
 17d:	48 83 c4 28          	add    $0x28,%rsp
 181:	5b                   	pop    %rbx
 182:	5d                   	pop    %rbp
 183:	41 5c                	pop    %r12
 185:	41 5d                	pop    %r13
 187:	41 5e                	pop    %r14
 189:	41 5f                	pop    %r15
 18b:	c3                   	ret    

Disassembly of section .text._ZN10E131Params22staticCallbackFunctionEPvPKc:

0000000000000000 <E131Params::staticCallbackFunction(void*, char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	e9 00 00 00 00       	jmp    9 <.LC14>

Disassembly of section .text._ZN10E131Params7BuilderEPKN10e131params6ParamsEPcjRj:

0000000000000000 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 57                	push   %r15
   6:	41 89 cf             	mov    %ecx,%r15d
   9:	41 56                	push   %r14
   b:	49 89 d6             	mov    %rdx,%r14
   e:	41 55                	push   %r13
  10:	4d 89 c5             	mov    %r8,%r13
  13:	4c 8d 47 08          	lea    0x8(%rdi),%r8
  17:	41 54                	push   %r12
  19:	55                   	push   %rbp
  1a:	48 89 fd             	mov    %rdi,%rbp
  1d:	53                   	push   %rbx
  1e:	48 83 ec 28          	sub    $0x28,%rsp
  22:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  29:	00 00 
  2b:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
  30:	31 c0                	xor    %eax,%eax
  32:	48 85 f6             	test   %rsi,%rsi
  35:	74 0c                	je     43 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x43>
  37:	b9 1f 00 00 00       	mov    $0x1f,%ecx
  3c:	4c 89 c7             	mov    %r8,%rdi
  3f:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  41:	eb 0c                	jmp    4f <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x4f>
  43:	48 8b 3f             	mov    (%rdi),%rdi
  46:	4c 89 c6             	mov    %r8,%rsi
  49:	48 8b 07             	mov    (%rdi),%rax
  4c:	ff 50 18             	call   *0x18(%rax)
  4f:	4c 8d 64 24 08       	lea    0x8(%rsp),%r12
  54:	4c 89 f2             	mov    %r14,%rdx
  57:	44 89 f9             	mov    %r15d,%ecx
  5a:	31 db                	xor    %ebx,%ebx
  5c:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 63 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x63>
  63:	4c 89 e7             	mov    %r12,%rdi
  66:	4c 8d 35 00 00 00 00 	lea    0x0(%rip),%r14        # 6d <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x6d>
  6d:	e8 00 00 00 00       	call   72 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x72>
  72:	39 1d 00 00 00 00    	cmp    %ebx,0x0(%rip)        # 78 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x78>
  78:	76 36                	jbe    b0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xb0>
  7a:	89 d9                	mov    %ebx,%ecx
  7c:	be 10 00 00 00       	mov    $0x10,%esi
  81:	48 89 ef             	mov    %rbp,%rdi
  84:	d3 e6                	shl    %cl,%esi
  86:	e8 00 00 00 00       	call   8b <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x8b>
  8b:	48 89 de             	mov    %rbx,%rsi
  8e:	0f b7 54 5d 0f       	movzwl 0xf(%rbp,%rbx,2),%edx
  93:	4c 89 e7             	mov    %r12,%rdi
  96:	48 c1 e6 04          	shl    $0x4,%rsi
  9a:	0f b6 c8             	movzbl %al,%ecx
  9d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  a3:	48 ff c3             	inc    %rbx
  a6:	4c 01 f6             	add    %r14,%rsi
  a9:	e8 00 00 00 00       	call   ae <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xae>
  ae:	eb c2                	jmp    72 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x72>
  b0:	be 01 00 00 00       	mov    $0x1,%esi
  b5:	48 89 ef             	mov    %rbp,%rdi
  b8:	31 db                	xor    %ebx,%ebx
  ba:	e8 00 00 00 00       	call   bf <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xbf>
  bf:	0f b7 7d 0d          	movzwl 0xd(%rbp),%edi
  c3:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  c9:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # d0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xd0>
  d0:	0f b6 c8             	movzbl %al,%ecx
  d3:	4c 8d 35 00 00 00 00 	lea    0x0(%rip),%r14        # da <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xda>
  da:	e8 00 00 00 00       	call   df <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xdf>
  df:	4c 89 e7             	mov    %r12,%rdi
  e2:	48 89 c2             	mov    %rax,%rdx
  e5:	e8 00 00 00 00       	call   ea <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xea>
  ea:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # f1 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xf1>
  f1:	4c 89 e7             	mov    %r12,%rdi
  f4:	e8 00 00 00 00       	call   f9 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xf9>
  f9:	3b 1d 00 00 00 00    	cmp    0x0(%rip),%ebx        # ff <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xff>
  ff:	73 3d                	jae    13e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x13e>
 101:	89 d9                	mov    %ebx,%ecx
 103:	be 00 01 00 00       	mov    $0x100,%esi
 108:	48 89 ef             	mov    %rbp,%rdi
 10b:	d3 e6                	shl    %cl,%esi
 10d:	e8 00 00 00 00       	call   112 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x112>
 112:	0f b6 7c 1d 18       	movzbl 0x18(%rbp,%rbx,1),%edi
 117:	31 f6                	xor    %esi,%esi
 119:	41 b8 01 00 00 00    	mov    $0x1,%r8d
 11f:	0f b6 c8             	movzbl %al,%ecx
 122:	e8 00 00 00 00       	call   127 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x127>
 127:	48 6b f3 12          	imul   $0x12,%rbx,%rsi
 12b:	4c 89 e7             	mov    %r12,%rdi
 12e:	48 ff c3             	inc    %rbx
 131:	48 89 c2             	mov    %rax,%rdx
 134:	4c 01 f6             	add    %r14,%rsi
 137:	e8 00 00 00 00       	call   13c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x13c>
 13c:	eb bb                	jmp    f9 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xf9>
 13e:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 145 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x145>
 145:	4c 89 e7             	mov    %r12,%rdi
 148:	e8 00 00 00 00       	call   14d <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x14d>
 14d:	be 00 20 00 00       	mov    $0x2000,%esi
 152:	48 89 ef             	mov    %rbp,%rdi
 155:	e8 00 00 00 00       	call   15a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x15a>
 15a:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 161 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x161>
 161:	4c 89 e7             	mov    %r12,%rdi
 164:	0f b6 d0             	movzbl %al,%edx
 167:	e8 00 00 00 00       	call   16c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x16c>
 16c:	4c 89 e7             	mov    %r12,%rdi
 16f:	e8 00 00 00 00       	call   174 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x174>
 174:	0f b7 c0             	movzwl %ax,%eax
 177:	41 89 45 00          	mov    %eax,0x0(%r13)
 17b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
 180:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 187:	00 00 
 189:	74 05                	je     190 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x190>
 18b:	e8 00 00 00 00       	call   190 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x190>
 190:	48 83 c4 28          	add    $0x28,%rsp
 194:	5b                   	pop    %rbx
 195:	5d                   	pop    %rbp
 196:	41 5c                	pop    %r12
 198:	41 5d                	pop    %r13
 19a:	41 5e                	pop    %r14
 19c:	41 5f                	pop    %r15
 19e:	c3                   	ret    

Disassembly of section .text._ZN10E131Params4SaveEPcjRj:

0000000000000000 <E131Params::Save(char*, unsigned int, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	48 83 3f 00          	cmpq   $0x0,(%rdi)
   8:	49 89 c8             	mov    %rcx,%r8
   b:	75 07                	jne    14 <E131Params::Save(char*, unsigned int, unsigned int&)+0x14>
   d:	c7 01 00 00 00 00    	movl   $0x0,(%rcx)
  13:	c3                   	ret    
  14:	89 d1                	mov    %edx,%ecx
  16:	48 89 f2             	mov    %rsi,%rdx
  19:	31 f6                	xor    %esi,%esi
  1b:	e9 00 00 00 00       	jmp    20 <.LC10+0xe>

Disassembly of section .text._ZN10E131Params3SetEj:

0000000000000000 <E131Params::Set(unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	41 57                	push   %r15
   6:	41 56                	push   %r14
   8:	41 55                	push   %r13
   a:	41 89 f5             	mov    %esi,%r13d
   d:	41 54                	push   %r12
   f:	55                   	push   %rbp
  10:	48 89 fd             	mov    %rdi,%rbp
  13:	53                   	push   %rbx
  14:	48 83 ec 18          	sub    $0x18,%rsp
  18:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1f:	00 00 
  21:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  26:	31 c0                	xor    %eax,%eax
  28:	83 fe 04             	cmp    $0x4,%esi
  2b:	77 24                	ja     51 <E131Params::Set(unsigned int)+0x51>
  2d:	b8 04 00 00 00       	mov    $0x4,%eax
  32:	48 8d 3d 00 00 00 00 	lea    0x0(%rip),%rdi        # 39 <E131Params::Set(unsigned int)+0x39>
  39:	29 f0                	sub    %esi,%eax
  3b:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
  40:	89 44 24 04          	mov    %eax,0x4(%rsp)
  44:	e8 00 00 00 00       	call   49 <E131Params::Set(unsigned int)+0x49>
  49:	8b 00                	mov    (%rax),%eax
  4b:	89 05 00 00 00 00    	mov    %eax,0x0(%rip)        # 51 <E131Params::Set(unsigned int)+0x51>
  51:	83 7d 08 00          	cmpl   $0x0,0x8(%rbp)
  55:	0f 84 b9 00 00 00    	je     114 <E131Params::Set(unsigned int)+0x114>
  5b:	e8 00 00 00 00       	call   60 <E131Params::Set(unsigned int)+0x60>
  60:	31 db                	xor    %ebx,%ebx
  62:	49 89 c4             	mov    %rax,%r12
  65:	39 1d 00 00 00 00    	cmp    %ebx,0x0(%rip)        # 6b <E131Params::Set(unsigned int)+0x6b>
  6b:	41 89 de             	mov    %ebx,%r14d
  6e:	76 5c                	jbe    cc <E131Params::Set(unsigned int)+0xcc>
  70:	45 8d 7c 1d 00       	lea    0x0(%r13,%rbx,1),%r15d
  75:	41 83 ff 03          	cmp    $0x3,%r15d
  79:	77 51                	ja     cc <E131Params::Set(unsigned int)+0xcc>
  7b:	be 00 01 00 00       	mov    $0x100,%esi
  80:	44 89 f1             	mov    %r14d,%ecx
  83:	48 89 ef             	mov    %rbp,%rdi
  86:	d3 e6                	shl    %cl,%esi
  88:	e8 00 00 00 00       	call   8d <E131Params::Set(unsigned int)+0x8d>
  8d:	84 c0                	test   %al,%al
  8f:	74 10                	je     a1 <E131Params::Set(unsigned int)+0xa1>
  91:	0f b6 54 1d 18       	movzbl 0x18(%rbp,%rbx,1),%edx
  96:	44 89 fe             	mov    %r15d,%esi
  99:	4c 89 e7             	mov    %r12,%rdi
  9c:	e8 00 00 00 00       	call   a1 <E131Params::Set(unsigned int)+0xa1>
  a1:	be 00 00 01 00       	mov    $0x10000,%esi
  a6:	44 89 f1             	mov    %r14d,%ecx
  a9:	48 89 ef             	mov    %rbp,%rdi
  ac:	d3 e6                	shl    %cl,%esi
  ae:	e8 00 00 00 00       	call   b3 <E131Params::Set(unsigned int)+0xb3>
  b3:	84 c0                	test   %al,%al
  b5:	74 10                	je     c7 <E131Params::Set(unsigned int)+0xc7>
  b7:	0f b6 74 1d 23       	movzbl 0x23(%rbp,%rbx,1),%esi
  bc:	44 89 f2             	mov    %r14d,%edx
  bf:	4c 89 e7             	mov    %r12,%rdi
  c2:	e8 00 00 00 00       	call   c7 <E131Params::Set(unsigned int)+0xc7>
  c7:	48 ff c3             	inc    %rbx
  ca:	eb 99                	jmp    65 <E131Params::Set(unsigned int)+0x65>
  cc:	0f b7 75 0d          	movzwl 0xd(%rbp),%esi
  d0:	4c 89 e7             	mov    %r12,%rdi
  d3:	e8 00 00 00 00       	call   d8 <E131Params::Set(unsigned int)+0xd8>
  d8:	be 00 20 00 00       	mov    $0x2000,%esi
  dd:	48 89 ef             	mov    %rbp,%rdi
  e0:	e8 00 00 00 00       	call   e5 <E131Params::Set(unsigned int)+0xe5>
  e5:	84 c0                	test   %al,%al
  e7:	74 2b                	je     114 <E131Params::Set(unsigned int)+0x114>
  e9:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  ee:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
  f5:	00 00 
  f7:	75 2b                	jne    124 <E131Params::Set(unsigned int)+0x124>
  f9:	48 83 c4 18          	add    $0x18,%rsp
  fd:	4c 89 e7             	mov    %r12,%rdi
 100:	be 01 00 00 00       	mov    $0x1,%esi
 105:	5b                   	pop    %rbx
 106:	5d                   	pop    %rbp
 107:	41 5c                	pop    %r12
 109:	41 5d                	pop    %r13
 10b:	41 5e                	pop    %r14
 10d:	41 5f                	pop    %r15
 10f:	e9 00 00 00 00       	jmp    114 <E131Params::Set(unsigned int)+0x114>
 114:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
 119:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 120:	00 00 
 122:	74 05                	je     129 <E131Params::Set(unsigned int)+0x129>
 124:	e8 00 00 00 00       	call   129 <E131Params::Set(unsigned int)+0x129>
 129:	48 83 c4 18          	add    $0x18,%rsp
 12d:	5b                   	pop    %rbx
 12e:	5d                   	pop    %rbp
 12f:	41 5c                	pop    %r12
 131:	41 5d                	pop    %r13
 133:	41 5e                	pop    %r14
 135:	41 5f                	pop    %r15
 137:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIbEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 52                	push   %r10
   8:	49 89 f2             	mov    %rsi,%r10
   b:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 33                	jmp    4f <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x4f>
  1c:	89 d0                	mov    %edx,%eax
  1e:	48 89 fb             	mov    %rdi,%rbx
  21:	0f b7 d6             	movzwl %si,%edx
  24:	48 03 37             	add    (%rdi),%rsi
  27:	57                   	push   %rdi
  28:	29 d5                	sub    %edx,%ebp
  2a:	44 0f b6 c9          	movzbl %cl,%r9d
  2e:	48 89 df             	mov    %rbx,%rdi
  31:	41 50                	push   %r8
  33:	4c 89 d1             	mov    %r10,%rcx
  36:	44 0f b6 c0          	movzbl %al,%r8d
  3a:	89 ea                	mov    %ebp,%edx
  3c:	e8 00 00 00 00       	call   41 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x41>
  41:	41 58                	pop    %r8
  43:	41 59                	pop    %r9
  45:	39 c5                	cmp    %eax,%ebp
  47:	7c cf                	jl     18 <bool PropertiesBuilder::Add<bool>(char const*, bool, bool, unsigned int)+0x18>
  49:	66 01 43 0a          	add    %ax,0xa(%rbx)
  4d:	b0 01                	mov    $0x1,%al
  4f:	5a                   	pop    %rdx
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddItEEbPKcT_bj:

0000000000000000 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 52                	push   %r10
   8:	49 89 f2             	mov    %rsi,%r10
   b:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 33                	jmp    4f <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x4f>
  1c:	89 d0                	mov    %edx,%eax
  1e:	48 89 fb             	mov    %rdi,%rbx
  21:	0f b7 d6             	movzwl %si,%edx
  24:	48 03 37             	add    (%rdi),%rsi
  27:	57                   	push   %rdi
  28:	29 d5                	sub    %edx,%ebp
  2a:	44 0f b6 c9          	movzbl %cl,%r9d
  2e:	48 89 df             	mov    %rbx,%rdi
  31:	41 50                	push   %r8
  33:	4c 89 d1             	mov    %r10,%rcx
  36:	44 0f b7 c0          	movzwl %ax,%r8d
  3a:	89 ea                	mov    %ebp,%edx
  3c:	e8 00 00 00 00       	call   41 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x41>
  41:	41 58                	pop    %r8
  43:	41 59                	pop    %r9
  45:	39 c5                	cmp    %eax,%ebp
  47:	7c cf                	jl     18 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int)+0x18>
  49:	66 01 43 0a          	add    %ax,0xa(%rbx)
  4d:	b0 01                	mov    $0x1,%al
  4f:	5a                   	pop    %rdx
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder3AddIPKcEEbS2_T_bj:

0000000000000000 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	53                   	push   %rbx
   6:	41 52                	push   %r10
   8:	49 89 f2             	mov    %rsi,%r10
   b:	0f b7 6f 08          	movzwl 0x8(%rdi),%ebp
   f:	0f b7 77 0a          	movzwl 0xa(%rdi),%esi
  13:	66 39 ee             	cmp    %bp,%si
  16:	72 04                	jb     1c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x1c>
  18:	31 c0                	xor    %eax,%eax
  1a:	eb 33                	jmp    4f <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x4f>
  1c:	48 89 d0             	mov    %rdx,%rax
  1f:	48 89 fb             	mov    %rdi,%rbx
  22:	0f b7 d6             	movzwl %si,%edx
  25:	48 03 37             	add    (%rdi),%rsi
  28:	57                   	push   %rdi
  29:	29 d5                	sub    %edx,%ebp
  2b:	44 0f b6 c9          	movzbl %cl,%r9d
  2f:	48 89 df             	mov    %rbx,%rdi
  32:	41 50                	push   %r8
  34:	4c 89 d1             	mov    %r10,%rcx
  37:	49 89 c0             	mov    %rax,%r8
  3a:	89 ea                	mov    %ebp,%edx
  3c:	e8 00 00 00 00       	call   41 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x41>
  41:	41 58                	pop    %r8
  43:	41 59                	pop    %r9
  45:	39 c5                	cmp    %eax,%ebp
  47:	7c cf                	jl     18 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int)+0x18>
  49:	66 01 43 0a          	add    %ax,0xa(%rbx)
  4d:	b0 01                	mov    $0x1,%al
  4f:	5a                   	pop    %rdx
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	ret    

Disassembly of section .text._ZSt3minIjERKT_S2_S2_:

0000000000000000 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	8b 17                	mov    (%rdi),%edx
   6:	48 89 f8             	mov    %rdi,%rax
   9:	39 16                	cmp    %edx,(%rsi)
   b:	73 03                	jae    10 <unsigned int const& std::min<unsigned int>(unsigned int const&, unsigned int const&)+0x10>
   d:	48 89 f0             	mov    %rsi,%rax
  10:	c3                   	ret    

Disassembly of section .text._ZN17PropertiesBuilder8add_partIbEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fa             	mov    %rdi,%r10
   7:	45 0f b6 c0          	movzbl %r8b,%r8d
   b:	48 89 f7             	mov    %rsi,%rdi
   e:	89 d6                	mov    %edx,%esi
  10:	41 8a 42 0c          	mov    0xc(%r10),%al
  14:	45 84 c9             	test   %r9b,%r9b
  17:	75 06                	jne    1f <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x1f>
  19:	84 c0                	test   %al,%al
  1b:	75 0d                	jne    2a <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x2a>
  1d:	eb 14                	jmp    33 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x33>
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x26>
  26:	84 c0                	test   %al,%al
  28:	74 10                	je     3a <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x3a>
  2a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 31 <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x31>
  31:	eb 07                	jmp    3a <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x3a>
  33:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a <int PropertiesBuilder::add_part<bool>(char*, unsigned int, char const*, bool, bool, unsigned int)+0x3a>
  3a:	31 c0                	xor    %eax,%eax
  3c:	e9 00 00 00 00       	jmp    41 <.LC10+0x2f>

Disassembly of section .text._ZN17PropertiesBuilder8add_partItEEiPcjPKcT_bj:

0000000000000000 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	49 89 fa             	mov    %rdi,%r10
   7:	45 0f b7 c0          	movzwl %r8w,%r8d
   b:	48 89 f7             	mov    %rsi,%rdi
   e:	89 d6                	mov    %edx,%esi
  10:	41 8a 42 0c          	mov    0xc(%r10),%al
  14:	45 84 c9             	test   %r9b,%r9b
  17:	75 06                	jne    1f <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x1f>
  19:	84 c0                	test   %al,%al
  1b:	75 0d                	jne    2a <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x2a>
  1d:	eb 14                	jmp    33 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x33>
  1f:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 26 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x26>
  26:	84 c0                	test   %al,%al
  28:	74 10                	je     3a <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x3a>
  2a:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 31 <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x31>
  31:	eb 07                	jmp    3a <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x3a>
  33:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 3a <int PropertiesBuilder::add_part<unsigned short>(char*, unsigned int, char const*, unsigned short, bool, unsigned int)+0x3a>
  3a:	31 c0                	xor    %eax,%eax
  3c:	e9 00 00 00 00       	jmp    41 <.LC10+0x2f>

e131paramsdump.o:     file format elf64-x86-64


Disassembly of section .text._ZN10E131Params4DumpEv:

0000000000000000 <E131Params::Dump()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	c3                   	ret    

e131controller.o:     file format elf64-x86-64


Disassembly of section .text._ZN7networkL15convert_to_uintEhhhh:

0000000000000000 <network::convert_to_uint(unsigned char, unsigned char, unsigned char, unsigned char)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	89 c8                	mov    %ecx,%eax
   6:	89 f9                	mov    %edi,%ecx
   8:	88 4d fc             	mov    %cl,-0x4(%rbp)
   b:	89 f1                	mov    %esi,%ecx
   d:	88 4d f8             	mov    %cl,-0x8(%rbp)
  10:	88 55 f4             	mov    %dl,-0xc(%rbp)
  13:	88 45 f0             	mov    %al,-0x10(%rbp)
  16:	0f b6 55 fc          	movzbl -0x4(%rbp),%edx
  1a:	0f b6 45 f8          	movzbl -0x8(%rbp),%eax
  1e:	c1 e0 08             	shl    $0x8,%eax
  21:	09 c2                	or     %eax,%edx
  23:	0f b6 45 f4          	movzbl -0xc(%rbp),%eax
  27:	c1 e0 10             	shl    $0x10,%eax
  2a:	09 c2                	or     %eax,%edx
  2c:	0f b6 45 f0          	movzbl -0x10(%rbp),%eax
  30:	c1 e0 18             	shl    $0x18,%eax
  33:	09 d0                	or     %edx,%eax
  35:	5d                   	pop    %rbp
  36:	c3                   	ret    

Disassembly of section .text._ZNK7Network11GetHostNameEv:

0000000000000000 <Network::GetHostName() const>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	48 83 c0 1c          	add    $0x1c,%rax
  14:	5d                   	pop    %rbp
  15:	c3                   	ret    

Disassembly of section .text._ZN7Network3GetEv:

0000000000000000 <Network::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # f <Network::Get()+0xf>
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text._ZN4e131L24universe_to_multicast_ipEt:

0000000000000000 <e131::universe_to_multicast_ip(unsigned short)>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	89 f8                	mov    %edi,%eax
   a:	66 89 45 fc          	mov    %ax,-0x4(%rbp)
   e:	b9 00 00 00 00       	mov    $0x0,%ecx
  13:	ba 00 00 00 00       	mov    $0x0,%edx
  18:	be ff 00 00 00       	mov    $0xff,%esi
  1d:	bf ef 00 00 00       	mov    $0xef,%edi
  22:	e8 00 00 00 00       	call   27 <e131::universe_to_multicast_ip(unsigned short)+0x27>
  27:	89 c2                	mov    %eax,%edx
  29:	0f b7 45 fc          	movzwl -0x4(%rbp),%eax
  2d:	c1 e0 18             	shl    $0x18,%eax
  30:	09 c2                	or     %eax,%edx
  32:	0f b7 45 fc          	movzwl -0x4(%rbp),%eax
  36:	c1 e0 08             	shl    $0x8,%eax
  39:	25 00 00 ff 00       	and    $0xff0000,%eax
  3e:	09 d0                	or     %edx,%eax
  40:	c9                   	leave  
  41:	c3                   	ret    

Disassembly of section .text._ZN14E131Controller25SetSynchronizationAddressEt:

0000000000000000 <E131Controller::SetSynchronizationAddress(unsigned short)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	66 89 45 f4          	mov    %ax,-0xc(%rbp)
  16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1a:	0f b7 55 f4          	movzwl -0xc(%rbp),%edx
  1e:	66 89 50 14          	mov    %dx,0x14(%rax)
  22:	0f b7 45 f4          	movzwl -0xc(%rbp),%eax
  26:	89 c7                	mov    %eax,%edi
  28:	e8 00 00 00 00       	call   2d <E131Controller::SetSynchronizationAddress(unsigned short)+0x2d>
  2d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  31:	89 42 18             	mov    %eax,0x18(%rdx)
  34:	90                   	nop
  35:	c9                   	leave  
  36:	c3                   	ret    

Disassembly of section .text._ZN8Hardware3GetEv:

0000000000000000 <Hardware::Get()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # f <Hardware::Get()+0xf>
   f:	5d                   	pop    %rbp
  10:	c3                   	ret    

Disassembly of section .text._ZN14E131ControllerC2Ev:

0000000000000000 <E131Controller::E131Controller()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 78          	sub    $0x78,%rsp
   d:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  24:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%rax)
  2a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  2e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
  35:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  39:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  40:	00 
  41:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  45:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  4c:	00 
  4d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  51:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  58:	00 
  59:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  5d:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%rax)
  64:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  68:	c7 80 8c 00 00 00 ff 	movl   $0xff,0x8c(%rax)
  6f:	00 00 00 
  72:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  76:	48 89 05 00 00 00 00 	mov    %rax,0x0(%rip)        # 7d <E131Controller::E131Controller()+0x7d>
  7d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  81:	48 83 c0 08          	add    $0x8,%rax
  85:	ba 18 00 00 00       	mov    $0x18,%edx
  8a:	be 00 00 00 00       	mov    $0x0,%esi
  8f:	48 89 c7             	mov    %rax,%rdi
  92:	e8 00 00 00 00       	call   97 <E131Controller::E131Controller()+0x97>
  97:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  9b:	c6 40 10 64          	movb   $0x64,0x10(%rax)
  9f:	e8 00 00 00 00       	call   a4 <E131Controller::E131Controller()+0xa4>
  a4:	48 89 c2             	mov    %rax,%rdx
  a7:	48 8d 45 97          	lea    -0x69(%rbp),%rax
  ab:	48 89 c6             	mov    %rax,%rsi
  ae:	48 89 d7             	mov    %rdx,%rdi
  b1:	e8 00 00 00 00       	call   b6 <E131Controller::E131Controller()+0xb6>
  b6:	48 89 c3             	mov    %rax,%rbx
  b9:	e8 00 00 00 00       	call   be <E131Controller::E131Controller()+0xbe>
  be:	48 89 c7             	mov    %rax,%rdi
  c1:	e8 00 00 00 00       	call   c6 <E131Controller::E131Controller()+0xc6>
  c6:	48 89 c2             	mov    %rax,%rdx
  c9:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  cd:	49 89 d8             	mov    %rbx,%r8
  d0:	48 89 d1             	mov    %rdx,%rcx
  d3:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # da <E131Controller::E131Controller()+0xda>
  da:	be 40 00 00 00       	mov    $0x40,%esi
  df:	48 89 c7             	mov    %rax,%rdi
  e2:	b8 00 00 00 00       	mov    $0x0,%eax
  e7:	e8 00 00 00 00       	call   ec <E131Controller::E131Controller()+0xec>
  ec:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  f0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  f4:	48 89 d6             	mov    %rdx,%rsi
  f7:	48 89 c7             	mov    %rax,%rdi
  fa:	e8 00 00 00 00       	call   ff <E131Controller::E131Controller()+0xff>
  ff:	e8 00 00 00 00       	call   104 <E131Controller::E131Controller()+0x104>
 104:	48 89 c2             	mov    %rax,%rdx
 107:	48 8b 45 88          	mov    -0x78(%rbp),%rax
 10b:	48 83 c0 3c          	add    $0x3c,%rax
 10f:	48 89 c6             	mov    %rax,%rsi
 112:	48 89 d7             	mov    %rdx,%rdi
 115:	e8 00 00 00 00       	call   11a <E131Controller::E131Controller()+0x11a>
 11a:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%rbp)
 121:	eb 2b                	jmp    14e <E131Controller::E131Controller()+0x14e>
 123:	8b 45 98             	mov    -0x68(%rbp),%eax
 126:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
 12d:	00 
 12e:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 135 <E131Controller::E131Controller()+0x135>
 135:	48 01 d0             	add    %rdx,%rax
 138:	ba 08 00 00 00       	mov    $0x8,%edx
 13d:	be 00 00 00 00       	mov    $0x0,%esi
 142:	48 89 c7             	mov    %rax,%rdi
 145:	e8 00 00 00 00       	call   14a <E131Controller::E131Controller()+0x14a>
 14a:	83 45 98 01          	addl   $0x1,-0x68(%rbp)
 14e:	81 7d 98 ff 01 00 00 	cmpl   $0x1ff,-0x68(%rbp)
 155:	76 cc                	jbe    123 <E131Controller::E131Controller()+0x123>
 157:	48 8b 45 88          	mov    -0x78(%rbp),%rax
 15b:	be 88 13 00 00       	mov    $0x1388,%esi
 160:	48 89 c7             	mov    %rax,%rdi
 163:	e8 00 00 00 00       	call   168 <E131Controller::E131Controller()+0x168>
 168:	c7 45 9c ef ff 00 00 	movl   $0xffef,-0x64(%rbp)
 16f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
 173:	c7 40 38 ef ff fa d6 	movl   $0xd6faffef,0x38(%rax)
 17a:	bf 7e 02 00 00       	mov    $0x27e,%edi
 17f:	e8 00 00 00 00       	call   184 <E131Controller::E131Controller()+0x184>
 184:	48 89 c2             	mov    %rax,%rdx
 187:	48 8b 45 88          	mov    -0x78(%rbp),%rax
 18b:	48 89 50 20          	mov    %rdx,0x20(%rax)
 18f:	bf 78 04 00 00       	mov    $0x478,%edi
 194:	e8 00 00 00 00       	call   199 <E131Controller::E131Controller()+0x199>
 199:	48 89 c2             	mov    %rax,%rdx
 19c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
 1a0:	48 89 50 28          	mov    %rdx,0x28(%rax)
 1a4:	bf 31 00 00 00       	mov    $0x31,%edi
 1a9:	e8 00 00 00 00       	call   1ae <E131Controller::E131Controller()+0x1ae>
 1ae:	48 89 c2             	mov    %rax,%rdx
 1b1:	48 8b 45 88          	mov    -0x78(%rbp),%rax
 1b5:	48 89 50 30          	mov    %rdx,0x30(%rax)
 1b9:	e8 00 00 00 00       	call   1be <E131Controller::E131Controller()+0x1be>
 1be:	be c0 15 00 00       	mov    $0x15c0,%esi
 1c3:	48 89 c7             	mov    %rax,%rdi
 1c6:	e8 00 00 00 00       	call   1cb <E131Controller::E131Controller()+0x1cb>
 1cb:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
 1cf:	89 02                	mov    %eax,(%rdx)
 1d1:	90                   	nop
 1d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1d6:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 1dd:	00 00 
 1df:	74 05                	je     1e6 <E131Controller::E131Controller()+0x1e6>
 1e1:	e8 00 00 00 00       	call   1e6 <E131Controller::E131Controller()+0x1e6>
 1e6:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 1ea:	c9                   	leave  
 1eb:	c3                   	ret    

Disassembly of section .text._ZN14E131ControllerD2Ev:

0000000000000000 <E131Controller::~E131Controller()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	e8 00 00 00 00       	call   15 <E131Controller::~E131Controller()+0x15>
  15:	be c0 15 00 00       	mov    $0x15c0,%esi
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	call   22 <E131Controller::~E131Controller()+0x22>
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 8b 40 30          	mov    0x30(%rax),%rax
  2a:	48 85 c0             	test   %rax,%rax
  2d:	74 21                	je     50 <E131Controller::~E131Controller()+0x50>
  2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  33:	48 8b 40 30          	mov    0x30(%rax),%rax
  37:	48 85 c0             	test   %rax,%rax
  3a:	74 08                	je     44 <E131Controller::~E131Controller()+0x44>
  3c:	48 89 c7             	mov    %rax,%rdi
  3f:	e8 00 00 00 00       	call   44 <E131Controller::~E131Controller()+0x44>
  44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  48:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  4f:	00 
  50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  54:	48 8b 40 28          	mov    0x28(%rax),%rax
  58:	48 85 c0             	test   %rax,%rax
  5b:	74 21                	je     7e <E131Controller::~E131Controller()+0x7e>
  5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  61:	48 8b 40 28          	mov    0x28(%rax),%rax
  65:	48 85 c0             	test   %rax,%rax
  68:	74 08                	je     72 <E131Controller::~E131Controller()+0x72>
  6a:	48 89 c7             	mov    %rax,%rdi
  6d:	e8 00 00 00 00       	call   72 <E131Controller::~E131Controller()+0x72>
  72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  76:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  7d:	00 
  7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  82:	48 8b 40 20          	mov    0x20(%rax),%rax
  86:	48 85 c0             	test   %rax,%rax
  89:	74 21                	je     ac <E131Controller::~E131Controller()+0xac>
  8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8f:	48 8b 40 20          	mov    0x20(%rax),%rax
  93:	48 85 c0             	test   %rax,%rax
  96:	74 08                	je     a0 <E131Controller::~E131Controller()+0xa0>
  98:	48 89 c7             	mov    %rax,%rdi
  9b:	e8 00 00 00 00       	call   a0 <E131Controller::~E131Controller()+0xa0>
  a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a4:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  ab:	00 
  ac:	90                   	nop
  ad:	c9                   	leave  
  ae:	c3                   	ret    

Disassembly of section .text._ZN14E131Controller5StartEv:

0000000000000000 <E131Controller::Start()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	call   1c <E131Controller::Start()+0x1c>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	call   28 <E131Controller::Start()+0x28>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	call   34 <E131Controller::Start()+0x34>
  34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  38:	c6 40 08 01          	movb   $0x1,0x8(%rax)
  3c:	90                   	nop
  3d:	c9                   	leave  
  3e:	c3                   	ret    

Disassembly of section .text._ZN14E131Controller4StopEv:

0000000000000000 <E131Controller::Stop()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  10:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  14:	90                   	nop
  15:	5d                   	pop    %rbp
  16:	c3                   	ret    

Disassembly of section .text._ZN14E131Controller3RunEv:

0000000000000000 <E131Controller::Run()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  18:	0f b6 c0             	movzbl %al,%eax
  1b:	48 85 c0             	test   %rax,%rax
  1e:	74 20                	je     40 <E131Controller::Run()+0x40>
  20:	e8 00 00 00 00       	call   25 <E131Controller::Run()+0x25>
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	call   2d <E131Controller::Run()+0x2d>
  2d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  31:	89 42 04             	mov    %eax,0x4(%rdx)
  34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	call   40 <E131Controller::Run()+0x40>
  40:	90                   	nop
  41:	c9                   	leave  
  42:	c3                   	ret    

Disassembly of section .text._ZN14E131Controller14FillDataPacketEv:

0000000000000000 <E131Controller::FillDataPacket()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 20          	mov    0x20(%rax),%rax
  18:	66 c7 00 00 10       	movw   $0x1000,(%rax)
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 8b 40 20          	mov    0x20(%rax),%rax
  25:	66 c7 40 02 00 00    	movw   $0x0,0x2(%rax)
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 8b 40 20          	mov    0x20(%rax),%rax
  33:	48 83 c0 04          	add    $0x4,%rax
  37:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 3e <E131Controller::FillDataPacket()+0x3e>
  3e:	48 89 10             	mov    %rdx,(%rax)
  41:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 47 <E131Controller::FillDataPacket()+0x47>
  47:	89 50 08             	mov    %edx,0x8(%rax)
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 8b 40 20          	mov    0x20(%rax),%rax
  52:	c7 40 12 00 00 00 04 	movl   $0x4000000,0x12(%rax)
  59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5d:	48 8d 50 3c          	lea    0x3c(%rax),%rdx
  61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  65:	48 8b 40 20          	mov    0x20(%rax),%rax
  69:	48 8d 48 16          	lea    0x16(%rax),%rcx
  6d:	48 8b 02             	mov    (%rdx),%rax
  70:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  74:	48 89 01             	mov    %rax,(%rcx)
  77:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7f:	48 8b 40 20          	mov    0x20(%rax),%rax
  83:	c7 40 28 00 00 00 02 	movl   $0x2000000,0x28(%rax)
  8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8e:	48 8d 48 4c          	lea    0x4c(%rax),%rcx
  92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  96:	48 8b 40 20          	mov    0x20(%rax),%rax
  9a:	48 83 c0 2c          	add    $0x2c,%rax
  9e:	ba 40 00 00 00       	mov    $0x40,%edx
  a3:	48 89 ce             	mov    %rcx,%rsi
  a6:	48 89 c7             	mov    %rax,%rdi
  a9:	e8 00 00 00 00       	call   ae <E131Controller::FillDataPacket()+0xae>
  ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b2:	48 8b 40 20          	mov    0x20(%rax),%rax
  b6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  ba:	0f b6 52 10          	movzbl 0x10(%rdx),%edx
  be:	88 50 6c             	mov    %dl,0x6c(%rax)
  c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c5:	0f b7 40 14          	movzwl 0x14(%rax),%eax
  c9:	0f b7 d0             	movzwl %ax,%edx
  cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  d0:	48 8b 40 20          	mov    0x20(%rax),%rax
  d4:	66 c1 c2 08          	rol    $0x8,%dx
  d8:	66 89 50 6d          	mov    %dx,0x6d(%rax)
  dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e0:	48 8b 40 20          	mov    0x20(%rax),%rax
  e4:	c6 40 70 00          	movb   $0x0,0x70(%rax)
  e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ec:	48 8b 40 20          	mov    0x20(%rax),%rax
  f0:	c6 40 75 02          	movb   $0x2,0x75(%rax)
  f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  f8:	48 8b 40 20          	mov    0x20(%rax),%rax
  fc:	c6 40 76 a1          	movb   $0xa1,0x76(%rax)
 100:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 104:	48 8b 40 20          	mov    0x20(%rax),%rax
 108:	66 c7 40 77 00 00    	movw   $0x0,0x77(%rax)
 10e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 112:	48 8b 40 20          	mov    0x20(%rax),%rax
 116:	66 c7 40 79 00 01    	movw   $0x100,0x79(%rax)
 11c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 120:	48 8b 40 20          	mov    0x20(%rax),%rax
 124:	c6 40 7d 00          	movb   $0x0,0x7d(%rax)
 128:	90                   	nop
 129:	c9                   	leave  
 12a:	c3                   	ret    

Disassembly of section .text._ZN14E131Controller19FillDiscoveryPacketEv:

0000000000000000 <E131Controller::FillDiscoveryPacket()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 28          	mov    0x28(%rax),%rax
  18:	ba 78 04 00 00       	mov    $0x478,%edx
  1d:	be 00 00 00 00       	mov    $0x0,%esi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <E131Controller::FillDiscoveryPacket()+0x2a>
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	48 8b 40 28          	mov    0x28(%rax),%rax
  32:	66 c7 00 00 10       	movw   $0x1000,(%rax)
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	48 8b 40 28          	mov    0x28(%rax),%rax
  3f:	48 83 c0 04          	add    $0x4,%rax
  43:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 4a <E131Controller::FillDiscoveryPacket()+0x4a>
  4a:	48 89 10             	mov    %rdx,(%rax)
  4d:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 53 <E131Controller::FillDiscoveryPacket()+0x53>
  53:	89 50 08             	mov    %edx,0x8(%rax)
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	48 8b 40 28          	mov    0x28(%rax),%rax
  5e:	c7 40 12 00 00 00 08 	movl   $0x8000000,0x12(%rax)
  65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  69:	48 8d 50 3c          	lea    0x3c(%rax),%rdx
  6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  71:	48 8b 40 28          	mov    0x28(%rax),%rax
  75:	48 8d 48 16          	lea    0x16(%rax),%rcx
  79:	48 8b 02             	mov    (%rdx),%rax
  7c:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  80:	48 89 01             	mov    %rax,(%rcx)
  83:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8b:	48 8b 40 28          	mov    0x28(%rax),%rax
  8f:	c7 40 28 00 00 00 02 	movl   $0x2000000,0x28(%rax)
  96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  9a:	48 8d 48 4c          	lea    0x4c(%rax),%rcx
  9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a2:	48 8b 40 28          	mov    0x28(%rax),%rax
  a6:	48 83 c0 2c          	add    $0x2c,%rax
  aa:	ba 40 00 00 00       	mov    $0x40,%edx
  af:	48 89 ce             	mov    %rcx,%rsi
  b2:	48 89 c7             	mov    %rax,%rdi
  b5:	e8 00 00 00 00       	call   ba <E131Controller::FillDiscoveryPacket()+0xba>
  ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  be:	48 8b 40 28          	mov    0x28(%rax),%rax
  c2:	c7 40 72 00 00 00 01 	movl   $0x1000000,0x72(%rax)
  c9:	90                   	nop
  ca:	c9                   	leave  
  cb:	c3                   	ret    

Disassembly of section .text._ZN14E131Controller25FillSynchronizationPacketEv:

0000000000000000 <E131Controller::FillSynchronizationPacket()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	48 8b 40 30          	mov    0x30(%rax),%rax
  18:	ba 31 00 00 00       	mov    $0x31,%edx
  1d:	be 00 00 00 00       	mov    $0x0,%esi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	call   2a <E131Controller::FillSynchronizationPacket()+0x2a>
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	48 8b 40 30          	mov    0x30(%rax),%rax
  32:	66 c7 00 00 10       	movw   $0x1000,(%rax)
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	48 8b 40 30          	mov    0x30(%rax),%rax
  3f:	48 83 c0 04          	add    $0x4,%rax
  43:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 4a <E131Controller::FillSynchronizationPacket()+0x4a>
  4a:	48 89 10             	mov    %rdx,(%rax)
  4d:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 53 <E131Controller::FillSynchronizationPacket()+0x53>
  53:	89 50 08             	mov    %edx,0x8(%rax)
  56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5a:	48 8b 40 30          	mov    0x30(%rax),%rax
  5e:	66 c7 40 10 70 21    	movw   $0x2170,0x10(%rax)
  64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  68:	48 8b 40 30          	mov    0x30(%rax),%rax
  6c:	c7 40 12 00 00 00 08 	movl   $0x8000000,0x12(%rax)
  73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  77:	48 8d 50 3c          	lea    0x3c(%rax),%rdx
  7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7f:	48 8b 40 30          	mov    0x30(%rax),%rax
  83:	48 8d 48 16          	lea    0x16(%rax),%rcx
  87:	48 8b 02             	mov    (%rdx),%rax
  8a:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8e:	48 89 01             	mov    %rax,(%rcx)
  91:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  99:	48 8b 40 30          	mov    0x30(%rax),%rax
  9d:	66 c7 40 26 70 0b    	movw   $0xb70,0x26(%rax)
  a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  a7:	48 8b 40 30          	mov    0x30(%rax),%rax
  ab:	c7 40 28 00 00 00 01 	movl   $0x1000000,0x28(%rax)
  b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  b6:	0f b7 40 14          	movzwl 0x14(%rax),%eax
  ba:	0f b7 d0             	movzwl %ax,%edx
  bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  c1:	48 8b 40 30          	mov    0x30(%rax),%rax
  c5:	66 c1 c2 08          	rol    $0x8,%dx
  c9:	66 89 50 2d          	mov    %dx,0x2d(%rax)
  cd:	90                   	nop
  ce:	c9                   	leave  
  cf:	c3                   	ret    

Disassembly of section .text._ZN14E131Controller12HandleDmxOutEtPKhj:

0000000000000000 <E131Controller::HandleDmxOut(unsigned short, unsigned char const*, unsigned int)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	89 f0                	mov    %esi,%eax
  13:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  17:	89 4d d0             	mov    %ecx,-0x30(%rbp)
  1a:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  1e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  25:	00 00 
  27:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  2b:	31 c0                	xor    %eax,%eax
  2d:	8b 45 d0             	mov    -0x30(%rbp),%eax
  30:	83 c0 6e             	add    $0x6e,%eax
  33:	80 cc 70             	or     $0x70,%ah
  36:	0f b7 d0             	movzwl %ax,%edx
  39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3d:	48 8b 40 20          	mov    0x20(%rax),%rax
  41:	66 c1 c2 08          	rol    $0x8,%dx
  45:	66 89 50 10          	mov    %dx,0x10(%rax)
  49:	8b 45 d0             	mov    -0x30(%rbp),%eax
  4c:	83 c0 58             	add    $0x58,%eax
  4f:	80 cc 70             	or     $0x70,%ah
  52:	0f b7 d0             	movzwl %ax,%edx
  55:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  59:	48 8b 40 20          	mov    0x20(%rax),%rax
  5d:	66 c1 c2 08          	rol    $0x8,%dx
  61:	66 89 50 26          	mov    %dx,0x26(%rax)
  65:	0f b7 4d d4          	movzwl -0x2c(%rbp),%ecx
  69:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  6d:	48 8b 58 20          	mov    0x20(%rax),%rbx
  71:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  79:	89 ce                	mov    %ecx,%esi
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	call   83 <E131Controller::HandleDmxOut(unsigned short, unsigned char const*, unsigned int)+0x83>
  83:	88 43 6f             	mov    %al,0x6f(%rbx)
  86:	0f b7 55 d4          	movzwl -0x2c(%rbp),%edx
  8a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8e:	48 8b 40 20          	mov    0x20(%rax),%rax
  92:	66 c1 c2 08          	rol    $0x8,%dx
  96:	66 89 50 71          	mov    %dx,0x71(%rax)
  9a:	8b 45 d0             	mov    -0x30(%rbp),%eax
  9d:	83 c0 0b             	add    $0xb,%eax
  a0:	80 cc 70             	or     $0x70,%ah
  a3:	0f b7 d0             	movzwl %ax,%edx
  a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  aa:	48 8b 40 20          	mov    0x20(%rax),%rax
  ae:	66 c1 c2 08          	rol    $0x8,%dx
  b2:	66 89 50 73          	mov    %dx,0x73(%rax)
  b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  ba:	8b 80 8c 00 00 00    	mov    0x8c(%rax),%eax
  c0:	3d ff 00 00 00       	cmp    $0xff,%eax
  c5:	0f 94 c0             	sete   %al
  c8:	0f b6 c0             	movzbl %al,%eax
  cb:	48 85 c0             	test   %rax,%rax
  ce:	74 23                	je     f3 <E131Controller::HandleDmxOut(unsigned short, unsigned char const*, unsigned int)+0xf3>
  d0:	8b 55 d0             	mov    -0x30(%rbp),%edx
  d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d7:	48 8b 40 20          	mov    0x20(%rax),%rax
  db:	48 8d 48 7e          	lea    0x7e(%rax),%rcx
  df:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  e3:	48 89 c6             	mov    %rax,%rsi
  e6:	48 89 cf             	mov    %rcx,%rdi
  e9:	e8 00 00 00 00       	call   ee <E131Controller::HandleDmxOut(unsigned short, unsigned char const*, unsigned int)+0xee>
  ee:	e9 89 00 00 00       	jmp    17c <E131Controller::HandleDmxOut(unsigned short, unsigned char const*, unsigned int)+0x17c>
  f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  f7:	8b 80 8c 00 00 00    	mov    0x8c(%rax),%eax
  fd:	85 c0                	test   %eax,%eax
  ff:	75 21                	jne    122 <E131Controller::HandleDmxOut(unsigned short, unsigned char const*, unsigned int)+0x122>
 101:	8b 45 d0             	mov    -0x30(%rbp),%eax
 104:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 108:	48 8b 52 20          	mov    0x20(%rdx),%rdx
 10c:	48 8d 4a 7e          	lea    0x7e(%rdx),%rcx
 110:	48 89 c2             	mov    %rax,%rdx
 113:	be 00 00 00 00       	mov    $0x0,%esi
 118:	48 89 cf             	mov    %rcx,%rdi
 11b:	e8 00 00 00 00       	call   120 <E131Controller::HandleDmxOut(unsigned short, unsigned char const*, unsigned int)+0x120>
 120:	eb 5a                	jmp    17c <E131Controller::HandleDmxOut(unsigned short, unsigned char const*, unsigned int)+0x17c>
 122:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
 129:	eb 49                	jmp    174 <E131Controller::HandleDmxOut(unsigned short, unsigned char const*, unsigned int)+0x174>
 12b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 12f:	8b 90 8c 00 00 00    	mov    0x8c(%rax),%edx
 135:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
 138:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 13c:	48 01 c8             	add    %rcx,%rax
 13f:	0f b6 00             	movzbl (%rax),%eax
 142:	0f b6 c0             	movzbl %al,%eax
 145:	0f af c2             	imul   %edx,%eax
 148:	89 c2                	mov    %eax,%edx
 14a:	b8 81 80 80 80       	mov    $0x80808081,%eax
 14f:	48 0f af c2          	imul   %rdx,%rax
 153:	48 c1 e8 20          	shr    $0x20,%rax
 157:	89 c1                	mov    %eax,%ecx
 159:	c1 e9 07             	shr    $0x7,%ecx
 15c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 160:	48 8b 40 20          	mov    0x20(%rax),%rax
 164:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 167:	83 c2 01             	add    $0x1,%edx
 16a:	89 d2                	mov    %edx,%edx
 16c:	88 4c 10 7d          	mov    %cl,0x7d(%rax,%rdx,1)
 170:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
 174:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 177:	3b 45 d0             	cmp    -0x30(%rbp),%eax
 17a:	72 af                	jb     12b <E131Controller::HandleDmxOut(unsigned short, unsigned char const*, unsigned int)+0x12b>
 17c:	8b 45 d0             	mov    -0x30(%rbp),%eax
 17f:	83 c0 01             	add    $0x1,%eax
 182:	0f b7 d0             	movzwl %ax,%edx
 185:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 189:	48 8b 40 20          	mov    0x20(%rax),%rax
 18d:	66 c1 c2 08          	rol    $0x8,%dx
 191:	66 89 50 7b          	mov    %dx,0x7b(%rax)
 195:	e8 00 00 00 00       	call   19a <E131Controller::HandleDmxOut(unsigned short, unsigned char const*, unsigned int)+0x19a>
 19a:	48 89 c7             	mov    %rax,%rdi
 19d:	8b 75 e0             	mov    -0x20(%rbp),%esi
 1a0:	8b 45 d0             	mov    -0x30(%rbp),%eax
 1a3:	83 c0 7e             	add    $0x7e,%eax
 1a6:	0f b7 c8             	movzwl %ax,%ecx
 1a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1ad:	48 8b 50 20          	mov    0x20(%rax),%rdx
 1b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 1b5:	8b 00                	mov    (%rax),%eax
 1b7:	41 b9 c0 15 00 00    	mov    $0x15c0,%r9d
 1bd:	41 89 f0             	mov    %esi,%r8d
 1c0:	89 c6                	mov    %eax,%esi
 1c2:	e8 00 00 00 00       	call   1c7 <E131Controller::HandleDmxOut(unsigned short, unsigned char const*, unsigned int)+0x1c7>
 1c7:	90                   	nop
 1c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1cc:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 1d3:	00 00 
 1d5:	74 05                	je     1dc <E131Controller::HandleDmxOut(unsigned short, unsigned char const*, unsigned int)+0x1dc>
 1d7:	e8 00 00 00 00       	call   1dc <E131Controller::HandleDmxOut(unsigned short, unsigned char const*, unsigned int)+0x1dc>
 1dc:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 1e0:	c9                   	leave  
 1e1:	c3                   	ret    

Disassembly of section .text._ZN14E131Controller10HandleSyncEv:

0000000000000000 <E131Controller::HandleSync()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  14:	0f b7 40 14          	movzwl 0x14(%rax),%eax
  18:	66 85 c0             	test   %ax,%ax
  1b:	74 4f                	je     6c <E131Controller::HandleSync()+0x6c>
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  25:	8d 48 01             	lea    0x1(%rax),%ecx
  28:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2c:	88 4a 1c             	mov    %cl,0x1c(%rdx)
  2f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  33:	48 8b 52 30          	mov    0x30(%rdx),%rdx
  37:	88 42 2c             	mov    %al,0x2c(%rdx)
  3a:	e8 00 00 00 00       	call   3f <E131Controller::HandleSync()+0x3f>
  3f:	48 89 c7             	mov    %rax,%rdi
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	8b 48 18             	mov    0x18(%rax),%ecx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	48 8b 50 30          	mov    0x30(%rax),%rdx
  51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  55:	8b 00                	mov    (%rax),%eax
  57:	41 b9 c0 15 00 00    	mov    $0x15c0,%r9d
  5d:	41 89 c8             	mov    %ecx,%r8d
  60:	b9 31 00 00 00       	mov    $0x31,%ecx
  65:	89 c6                	mov    %eax,%esi
  67:	e8 00 00 00 00       	call   6c <E131Controller::HandleSync()+0x6c>
  6c:	90                   	nop
  6d:	c9                   	leave  
  6e:	c3                   	ret    

Disassembly of section .text._ZN14E131Controller14HandleBlackoutEv:

0000000000000000 <E131Controller::HandleBlackout()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  18:	00 00 
  1a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  1e:	31 c0                	xor    %eax,%eax
  20:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  24:	48 8b 40 20          	mov    0x20(%rax),%rax
  28:	66 c7 40 10 72 6e    	movw   $0x6e72,0x10(%rax)
  2e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  32:	48 8b 40 20          	mov    0x20(%rax),%rax
  36:	66 c7 40 26 72 58    	movw   $0x5872,0x26(%rax)
  3c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40:	48 8b 40 20          	mov    0x20(%rax),%rax
  44:	66 c7 40 73 72 0b    	movw   $0xb72,0x73(%rax)
  4a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4e:	48 8b 40 20          	mov    0x20(%rax),%rax
  52:	66 c7 40 7b 02 01    	movw   $0x102,0x7b(%rax)
  58:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  5c:	48 8b 40 20          	mov    0x20(%rax),%rax
  60:	48 83 c0 7e          	add    $0x7e,%rax
  64:	ba 00 02 00 00       	mov    $0x200,%edx
  69:	be 00 00 00 00       	mov    $0x0,%esi
  6e:	48 89 c7             	mov    %rax,%rdi
  71:	e8 00 00 00 00       	call   76 <E131Controller::HandleBlackout()+0x76>
  76:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  7d:	e9 81 00 00 00       	jmp    103 <E131Controller::HandleBlackout()+0x103>
  82:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  85:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8c:	00 
  8d:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 94 <E131Controller::HandleBlackout()+0x94>
  94:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
  98:	66 89 45 de          	mov    %ax,-0x22(%rbp)
  9c:	0f b7 4d de          	movzwl -0x22(%rbp),%ecx
  a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a4:	48 8b 58 20          	mov    0x20(%rax),%rbx
  a8:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  b0:	89 ce                	mov    %ecx,%esi
  b2:	48 89 c7             	mov    %rax,%rdi
  b5:	e8 00 00 00 00       	call   ba <E131Controller::HandleBlackout()+0xba>
  ba:	88 43 6f             	mov    %al,0x6f(%rbx)
  bd:	0f b7 55 de          	movzwl -0x22(%rbp),%edx
  c1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  c5:	48 8b 40 20          	mov    0x20(%rax),%rax
  c9:	66 c1 c2 08          	rol    $0x8,%dx
  cd:	66 89 50 71          	mov    %dx,0x71(%rax)
  d1:	e8 00 00 00 00       	call   d6 <E131Controller::HandleBlackout()+0xd6>
  d6:	48 89 c7             	mov    %rax,%rdi
  d9:	8b 4d e0             	mov    -0x20(%rbp),%ecx
  dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  e0:	48 8b 50 20          	mov    0x20(%rax),%rdx
  e4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  e8:	8b 00                	mov    (%rax),%eax
  ea:	41 b9 c0 15 00 00    	mov    $0x15c0,%r9d
  f0:	41 89 c8             	mov    %ecx,%r8d
  f3:	b9 7e 02 00 00       	mov    $0x27e,%ecx
  f8:	89 c6                	mov    %eax,%esi
  fa:	e8 00 00 00 00       	call   ff <E131Controller::HandleBlackout()+0xff>
  ff:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
 103:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 107:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
 10b:	0f b7 c0             	movzwl %ax,%eax
 10e:	39 45 e4             	cmp    %eax,-0x1c(%rbp)
 111:	0f 82 6b ff ff ff    	jb     82 <E131Controller::HandleBlackout()+0x82>
 117:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 11b:	0f b7 40 14          	movzwl 0x14(%rax),%eax
 11f:	66 85 c0             	test   %ax,%ax
 122:	74 0c                	je     130 <E131Controller::HandleBlackout()+0x130>
 124:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 128:	48 89 c7             	mov    %rax,%rdi
 12b:	e8 00 00 00 00       	call   130 <E131Controller::HandleBlackout()+0x130>
 130:	90                   	nop
 131:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 135:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
 13c:	00 00 
 13e:	74 05                	je     145 <E131Controller::HandleBlackout()+0x145>
 140:	e8 00 00 00 00       	call   145 <E131Controller::HandleBlackout()+0x145>
 145:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
 149:	c9                   	leave  
 14a:	c3                   	ret    

Disassembly of section .text._ZN14E131Controller18GetSoftwareVersionEv:

0000000000000000 <E131Controller::GetSoftwareVersion()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 13 <E131Controller::GetSoftwareVersion()+0x13>
  13:	5d                   	pop    %rbp
  14:	c3                   	ret    

Disassembly of section .text._ZN14E131Controller13SetSourceNameEPKc:

0000000000000000 <E131Controller::SetSourceName(char const*)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 8d 48 4c          	lea    0x4c(%rax),%rcx
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	ba 3f 00 00 00       	mov    $0x3f,%edx
  25:	48 89 c6             	mov    %rax,%rsi
  28:	48 89 cf             	mov    %rcx,%rdi
  2b:	e8 00 00 00 00       	call   30 <E131Controller::SetSourceName(char const*)+0x30>
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	c6 80 8b 00 00 00 00 	movb   $0x0,0x8b(%rax)
  3b:	90                   	nop
  3c:	c9                   	leave  
  3d:	c3                   	ret    

Disassembly of section .text._ZN14E131Controller11SetPriorityEh:

0000000000000000 <E131Controller::SetPriority(unsigned char)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
   c:	89 f0                	mov    %esi,%eax
   e:	88 45 f4             	mov    %al,-0xc(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	0f b6 55 f4          	movzbl -0xc(%rbp),%edx
  19:	88 50 10             	mov    %dl,0x10(%rax)
  1c:	90                   	nop
  1d:	5d                   	pop    %rbp
  1e:	c3                   	ret    

Disassembly of section .text._ZN14E131Controller19SendDiscoveryPacketEv:

0000000000000000 <E131Controller::SendDiscoveryPacket()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 20          	sub    $0x20,%rsp
   c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  14:	8b 50 04             	mov    0x4(%rax),%edx
  17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1b:	8b 48 0c             	mov    0xc(%rax),%ecx
  1e:	89 d0                	mov    %edx,%eax
  20:	29 c8                	sub    %ecx,%eax
  22:	3d 0f 27 00 00       	cmp    $0x270f,%eax
  27:	0f 86 43 01 00 00    	jbe    170 <E131Controller::SendDiscoveryPacket()+0x170>
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	8b 50 04             	mov    0x4(%rax),%edx
  34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  38:	89 50 0c             	mov    %edx,0xc(%rax)
  3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3f:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
  43:	0f b7 d0             	movzwl %ax,%edx
  46:	b8 00 02 00 00       	mov    $0x200,%eax
  4b:	29 d0                	sub    %edx,%eax
  4d:	89 c2                	mov    %eax,%edx
  4f:	b8 34 02 00 00       	mov    $0x234,%eax
  54:	29 d0                	sub    %edx,%eax
  56:	01 c0                	add    %eax,%eax
  58:	80 cc 70             	or     $0x70,%ah
  5b:	0f b7 d0             	movzwl %ax,%edx
  5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  62:	48 8b 40 28          	mov    0x28(%rax),%rax
  66:	66 c1 c2 08          	rol    $0x8,%dx
  6a:	66 89 50 10          	mov    %dx,0x10(%rax)
  6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  72:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
  76:	0f b7 d0             	movzwl %ax,%edx
  79:	b8 00 02 00 00       	mov    $0x200,%eax
  7e:	29 d0                	sub    %edx,%eax
  80:	89 c2                	mov    %eax,%edx
  82:	b8 29 02 00 00       	mov    $0x229,%eax
  87:	29 d0                	sub    %edx,%eax
  89:	01 c0                	add    %eax,%eax
  8b:	80 cc 70             	or     $0x70,%ah
  8e:	0f b7 d0             	movzwl %ax,%edx
  91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  95:	48 8b 40 28          	mov    0x28(%rax),%rax
  99:	66 c1 c2 08          	rol    $0x8,%dx
  9d:	66 89 50 26          	mov    %dx,0x26(%rax)
  a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a5:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
  a9:	0f b7 d0             	movzwl %ax,%edx
  ac:	b8 00 02 00 00       	mov    $0x200,%eax
  b1:	29 d0                	sub    %edx,%eax
  b3:	89 c2                	mov    %eax,%edx
  b5:	b8 04 02 00 00       	mov    $0x204,%eax
  ba:	29 d0                	sub    %edx,%eax
  bc:	01 c0                	add    %eax,%eax
  be:	80 cc 70             	or     $0x70,%ah
  c1:	0f b7 d0             	movzwl %ax,%edx
  c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c8:	48 8b 40 28          	mov    0x28(%rax),%rax
  cc:	66 c1 c2 08          	rol    $0x8,%dx
  d0:	66 89 50 70          	mov    %dx,0x70(%rax)
  d4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  db:	eb 37                	jmp    114 <E131Controller::SendDiscoveryPacket()+0x114>
  dd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  e0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  e7:	00 
  e8:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ef <E131Controller::SendDiscoveryPacket()+0xef>
  ef:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
  f3:	0f b7 d0             	movzwl %ax,%edx
  f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  fa:	48 8b 40 28          	mov    0x28(%rax),%rax
  fe:	89 d1                	mov    %edx,%ecx
 100:	66 c1 c1 08          	rol    $0x8,%cx
 104:	8b 55 fc             	mov    -0x4(%rbp),%edx
 107:	48 83 c2 38          	add    $0x38,%rdx
 10b:	66 89 4c 50 08       	mov    %cx,0x8(%rax,%rdx,2)
 110:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
 114:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 118:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
 11c:	0f b7 c0             	movzwl %ax,%eax
 11f:	39 45 fc             	cmp    %eax,-0x4(%rbp)
 122:	72 b9                	jb     dd <E131Controller::SendDiscoveryPacket()+0xdd>
 124:	e8 00 00 00 00       	call   129 <E131Controller::SendDiscoveryPacket()+0x129>
 129:	48 89 c7             	mov    %rax,%rdi
 12c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 130:	8b 70 38             	mov    0x38(%rax),%esi
 133:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 137:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
 13b:	0f b7 d0             	movzwl %ax,%edx
 13e:	b8 00 02 00 00       	mov    $0x200,%eax
 143:	29 d0                	sub    %edx,%eax
 145:	8d 14 00             	lea    (%rax,%rax,1),%edx
 148:	b8 78 04 00 00       	mov    $0x478,%eax
 14d:	29 d0                	sub    %edx,%eax
 14f:	0f b7 c8             	movzwl %ax,%ecx
 152:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 156:	48 8b 50 28          	mov    0x28(%rax),%rdx
 15a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 15e:	8b 00                	mov    (%rax),%eax
 160:	41 b9 c0 15 00 00    	mov    $0x15c0,%r9d
 166:	41 89 f0             	mov    %esi,%r8d
 169:	89 c6                	mov    %eax,%esi
 16b:	e8 00 00 00 00       	call   170 <E131Controller::SendDiscoveryPacket()+0x170>
 170:	90                   	nop
 171:	c9                   	leave  
 172:	c3                   	ret    

Disassembly of section .text._ZN14E131Controller17GetSequenceNumberEtRj:

0000000000000000 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 38          	sub    $0x38,%rsp
   c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  10:	89 f0                	mov    %esi,%eax
  12:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  16:	66 89 45 d4          	mov    %ax,-0x2c(%rbp)
  1a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  21:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2c:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
  30:	0f b7 c0             	movzwl %ax,%eax
  33:	89 45 ec             	mov    %eax,-0x14(%rbp)
  36:	e9 ce 00 00 00       	jmp    109 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x109>
  3b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  3e:	2b 45 e4             	sub    -0x1c(%rbp),%eax
  41:	89 c2                	mov    %eax,%edx
  43:	c1 ea 1f             	shr    $0x1f,%edx
  46:	01 d0                	add    %edx,%eax
  48:	d1 f8                	sar    %eax
  4a:	89 c2                	mov    %eax,%edx
  4c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  4f:	01 d0                	add    %edx,%eax
  51:	89 45 e8             	mov    %eax,-0x18(%rbp)
  54:	8b 45 e8             	mov    -0x18(%rbp),%eax
  57:	48 98                	cltq   
  59:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  60:	00 
  61:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 68 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x68>
  68:	0f b7 04 02          	movzwl (%rdx,%rax,1),%eax
  6c:	0f b7 c0             	movzwl %ax,%eax
  6f:	89 45 f4             	mov    %eax,-0xc(%rbp)
  72:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
  76:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  79:	73 0e                	jae    89 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x89>
  7b:	8b 45 e8             	mov    -0x18(%rbp),%eax
  7e:	83 c0 01             	add    $0x1,%eax
  81:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  84:	e9 80 00 00 00       	jmp    109 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x109>
  89:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
  8d:	39 45 f4             	cmp    %eax,-0xc(%rbp)
  90:	76 0b                	jbe    9d <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x9d>
  92:	8b 45 e8             	mov    -0x18(%rbp),%eax
  95:	83 e8 01             	sub    $0x1,%eax
  98:	89 45 ec             	mov    %eax,-0x14(%rbp)
  9b:	eb 6c                	jmp    109 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x109>
  9d:	8b 45 e8             	mov    -0x18(%rbp),%eax
  a0:	48 98                	cltq   
  a2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  a9:	00 
  aa:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # b1 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0xb1>
  b1:	8b 14 02             	mov    (%rdx,%rax,1),%edx
  b4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  b8:	89 10                	mov    %edx,(%rax)
  ba:	8b 45 e8             	mov    -0x18(%rbp),%eax
  bd:	48 98                	cltq   
  bf:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  c6:	00 
  c7:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # ce <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0xce>
  ce:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  d2:	8d 48 01             	lea    0x1(%rax),%ecx
  d5:	8b 45 e8             	mov    -0x18(%rbp),%eax
  d8:	48 98                	cltq   
  da:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  e1:	00 
  e2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # e9 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0xe9>
  e9:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  ec:	8b 45 e8             	mov    -0x18(%rbp),%eax
  ef:	48 98                	cltq   
  f1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  f8:	00 
  f9:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 100 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x100>
 100:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
 104:	e9 73 01 00 00       	jmp    27c <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x27c>
 109:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 10c:	3b 45 ec             	cmp    -0x14(%rbp),%eax
 10f:	0f 8e 26 ff ff ff    	jle    3b <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x3b>
 115:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%rbp)
 119:	0f 84 e9 00 00 00    	je     208 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x208>
 11f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 123:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
 127:	0f b7 d0             	movzwl %ax,%edx
 12a:	8b 45 ec             	mov    -0x14(%rbp),%eax
 12d:	39 c2                	cmp    %eax,%edx
 12f:	0f 84 d3 00 00 00    	je     208 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x208>
 135:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 13c <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x13c>
 13c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
 140:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 144:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
 148:	0f b7 c0             	movzwl %ax,%eax
 14b:	83 e8 01             	sub    $0x1,%eax
 14e:	89 45 f0             	mov    %eax,-0x10(%rbp)
 151:	eb 37                	jmp    18a <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x18a>
 153:	8b 45 f0             	mov    -0x10(%rbp),%eax
 156:	48 98                	cltq   
 158:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
 15f:	00 
 160:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
 164:	48 01 d0             	add    %rdx,%rax
 167:	8b 55 f0             	mov    -0x10(%rbp),%edx
 16a:	48 63 d2             	movslq %edx,%rdx
 16d:	48 83 c2 01          	add    $0x1,%rdx
 171:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
 178:	00 
 179:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 17d:	48 01 ca             	add    %rcx,%rdx
 180:	48 8b 00             	mov    (%rax),%rax
 183:	48 89 02             	mov    %rax,(%rdx)
 186:	83 6d f0 01          	subl   $0x1,-0x10(%rbp)
 18a:	8b 45 f0             	mov    -0x10(%rbp),%eax
 18d:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
 190:	7d c1                	jge    153 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x153>
 192:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
 196:	89 c7                	mov    %eax,%edi
 198:	e8 00 00 00 00       	call   19d <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x19d>
 19d:	8b 55 e4             	mov    -0x1c(%rbp),%edx
 1a0:	48 63 d2             	movslq %edx,%rdx
 1a3:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
 1aa:	00 
 1ab:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1b2 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x1b2>
 1b2:	89 04 11             	mov    %eax,(%rcx,%rdx,1)
 1b5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 1b8:	48 98                	cltq   
 1ba:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
 1c1:	00 
 1c2:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 1c9 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x1c9>
 1c9:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
 1cd:	66 89 04 11          	mov    %ax,(%rcx,%rdx,1)
 1d1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 1d4:	48 98                	cltq   
 1d6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
 1dd:	00 
 1de:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1e5 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x1e5>
 1e5:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
 1e9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
 1ec:	48 98                	cltq   
 1ee:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
 1f5:	00 
 1f6:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 1fd <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x1fd>
 1fd:	8b 14 02             	mov    (%rdx,%rax,1),%edx
 200:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 204:	89 10                	mov    %edx,(%rax)
 206:	eb 5c                	jmp    264 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x264>
 208:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
 20c:	89 c7                	mov    %eax,%edi
 20e:	e8 00 00 00 00       	call   213 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x213>
 213:	8b 55 e8             	mov    -0x18(%rbp),%edx
 216:	48 63 d2             	movslq %edx,%rdx
 219:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
 220:	00 
 221:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 228 <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x228>
 228:	89 04 11             	mov    %eax,(%rcx,%rdx,1)
 22b:	8b 45 e8             	mov    -0x18(%rbp),%eax
 22e:	48 98                	cltq   
 230:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
 237:	00 
 238:	48 8d 15 00 00 00 00 	lea    0x0(%rip),%rdx        # 23f <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x23f>
 23f:	0f b7 45 d4          	movzwl -0x2c(%rbp),%eax
 243:	66 89 04 11          	mov    %ax,(%rcx,%rdx,1)
 247:	8b 45 e8             	mov    -0x18(%rbp),%eax
 24a:	48 98                	cltq   
 24c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
 253:	00 
 254:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 25b <E131Controller::GetSequenceNumber(unsigned short, unsigned int&)+0x25b>
 25b:	8b 14 02             	mov    (%rdx,%rax,1),%edx
 25e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 262:	89 10                	mov    %edx,(%rax)
 264:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 268:	0f b7 40 0a          	movzwl 0xa(%rax),%eax
 26c:	8d 50 01             	lea    0x1(%rax),%edx
 26f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 273:	66 89 50 0a          	mov    %dx,0xa(%rax)
 277:	b8 00 00 00 00       	mov    $0x0,%eax
 27c:	c9                   	leave  
 27d:	c3                   	ret    

Disassembly of section .text._ZN14E131Controller5PrintEv:

0000000000000000 <E131Controller::Print()>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp
   5:	48 89 e5             	mov    %rsp,%rbp
   8:	48 83 ec 10          	sub    $0x10,%rsp
   c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  10:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 17 <E131Controller::Print()+0x17>
  17:	48 89 c7             	mov    %rax,%rdi
  1a:	e8 00 00 00 00       	call   1f <E131Controller::Print()+0x1f>
  1f:	be 00 02 00 00       	mov    $0x200,%esi
  24:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 2b <E131Controller::Print()+0x2b>
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	b8 00 00 00 00       	mov    $0x0,%eax
  33:	e8 00 00 00 00       	call   38 <E131Controller::Print()+0x38>
  38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3c:	0f b7 40 14          	movzwl 0x14(%rax),%eax
  40:	66 85 c0             	test   %ax,%ax
  43:	74 23                	je     68 <E131Controller::Print()+0x68>
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	0f b7 40 14          	movzwl 0x14(%rax),%eax
  4d:	0f b7 c0             	movzwl %ax,%eax
  50:	89 c6                	mov    %eax,%esi
  52:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 59 <E131Controller::Print()+0x59>
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	b8 00 00 00 00       	mov    $0x0,%eax
  61:	e8 00 00 00 00       	call   66 <E131Controller::Print()+0x66>
  66:	eb 0f                	jmp    77 <E131Controller::Print()+0x77>
  68:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 6f <E131Controller::Print()+0x6f>
  6f:	48 89 c7             	mov    %rax,%rdi
  72:	e8 00 00 00 00       	call   77 <E131Controller::Print()+0x77>
  77:	90                   	nop
  78:	c9                   	leave  
  79:	c3                   	ret    
